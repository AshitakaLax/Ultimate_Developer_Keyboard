
SimpleKeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bb74  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000334  20000000  0000bb74  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006a34  20000334  0000bea8  00018334  2**2
                  ALLOC
  3 .stack        00000b00  20006d68  000128dc  00018334  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018334  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001835c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002d465  00000000  00000000  000183b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004948  00000000  00000000  0004581c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006617  00000000  00000000  0004a164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012a8  00000000  00000000  0005077b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010a8  00000000  00000000  00051a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000221da  00000000  00000000  00052acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b3ad  00000000  00000000  00074ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097578  00000000  00000000  00090052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003ed8  00000000  00000000  001275cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20007868 	.word	0x20007868
       4:	0000aacd 	.word	0x0000aacd
       8:	0000abbd 	.word	0x0000abbd
       c:	0000abbd 	.word	0x0000abbd
	...
      2c:	0000abbd 	.word	0x0000abbd
	...
      38:	0000abbd 	.word	0x0000abbd
      3c:	0000abbd 	.word	0x0000abbd
      40:	0000abbd 	.word	0x0000abbd
      44:	0000abbd 	.word	0x0000abbd
      48:	0000abbd 	.word	0x0000abbd
      4c:	0000abbd 	.word	0x0000abbd
      50:	00004f5d 	.word	0x00004f5d
      54:	0000abbd 	.word	0x0000abbd
      58:	0000abbd 	.word	0x0000abbd
      5c:	0000a73d 	.word	0x0000a73d
      60:	0000abbd 	.word	0x0000abbd
      64:	00005ac1 	.word	0x00005ac1
      68:	00005ad5 	.word	0x00005ad5
      6c:	00005ae9 	.word	0x00005ae9
      70:	00005afd 	.word	0x00005afd
      74:	00005b11 	.word	0x00005b11
      78:	00005b25 	.word	0x00005b25
      7c:	0000abbd 	.word	0x0000abbd
      80:	0000abbd 	.word	0x0000abbd
      84:	0000abbd 	.word	0x0000abbd
      88:	0000abbd 	.word	0x0000abbd
      8c:	0000abbd 	.word	0x0000abbd
      90:	0000abbd 	.word	0x0000abbd
      94:	0000abbd 	.word	0x0000abbd
      98:	0000abbd 	.word	0x0000abbd
      9c:	0000abbd 	.word	0x0000abbd
      a0:	0000abbd 	.word	0x0000abbd
      a4:	0000abbd 	.word	0x0000abbd
      a8:	0000abbd 	.word	0x0000abbd
      ac:	0000abbd 	.word	0x0000abbd

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000334 	.word	0x20000334
      d0:	00000000 	.word	0x00000000
      d4:	0000bb74 	.word	0x0000bb74

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000bb74 	.word	0x0000bb74
     104:	20000338 	.word	0x20000338
     108:	0000bb74 	.word	0x0000bb74
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b580      	push	{r7, lr}
     112:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     114:	2000      	movs	r0, #0
     116:	4b10      	ldr	r3, [pc, #64]	; (158 <delay_init+0x48>)
     118:	4798      	blx	r3
     11a:	1c02      	adds	r2, r0, #0
     11c:	4b0f      	ldr	r3, [pc, #60]	; (15c <delay_init+0x4c>)
     11e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     120:	4b0e      	ldr	r3, [pc, #56]	; (15c <delay_init+0x4c>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	4b0e      	ldr	r3, [pc, #56]	; (160 <delay_init+0x50>)
     126:	1c10      	adds	r0, r2, #0
     128:	22fa      	movs	r2, #250	; 0xfa
     12a:	0091      	lsls	r1, r2, #2
     12c:	4798      	blx	r3
     12e:	1c03      	adds	r3, r0, #0
     130:	1c1a      	adds	r2, r3, #0
     132:	4b0a      	ldr	r3, [pc, #40]	; (15c <delay_init+0x4c>)
     134:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <delay_init+0x4c>)
     138:	681a      	ldr	r2, [r3, #0]
     13a:	4b09      	ldr	r3, [pc, #36]	; (160 <delay_init+0x50>)
     13c:	1c10      	adds	r0, r2, #0
     13e:	22fa      	movs	r2, #250	; 0xfa
     140:	0091      	lsls	r1, r2, #2
     142:	4798      	blx	r3
     144:	1c03      	adds	r3, r0, #0
     146:	1c1a      	adds	r2, r3, #0
     148:	4b06      	ldr	r3, [pc, #24]	; (164 <delay_init+0x54>)
     14a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     14c:	4b06      	ldr	r3, [pc, #24]	; (168 <delay_init+0x58>)
     14e:	2205      	movs	r2, #5
     150:	601a      	str	r2, [r3, #0]
}
     152:	46bd      	mov	sp, r7
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00007011 	.word	0x00007011
     15c:	20000000 	.word	0x20000000
     160:	0000b669 	.word	0x0000b669
     164:	20000004 	.word	0x20000004
     168:	e000e010 	.word	0xe000e010

0000016c <initStandardKey>:
#include "Salloc.h"
#include "Key.h"
//here we will create all of the keys that there are

GENERIC_KEY * initStandardKey(uint8_t hid_key, uint8_t hid_modifier)
{
     16c:	b580      	push	{r7, lr}
     16e:	b084      	sub	sp, #16
     170:	af00      	add	r7, sp, #0
     172:	1c0a      	adds	r2, r1, #0
     174:	1dfb      	adds	r3, r7, #7
     176:	1c01      	adds	r1, r0, #0
     178:	7019      	strb	r1, [r3, #0]
     17a:	1dbb      	adds	r3, r7, #6
     17c:	701a      	strb	r2, [r3, #0]
	//Allocate the Ram for the key from the salloc	
	//if we want to support some other source we can add a different one
	STANDARD_KEY *key = (STANDARD_KEY*)salloc(sizeof(STANDARD_KEY));
     17e:	2003      	movs	r0, #3
     180:	4b09      	ldr	r3, [pc, #36]	; (1a8 <initStandardKey+0x3c>)
     182:	4798      	blx	r3
     184:	1c03      	adds	r3, r0, #0
     186:	60fb      	str	r3, [r7, #12]
	key->type = STANDARD_KEY_TYPE;
     188:	68fb      	ldr	r3, [r7, #12]
     18a:	2200      	movs	r2, #0
     18c:	701a      	strb	r2, [r3, #0]
	key->hid = hid_key;
     18e:	68fb      	ldr	r3, [r7, #12]
     190:	1dfa      	adds	r2, r7, #7
     192:	7812      	ldrb	r2, [r2, #0]
     194:	705a      	strb	r2, [r3, #1]
	key->modifiers = hid_modifier;
     196:	68fb      	ldr	r3, [r7, #12]
     198:	1dba      	adds	r2, r7, #6
     19a:	7812      	ldrb	r2, [r2, #0]
     19c:	709a      	strb	r2, [r3, #2]
	return (GENERIC_KEY*)key;
     19e:	68fb      	ldr	r3, [r7, #12]
}
     1a0:	1c18      	adds	r0, r3, #0
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}
     1a8:	0000abc5 	.word	0x0000abc5

000001ac <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
     1ac:	b580      	push	{r7, lr}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
     1b2:	6078      	str	r0, [r7, #4]
	return pin >> 5;
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	095b      	lsrs	r3, r3, #5
}
     1b8:	1c18      	adds	r0, r3, #0
     1ba:	46bd      	mov	sp, r7
     1bc:	b002      	add	sp, #8
     1be:	bd80      	pop	{r7, pc}

000001c0 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
     1c0:	b580      	push	{r7, lr}
     1c2:	b082      	sub	sp, #8
     1c4:	af00      	add	r7, sp, #0
     1c6:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	01db      	lsls	r3, r3, #7
     1cc:	4a02      	ldr	r2, [pc, #8]	; (1d8 <arch_ioport_port_to_base+0x18>)
     1ce:	189b      	adds	r3, r3, r2
}
     1d0:	1c18      	adds	r0, r3, #0
     1d2:	46bd      	mov	sp, r7
     1d4:	b002      	add	sp, #8
     1d6:	bd80      	pop	{r7, pc}
     1d8:	41004400 	.word	0x41004400

000001dc <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b082      	sub	sp, #8
     1e0:	af00      	add	r7, sp, #0
     1e2:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	1c18      	adds	r0, r3, #0
     1e8:	4b05      	ldr	r3, [pc, #20]	; (200 <arch_ioport_pin_to_base+0x24>)
     1ea:	4798      	blx	r3
     1ec:	1c03      	adds	r3, r0, #0
     1ee:	1c18      	adds	r0, r3, #0
     1f0:	4b04      	ldr	r3, [pc, #16]	; (204 <arch_ioport_pin_to_base+0x28>)
     1f2:	4798      	blx	r3
     1f4:	1c03      	adds	r3, r0, #0
}
     1f6:	1c18      	adds	r0, r3, #0
     1f8:	46bd      	mov	sp, r7
     1fa:	b002      	add	sp, #8
     1fc:	bd80      	pop	{r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	000001ad 	.word	0x000001ad
     204:	000001c1 	.word	0x000001c1

00000208 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
     208:	b580      	push	{r7, lr}
     20a:	b082      	sub	sp, #8
     20c:	af00      	add	r7, sp, #0
     20e:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
     210:	687a      	ldr	r2, [r7, #4]
     212:	231f      	movs	r3, #31
     214:	4013      	ands	r3, r2
     216:	2201      	movs	r2, #1
     218:	1c11      	adds	r1, r2, #0
     21a:	4099      	lsls	r1, r3
     21c:	1c0b      	adds	r3, r1, #0
}
     21e:	1c18      	adds	r0, r3, #0
     220:	46bd      	mov	sp, r7
     222:	b002      	add	sp, #8
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)

00000228 <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
     228:	b580      	push	{r7, lr}
     22a:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
     22c:	46bd      	mov	sp, r7
     22e:	bd80      	pop	{r7, pc}

00000230 <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
     230:	b580      	push	{r7, lr}
     232:	b08a      	sub	sp, #40	; 0x28
     234:	af00      	add	r7, sp, #0
     236:	60f8      	str	r0, [r7, #12]
     238:	60b9      	str	r1, [r7, #8]
     23a:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
     23c:	68fb      	ldr	r3, [r7, #12]
     23e:	1c18      	adds	r0, r3, #0
     240:	4b2d      	ldr	r3, [pc, #180]	; (2f8 <arch_ioport_set_port_mode+0xc8>)
     242:	4798      	blx	r3
     244:	1c03      	adds	r3, r0, #0
     246:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
     248:	2300      	movs	r3, #0
     24a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
     24c:	2300      	movs	r3, #0
     24e:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
     250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     252:	2280      	movs	r2, #128	; 0x80
     254:	0292      	lsls	r2, r2, #10
     256:	4313      	orrs	r3, r2
     258:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
     25a:	687a      	ldr	r2, [r7, #4]
     25c:	2320      	movs	r3, #32
     25e:	4013      	ands	r3, r2
     260:	d103      	bne.n	26a <arch_ioport_set_port_mode+0x3a>
     262:	687a      	ldr	r2, [r7, #4]
     264:	2310      	movs	r3, #16
     266:	4013      	ands	r3, r2
     268:	d004      	beq.n	274 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
     26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	02d2      	lsls	r2, r2, #11
     270:	4313      	orrs	r3, r2
     272:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
     274:	687a      	ldr	r2, [r7, #4]
     276:	2380      	movs	r3, #128	; 0x80
     278:	4013      	ands	r3, r2
     27a:	d004      	beq.n	286 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
     27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     27e:	2280      	movs	r2, #128	; 0x80
     280:	03d2      	lsls	r2, r2, #15
     282:	4313      	orrs	r3, r2
     284:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
     286:	687a      	ldr	r2, [r7, #4]
     288:	230f      	movs	r3, #15
     28a:	4013      	ands	r3, r2
     28c:	061b      	lsls	r3, r3, #24
     28e:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
     290:	68bb      	ldr	r3, [r7, #8]
     292:	041b      	lsls	r3, r3, #16
     294:	0c1b      	lsrs	r3, r3, #16
     296:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
     298:	68bb      	ldr	r3, [r7, #8]
     29a:	0c1b      	lsrs	r3, r3, #16
     29c:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     29e:	69ba      	ldr	r2, [r7, #24]
     2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     2a2:	431a      	orrs	r2, r3
			config_mask | config_mux |
     2a4:	69fb      	ldr	r3, [r7, #28]
     2a6:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     2a8:	22a0      	movs	r2, #160	; 0xa0
     2aa:	05d2      	lsls	r2, r2, #23
     2ac:	431a      	orrs	r2, r3
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;

	uint32_t lower_pin_mask = (mask & 0xFFFF);
	uint32_t upper_pin_mask = (mask >> 16);

	base->WRCONFIG.reg =
     2ae:	6a3b      	ldr	r3, [r7, #32]
     2b0:	629a      	str	r2, [r3, #40]	; 0x28
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     2b2:	697a      	ldr	r2, [r7, #20]
     2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     2b6:	431a      	orrs	r2, r3
			config_mask | config_mux |
     2b8:	69fb      	ldr	r3, [r7, #28]
     2ba:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     2bc:	22d0      	movs	r2, #208	; 0xd0
     2be:	0612      	lsls	r2, r2, #24
     2c0:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
     2c2:	6a3b      	ldr	r3, [r7, #32]
     2c4:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
     2c6:	687a      	ldr	r2, [r7, #4]
     2c8:	2320      	movs	r3, #32
     2ca:	4013      	ands	r3, r2
     2cc:	d006      	beq.n	2dc <arch_ioport_set_port_mode+0xac>
		base->OUTCLR.reg |= mask;
     2ce:	6a3b      	ldr	r3, [r7, #32]
     2d0:	695a      	ldr	r2, [r3, #20]
     2d2:	68bb      	ldr	r3, [r7, #8]
     2d4:	431a      	orrs	r2, r3
     2d6:	6a3b      	ldr	r3, [r7, #32]
     2d8:	615a      	str	r2, [r3, #20]
     2da:	e009      	b.n	2f0 <arch_ioport_set_port_mode+0xc0>
	}
	else if (mode & IOPORT_MODE_PULLUP) {
     2dc:	687a      	ldr	r2, [r7, #4]
     2de:	2310      	movs	r3, #16
     2e0:	4013      	ands	r3, r2
     2e2:	d005      	beq.n	2f0 <arch_ioport_set_port_mode+0xc0>
		base->OUTSET.reg |= mask;
     2e4:	6a3b      	ldr	r3, [r7, #32]
     2e6:	699a      	ldr	r2, [r3, #24]
     2e8:	68bb      	ldr	r3, [r7, #8]
     2ea:	431a      	orrs	r2, r3
     2ec:	6a3b      	ldr	r3, [r7, #32]
     2ee:	619a      	str	r2, [r3, #24]
	}
}
     2f0:	46bd      	mov	sp, r7
     2f2:	b00a      	add	sp, #40	; 0x28
     2f4:	bd80      	pop	{r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	000001c1 	.word	0x000001c1

000002fc <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
     2fc:	b590      	push	{r4, r7, lr}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
     306:	687b      	ldr	r3, [r7, #4]
     308:	1c18      	adds	r0, r3, #0
     30a:	4b08      	ldr	r3, [pc, #32]	; (32c <arch_ioport_set_pin_mode+0x30>)
     30c:	4798      	blx	r3
     30e:	1c04      	adds	r4, r0, #0
     310:	687b      	ldr	r3, [r7, #4]
     312:	1c18      	adds	r0, r3, #0
     314:	4b06      	ldr	r3, [pc, #24]	; (330 <arch_ioport_set_pin_mode+0x34>)
     316:	4798      	blx	r3
     318:	1c02      	adds	r2, r0, #0
     31a:	683b      	ldr	r3, [r7, #0]
     31c:	1c20      	adds	r0, r4, #0
     31e:	1c11      	adds	r1, r2, #0
     320:	1c1a      	adds	r2, r3, #0
     322:	4b04      	ldr	r3, [pc, #16]	; (334 <arch_ioport_set_pin_mode+0x38>)
     324:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
     326:	46bd      	mov	sp, r7
     328:	b003      	add	sp, #12
     32a:	bd90      	pop	{r4, r7, pc}
     32c:	000001ad 	.word	0x000001ad
     330:	00000209 	.word	0x00000209
     334:	00000231 	.word	0x00000231

00000338 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     338:	b580      	push	{r7, lr}
     33a:	b084      	sub	sp, #16
     33c:	af00      	add	r7, sp, #0
     33e:	6078      	str	r0, [r7, #4]
     340:	1c0a      	adds	r2, r1, #0
     342:	1cfb      	adds	r3, r7, #3
     344:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
     346:	687b      	ldr	r3, [r7, #4]
     348:	1c18      	adds	r0, r3, #0
     34a:	4b18      	ldr	r3, [pc, #96]	; (3ac <arch_ioport_set_pin_dir+0x74>)
     34c:	4798      	blx	r3
     34e:	1c03      	adds	r3, r0, #0
     350:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
     352:	1cfb      	adds	r3, r7, #3
     354:	781b      	ldrb	r3, [r3, #0]
     356:	2b01      	cmp	r3, #1
     358:	d107      	bne.n	36a <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	1c18      	adds	r0, r3, #0
     35e:	4b14      	ldr	r3, [pc, #80]	; (3b0 <arch_ioport_set_pin_dir+0x78>)
     360:	4798      	blx	r3
     362:	1c02      	adds	r2, r0, #0
     364:	68fb      	ldr	r3, [r7, #12]
     366:	609a      	str	r2, [r3, #8]
     368:	e00a      	b.n	380 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
     36a:	1cfb      	adds	r3, r7, #3
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b00      	cmp	r3, #0
     370:	d106      	bne.n	380 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
     372:	687b      	ldr	r3, [r7, #4]
     374:	1c18      	adds	r0, r3, #0
     376:	4b0e      	ldr	r3, [pc, #56]	; (3b0 <arch_ioport_set_pin_dir+0x78>)
     378:	4798      	blx	r3
     37a:	1c02      	adds	r2, r0, #0
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
     380:	687b      	ldr	r3, [r7, #4]
     382:	1c18      	adds	r0, r3, #0
     384:	4b0b      	ldr	r3, [pc, #44]	; (3b4 <arch_ioport_set_pin_dir+0x7c>)
     386:	4798      	blx	r3
     388:	1c03      	adds	r3, r0, #0
     38a:	68f9      	ldr	r1, [r7, #12]
     38c:	2240      	movs	r2, #64	; 0x40
     38e:	18c9      	adds	r1, r1, r3
     390:	188a      	adds	r2, r1, r2
     392:	7812      	ldrb	r2, [r2, #0]
     394:	b2d2      	uxtb	r2, r2
     396:	2102      	movs	r1, #2
     398:	430a      	orrs	r2, r1
     39a:	b2d2      	uxtb	r2, r2
     39c:	68f8      	ldr	r0, [r7, #12]
     39e:	2140      	movs	r1, #64	; 0x40
     3a0:	18c3      	adds	r3, r0, r3
     3a2:	185b      	adds	r3, r3, r1
     3a4:	701a      	strb	r2, [r3, #0]
}
     3a6:	46bd      	mov	sp, r7
     3a8:	b004      	add	sp, #16
     3aa:	bd80      	pop	{r7, pc}
     3ac:	000001dd 	.word	0x000001dd
     3b0:	00000209 	.word	0x00000209
     3b4:	000001ad 	.word	0x000001ad

000003b8 <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
     3b8:	b590      	push	{r4, r7, lr}
     3ba:	b083      	sub	sp, #12
     3bc:	af00      	add	r7, sp, #0
     3be:	6078      	str	r0, [r7, #4]
     3c0:	1c0a      	adds	r2, r1, #0
     3c2:	1cfb      	adds	r3, r7, #3
     3c4:	701a      	strb	r2, [r3, #0]
	if (level) {
     3c6:	1cfb      	adds	r3, r7, #3
     3c8:	781b      	ldrb	r3, [r3, #0]
     3ca:	2b00      	cmp	r3, #0
     3cc:	d00b      	beq.n	3e6 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     3ce:	687b      	ldr	r3, [r7, #4]
     3d0:	1c18      	adds	r0, r3, #0
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <arch_ioport_set_pin_level+0x4c>)
     3d4:	4798      	blx	r3
     3d6:	1c04      	adds	r4, r0, #0
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	1c18      	adds	r0, r3, #0
     3dc:	4b0a      	ldr	r3, [pc, #40]	; (408 <arch_ioport_set_pin_level+0x50>)
     3de:	4798      	blx	r3
     3e0:	1c03      	adds	r3, r0, #0
     3e2:	61a3      	str	r3, [r4, #24]
     3e4:	e00a      	b.n	3fc <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	1c18      	adds	r0, r3, #0
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <arch_ioport_set_pin_level+0x4c>)
     3ec:	4798      	blx	r3
     3ee:	1c04      	adds	r4, r0, #0
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	4b04      	ldr	r3, [pc, #16]	; (408 <arch_ioport_set_pin_level+0x50>)
     3f6:	4798      	blx	r3
     3f8:	1c03      	adds	r3, r0, #0
     3fa:	6163      	str	r3, [r4, #20]
	}
}
     3fc:	46bd      	mov	sp, r7
     3fe:	b003      	add	sp, #12
     400:	bd90      	pop	{r4, r7, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	000001dd 	.word	0x000001dd
     408:	00000209 	.word	0x00000209

0000040c <arch_ioport_get_pin_level>:
	base->OUTSET.reg = mask & level;
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
     40c:	b590      	push	{r4, r7, lr}
     40e:	b083      	sub	sp, #12
     410:	af00      	add	r7, sp, #0
     412:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
     414:	687b      	ldr	r3, [r7, #4]
     416:	1c18      	adds	r0, r3, #0
     418:	4b08      	ldr	r3, [pc, #32]	; (43c <arch_ioport_get_pin_level+0x30>)
     41a:	4798      	blx	r3
     41c:	1c03      	adds	r3, r0, #0
     41e:	6a1c      	ldr	r4, [r3, #32]
     420:	687b      	ldr	r3, [r7, #4]
     422:	1c18      	adds	r0, r3, #0
     424:	4b06      	ldr	r3, [pc, #24]	; (440 <arch_ioport_get_pin_level+0x34>)
     426:	4798      	blx	r3
     428:	1c03      	adds	r3, r0, #0
     42a:	4023      	ands	r3, r4
     42c:	1e5a      	subs	r2, r3, #1
     42e:	4193      	sbcs	r3, r2
     430:	b2db      	uxtb	r3, r3
}
     432:	1c18      	adds	r0, r3, #0
     434:	46bd      	mov	sp, r7
     436:	b003      	add	sp, #12
     438:	bd90      	pop	{r4, r7, pc}
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	000001dd 	.word	0x000001dd
     440:	00000209 	.word	0x00000209

00000444 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
     444:	b580      	push	{r7, lr}
     446:	af00      	add	r7, sp, #0
	arch_ioport_init();
     448:	4b01      	ldr	r3, [pc, #4]	; (450 <ioport_init+0xc>)
     44a:	4798      	blx	r3
}
     44c:	46bd      	mov	sp, r7
     44e:	bd80      	pop	{r7, pc}
     450:	00000229 	.word	0x00000229

00000454 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
     45c:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
     45e:	687a      	ldr	r2, [r7, #4]
     460:	683b      	ldr	r3, [r7, #0]
     462:	1c10      	adds	r0, r2, #0
     464:	1c19      	adds	r1, r3, #0
     466:	4b02      	ldr	r3, [pc, #8]	; (470 <ioport_set_pin_mode+0x1c>)
     468:	4798      	blx	r3
}
     46a:	46bd      	mov	sp, r7
     46c:	b002      	add	sp, #8
     46e:	bd80      	pop	{r7, pc}
     470:	000002fd 	.word	0x000002fd

00000474 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     474:	b580      	push	{r7, lr}
     476:	b082      	sub	sp, #8
     478:	af00      	add	r7, sp, #0
     47a:	6078      	str	r0, [r7, #4]
     47c:	1c0a      	adds	r2, r1, #0
     47e:	1cfb      	adds	r3, r7, #3
     480:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
     482:	687a      	ldr	r2, [r7, #4]
     484:	1cfb      	adds	r3, r7, #3
     486:	781b      	ldrb	r3, [r3, #0]
     488:	1c10      	adds	r0, r2, #0
     48a:	1c19      	adds	r1, r3, #0
     48c:	4b02      	ldr	r3, [pc, #8]	; (498 <ioport_set_pin_dir+0x24>)
     48e:	4798      	blx	r3
}
     490:	46bd      	mov	sp, r7
     492:	b002      	add	sp, #8
     494:	bd80      	pop	{r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00000339 	.word	0x00000339

0000049c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     49c:	b580      	push	{r7, lr}
     49e:	b082      	sub	sp, #8
     4a0:	af00      	add	r7, sp, #0
     4a2:	6078      	str	r0, [r7, #4]
     4a4:	1c0a      	adds	r2, r1, #0
     4a6:	1cfb      	adds	r3, r7, #3
     4a8:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
     4aa:	687a      	ldr	r2, [r7, #4]
     4ac:	1cfb      	adds	r3, r7, #3
     4ae:	781b      	ldrb	r3, [r3, #0]
     4b0:	1c10      	adds	r0, r2, #0
     4b2:	1c19      	adds	r1, r3, #0
     4b4:	4b02      	ldr	r3, [pc, #8]	; (4c0 <ioport_set_pin_level+0x24>)
     4b6:	4798      	blx	r3
}
     4b8:	46bd      	mov	sp, r7
     4ba:	b002      	add	sp, #8
     4bc:	bd80      	pop	{r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	000003b9 	.word	0x000003b9

000004c4 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     4c4:	b580      	push	{r7, lr}
     4c6:	b082      	sub	sp, #8
     4c8:	af00      	add	r7, sp, #0
     4ca:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	1c18      	adds	r0, r3, #0
     4d0:	4b03      	ldr	r3, [pc, #12]	; (4e0 <ioport_get_pin_level+0x1c>)
     4d2:	4798      	blx	r3
     4d4:	1c03      	adds	r3, r0, #0
}
     4d6:	1c18      	adds	r0, r3, #0
     4d8:	46bd      	mov	sp, r7
     4da:	b002      	add	sp, #8
     4dc:	bd80      	pop	{r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	0000040d 	.word	0x0000040d

000004e4 <initKeys>:
}LAYER_MANAGER;

static LAYER_MANAGER boardLayerManager;

void initKeys(void)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
	//here we will setup the keys for the specific boards
	//need an array of pointers
	uint8_t keyIndex = 0;
     4ea:	1dfb      	adds	r3, r7, #7
     4ec:	2200      	movs	r2, #0
     4ee:	701a      	strb	r2, [r3, #0]
	//create the keys and handle them
	GENERIC_KEY * tempKey;

	//Top Row left hand
	tempKey = initStandardKey(HID_PLUS, HID_MODIFIER_NONE);
     4f0:	202e      	movs	r0, #46	; 0x2e
     4f2:	2100      	movs	r1, #0
     4f4:	4bfd      	ldr	r3, [pc, #1012]	; (8ec <initKeys+0x408>)
     4f6:	4798      	blx	r3
     4f8:	1c03      	adds	r3, r0, #0
     4fa:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     4fc:	1dfb      	adds	r3, r7, #7
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	1dfa      	adds	r2, r7, #7
     502:	1c59      	adds	r1, r3, #1
     504:	7011      	strb	r1, [r2, #0]
     506:	683a      	ldr	r2, [r7, #0]
     508:	1c18      	adds	r0, r3, #0
     50a:	1c11      	adds	r1, r2, #0
     50c:	2200      	movs	r2, #0
     50e:	4bf8      	ldr	r3, [pc, #992]	; (8f0 <initKeys+0x40c>)
     510:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_1, HID_MODIFIER_NONE);
     512:	201e      	movs	r0, #30
     514:	2100      	movs	r1, #0
     516:	4bf5      	ldr	r3, [pc, #980]	; (8ec <initKeys+0x408>)
     518:	4798      	blx	r3
     51a:	1c03      	adds	r3, r0, #0
     51c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     51e:	1dfb      	adds	r3, r7, #7
     520:	781b      	ldrb	r3, [r3, #0]
     522:	1dfa      	adds	r2, r7, #7
     524:	1c59      	adds	r1, r3, #1
     526:	7011      	strb	r1, [r2, #0]
     528:	683a      	ldr	r2, [r7, #0]
     52a:	1c18      	adds	r0, r3, #0
     52c:	1c11      	adds	r1, r2, #0
     52e:	2200      	movs	r2, #0
     530:	4bef      	ldr	r3, [pc, #956]	; (8f0 <initKeys+0x40c>)
     532:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_2, HID_MODIFIER_NONE);
     534:	201f      	movs	r0, #31
     536:	2100      	movs	r1, #0
     538:	4bec      	ldr	r3, [pc, #944]	; (8ec <initKeys+0x408>)
     53a:	4798      	blx	r3
     53c:	1c03      	adds	r3, r0, #0
     53e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     540:	1dfb      	adds	r3, r7, #7
     542:	781b      	ldrb	r3, [r3, #0]
     544:	1dfa      	adds	r2, r7, #7
     546:	1c59      	adds	r1, r3, #1
     548:	7011      	strb	r1, [r2, #0]
     54a:	683a      	ldr	r2, [r7, #0]
     54c:	1c18      	adds	r0, r3, #0
     54e:	1c11      	adds	r1, r2, #0
     550:	2200      	movs	r2, #0
     552:	4be7      	ldr	r3, [pc, #924]	; (8f0 <initKeys+0x40c>)
     554:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_3, HID_MODIFIER_NONE);
     556:	2020      	movs	r0, #32
     558:	2100      	movs	r1, #0
     55a:	4be4      	ldr	r3, [pc, #912]	; (8ec <initKeys+0x408>)
     55c:	4798      	blx	r3
     55e:	1c03      	adds	r3, r0, #0
     560:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     562:	1dfb      	adds	r3, r7, #7
     564:	781b      	ldrb	r3, [r3, #0]
     566:	1dfa      	adds	r2, r7, #7
     568:	1c59      	adds	r1, r3, #1
     56a:	7011      	strb	r1, [r2, #0]
     56c:	683a      	ldr	r2, [r7, #0]
     56e:	1c18      	adds	r0, r3, #0
     570:	1c11      	adds	r1, r2, #0
     572:	2200      	movs	r2, #0
     574:	4bde      	ldr	r3, [pc, #888]	; (8f0 <initKeys+0x40c>)
     576:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_4, HID_MODIFIER_NONE);
     578:	2021      	movs	r0, #33	; 0x21
     57a:	2100      	movs	r1, #0
     57c:	4bdb      	ldr	r3, [pc, #876]	; (8ec <initKeys+0x408>)
     57e:	4798      	blx	r3
     580:	1c03      	adds	r3, r0, #0
     582:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     584:	1dfb      	adds	r3, r7, #7
     586:	781b      	ldrb	r3, [r3, #0]
     588:	1dfa      	adds	r2, r7, #7
     58a:	1c59      	adds	r1, r3, #1
     58c:	7011      	strb	r1, [r2, #0]
     58e:	683a      	ldr	r2, [r7, #0]
     590:	1c18      	adds	r0, r3, #0
     592:	1c11      	adds	r1, r2, #0
     594:	2200      	movs	r2, #0
     596:	4bd6      	ldr	r3, [pc, #856]	; (8f0 <initKeys+0x40c>)
     598:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_5, HID_MODIFIER_NONE);
     59a:	2022      	movs	r0, #34	; 0x22
     59c:	2100      	movs	r1, #0
     59e:	4bd3      	ldr	r3, [pc, #844]	; (8ec <initKeys+0x408>)
     5a0:	4798      	blx	r3
     5a2:	1c03      	adds	r3, r0, #0
     5a4:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     5a6:	1dfb      	adds	r3, r7, #7
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	1dfa      	adds	r2, r7, #7
     5ac:	1c59      	adds	r1, r3, #1
     5ae:	7011      	strb	r1, [r2, #0]
     5b0:	683a      	ldr	r2, [r7, #0]
     5b2:	1c18      	adds	r0, r3, #0
     5b4:	1c11      	adds	r1, r2, #0
     5b6:	2200      	movs	r2, #0
     5b8:	4bcd      	ldr	r3, [pc, #820]	; (8f0 <initKeys+0x40c>)
     5ba:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_ESCAPE, HID_MODIFIER_NONE);
     5bc:	2029      	movs	r0, #41	; 0x29
     5be:	2100      	movs	r1, #0
     5c0:	4bca      	ldr	r3, [pc, #808]	; (8ec <initKeys+0x408>)
     5c2:	4798      	blx	r3
     5c4:	1c03      	adds	r3, r0, #0
     5c6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     5c8:	1dfb      	adds	r3, r7, #7
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	1dfa      	adds	r2, r7, #7
     5ce:	1c59      	adds	r1, r3, #1
     5d0:	7011      	strb	r1, [r2, #0]
     5d2:	683a      	ldr	r2, [r7, #0]
     5d4:	1c18      	adds	r0, r3, #0
     5d6:	1c11      	adds	r1, r2, #0
     5d8:	2200      	movs	r2, #0
     5da:	4bc5      	ldr	r3, [pc, #788]	; (8f0 <initKeys+0x40c>)
     5dc:	4798      	blx	r3
	

	//Second Row left hand
	tempKey = initStandardKey(HID_BACKSLASH, HID_MODIFIER_NONE);
     5de:	2031      	movs	r0, #49	; 0x31
     5e0:	2100      	movs	r1, #0
     5e2:	4bc2      	ldr	r3, [pc, #776]	; (8ec <initKeys+0x408>)
     5e4:	4798      	blx	r3
     5e6:	1c03      	adds	r3, r0, #0
     5e8:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     5ea:	1dfb      	adds	r3, r7, #7
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	1dfa      	adds	r2, r7, #7
     5f0:	1c59      	adds	r1, r3, #1
     5f2:	7011      	strb	r1, [r2, #0]
     5f4:	683a      	ldr	r2, [r7, #0]
     5f6:	1c18      	adds	r0, r3, #0
     5f8:	1c11      	adds	r1, r2, #0
     5fa:	2200      	movs	r2, #0
     5fc:	4bbc      	ldr	r3, [pc, #752]	; (8f0 <initKeys+0x40c>)
     5fe:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_Q, HID_MODIFIER_NONE);
     600:	2014      	movs	r0, #20
     602:	2100      	movs	r1, #0
     604:	4bb9      	ldr	r3, [pc, #740]	; (8ec <initKeys+0x408>)
     606:	4798      	blx	r3
     608:	1c03      	adds	r3, r0, #0
     60a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     60c:	1dfb      	adds	r3, r7, #7
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	1dfa      	adds	r2, r7, #7
     612:	1c59      	adds	r1, r3, #1
     614:	7011      	strb	r1, [r2, #0]
     616:	683a      	ldr	r2, [r7, #0]
     618:	1c18      	adds	r0, r3, #0
     61a:	1c11      	adds	r1, r2, #0
     61c:	2200      	movs	r2, #0
     61e:	4bb4      	ldr	r3, [pc, #720]	; (8f0 <initKeys+0x40c>)
     620:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_W, HID_MODIFIER_NONE);
     622:	201a      	movs	r0, #26
     624:	2100      	movs	r1, #0
     626:	4bb1      	ldr	r3, [pc, #708]	; (8ec <initKeys+0x408>)
     628:	4798      	blx	r3
     62a:	1c03      	adds	r3, r0, #0
     62c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     62e:	1dfb      	adds	r3, r7, #7
     630:	781b      	ldrb	r3, [r3, #0]
     632:	1dfa      	adds	r2, r7, #7
     634:	1c59      	adds	r1, r3, #1
     636:	7011      	strb	r1, [r2, #0]
     638:	683a      	ldr	r2, [r7, #0]
     63a:	1c18      	adds	r0, r3, #0
     63c:	1c11      	adds	r1, r2, #0
     63e:	2200      	movs	r2, #0
     640:	4bab      	ldr	r3, [pc, #684]	; (8f0 <initKeys+0x40c>)
     642:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_E, HID_MODIFIER_NONE);
     644:	2008      	movs	r0, #8
     646:	2100      	movs	r1, #0
     648:	4ba8      	ldr	r3, [pc, #672]	; (8ec <initKeys+0x408>)
     64a:	4798      	blx	r3
     64c:	1c03      	adds	r3, r0, #0
     64e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     650:	1dfb      	adds	r3, r7, #7
     652:	781b      	ldrb	r3, [r3, #0]
     654:	1dfa      	adds	r2, r7, #7
     656:	1c59      	adds	r1, r3, #1
     658:	7011      	strb	r1, [r2, #0]
     65a:	683a      	ldr	r2, [r7, #0]
     65c:	1c18      	adds	r0, r3, #0
     65e:	1c11      	adds	r1, r2, #0
     660:	2200      	movs	r2, #0
     662:	4ba3      	ldr	r3, [pc, #652]	; (8f0 <initKeys+0x40c>)
     664:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_R, HID_MODIFIER_NONE);
     666:	2015      	movs	r0, #21
     668:	2100      	movs	r1, #0
     66a:	4ba0      	ldr	r3, [pc, #640]	; (8ec <initKeys+0x408>)
     66c:	4798      	blx	r3
     66e:	1c03      	adds	r3, r0, #0
     670:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     672:	1dfb      	adds	r3, r7, #7
     674:	781b      	ldrb	r3, [r3, #0]
     676:	1dfa      	adds	r2, r7, #7
     678:	1c59      	adds	r1, r3, #1
     67a:	7011      	strb	r1, [r2, #0]
     67c:	683a      	ldr	r2, [r7, #0]
     67e:	1c18      	adds	r0, r3, #0
     680:	1c11      	adds	r1, r2, #0
     682:	2200      	movs	r2, #0
     684:	4b9a      	ldr	r3, [pc, #616]	; (8f0 <initKeys+0x40c>)
     686:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_T, HID_MODIFIER_NONE);
     688:	2017      	movs	r0, #23
     68a:	2100      	movs	r1, #0
     68c:	4b97      	ldr	r3, [pc, #604]	; (8ec <initKeys+0x408>)
     68e:	4798      	blx	r3
     690:	1c03      	adds	r3, r0, #0
     692:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     694:	1dfb      	adds	r3, r7, #7
     696:	781b      	ldrb	r3, [r3, #0]
     698:	1dfa      	adds	r2, r7, #7
     69a:	1c59      	adds	r1, r3, #1
     69c:	7011      	strb	r1, [r2, #0]
     69e:	683a      	ldr	r2, [r7, #0]
     6a0:	1c18      	adds	r0, r3, #0
     6a2:	1c11      	adds	r1, r2, #0
     6a4:	2200      	movs	r2, #0
     6a6:	4b92      	ldr	r3, [pc, #584]	; (8f0 <initKeys+0x40c>)
     6a8:	4798      	blx	r3
	
	//Layer Key
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     6aa:	200f      	movs	r0, #15
     6ac:	2100      	movs	r1, #0
     6ae:	4b8f      	ldr	r3, [pc, #572]	; (8ec <initKeys+0x408>)
     6b0:	4798      	blx	r3
     6b2:	1c03      	adds	r3, r0, #0
     6b4:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6b6:	1dfb      	adds	r3, r7, #7
     6b8:	781b      	ldrb	r3, [r3, #0]
     6ba:	1dfa      	adds	r2, r7, #7
     6bc:	1c59      	adds	r1, r3, #1
     6be:	7011      	strb	r1, [r2, #0]
     6c0:	683a      	ldr	r2, [r7, #0]
     6c2:	1c18      	adds	r0, r3, #0
     6c4:	1c11      	adds	r1, r2, #0
     6c6:	2200      	movs	r2, #0
     6c8:	4b89      	ldr	r3, [pc, #548]	; (8f0 <initKeys+0x40c>)
     6ca:	4798      	blx	r3
	
	//Row 3 left hand
	tempKey = initStandardKey(HID_TAB, HID_MODIFIER_NONE);
     6cc:	202b      	movs	r0, #43	; 0x2b
     6ce:	2100      	movs	r1, #0
     6d0:	4b86      	ldr	r3, [pc, #536]	; (8ec <initKeys+0x408>)
     6d2:	4798      	blx	r3
     6d4:	1c03      	adds	r3, r0, #0
     6d6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6d8:	1dfb      	adds	r3, r7, #7
     6da:	781b      	ldrb	r3, [r3, #0]
     6dc:	1dfa      	adds	r2, r7, #7
     6de:	1c59      	adds	r1, r3, #1
     6e0:	7011      	strb	r1, [r2, #0]
     6e2:	683a      	ldr	r2, [r7, #0]
     6e4:	1c18      	adds	r0, r3, #0
     6e6:	1c11      	adds	r1, r2, #0
     6e8:	2200      	movs	r2, #0
     6ea:	4b81      	ldr	r3, [pc, #516]	; (8f0 <initKeys+0x40c>)
     6ec:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_A, HID_MODIFIER_NONE);
     6ee:	2004      	movs	r0, #4
     6f0:	2100      	movs	r1, #0
     6f2:	4b7e      	ldr	r3, [pc, #504]	; (8ec <initKeys+0x408>)
     6f4:	4798      	blx	r3
     6f6:	1c03      	adds	r3, r0, #0
     6f8:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6fa:	1dfb      	adds	r3, r7, #7
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	1dfa      	adds	r2, r7, #7
     700:	1c59      	adds	r1, r3, #1
     702:	7011      	strb	r1, [r2, #0]
     704:	683a      	ldr	r2, [r7, #0]
     706:	1c18      	adds	r0, r3, #0
     708:	1c11      	adds	r1, r2, #0
     70a:	2200      	movs	r2, #0
     70c:	4b78      	ldr	r3, [pc, #480]	; (8f0 <initKeys+0x40c>)
     70e:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_S, HID_MODIFIER_NONE);
     710:	2016      	movs	r0, #22
     712:	2100      	movs	r1, #0
     714:	4b75      	ldr	r3, [pc, #468]	; (8ec <initKeys+0x408>)
     716:	4798      	blx	r3
     718:	1c03      	adds	r3, r0, #0
     71a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     71c:	1dfb      	adds	r3, r7, #7
     71e:	781b      	ldrb	r3, [r3, #0]
     720:	1dfa      	adds	r2, r7, #7
     722:	1c59      	adds	r1, r3, #1
     724:	7011      	strb	r1, [r2, #0]
     726:	683a      	ldr	r2, [r7, #0]
     728:	1c18      	adds	r0, r3, #0
     72a:	1c11      	adds	r1, r2, #0
     72c:	2200      	movs	r2, #0
     72e:	4b70      	ldr	r3, [pc, #448]	; (8f0 <initKeys+0x40c>)
     730:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_D, HID_MODIFIER_NONE);
     732:	2007      	movs	r0, #7
     734:	2100      	movs	r1, #0
     736:	4b6d      	ldr	r3, [pc, #436]	; (8ec <initKeys+0x408>)
     738:	4798      	blx	r3
     73a:	1c03      	adds	r3, r0, #0
     73c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     73e:	1dfb      	adds	r3, r7, #7
     740:	781b      	ldrb	r3, [r3, #0]
     742:	1dfa      	adds	r2, r7, #7
     744:	1c59      	adds	r1, r3, #1
     746:	7011      	strb	r1, [r2, #0]
     748:	683a      	ldr	r2, [r7, #0]
     74a:	1c18      	adds	r0, r3, #0
     74c:	1c11      	adds	r1, r2, #0
     74e:	2200      	movs	r2, #0
     750:	4b67      	ldr	r3, [pc, #412]	; (8f0 <initKeys+0x40c>)
     752:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_F, HID_MODIFIER_NONE);
     754:	2009      	movs	r0, #9
     756:	2100      	movs	r1, #0
     758:	4b64      	ldr	r3, [pc, #400]	; (8ec <initKeys+0x408>)
     75a:	4798      	blx	r3
     75c:	1c03      	adds	r3, r0, #0
     75e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     760:	1dfb      	adds	r3, r7, #7
     762:	781b      	ldrb	r3, [r3, #0]
     764:	1dfa      	adds	r2, r7, #7
     766:	1c59      	adds	r1, r3, #1
     768:	7011      	strb	r1, [r2, #0]
     76a:	683a      	ldr	r2, [r7, #0]
     76c:	1c18      	adds	r0, r3, #0
     76e:	1c11      	adds	r1, r2, #0
     770:	2200      	movs	r2, #0
     772:	4b5f      	ldr	r3, [pc, #380]	; (8f0 <initKeys+0x40c>)
     774:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_G, HID_MODIFIER_NONE);
     776:	200a      	movs	r0, #10
     778:	2100      	movs	r1, #0
     77a:	4b5c      	ldr	r3, [pc, #368]	; (8ec <initKeys+0x408>)
     77c:	4798      	blx	r3
     77e:	1c03      	adds	r3, r0, #0
     780:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     782:	1dfb      	adds	r3, r7, #7
     784:	781b      	ldrb	r3, [r3, #0]
     786:	1dfa      	adds	r2, r7, #7
     788:	1c59      	adds	r1, r3, #1
     78a:	7011      	strb	r1, [r2, #0]
     78c:	683a      	ldr	r2, [r7, #0]
     78e:	1c18      	adds	r0, r3, #0
     790:	1c11      	adds	r1, r2, #0
     792:	2200      	movs	r2, #0
     794:	4b56      	ldr	r3, [pc, #344]	; (8f0 <initKeys+0x40c>)
     796:	4798      	blx	r3
		
	//Row 4 left hand
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_SHIFT);
     798:	2000      	movs	r0, #0
     79a:	2102      	movs	r1, #2
     79c:	4b53      	ldr	r3, [pc, #332]	; (8ec <initKeys+0x408>)
     79e:	4798      	blx	r3
     7a0:	1c03      	adds	r3, r0, #0
     7a2:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7a4:	1dfb      	adds	r3, r7, #7
     7a6:	781b      	ldrb	r3, [r3, #0]
     7a8:	1dfa      	adds	r2, r7, #7
     7aa:	1c59      	adds	r1, r3, #1
     7ac:	7011      	strb	r1, [r2, #0]
     7ae:	683a      	ldr	r2, [r7, #0]
     7b0:	1c18      	adds	r0, r3, #0
     7b2:	1c11      	adds	r1, r2, #0
     7b4:	2200      	movs	r2, #0
     7b6:	4b4e      	ldr	r3, [pc, #312]	; (8f0 <initKeys+0x40c>)
     7b8:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_Z, HID_MODIFIER_NONE);
     7ba:	201d      	movs	r0, #29
     7bc:	2100      	movs	r1, #0
     7be:	4b4b      	ldr	r3, [pc, #300]	; (8ec <initKeys+0x408>)
     7c0:	4798      	blx	r3
     7c2:	1c03      	adds	r3, r0, #0
     7c4:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7c6:	1dfb      	adds	r3, r7, #7
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	1dfa      	adds	r2, r7, #7
     7cc:	1c59      	adds	r1, r3, #1
     7ce:	7011      	strb	r1, [r2, #0]
     7d0:	683a      	ldr	r2, [r7, #0]
     7d2:	1c18      	adds	r0, r3, #0
     7d4:	1c11      	adds	r1, r2, #0
     7d6:	2200      	movs	r2, #0
     7d8:	4b45      	ldr	r3, [pc, #276]	; (8f0 <initKeys+0x40c>)
     7da:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_X, HID_MODIFIER_NONE);
     7dc:	201b      	movs	r0, #27
     7de:	2100      	movs	r1, #0
     7e0:	4b42      	ldr	r3, [pc, #264]	; (8ec <initKeys+0x408>)
     7e2:	4798      	blx	r3
     7e4:	1c03      	adds	r3, r0, #0
     7e6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7e8:	1dfb      	adds	r3, r7, #7
     7ea:	781b      	ldrb	r3, [r3, #0]
     7ec:	1dfa      	adds	r2, r7, #7
     7ee:	1c59      	adds	r1, r3, #1
     7f0:	7011      	strb	r1, [r2, #0]
     7f2:	683a      	ldr	r2, [r7, #0]
     7f4:	1c18      	adds	r0, r3, #0
     7f6:	1c11      	adds	r1, r2, #0
     7f8:	2200      	movs	r2, #0
     7fa:	4b3d      	ldr	r3, [pc, #244]	; (8f0 <initKeys+0x40c>)
     7fc:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_C, HID_MODIFIER_NONE);
     7fe:	2006      	movs	r0, #6
     800:	2100      	movs	r1, #0
     802:	4b3a      	ldr	r3, [pc, #232]	; (8ec <initKeys+0x408>)
     804:	4798      	blx	r3
     806:	1c03      	adds	r3, r0, #0
     808:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     80a:	1dfb      	adds	r3, r7, #7
     80c:	781b      	ldrb	r3, [r3, #0]
     80e:	1dfa      	adds	r2, r7, #7
     810:	1c59      	adds	r1, r3, #1
     812:	7011      	strb	r1, [r2, #0]
     814:	683a      	ldr	r2, [r7, #0]
     816:	1c18      	adds	r0, r3, #0
     818:	1c11      	adds	r1, r2, #0
     81a:	2200      	movs	r2, #0
     81c:	4b34      	ldr	r3, [pc, #208]	; (8f0 <initKeys+0x40c>)
     81e:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_V, HID_MODIFIER_NONE);
     820:	2019      	movs	r0, #25
     822:	2100      	movs	r1, #0
     824:	4b31      	ldr	r3, [pc, #196]	; (8ec <initKeys+0x408>)
     826:	4798      	blx	r3
     828:	1c03      	adds	r3, r0, #0
     82a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     82c:	1dfb      	adds	r3, r7, #7
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	1dfa      	adds	r2, r7, #7
     832:	1c59      	adds	r1, r3, #1
     834:	7011      	strb	r1, [r2, #0]
     836:	683a      	ldr	r2, [r7, #0]
     838:	1c18      	adds	r0, r3, #0
     83a:	1c11      	adds	r1, r2, #0
     83c:	2200      	movs	r2, #0
     83e:	4b2c      	ldr	r3, [pc, #176]	; (8f0 <initKeys+0x40c>)
     840:	4798      	blx	r3
		
	tempKey = initStandardKey(HID_B, HID_MODIFIER_NONE);
     842:	2005      	movs	r0, #5
     844:	2100      	movs	r1, #0
     846:	4b29      	ldr	r3, [pc, #164]	; (8ec <initKeys+0x408>)
     848:	4798      	blx	r3
     84a:	1c03      	adds	r3, r0, #0
     84c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     84e:	1dfb      	adds	r3, r7, #7
     850:	781b      	ldrb	r3, [r3, #0]
     852:	1dfa      	adds	r2, r7, #7
     854:	1c59      	adds	r1, r3, #1
     856:	7011      	strb	r1, [r2, #0]
     858:	683a      	ldr	r2, [r7, #0]
     85a:	1c18      	adds	r0, r3, #0
     85c:	1c11      	adds	r1, r2, #0
     85e:	2200      	movs	r2, #0
     860:	4b23      	ldr	r3, [pc, #140]	; (8f0 <initKeys+0x40c>)
     862:	4798      	blx	r3
	
	//Layer Key
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     864:	200f      	movs	r0, #15
     866:	2100      	movs	r1, #0
     868:	4b20      	ldr	r3, [pc, #128]	; (8ec <initKeys+0x408>)
     86a:	4798      	blx	r3
     86c:	1c03      	adds	r3, r0, #0
     86e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     870:	1dfb      	adds	r3, r7, #7
     872:	781b      	ldrb	r3, [r3, #0]
     874:	1dfa      	adds	r2, r7, #7
     876:	1c59      	adds	r1, r3, #1
     878:	7011      	strb	r1, [r2, #0]
     87a:	683a      	ldr	r2, [r7, #0]
     87c:	1c18      	adds	r0, r3, #0
     87e:	1c11      	adds	r1, r2, #0
     880:	2200      	movs	r2, #0
     882:	4b1b      	ldr	r3, [pc, #108]	; (8f0 <initKeys+0x40c>)
     884:	4798      	blx	r3
		
	//Row 5 left hand
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_UI);
     886:	2000      	movs	r0, #0
     888:	2108      	movs	r1, #8
     88a:	4b18      	ldr	r3, [pc, #96]	; (8ec <initKeys+0x408>)
     88c:	4798      	blx	r3
     88e:	1c03      	adds	r3, r0, #0
     890:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     892:	1dfb      	adds	r3, r7, #7
     894:	781b      	ldrb	r3, [r3, #0]
     896:	1dfa      	adds	r2, r7, #7
     898:	1c59      	adds	r1, r3, #1
     89a:	7011      	strb	r1, [r2, #0]
     89c:	683a      	ldr	r2, [r7, #0]
     89e:	1c18      	adds	r0, r3, #0
     8a0:	1c11      	adds	r1, r2, #0
     8a2:	2200      	movs	r2, #0
     8a4:	4b12      	ldr	r3, [pc, #72]	; (8f0 <initKeys+0x40c>)
     8a6:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_TILDE, HID_MODIFIER_NONE);
     8a8:	2035      	movs	r0, #53	; 0x35
     8aa:	2100      	movs	r1, #0
     8ac:	4b0f      	ldr	r3, [pc, #60]	; (8ec <initKeys+0x408>)
     8ae:	4798      	blx	r3
     8b0:	1c03      	adds	r3, r0, #0
     8b2:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     8b4:	1dfb      	adds	r3, r7, #7
     8b6:	781b      	ldrb	r3, [r3, #0]
     8b8:	1dfa      	adds	r2, r7, #7
     8ba:	1c59      	adds	r1, r3, #1
     8bc:	7011      	strb	r1, [r2, #0]
     8be:	683a      	ldr	r2, [r7, #0]
     8c0:	1c18      	adds	r0, r3, #0
     8c2:	1c11      	adds	r1, r2, #0
     8c4:	2200      	movs	r2, #0
     8c6:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <initKeys+0x40c>)
     8c8:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_BACKSLASH, HID_MODIFIER_NONE);
     8ca:	2031      	movs	r0, #49	; 0x31
     8cc:	2100      	movs	r1, #0
     8ce:	4b07      	ldr	r3, [pc, #28]	; (8ec <initKeys+0x408>)
     8d0:	4798      	blx	r3
     8d2:	1c03      	adds	r3, r0, #0
     8d4:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     8d6:	1dfb      	adds	r3, r7, #7
     8d8:	781b      	ldrb	r3, [r3, #0]
     8da:	1dfa      	adds	r2, r7, #7
     8dc:	1c59      	adds	r1, r3, #1
     8de:	7011      	strb	r1, [r2, #0]
     8e0:	683a      	ldr	r2, [r7, #0]
     8e2:	1c18      	adds	r0, r3, #0
     8e4:	1c11      	adds	r1, r2, #0
     8e6:	2200      	movs	r2, #0
     8e8:	e004      	b.n	8f4 <initKeys+0x410>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	0000016d 	.word	0x0000016d
     8f0:	00000e45 	.word	0x00000e45
     8f4:	4b46      	ldr	r3, [pc, #280]	; (a10 <initKeys+0x52c>)
     8f6:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_LEFT, HID_MODIFIER_NONE);
     8f8:	2050      	movs	r0, #80	; 0x50
     8fa:	2100      	movs	r1, #0
     8fc:	4b45      	ldr	r3, [pc, #276]	; (a14 <initKeys+0x530>)
     8fe:	4798      	blx	r3
     900:	1c03      	adds	r3, r0, #0
     902:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     904:	1dfb      	adds	r3, r7, #7
     906:	781b      	ldrb	r3, [r3, #0]
     908:	1dfa      	adds	r2, r7, #7
     90a:	1c59      	adds	r1, r3, #1
     90c:	7011      	strb	r1, [r2, #0]
     90e:	683a      	ldr	r2, [r7, #0]
     910:	1c18      	adds	r0, r3, #0
     912:	1c11      	adds	r1, r2, #0
     914:	2200      	movs	r2, #0
     916:	4b3e      	ldr	r3, [pc, #248]	; (a10 <initKeys+0x52c>)
     918:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_RIGHT, HID_MODIFIER_NONE);
     91a:	204f      	movs	r0, #79	; 0x4f
     91c:	2100      	movs	r1, #0
     91e:	4b3d      	ldr	r3, [pc, #244]	; (a14 <initKeys+0x530>)
     920:	4798      	blx	r3
     922:	1c03      	adds	r3, r0, #0
     924:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     926:	1dfb      	adds	r3, r7, #7
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	1dfa      	adds	r2, r7, #7
     92c:	1c59      	adds	r1, r3, #1
     92e:	7011      	strb	r1, [r2, #0]
     930:	683a      	ldr	r2, [r7, #0]
     932:	1c18      	adds	r0, r3, #0
     934:	1c11      	adds	r1, r2, #0
     936:	2200      	movs	r2, #0
     938:	4b35      	ldr	r3, [pc, #212]	; (a10 <initKeys+0x52c>)
     93a:	4798      	blx	r3
	
	
	//Thumb keys left hand
	tempKey = initStandardKey(HID_BACKSPACE, HID_MODIFIER_NONE);
     93c:	202a      	movs	r0, #42	; 0x2a
     93e:	2100      	movs	r1, #0
     940:	4b34      	ldr	r3, [pc, #208]	; (a14 <initKeys+0x530>)
     942:	4798      	blx	r3
     944:	1c03      	adds	r3, r0, #0
     946:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     948:	1dfb      	adds	r3, r7, #7
     94a:	781b      	ldrb	r3, [r3, #0]
     94c:	1dfa      	adds	r2, r7, #7
     94e:	1c59      	adds	r1, r3, #1
     950:	7011      	strb	r1, [r2, #0]
     952:	683a      	ldr	r2, [r7, #0]
     954:	1c18      	adds	r0, r3, #0
     956:	1c11      	adds	r1, r2, #0
     958:	2200      	movs	r2, #0
     95a:	4b2d      	ldr	r3, [pc, #180]	; (a10 <initKeys+0x52c>)
     95c:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_DELETE, HID_MODIFIER_NONE);
     95e:	204c      	movs	r0, #76	; 0x4c
     960:	2100      	movs	r1, #0
     962:	4b2c      	ldr	r3, [pc, #176]	; (a14 <initKeys+0x530>)
     964:	4798      	blx	r3
     966:	1c03      	adds	r3, r0, #0
     968:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     96a:	1dfb      	adds	r3, r7, #7
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	1dfa      	adds	r2, r7, #7
     970:	1c59      	adds	r1, r3, #1
     972:	7011      	strb	r1, [r2, #0]
     974:	683a      	ldr	r2, [r7, #0]
     976:	1c18      	adds	r0, r3, #0
     978:	1c11      	adds	r1, r2, #0
     97a:	2200      	movs	r2, #0
     97c:	4b24      	ldr	r3, [pc, #144]	; (a10 <initKeys+0x52c>)
     97e:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_END, HID_MODIFIER_NONE);
     980:	204d      	movs	r0, #77	; 0x4d
     982:	2100      	movs	r1, #0
     984:	4b23      	ldr	r3, [pc, #140]	; (a14 <initKeys+0x530>)
     986:	4798      	blx	r3
     988:	1c03      	adds	r3, r0, #0
     98a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     98c:	1dfb      	adds	r3, r7, #7
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	1dfa      	adds	r2, r7, #7
     992:	1c59      	adds	r1, r3, #1
     994:	7011      	strb	r1, [r2, #0]
     996:	683a      	ldr	r2, [r7, #0]
     998:	1c18      	adds	r0, r3, #0
     99a:	1c11      	adds	r1, r2, #0
     99c:	2200      	movs	r2, #0
     99e:	4b1c      	ldr	r3, [pc, #112]	; (a10 <initKeys+0x52c>)
     9a0:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_HOME, HID_MODIFIER_NONE);
     9a2:	204a      	movs	r0, #74	; 0x4a
     9a4:	2100      	movs	r1, #0
     9a6:	4b1b      	ldr	r3, [pc, #108]	; (a14 <initKeys+0x530>)
     9a8:	4798      	blx	r3
     9aa:	1c03      	adds	r3, r0, #0
     9ac:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9ae:	1dfb      	adds	r3, r7, #7
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	1dfa      	adds	r2, r7, #7
     9b4:	1c59      	adds	r1, r3, #1
     9b6:	7011      	strb	r1, [r2, #0]
     9b8:	683a      	ldr	r2, [r7, #0]
     9ba:	1c18      	adds	r0, r3, #0
     9bc:	1c11      	adds	r1, r2, #0
     9be:	2200      	movs	r2, #0
     9c0:	4b13      	ldr	r3, [pc, #76]	; (a10 <initKeys+0x52c>)
     9c2:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_ALT);
     9c4:	2000      	movs	r0, #0
     9c6:	2104      	movs	r1, #4
     9c8:	4b12      	ldr	r3, [pc, #72]	; (a14 <initKeys+0x530>)
     9ca:	4798      	blx	r3
     9cc:	1c03      	adds	r3, r0, #0
     9ce:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9d0:	1dfb      	adds	r3, r7, #7
     9d2:	781b      	ldrb	r3, [r3, #0]
     9d4:	1dfa      	adds	r2, r7, #7
     9d6:	1c59      	adds	r1, r3, #1
     9d8:	7011      	strb	r1, [r2, #0]
     9da:	683a      	ldr	r2, [r7, #0]
     9dc:	1c18      	adds	r0, r3, #0
     9de:	1c11      	adds	r1, r2, #0
     9e0:	2200      	movs	r2, #0
     9e2:	4b0b      	ldr	r3, [pc, #44]	; (a10 <initKeys+0x52c>)
     9e4:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_CTRL);
     9e6:	2000      	movs	r0, #0
     9e8:	2101      	movs	r1, #1
     9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <initKeys+0x530>)
     9ec:	4798      	blx	r3
     9ee:	1c03      	adds	r3, r0, #0
     9f0:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9f2:	1dfb      	adds	r3, r7, #7
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	1dfa      	adds	r2, r7, #7
     9f8:	1c59      	adds	r1, r3, #1
     9fa:	7011      	strb	r1, [r2, #0]
     9fc:	683a      	ldr	r2, [r7, #0]
     9fe:	1c18      	adds	r0, r3, #0
     a00:	1c11      	adds	r1, r2, #0
     a02:	2200      	movs	r2, #0
     a04:	4b02      	ldr	r3, [pc, #8]	; (a10 <initKeys+0x52c>)
     a06:	4798      	blx	r3
	

}
     a08:	46bd      	mov	sp, r7
     a0a:	b002      	add	sp, #8
     a0c:	bd80      	pop	{r7, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	00000e45 	.word	0x00000e45
     a14:	0000016d 	.word	0x0000016d

00000a18 <initLayerManager>:

static void initLayerManager(void)
{
     a18:	b580      	push	{r7, lr}
     a1a:	b082      	sub	sp, #8
     a1c:	af00      	add	r7, sp, #0
	boardLayerManager.currentLayer = STANDARD_LAYER;
     a1e:	4a13      	ldr	r2, [pc, #76]	; (a6c <initLayerManager+0x54>)
     a20:	233d      	movs	r3, #61	; 0x3d
     a22:	2100      	movs	r1, #0
     a24:	54d1      	strb	r1, [r2, r3]
	boardLayerManager.numberOfLayers = 0;
     a26:	4a11      	ldr	r2, [pc, #68]	; (a6c <initLayerManager+0x54>)
     a28:	233c      	movs	r3, #60	; 0x3c
     a2a:	2100      	movs	r1, #0
     a2c:	54d1      	strb	r1, [r2, r3]
	//initialize all layers to be 0
	//change to memset
	for(uint8_t i = 0; i < MAX_NUMBER_OF_LAYERS; i++)
     a2e:	1dfb      	adds	r3, r7, #7
     a30:	2200      	movs	r2, #0
     a32:	701a      	strb	r2, [r3, #0]
     a34:	e00a      	b.n	a4c <initLayerManager+0x34>
	{
		//make sure that they are all 0
		boardLayerManager.layers[i] = 0;		
     a36:	1dfb      	adds	r3, r7, #7
     a38:	781a      	ldrb	r2, [r3, #0]
     a3a:	4b0c      	ldr	r3, [pc, #48]	; (a6c <initLayerManager+0x54>)
     a3c:	0092      	lsls	r2, r2, #2
     a3e:	2100      	movs	r1, #0
     a40:	50d1      	str	r1, [r2, r3]
{
	boardLayerManager.currentLayer = STANDARD_LAYER;
	boardLayerManager.numberOfLayers = 0;
	//initialize all layers to be 0
	//change to memset
	for(uint8_t i = 0; i < MAX_NUMBER_OF_LAYERS; i++)
     a42:	1dfb      	adds	r3, r7, #7
     a44:	781a      	ldrb	r2, [r3, #0]
     a46:	1dfb      	adds	r3, r7, #7
     a48:	3201      	adds	r2, #1
     a4a:	701a      	strb	r2, [r3, #0]
     a4c:	1dfb      	adds	r3, r7, #7
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	2b0e      	cmp	r3, #14
     a52:	d9f0      	bls.n	a36 <initLayerManager+0x1e>
		//make sure that they are all 0
		boardLayerManager.layers[i] = 0;		
	}

	//setup the standard layer
	LAYER * temp = initLayer(STANDARD_LAYER);
     a54:	2000      	movs	r0, #0
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <initLayerManager+0x58>)
     a58:	4798      	blx	r3
     a5a:	1c03      	adds	r3, r0, #0
     a5c:	603b      	str	r3, [r7, #0]
	if(!addLayer(temp))
     a5e:	683b      	ldr	r3, [r7, #0]
     a60:	1c18      	adds	r0, r3, #0
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <initLayerManager+0x5c>)
     a64:	4798      	blx	r3
	{
		//error couldn't add the layer to the system.
	}

}
     a66:	46bd      	mov	sp, r7
     a68:	b002      	add	sp, #8
     a6a:	bd80      	pop	{r7, pc}
     a6c:	200009d0 	.word	0x200009d0
     a70:	00000d65 	.word	0x00000d65
     a74:	00000dc5 	.word	0x00000dc5

00000a78 <initKeyBoard>:

void initKeyBoard(void)
{
     a78:	b580      	push	{r7, lr}
     a7a:	b086      	sub	sp, #24
     a7c:	af00      	add	r7, sp, #0
	//configure pin PB10 as output High
	bool tempPinValue = false;	
     a7e:	1c3b      	adds	r3, r7, #0
     a80:	3315      	adds	r3, #21
     a82:	2200      	movs	r2, #0
     a84:	701a      	strb	r2, [r3, #0]
	//configure pin PB06 as input
	uint8_t i = 0;
     a86:	1c3b      	adds	r3, r7, #0
     a88:	3317      	adds	r3, #23
     a8a:	2200      	movs	r2, #0
     a8c:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     a8e:	1c3b      	adds	r3, r7, #0
     a90:	3316      	adds	r3, #22
     a92:	2200      	movs	r2, #0
     a94:	701a      	strb	r2, [r3, #0]
	//setup data structure
	initLayerManager();
     a96:	4ba8      	ldr	r3, [pc, #672]	; (d38 <STACK_SIZE+0x238>)
     a98:	4798      	blx	r3
	initKeys();
     a9a:	4ba8      	ldr	r3, [pc, #672]	; (d3c <STACK_SIZE+0x23c>)
     a9c:	4798      	blx	r3
	
//outputs
	keyboardObj.rowIOArr[0] = ROW_0;
     a9e:	4ba8      	ldr	r3, [pc, #672]	; (d40 <STACK_SIZE+0x240>)
     aa0:	222f      	movs	r2, #47	; 0x2f
     aa2:	601a      	str	r2, [r3, #0]
	keyboardObj.rowIOArr[1] = ROW_1;
     aa4:	4ba6      	ldr	r3, [pc, #664]	; (d40 <STACK_SIZE+0x240>)
     aa6:	222e      	movs	r2, #46	; 0x2e
     aa8:	605a      	str	r2, [r3, #4]
	keyboardObj.rowIOArr[2] = ROW_2;
     aaa:	4ba5      	ldr	r3, [pc, #660]	; (d40 <STACK_SIZE+0x240>)
     aac:	222d      	movs	r2, #45	; 0x2d
     aae:	609a      	str	r2, [r3, #8]
	keyboardObj.rowIOArr[3] = ROW_3;
     ab0:	4ba3      	ldr	r3, [pc, #652]	; (d40 <STACK_SIZE+0x240>)
     ab2:	222c      	movs	r2, #44	; 0x2c
     ab4:	60da      	str	r2, [r3, #12]
	keyboardObj.rowIOArr[4] = ROW_4;
     ab6:	4ba2      	ldr	r3, [pc, #648]	; (d40 <STACK_SIZE+0x240>)
     ab8:	222b      	movs	r2, #43	; 0x2b
     aba:	611a      	str	r2, [r3, #16]
	keyboardObj.rowIOArr[5] = ROW_5;
     abc:	4ba0      	ldr	r3, [pc, #640]	; (d40 <STACK_SIZE+0x240>)
     abe:	222a      	movs	r2, #42	; 0x2a
     ac0:	615a      	str	r2, [r3, #20]
	

//input
	keyboardObj.columnIOArr[0] = COLUMN_0;
     ac2:	4b9f      	ldr	r3, [pc, #636]	; (d40 <STACK_SIZE+0x240>)
     ac4:	2226      	movs	r2, #38	; 0x26
     ac6:	619a      	str	r2, [r3, #24]
	keyboardObj.columnIOArr[1] = COLUMN_1;
     ac8:	4b9d      	ldr	r3, [pc, #628]	; (d40 <STACK_SIZE+0x240>)
     aca:	2225      	movs	r2, #37	; 0x25
     acc:	61da      	str	r2, [r3, #28]
	keyboardObj.columnIOArr[2] = COLUMN_2;
     ace:	4b9c      	ldr	r3, [pc, #624]	; (d40 <STACK_SIZE+0x240>)
     ad0:	2224      	movs	r2, #36	; 0x24
     ad2:	621a      	str	r2, [r3, #32]
	keyboardObj.columnIOArr[3] = COLUMN_3;
     ad4:	4b9a      	ldr	r3, [pc, #616]	; (d40 <STACK_SIZE+0x240>)
     ad6:	2223      	movs	r2, #35	; 0x23
     ad8:	625a      	str	r2, [r3, #36]	; 0x24
	keyboardObj.columnIOArr[4] = COLUMN_4;
     ada:	4b99      	ldr	r3, [pc, #612]	; (d40 <STACK_SIZE+0x240>)
     adc:	2222      	movs	r2, #34	; 0x22
     ade:	629a      	str	r2, [r3, #40]	; 0x28
	keyboardObj.columnIOArr[5] = COLUMN_5;
     ae0:	4b97      	ldr	r3, [pc, #604]	; (d40 <STACK_SIZE+0x240>)
     ae2:	2221      	movs	r2, #33	; 0x21
     ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	keyboardObj.columnIOArr[6] = COLUMN_6;
     ae6:	4b96      	ldr	r3, [pc, #600]	; (d40 <STACK_SIZE+0x240>)
     ae8:	2220      	movs	r2, #32
     aea:	631a      	str	r2, [r3, #48]	; 0x30

	// Right Hand
	//outputs
	rightKeyboardObj.rowIOArr[0] = R_ROW_0;
     aec:	4b95      	ldr	r3, [pc, #596]	; (d44 <STACK_SIZE+0x244>)
     aee:	2214      	movs	r2, #20
     af0:	601a      	str	r2, [r3, #0]
	rightKeyboardObj.rowIOArr[1] = R_ROW_1;
     af2:	4b94      	ldr	r3, [pc, #592]	; (d44 <STACK_SIZE+0x244>)
     af4:	2213      	movs	r2, #19
     af6:	605a      	str	r2, [r3, #4]
	rightKeyboardObj.rowIOArr[2] = R_ROW_2;
     af8:	4b92      	ldr	r3, [pc, #584]	; (d44 <STACK_SIZE+0x244>)
     afa:	2212      	movs	r2, #18
     afc:	609a      	str	r2, [r3, #8]
	rightKeyboardObj.rowIOArr[3] = R_ROW_3;
     afe:	4b91      	ldr	r3, [pc, #580]	; (d44 <STACK_SIZE+0x244>)
     b00:	2211      	movs	r2, #17
     b02:	60da      	str	r2, [r3, #12]
	rightKeyboardObj.rowIOArr[4] = R_ROW_4;
     b04:	4b8f      	ldr	r3, [pc, #572]	; (d44 <STACK_SIZE+0x244>)
     b06:	2210      	movs	r2, #16
     b08:	611a      	str	r2, [r3, #16]
	rightKeyboardObj.rowIOArr[5] = R_ROW_5;
     b0a:	4b8e      	ldr	r3, [pc, #568]	; (d44 <STACK_SIZE+0x244>)
     b0c:	220b      	movs	r2, #11
     b0e:	615a      	str	r2, [r3, #20]

	//input
	rightKeyboardObj.columnIOArr[0] = R_COLUMN_0;
     b10:	4b8c      	ldr	r3, [pc, #560]	; (d44 <STACK_SIZE+0x244>)
     b12:	220a      	movs	r2, #10
     b14:	619a      	str	r2, [r3, #24]
	rightKeyboardObj.columnIOArr[1] = R_COLUMN_1;
     b16:	4b8b      	ldr	r3, [pc, #556]	; (d44 <STACK_SIZE+0x244>)
     b18:	2209      	movs	r2, #9
     b1a:	61da      	str	r2, [r3, #28]
	rightKeyboardObj.columnIOArr[2] = R_COLUMN_2;
     b1c:	4b89      	ldr	r3, [pc, #548]	; (d44 <STACK_SIZE+0x244>)
     b1e:	2208      	movs	r2, #8
     b20:	621a      	str	r2, [r3, #32]
	rightKeyboardObj.columnIOArr[3] = R_COLUMN_3;
     b22:	4b88      	ldr	r3, [pc, #544]	; (d44 <STACK_SIZE+0x244>)
     b24:	2207      	movs	r2, #7
     b26:	625a      	str	r2, [r3, #36]	; 0x24
	rightKeyboardObj.columnIOArr[4] = R_COLUMN_4;
     b28:	4b86      	ldr	r3, [pc, #536]	; (d44 <STACK_SIZE+0x244>)
     b2a:	2206      	movs	r2, #6
     b2c:	629a      	str	r2, [r3, #40]	; 0x28
	rightKeyboardObj.columnIOArr[5] = R_COLUMN_5;
     b2e:	4b85      	ldr	r3, [pc, #532]	; (d44 <STACK_SIZE+0x244>)
     b30:	2205      	movs	r2, #5
     b32:	62da      	str	r2, [r3, #44]	; 0x2c
	rightKeyboardObj.columnIOArr[6] = R_COLUMN_6;
     b34:	4b83      	ldr	r3, [pc, #524]	; (d44 <STACK_SIZE+0x244>)
     b36:	2204      	movs	r2, #4
     b38:	631a      	str	r2, [r3, #48]	; 0x30
// Set all of the output pins high, and
// set the interrupt to trigger when the pin goes high.

	
	struct extint_chan_conf *config_extint_chan;
	uint8_t eicLine = 0;
     b3a:	1c3b      	adds	r3, r7, #0
     b3c:	3314      	adds	r3, #20
     b3e:	2200      	movs	r2, #0
     b40:	701a      	strb	r2, [r3, #0]


//Currently we have disabled all interrupts
	for(i = 0; i < 0; i++)
     b42:	1c3b      	adds	r3, r7, #0
     b44:	3317      	adds	r3, #23
     b46:	2200      	movs	r2, #0
     b48:	701a      	strb	r2, [r3, #0]
     b4a:	46c0      	nop			; (mov r8, r8)
	}


//setup all of the pins

	ioport_init();
     b4c:	4b7e      	ldr	r3, [pc, #504]	; (d48 <STACK_SIZE+0x248>)
     b4e:	4798      	blx	r3
	delay_init();
     b50:	4b7e      	ldr	r3, [pc, #504]	; (d4c <STACK_SIZE+0x24c>)
     b52:	4798      	blx	r3
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     b54:	1c3b      	adds	r3, r7, #0
     b56:	3317      	adds	r3, #23
     b58:	2200      	movs	r2, #0
     b5a:	701a      	strb	r2, [r3, #0]
     b5c:	e0e2      	b.n	d24 <STACK_SIZE+0x224>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     b5e:	1c3b      	adds	r3, r7, #0
     b60:	3317      	adds	r3, #23
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	2274      	movs	r2, #116	; 0x74
     b66:	4353      	muls	r3, r2
     b68:	1c1a      	adds	r2, r3, #0
     b6a:	3288      	adds	r2, #136	; 0x88
     b6c:	4b74      	ldr	r3, [pc, #464]	; (d40 <STACK_SIZE+0x240>)
     b6e:	18d3      	adds	r3, r2, r3
     b70:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     b72:	1c3b      	adds	r3, r7, #0
     b74:	3317      	adds	r3, #23
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	2274      	movs	r2, #116	; 0x74
     b7a:	4353      	muls	r3, r2
     b7c:	1c1a      	adds	r2, r3, #0
     b7e:	3288      	adds	r2, #136	; 0x88
     b80:	4b70      	ldr	r3, [pc, #448]	; (d44 <STACK_SIZE+0x244>)
     b82:	18d3      	adds	r3, r2, r3
     b84:	60fb      	str	r3, [r7, #12]
		row->rowIO = keyboardObj.rowIOArr[i];
     b86:	1c3b      	adds	r3, r7, #0
     b88:	3317      	adds	r3, #23
     b8a:	781a      	ldrb	r2, [r3, #0]
     b8c:	4b6c      	ldr	r3, [pc, #432]	; (d40 <STACK_SIZE+0x240>)
     b8e:	0092      	lsls	r2, r2, #2
     b90:	58d2      	ldr	r2, [r2, r3]
     b92:	693b      	ldr	r3, [r7, #16]
     b94:	601a      	str	r2, [r3, #0]
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
     b96:	1c3b      	adds	r3, r7, #0
     b98:	3317      	adds	r3, #23
     b9a:	781a      	ldrb	r2, [r3, #0]
     b9c:	4b69      	ldr	r3, [pc, #420]	; (d44 <STACK_SIZE+0x244>)
     b9e:	0092      	lsls	r2, r2, #2
     ba0:	58d2      	ldr	r2, [r2, r3]
     ba2:	68fb      	ldr	r3, [r7, #12]
     ba4:	601a      	str	r2, [r3, #0]
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     ba6:	1c3b      	adds	r3, r7, #0
     ba8:	3316      	adds	r3, #22
     baa:	2200      	movs	r2, #0
     bac:	701a      	strb	r2, [r3, #0]
     bae:	e094      	b.n	cda <STACK_SIZE+0x1da>
		{
			KEY_OBJ *key = &row->keys[j];
     bb0:	1c3b      	adds	r3, r7, #0
     bb2:	3316      	adds	r3, #22
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	011b      	lsls	r3, r3, #4
     bb8:	693a      	ldr	r2, [r7, #16]
     bba:	18d3      	adds	r3, r2, r3
     bbc:	3304      	adds	r3, #4
     bbe:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
     bc0:	1c3b      	adds	r3, r7, #0
     bc2:	3316      	adds	r3, #22
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	011b      	lsls	r3, r3, #4
     bc8:	68fa      	ldr	r2, [r7, #12]
     bca:	18d3      	adds	r3, r2, r3
     bcc:	3304      	adds	r3, #4
     bce:	607b      	str	r3, [r7, #4]
			key->columnIO = keyboardObj.columnIOArr[j];
     bd0:	1c3b      	adds	r3, r7, #0
     bd2:	3316      	adds	r3, #22
     bd4:	781a      	ldrb	r2, [r3, #0]
     bd6:	4b5a      	ldr	r3, [pc, #360]	; (d40 <STACK_SIZE+0x240>)
     bd8:	3206      	adds	r2, #6
     bda:	0092      	lsls	r2, r2, #2
     bdc:	58d2      	ldr	r2, [r2, r3]
     bde:	68bb      	ldr	r3, [r7, #8]
     be0:	601a      	str	r2, [r3, #0]
			key->currentState = false;
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	2200      	movs	r2, #0
     be6:	715a      	strb	r2, [r3, #5]
			key->previousState = false;
     be8:	68bb      	ldr	r3, [r7, #8]
     bea:	2200      	movs	r2, #0
     bec:	711a      	strb	r2, [r3, #4]
			key->keyId = keyIdMapping[i][j];
     bee:	1c3b      	adds	r3, r7, #0
     bf0:	3317      	adds	r3, #23
     bf2:	781a      	ldrb	r2, [r3, #0]
     bf4:	1c3b      	adds	r3, r7, #0
     bf6:	3316      	adds	r3, #22
     bf8:	7818      	ldrb	r0, [r3, #0]
     bfa:	4955      	ldr	r1, [pc, #340]	; (d50 <STACK_SIZE+0x250>)
     bfc:	1c13      	adds	r3, r2, #0
     bfe:	00db      	lsls	r3, r3, #3
     c00:	1a9b      	subs	r3, r3, r2
     c02:	181b      	adds	r3, r3, r0
     c04:	5c5a      	ldrb	r2, [r3, r1]
     c06:	68bb      	ldr	r3, [r7, #8]
     c08:	731a      	strb	r2, [r3, #12]
			key->hidKeyMod = 0;
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	2200      	movs	r2, #0
     c0e:	739a      	strb	r2, [r3, #14]
			key->hidKey = keyArray[i][j];//   HID_A+j+i;//no HID Key
     c10:	1c3b      	adds	r3, r7, #0
     c12:	3317      	adds	r3, #23
     c14:	781a      	ldrb	r2, [r3, #0]
     c16:	1c3b      	adds	r3, r7, #0
     c18:	3316      	adds	r3, #22
     c1a:	7818      	ldrb	r0, [r3, #0]
     c1c:	494d      	ldr	r1, [pc, #308]	; (d54 <STACK_SIZE+0x254>)
     c1e:	1c13      	adds	r3, r2, #0
     c20:	00db      	lsls	r3, r3, #3
     c22:	1a9b      	subs	r3, r3, r2
     c24:	181b      	adds	r3, r3, r0
     c26:	5c5a      	ldrb	r2, [r3, r1]
     c28:	68bb      	ldr	r3, [r7, #8]
     c2a:	735a      	strb	r2, [r3, #13]
			key->keyJustDown = false;
     c2c:	68bb      	ldr	r3, [r7, #8]
     c2e:	2200      	movs	r2, #0
     c30:	719a      	strb	r2, [r3, #6]
			key->keyJustRelease = false;
     c32:	68bb      	ldr	r3, [r7, #8]
     c34:	2200      	movs	r2, #0
     c36:	71da      	strb	r2, [r3, #7]
			key->specialKey = 0;//for later use
     c38:	68bb      	ldr	r3, [r7, #8]
     c3a:	2200      	movs	r2, #0
     c3c:	73da      	strb	r2, [r3, #15]
			key->keyHoldCount = 0;
     c3e:	68bb      	ldr	r3, [r7, #8]
     c40:	2200      	movs	r2, #0
     c42:	609a      	str	r2, [r3, #8]

			//right key
			rightKey->columnIO = rightKeyboardObj.columnIOArr[j];
     c44:	1c3b      	adds	r3, r7, #0
     c46:	3316      	adds	r3, #22
     c48:	781a      	ldrb	r2, [r3, #0]
     c4a:	4b3e      	ldr	r3, [pc, #248]	; (d44 <STACK_SIZE+0x244>)
     c4c:	3206      	adds	r2, #6
     c4e:	0092      	lsls	r2, r2, #2
     c50:	58d2      	ldr	r2, [r2, r3]
     c52:	687b      	ldr	r3, [r7, #4]
     c54:	601a      	str	r2, [r3, #0]
			rightKey->currentState = false;
     c56:	687b      	ldr	r3, [r7, #4]
     c58:	2200      	movs	r2, #0
     c5a:	715a      	strb	r2, [r3, #5]
			rightKey->previousState = false;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2200      	movs	r2, #0
     c60:	711a      	strb	r2, [r3, #4]
			rightKey->hidKeyMod = 0;
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	2200      	movs	r2, #0
     c66:	739a      	strb	r2, [r3, #14]
			rightKey->hidKey = keyArray[i][j];//   HID_A+j+i;//no HID Key
     c68:	1c3b      	adds	r3, r7, #0
     c6a:	3317      	adds	r3, #23
     c6c:	781a      	ldrb	r2, [r3, #0]
     c6e:	1c3b      	adds	r3, r7, #0
     c70:	3316      	adds	r3, #22
     c72:	7818      	ldrb	r0, [r3, #0]
     c74:	4937      	ldr	r1, [pc, #220]	; (d54 <STACK_SIZE+0x254>)
     c76:	1c13      	adds	r3, r2, #0
     c78:	00db      	lsls	r3, r3, #3
     c7a:	1a9b      	subs	r3, r3, r2
     c7c:	181b      	adds	r3, r3, r0
     c7e:	5c5a      	ldrb	r2, [r3, r1]
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	735a      	strb	r2, [r3, #13]
			rightKey->keyJustDown = false;
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	2200      	movs	r2, #0
     c88:	719a      	strb	r2, [r3, #6]
			rightKey->keyJustRelease = false;
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	2200      	movs	r2, #0
     c8e:	71da      	strb	r2, [r3, #7]
			rightKey->specialKey = 0;//for later use
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	2200      	movs	r2, #0
     c94:	73da      	strb	r2, [r3, #15]
			rightKey->keyHoldCount = 0;
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	2200      	movs	r2, #0
     c9a:	609a      	str	r2, [r3, #8]
			
			ioport_set_pin_dir(key->columnIO, IOPORT_DIR_INPUT);
     c9c:	68bb      	ldr	r3, [r7, #8]
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	1c18      	adds	r0, r3, #0
     ca2:	2100      	movs	r1, #0
     ca4:	4b2c      	ldr	r3, [pc, #176]	; (d58 <STACK_SIZE+0x258>)
     ca6:	4798      	blx	r3
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	1c18      	adds	r0, r3, #0
     cae:	2120      	movs	r1, #32
     cb0:	4b2a      	ldr	r3, [pc, #168]	; (d5c <STACK_SIZE+0x25c>)
     cb2:	4798      	blx	r3
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	1c18      	adds	r0, r3, #0
     cba:	2100      	movs	r1, #0
     cbc:	4b26      	ldr	r3, [pc, #152]	; (d58 <STACK_SIZE+0x258>)
     cbe:	4798      	blx	r3
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	1c18      	adds	r0, r3, #0
     cc6:	2120      	movs	r1, #32
     cc8:	4b24      	ldr	r3, [pc, #144]	; (d5c <STACK_SIZE+0x25c>)
     cca:	4798      	blx	r3
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		row->rowIO = keyboardObj.rowIOArr[i];
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     ccc:	1c3b      	adds	r3, r7, #0
     cce:	3316      	adds	r3, #22
     cd0:	781a      	ldrb	r2, [r3, #0]
     cd2:	1c3b      	adds	r3, r7, #0
     cd4:	3316      	adds	r3, #22
     cd6:	3201      	adds	r2, #1
     cd8:	701a      	strb	r2, [r3, #0]
     cda:	1c3b      	adds	r3, r7, #0
     cdc:	3316      	adds	r3, #22
     cde:	781b      	ldrb	r3, [r3, #0]
     ce0:	2b06      	cmp	r3, #6
     ce2:	d800      	bhi.n	ce6 <STACK_SIZE+0x1e6>
     ce4:	e764      	b.n	bb0 <STACK_SIZE+0xb0>
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
	}
	ioport_set_pin_dir(row->rowIO, IOPORT_DIR_OUTPUT);
     ce6:	693b      	ldr	r3, [r7, #16]
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	1c18      	adds	r0, r3, #0
     cec:	2101      	movs	r1, #1
     cee:	4b1a      	ldr	r3, [pc, #104]	; (d58 <STACK_SIZE+0x258>)
     cf0:	4798      	blx	r3
	ioport_set_pin_level(row->rowIO, false);//set the pin low
     cf2:	693b      	ldr	r3, [r7, #16]
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	1c18      	adds	r0, r3, #0
     cf8:	2100      	movs	r1, #0
     cfa:	4b19      	ldr	r3, [pc, #100]	; (d60 <STACK_SIZE+0x260>)
     cfc:	4798      	blx	r3
	
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	681b      	ldr	r3, [r3, #0]
     d02:	1c18      	adds	r0, r3, #0
     d04:	2101      	movs	r1, #1
     d06:	4b14      	ldr	r3, [pc, #80]	; (d58 <STACK_SIZE+0x258>)
     d08:	4798      	blx	r3
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
     d0a:	68fb      	ldr	r3, [r7, #12]
     d0c:	681b      	ldr	r3, [r3, #0]
     d0e:	1c18      	adds	r0, r3, #0
     d10:	2100      	movs	r1, #0
     d12:	4b13      	ldr	r3, [pc, #76]	; (d60 <STACK_SIZE+0x260>)
     d14:	4798      	blx	r3

//setup all of the pins

	ioport_init();
	delay_init();
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     d16:	1c3b      	adds	r3, r7, #0
     d18:	3317      	adds	r3, #23
     d1a:	781a      	ldrb	r2, [r3, #0]
     d1c:	1c3b      	adds	r3, r7, #0
     d1e:	3317      	adds	r3, #23
     d20:	3201      	adds	r2, #1
     d22:	701a      	strb	r2, [r3, #0]
     d24:	1c3b      	adds	r3, r7, #0
     d26:	3317      	adds	r3, #23
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b05      	cmp	r3, #5
     d2c:	d800      	bhi.n	d30 <STACK_SIZE+0x230>
     d2e:	e716      	b.n	b5e <STACK_SIZE+0x5e>
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
		
	}
	
}
     d30:	46bd      	mov	sp, r7
     d32:	b006      	add	sp, #24
     d34:	bd80      	pop	{r7, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	00000a19 	.word	0x00000a19
     d3c:	000004e5 	.word	0x000004e5
     d40:	20000350 	.word	0x20000350
     d44:	20000690 	.word	0x20000690
     d48:	00000445 	.word	0x00000445
     d4c:	00000111 	.word	0x00000111
     d50:	20000034 	.word	0x20000034
     d54:	20000008 	.word	0x20000008
     d58:	00000475 	.word	0x00000475
     d5c:	00000455 	.word	0x00000455
     d60:	0000049d 	.word	0x0000049d

00000d64 <initLayer>:


LAYER *initLayer(KEYBOARD_LAYER layer)
{
     d64:	b580      	push	{r7, lr}
     d66:	b084      	sub	sp, #16
     d68:	af00      	add	r7, sp, #0
     d6a:	1c02      	adds	r2, r0, #0
     d6c:	1dfb      	adds	r3, r7, #7
     d6e:	701a      	strb	r2, [r3, #0]
	//a layer holds the number of keys on the board(whether 64, 76, 108, any number)
	LAYER *boardLayer = (LAYER*)salloc(sizeof(LAYER));
     d70:	2034      	movs	r0, #52	; 0x34
     d72:	4b13      	ldr	r3, [pc, #76]	; (dc0 <initLayer+0x5c>)
     d74:	4798      	blx	r3
     d76:	1c03      	adds	r3, r0, #0
     d78:	60bb      	str	r3, [r7, #8]
	boardLayer->type = layer;
     d7a:	68ba      	ldr	r2, [r7, #8]
     d7c:	1df9      	adds	r1, r7, #7
     d7e:	2398      	movs	r3, #152	; 0x98
     d80:	005b      	lsls	r3, r3, #1
     d82:	7809      	ldrb	r1, [r1, #0]
     d84:	54d1      	strb	r1, [r2, r3]
	//zero out all of the keys
	for(uint8_t i = 0; i < NUMBER_OF_KEYS; i++)
     d86:	1c3b      	adds	r3, r7, #0
     d88:	330f      	adds	r3, #15
     d8a:	2200      	movs	r2, #0
     d8c:	701a      	strb	r2, [r3, #0]
     d8e:	e00d      	b.n	dac <initLayer+0x48>
	{
		boardLayer->keys[i] = 0;
     d90:	1c3b      	adds	r3, r7, #0
     d92:	330f      	adds	r3, #15
     d94:	781a      	ldrb	r2, [r3, #0]
     d96:	68bb      	ldr	r3, [r7, #8]
     d98:	0092      	lsls	r2, r2, #2
     d9a:	2100      	movs	r1, #0
     d9c:	50d1      	str	r1, [r2, r3]
{
	//a layer holds the number of keys on the board(whether 64, 76, 108, any number)
	LAYER *boardLayer = (LAYER*)salloc(sizeof(LAYER));
	boardLayer->type = layer;
	//zero out all of the keys
	for(uint8_t i = 0; i < NUMBER_OF_KEYS; i++)
     d9e:	1c3b      	adds	r3, r7, #0
     da0:	330f      	adds	r3, #15
     da2:	781a      	ldrb	r2, [r3, #0]
     da4:	1c3b      	adds	r3, r7, #0
     da6:	330f      	adds	r3, #15
     da8:	3201      	adds	r2, #1
     daa:	701a      	strb	r2, [r3, #0]
     dac:	1c3b      	adds	r3, r7, #0
     dae:	330f      	adds	r3, #15
     db0:	781b      	ldrb	r3, [r3, #0]
     db2:	2b4b      	cmp	r3, #75	; 0x4b
     db4:	d9ec      	bls.n	d90 <initLayer+0x2c>
	{
		boardLayer->keys[i] = 0;
	}
	return boardLayer;
     db6:	68bb      	ldr	r3, [r7, #8]
}
     db8:	1c18      	adds	r0, r3, #0
     dba:	46bd      	mov	sp, r7
     dbc:	b004      	add	sp, #16
     dbe:	bd80      	pop	{r7, pc}
     dc0:	0000abc5 	.word	0x0000abc5

00000dc4 <addLayer>:

bool addLayer(LAYER *layer)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	b084      	sub	sp, #16
     dc8:	af00      	add	r7, sp, #0
     dca:	6078      	str	r0, [r7, #4]
	//check if we already have a the same layer in the manager
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
     dcc:	1c3b      	adds	r3, r7, #0
     dce:	330f      	adds	r3, #15
     dd0:	2200      	movs	r2, #0
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	e017      	b.n	e06 <addLayer+0x42>
	{
		
		if(boardLayerManager.layers[i]->type == layer->type)
     dd6:	1c3b      	adds	r3, r7, #0
     dd8:	330f      	adds	r3, #15
     dda:	781a      	ldrb	r2, [r3, #0]
     ddc:	4b18      	ldr	r3, [pc, #96]	; (e40 <addLayer+0x7c>)
     dde:	0092      	lsls	r2, r2, #2
     de0:	58d2      	ldr	r2, [r2, r3]
     de2:	2398      	movs	r3, #152	; 0x98
     de4:	005b      	lsls	r3, r3, #1
     de6:	5cd2      	ldrb	r2, [r2, r3]
     de8:	6879      	ldr	r1, [r7, #4]
     dea:	2398      	movs	r3, #152	; 0x98
     dec:	005b      	lsls	r3, r3, #1
     dee:	5ccb      	ldrb	r3, [r1, r3]
     df0:	429a      	cmp	r2, r3
     df2:	d101      	bne.n	df8 <addLayer+0x34>
		{
			return false;//Layer is already in the manager, add a different one
     df4:	2300      	movs	r3, #0
     df6:	e01e      	b.n	e36 <addLayer+0x72>
}

bool addLayer(LAYER *layer)
{
	//check if we already have a the same layer in the manager
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
     df8:	1c3b      	adds	r3, r7, #0
     dfa:	330f      	adds	r3, #15
     dfc:	781a      	ldrb	r2, [r3, #0]
     dfe:	1c3b      	adds	r3, r7, #0
     e00:	330f      	adds	r3, #15
     e02:	3201      	adds	r2, #1
     e04:	701a      	strb	r2, [r3, #0]
     e06:	4a0e      	ldr	r2, [pc, #56]	; (e40 <addLayer+0x7c>)
     e08:	233c      	movs	r3, #60	; 0x3c
     e0a:	5cd3      	ldrb	r3, [r2, r3]
     e0c:	1c3a      	adds	r2, r7, #0
     e0e:	320f      	adds	r2, #15
     e10:	7812      	ldrb	r2, [r2, #0]
     e12:	429a      	cmp	r2, r3
     e14:	d3df      	bcc.n	dd6 <addLayer+0x12>
		{
			return false;//Layer is already in the manager, add a different one
		}
	}
	//add the layer to the manager
	boardLayerManager.layers[boardLayerManager.numberOfLayers] = layer;
     e16:	4a0a      	ldr	r2, [pc, #40]	; (e40 <addLayer+0x7c>)
     e18:	233c      	movs	r3, #60	; 0x3c
     e1a:	5cd3      	ldrb	r3, [r2, r3]
     e1c:	1c1a      	adds	r2, r3, #0
     e1e:	4b08      	ldr	r3, [pc, #32]	; (e40 <addLayer+0x7c>)
     e20:	0092      	lsls	r2, r2, #2
     e22:	6879      	ldr	r1, [r7, #4]
     e24:	50d1      	str	r1, [r2, r3]
	boardLayerManager.numberOfLayers++;
     e26:	4a06      	ldr	r2, [pc, #24]	; (e40 <addLayer+0x7c>)
     e28:	233c      	movs	r3, #60	; 0x3c
     e2a:	5cd3      	ldrb	r3, [r2, r3]
     e2c:	3301      	adds	r3, #1
     e2e:	b2d9      	uxtb	r1, r3
     e30:	4a03      	ldr	r2, [pc, #12]	; (e40 <addLayer+0x7c>)
     e32:	233c      	movs	r3, #60	; 0x3c
     e34:	54d1      	strb	r1, [r2, r3]
}
     e36:	1c18      	adds	r0, r3, #0
     e38:	46bd      	mov	sp, r7
     e3a:	b004      	add	sp, #16
     e3c:	bd80      	pop	{r7, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	200009d0 	.word	0x200009d0

00000e44 <addKey>:
// Adds a key
// You can override already assigned keys in run time
bool addKey(uint8_t keyId, GENERIC_KEY *key, KEYBOARD_LAYER layer)
{
     e44:	b580      	push	{r7, lr}
     e46:	b084      	sub	sp, #16
     e48:	af00      	add	r7, sp, #0
     e4a:	6039      	str	r1, [r7, #0]
     e4c:	1dfb      	adds	r3, r7, #7
     e4e:	1c01      	adds	r1, r0, #0
     e50:	7019      	strb	r1, [r3, #0]
     e52:	1dbb      	adds	r3, r7, #6
     e54:	701a      	strb	r2, [r3, #0]
	//adds a key to a specific layer already on the board
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
     e56:	1c3b      	adds	r3, r7, #0
     e58:	330f      	adds	r3, #15
     e5a:	2200      	movs	r2, #0
     e5c:	701a      	strb	r2, [r3, #0]
     e5e:	e023      	b.n	ea8 <addKey+0x64>
	{
		if(boardLayerManager.layers[i]->type == layer)
     e60:	1c3b      	adds	r3, r7, #0
     e62:	330f      	adds	r3, #15
     e64:	781a      	ldrb	r2, [r3, #0]
     e66:	4b17      	ldr	r3, [pc, #92]	; (ec4 <addKey+0x80>)
     e68:	0092      	lsls	r2, r2, #2
     e6a:	58d2      	ldr	r2, [r2, r3]
     e6c:	2398      	movs	r3, #152	; 0x98
     e6e:	005b      	lsls	r3, r3, #1
     e70:	5cd3      	ldrb	r3, [r2, r3]
     e72:	1dba      	adds	r2, r7, #6
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	429a      	cmp	r2, r3
     e78:	d10f      	bne.n	e9a <addKey+0x56>
		{
			//valid layer
			return addKeyToLayer(keyId, key, boardLayerManager.layers[i]);
     e7a:	1c3b      	adds	r3, r7, #0
     e7c:	330f      	adds	r3, #15
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	4b10      	ldr	r3, [pc, #64]	; (ec4 <addKey+0x80>)
     e82:	0092      	lsls	r2, r2, #2
     e84:	58d3      	ldr	r3, [r2, r3]
     e86:	1dfa      	adds	r2, r7, #7
     e88:	7811      	ldrb	r1, [r2, #0]
     e8a:	683a      	ldr	r2, [r7, #0]
     e8c:	1c08      	adds	r0, r1, #0
     e8e:	1c11      	adds	r1, r2, #0
     e90:	1c1a      	adds	r2, r3, #0
     e92:	4b0d      	ldr	r3, [pc, #52]	; (ec8 <addKey+0x84>)
     e94:	4798      	blx	r3
     e96:	1c03      	adds	r3, r0, #0
     e98:	e00f      	b.n	eba <addKey+0x76>
// Adds a key
// You can override already assigned keys in run time
bool addKey(uint8_t keyId, GENERIC_KEY *key, KEYBOARD_LAYER layer)
{
	//adds a key to a specific layer already on the board
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
     e9a:	1c3b      	adds	r3, r7, #0
     e9c:	330f      	adds	r3, #15
     e9e:	781a      	ldrb	r2, [r3, #0]
     ea0:	1c3b      	adds	r3, r7, #0
     ea2:	330f      	adds	r3, #15
     ea4:	3201      	adds	r2, #1
     ea6:	701a      	strb	r2, [r3, #0]
     ea8:	4a06      	ldr	r2, [pc, #24]	; (ec4 <addKey+0x80>)
     eaa:	233c      	movs	r3, #60	; 0x3c
     eac:	5cd3      	ldrb	r3, [r2, r3]
     eae:	1c3a      	adds	r2, r7, #0
     eb0:	320f      	adds	r2, #15
     eb2:	7812      	ldrb	r2, [r2, #0]
     eb4:	429a      	cmp	r2, r3
     eb6:	d3d3      	bcc.n	e60 <addKey+0x1c>
		{
			//valid layer
			return addKeyToLayer(keyId, key, boardLayerManager.layers[i]);
		}
	}
	return false;//layer currently isn't in the board
     eb8:	2300      	movs	r3, #0
}
     eba:	1c18      	adds	r0, r3, #0
     ebc:	46bd      	mov	sp, r7
     ebe:	b004      	add	sp, #16
     ec0:	bd80      	pop	{r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	200009d0 	.word	0x200009d0
     ec8:	00000ecd 	.word	0x00000ecd

00000ecc <addKeyToLayer>:

bool addKeyToLayer(uint8_t keyId, GENERIC_KEY *key, LAYER *layer)
{
     ecc:	b580      	push	{r7, lr}
     ece:	b084      	sub	sp, #16
     ed0:	af00      	add	r7, sp, #0
     ed2:	60b9      	str	r1, [r7, #8]
     ed4:	607a      	str	r2, [r7, #4]
     ed6:	1c3b      	adds	r3, r7, #0
     ed8:	330f      	adds	r3, #15
     eda:	1c02      	adds	r2, r0, #0
     edc:	701a      	strb	r2, [r3, #0]
	//can over write existing keys
	//check that the input is valid
	if(key == 0 || layer == 0)
     ede:	68bb      	ldr	r3, [r7, #8]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d002      	beq.n	eea <addKeyToLayer+0x1e>
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d101      	bne.n	eee <addKeyToLayer+0x22>
	{
		return false;//invalid key, or layer
     eea:	2300      	movs	r3, #0
     eec:	e007      	b.n	efe <addKeyToLayer+0x32>
	}
	layer->keys[keyId] = key;
     eee:	1c3b      	adds	r3, r7, #0
     ef0:	330f      	adds	r3, #15
     ef2:	781a      	ldrb	r2, [r3, #0]
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	0092      	lsls	r2, r2, #2
     ef8:	68b9      	ldr	r1, [r7, #8]
     efa:	50d1      	str	r1, [r2, r3]
	return true;
     efc:	2301      	movs	r3, #1
}
     efe:	1c18      	adds	r0, r3, #0
     f00:	46bd      	mov	sp, r7
     f02:	b004      	add	sp, #16
     f04:	bd80      	pop	{r7, pc}
     f06:	46c0      	nop			; (mov r8, r8)

00000f08 <checkKeys>:



uint8_t checkKeys(void)
{
     f08:	b580      	push	{r7, lr}
     f0a:	b086      	sub	sp, #24
     f0c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
     f0e:	1c3b      	adds	r3, r7, #0
     f10:	3317      	adds	r3, #23
     f12:	2200      	movs	r2, #0
     f14:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     f16:	1c3b      	adds	r3, r7, #0
     f18:	3316      	adds	r3, #22
     f1a:	2200      	movs	r2, #0
     f1c:	701a      	strb	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     f1e:	1c3b      	adds	r3, r7, #0
     f20:	3317      	adds	r3, #23
     f22:	2200      	movs	r2, #0
     f24:	701a      	strb	r2, [r3, #0]
     f26:	e0ef      	b.n	1108 <checkKeys+0x200>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     f28:	1c3b      	adds	r3, r7, #0
     f2a:	3317      	adds	r3, #23
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2274      	movs	r2, #116	; 0x74
     f30:	4353      	muls	r3, r2
     f32:	1c1a      	adds	r2, r3, #0
     f34:	3288      	adds	r2, #136	; 0x88
     f36:	4b7a      	ldr	r3, [pc, #488]	; (1120 <checkKeys+0x218>)
     f38:	18d3      	adds	r3, r2, r3
     f3a:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     f3c:	1c3b      	adds	r3, r7, #0
     f3e:	3317      	adds	r3, #23
     f40:	781b      	ldrb	r3, [r3, #0]
     f42:	2274      	movs	r2, #116	; 0x74
     f44:	4353      	muls	r3, r2
     f46:	1c1a      	adds	r2, r3, #0
     f48:	3288      	adds	r2, #136	; 0x88
     f4a:	4b76      	ldr	r3, [pc, #472]	; (1124 <checkKeys+0x21c>)
     f4c:	18d3      	adds	r3, r2, r3
     f4e:	60fb      	str	r3, [r7, #12]
		
		ioport_set_pin_level(row->rowIO, true);
     f50:	693b      	ldr	r3, [r7, #16]
     f52:	681b      	ldr	r3, [r3, #0]
     f54:	1c18      	adds	r0, r3, #0
     f56:	2101      	movs	r1, #1
     f58:	4b73      	ldr	r3, [pc, #460]	; (1128 <checkKeys+0x220>)
     f5a:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, true);
     f5c:	68fb      	ldr	r3, [r7, #12]
     f5e:	681b      	ldr	r3, [r3, #0]
     f60:	1c18      	adds	r0, r3, #0
     f62:	2101      	movs	r1, #1
     f64:	4b70      	ldr	r3, [pc, #448]	; (1128 <checkKeys+0x220>)
     f66:	4798      	blx	r3
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     f68:	1c3b      	adds	r3, r7, #0
     f6a:	3316      	adds	r3, #22
     f6c:	2200      	movs	r2, #0
     f6e:	701a      	strb	r2, [r3, #0]
     f70:	e0b1      	b.n	10d6 <checkKeys+0x1ce>
		{
			KEY_OBJ *key = &row->keys[j];
     f72:	1c3b      	adds	r3, r7, #0
     f74:	3316      	adds	r3, #22
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	011b      	lsls	r3, r3, #4
     f7a:	693a      	ldr	r2, [r7, #16]
     f7c:	18d3      	adds	r3, r2, r3
     f7e:	3304      	adds	r3, #4
     f80:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
     f82:	1c3b      	adds	r3, r7, #0
     f84:	3316      	adds	r3, #22
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	011b      	lsls	r3, r3, #4
     f8a:	68fa      	ldr	r2, [r7, #12]
     f8c:	18d3      	adds	r3, r2, r3
     f8e:	3304      	adds	r3, #4
     f90:	607b      	str	r3, [r7, #4]
				
			key->previousState = key->currentState;
     f92:	68bb      	ldr	r3, [r7, #8]
     f94:	795a      	ldrb	r2, [r3, #5]
     f96:	68bb      	ldr	r3, [r7, #8]
     f98:	711a      	strb	r2, [r3, #4]
			key->currentState = ioport_get_pin_level(key->columnIO);
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	681b      	ldr	r3, [r3, #0]
     f9e:	1c18      	adds	r0, r3, #0
     fa0:	4b62      	ldr	r3, [pc, #392]	; (112c <checkKeys+0x224>)
     fa2:	4798      	blx	r3
     fa4:	1c03      	adds	r3, r0, #0
     fa6:	1c1a      	adds	r2, r3, #0
     fa8:	68bb      	ldr	r3, [r7, #8]
     faa:	715a      	strb	r2, [r3, #5]
			//delay_ms(KEY_DELAY_MS);
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	795b      	ldrb	r3, [r3, #5]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d018      	beq.n	fe6 <checkKeys+0xde>
     fb4:	68bb      	ldr	r3, [r7, #8]
     fb6:	791b      	ldrb	r3, [r3, #4]
     fb8:	2b00      	cmp	r3, #0
     fba:	d014      	beq.n	fe6 <checkKeys+0xde>
			{
				key->keyHoldCount++;
     fbc:	68bb      	ldr	r3, [r7, #8]
     fbe:	689b      	ldr	r3, [r3, #8]
     fc0:	1c5a      	adds	r2, r3, #1
     fc2:	68bb      	ldr	r3, [r7, #8]
     fc4:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     fc6:	68bb      	ldr	r3, [r7, #8]
     fc8:	689b      	ldr	r3, [r3, #8]
     fca:	2b01      	cmp	r3, #1
     fcc:	d107      	bne.n	fde <checkKeys+0xd6>
				{
					key->keyJustDown = true;
     fce:	68bb      	ldr	r3, [r7, #8]
     fd0:	2201      	movs	r2, #1
     fd2:	719a      	strb	r2, [r3, #6]
					handleKeyJustPressed(key);
     fd4:	68bb      	ldr	r3, [r7, #8]
     fd6:	1c18      	adds	r0, r3, #0
     fd8:	4b55      	ldr	r3, [pc, #340]	; (1130 <checkKeys+0x228>)
     fda:	4798      	blx	r3
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     fdc:	e031      	b.n	1042 <checkKeys+0x13a>
					key->keyJustDown = true;
					handleKeyJustPressed(key);
				}
				else
				{
					key->keyJustDown = false;
     fde:	68bb      	ldr	r3, [r7, #8]
     fe0:	2200      	movs	r2, #0
     fe2:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     fe4:	e02d      	b.n	1042 <checkKeys+0x13a>
				{
					key->keyJustDown = false;
					
				}
			}
			else if(key->currentState == false && key->previousState == false)
     fe6:	68bb      	ldr	r3, [r7, #8]
     fe8:	795b      	ldrb	r3, [r3, #5]
     fea:	2201      	movs	r2, #1
     fec:	4053      	eors	r3, r2
     fee:	b2db      	uxtb	r3, r3
     ff0:	2b00      	cmp	r3, #0
     ff2:	d020      	beq.n	1036 <checkKeys+0x12e>
     ff4:	68bb      	ldr	r3, [r7, #8]
     ff6:	791b      	ldrb	r3, [r3, #4]
     ff8:	2201      	movs	r2, #1
     ffa:	4053      	eors	r3, r2
     ffc:	b2db      	uxtb	r3, r3
     ffe:	2b00      	cmp	r3, #0
    1000:	d019      	beq.n	1036 <checkKeys+0x12e>
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
    1002:	68bb      	ldr	r3, [r7, #8]
    1004:	689b      	ldr	r3, [r3, #8]
    1006:	2b00      	cmp	r3, #0
    1008:	d00e      	beq.n	1028 <checkKeys+0x120>
    100a:	68bb      	ldr	r3, [r7, #8]
    100c:	79db      	ldrb	r3, [r3, #7]
    100e:	2201      	movs	r2, #1
    1010:	4053      	eors	r3, r2
    1012:	b2db      	uxtb	r3, r3
    1014:	2b00      	cmp	r3, #0
    1016:	d007      	beq.n	1028 <checkKeys+0x120>
				{
					key->keyJustRelease = true;
    1018:	68bb      	ldr	r3, [r7, #8]
    101a:	2201      	movs	r2, #1
    101c:	71da      	strb	r2, [r3, #7]
					//handle the key being released
					handleKeyJustReleased(key);
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	1c18      	adds	r0, r3, #0
    1022:	4b44      	ldr	r3, [pc, #272]	; (1134 <checkKeys+0x22c>)
    1024:	4798      	blx	r3
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
    1026:	e00c      	b.n	1042 <checkKeys+0x13a>
					//handle the key being released
					handleKeyJustReleased(key);
				}
				else
				{
					key->keyJustRelease = false;
    1028:	68bb      	ldr	r3, [r7, #8]
    102a:	2200      	movs	r2, #0
    102c:	71da      	strb	r2, [r3, #7]
					key->keyHoldCount = 0;
    102e:	68bb      	ldr	r3, [r7, #8]
    1030:	2200      	movs	r2, #0
    1032:	609a      	str	r2, [r3, #8]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
    1034:	e005      	b.n	1042 <checkKeys+0x13a>
					key->keyHoldCount = 0;
				}
			}
			else
			{
				key->keyJustRelease = false;
    1036:	68bb      	ldr	r3, [r7, #8]
    1038:	2200      	movs	r2, #0
    103a:	71da      	strb	r2, [r3, #7]
				key->keyJustDown = false;
    103c:	68bb      	ldr	r3, [r7, #8]
    103e:	2200      	movs	r2, #0
    1040:	719a      	strb	r2, [r3, #6]
			}
			
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	795b      	ldrb	r3, [r3, #5]
    1046:	2b00      	cmp	r3, #0
    1048:	d014      	beq.n	1074 <checkKeys+0x16c>
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	791b      	ldrb	r3, [r3, #4]
    104e:	2b00      	cmp	r3, #0
    1050:	d010      	beq.n	1074 <checkKeys+0x16c>
			{
				rightKey->keyHoldCount++;
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	689b      	ldr	r3, [r3, #8]
    1056:	1c5a      	adds	r2, r3, #1
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	689b      	ldr	r3, [r3, #8]
    1060:	2b01      	cmp	r3, #1
    1062:	d103      	bne.n	106c <checkKeys+0x164>
				{
					rightKey->keyJustDown = true;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	2201      	movs	r2, #1
    1068:	719a      	strb	r2, [r3, #6]
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    106a:	e02d      	b.n	10c8 <checkKeys+0x1c0>
				{
					rightKey->keyJustDown = true;
				}
				else
				{
					rightKey->keyJustDown = false;
    106c:	687b      	ldr	r3, [r7, #4]
    106e:	2200      	movs	r2, #0
    1070:	719a      	strb	r2, [r3, #6]
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    1072:	e029      	b.n	10c8 <checkKeys+0x1c0>
				{
					rightKey->keyJustDown = false;
								
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	795b      	ldrb	r3, [r3, #5]
    1078:	2201      	movs	r2, #1
    107a:	4053      	eors	r3, r2
    107c:	b2db      	uxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	d01c      	beq.n	10bc <checkKeys+0x1b4>
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	791b      	ldrb	r3, [r3, #4]
    1086:	2201      	movs	r2, #1
    1088:	4053      	eors	r3, r2
    108a:	b2db      	uxtb	r3, r3
    108c:	2b00      	cmp	r3, #0
    108e:	d015      	beq.n	10bc <checkKeys+0x1b4>
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
    1090:	687b      	ldr	r3, [r7, #4]
    1092:	689b      	ldr	r3, [r3, #8]
    1094:	2b00      	cmp	r3, #0
    1096:	d00a      	beq.n	10ae <checkKeys+0x1a6>
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	79db      	ldrb	r3, [r3, #7]
    109c:	2201      	movs	r2, #1
    109e:	4053      	eors	r3, r2
    10a0:	b2db      	uxtb	r3, r3
    10a2:	2b00      	cmp	r3, #0
    10a4:	d003      	beq.n	10ae <checkKeys+0x1a6>
				{
					rightKey->keyJustRelease = true;
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	2201      	movs	r2, #1
    10aa:	71da      	strb	r2, [r3, #7]
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
    10ac:	e00c      	b.n	10c8 <checkKeys+0x1c0>
					rightKey->keyJustRelease = true;
								
				}
				else
				{
					rightKey->keyJustRelease = false;
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	2200      	movs	r2, #0
    10b2:	71da      	strb	r2, [r3, #7]
					rightKey->keyHoldCount = 0;
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	2200      	movs	r2, #0
    10b8:	609a      	str	r2, [r3, #8]
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
    10ba:	e005      	b.n	10c8 <checkKeys+0x1c0>
					rightKey->keyHoldCount = 0;
				}
			}
			else
			{
				rightKey->keyJustRelease = false;
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	2200      	movs	r2, #0
    10c0:	71da      	strb	r2, [r3, #7]
				rightKey->keyJustDown = false;
    10c2:	687b      	ldr	r3, [r7, #4]
    10c4:	2200      	movs	r2, #0
    10c6:	719a      	strb	r2, [r3, #6]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		
		ioport_set_pin_level(row->rowIO, true);
		ioport_set_pin_level(rightRow->rowIO, true);
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
    10c8:	1c3b      	adds	r3, r7, #0
    10ca:	3316      	adds	r3, #22
    10cc:	781a      	ldrb	r2, [r3, #0]
    10ce:	1c3b      	adds	r3, r7, #0
    10d0:	3316      	adds	r3, #22
    10d2:	3201      	adds	r2, #1
    10d4:	701a      	strb	r2, [r3, #0]
    10d6:	1c3b      	adds	r3, r7, #0
    10d8:	3316      	adds	r3, #22
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	2b06      	cmp	r3, #6
    10de:	d800      	bhi.n	10e2 <checkKeys+0x1da>
    10e0:	e747      	b.n	f72 <checkKeys+0x6a>
				rightKey->keyJustRelease = false;
				rightKey->keyJustDown = false;
			}
		}
		
		ioport_set_pin_level(row->rowIO, false);//set the pin low
    10e2:	693b      	ldr	r3, [r7, #16]
    10e4:	681b      	ldr	r3, [r3, #0]
    10e6:	1c18      	adds	r0, r3, #0
    10e8:	2100      	movs	r1, #0
    10ea:	4b0f      	ldr	r3, [pc, #60]	; (1128 <checkKeys+0x220>)
    10ec:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
    10ee:	68fb      	ldr	r3, [r7, #12]
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	1c18      	adds	r0, r3, #0
    10f4:	2100      	movs	r1, #0
    10f6:	4b0c      	ldr	r3, [pc, #48]	; (1128 <checkKeys+0x220>)
    10f8:	4798      	blx	r3

uint8_t checkKeys(void)
{
	uint8_t i = 0;
	uint8_t j = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
    10fa:	1c3b      	adds	r3, r7, #0
    10fc:	3317      	adds	r3, #23
    10fe:	781a      	ldrb	r2, [r3, #0]
    1100:	1c3b      	adds	r3, r7, #0
    1102:	3317      	adds	r3, #23
    1104:	3201      	adds	r2, #1
    1106:	701a      	strb	r2, [r3, #0]
    1108:	1c3b      	adds	r3, r7, #0
    110a:	3317      	adds	r3, #23
    110c:	781b      	ldrb	r3, [r3, #0]
    110e:	2b05      	cmp	r3, #5
    1110:	d800      	bhi.n	1114 <checkKeys+0x20c>
    1112:	e709      	b.n	f28 <checkKeys+0x20>
		ioport_set_pin_level(row->rowIO, false);//set the pin low
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
	}
	
	
	return 0;
    1114:	2300      	movs	r3, #0
}
    1116:	1c18      	adds	r0, r3, #0
    1118:	46bd      	mov	sp, r7
    111a:	b006      	add	sp, #24
    111c:	bd80      	pop	{r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20000350 	.word	0x20000350
    1124:	20000690 	.word	0x20000690
    1128:	0000049d 	.word	0x0000049d
    112c:	000004c5 	.word	0x000004c5
    1130:	00001139 	.word	0x00001139
    1134:	000011b1 	.word	0x000011b1

00001138 <handleKeyJustPressed>:
	
}


static void handleKeyJustPressed(KEY_OBJ *key)
{
    1138:	b580      	push	{r7, lr}
    113a:	b088      	sub	sp, #32
    113c:	af00      	add	r7, sp, #0
    113e:	6078      	str	r0, [r7, #4]
	LAYER *layer = boardLayerManager.layers[boardLayerManager.currentLayer];
    1140:	4a18      	ldr	r2, [pc, #96]	; (11a4 <handleKeyJustPressed+0x6c>)
    1142:	233d      	movs	r3, #61	; 0x3d
    1144:	5cd3      	ldrb	r3, [r2, r3]
    1146:	1c1a      	adds	r2, r3, #0
    1148:	4b16      	ldr	r3, [pc, #88]	; (11a4 <handleKeyJustPressed+0x6c>)
    114a:	0092      	lsls	r2, r2, #2
    114c:	58d3      	ldr	r3, [r2, r3]
    114e:	61fb      	str	r3, [r7, #28]
	uint8_t keyId = key->keyId;
    1150:	1c3b      	adds	r3, r7, #0
    1152:	331b      	adds	r3, #27
    1154:	687a      	ldr	r2, [r7, #4]
    1156:	7b12      	ldrb	r2, [r2, #12]
    1158:	701a      	strb	r2, [r3, #0]
	GENERIC_KEY *genericKey = layer->keys[keyId];
    115a:	1c3b      	adds	r3, r7, #0
    115c:	331b      	adds	r3, #27
    115e:	781a      	ldrb	r2, [r3, #0]
    1160:	69fb      	ldr	r3, [r7, #28]
    1162:	0092      	lsls	r2, r2, #2
    1164:	58d3      	ldr	r3, [r2, r3]
    1166:	617b      	str	r3, [r7, #20]
	if(genericKey == 0)
    1168:	697b      	ldr	r3, [r7, #20]
    116a:	2b00      	cmp	r3, #0
    116c:	d100      	bne.n	1170 <handleKeyJustPressed+0x38>
	{	
		return;//no key
    116e:	e015      	b.n	119c <handleKeyJustPressed+0x64>
	}
	//since all of the generic keys have the type as the first var in the struct this works
	KEY_PTR_TYPE keyType = genericKey->standard.type;
    1170:	1c3b      	adds	r3, r7, #0
    1172:	3313      	adds	r3, #19
    1174:	697a      	ldr	r2, [r7, #20]
    1176:	7812      	ldrb	r2, [r2, #0]
    1178:	701a      	strb	r2, [r3, #0]
	if(keyType == STANDARD_KEY_TYPE)
    117a:	1c3b      	adds	r3, r7, #0
    117c:	3313      	adds	r3, #19
    117e:	781b      	ldrb	r3, [r3, #0]
    1180:	2b00      	cmp	r3, #0
    1182:	d10b      	bne.n	119c <handleKeyJustPressed+0x64>
	{
		//
		STANDARD_KEY *standardKey = (STANDARD_KEY*) genericKey;
    1184:	697b      	ldr	r3, [r7, #20]
    1186:	60fb      	str	r3, [r7, #12]
		udi_hid_kbd_modifier_down(standardKey->modifiers);
    1188:	68fb      	ldr	r3, [r7, #12]
    118a:	789b      	ldrb	r3, [r3, #2]
    118c:	1c18      	adds	r0, r3, #0
    118e:	4b06      	ldr	r3, [pc, #24]	; (11a8 <handleKeyJustPressed+0x70>)
    1190:	4798      	blx	r3
		udi_hid_kbd_down(standardKey->hid);
    1192:	68fb      	ldr	r3, [r7, #12]
    1194:	785b      	ldrb	r3, [r3, #1]
    1196:	1c18      	adds	r0, r3, #0
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <handleKeyJustPressed+0x74>)
    119a:	4798      	blx	r3
	{
		
		
	}
	
}
    119c:	46bd      	mov	sp, r7
    119e:	b008      	add	sp, #32
    11a0:	bd80      	pop	{r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	200009d0 	.word	0x200009d0
    11a8:	00002c2d 	.word	0x00002c2d
    11ac:	00002d61 	.word	0x00002d61

000011b0 <handleKeyJustReleased>:


static void handleKeyJustReleased(KEY_OBJ *key)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b088      	sub	sp, #32
    11b4:	af00      	add	r7, sp, #0
    11b6:	6078      	str	r0, [r7, #4]
	LAYER *layer = boardLayerManager.layers[boardLayerManager.currentLayer];
    11b8:	4a18      	ldr	r2, [pc, #96]	; (121c <handleKeyJustReleased+0x6c>)
    11ba:	233d      	movs	r3, #61	; 0x3d
    11bc:	5cd3      	ldrb	r3, [r2, r3]
    11be:	1c1a      	adds	r2, r3, #0
    11c0:	4b16      	ldr	r3, [pc, #88]	; (121c <handleKeyJustReleased+0x6c>)
    11c2:	0092      	lsls	r2, r2, #2
    11c4:	58d3      	ldr	r3, [r2, r3]
    11c6:	61fb      	str	r3, [r7, #28]
	uint8_t keyId = key->keyId;
    11c8:	1c3b      	adds	r3, r7, #0
    11ca:	331b      	adds	r3, #27
    11cc:	687a      	ldr	r2, [r7, #4]
    11ce:	7b12      	ldrb	r2, [r2, #12]
    11d0:	701a      	strb	r2, [r3, #0]
	GENERIC_KEY *genericKey = layer->keys[keyId];
    11d2:	1c3b      	adds	r3, r7, #0
    11d4:	331b      	adds	r3, #27
    11d6:	781a      	ldrb	r2, [r3, #0]
    11d8:	69fb      	ldr	r3, [r7, #28]
    11da:	0092      	lsls	r2, r2, #2
    11dc:	58d3      	ldr	r3, [r2, r3]
    11de:	617b      	str	r3, [r7, #20]
	if(genericKey == 0)
    11e0:	697b      	ldr	r3, [r7, #20]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d100      	bne.n	11e8 <handleKeyJustReleased+0x38>
	{
		
		return;//no key
    11e6:	e015      	b.n	1214 <handleKeyJustReleased+0x64>
	}
	//since all of the generic keys have the type as the first var in the struct this works
	KEY_PTR_TYPE keyType = genericKey->standard.type;
    11e8:	1c3b      	adds	r3, r7, #0
    11ea:	3313      	adds	r3, #19
    11ec:	697a      	ldr	r2, [r7, #20]
    11ee:	7812      	ldrb	r2, [r2, #0]
    11f0:	701a      	strb	r2, [r3, #0]
	if(keyType == STANDARD_KEY_TYPE)
    11f2:	1c3b      	adds	r3, r7, #0
    11f4:	3313      	adds	r3, #19
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d10b      	bne.n	1214 <handleKeyJustReleased+0x64>
	{
		STANDARD_KEY *standardKey = (STANDARD_KEY*) genericKey;
    11fc:	697b      	ldr	r3, [r7, #20]
    11fe:	60fb      	str	r3, [r7, #12]
		udi_hid_kbd_modifier_up(standardKey->modifiers);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	789b      	ldrb	r3, [r3, #2]
    1204:	1c18      	adds	r0, r3, #0
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <handleKeyJustReleased+0x70>)
    1208:	4798      	blx	r3
		udi_hid_kbd_up(standardKey->hid);		
    120a:	68fb      	ldr	r3, [r7, #12]
    120c:	785b      	ldrb	r3, [r3, #1]
    120e:	1c18      	adds	r0, r3, #0
    1210:	4b04      	ldr	r3, [pc, #16]	; (1224 <handleKeyJustReleased+0x74>)
    1212:	4798      	blx	r3
	{
		
		
	}
	
    1214:	46bd      	mov	sp, r7
    1216:	b008      	add	sp, #32
    1218:	bd80      	pop	{r7, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	200009d0 	.word	0x200009d0
    1220:	00002bd5 	.word	0x00002bd5
    1224:	00002c81 	.word	0x00002c81

00001228 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1228:	b580      	push	{r7, lr}
    122a:	b084      	sub	sp, #16
    122c:	af00      	add	r7, sp, #0
    122e:	1c02      	adds	r2, r0, #0
    1230:	1dfb      	adds	r3, r7, #7
    1232:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1234:	1c3b      	adds	r3, r7, #0
    1236:	330f      	adds	r3, #15
    1238:	1dfa      	adds	r2, r7, #7
    123a:	7812      	ldrb	r2, [r2, #0]
    123c:	09d2      	lsrs	r2, r2, #7
    123e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1240:	1c3b      	adds	r3, r7, #0
    1242:	330e      	adds	r3, #14
    1244:	1dfa      	adds	r2, r7, #7
    1246:	7812      	ldrb	r2, [r2, #0]
    1248:	0952      	lsrs	r2, r2, #5
    124a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    124c:	4b0d      	ldr	r3, [pc, #52]	; (1284 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    124e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1250:	1c3b      	adds	r3, r7, #0
    1252:	330f      	adds	r3, #15
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d10e      	bne.n	1278 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    125a:	1c3b      	adds	r3, r7, #0
    125c:	330f      	adds	r3, #15
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	009b      	lsls	r3, r3, #2
    1262:	2210      	movs	r2, #16
    1264:	19d2      	adds	r2, r2, r7
    1266:	18d3      	adds	r3, r2, r3
    1268:	3b08      	subs	r3, #8
    126a:	681a      	ldr	r2, [r3, #0]
    126c:	1c3b      	adds	r3, r7, #0
    126e:	330e      	adds	r3, #14
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	01db      	lsls	r3, r3, #7
    1274:	18d3      	adds	r3, r2, r3
    1276:	e000      	b.n	127a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    1278:	2300      	movs	r3, #0
	}
}
    127a:	1c18      	adds	r0, r3, #0
    127c:	46bd      	mov	sp, r7
    127e:	b004      	add	sp, #16
    1280:	bd80      	pop	{r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	41004400 	.word	0x41004400

00001288 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1288:	b580      	push	{r7, lr}
    128a:	b082      	sub	sp, #8
    128c:	af00      	add	r7, sp, #0
    128e:	1c02      	adds	r2, r0, #0
    1290:	1dfb      	adds	r3, r7, #7
    1292:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1294:	1dfb      	adds	r3, r7, #7
    1296:	781b      	ldrb	r3, [r3, #0]
    1298:	1c18      	adds	r0, r3, #0
    129a:	4b03      	ldr	r3, [pc, #12]	; (12a8 <port_get_group_from_gpio_pin+0x20>)
    129c:	4798      	blx	r3
    129e:	1c03      	adds	r3, r0, #0
}
    12a0:	1c18      	adds	r0, r3, #0
    12a2:	46bd      	mov	sp, r7
    12a4:	b002      	add	sp, #8
    12a6:	bd80      	pop	{r7, pc}
    12a8:	00001229 	.word	0x00001229

000012ac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	b084      	sub	sp, #16
    12b0:	af00      	add	r7, sp, #0
    12b2:	1c0a      	adds	r2, r1, #0
    12b4:	1dfb      	adds	r3, r7, #7
    12b6:	1c01      	adds	r1, r0, #0
    12b8:	7019      	strb	r1, [r3, #0]
    12ba:	1dbb      	adds	r3, r7, #6
    12bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    12be:	1dfb      	adds	r3, r7, #7
    12c0:	781b      	ldrb	r3, [r3, #0]
    12c2:	1c18      	adds	r0, r3, #0
    12c4:	4b0d      	ldr	r3, [pc, #52]	; (12fc <port_pin_set_output_level+0x50>)
    12c6:	4798      	blx	r3
    12c8:	1c03      	adds	r3, r0, #0
    12ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12cc:	1dfb      	adds	r3, r7, #7
    12ce:	781a      	ldrb	r2, [r3, #0]
    12d0:	231f      	movs	r3, #31
    12d2:	4013      	ands	r3, r2
    12d4:	2201      	movs	r2, #1
    12d6:	1c11      	adds	r1, r2, #0
    12d8:	4099      	lsls	r1, r3
    12da:	1c0b      	adds	r3, r1, #0
    12dc:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    12de:	1dbb      	adds	r3, r7, #6
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d003      	beq.n	12ee <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	68ba      	ldr	r2, [r7, #8]
    12ea:	619a      	str	r2, [r3, #24]
    12ec:	e002      	b.n	12f4 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12ee:	68fb      	ldr	r3, [r7, #12]
    12f0:	68ba      	ldr	r2, [r7, #8]
    12f2:	615a      	str	r2, [r3, #20]
	}
}
    12f4:	46bd      	mov	sp, r7
    12f6:	b004      	add	sp, #16
    12f8:	bd80      	pop	{r7, pc}
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	00001289 	.word	0x00001289

00001300 <udc_remotewakeup>:

/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
    1300:	b580      	push	{r7, lr}
    1302:	af00      	add	r7, sp, #0
	udd_send_remotewakeup();
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <udc_remotewakeup+0xc>)
    1306:	4798      	blx	r3
}
    1308:	46bd      	mov	sp, r7
    130a:	bd80      	pop	{r7, pc}
    130c:	000083f9 	.word	0x000083f9

00001310 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
    1310:	b580      	push	{r7, lr}
    1312:	af00      	add	r7, sp, #0
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
    1314:	4b03      	ldr	r3, [pc, #12]	; (1324 <ui_wakeup_handler+0x14>)
    1316:	4798      	blx	r3
	LED_On(LED_0_PIN);
    1318:	203e      	movs	r0, #62	; 0x3e
    131a:	2100      	movs	r1, #0
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <ui_wakeup_handler+0x18>)
    131e:	4798      	blx	r3
}
    1320:	46bd      	mov	sp, r7
    1322:	bd80      	pop	{r7, pc}
    1324:	00001301 	.word	0x00001301
    1328:	000012ad 	.word	0x000012ad

0000132c <ui_init>:

void ui_init(void)
{
    132c:	b580      	push	{r7, lr}
    132e:	b084      	sub	sp, #16
    1330:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
    1332:	1d3b      	adds	r3, r7, #4
    1334:	1c18      	adds	r0, r3, #0
    1336:	4b14      	ldr	r3, [pc, #80]	; (1388 <ui_init+0x5c>)
    1338:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
    133a:	1d3b      	adds	r3, r7, #4
    133c:	220f      	movs	r2, #15
    133e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
    1340:	1d3b      	adds	r3, r7, #4
    1342:	2200      	movs	r2, #0
    1344:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
    1346:	1d3b      	adds	r3, r7, #4
    1348:	2201      	movs	r2, #1
    134a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.filter_input_signal = true;
    134c:	1d3b      	adds	r3, r7, #4
    134e:	2201      	movs	r2, #1
    1350:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
    1352:	1d3b      	adds	r3, r7, #4
    1354:	2202      	movs	r2, #2
    1356:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    1358:	1d3b      	adds	r3, r7, #4
    135a:	200f      	movs	r0, #15
    135c:	1c19      	adds	r1, r3, #0
    135e:	4b0b      	ldr	r3, [pc, #44]	; (138c <ui_init+0x60>)
    1360:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
    1362:	4b0b      	ldr	r3, [pc, #44]	; (1390 <ui_init+0x64>)
    1364:	1c18      	adds	r0, r3, #0
    1366:	210f      	movs	r1, #15
    1368:	2200      	movs	r2, #0
    136a:	4b0a      	ldr	r3, [pc, #40]	; (1394 <ui_init+0x68>)
    136c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    136e:	200f      	movs	r0, #15
    1370:	2100      	movs	r1, #0
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <ui_init+0x6c>)
    1374:	4798      	blx	r3

	/* Initialize LEDs */
	initKeyBoard();
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <ui_init+0x70>)
    1378:	4798      	blx	r3
	LED_On(LED_0_PIN);
    137a:	203e      	movs	r0, #62	; 0x3e
    137c:	2100      	movs	r1, #0
    137e:	4b08      	ldr	r3, [pc, #32]	; (13a0 <ui_init+0x74>)
    1380:	4798      	blx	r3
}
    1382:	46bd      	mov	sp, r7
    1384:	b004      	add	sp, #16
    1386:	bd80      	pop	{r7, pc}
    1388:	00005259 	.word	0x00005259
    138c:	0000528d 	.word	0x0000528d
    1390:	00001311 	.word	0x00001311
    1394:	00004e71 	.word	0x00004e71
    1398:	00004ecd 	.word	0x00004ecd
    139c:	00000a79 	.word	0x00000a79
    13a0:	000012ad 	.word	0x000012ad

000013a4 <ui_powerdown>:

void ui_powerdown(void)
{
    13a4:	b580      	push	{r7, lr}
    13a6:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
    13a8:	203e      	movs	r0, #62	; 0x3e
    13aa:	2101      	movs	r1, #1
    13ac:	4b01      	ldr	r3, [pc, #4]	; (13b4 <ui_powerdown+0x10>)
    13ae:	4798      	blx	r3
}
    13b0:	46bd      	mov	sp, r7
    13b2:	bd80      	pop	{r7, pc}
    13b4:	000012ad 	.word	0x000012ad

000013b8 <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
    13b8:	b580      	push	{r7, lr}
    13ba:	af00      	add	r7, sp, #0
	//enable the external interrupts here
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    13bc:	200f      	movs	r0, #15
    13be:	2100      	movs	r1, #0
    13c0:	4b01      	ldr	r3, [pc, #4]	; (13c8 <ui_wakeup_enable+0x10>)
    13c2:	4798      	blx	r3
}
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}
    13c8:	00004ecd 	.word	0x00004ecd

000013cc <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	af00      	add	r7, sp, #0
	//disable the external interrupts here
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    13d0:	200f      	movs	r0, #15
    13d2:	2100      	movs	r1, #0
    13d4:	4b01      	ldr	r3, [pc, #4]	; (13dc <ui_wakeup_disable+0x10>)
    13d6:	4798      	blx	r3
}
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	00004f15 	.word	0x00004f15

000013e0 <ui_wakeup>:

void ui_wakeup(void)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	af00      	add	r7, sp, #0
	//when we wake up we need to turn all of the pins low, instead of driving them high
	LED_On(LED_0_PIN);
    13e4:	203e      	movs	r0, #62	; 0x3e
    13e6:	2100      	movs	r1, #0
    13e8:	4b01      	ldr	r3, [pc, #4]	; (13f0 <ui_wakeup+0x10>)
    13ea:	4798      	blx	r3
}
    13ec:	46bd      	mov	sp, r7
    13ee:	bd80      	pop	{r7, pc}
    13f0:	000012ad 	.word	0x000012ad

000013f4 <ui_com_open>:

void ui_com_open(uint8_t port)
{
    13f4:	b580      	push	{r7, lr}
    13f6:	b082      	sub	sp, #8
    13f8:	af00      	add	r7, sp, #0
    13fa:	1c02      	adds	r2, r0, #0
    13fc:	1dfb      	adds	r3, r7, #7
    13fe:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
    1400:	46bd      	mov	sp, r7
    1402:	b002      	add	sp, #8
    1404:	bd80      	pop	{r7, pc}
    1406:	46c0      	nop			; (mov r8, r8)

00001408 <ui_com_close>:


void ui_com_close(uint8_t port)
{
    1408:	b580      	push	{r7, lr}
    140a:	b082      	sub	sp, #8
    140c:	af00      	add	r7, sp, #0
    140e:	1c02      	adds	r2, r0, #0
    1410:	1dfb      	adds	r3, r7, #7
    1412:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
    1414:	46bd      	mov	sp, r7
    1416:	b002      	add	sp, #8
    1418:	bd80      	pop	{r7, pc}
    141a:	46c0      	nop			; (mov r8, r8)

0000141c <ui_com_rx_start>:


void ui_com_rx_start(void)
{
    141c:	b580      	push	{r7, lr}
    141e:	af00      	add	r7, sp, #0

}
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}

00001424 <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{
    1424:	b580      	push	{r7, lr}
    1426:	af00      	add	r7, sp, #0

}
    1428:	46bd      	mov	sp, r7
    142a:	bd80      	pop	{r7, pc}

0000142c <ui_com_tx_start>:


void ui_com_tx_start(void)
{
    142c:	b580      	push	{r7, lr}
    142e:	af00      	add	r7, sp, #0

}
    1430:	46bd      	mov	sp, r7
    1432:	bd80      	pop	{r7, pc}

00001434 <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{
    1434:	b580      	push	{r7, lr}
    1436:	af00      	add	r7, sp, #0

}
    1438:	46bd      	mov	sp, r7
    143a:	bd80      	pop	{r7, pc}

0000143c <ui_com_overflow>:

}


void ui_com_overflow(void)
{
    143c:	b580      	push	{r7, lr}
    143e:	af00      	add	r7, sp, #0

}
    1440:	46bd      	mov	sp, r7
    1442:	bd80      	pop	{r7, pc}

00001444 <ui_start_read>:

void ui_start_read(void)
{
    1444:	b580      	push	{r7, lr}
    1446:	af00      	add	r7, sp, #0
}
    1448:	46bd      	mov	sp, r7
    144a:	bd80      	pop	{r7, pc}

0000144c <ui_stop_read>:

void ui_stop_read(void)
{
    144c:	b580      	push	{r7, lr}
    144e:	af00      	add	r7, sp, #0
}
    1450:	46bd      	mov	sp, r7
    1452:	bd80      	pop	{r7, pc}

00001454 <ui_start_write>:

void ui_start_write(void)
{
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
}
    1458:	46bd      	mov	sp, r7
    145a:	bd80      	pop	{r7, pc}

0000145c <ui_stop_write>:

void ui_stop_write(void)
{
    145c:	b580      	push	{r7, lr}
    145e:	af00      	add	r7, sp, #0
}
    1460:	46bd      	mov	sp, r7
    1462:	bd80      	pop	{r7, pc}

00001464 <ui_process>:

void ui_process(uint16_t framenumber)
{
    1464:	b580      	push	{r7, lr}
    1466:	b0ae      	sub	sp, #184	; 0xb8
    1468:	af00      	add	r7, sp, #0
    146a:	1c02      	adds	r2, r0, #0
    146c:	1dbb      	adds	r3, r7, #6
    146e:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	uint8_t value;
	uint8_t numberOfKeys = 0;
    1470:	1c3b      	adds	r3, r7, #0
    1472:	33b6      	adds	r3, #182	; 0xb6
    1474:	2200      	movs	r2, #0
    1476:	701a      	strb	r2, [r3, #0]
	uint8_t i= 0;
    1478:	1c3b      	adds	r3, r7, #0
    147a:	33b7      	adds	r3, #183	; 0xb7
    147c:	2200      	movs	r2, #0
    147e:	701a      	strb	r2, [r3, #0]
	uint8_t hidOnlyCount = 0;
    1480:	1c3b      	adds	r3, r7, #0
    1482:	33b5      	adds	r3, #181	; 0xb5
    1484:	2200      	movs	r2, #0
    1486:	701a      	strb	r2, [r3, #0]
	uint8_t keyValue = 0;
    1488:	1c3b      	adds	r3, r7, #0
    148a:	33b4      	adds	r3, #180	; 0xb4
    148c:	2200      	movs	r2, #0
    148e:	701a      	strb	r2, [r3, #0]

	//use the cpt_sof to handle the debounce
	cpt_sof++;
    1490:	4b28      	ldr	r3, [pc, #160]	; (1534 <ui_process+0xd0>)
    1492:	781b      	ldrb	r3, [r3, #0]
    1494:	3301      	adds	r3, #1
    1496:	b2da      	uxtb	r2, r3
    1498:	4b26      	ldr	r3, [pc, #152]	; (1534 <ui_process+0xd0>)
    149a:	701a      	strb	r2, [r3, #0]
	if(cpt_sof < 15)
    149c:	4b25      	ldr	r3, [pc, #148]	; (1534 <ui_process+0xd0>)
    149e:	781b      	ldrb	r3, [r3, #0]
    14a0:	2b0e      	cmp	r3, #14
    14a2:	d944      	bls.n	152e <ui_process+0xca>
	{
		return;
	}
	cpt_sof = 0;
    14a4:	4b23      	ldr	r3, [pc, #140]	; (1534 <ui_process+0xd0>)
    14a6:	2200      	movs	r2, #0
    14a8:	701a      	strb	r2, [r3, #0]

	//array of pointers to an array
	//Yes this Way more that is needed
	KEY_OBJ *keyArr[NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS];
	//clear out all of the in the array
	memset(keyArr, 0, (sizeof(KEY_OBJ*)*NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS));
    14aa:	1c3b      	adds	r3, r7, #0
    14ac:	330c      	adds	r3, #12
    14ae:	1c18      	adds	r0, r3, #0
    14b0:	2100      	movs	r1, #0
    14b2:	22a8      	movs	r2, #168	; 0xa8
    14b4:	4b20      	ldr	r3, [pc, #128]	; (1538 <ui_process+0xd4>)
    14b6:	4798      	blx	r3

	if ((framenumber % 1000) == 0) {
    14b8:	1dbb      	adds	r3, r7, #6
    14ba:	881a      	ldrh	r2, [r3, #0]
    14bc:	4b1f      	ldr	r3, [pc, #124]	; (153c <ui_process+0xd8>)
    14be:	1c10      	adds	r0, r2, #0
    14c0:	22fa      	movs	r2, #250	; 0xfa
    14c2:	0091      	lsls	r1, r2, #2
    14c4:	4798      	blx	r3
    14c6:	1c0b      	adds	r3, r1, #0
    14c8:	b29b      	uxth	r3, r3
    14ca:	2b00      	cmp	r3, #0
    14cc:	d103      	bne.n	14d6 <ui_process+0x72>
		LED_On(LED_0_PIN);
    14ce:	203e      	movs	r0, #62	; 0x3e
    14d0:	2100      	movs	r1, #0
    14d2:	4b1b      	ldr	r3, [pc, #108]	; (1540 <ui_process+0xdc>)
    14d4:	4798      	blx	r3
	}
	
	
	
	if ((framenumber % 1000) == 500) {
    14d6:	1dbb      	adds	r3, r7, #6
    14d8:	881a      	ldrh	r2, [r3, #0]
    14da:	4b18      	ldr	r3, [pc, #96]	; (153c <ui_process+0xd8>)
    14dc:	1c10      	adds	r0, r2, #0
    14de:	22fa      	movs	r2, #250	; 0xfa
    14e0:	0091      	lsls	r1, r2, #2
    14e2:	4798      	blx	r3
    14e4:	1c0b      	adds	r3, r1, #0
    14e6:	b29a      	uxth	r2, r3
    14e8:	23fa      	movs	r3, #250	; 0xfa
    14ea:	005b      	lsls	r3, r3, #1
    14ec:	429a      	cmp	r2, r3
    14ee:	d103      	bne.n	14f8 <ui_process+0x94>
		LED_Off(LED_0_PIN);
    14f0:	203e      	movs	r0, #62	; 0x3e
    14f2:	2101      	movs	r1, #1
    14f4:	4b12      	ldr	r3, [pc, #72]	; (1540 <ui_process+0xdc>)
    14f6:	4798      	blx	r3
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
    14f8:	1c3b      	adds	r3, r7, #0
    14fa:	33b7      	adds	r3, #183	; 0xb7
    14fc:	2200      	movs	r2, #0
    14fe:	701a      	strb	r2, [r3, #0]
    1500:	e00e      	b.n	1520 <ui_process+0xbc>
	{
		keyArr[i] = 0;
    1502:	1c3b      	adds	r3, r7, #0
    1504:	33b7      	adds	r3, #183	; 0xb7
    1506:	781a      	ldrb	r2, [r3, #0]
    1508:	1c3b      	adds	r3, r7, #0
    150a:	330c      	adds	r3, #12
    150c:	0092      	lsls	r2, r2, #2
    150e:	2100      	movs	r1, #0
    1510:	50d1      	str	r1, [r2, r3]
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
    1512:	1c3b      	adds	r3, r7, #0
    1514:	33b7      	adds	r3, #183	; 0xb7
    1516:	781a      	ldrb	r2, [r3, #0]
    1518:	1c3b      	adds	r3, r7, #0
    151a:	33b7      	adds	r3, #183	; 0xb7
    151c:	3201      	adds	r2, #1
    151e:	701a      	strb	r2, [r3, #0]
    1520:	1c3b      	adds	r3, r7, #0
    1522:	33b7      	adds	r3, #183	; 0xb7
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	2b29      	cmp	r3, #41	; 0x29
    1528:	d9eb      	bls.n	1502 <ui_process+0x9e>
	{
		keyArr[i] = 0;
	}
	//checks and sends the keys to the pc	
	checkKeys();
    152a:	4b06      	ldr	r3, [pc, #24]	; (1544 <ui_process+0xe0>)
    152c:	4798      	blx	r3
				//sequence_running = false;
				//button_function  = 1;
			//}
		//}
	//}
}
    152e:	46bd      	mov	sp, r7
    1530:	b02e      	add	sp, #184	; 0xb8
    1532:	bd80      	pop	{r7, pc}
    1534:	20000a10 	.word	0x20000a10
    1538:	0000b8ab 	.word	0x0000b8ab
    153c:	0000b6f1 	.word	0x0000b6f1
    1540:	000012ad 	.word	0x000012ad
    1544:	00000f09 	.word	0x00000f09

00001548 <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
    1548:	b580      	push	{r7, lr}
    154a:	b082      	sub	sp, #8
    154c:	af00      	add	r7, sp, #0
    154e:	1c02      	adds	r2, r0, #0
    1550:	1dfb      	adds	r3, r7, #7
    1552:	701a      	strb	r2, [r3, #0]
	UNUSED(value);
}
    1554:	46bd      	mov	sp, r7
    1556:	b002      	add	sp, #8
    1558:	bd80      	pop	{r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)

0000155c <virtual_test_unit_ready>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_test_unit_ready(void)
{
    155c:	b580      	push	{r7, lr}
    155e:	af00      	add	r7, sp, #0
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
    1560:	4b04      	ldr	r3, [pc, #16]	; (1574 <virtual_test_unit_ready+0x18>)
    1562:	781b      	ldrb	r3, [r3, #0]
    1564:	2b00      	cmp	r3, #0
    1566:	d001      	beq.n	156c <virtual_test_unit_ready+0x10>
    1568:	2302      	movs	r3, #2
    156a:	e000      	b.n	156e <virtual_test_unit_ready+0x12>
    156c:	2300      	movs	r3, #0
}
    156e:	1c18      	adds	r0, r3, #0
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}
    1574:	20003a14 	.word	0x20003a14

00001578 <virtual_read_capacity>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_read_capacity(uint32_t *uint32_t_nb_sector)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
	if (b_vmem_unloaded) {
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <virtual_read_capacity+0x24>)
    1582:	781b      	ldrb	r3, [r3, #0]
    1584:	2b00      	cmp	r3, #0
    1586:	d001      	beq.n	158c <virtual_read_capacity+0x14>
		return CTRL_NO_PRESENT;
    1588:	2302      	movs	r3, #2
    158a:	e003      	b.n	1594 <virtual_read_capacity+0x1c>
	}

	if (VMEM_NB_SECTOR<8) {
		*uint32_t_nb_sector = 8-1;
	} else {
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	2217      	movs	r2, #23
    1590:	601a      	str	r2, [r3, #0]
	}
	return CTRL_GOOD;
    1592:	2300      	movs	r3, #0
}
    1594:	1c18      	adds	r0, r3, #0
    1596:	46bd      	mov	sp, r7
    1598:	b002      	add	sp, #8
    159a:	bd80      	pop	{r7, pc}
    159c:	20003a14 	.word	0x20003a14

000015a0 <virtual_wr_protect>:
//! This function returns the write-protected mode
//!
//! @return true if the memory is protected
//!
bool virtual_wr_protect(void)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	af00      	add	r7, sp, #0
	return false;
    15a4:	2300      	movs	r3, #0
}
    15a6:	1c18      	adds	r0, r3, #0
    15a8:	46bd      	mov	sp, r7
    15aa:	bd80      	pop	{r7, pc}

000015ac <virtual_removal>:
//! This function informs about the memory type
//!
//! @return true if the memory is removable
//!
bool virtual_removal(void)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	af00      	add	r7, sp, #0
	return true;
    15b0:	2301      	movs	r3, #1
}
    15b2:	1c18      	adds	r0, r3, #0
    15b4:	46bd      	mov	sp, r7
    15b6:	bd80      	pop	{r7, pc}

000015b8 <virtual_usb_trans>:
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
static Ctrl_status virtual_usb_trans(uint32_t addr, uint16_t nb_sector,
		bool b_read)
{
    15b8:	b590      	push	{r4, r7, lr}
    15ba:	b085      	sub	sp, #20
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
    15c0:	1cbb      	adds	r3, r7, #2
    15c2:	8019      	strh	r1, [r3, #0]
    15c4:	1c7b      	adds	r3, r7, #1
    15c6:	701a      	strb	r2, [r3, #0]
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2b18      	cmp	r3, #24
    15cc:	d805      	bhi.n	15da <virtual_usb_trans+0x22>
    15ce:	1cbb      	adds	r3, r7, #2
    15d0:	881a      	ldrh	r2, [r3, #0]
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	18d3      	adds	r3, r2, r3
    15d6:	2b18      	cmp	r3, #24
    15d8:	d901      	bls.n	15de <virtual_usb_trans+0x26>
		return CTRL_FAIL;
    15da:	2301      	movs	r3, #1
    15dc:	e036      	b.n	164c <virtual_usb_trans+0x94>
	}

	while (nb_sector) {
    15de:	e030      	b.n	1642 <virtual_usb_trans+0x8a>
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
    15e0:	1cbb      	adds	r3, r7, #2
    15e2:	881b      	ldrh	r3, [r3, #0]
    15e4:	2b7f      	cmp	r3, #127	; 0x7f
    15e6:	d803      	bhi.n	15f0 <virtual_usb_trans+0x38>
    15e8:	1cbb      	adds	r3, r7, #2
    15ea:	881b      	ldrh	r3, [r3, #0]
    15ec:	b2db      	uxtb	r3, r3
    15ee:	e000      	b.n	15f2 <virtual_usb_trans+0x3a>
    15f0:	2380      	movs	r3, #128	; 0x80
    15f2:	1c3a      	adds	r2, r7, #0
    15f4:	320f      	adds	r2, #15
    15f6:	7013      	strb	r3, [r2, #0]
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	1c5a      	adds	r2, r3, #1
    15fc:	607a      	str	r2, [r7, #4]
    15fe:	025a      	lsls	r2, r3, #9
    1600:	4b14      	ldr	r3, [pc, #80]	; (1654 <virtual_usb_trans+0x9c>)
    1602:	18d3      	adds	r3, r2, r3
    1604:	60bb      	str	r3, [r7, #8]
		if (!udi_msc_trans_block( b_read, ptr_cram,
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
    1606:	1c3b      	adds	r3, r7, #0
    1608:	330f      	adds	r3, #15
    160a:	781b      	ldrb	r3, [r3, #0]
    160c:	025b      	lsls	r3, r3, #9

	while (nb_sector) {
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
		if (!udi_msc_trans_block( b_read, ptr_cram,
    160e:	1c7a      	adds	r2, r7, #1
    1610:	7811      	ldrb	r1, [r2, #0]
    1612:	68ba      	ldr	r2, [r7, #8]
    1614:	1c08      	adds	r0, r1, #0
    1616:	1c11      	adds	r1, r2, #0
    1618:	1c1a      	adds	r2, r3, #0
    161a:	2300      	movs	r3, #0
    161c:	4c0e      	ldr	r4, [pc, #56]	; (1658 <virtual_usb_trans+0xa0>)
    161e:	47a0      	blx	r4
    1620:	1c03      	adds	r3, r0, #0
    1622:	2201      	movs	r2, #1
    1624:	4053      	eors	r3, r2
    1626:	b2db      	uxtb	r3, r3
    1628:	2b00      	cmp	r3, #0
    162a:	d001      	beq.n	1630 <virtual_usb_trans+0x78>
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
			return CTRL_FAIL; // transfer aborted
    162c:	2301      	movs	r3, #1
    162e:	e00d      	b.n	164c <virtual_usb_trans+0x94>
		}
		nb_sector -= nb_sector_trans;
    1630:	1c3b      	adds	r3, r7, #0
    1632:	330f      	adds	r3, #15
    1634:	781b      	ldrb	r3, [r3, #0]
    1636:	b29a      	uxth	r2, r3
    1638:	1cbb      	adds	r3, r7, #2
    163a:	1cb9      	adds	r1, r7, #2
    163c:	8809      	ldrh	r1, [r1, #0]
    163e:	1a8a      	subs	r2, r1, r2
    1640:	801a      	strh	r2, [r3, #0]

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
		return CTRL_FAIL;
	}

	while (nb_sector) {
    1642:	1cbb      	adds	r3, r7, #2
    1644:	881b      	ldrh	r3, [r3, #0]
    1646:	2b00      	cmp	r3, #0
    1648:	d1ca      	bne.n	15e0 <virtual_usb_trans+0x28>
		}
		nb_sector -= nb_sector_trans;
	}
#endif

	return CTRL_GOOD;
    164a:	2300      	movs	r3, #0
}
    164c:	1c18      	adds	r0, r3, #0
    164e:	46bd      	mov	sp, r7
    1650:	b005      	add	sp, #20
    1652:	bd90      	pop	{r4, r7, pc}
    1654:	20000a14 	.word	0x20000a14
    1658:	00003e39 	.word	0x00003e39

0000165c <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
    165c:	b580      	push	{r7, lr}
    165e:	b082      	sub	sp, #8
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
    1664:	1c0a      	adds	r2, r1, #0
    1666:	1cbb      	adds	r3, r7, #2
    1668:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, true);
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	1cbb      	adds	r3, r7, #2
    166e:	881b      	ldrh	r3, [r3, #0]
    1670:	1c10      	adds	r0, r2, #0
    1672:	1c19      	adds	r1, r3, #0
    1674:	2201      	movs	r2, #1
    1676:	4b03      	ldr	r3, [pc, #12]	; (1684 <virtual_usb_read_10+0x28>)
    1678:	4798      	blx	r3
    167a:	1c03      	adds	r3, r0, #0
}
    167c:	1c18      	adds	r0, r3, #0
    167e:	46bd      	mov	sp, r7
    1680:	b002      	add	sp, #8
    1682:	bd80      	pop	{r7, pc}
    1684:	000015b9 	.word	0x000015b9

00001688 <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
    1688:	b580      	push	{r7, lr}
    168a:	b082      	sub	sp, #8
    168c:	af00      	add	r7, sp, #0
    168e:	6078      	str	r0, [r7, #4]
    1690:	1c0a      	adds	r2, r1, #0
    1692:	1cbb      	adds	r3, r7, #2
    1694:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, false);
    1696:	687a      	ldr	r2, [r7, #4]
    1698:	1cbb      	adds	r3, r7, #2
    169a:	881b      	ldrh	r3, [r3, #0]
    169c:	1c10      	adds	r0, r2, #0
    169e:	1c19      	adds	r1, r3, #0
    16a0:	2200      	movs	r2, #0
    16a2:	4b03      	ldr	r3, [pc, #12]	; (16b0 <virtual_usb_write_10+0x28>)
    16a4:	4798      	blx	r3
    16a6:	1c03      	adds	r3, r0, #0
}
    16a8:	1c18      	adds	r0, r3, #0
    16aa:	46bd      	mov	sp, r7
    16ac:	b002      	add	sp, #8
    16ae:	bd80      	pop	{r7, pc}
    16b0:	000015b9 	.word	0x000015b9

000016b4 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	af00      	add	r7, sp, #0

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
    16b8:	2301      	movs	r3, #1
#endif
}
    16ba:	1c18      	adds	r0, r3, #0
    16bc:	46bd      	mov	sp, r7
    16be:	bd80      	pop	{r7, pc}

000016c0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b084      	sub	sp, #16
    16c4:	af00      	add	r7, sp, #0
    16c6:	1c02      	adds	r2, r0, #0
    16c8:	1dfb      	adds	r3, r7, #7
    16ca:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    16cc:	1dfb      	adds	r3, r7, #7
    16ce:	781b      	ldrb	r3, [r3, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d107      	bne.n	16e4 <mem_test_unit_ready+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    16d4:	1dfb      	adds	r3, r7, #7
    16d6:	781a      	ldrb	r2, [r3, #0]
    16d8:	4b08      	ldr	r3, [pc, #32]	; (16fc <mem_test_unit_ready+0x3c>)
    16da:	0152      	lsls	r2, r2, #5
    16dc:	58d3      	ldr	r3, [r2, r3]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    16de:	4798      	blx	r3
    16e0:	1c03      	adds	r3, r0, #0
    16e2:	e000      	b.n	16e6 <mem_test_unit_ready+0x26>
    16e4:	2301      	movs	r3, #1
    16e6:	1c3a      	adds	r2, r7, #0
    16e8:	320f      	adds	r2, #15
    16ea:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    16ec:	1c3b      	adds	r3, r7, #0
    16ee:	330f      	adds	r3, #15
    16f0:	781b      	ldrb	r3, [r3, #0]
}
    16f2:	1c18      	adds	r0, r3, #0
    16f4:	46bd      	mov	sp, r7
    16f6:	b004      	add	sp, #16
    16f8:	bd80      	pop	{r7, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	0000b8d8 	.word	0x0000b8d8

00001700 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1700:	b580      	push	{r7, lr}
    1702:	b084      	sub	sp, #16
    1704:	af00      	add	r7, sp, #0
    1706:	1c02      	adds	r2, r0, #0
    1708:	6039      	str	r1, [r7, #0]
    170a:	1dfb      	adds	r3, r7, #7
    170c:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    170e:	1dfb      	adds	r3, r7, #7
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	2b00      	cmp	r3, #0
    1714:	d10a      	bne.n	172c <mem_read_capacity+0x2c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1716:	1dfb      	adds	r3, r7, #7
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	4a0a      	ldr	r2, [pc, #40]	; (1744 <mem_read_capacity+0x44>)
    171c:	015b      	lsls	r3, r3, #5
    171e:	18d3      	adds	r3, r2, r3
    1720:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    1722:	683a      	ldr	r2, [r7, #0]
    1724:	1c10      	adds	r0, r2, #0
    1726:	4798      	blx	r3
    1728:	1c03      	adds	r3, r0, #0
    172a:	e000      	b.n	172e <mem_read_capacity+0x2e>
    172c:	2301      	movs	r3, #1
    172e:	1c3a      	adds	r2, r7, #0
    1730:	320f      	adds	r2, #15
    1732:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    1734:	1c3b      	adds	r3, r7, #0
    1736:	330f      	adds	r3, #15
    1738:	781b      	ldrb	r3, [r3, #0]
}
    173a:	1c18      	adds	r0, r3, #0
    173c:	46bd      	mov	sp, r7
    173e:	b004      	add	sp, #16
    1740:	bd80      	pop	{r7, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	0000b8d8 	.word	0x0000b8d8

00001748 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    1748:	b580      	push	{r7, lr}
    174a:	b084      	sub	sp, #16
    174c:	af00      	add	r7, sp, #0
    174e:	1c0a      	adds	r2, r1, #0
    1750:	1dfb      	adds	r3, r7, #7
    1752:	1c01      	adds	r1, r0, #0
    1754:	7019      	strb	r1, [r3, #0]
    1756:	1dbb      	adds	r3, r7, #6
    1758:	701a      	strb	r2, [r3, #0]

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    175a:	1dfb      	adds	r3, r7, #7
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	2b00      	cmp	r3, #0
    1760:	d125      	bne.n	17ae <mem_unload+0x66>
  if (!Ctrl_access_lock()) return false;

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
    1762:	1dfb      	adds	r3, r7, #7
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	4a17      	ldr	r2, [pc, #92]	; (17c4 <mem_unload+0x7c>)
    1768:	015b      	lsls	r3, r3, #5
    176a:	18d3      	adds	r3, r2, r3
    176c:	3308      	adds	r3, #8
    176e:	681b      	ldr	r3, [r3, #0]
                  lun_desc[lun].unload(unload) : !unload) :
    1770:	2b00      	cmp	r3, #0
    1772:	d00f      	beq.n	1794 <mem_unload+0x4c>
    1774:	1dfb      	adds	r3, r7, #7
    1776:	781b      	ldrb	r3, [r3, #0]
    1778:	4a12      	ldr	r2, [pc, #72]	; (17c4 <mem_unload+0x7c>)
    177a:	015b      	lsls	r3, r3, #5
    177c:	18d3      	adds	r3, r2, r3
    177e:	3308      	adds	r3, #8
    1780:	681b      	ldr	r3, [r3, #0]
    1782:	1dba      	adds	r2, r7, #6
    1784:	7812      	ldrb	r2, [r2, #0]
    1786:	1c10      	adds	r0, r2, #0
    1788:	4798      	blx	r3
    178a:	1c03      	adds	r3, r0, #0
    178c:	1e5a      	subs	r2, r3, #1
    178e:	4193      	sbcs	r3, r2
    1790:	b2db      	uxtb	r3, r3
    1792:	e00d      	b.n	17b0 <mem_unload+0x68>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    1794:	1dbb      	adds	r3, r7, #6
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	1e5a      	subs	r2, r3, #1
    179a:	4193      	sbcs	r3, r2
    179c:	b2db      	uxtb	r3, r3
    179e:	2201      	movs	r2, #1
    17a0:	4053      	eors	r3, r2
    17a2:	b2db      	uxtb	r3, r3

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    17a4:	1c1a      	adds	r2, r3, #0
    17a6:	2301      	movs	r3, #1
    17a8:	4013      	ands	r3, r2
    17aa:	b2db      	uxtb	r3, r3
    17ac:	e000      	b.n	17b0 <mem_unload+0x68>
    17ae:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return false;

  unloaded =
    17b0:	1c3a      	adds	r2, r7, #0
    17b2:	320f      	adds	r2, #15
    17b4:	7013      	strb	r3, [r2, #0]
              false; /* No mem, unload/load fail */
#endif

  Ctrl_access_unlock();

  return unloaded;
    17b6:	1c3b      	adds	r3, r7, #0
    17b8:	330f      	adds	r3, #15
    17ba:	781b      	ldrb	r3, [r3, #0]
}
    17bc:	1c18      	adds	r0, r3, #0
    17be:	46bd      	mov	sp, r7
    17c0:	b004      	add	sp, #16
    17c2:	bd80      	pop	{r7, pc}
    17c4:	0000b8d8 	.word	0x0000b8d8

000017c8 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
    17ce:	1c02      	adds	r2, r0, #0
    17d0:	1dfb      	adds	r3, r7, #7
    17d2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    17d4:	1dfb      	adds	r3, r7, #7
    17d6:	781b      	ldrb	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d10a      	bne.n	17f2 <mem_wr_protect+0x2a>
    17dc:	1dfb      	adds	r3, r7, #7
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	4a0a      	ldr	r2, [pc, #40]	; (180c <mem_wr_protect+0x44>)
    17e2:	015b      	lsls	r3, r3, #5
    17e4:	18d3      	adds	r3, r2, r3
    17e6:	3308      	adds	r3, #8
    17e8:	685b      	ldr	r3, [r3, #4]
    17ea:	4798      	blx	r3
    17ec:	1c03      	adds	r3, r0, #0
    17ee:	2b00      	cmp	r3, #0
    17f0:	d001      	beq.n	17f6 <mem_wr_protect+0x2e>
    17f2:	2301      	movs	r3, #1
    17f4:	e000      	b.n	17f8 <mem_wr_protect+0x30>
    17f6:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
    17f8:	1c3a      	adds	r2, r7, #0
    17fa:	320f      	adds	r2, #15
    17fc:	7013      	strb	r3, [r2, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    17fe:	1c3b      	adds	r3, r7, #0
    1800:	330f      	adds	r3, #15
    1802:	781b      	ldrb	r3, [r3, #0]
}
    1804:	1c18      	adds	r0, r3, #0
    1806:	46bd      	mov	sp, r7
    1808:	b004      	add	sp, #16
    180a:	bd80      	pop	{r7, pc}
    180c:	0000b8d8 	.word	0x0000b8d8

00001810 <mem_removal>:


bool mem_removal(U8 lun)
{
    1810:	b580      	push	{r7, lr}
    1812:	b084      	sub	sp, #16
    1814:	af00      	add	r7, sp, #0
    1816:	1c02      	adds	r2, r0, #0
    1818:	1dfb      	adds	r3, r7, #7
    181a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    181c:	1dfb      	adds	r3, r7, #7
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	2b00      	cmp	r3, #0
    1822:	d10a      	bne.n	183a <mem_removal+0x2a>
    1824:	1dfb      	adds	r3, r7, #7
    1826:	781b      	ldrb	r3, [r3, #0]
    1828:	4a0a      	ldr	r2, [pc, #40]	; (1854 <mem_removal+0x44>)
    182a:	015b      	lsls	r3, r3, #5
    182c:	18d3      	adds	r3, r2, r3
    182e:	3310      	adds	r3, #16
    1830:	681b      	ldr	r3, [r3, #0]
    1832:	4798      	blx	r3
    1834:	1c03      	adds	r3, r0, #0
    1836:	2b00      	cmp	r3, #0
    1838:	d001      	beq.n	183e <mem_removal+0x2e>
    183a:	2301      	movs	r3, #1
    183c:	e000      	b.n	1840 <mem_removal+0x30>
    183e:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return true;

  removal =
    1840:	1c3a      	adds	r2, r7, #0
    1842:	320f      	adds	r2, #15
    1844:	7013      	strb	r3, [r2, #0]
                              true;
#endif

  Ctrl_access_unlock();

  return removal;
    1846:	1c3b      	adds	r3, r7, #0
    1848:	330f      	adds	r3, #15
    184a:	781b      	ldrb	r3, [r3, #0]
}
    184c:	1c18      	adds	r0, r3, #0
    184e:	46bd      	mov	sp, r7
    1850:	b004      	add	sp, #16
    1852:	bd80      	pop	{r7, pc}
    1854:	0000b8d8 	.word	0x0000b8d8

00001858 <mem_name>:


const char *mem_name(U8 lun)
{
    1858:	b580      	push	{r7, lr}
    185a:	b082      	sub	sp, #8
    185c:	af00      	add	r7, sp, #0
    185e:	1c02      	adds	r2, r0, #0
    1860:	1dfb      	adds	r3, r7, #7
    1862:	701a      	strb	r2, [r3, #0]
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    1864:	1dfb      	adds	r3, r7, #7
    1866:	781b      	ldrb	r3, [r3, #0]
    1868:	2b00      	cmp	r3, #0
    186a:	d101      	bne.n	1870 <mem_name+0x18>
    186c:	4b03      	ldr	r3, [pc, #12]	; (187c <mem_name+0x24>)
    186e:	e000      	b.n	1872 <mem_name+0x1a>
    1870:	2300      	movs	r3, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    1872:	1c18      	adds	r0, r3, #0
    1874:	46bd      	mov	sp, r7
    1876:	b002      	add	sp, #8
    1878:	bd80      	pop	{r7, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	0000b8bc 	.word	0x0000b8bc

00001880 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    1880:	b580      	push	{r7, lr}
    1882:	b084      	sub	sp, #16
    1884:	af00      	add	r7, sp, #0
    1886:	6039      	str	r1, [r7, #0]
    1888:	1dfb      	adds	r3, r7, #7
    188a:	1c01      	adds	r1, r0, #0
    188c:	7019      	strb	r1, [r3, #0]
    188e:	1d3b      	adds	r3, r7, #4
    1890:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    1892:	4b11      	ldr	r3, [pc, #68]	; (18d8 <memory_2_usb+0x58>)
    1894:	4798      	blx	r3
  status =
    1896:	1dfb      	adds	r3, r7, #7
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d10e      	bne.n	18bc <memory_2_usb+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    189e:	1dfb      	adds	r3, r7, #7
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	4a0e      	ldr	r2, [pc, #56]	; (18dc <memory_2_usb+0x5c>)
    18a4:	015b      	lsls	r3, r3, #5
    18a6:	18d3      	adds	r3, r2, r3
    18a8:	3310      	adds	r3, #16
    18aa:	685b      	ldr	r3, [r3, #4]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
    18ac:	6839      	ldr	r1, [r7, #0]
    18ae:	1d3a      	adds	r2, r7, #4
    18b0:	8812      	ldrh	r2, [r2, #0]
    18b2:	1c08      	adds	r0, r1, #0
    18b4:	1c11      	adds	r1, r2, #0
    18b6:	4798      	blx	r3
    18b8:	1c03      	adds	r3, r0, #0
    18ba:	e000      	b.n	18be <memory_2_usb+0x3e>
    18bc:	2301      	movs	r3, #1
    18be:	1c3a      	adds	r2, r7, #0
    18c0:	320f      	adds	r2, #15
    18c2:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    18c4:	4b06      	ldr	r3, [pc, #24]	; (18e0 <memory_2_usb+0x60>)
    18c6:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    18c8:	1c3b      	adds	r3, r7, #0
    18ca:	330f      	adds	r3, #15
    18cc:	781b      	ldrb	r3, [r3, #0]
}
    18ce:	1c18      	adds	r0, r3, #0
    18d0:	46bd      	mov	sp, r7
    18d2:	b004      	add	sp, #16
    18d4:	bd80      	pop	{r7, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	00001445 	.word	0x00001445
    18dc:	0000b8d8 	.word	0x0000b8d8
    18e0:	0000144d 	.word	0x0000144d

000018e4 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b084      	sub	sp, #16
    18e8:	af00      	add	r7, sp, #0
    18ea:	6039      	str	r1, [r7, #0]
    18ec:	1dfb      	adds	r3, r7, #7
    18ee:	1c01      	adds	r1, r0, #0
    18f0:	7019      	strb	r1, [r3, #0]
    18f2:	1d3b      	adds	r3, r7, #4
    18f4:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    18f6:	4b11      	ldr	r3, [pc, #68]	; (193c <usb_2_memory+0x58>)
    18f8:	4798      	blx	r3
  status =
    18fa:	1dfb      	adds	r3, r7, #7
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	2b00      	cmp	r3, #0
    1900:	d10e      	bne.n	1920 <usb_2_memory+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    1902:	1dfb      	adds	r3, r7, #7
    1904:	781b      	ldrb	r3, [r3, #0]
    1906:	4a0e      	ldr	r2, [pc, #56]	; (1940 <usb_2_memory+0x5c>)
    1908:	015b      	lsls	r3, r3, #5
    190a:	18d3      	adds	r3, r2, r3
    190c:	3318      	adds	r3, #24
    190e:	681b      	ldr	r3, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
    1910:	6839      	ldr	r1, [r7, #0]
    1912:	1d3a      	adds	r2, r7, #4
    1914:	8812      	ldrh	r2, [r2, #0]
    1916:	1c08      	adds	r0, r1, #0
    1918:	1c11      	adds	r1, r2, #0
    191a:	4798      	blx	r3
    191c:	1c03      	adds	r3, r0, #0
    191e:	e000      	b.n	1922 <usb_2_memory+0x3e>
    1920:	2301      	movs	r3, #1
    1922:	1c3a      	adds	r2, r7, #0
    1924:	320f      	adds	r2, #15
    1926:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <usb_2_memory+0x60>)
    192a:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    192c:	1c3b      	adds	r3, r7, #0
    192e:	330f      	adds	r3, #15
    1930:	781b      	ldrb	r3, [r3, #0]
}
    1932:	1c18      	adds	r0, r3, #0
    1934:	46bd      	mov	sp, r7
    1936:	b004      	add	sp, #16
    1938:	bd80      	pop	{r7, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	00001455 	.word	0x00001455
    1940:	0000b8d8 	.word	0x0000b8d8
    1944:	0000145d 	.word	0x0000145d

00001948 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    1948:	b580      	push	{r7, lr}
    194a:	b082      	sub	sp, #8
    194c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    194e:	f3ef 8310 	mrs	r3, PRIMASK
    1952:	603b      	str	r3, [r7, #0]
  return(result);
    1954:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    1956:	425a      	negs	r2, r3
    1958:	4153      	adcs	r3, r2
    195a:	b2db      	uxtb	r3, r3
    195c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    195e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1960:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1964:	4b03      	ldr	r3, [pc, #12]	; (1974 <cpu_irq_save+0x2c>)
    1966:	2200      	movs	r2, #0
    1968:	701a      	strb	r2, [r3, #0]
	return flags;
    196a:	687b      	ldr	r3, [r7, #4]
}
    196c:	1c18      	adds	r0, r3, #0
    196e:	46bd      	mov	sp, r7
    1970:	b002      	add	sp, #8
    1972:	bd80      	pop	{r7, pc}
    1974:	200002b4 	.word	0x200002b4

00001978 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    1978:	b580      	push	{r7, lr}
    197a:	b082      	sub	sp, #8
    197c:	af00      	add	r7, sp, #0
    197e:	6078      	str	r0, [r7, #4]
	return (flags);
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	1e5a      	subs	r2, r3, #1
    1984:	4193      	sbcs	r3, r2
    1986:	b2db      	uxtb	r3, r3
}
    1988:	1c18      	adds	r0, r3, #0
    198a:	46bd      	mov	sp, r7
    198c:	b002      	add	sp, #8
    198e:	bd80      	pop	{r7, pc}

00001990 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1990:	b580      	push	{r7, lr}
    1992:	b082      	sub	sp, #8
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	1c18      	adds	r0, r3, #0
    199c:	4b06      	ldr	r3, [pc, #24]	; (19b8 <cpu_irq_restore+0x28>)
    199e:	4798      	blx	r3
    19a0:	1c03      	adds	r3, r0, #0
    19a2:	2b00      	cmp	r3, #0
    19a4:	d005      	beq.n	19b2 <cpu_irq_restore+0x22>
		cpu_irq_enable();
    19a6:	4b05      	ldr	r3, [pc, #20]	; (19bc <cpu_irq_restore+0x2c>)
    19a8:	2201      	movs	r2, #1
    19aa:	701a      	strb	r2, [r3, #0]
    19ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    19b0:	b662      	cpsie	i
}
    19b2:	46bd      	mov	sp, r7
    19b4:	b002      	add	sp, #8
    19b6:	bd80      	pop	{r7, pc}
    19b8:	00001979 	.word	0x00001979
    19bc:	200002b4 	.word	0x200002b4

000019c0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    19c0:	b590      	push	{r4, r7, lr}
    19c2:	b083      	sub	sp, #12
    19c4:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    19c6:	1dbb      	adds	r3, r7, #6
    19c8:	2200      	movs	r2, #0
    19ca:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    19cc:	4b59      	ldr	r3, [pc, #356]	; (1b34 <udi_cdc_comm_enable+0x174>)
    19ce:	2200      	movs	r2, #0
    19d0:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    19d2:	1dbb      	adds	r3, r7, #6
    19d4:	781a      	ldrb	r2, [r3, #0]
    19d6:	4b58      	ldr	r3, [pc, #352]	; (1b38 <udi_cdc_comm_enable+0x178>)
    19d8:	0052      	lsls	r2, r2, #1
    19da:	2100      	movs	r1, #0
    19dc:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    19de:	1dbb      	adds	r3, r7, #6
    19e0:	781a      	ldrb	r2, [r3, #0]
    19e2:	4956      	ldr	r1, [pc, #344]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    19e4:	1c13      	adds	r3, r2, #0
    19e6:	009b      	lsls	r3, r3, #2
    19e8:	189b      	adds	r3, r3, r2
    19ea:	005b      	lsls	r3, r3, #1
    19ec:	22a1      	movs	r2, #161	; 0xa1
    19ee:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    19f0:	1dbb      	adds	r3, r7, #6
    19f2:	781a      	ldrb	r2, [r3, #0]
    19f4:	4951      	ldr	r1, [pc, #324]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    19f6:	1c13      	adds	r3, r2, #0
    19f8:	009b      	lsls	r3, r3, #2
    19fa:	189b      	adds	r3, r3, r2
    19fc:	005b      	lsls	r3, r3, #1
    19fe:	18cb      	adds	r3, r1, r3
    1a00:	2220      	movs	r2, #32
    1a02:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    1a04:	1dbb      	adds	r3, r7, #6
    1a06:	781a      	ldrb	r2, [r3, #0]
    1a08:	494c      	ldr	r1, [pc, #304]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    1a0a:	1c13      	adds	r3, r2, #0
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	189b      	adds	r3, r3, r2
    1a10:	005b      	lsls	r3, r3, #1
    1a12:	18cb      	adds	r3, r1, r3
    1a14:	2200      	movs	r2, #0
    1a16:	805a      	strh	r2, [r3, #2]

	switch (port) {
    1a18:	1dbb      	adds	r3, r7, #6
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d103      	bne.n	1a28 <udi_cdc_comm_enable+0x68>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    1a20:	1dfb      	adds	r3, r7, #7
    1a22:	2200      	movs	r2, #0
    1a24:	701a      	strb	r2, [r3, #0]
    1a26:	e003      	b.n	1a30 <udi_cdc_comm_enable+0x70>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    1a28:	1dfb      	adds	r3, r7, #7
    1a2a:	2200      	movs	r2, #0
    1a2c:	701a      	strb	r2, [r3, #0]
		break;
    1a2e:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    1a30:	1dbb      	adds	r3, r7, #6
    1a32:	781a      	ldrb	r2, [r3, #0]
    1a34:	1dfb      	adds	r3, r7, #7
    1a36:	781b      	ldrb	r3, [r3, #0]
    1a38:	b299      	uxth	r1, r3
    1a3a:	4840      	ldr	r0, [pc, #256]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    1a3c:	1c13      	adds	r3, r2, #0
    1a3e:	009b      	lsls	r3, r3, #2
    1a40:	189b      	adds	r3, r3, r2
    1a42:	005b      	lsls	r3, r3, #1
    1a44:	18c3      	adds	r3, r0, r3
    1a46:	1c0a      	adds	r2, r1, #0
    1a48:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    1a4a:	1dbb      	adds	r3, r7, #6
    1a4c:	781a      	ldrb	r2, [r3, #0]
    1a4e:	493b      	ldr	r1, [pc, #236]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    1a50:	1c13      	adds	r3, r2, #0
    1a52:	009b      	lsls	r3, r3, #2
    1a54:	189b      	adds	r3, r3, r2
    1a56:	005b      	lsls	r3, r3, #1
    1a58:	18cb      	adds	r3, r1, r3
    1a5a:	2202      	movs	r2, #2
    1a5c:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    1a5e:	1dbb      	adds	r3, r7, #6
    1a60:	781a      	ldrb	r2, [r3, #0]
    1a62:	4936      	ldr	r1, [pc, #216]	; (1b3c <udi_cdc_comm_enable+0x17c>)
    1a64:	1c13      	adds	r3, r2, #0
    1a66:	009b      	lsls	r3, r3, #2
    1a68:	189b      	adds	r3, r3, r2
    1a6a:	005b      	lsls	r3, r3, #1
    1a6c:	18cb      	adds	r3, r1, r3
    1a6e:	3308      	adds	r3, #8
    1a70:	2200      	movs	r2, #0
    1a72:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    1a74:	1dbb      	adds	r3, r7, #6
    1a76:	7819      	ldrb	r1, [r3, #0]
    1a78:	4a31      	ldr	r2, [pc, #196]	; (1b40 <udi_cdc_comm_enable+0x180>)
    1a7a:	1c0b      	adds	r3, r1, #0
    1a7c:	00db      	lsls	r3, r3, #3
    1a7e:	1a5b      	subs	r3, r3, r1
    1a80:	5c98      	ldrb	r0, [r3, r2]
    1a82:	2100      	movs	r1, #0
    1a84:	4001      	ands	r1, r0
    1a86:	5499      	strb	r1, [r3, r2]
    1a88:	18d1      	adds	r1, r2, r3
    1a8a:	784c      	ldrb	r4, [r1, #1]
    1a8c:	2000      	movs	r0, #0
    1a8e:	4020      	ands	r0, r4
    1a90:	243e      	movs	r4, #62	; 0x3e
    1a92:	4264      	negs	r4, r4
    1a94:	4320      	orrs	r0, r4
    1a96:	7048      	strb	r0, [r1, #1]
    1a98:	18d1      	adds	r1, r2, r3
    1a9a:	788c      	ldrb	r4, [r1, #2]
    1a9c:	2000      	movs	r0, #0
    1a9e:	4020      	ands	r0, r4
    1aa0:	2401      	movs	r4, #1
    1aa2:	4320      	orrs	r0, r4
    1aa4:	7088      	strb	r0, [r1, #2]
    1aa6:	18d3      	adds	r3, r2, r3
    1aa8:	78d9      	ldrb	r1, [r3, #3]
    1aaa:	2200      	movs	r2, #0
    1aac:	400a      	ands	r2, r1
    1aae:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    1ab0:	1dbb      	adds	r3, r7, #6
    1ab2:	781a      	ldrb	r2, [r3, #0]
    1ab4:	4922      	ldr	r1, [pc, #136]	; (1b40 <udi_cdc_comm_enable+0x180>)
    1ab6:	1c13      	adds	r3, r2, #0
    1ab8:	00db      	lsls	r3, r3, #3
    1aba:	1a9b      	subs	r3, r3, r2
    1abc:	18cb      	adds	r3, r1, r3
    1abe:	2200      	movs	r2, #0
    1ac0:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    1ac2:	1dbb      	adds	r3, r7, #6
    1ac4:	781a      	ldrb	r2, [r3, #0]
    1ac6:	491e      	ldr	r1, [pc, #120]	; (1b40 <udi_cdc_comm_enable+0x180>)
    1ac8:	1c13      	adds	r3, r2, #0
    1aca:	00db      	lsls	r3, r3, #3
    1acc:	1a9b      	subs	r3, r3, r2
    1ace:	18cb      	adds	r3, r1, r3
    1ad0:	2200      	movs	r2, #0
    1ad2:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    1ad4:	1dbb      	adds	r3, r7, #6
    1ad6:	781a      	ldrb	r2, [r3, #0]
    1ad8:	4919      	ldr	r1, [pc, #100]	; (1b40 <udi_cdc_comm_enable+0x180>)
    1ada:	1c13      	adds	r3, r2, #0
    1adc:	00db      	lsls	r3, r3, #3
    1ade:	1a9b      	subs	r3, r3, r2
    1ae0:	18cb      	adds	r3, r1, r3
    1ae2:	2208      	movs	r2, #8
    1ae4:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    1ae6:	1dbb      	adds	r3, r7, #6
    1ae8:	781a      	ldrb	r2, [r3, #0]
    1aea:	1c13      	adds	r3, r2, #0
    1aec:	00db      	lsls	r3, r3, #3
    1aee:	1a9b      	subs	r3, r3, r2
    1af0:	4a13      	ldr	r2, [pc, #76]	; (1b40 <udi_cdc_comm_enable+0x180>)
    1af2:	189b      	adds	r3, r3, r2
    1af4:	1dba      	adds	r2, r7, #6
    1af6:	7812      	ldrb	r2, [r2, #0]
    1af8:	1c10      	adds	r0, r2, #0
    1afa:	1c19      	adds	r1, r3, #0
    1afc:	4b11      	ldr	r3, [pc, #68]	; (1b44 <udi_cdc_comm_enable+0x184>)
    1afe:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
    1b00:	1dbb      	adds	r3, r7, #6
    1b02:	781b      	ldrb	r3, [r3, #0]
    1b04:	1c18      	adds	r0, r3, #0
    1b06:	4b10      	ldr	r3, [pc, #64]	; (1b48 <udi_cdc_comm_enable+0x188>)
    1b08:	4798      	blx	r3
    1b0a:	1c03      	adds	r3, r0, #0
    1b0c:	2201      	movs	r2, #1
    1b0e:	4053      	eors	r3, r2
    1b10:	b2db      	uxtb	r3, r3
    1b12:	2b00      	cmp	r3, #0
    1b14:	d001      	beq.n	1b1a <udi_cdc_comm_enable+0x15a>
		return false;
    1b16:	2300      	movs	r3, #0
    1b18:	e007      	b.n	1b2a <udi_cdc_comm_enable+0x16a>
	}
	udi_cdc_nb_comm_enabled++;
    1b1a:	4b06      	ldr	r3, [pc, #24]	; (1b34 <udi_cdc_comm_enable+0x174>)
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	3301      	adds	r3, #1
    1b22:	b2da      	uxtb	r2, r3
    1b24:	4b03      	ldr	r3, [pc, #12]	; (1b34 <udi_cdc_comm_enable+0x174>)
    1b26:	701a      	strb	r2, [r3, #0]
	return true;
    1b28:	2301      	movs	r3, #1
}
    1b2a:	1c18      	adds	r0, r3, #0
    1b2c:	46bd      	mov	sp, r7
    1b2e:	b003      	add	sp, #12
    1b30:	bd90      	pop	{r4, r7, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	20003a34 	.word	0x20003a34
    1b38:	20003a24 	.word	0x20003a24
    1b3c:	20003a28 	.word	0x20003a28
    1b40:	20003a18 	.word	0x20003a18
    1b44:	0000b491 	.word	0x0000b491
    1b48:	0000b05d 	.word	0x0000b05d

00001b4c <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1b52:	1dfb      	adds	r3, r7, #7
    1b54:	2200      	movs	r2, #0
    1b56:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    1b58:	4b30      	ldr	r3, [pc, #192]	; (1c1c <udi_cdc_data_enable+0xd0>)
    1b5a:	2200      	movs	r2, #0
    1b5c:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    1b5e:	1dfb      	adds	r3, r7, #7
    1b60:	781b      	ldrb	r3, [r3, #0]
    1b62:	4a2f      	ldr	r2, [pc, #188]	; (1c20 <udi_cdc_data_enable+0xd4>)
    1b64:	2100      	movs	r1, #0
    1b66:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    1b68:	1dfb      	adds	r3, r7, #7
    1b6a:	781b      	ldrb	r3, [r3, #0]
    1b6c:	4a2d      	ldr	r2, [pc, #180]	; (1c24 <udi_cdc_data_enable+0xd8>)
    1b6e:	2100      	movs	r1, #0
    1b70:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    1b72:	1dfb      	adds	r3, r7, #7
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	4a2c      	ldr	r2, [pc, #176]	; (1c28 <udi_cdc_data_enable+0xdc>)
    1b78:	2100      	movs	r1, #0
    1b7a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    1b7c:	1dfb      	adds	r3, r7, #7
    1b7e:	781a      	ldrb	r2, [r3, #0]
    1b80:	4b2a      	ldr	r3, [pc, #168]	; (1c2c <udi_cdc_data_enable+0xe0>)
    1b82:	0092      	lsls	r2, r2, #2
    1b84:	2100      	movs	r1, #0
    1b86:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    1b88:	1dfb      	adds	r3, r7, #7
    1b8a:	781b      	ldrb	r3, [r3, #0]
    1b8c:	4a27      	ldr	r2, [pc, #156]	; (1c2c <udi_cdc_data_enable+0xe0>)
    1b8e:	009b      	lsls	r3, r3, #2
    1b90:	18d3      	adds	r3, r2, r3
    1b92:	3302      	adds	r3, #2
    1b94:	2200      	movs	r2, #0
    1b96:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    1b98:	1dfb      	adds	r3, r7, #7
    1b9a:	781a      	ldrb	r2, [r3, #0]
    1b9c:	4b24      	ldr	r3, [pc, #144]	; (1c30 <udi_cdc_data_enable+0xe4>)
    1b9e:	0052      	lsls	r2, r2, #1
    1ba0:	2100      	movs	r1, #0
    1ba2:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    1ba4:	1dfb      	adds	r3, r7, #7
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	1c18      	adds	r0, r3, #0
    1baa:	4b22      	ldr	r3, [pc, #136]	; (1c34 <udi_cdc_data_enable+0xe8>)
    1bac:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	4a21      	ldr	r2, [pc, #132]	; (1c38 <udi_cdc_data_enable+0xec>)
    1bb4:	2100      	movs	r1, #0
    1bb6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    1bb8:	1dfb      	adds	r3, r7, #7
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	4a1f      	ldr	r2, [pc, #124]	; (1c3c <udi_cdc_data_enable+0xf0>)
    1bbe:	2100      	movs	r1, #0
    1bc0:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    1bc2:	1dfb      	adds	r3, r7, #7
    1bc4:	781a      	ldrb	r2, [r3, #0]
    1bc6:	4b1e      	ldr	r3, [pc, #120]	; (1c40 <udi_cdc_data_enable+0xf4>)
    1bc8:	0092      	lsls	r2, r2, #2
    1bca:	2100      	movs	r1, #0
    1bcc:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_pos[port] = 0;
    1bce:	1dfb      	adds	r3, r7, #7
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	4b1c      	ldr	r3, [pc, #112]	; (1c44 <udi_cdc_data_enable+0xf8>)
    1bd4:	0052      	lsls	r2, r2, #1
    1bd6:	2100      	movs	r1, #0
    1bd8:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    1bda:	1dfb      	adds	r3, r7, #7
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	1c18      	adds	r0, r3, #0
    1be0:	4b19      	ldr	r3, [pc, #100]	; (1c48 <udi_cdc_data_enable+0xfc>)
    1be2:	4798      	blx	r3
    1be4:	1c03      	adds	r3, r0, #0
    1be6:	2201      	movs	r2, #1
    1be8:	4053      	eors	r3, r2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	2b00      	cmp	r3, #0
    1bee:	d001      	beq.n	1bf4 <udi_cdc_data_enable+0xa8>
		return false;
    1bf0:	2300      	movs	r3, #0
    1bf2:	e00f      	b.n	1c14 <udi_cdc_data_enable+0xc8>
	}
	udi_cdc_nb_data_enabled++;
    1bf4:	4b09      	ldr	r3, [pc, #36]	; (1c1c <udi_cdc_data_enable+0xd0>)
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	b2db      	uxtb	r3, r3
    1bfa:	3301      	adds	r3, #1
    1bfc:	b2da      	uxtb	r2, r3
    1bfe:	4b07      	ldr	r3, [pc, #28]	; (1c1c <udi_cdc_data_enable+0xd0>)
    1c00:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <udi_cdc_data_enable+0xd0>)
    1c04:	781b      	ldrb	r3, [r3, #0]
    1c06:	b2db      	uxtb	r3, r3
    1c08:	2b01      	cmp	r3, #1
    1c0a:	d102      	bne.n	1c12 <udi_cdc_data_enable+0xc6>
		udi_cdc_data_running = true;
    1c0c:	4b0f      	ldr	r3, [pc, #60]	; (1c4c <udi_cdc_data_enable+0x100>)
    1c0e:	2201      	movs	r2, #1
    1c10:	701a      	strb	r2, [r3, #0]
	}
	return true;
    1c12:	2301      	movs	r3, #1
}
    1c14:	1c18      	adds	r0, r3, #0
    1c16:	46bd      	mov	sp, r7
    1c18:	b002      	add	sp, #8
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	20003a35 	.word	0x20003a35
    1c20:	20003f54 	.word	0x20003f54
    1c24:	20003f58 	.word	0x20003f58
    1c28:	20003f4c 	.word	0x20003f4c
    1c2c:	20003f48 	.word	0x20003f48
    1c30:	20003f50 	.word	0x20003f50
    1c34:	00002361 	.word	0x00002361
    1c38:	20003cc4 	.word	0x20003cc4
    1c3c:	20003cbc 	.word	0x20003cbc
    1c40:	20003cb8 	.word	0x20003cb8
    1c44:	20003cc0 	.word	0x20003cc0
    1c48:	00002089 	.word	0x00002089
    1c4c:	20003a36 	.word	0x20003a36

00001c50 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    1c54:	4b04      	ldr	r3, [pc, #16]	; (1c68 <udi_cdc_comm_disable+0x18>)
    1c56:	781b      	ldrb	r3, [r3, #0]
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	3b01      	subs	r3, #1
    1c5c:	b2da      	uxtb	r2, r3
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <udi_cdc_comm_disable+0x18>)
    1c60:	701a      	strb	r2, [r3, #0]
}
    1c62:	46bd      	mov	sp, r7
    1c64:	bd80      	pop	{r7, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	20003a34 	.word	0x20003a34

00001c6c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b082      	sub	sp, #8
    1c70:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    1c72:	4b0b      	ldr	r3, [pc, #44]	; (1ca0 <udi_cdc_data_disable+0x34>)
    1c74:	781b      	ldrb	r3, [r3, #0]
    1c76:	b2db      	uxtb	r3, r3
    1c78:	3b01      	subs	r3, #1
    1c7a:	b2da      	uxtb	r2, r3
    1c7c:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <udi_cdc_data_disable+0x34>)
    1c7e:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    1c80:	1dfb      	adds	r3, r7, #7
    1c82:	4a07      	ldr	r2, [pc, #28]	; (1ca0 <udi_cdc_data_disable+0x34>)
    1c84:	7812      	ldrb	r2, [r2, #0]
    1c86:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
    1c88:	1dfb      	adds	r3, r7, #7
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	1c18      	adds	r0, r3, #0
    1c8e:	4b05      	ldr	r3, [pc, #20]	; (1ca4 <udi_cdc_data_disable+0x38>)
    1c90:	4798      	blx	r3
	udi_cdc_data_running = false;
    1c92:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <udi_cdc_data_disable+0x3c>)
    1c94:	2200      	movs	r2, #0
    1c96:	701a      	strb	r2, [r3, #0]
}
    1c98:	46bd      	mov	sp, r7
    1c9a:	b002      	add	sp, #8
    1c9c:	bd80      	pop	{r7, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	20003a35 	.word	0x20003a35
    1ca4:	0000b08d 	.word	0x0000b08d
    1ca8:	20003a36 	.word	0x20003a36

00001cac <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    1cac:	b590      	push	{r4, r7, lr}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    1cb2:	1dfc      	adds	r4, r7, #7
    1cb4:	4b34      	ldr	r3, [pc, #208]	; (1d88 <udi_cdc_comm_setup+0xdc>)
    1cb6:	4798      	blx	r3
    1cb8:	1c03      	adds	r3, r0, #0
    1cba:	7023      	strb	r3, [r4, #0]

	if (Udd_setup_is_in()) {
    1cbc:	4b33      	ldr	r3, [pc, #204]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	b2db      	uxtb	r3, r3
    1cc2:	b25b      	sxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	da1e      	bge.n	1d06 <udi_cdc_comm_setup+0x5a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1cc8:	4b30      	ldr	r3, [pc, #192]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1cca:	781b      	ldrb	r3, [r3, #0]
    1ccc:	1c1a      	adds	r2, r3, #0
    1cce:	2360      	movs	r3, #96	; 0x60
    1cd0:	4013      	ands	r3, r2
    1cd2:	2b20      	cmp	r3, #32
    1cd4:	d117      	bne.n	1d06 <udi_cdc_comm_setup+0x5a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1cd6:	4b2d      	ldr	r3, [pc, #180]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1cd8:	785b      	ldrb	r3, [r3, #1]
    1cda:	2b21      	cmp	r3, #33	; 0x21
    1cdc:	d113      	bne.n	1d06 <udi_cdc_comm_setup+0x5a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1cde:	4b2b      	ldr	r3, [pc, #172]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1ce0:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    1ce2:	2b07      	cmp	r3, #7
    1ce4:	d001      	beq.n	1cea <udi_cdc_comm_setup+0x3e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    1ce6:	2300      	movs	r3, #0
    1ce8:	e049      	b.n	1d7e <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    1cea:	1dfb      	adds	r3, r7, #7
    1cec:	781a      	ldrb	r2, [r3, #0]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1cee:	1c13      	adds	r3, r2, #0
    1cf0:	00db      	lsls	r3, r3, #3
    1cf2:	1a9b      	subs	r3, r3, r2
    1cf4:	4a26      	ldr	r2, [pc, #152]	; (1d90 <udi_cdc_comm_setup+0xe4>)
    1cf6:	189a      	adds	r2, r3, r2
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    1cf8:	4b24      	ldr	r3, [pc, #144]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1cfa:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    1cfc:	4b23      	ldr	r3, [pc, #140]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1cfe:	2207      	movs	r2, #7
    1d00:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    1d02:	2301      	movs	r3, #1
    1d04:	e03b      	b.n	1d7e <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	if (Udd_setup_is_out()) {
    1d06:	4b21      	ldr	r3, [pc, #132]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d08:	781b      	ldrb	r3, [r3, #0]
    1d0a:	b2db      	uxtb	r3, r3
    1d0c:	b25b      	sxtb	r3, r3
    1d0e:	2b00      	cmp	r3, #0
    1d10:	db34      	blt.n	1d7c <udi_cdc_comm_setup+0xd0>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1d12:	4b1e      	ldr	r3, [pc, #120]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d14:	781b      	ldrb	r3, [r3, #0]
    1d16:	1c1a      	adds	r2, r3, #0
    1d18:	2360      	movs	r3, #96	; 0x60
    1d1a:	4013      	ands	r3, r2
    1d1c:	2b20      	cmp	r3, #32
    1d1e:	d12d      	bne.n	1d7c <udi_cdc_comm_setup+0xd0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1d20:	4b1a      	ldr	r3, [pc, #104]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d22:	785b      	ldrb	r3, [r3, #1]
    1d24:	2b20      	cmp	r3, #32
    1d26:	d002      	beq.n	1d2e <udi_cdc_comm_setup+0x82>
    1d28:	2b22      	cmp	r3, #34	; 0x22
    1d2a:	d017      	beq.n	1d5c <udi_cdc_comm_setup+0xb0>
    1d2c:	e026      	b.n	1d7c <udi_cdc_comm_setup+0xd0>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1d2e:	4b17      	ldr	r3, [pc, #92]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d30:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    1d32:	2b07      	cmp	r3, #7
    1d34:	d001      	beq.n	1d3a <udi_cdc_comm_setup+0x8e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    1d36:	2300      	movs	r3, #0
    1d38:	e021      	b.n	1d7e <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.callback =
    1d3a:	4b14      	ldr	r3, [pc, #80]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d3c:	4a15      	ldr	r2, [pc, #84]	; (1d94 <udi_cdc_comm_setup+0xe8>)
    1d3e:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    1d40:	1dfb      	adds	r3, r7, #7
    1d42:	781a      	ldrb	r2, [r3, #0]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1d44:	1c13      	adds	r3, r2, #0
    1d46:	00db      	lsls	r3, r3, #3
    1d48:	1a9b      	subs	r3, r3, r2
    1d4a:	4a11      	ldr	r2, [pc, #68]	; (1d90 <udi_cdc_comm_setup+0xe4>)
    1d4c:	189a      	adds	r2, r3, r2
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    1d4e:	4b0f      	ldr	r3, [pc, #60]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d50:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    1d52:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d54:	2207      	movs	r2, #7
    1d56:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    1d58:	2301      	movs	r3, #1
    1d5a:	e010      	b.n	1d7e <udi_cdc_comm_setup+0xd2>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
    1d5c:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <udi_cdc_comm_setup+0xe0>)
    1d5e:	885b      	ldrh	r3, [r3, #2]
    1d60:	1c1a      	adds	r2, r3, #0
    1d62:	2301      	movs	r3, #1
    1d64:	4013      	ands	r3, r2
    1d66:	1e5a      	subs	r2, r3, #1
    1d68:	4193      	sbcs	r3, r2
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	1dfa      	adds	r2, r7, #7
    1d6e:	7812      	ldrb	r2, [r2, #0]
    1d70:	1c10      	adds	r0, r2, #0
    1d72:	1c19      	adds	r1, r3, #0
    1d74:	4b08      	ldr	r3, [pc, #32]	; (1d98 <udi_cdc_comm_setup+0xec>)
    1d76:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    1d78:	2301      	movs	r3, #1
    1d7a:	e000      	b.n	1d7e <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	return false;  // request Not supported
    1d7c:	2300      	movs	r3, #0
}
    1d7e:	1c18      	adds	r0, r3, #0
    1d80:	46bd      	mov	sp, r7
    1d82:	b003      	add	sp, #12
    1d84:	bd90      	pop	{r4, r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	00001dd1 	.word	0x00001dd1
    1d8c:	20006b9c 	.word	0x20006b9c
    1d90:	20003a18 	.word	0x20003a18
    1d94:	00001e05 	.word	0x00001e05
    1d98:	0000b0b9 	.word	0x0000b0b9

00001d9c <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    1da0:	2300      	movs	r3, #0
}
    1da2:	1c18      	adds	r0, r3, #0
    1da4:	46bd      	mov	sp, r7
    1da6:	bd80      	pop	{r7, pc}

00001da8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    1dac:	2300      	movs	r3, #0
}
    1dae:	1c18      	adds	r0, r3, #0
    1db0:	46bd      	mov	sp, r7
    1db2:	bd80      	pop	{r7, pc}

00001db4 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    1db4:	b580      	push	{r7, lr}
    1db6:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    1db8:	4b03      	ldr	r3, [pc, #12]	; (1dc8 <udi_cdc_data_sof_notify+0x14>)
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	1c18      	adds	r0, r3, #0
    1dbe:	4b03      	ldr	r3, [pc, #12]	; (1dcc <udi_cdc_data_sof_notify+0x18>)
    1dc0:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    1dc2:	46bd      	mov	sp, r7
    1dc4:	bd80      	pop	{r7, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	20003f5c 	.word	0x20003f5c
    1dcc:	00002361 	.word	0x00002361

00001dd0 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b082      	sub	sp, #8
    1dd4:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    1dd6:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <udi_cdc_setup_to_port+0x30>)
    1dd8:	889b      	ldrh	r3, [r3, #4]
    1dda:	1c1a      	adds	r2, r3, #0
    1ddc:	23ff      	movs	r3, #255	; 0xff
    1dde:	4013      	ands	r3, r2
    1de0:	d103      	bne.n	1dea <udi_cdc_setup_to_port+0x1a>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    1de2:	1dfb      	adds	r3, r7, #7
    1de4:	2200      	movs	r2, #0
    1de6:	701a      	strb	r2, [r3, #0]
    1de8:	e003      	b.n	1df2 <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    1dea:	1dfb      	adds	r3, r7, #7
    1dec:	2200      	movs	r2, #0
    1dee:	701a      	strb	r2, [r3, #0]
		break;
    1df0:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    1df2:	1dfb      	adds	r3, r7, #7
    1df4:	781b      	ldrb	r3, [r3, #0]
}
    1df6:	1c18      	adds	r0, r3, #0
    1df8:	46bd      	mov	sp, r7
    1dfa:	b002      	add	sp, #8
    1dfc:	bd80      	pop	{r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20006b9c 	.word	0x20006b9c

00001e04 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    1e04:	b590      	push	{r4, r7, lr}
    1e06:	b083      	sub	sp, #12
    1e08:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    1e0a:	1dfc      	adds	r4, r7, #7
    1e0c:	4b09      	ldr	r3, [pc, #36]	; (1e34 <udi_cdc_line_coding_received+0x30>)
    1e0e:	4798      	blx	r3
    1e10:	1c03      	adds	r3, r0, #0
    1e12:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
    1e14:	1dfb      	adds	r3, r7, #7
    1e16:	781a      	ldrb	r2, [r3, #0]
    1e18:	1c13      	adds	r3, r2, #0
    1e1a:	00db      	lsls	r3, r3, #3
    1e1c:	1a9b      	subs	r3, r3, r2
    1e1e:	4a06      	ldr	r2, [pc, #24]	; (1e38 <udi_cdc_line_coding_received+0x34>)
    1e20:	189b      	adds	r3, r3, r2
    1e22:	1dfa      	adds	r2, r7, #7
    1e24:	7812      	ldrb	r2, [r2, #0]
    1e26:	1c10      	adds	r0, r2, #0
    1e28:	1c19      	adds	r1, r3, #0
    1e2a:	4b04      	ldr	r3, [pc, #16]	; (1e3c <udi_cdc_line_coding_received+0x38>)
    1e2c:	4798      	blx	r3
}
    1e2e:	46bd      	mov	sp, r7
    1e30:	b003      	add	sp, #12
    1e32:	bd90      	pop	{r4, r7, pc}
    1e34:	00001dd1 	.word	0x00001dd1
    1e38:	20003a18 	.word	0x20003a18
    1e3c:	0000b491 	.word	0x0000b491

00001e40 <udi_cdc_ctrl_state_change>:

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	b084      	sub	sp, #16
    1e44:	af00      	add	r7, sp, #0
    1e46:	1dfb      	adds	r3, r7, #7
    1e48:	7018      	strb	r0, [r3, #0]
    1e4a:	1dbb      	adds	r3, r7, #6
    1e4c:	7019      	strb	r1, [r3, #0]
    1e4e:	1d3b      	adds	r3, r7, #4
    1e50:	801a      	strh	r2, [r3, #0]
	irqflags_t flags;
	udd_ep_id_t ep_comm;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1e52:	1c3b      	adds	r3, r7, #0
    1e54:	330e      	adds	r3, #14
    1e56:	2200      	movs	r2, #0
    1e58:	701a      	strb	r2, [r3, #0]
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
    1e5a:	4b26      	ldr	r3, [pc, #152]	; (1ef4 <udi_cdc_ctrl_state_change+0xb4>)
    1e5c:	4798      	blx	r3
    1e5e:	1c03      	adds	r3, r0, #0
    1e60:	60bb      	str	r3, [r7, #8]
	if (b_set) {
    1e62:	1dbb      	adds	r3, r7, #6
    1e64:	781b      	ldrb	r3, [r3, #0]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d011      	beq.n	1e8e <udi_cdc_ctrl_state_change+0x4e>
		udi_cdc_state[port] |= bit_mask;
    1e6a:	1c3b      	adds	r3, r7, #0
    1e6c:	330e      	adds	r3, #14
    1e6e:	781a      	ldrb	r2, [r3, #0]
    1e70:	1c3b      	adds	r3, r7, #0
    1e72:	330e      	adds	r3, #14
    1e74:	7819      	ldrb	r1, [r3, #0]
    1e76:	4b20      	ldr	r3, [pc, #128]	; (1ef8 <udi_cdc_ctrl_state_change+0xb8>)
    1e78:	0049      	lsls	r1, r1, #1
    1e7a:	5acb      	ldrh	r3, [r1, r3]
    1e7c:	b299      	uxth	r1, r3
    1e7e:	1d3b      	adds	r3, r7, #4
    1e80:	881b      	ldrh	r3, [r3, #0]
    1e82:	430b      	orrs	r3, r1
    1e84:	b299      	uxth	r1, r3
    1e86:	4b1c      	ldr	r3, [pc, #112]	; (1ef8 <udi_cdc_ctrl_state_change+0xb8>)
    1e88:	0052      	lsls	r2, r2, #1
    1e8a:	52d1      	strh	r1, [r2, r3]
    1e8c:	e012      	b.n	1eb4 <udi_cdc_ctrl_state_change+0x74>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    1e8e:	1c3b      	adds	r3, r7, #0
    1e90:	330e      	adds	r3, #14
    1e92:	781a      	ldrb	r2, [r3, #0]
    1e94:	1c3b      	adds	r3, r7, #0
    1e96:	330e      	adds	r3, #14
    1e98:	7819      	ldrb	r1, [r3, #0]
    1e9a:	4b17      	ldr	r3, [pc, #92]	; (1ef8 <udi_cdc_ctrl_state_change+0xb8>)
    1e9c:	0049      	lsls	r1, r1, #1
    1e9e:	5acb      	ldrh	r3, [r1, r3]
    1ea0:	b29b      	uxth	r3, r3
    1ea2:	1d39      	adds	r1, r7, #4
    1ea4:	8809      	ldrh	r1, [r1, #0]
    1ea6:	43c9      	mvns	r1, r1
    1ea8:	b289      	uxth	r1, r1
    1eaa:	400b      	ands	r3, r1
    1eac:	b299      	uxth	r1, r3
    1eae:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <udi_cdc_ctrl_state_change+0xb8>)
    1eb0:	0052      	lsls	r2, r2, #1
    1eb2:	52d1      	strh	r1, [r2, r3]
	}
	cpu_irq_restore(flags);
    1eb4:	68bb      	ldr	r3, [r7, #8]
    1eb6:	1c18      	adds	r0, r3, #0
    1eb8:	4b10      	ldr	r3, [pc, #64]	; (1efc <udi_cdc_ctrl_state_change+0xbc>)
    1eba:	4798      	blx	r3

	// Send it if possible and state changed
	switch (port) {
    1ebc:	1c3b      	adds	r3, r7, #0
    1ebe:	330e      	adds	r3, #14
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d104      	bne.n	1ed0 <udi_cdc_ctrl_state_change+0x90>
#define UDI_CDC_PORT_TO_COMM_EP(index, unused) \
	case index: \
		ep_comm = UDI_CDC_COMM_EP_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_COMM_EP, ~)
    1ec6:	1c3b      	adds	r3, r7, #0
    1ec8:	330f      	adds	r3, #15
    1eca:	2287      	movs	r2, #135	; 0x87
    1ecc:	701a      	strb	r2, [r3, #0]
    1ece:	e004      	b.n	1eda <udi_cdc_ctrl_state_change+0x9a>
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
    1ed0:	1c3b      	adds	r3, r7, #0
    1ed2:	330f      	adds	r3, #15
    1ed4:	2287      	movs	r2, #135	; 0x87
    1ed6:	701a      	strb	r2, [r3, #0]
		break;
    1ed8:	46c0      	nop			; (mov r8, r8)
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    1eda:	1c3b      	adds	r3, r7, #0
    1edc:	330e      	adds	r3, #14
    1ede:	781a      	ldrb	r2, [r3, #0]
    1ee0:	1c3b      	adds	r3, r7, #0
    1ee2:	330f      	adds	r3, #15
    1ee4:	781b      	ldrb	r3, [r3, #0]
    1ee6:	1c10      	adds	r0, r2, #0
    1ee8:	1c19      	adds	r1, r3, #0
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <udi_cdc_ctrl_state_change+0xc0>)
    1eec:	4798      	blx	r3
}
    1eee:	46bd      	mov	sp, r7
    1ef0:	b004      	add	sp, #16
    1ef2:	bd80      	pop	{r7, pc}
    1ef4:	00001949 	.word	0x00001949
    1ef8:	20003a24 	.word	0x20003a24
    1efc:	00001991 	.word	0x00001991
    1f00:	00001f05 	.word	0x00001f05

00001f04 <udi_cdc_ctrl_state_notify>:


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    1f04:	b5b0      	push	{r4, r5, r7, lr}
    1f06:	b086      	sub	sp, #24
    1f08:	af02      	add	r7, sp, #8
    1f0a:	1c0a      	adds	r2, r1, #0
    1f0c:	1dfb      	adds	r3, r7, #7
    1f0e:	1c01      	adds	r1, r0, #0
    1f10:	7019      	strb	r1, [r3, #0]
    1f12:	1dbb      	adds	r3, r7, #6
    1f14:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1f16:	1c3b      	adds	r3, r7, #0
    1f18:	330f      	adds	r3, #15
    1f1a:	2200      	movs	r2, #0
    1f1c:	701a      	strb	r2, [r3, #0]
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    1f1e:	1c3b      	adds	r3, r7, #0
    1f20:	330f      	adds	r3, #15
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	4a25      	ldr	r2, [pc, #148]	; (1fbc <udi_cdc_ctrl_state_notify+0xb8>)
    1f26:	5cd3      	ldrb	r3, [r2, r3]
    1f28:	2201      	movs	r2, #1
    1f2a:	4053      	eors	r3, r2
    1f2c:	b2db      	uxtb	r3, r3
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d040      	beq.n	1fb4 <udi_cdc_ctrl_state_notify+0xb0>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    1f32:	1c3b      	adds	r3, r7, #0
    1f34:	330f      	adds	r3, #15
    1f36:	781a      	ldrb	r2, [r3, #0]
    1f38:	4b21      	ldr	r3, [pc, #132]	; (1fc0 <udi_cdc_ctrl_state_notify+0xbc>)
    1f3a:	0052      	lsls	r2, r2, #1
    1f3c:	5ad3      	ldrh	r3, [r2, r3]
    1f3e:	b299      	uxth	r1, r3
    1f40:	1c3b      	adds	r3, r7, #0
    1f42:	330f      	adds	r3, #15
    1f44:	781a      	ldrb	r2, [r3, #0]
    1f46:	481f      	ldr	r0, [pc, #124]	; (1fc4 <udi_cdc_ctrl_state_notify+0xc0>)
    1f48:	1c13      	adds	r3, r2, #0
    1f4a:	009b      	lsls	r3, r3, #2
    1f4c:	189b      	adds	r3, r3, r2
    1f4e:	005b      	lsls	r3, r3, #1
    1f50:	18c3      	adds	r3, r0, r3
    1f52:	3308      	adds	r3, #8
    1f54:	881b      	ldrh	r3, [r3, #0]
    1f56:	4299      	cmp	r1, r3
    1f58:	d02c      	beq.n	1fb4 <udi_cdc_ctrl_state_notify+0xb0>
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    1f5a:	1c3b      	adds	r3, r7, #0
    1f5c:	330f      	adds	r3, #15
    1f5e:	781a      	ldrb	r2, [r3, #0]
    1f60:	1c3b      	adds	r3, r7, #0
    1f62:	330f      	adds	r3, #15
    1f64:	7819      	ldrb	r1, [r3, #0]
    1f66:	4b16      	ldr	r3, [pc, #88]	; (1fc0 <udi_cdc_ctrl_state_notify+0xbc>)
    1f68:	0049      	lsls	r1, r1, #1
    1f6a:	5acb      	ldrh	r3, [r1, r3]
    1f6c:	b299      	uxth	r1, r3
    1f6e:	4815      	ldr	r0, [pc, #84]	; (1fc4 <udi_cdc_ctrl_state_notify+0xc0>)
    1f70:	1c13      	adds	r3, r2, #0
    1f72:	009b      	lsls	r3, r3, #2
    1f74:	189b      	adds	r3, r3, r2
    1f76:	005b      	lsls	r3, r3, #1
    1f78:	18c3      	adds	r3, r0, r3
    1f7a:	3308      	adds	r3, #8
    1f7c:	1c0a      	adds	r2, r1, #0
    1f7e:	801a      	strh	r2, [r3, #0]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    1f80:	1c3b      	adds	r3, r7, #0
    1f82:	330f      	adds	r3, #15
    1f84:	781c      	ldrb	r4, [r3, #0]
				udd_ep_run(ep,
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
    1f86:	1c3b      	adds	r3, r7, #0
    1f88:	330f      	adds	r3, #15
    1f8a:	781a      	ldrb	r2, [r3, #0]
    1f8c:	1c13      	adds	r3, r2, #0
    1f8e:	009b      	lsls	r3, r3, #2
    1f90:	189b      	adds	r3, r3, r2
    1f92:	005b      	lsls	r3, r3, #1
    1f94:	4a0b      	ldr	r2, [pc, #44]	; (1fc4 <udi_cdc_ctrl_state_notify+0xc0>)
    1f96:	189b      	adds	r3, r3, r2
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    1f98:	1dba      	adds	r2, r7, #6
    1f9a:	7812      	ldrb	r2, [r2, #0]
    1f9c:	490a      	ldr	r1, [pc, #40]	; (1fc8 <udi_cdc_ctrl_state_notify+0xc4>)
    1f9e:	9100      	str	r1, [sp, #0]
    1fa0:	1c10      	adds	r0, r2, #0
    1fa2:	2100      	movs	r1, #0
    1fa4:	1c1a      	adds	r2, r3, #0
    1fa6:	230a      	movs	r3, #10
    1fa8:	4d08      	ldr	r5, [pc, #32]	; (1fcc <udi_cdc_ctrl_state_notify+0xc8>)
    1faa:	47a8      	blx	r5
    1fac:	1c03      	adds	r3, r0, #0
    1fae:	1c1a      	adds	r2, r3, #0
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    1fb0:	4b02      	ldr	r3, [pc, #8]	; (1fbc <udi_cdc_ctrl_state_notify+0xb8>)
    1fb2:	551a      	strb	r2, [r3, r4]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    1fb4:	46bd      	mov	sp, r7
    1fb6:	b004      	add	sp, #16
    1fb8:	bdb0      	pop	{r4, r5, r7, pc}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	20003a20 	.word	0x20003a20
    1fc0:	20003a24 	.word	0x20003a24
    1fc4:	20003a28 	.word	0x20003a28
    1fc8:	00001fd1 	.word	0x00001fd1
    1fcc:	000080d5 	.word	0x000080d5

00001fd0 <udi_cdc_serial_state_msg_sent>:


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b084      	sub	sp, #16
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	6039      	str	r1, [r7, #0]
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	1c01      	adds	r1, r0, #0
    1fdc:	7019      	strb	r1, [r3, #0]
    1fde:	1dbb      	adds	r3, r7, #6
    1fe0:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);
	UNUSED(status);

	switch (ep) {
    1fe2:	1dbb      	adds	r3, r7, #6
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	2b87      	cmp	r3, #135	; 0x87
    1fe8:	d104      	bne.n	1ff4 <udi_cdc_serial_state_msg_sent+0x24>
#define UDI_CDC_GET_PORT_FROM_COMM_EP(iface, unused) \
	case UDI_CDC_COMM_EP_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
    1fea:	1c3b      	adds	r3, r7, #0
    1fec:	330f      	adds	r3, #15
    1fee:	2200      	movs	r2, #0
    1ff0:	701a      	strb	r2, [r3, #0]
    1ff2:	e004      	b.n	1ffe <udi_cdc_serial_state_msg_sent+0x2e>
#undef UDI_CDC_GET_PORT_FROM_COMM_EP
	default:
		port = 0;
    1ff4:	1c3b      	adds	r3, r7, #0
    1ff6:	330f      	adds	r3, #15
    1ff8:	2200      	movs	r2, #0
    1ffa:	701a      	strb	r2, [r3, #0]
		break;
    1ffc:	46c0      	nop			; (mov r8, r8)
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    1ffe:	1c3b      	adds	r3, r7, #0
    2000:	330f      	adds	r3, #15
    2002:	781b      	ldrb	r3, [r3, #0]
    2004:	4a1c      	ldr	r2, [pc, #112]	; (2078 <udi_cdc_serial_state_msg_sent+0xa8>)
    2006:	2100      	movs	r1, #0
    2008:	54d1      	strb	r1, [r2, r3]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    200a:	1c3b      	adds	r3, r7, #0
    200c:	330f      	adds	r3, #15
    200e:	781a      	ldrb	r2, [r3, #0]
    2010:	1c3b      	adds	r3, r7, #0
    2012:	330f      	adds	r3, #15
    2014:	7819      	ldrb	r1, [r3, #0]
    2016:	4b19      	ldr	r3, [pc, #100]	; (207c <udi_cdc_serial_state_msg_sent+0xac>)
    2018:	0049      	lsls	r1, r1, #1
    201a:	5acb      	ldrh	r3, [r1, r3]
    201c:	b29b      	uxth	r3, r3
    201e:	217c      	movs	r1, #124	; 0x7c
    2020:	438b      	bics	r3, r1
    2022:	b299      	uxth	r1, r3
    2024:	4b15      	ldr	r3, [pc, #84]	; (207c <udi_cdc_serial_state_msg_sent+0xac>)
    2026:	0052      	lsls	r2, r2, #1
    2028:	52d1      	strh	r1, [r2, r3]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    202a:	1c3b      	adds	r3, r7, #0
    202c:	330f      	adds	r3, #15
    202e:	781a      	ldrb	r2, [r3, #0]
    2030:	1c3b      	adds	r3, r7, #0
    2032:	330f      	adds	r3, #15
    2034:	7819      	ldrb	r1, [r3, #0]
    2036:	4812      	ldr	r0, [pc, #72]	; (2080 <udi_cdc_serial_state_msg_sent+0xb0>)
    2038:	1c0b      	adds	r3, r1, #0
    203a:	009b      	lsls	r3, r3, #2
    203c:	185b      	adds	r3, r3, r1
    203e:	005b      	lsls	r3, r3, #1
    2040:	18c3      	adds	r3, r0, r3
    2042:	3308      	adds	r3, #8
    2044:	881b      	ldrh	r3, [r3, #0]
    2046:	217c      	movs	r1, #124	; 0x7c
    2048:	438b      	bics	r3, r1
    204a:	b299      	uxth	r1, r3
    204c:	480c      	ldr	r0, [pc, #48]	; (2080 <udi_cdc_serial_state_msg_sent+0xb0>)
    204e:	1c13      	adds	r3, r2, #0
    2050:	009b      	lsls	r3, r3, #2
    2052:	189b      	adds	r3, r3, r2
    2054:	005b      	lsls	r3, r3, #1
    2056:	18c3      	adds	r3, r0, r3
    2058:	3308      	adds	r3, #8
    205a:	1c0a      	adds	r2, r1, #0
    205c:	801a      	strh	r2, [r3, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    205e:	1c3b      	adds	r3, r7, #0
    2060:	330f      	adds	r3, #15
    2062:	781a      	ldrb	r2, [r3, #0]
    2064:	1dbb      	adds	r3, r7, #6
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	1c10      	adds	r0, r2, #0
    206a:	1c19      	adds	r1, r3, #0
    206c:	4b05      	ldr	r3, [pc, #20]	; (2084 <udi_cdc_serial_state_msg_sent+0xb4>)
    206e:	4798      	blx	r3
}
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	20003a20 	.word	0x20003a20
    207c:	20003a24 	.word	0x20003a24
    2080:	20003a28 	.word	0x20003a28
    2084:	00001f05 	.word	0x00001f05

00002088 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    2088:	b590      	push	{r4, r7, lr}
    208a:	b089      	sub	sp, #36	; 0x24
    208c:	af02      	add	r7, sp, #8
    208e:	1c02      	adds	r2, r0, #0
    2090:	1dfb      	adds	r3, r7, #7
    2092:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2094:	1c3b      	adds	r3, r7, #0
    2096:	3316      	adds	r3, #22
    2098:	2200      	movs	r2, #0
    209a:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    209c:	4b45      	ldr	r3, [pc, #276]	; (21b4 <udi_cdc_rx_start+0x12c>)
    209e:	4798      	blx	r3
    20a0:	1c03      	adds	r3, r0, #0
    20a2:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    20a4:	1c3b      	adds	r3, r7, #0
    20a6:	3316      	adds	r3, #22
    20a8:	781a      	ldrb	r2, [r3, #0]
    20aa:	1c3b      	adds	r3, r7, #0
    20ac:	330f      	adds	r3, #15
    20ae:	4942      	ldr	r1, [pc, #264]	; (21b8 <udi_cdc_rx_start+0x130>)
    20b0:	5c8a      	ldrb	r2, [r1, r2]
    20b2:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    20b4:	1c3b      	adds	r3, r7, #0
    20b6:	3316      	adds	r3, #22
    20b8:	781b      	ldrb	r3, [r3, #0]
    20ba:	4a40      	ldr	r2, [pc, #256]	; (21bc <udi_cdc_rx_start+0x134>)
    20bc:	5cd3      	ldrb	r3, [r2, r3]
    20be:	b2db      	uxtb	r3, r3
    20c0:	2b00      	cmp	r3, #0
    20c2:	d113      	bne.n	20ec <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    20c4:	1c3b      	adds	r3, r7, #0
    20c6:	3316      	adds	r3, #22
    20c8:	781a      	ldrb	r2, [r3, #0]
    20ca:	4b3d      	ldr	r3, [pc, #244]	; (21c0 <udi_cdc_rx_start+0x138>)
    20cc:	0052      	lsls	r2, r2, #1
    20ce:	5ad3      	ldrh	r3, [r2, r3]
    20d0:	b29a      	uxth	r2, r3
    20d2:	1c3b      	adds	r3, r7, #0
    20d4:	3316      	adds	r3, #22
    20d6:	7818      	ldrb	r0, [r3, #0]
    20d8:	1c3b      	adds	r3, r7, #0
    20da:	330f      	adds	r3, #15
    20dc:	7819      	ldrb	r1, [r3, #0]
    20de:	4b39      	ldr	r3, [pc, #228]	; (21c4 <udi_cdc_rx_start+0x13c>)
    20e0:	0040      	lsls	r0, r0, #1
    20e2:	1841      	adds	r1, r0, r1
    20e4:	0049      	lsls	r1, r1, #1
    20e6:	5acb      	ldrh	r3, [r1, r3]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    20e8:	429a      	cmp	r2, r3
    20ea:	d205      	bcs.n	20f8 <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    20ec:	693b      	ldr	r3, [r7, #16]
    20ee:	1c18      	adds	r0, r3, #0
    20f0:	4b35      	ldr	r3, [pc, #212]	; (21c8 <udi_cdc_rx_start+0x140>)
    20f2:	4798      	blx	r3
		return false;
    20f4:	2300      	movs	r3, #0
    20f6:	e058      	b.n	21aa <udi_cdc_rx_start+0x122>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    20f8:	1c3b      	adds	r3, r7, #0
    20fa:	3316      	adds	r3, #22
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	4b30      	ldr	r3, [pc, #192]	; (21c0 <udi_cdc_rx_start+0x138>)
    2100:	0052      	lsls	r2, r2, #1
    2102:	2100      	movs	r1, #0
    2104:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    2106:	1c3b      	adds	r3, r7, #0
    2108:	3316      	adds	r3, #22
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	1c3a      	adds	r2, r7, #0
    210e:	320f      	adds	r2, #15
    2110:	7812      	ldrb	r2, [r2, #0]
    2112:	4251      	negs	r1, r2
    2114:	414a      	adcs	r2, r1
    2116:	b2d2      	uxtb	r2, r2
    2118:	1c11      	adds	r1, r2, #0
    211a:	4a27      	ldr	r2, [pc, #156]	; (21b8 <udi_cdc_rx_start+0x130>)
    211c:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    211e:	1c3b      	adds	r3, r7, #0
    2120:	3316      	adds	r3, #22
    2122:	781b      	ldrb	r3, [r3, #0]
    2124:	4a25      	ldr	r2, [pc, #148]	; (21bc <udi_cdc_rx_start+0x134>)
    2126:	2101      	movs	r1, #1
    2128:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    212a:	693b      	ldr	r3, [r7, #16]
    212c:	1c18      	adds	r0, r3, #0
    212e:	4b26      	ldr	r3, [pc, #152]	; (21c8 <udi_cdc_rx_start+0x140>)
    2130:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    2132:	1c3b      	adds	r3, r7, #0
    2134:	3316      	adds	r3, #22
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	1c18      	adds	r0, r3, #0
    213a:	4b24      	ldr	r3, [pc, #144]	; (21cc <udi_cdc_rx_start+0x144>)
    213c:	4798      	blx	r3
    213e:	1c03      	adds	r3, r0, #0
    2140:	2b00      	cmp	r3, #0
    2142:	d005      	beq.n	2150 <udi_cdc_rx_start+0xc8>
		UDI_CDC_RX_NOTIFY(port);
    2144:	1c3b      	adds	r3, r7, #0
    2146:	3316      	adds	r3, #22
    2148:	781b      	ldrb	r3, [r3, #0]
    214a:	1c18      	adds	r0, r3, #0
    214c:	4b20      	ldr	r3, [pc, #128]	; (21d0 <udi_cdc_rx_start+0x148>)
    214e:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
    2150:	1c3b      	adds	r3, r7, #0
    2152:	3316      	adds	r3, #22
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	2b00      	cmp	r3, #0
    2158:	d104      	bne.n	2164 <udi_cdc_rx_start+0xdc>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    215a:	1c3b      	adds	r3, r7, #0
    215c:	3317      	adds	r3, #23
    215e:	2205      	movs	r2, #5
    2160:	701a      	strb	r2, [r3, #0]
    2162:	e004      	b.n	216e <udi_cdc_rx_start+0xe6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    2164:	1c3b      	adds	r3, r7, #0
    2166:	3317      	adds	r3, #23
    2168:	2205      	movs	r2, #5
    216a:	701a      	strb	r2, [r3, #0]
		break;
    216c:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    216e:	1c3b      	adds	r3, r7, #0
    2170:	3316      	adds	r3, #22
    2172:	7819      	ldrb	r1, [r3, #0]
    2174:	1c3b      	adds	r3, r7, #0
    2176:	330f      	adds	r3, #15
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	1c1a      	adds	r2, r3, #0
    217c:	0092      	lsls	r2, r2, #2
    217e:	18d2      	adds	r2, r2, r3
    2180:	0193      	lsls	r3, r2, #6
    2182:	1c1a      	adds	r2, r3, #0
    2184:	1c0b      	adds	r3, r1, #0
    2186:	009b      	lsls	r3, r3, #2
    2188:	185b      	adds	r3, r3, r1
    218a:	01db      	lsls	r3, r3, #7
    218c:	18d2      	adds	r2, r2, r3
    218e:	4b11      	ldr	r3, [pc, #68]	; (21d4 <udi_cdc_rx_start+0x14c>)
    2190:	18d2      	adds	r2, r2, r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    2192:	1c3b      	adds	r3, r7, #0
    2194:	3317      	adds	r3, #23
    2196:	7819      	ldrb	r1, [r3, #0]
    2198:	23a0      	movs	r3, #160	; 0xa0
    219a:	005b      	lsls	r3, r3, #1
    219c:	480e      	ldr	r0, [pc, #56]	; (21d8 <udi_cdc_rx_start+0x150>)
    219e:	9000      	str	r0, [sp, #0]
    21a0:	1c08      	adds	r0, r1, #0
    21a2:	2101      	movs	r1, #1
    21a4:	4c0d      	ldr	r4, [pc, #52]	; (21dc <udi_cdc_rx_start+0x154>)
    21a6:	47a0      	blx	r4
    21a8:	1c03      	adds	r3, r0, #0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    21aa:	1c18      	adds	r0, r3, #0
    21ac:	46bd      	mov	sp, r7
    21ae:	b007      	add	sp, #28
    21b0:	bd90      	pop	{r4, r7, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	00001949 	.word	0x00001949
    21b8:	20003cbc 	.word	0x20003cbc
    21bc:	20003cc4 	.word	0x20003cc4
    21c0:	20003cc0 	.word	0x20003cc0
    21c4:	20003cb8 	.word	0x20003cb8
    21c8:	00001991 	.word	0x00001991
    21cc:	00002649 	.word	0x00002649
    21d0:	0000b43d 	.word	0x0000b43d
    21d4:	20003a38 	.word	0x20003a38
    21d8:	000021e1 	.word	0x000021e1
    21dc:	000080d5 	.word	0x000080d5

000021e0 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    21e0:	b590      	push	{r4, r7, lr}
    21e2:	b087      	sub	sp, #28
    21e4:	af02      	add	r7, sp, #8
    21e6:	6039      	str	r1, [r7, #0]
    21e8:	1dfb      	adds	r3, r7, #7
    21ea:	1c01      	adds	r1, r0, #0
    21ec:	7019      	strb	r1, [r3, #0]
    21ee:	1dbb      	adds	r3, r7, #6
    21f0:	701a      	strb	r2, [r3, #0]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    21f2:	1dbb      	adds	r3, r7, #6
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	2b05      	cmp	r3, #5
    21f8:	d104      	bne.n	2204 <udi_cdc_data_received+0x24>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    21fa:	1c3b      	adds	r3, r7, #0
    21fc:	330f      	adds	r3, #15
    21fe:	2200      	movs	r2, #0
    2200:	701a      	strb	r2, [r3, #0]
    2202:	e004      	b.n	220e <udi_cdc_data_received+0x2e>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    2204:	1c3b      	adds	r3, r7, #0
    2206:	330f      	adds	r3, #15
    2208:	2200      	movs	r2, #0
    220a:	701a      	strb	r2, [r3, #0]
		break;
    220c:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    220e:	1dfb      	adds	r3, r7, #7
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	2b00      	cmp	r3, #0
    2214:	d000      	beq.n	2218 <udi_cdc_data_received+0x38>
		// Abort reception
		return;
    2216:	e044      	b.n	22a2 <udi_cdc_data_received+0xc2>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    2218:	1c3b      	adds	r3, r7, #0
    221a:	330f      	adds	r3, #15
    221c:	781b      	ldrb	r3, [r3, #0]
    221e:	4a22      	ldr	r2, [pc, #136]	; (22a8 <udi_cdc_data_received+0xc8>)
    2220:	5cd3      	ldrb	r3, [r2, r3]
    2222:	b2db      	uxtb	r3, r3
    2224:	425a      	negs	r2, r3
    2226:	4153      	adcs	r3, r2
    2228:	b2da      	uxtb	r2, r3
    222a:	1c3b      	adds	r3, r7, #0
    222c:	330e      	adds	r3, #14
    222e:	701a      	strb	r2, [r3, #0]
	if (!n) {
    2230:	683b      	ldr	r3, [r7, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	d11c      	bne.n	2270 <udi_cdc_data_received+0x90>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    2236:	1c3b      	adds	r3, r7, #0
    2238:	330f      	adds	r3, #15
    223a:	7819      	ldrb	r1, [r3, #0]
    223c:	1c3b      	adds	r3, r7, #0
    223e:	330e      	adds	r3, #14
    2240:	781b      	ldrb	r3, [r3, #0]
    2242:	1c1a      	adds	r2, r3, #0
    2244:	0092      	lsls	r2, r2, #2
    2246:	18d2      	adds	r2, r2, r3
    2248:	0193      	lsls	r3, r2, #6
    224a:	1c1a      	adds	r2, r3, #0
    224c:	1c0b      	adds	r3, r1, #0
    224e:	009b      	lsls	r3, r3, #2
    2250:	185b      	adds	r3, r3, r1
    2252:	01db      	lsls	r3, r3, #7
    2254:	18d2      	adds	r2, r2, r3
    2256:	4b15      	ldr	r3, [pc, #84]	; (22ac <udi_cdc_data_received+0xcc>)
    2258:	18d2      	adds	r2, r2, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    225a:	1dbb      	adds	r3, r7, #6
    225c:	7819      	ldrb	r1, [r3, #0]
    225e:	23a0      	movs	r3, #160	; 0xa0
    2260:	005b      	lsls	r3, r3, #1
    2262:	4813      	ldr	r0, [pc, #76]	; (22b0 <udi_cdc_data_received+0xd0>)
    2264:	9000      	str	r0, [sp, #0]
    2266:	1c08      	adds	r0, r1, #0
    2268:	2101      	movs	r1, #1
    226a:	4c12      	ldr	r4, [pc, #72]	; (22b4 <udi_cdc_data_received+0xd4>)
    226c:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    226e:	e018      	b.n	22a2 <udi_cdc_data_received+0xc2>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    2270:	1c3b      	adds	r3, r7, #0
    2272:	330f      	adds	r3, #15
    2274:	7818      	ldrb	r0, [r3, #0]
    2276:	1c3b      	adds	r3, r7, #0
    2278:	330e      	adds	r3, #14
    227a:	781a      	ldrb	r2, [r3, #0]
    227c:	683b      	ldr	r3, [r7, #0]
    227e:	b299      	uxth	r1, r3
    2280:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <udi_cdc_data_received+0xd8>)
    2282:	0040      	lsls	r0, r0, #1
    2284:	1882      	adds	r2, r0, r2
    2286:	0052      	lsls	r2, r2, #1
    2288:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    228a:	1c3b      	adds	r3, r7, #0
    228c:	330f      	adds	r3, #15
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	4a0a      	ldr	r2, [pc, #40]	; (22bc <udi_cdc_data_received+0xdc>)
    2292:	2100      	movs	r1, #0
    2294:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    2296:	1c3b      	adds	r3, r7, #0
    2298:	330f      	adds	r3, #15
    229a:	781b      	ldrb	r3, [r3, #0]
    229c:	1c18      	adds	r0, r3, #0
    229e:	4b08      	ldr	r3, [pc, #32]	; (22c0 <udi_cdc_data_received+0xe0>)
    22a0:	4798      	blx	r3
}
    22a2:	46bd      	mov	sp, r7
    22a4:	b005      	add	sp, #20
    22a6:	bd90      	pop	{r4, r7, pc}
    22a8:	20003cbc 	.word	0x20003cbc
    22ac:	20003a38 	.word	0x20003a38
    22b0:	000021e1 	.word	0x000021e1
    22b4:	000080d5 	.word	0x000080d5
    22b8:	20003cb8 	.word	0x20003cb8
    22bc:	20003cc4 	.word	0x20003cc4
    22c0:	00002089 	.word	0x00002089

000022c4 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b084      	sub	sp, #16
    22c8:	af00      	add	r7, sp, #0
    22ca:	6039      	str	r1, [r7, #0]
    22cc:	1dfb      	adds	r3, r7, #7
    22ce:	1c01      	adds	r1, r0, #0
    22d0:	7019      	strb	r1, [r3, #0]
    22d2:	1dbb      	adds	r3, r7, #6
    22d4:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    22d6:	1dbb      	adds	r3, r7, #6
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2b86      	cmp	r3, #134	; 0x86
    22dc:	d104      	bne.n	22e8 <udi_cdc_data_sent+0x24>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    22de:	1c3b      	adds	r3, r7, #0
    22e0:	330f      	adds	r3, #15
    22e2:	2200      	movs	r2, #0
    22e4:	701a      	strb	r2, [r3, #0]
    22e6:	e004      	b.n	22f2 <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    22e8:	1c3b      	adds	r3, r7, #0
    22ea:	330f      	adds	r3, #15
    22ec:	2200      	movs	r2, #0
    22ee:	701a      	strb	r2, [r3, #0]
		break;
    22f0:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    22f2:	1dfb      	adds	r3, r7, #7
    22f4:	781b      	ldrb	r3, [r3, #0]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d000      	beq.n	22fc <udi_cdc_data_sent+0x38>
		// Abort transfer
		return;
    22fa:	e024      	b.n	2346 <udi_cdc_data_sent+0x82>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    22fc:	1c3b      	adds	r3, r7, #0
    22fe:	330f      	adds	r3, #15
    2300:	7819      	ldrb	r1, [r3, #0]
    2302:	1c3b      	adds	r3, r7, #0
    2304:	330f      	adds	r3, #15
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	4a10      	ldr	r2, [pc, #64]	; (234c <udi_cdc_data_sent+0x88>)
    230a:	5cd3      	ldrb	r3, [r2, r3]
    230c:	b2db      	uxtb	r3, r3
    230e:	425a      	negs	r2, r3
    2310:	4153      	adcs	r3, r2
    2312:	b2db      	uxtb	r3, r3
    2314:	1c1a      	adds	r2, r3, #0
    2316:	4b0e      	ldr	r3, [pc, #56]	; (2350 <udi_cdc_data_sent+0x8c>)
    2318:	0049      	lsls	r1, r1, #1
    231a:	188a      	adds	r2, r1, r2
    231c:	0052      	lsls	r2, r2, #1
    231e:	2100      	movs	r1, #0
    2320:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    2322:	1c3b      	adds	r3, r7, #0
    2324:	330f      	adds	r3, #15
    2326:	781b      	ldrb	r3, [r3, #0]
    2328:	4a0a      	ldr	r2, [pc, #40]	; (2354 <udi_cdc_data_sent+0x90>)
    232a:	2100      	movs	r1, #0
    232c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    232e:	1c3b      	adds	r3, r7, #0
    2330:	330f      	adds	r3, #15
    2332:	781b      	ldrb	r3, [r3, #0]
    2334:	4a08      	ldr	r2, [pc, #32]	; (2358 <udi_cdc_data_sent+0x94>)
    2336:	2100      	movs	r1, #0
    2338:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    233a:	1c3b      	adds	r3, r7, #0
    233c:	330f      	adds	r3, #15
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	1c18      	adds	r0, r3, #0
    2342:	4b06      	ldr	r3, [pc, #24]	; (235c <udi_cdc_data_sent+0x98>)
    2344:	4798      	blx	r3
}
    2346:	46bd      	mov	sp, r7
    2348:	b004      	add	sp, #16
    234a:	bd80      	pop	{r7, pc}
    234c:	20003f4c 	.word	0x20003f4c
    2350:	20003f48 	.word	0x20003f48
    2354:	20003f58 	.word	0x20003f58
    2358:	20003f54 	.word	0x20003f54
    235c:	00002361 	.word	0x00002361

00002360 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    2360:	b590      	push	{r4, r7, lr}
    2362:	b089      	sub	sp, #36	; 0x24
    2364:	af02      	add	r7, sp, #8
    2366:	1c02      	adds	r2, r0, #0
    2368:	1dfb      	adds	r3, r7, #7
    236a:	701a      	strb	r2, [r3, #0]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    236c:	1c3b      	adds	r3, r7, #0
    236e:	3315      	adds	r3, #21
    2370:	2200      	movs	r2, #0
    2372:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    2374:	1c3b      	adds	r3, r7, #0
    2376:	3315      	adds	r3, #21
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	4a7e      	ldr	r2, [pc, #504]	; (2574 <udi_cdc_tx_send+0x214>)
    237c:	5cd3      	ldrb	r3, [r2, r3]
    237e:	b2db      	uxtb	r3, r3
    2380:	2b00      	cmp	r3, #0
    2382:	d000      	beq.n	2386 <udi_cdc_tx_send+0x26>
		return; // Already on going or wait next SOF to send next data
    2384:	e0f3      	b.n	256e <udi_cdc_tx_send+0x20e>
	}
	if (udd_is_high_speed()) {
    2386:	4b7c      	ldr	r3, [pc, #496]	; (2578 <udi_cdc_tx_send+0x218>)
    2388:	4798      	blx	r3
    238a:	1c03      	adds	r3, r0, #0
    238c:	2b00      	cmp	r3, #0
    238e:	d00b      	beq.n	23a8 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    2390:	1c3b      	adds	r3, r7, #0
    2392:	3315      	adds	r3, #21
    2394:	781a      	ldrb	r2, [r3, #0]
    2396:	4b79      	ldr	r3, [pc, #484]	; (257c <udi_cdc_tx_send+0x21c>)
    2398:	0052      	lsls	r2, r2, #1
    239a:	5ad4      	ldrh	r4, [r2, r3]
    239c:	4b78      	ldr	r3, [pc, #480]	; (2580 <udi_cdc_tx_send+0x220>)
    239e:	4798      	blx	r3
    23a0:	1c03      	adds	r3, r0, #0
    23a2:	429c      	cmp	r4, r3
    23a4:	d10c      	bne.n	23c0 <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    23a6:	e0e2      	b.n	256e <udi_cdc_tx_send+0x20e>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    23a8:	1c3b      	adds	r3, r7, #0
    23aa:	3315      	adds	r3, #21
    23ac:	781a      	ldrb	r2, [r3, #0]
    23ae:	4b73      	ldr	r3, [pc, #460]	; (257c <udi_cdc_tx_send+0x21c>)
    23b0:	0052      	lsls	r2, r2, #1
    23b2:	5ad4      	ldrh	r4, [r2, r3]
    23b4:	4b73      	ldr	r3, [pc, #460]	; (2584 <udi_cdc_tx_send+0x224>)
    23b6:	4798      	blx	r3
    23b8:	1c03      	adds	r3, r0, #0
    23ba:	429c      	cmp	r4, r3
    23bc:	d100      	bne.n	23c0 <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    23be:	e0d6      	b.n	256e <udi_cdc_tx_send+0x20e>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    23c0:	4b71      	ldr	r3, [pc, #452]	; (2588 <udi_cdc_tx_send+0x228>)
    23c2:	4798      	blx	r3
    23c4:	1c03      	adds	r3, r0, #0
    23c6:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    23c8:	1c3b      	adds	r3, r7, #0
    23ca:	3315      	adds	r3, #21
    23cc:	781a      	ldrb	r2, [r3, #0]
    23ce:	1c3b      	adds	r3, r7, #0
    23d0:	3317      	adds	r3, #23
    23d2:	496e      	ldr	r1, [pc, #440]	; (258c <udi_cdc_tx_send+0x22c>)
    23d4:	5c8a      	ldrb	r2, [r1, r2]
    23d6:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    23d8:	1c3b      	adds	r3, r7, #0
    23da:	3315      	adds	r3, #21
    23dc:	7819      	ldrb	r1, [r3, #0]
    23de:	1c3b      	adds	r3, r7, #0
    23e0:	3317      	adds	r3, #23
    23e2:	781a      	ldrb	r2, [r3, #0]
    23e4:	4b6a      	ldr	r3, [pc, #424]	; (2590 <udi_cdc_tx_send+0x230>)
    23e6:	0049      	lsls	r1, r1, #1
    23e8:	188a      	adds	r2, r1, r2
    23ea:	0052      	lsls	r2, r2, #1
    23ec:	5ad3      	ldrh	r3, [r2, r3]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d120      	bne.n	2434 <udi_cdc_tx_send+0xd4>
		sof_zlp_counter++;
    23f2:	4b68      	ldr	r3, [pc, #416]	; (2594 <udi_cdc_tx_send+0x234>)
    23f4:	881b      	ldrh	r3, [r3, #0]
    23f6:	3301      	adds	r3, #1
    23f8:	b29a      	uxth	r2, r3
    23fa:	4b66      	ldr	r3, [pc, #408]	; (2594 <udi_cdc_tx_send+0x234>)
    23fc:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    23fe:	4b5e      	ldr	r3, [pc, #376]	; (2578 <udi_cdc_tx_send+0x218>)
    2400:	4798      	blx	r3
    2402:	1c03      	adds	r3, r0, #0
    2404:	2201      	movs	r2, #1
    2406:	4053      	eors	r3, r2
    2408:	b2db      	uxtb	r3, r3
    240a:	2b00      	cmp	r3, #0
    240c:	d003      	beq.n	2416 <udi_cdc_tx_send+0xb6>
    240e:	4b61      	ldr	r3, [pc, #388]	; (2594 <udi_cdc_tx_send+0x234>)
    2410:	881b      	ldrh	r3, [r3, #0]
    2412:	2b63      	cmp	r3, #99	; 0x63
    2414:	d909      	bls.n	242a <udi_cdc_tx_send+0xca>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    2416:	4b58      	ldr	r3, [pc, #352]	; (2578 <udi_cdc_tx_send+0x218>)
    2418:	4798      	blx	r3
    241a:	1c03      	adds	r3, r0, #0
    241c:	2b00      	cmp	r3, #0
    241e:	d009      	beq.n	2434 <udi_cdc_tx_send+0xd4>
    2420:	4b5c      	ldr	r3, [pc, #368]	; (2594 <udi_cdc_tx_send+0x234>)
    2422:	881a      	ldrh	r2, [r3, #0]
    2424:	4b5c      	ldr	r3, [pc, #368]	; (2598 <udi_cdc_tx_send+0x238>)
    2426:	429a      	cmp	r2, r3
    2428:	d804      	bhi.n	2434 <udi_cdc_tx_send+0xd4>
			cpu_irq_restore(flags);
    242a:	693b      	ldr	r3, [r7, #16]
    242c:	1c18      	adds	r0, r3, #0
    242e:	4b5b      	ldr	r3, [pc, #364]	; (259c <udi_cdc_tx_send+0x23c>)
    2430:	4798      	blx	r3
			return;
    2432:	e09c      	b.n	256e <udi_cdc_tx_send+0x20e>
		}
	}
	sof_zlp_counter = 0;
    2434:	4b57      	ldr	r3, [pc, #348]	; (2594 <udi_cdc_tx_send+0x234>)
    2436:	2200      	movs	r2, #0
    2438:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    243a:	1c3b      	adds	r3, r7, #0
    243c:	3315      	adds	r3, #21
    243e:	781b      	ldrb	r3, [r3, #0]
    2440:	4a57      	ldr	r2, [pc, #348]	; (25a0 <udi_cdc_tx_send+0x240>)
    2442:	5cd3      	ldrb	r3, [r2, r3]
    2444:	b2db      	uxtb	r3, r3
    2446:	2201      	movs	r2, #1
    2448:	4053      	eors	r3, r2
    244a:	b2db      	uxtb	r3, r3
    244c:	2b00      	cmp	r3, #0
    244e:	d00c      	beq.n	246a <udi_cdc_tx_send+0x10a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    2450:	1c3b      	adds	r3, r7, #0
    2452:	3315      	adds	r3, #21
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	1c3a      	adds	r2, r7, #0
    2458:	3217      	adds	r2, #23
    245a:	7812      	ldrb	r2, [r2, #0]
    245c:	4251      	negs	r1, r2
    245e:	414a      	adcs	r2, r1
    2460:	b2d2      	uxtb	r2, r2
    2462:	1c11      	adds	r1, r2, #0
    2464:	4a49      	ldr	r2, [pc, #292]	; (258c <udi_cdc_tx_send+0x22c>)
    2466:	54d1      	strb	r1, [r2, r3]
    2468:	e008      	b.n	247c <udi_cdc_tx_send+0x11c>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    246a:	1c3b      	adds	r3, r7, #0
    246c:	3317      	adds	r3, #23
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	425a      	negs	r2, r3
    2472:	4153      	adcs	r3, r2
    2474:	b2da      	uxtb	r2, r3
    2476:	1c3b      	adds	r3, r7, #0
    2478:	3317      	adds	r3, #23
    247a:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    247c:	1c3b      	adds	r3, r7, #0
    247e:	3315      	adds	r3, #21
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	4a3c      	ldr	r2, [pc, #240]	; (2574 <udi_cdc_tx_send+0x214>)
    2484:	2101      	movs	r1, #1
    2486:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    2488:	693b      	ldr	r3, [r7, #16]
    248a:	1c18      	adds	r0, r3, #0
    248c:	4b43      	ldr	r3, [pc, #268]	; (259c <udi_cdc_tx_send+0x23c>)
    248e:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    2490:	1c3b      	adds	r3, r7, #0
    2492:	3315      	adds	r3, #21
    2494:	7819      	ldrb	r1, [r3, #0]
    2496:	1c3b      	adds	r3, r7, #0
    2498:	3317      	adds	r3, #23
    249a:	781a      	ldrb	r2, [r3, #0]
    249c:	4b3c      	ldr	r3, [pc, #240]	; (2590 <udi_cdc_tx_send+0x230>)
    249e:	0049      	lsls	r1, r1, #1
    24a0:	188a      	adds	r2, r1, r2
    24a2:	0052      	lsls	r2, r2, #1
    24a4:	5ad2      	ldrh	r2, [r2, r3]
    24a6:	1c3b      	adds	r3, r7, #0
    24a8:	330f      	adds	r3, #15
    24aa:	3a41      	subs	r2, #65	; 0x41
    24ac:	3aff      	subs	r2, #255	; 0xff
    24ae:	1e51      	subs	r1, r2, #1
    24b0:	418a      	sbcs	r2, r1
    24b2:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    24b4:	1c3b      	adds	r3, r7, #0
    24b6:	330f      	adds	r3, #15
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d01a      	beq.n	24f4 <udi_cdc_tx_send+0x194>
		if (udd_is_high_speed()) {
    24be:	4b2e      	ldr	r3, [pc, #184]	; (2578 <udi_cdc_tx_send+0x218>)
    24c0:	4798      	blx	r3
    24c2:	1c03      	adds	r3, r0, #0
    24c4:	2b00      	cmp	r3, #0
    24c6:	d00a      	beq.n	24de <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    24c8:	1c3b      	adds	r3, r7, #0
    24ca:	3315      	adds	r3, #21
    24cc:	781c      	ldrb	r4, [r3, #0]
    24ce:	4b2c      	ldr	r3, [pc, #176]	; (2580 <udi_cdc_tx_send+0x220>)
    24d0:	4798      	blx	r3
    24d2:	1c03      	adds	r3, r0, #0
    24d4:	1c19      	adds	r1, r3, #0
    24d6:	4b29      	ldr	r3, [pc, #164]	; (257c <udi_cdc_tx_send+0x21c>)
    24d8:	0062      	lsls	r2, r4, #1
    24da:	52d1      	strh	r1, [r2, r3]
    24dc:	e011      	b.n	2502 <udi_cdc_tx_send+0x1a2>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    24de:	1c3b      	adds	r3, r7, #0
    24e0:	3315      	adds	r3, #21
    24e2:	781c      	ldrb	r4, [r3, #0]
    24e4:	4b27      	ldr	r3, [pc, #156]	; (2584 <udi_cdc_tx_send+0x224>)
    24e6:	4798      	blx	r3
    24e8:	1c03      	adds	r3, r0, #0
    24ea:	1c19      	adds	r1, r3, #0
    24ec:	4b23      	ldr	r3, [pc, #140]	; (257c <udi_cdc_tx_send+0x21c>)
    24ee:	0062      	lsls	r2, r4, #1
    24f0:	52d1      	strh	r1, [r2, r3]
    24f2:	e006      	b.n	2502 <udi_cdc_tx_send+0x1a2>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    24f4:	1c3b      	adds	r3, r7, #0
    24f6:	3315      	adds	r3, #21
    24f8:	781a      	ldrb	r2, [r3, #0]
    24fa:	4b20      	ldr	r3, [pc, #128]	; (257c <udi_cdc_tx_send+0x21c>)
    24fc:	0052      	lsls	r2, r2, #1
    24fe:	2100      	movs	r1, #0
    2500:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    2502:	1c3b      	adds	r3, r7, #0
    2504:	3315      	adds	r3, #21
    2506:	781b      	ldrb	r3, [r3, #0]
    2508:	2b00      	cmp	r3, #0
    250a:	d104      	bne.n	2516 <udi_cdc_tx_send+0x1b6>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    250c:	1c3b      	adds	r3, r7, #0
    250e:	3316      	adds	r3, #22
    2510:	2286      	movs	r2, #134	; 0x86
    2512:	701a      	strb	r2, [r3, #0]
    2514:	e004      	b.n	2520 <udi_cdc_tx_send+0x1c0>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    2516:	1c3b      	adds	r3, r7, #0
    2518:	3316      	adds	r3, #22
    251a:	2286      	movs	r2, #134	; 0x86
    251c:	701a      	strb	r2, [r3, #0]
		break;
    251e:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    2520:	1c3b      	adds	r3, r7, #0
    2522:	3315      	adds	r3, #21
    2524:	7819      	ldrb	r1, [r3, #0]
    2526:	1c3b      	adds	r3, r7, #0
    2528:	3317      	adds	r3, #23
    252a:	781b      	ldrb	r3, [r3, #0]
    252c:	1c1a      	adds	r2, r3, #0
    252e:	0092      	lsls	r2, r2, #2
    2530:	18d2      	adds	r2, r2, r3
    2532:	0193      	lsls	r3, r2, #6
    2534:	1c1a      	adds	r2, r3, #0
    2536:	1c0b      	adds	r3, r1, #0
    2538:	009b      	lsls	r3, r3, #2
    253a:	185b      	adds	r3, r3, r1
    253c:	01db      	lsls	r3, r3, #7
    253e:	18d2      	adds	r2, r2, r3
    2540:	4b18      	ldr	r3, [pc, #96]	; (25a4 <udi_cdc_tx_send+0x244>)
    2542:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    2544:	1c3b      	adds	r3, r7, #0
    2546:	3315      	adds	r3, #21
    2548:	7818      	ldrb	r0, [r3, #0]
    254a:	1c3b      	adds	r3, r7, #0
    254c:	3317      	adds	r3, #23
    254e:	7819      	ldrb	r1, [r3, #0]
    2550:	4b0f      	ldr	r3, [pc, #60]	; (2590 <udi_cdc_tx_send+0x230>)
    2552:	0040      	lsls	r0, r0, #1
    2554:	1841      	adds	r1, r0, r1
    2556:	0049      	lsls	r1, r1, #1
    2558:	5acb      	ldrh	r3, [r1, r3]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    255a:	1c39      	adds	r1, r7, #0
    255c:	3116      	adds	r1, #22
    255e:	7808      	ldrb	r0, [r1, #0]
    2560:	1c39      	adds	r1, r7, #0
    2562:	310f      	adds	r1, #15
    2564:	7809      	ldrb	r1, [r1, #0]
    2566:	4c10      	ldr	r4, [pc, #64]	; (25a8 <udi_cdc_tx_send+0x248>)
    2568:	9400      	str	r4, [sp, #0]
    256a:	4c10      	ldr	r4, [pc, #64]	; (25ac <udi_cdc_tx_send+0x24c>)
    256c:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    256e:	46bd      	mov	sp, r7
    2570:	b007      	add	sp, #28
    2572:	bd90      	pop	{r4, r7, pc}
    2574:	20003f54 	.word	0x20003f54
    2578:	00007c85 	.word	0x00007c85
    257c:	20003f50 	.word	0x20003f50
    2580:	00007cad 	.word	0x00007cad
    2584:	00007c91 	.word	0x00007c91
    2588:	00001949 	.word	0x00001949
    258c:	20003f4c 	.word	0x20003f4c
    2590:	20003f48 	.word	0x20003f48
    2594:	20003f5e 	.word	0x20003f5e
    2598:	0000031f 	.word	0x0000031f
    259c:	00001991 	.word	0x00001991
    25a0:	20003f58 	.word	0x20003f58
    25a4:	20003cc8 	.word	0x20003cc8
    25a8:	000022c5 	.word	0x000022c5
    25ac:	000080d5 	.word	0x000080d5

000025b0 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	af00      	add	r7, sp, #0
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    25b4:	2000      	movs	r0, #0
    25b6:	2101      	movs	r1, #1
    25b8:	2240      	movs	r2, #64	; 0x40
    25ba:	4b02      	ldr	r3, [pc, #8]	; (25c4 <udi_cdc_signal_overrun+0x14>)
    25bc:	4798      	blx	r3
}
    25be:	46bd      	mov	sp, r7
    25c0:	bd80      	pop	{r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00001e41 	.word	0x00001e41

000025c8 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b086      	sub	sp, #24
    25cc:	af00      	add	r7, sp, #0
    25ce:	1c02      	adds	r2, r0, #0
    25d0:	1dfb      	adds	r3, r7, #7
    25d2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    25d4:	1c3b      	adds	r3, r7, #0
    25d6:	3317      	adds	r3, #23
    25d8:	2200      	movs	r2, #0
    25da:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    25dc:	4b15      	ldr	r3, [pc, #84]	; (2634 <udi_cdc_multi_get_nb_received_data+0x6c>)
    25de:	4798      	blx	r3
    25e0:	1c03      	adds	r3, r0, #0
    25e2:	613b      	str	r3, [r7, #16]
	pos = udi_cdc_rx_pos[port];
    25e4:	1c3b      	adds	r3, r7, #0
    25e6:	3317      	adds	r3, #23
    25e8:	7819      	ldrb	r1, [r3, #0]
    25ea:	1c3b      	adds	r3, r7, #0
    25ec:	330e      	adds	r3, #14
    25ee:	4a12      	ldr	r2, [pc, #72]	; (2638 <udi_cdc_multi_get_nb_received_data+0x70>)
    25f0:	0049      	lsls	r1, r1, #1
    25f2:	5a8a      	ldrh	r2, [r1, r2]
    25f4:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    25f6:	1c3b      	adds	r3, r7, #0
    25f8:	3317      	adds	r3, #23
    25fa:	7819      	ldrb	r1, [r3, #0]
    25fc:	1c3b      	adds	r3, r7, #0
    25fe:	3317      	adds	r3, #23
    2600:	781b      	ldrb	r3, [r3, #0]
    2602:	4a0e      	ldr	r2, [pc, #56]	; (263c <udi_cdc_multi_get_nb_received_data+0x74>)
    2604:	5cd3      	ldrb	r3, [r2, r3]
    2606:	b2db      	uxtb	r3, r3
    2608:	1c1a      	adds	r2, r3, #0
    260a:	4b0d      	ldr	r3, [pc, #52]	; (2640 <udi_cdc_multi_get_nb_received_data+0x78>)
    260c:	0049      	lsls	r1, r1, #1
    260e:	188a      	adds	r2, r1, r2
    2610:	0052      	lsls	r2, r2, #1
    2612:	5ad3      	ldrh	r3, [r2, r3]
    2614:	1c1a      	adds	r2, r3, #0
    2616:	1c3b      	adds	r3, r7, #0
    2618:	330e      	adds	r3, #14
    261a:	881b      	ldrh	r3, [r3, #0]
    261c:	1ad3      	subs	r3, r2, r3
    261e:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    2620:	693b      	ldr	r3, [r7, #16]
    2622:	1c18      	adds	r0, r3, #0
    2624:	4b07      	ldr	r3, [pc, #28]	; (2644 <udi_cdc_multi_get_nb_received_data+0x7c>)
    2626:	4798      	blx	r3
	return nb_received;
    2628:	68bb      	ldr	r3, [r7, #8]
}
    262a:	1c18      	adds	r0, r3, #0
    262c:	46bd      	mov	sp, r7
    262e:	b006      	add	sp, #24
    2630:	bd80      	pop	{r7, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	00001949 	.word	0x00001949
    2638:	20003cc0 	.word	0x20003cc0
    263c:	20003cbc 	.word	0x20003cbc
    2640:	20003cb8 	.word	0x20003cb8
    2644:	00001991 	.word	0x00001991

00002648 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    2648:	b580      	push	{r7, lr}
    264a:	b082      	sub	sp, #8
    264c:	af00      	add	r7, sp, #0
    264e:	1c02      	adds	r2, r0, #0
    2650:	1dfb      	adds	r3, r7, #7
    2652:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    2654:	1dfb      	adds	r3, r7, #7
    2656:	781b      	ldrb	r3, [r3, #0]
    2658:	1c18      	adds	r0, r3, #0
    265a:	4b05      	ldr	r3, [pc, #20]	; (2670 <udi_cdc_multi_is_rx_ready+0x28>)
    265c:	4798      	blx	r3
    265e:	1c03      	adds	r3, r0, #0
    2660:	1e5a      	subs	r2, r3, #1
    2662:	4193      	sbcs	r3, r2
    2664:	b2db      	uxtb	r3, r3
}
    2666:	1c18      	adds	r0, r3, #0
    2668:	46bd      	mov	sp, r7
    266a:	b002      	add	sp, #8
    266c:	bd80      	pop	{r7, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	000025c9 	.word	0x000025c9

00002674 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
    2674:	b580      	push	{r7, lr}
    2676:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
    2678:	2000      	movs	r0, #0
    267a:	4b03      	ldr	r3, [pc, #12]	; (2688 <udi_cdc_is_rx_ready+0x14>)
    267c:	4798      	blx	r3
    267e:	1c03      	adds	r3, r0, #0
}
    2680:	1c18      	adds	r0, r3, #0
    2682:	46bd      	mov	sp, r7
    2684:	bd80      	pop	{r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	00002649 	.word	0x00002649

0000268c <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    268c:	b590      	push	{r4, r7, lr}
    268e:	b087      	sub	sp, #28
    2690:	af00      	add	r7, sp, #0
    2692:	1c02      	adds	r2, r0, #0
    2694:	1dfb      	adds	r3, r7, #7
    2696:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    2698:	2300      	movs	r3, #0
    269a:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    269c:	1c3b      	adds	r3, r7, #0
    269e:	3312      	adds	r3, #18
    26a0:	2200      	movs	r2, #0
    26a2:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    26a4:	1c3b      	adds	r3, r7, #0
    26a6:	3312      	adds	r3, #18
    26a8:	781a      	ldrb	r2, [r3, #0]
    26aa:	4941      	ldr	r1, [pc, #260]	; (27b0 <udi_cdc_multi_getc+0x124>)
    26ac:	1c13      	adds	r3, r2, #0
    26ae:	00db      	lsls	r3, r3, #3
    26b0:	1a9b      	subs	r3, r3, r2
    26b2:	18cb      	adds	r3, r1, r3
    26b4:	799a      	ldrb	r2, [r3, #6]
    26b6:	1c3b      	adds	r3, r7, #0
    26b8:	3313      	adds	r3, #19
    26ba:	3a09      	subs	r2, #9
    26bc:	4251      	negs	r1, r2
    26be:	414a      	adcs	r2, r1
    26c0:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    26c2:	4b3c      	ldr	r3, [pc, #240]	; (27b4 <udi_cdc_multi_getc+0x128>)
    26c4:	4798      	blx	r3
    26c6:	1c03      	adds	r3, r0, #0
    26c8:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    26ca:	1c3b      	adds	r3, r7, #0
    26cc:	3312      	adds	r3, #18
    26ce:	7819      	ldrb	r1, [r3, #0]
    26d0:	1c3b      	adds	r3, r7, #0
    26d2:	330a      	adds	r3, #10
    26d4:	4a38      	ldr	r2, [pc, #224]	; (27b8 <udi_cdc_multi_getc+0x12c>)
    26d6:	0049      	lsls	r1, r1, #1
    26d8:	5a8a      	ldrh	r2, [r1, r2]
    26da:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    26dc:	1c3b      	adds	r3, r7, #0
    26de:	3312      	adds	r3, #18
    26e0:	781a      	ldrb	r2, [r3, #0]
    26e2:	1c3b      	adds	r3, r7, #0
    26e4:	3309      	adds	r3, #9
    26e6:	4935      	ldr	r1, [pc, #212]	; (27bc <udi_cdc_multi_getc+0x130>)
    26e8:	5c8a      	ldrb	r2, [r1, r2]
    26ea:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	1c18      	adds	r0, r3, #0
    26f0:	4b33      	ldr	r3, [pc, #204]	; (27c0 <udi_cdc_multi_getc+0x134>)
    26f2:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	1c3b      	adds	r3, r7, #0
    26f8:	3312      	adds	r3, #18
    26fa:	7819      	ldrb	r1, [r3, #0]
    26fc:	1c3b      	adds	r3, r7, #0
    26fe:	3309      	adds	r3, #9
    2700:	781a      	ldrb	r2, [r3, #0]
    2702:	4b30      	ldr	r3, [pc, #192]	; (27c4 <udi_cdc_multi_getc+0x138>)
    2704:	0049      	lsls	r1, r1, #1
    2706:	188a      	adds	r2, r1, r2
    2708:	0052      	lsls	r2, r2, #1
    270a:	5ad3      	ldrh	r3, [r2, r3]
    270c:	1c3a      	adds	r2, r7, #0
    270e:	320a      	adds	r2, #10
    2710:	8812      	ldrh	r2, [r2, #0]
    2712:	429a      	cmp	r2, r3
    2714:	d310      	bcc.n	2738 <udi_cdc_multi_getc+0xac>
		if (!udi_cdc_data_running) {
    2716:	4b2c      	ldr	r3, [pc, #176]	; (27c8 <udi_cdc_multi_getc+0x13c>)
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	b2db      	uxtb	r3, r3
    271c:	2201      	movs	r2, #1
    271e:	4053      	eors	r3, r2
    2720:	b2db      	uxtb	r3, r3
    2722:	2b00      	cmp	r3, #0
    2724:	d001      	beq.n	272a <udi_cdc_multi_getc+0x9e>
			return 0;
    2726:	2300      	movs	r3, #0
    2728:	e03e      	b.n	27a8 <udi_cdc_multi_getc+0x11c>
    272a:	1c3b      	adds	r3, r7, #0
    272c:	3313      	adds	r3, #19
    272e:	1c3a      	adds	r2, r7, #0
    2730:	3213      	adds	r2, #19
    2732:	7812      	ldrb	r2, [r2, #0]
    2734:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    2736:	e7c4      	b.n	26c2 <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    2738:	1c3b      	adds	r3, r7, #0
    273a:	3312      	adds	r3, #18
    273c:	7819      	ldrb	r1, [r3, #0]
    273e:	1c3b      	adds	r3, r7, #0
    2740:	3309      	adds	r3, #9
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	1c3a      	adds	r2, r7, #0
    2746:	320a      	adds	r2, #10
    2748:	8810      	ldrh	r0, [r2, #0]
    274a:	4c20      	ldr	r4, [pc, #128]	; (27cc <udi_cdc_multi_getc+0x140>)
    274c:	1c1a      	adds	r2, r3, #0
    274e:	0092      	lsls	r2, r2, #2
    2750:	18d2      	adds	r2, r2, r3
    2752:	0193      	lsls	r3, r2, #6
    2754:	1c1a      	adds	r2, r3, #0
    2756:	1c0b      	adds	r3, r1, #0
    2758:	009b      	lsls	r3, r3, #2
    275a:	185b      	adds	r3, r3, r1
    275c:	01db      	lsls	r3, r3, #7
    275e:	18d3      	adds	r3, r2, r3
    2760:	18e3      	adds	r3, r4, r3
    2762:	5c1b      	ldrb	r3, [r3, r0]
    2764:	697a      	ldr	r2, [r7, #20]
    2766:	4313      	orrs	r3, r2
    2768:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    276a:	1c3b      	adds	r3, r7, #0
    276c:	3312      	adds	r3, #18
    276e:	781a      	ldrb	r2, [r3, #0]
    2770:	1c3b      	adds	r3, r7, #0
    2772:	330a      	adds	r3, #10
    2774:	881b      	ldrh	r3, [r3, #0]
    2776:	3301      	adds	r3, #1
    2778:	b299      	uxth	r1, r3
    277a:	4b0f      	ldr	r3, [pc, #60]	; (27b8 <udi_cdc_multi_getc+0x12c>)
    277c:	0052      	lsls	r2, r2, #1
    277e:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    2780:	1c3b      	adds	r3, r7, #0
    2782:	3312      	adds	r3, #18
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	1c18      	adds	r0, r3, #0
    2788:	4b11      	ldr	r3, [pc, #68]	; (27d0 <udi_cdc_multi_getc+0x144>)
    278a:	4798      	blx	r3

	if (b_databit_9) {
    278c:	1c3b      	adds	r3, r7, #0
    278e:	3313      	adds	r3, #19
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	2b00      	cmp	r3, #0
    2794:	d007      	beq.n	27a6 <udi_cdc_multi_getc+0x11a>
		// Receive MSB
		b_databit_9 = false;
    2796:	1c3b      	adds	r3, r7, #0
    2798:	3313      	adds	r3, #19
    279a:	2200      	movs	r2, #0
    279c:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    279e:	697b      	ldr	r3, [r7, #20]
    27a0:	021b      	lsls	r3, r3, #8
    27a2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    27a4:	e78d      	b.n	26c2 <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    27a6:	697b      	ldr	r3, [r7, #20]
}
    27a8:	1c18      	adds	r0, r3, #0
    27aa:	46bd      	mov	sp, r7
    27ac:	b007      	add	sp, #28
    27ae:	bd90      	pop	{r4, r7, pc}
    27b0:	20003a18 	.word	0x20003a18
    27b4:	00001949 	.word	0x00001949
    27b8:	20003cc0 	.word	0x20003cc0
    27bc:	20003cbc 	.word	0x20003cbc
    27c0:	00001991 	.word	0x00001991
    27c4:	20003cb8 	.word	0x20003cb8
    27c8:	20003a36 	.word	0x20003a36
    27cc:	20003a38 	.word	0x20003a38
    27d0:	00002089 	.word	0x00002089

000027d4 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
    27d8:	2000      	movs	r0, #0
    27da:	4b03      	ldr	r3, [pc, #12]	; (27e8 <udi_cdc_getc+0x14>)
    27dc:	4798      	blx	r3
    27de:	1c03      	adds	r3, r0, #0
}
    27e0:	1c18      	adds	r0, r3, #0
    27e2:	46bd      	mov	sp, r7
    27e4:	bd80      	pop	{r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	0000268d 	.word	0x0000268d

000027ec <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b088      	sub	sp, #32
    27f0:	af00      	add	r7, sp, #0
    27f2:	1c02      	adds	r2, r0, #0
    27f4:	1dfb      	adds	r3, r7, #7
    27f6:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    27f8:	1c3b      	adds	r3, r7, #0
    27fa:	331b      	adds	r3, #27
    27fc:	2200      	movs	r2, #0
    27fe:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    2800:	4b33      	ldr	r3, [pc, #204]	; (28d0 <udi_cdc_multi_get_free_tx_buffer+0xe4>)
    2802:	4798      	blx	r3
    2804:	1c03      	adds	r3, r0, #0
    2806:	617b      	str	r3, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
    2808:	1c3b      	adds	r3, r7, #0
    280a:	331b      	adds	r3, #27
    280c:	781a      	ldrb	r2, [r3, #0]
    280e:	1c3b      	adds	r3, r7, #0
    2810:	3313      	adds	r3, #19
    2812:	4930      	ldr	r1, [pc, #192]	; (28d4 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    2814:	5c8a      	ldrb	r2, [r1, r2]
    2816:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    2818:	1c3b      	adds	r3, r7, #0
    281a:	331b      	adds	r3, #27
    281c:	7819      	ldrb	r1, [r3, #0]
    281e:	1c3b      	adds	r3, r7, #0
    2820:	3313      	adds	r3, #19
    2822:	781a      	ldrb	r2, [r3, #0]
    2824:	4b2c      	ldr	r3, [pc, #176]	; (28d8 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2826:	0049      	lsls	r1, r1, #1
    2828:	188a      	adds	r2, r1, r2
    282a:	0052      	lsls	r2, r2, #1
    282c:	5ad3      	ldrh	r3, [r2, r3]
    282e:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
    2830:	1c3b      	adds	r3, r7, #0
    2832:	331b      	adds	r3, #27
    2834:	7819      	ldrb	r1, [r3, #0]
    2836:	1c3b      	adds	r3, r7, #0
    2838:	3313      	adds	r3, #19
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	425a      	negs	r2, r3
    283e:	4153      	adcs	r3, r2
    2840:	b2db      	uxtb	r3, r3
    2842:	1c1a      	adds	r2, r3, #0
    2844:	4b24      	ldr	r3, [pc, #144]	; (28d8 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2846:	0049      	lsls	r1, r1, #1
    2848:	188a      	adds	r2, r1, r2
    284a:	0052      	lsls	r2, r2, #1
    284c:	5ad3      	ldrh	r3, [r2, r3]
    284e:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    2850:	69fa      	ldr	r2, [r7, #28]
    2852:	23a0      	movs	r3, #160	; 0xa0
    2854:	005b      	lsls	r3, r3, #1
    2856:	429a      	cmp	r2, r3
    2858:	d12c      	bne.n	28b4 <udi_cdc_multi_get_free_tx_buffer+0xc8>
		if ((!udi_cdc_tx_trans_ongoing[port])
    285a:	1c3b      	adds	r3, r7, #0
    285c:	331b      	adds	r3, #27
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	4a1e      	ldr	r2, [pc, #120]	; (28dc <udi_cdc_multi_get_free_tx_buffer+0xf0>)
    2862:	5cd3      	ldrb	r3, [r2, r3]
    2864:	b2db      	uxtb	r3, r3
    2866:	2201      	movs	r2, #1
    2868:	4053      	eors	r3, r2
    286a:	b2db      	uxtb	r3, r3
    286c:	2b00      	cmp	r3, #0
    286e:	d021      	beq.n	28b4 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    2870:	1c3b      	adds	r3, r7, #0
    2872:	331b      	adds	r3, #27
    2874:	781b      	ldrb	r3, [r3, #0]
    2876:	4a1a      	ldr	r2, [pc, #104]	; (28e0 <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    2878:	5cd3      	ldrb	r3, [r2, r3]
    287a:	b2db      	uxtb	r3, r3
    287c:	2201      	movs	r2, #1
    287e:	4053      	eors	r3, r2
    2880:	b2db      	uxtb	r3, r3
    2882:	2b00      	cmp	r3, #0
    2884:	d016      	beq.n	28b4 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    2886:	1c3b      	adds	r3, r7, #0
    2888:	331b      	adds	r3, #27
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	4a14      	ldr	r2, [pc, #80]	; (28e0 <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    288e:	2101      	movs	r1, #1
    2890:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    2892:	1c3b      	adds	r3, r7, #0
    2894:	331b      	adds	r3, #27
    2896:	781b      	ldrb	r3, [r3, #0]
    2898:	1c3a      	adds	r2, r7, #0
    289a:	3213      	adds	r2, #19
    289c:	7812      	ldrb	r2, [r2, #0]
    289e:	4251      	negs	r1, r2
    28a0:	414a      	adcs	r2, r1
    28a2:	b2d2      	uxtb	r2, r2
    28a4:	1c11      	adds	r1, r2, #0
    28a6:	4a0b      	ldr	r2, [pc, #44]	; (28d4 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    28a8:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    28aa:	2300      	movs	r3, #0
    28ac:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
    28ae:	23a0      	movs	r3, #160	; 0xa0
    28b0:	005b      	lsls	r3, r3, #1
    28b2:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    28b4:	69fb      	ldr	r3, [r7, #28]
    28b6:	22a0      	movs	r2, #160	; 0xa0
    28b8:	0052      	lsls	r2, r2, #1
    28ba:	1ad3      	subs	r3, r2, r3
    28bc:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    28be:	697b      	ldr	r3, [r7, #20]
    28c0:	1c18      	adds	r0, r3, #0
    28c2:	4b08      	ldr	r3, [pc, #32]	; (28e4 <udi_cdc_multi_get_free_tx_buffer+0xf8>)
    28c4:	4798      	blx	r3
	return retval;
    28c6:	68bb      	ldr	r3, [r7, #8]
}
    28c8:	1c18      	adds	r0, r3, #0
    28ca:	46bd      	mov	sp, r7
    28cc:	b008      	add	sp, #32
    28ce:	bd80      	pop	{r7, pc}
    28d0:	00001949 	.word	0x00001949
    28d4:	20003f4c 	.word	0x20003f4c
    28d8:	20003f48 	.word	0x20003f48
    28dc:	20003f54 	.word	0x20003f54
    28e0:	20003f58 	.word	0x20003f58
    28e4:	00001991 	.word	0x00001991

000028e8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b082      	sub	sp, #8
    28ec:	af00      	add	r7, sp, #0
    28ee:	1c02      	adds	r2, r0, #0
    28f0:	1dfb      	adds	r3, r7, #7
    28f2:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    28f4:	1dfb      	adds	r3, r7, #7
    28f6:	781b      	ldrb	r3, [r3, #0]
    28f8:	1c18      	adds	r0, r3, #0
    28fa:	4b05      	ldr	r3, [pc, #20]	; (2910 <udi_cdc_multi_is_tx_ready+0x28>)
    28fc:	4798      	blx	r3
    28fe:	1c03      	adds	r3, r0, #0
    2900:	1e5a      	subs	r2, r3, #1
    2902:	4193      	sbcs	r3, r2
    2904:	b2db      	uxtb	r3, r3
}
    2906:	1c18      	adds	r0, r3, #0
    2908:	46bd      	mov	sp, r7
    290a:	b002      	add	sp, #8
    290c:	bd80      	pop	{r7, pc}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	000027ed 	.word	0x000027ed

00002914 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
    2914:	b580      	push	{r7, lr}
    2916:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
    2918:	2000      	movs	r0, #0
    291a:	4b03      	ldr	r3, [pc, #12]	; (2928 <udi_cdc_is_tx_ready+0x14>)
    291c:	4798      	blx	r3
    291e:	1c03      	adds	r3, r0, #0
}
    2920:	1c18      	adds	r0, r3, #0
    2922:	46bd      	mov	sp, r7
    2924:	bd80      	pop	{r7, pc}
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	000028e9 	.word	0x000028e9

0000292c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    292c:	b5f0      	push	{r4, r5, r6, r7, lr}
    292e:	b087      	sub	sp, #28
    2930:	af00      	add	r7, sp, #0
    2932:	1c02      	adds	r2, r0, #0
    2934:	6039      	str	r1, [r7, #0]
    2936:	1dfb      	adds	r3, r7, #7
    2938:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    293a:	1c3b      	adds	r3, r7, #0
    293c:	3316      	adds	r3, #22
    293e:	2200      	movs	r2, #0
    2940:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2942:	1c3b      	adds	r3, r7, #0
    2944:	3316      	adds	r3, #22
    2946:	781a      	ldrb	r2, [r3, #0]
    2948:	493a      	ldr	r1, [pc, #232]	; (2a34 <udi_cdc_multi_putc+0x108>)
    294a:	1c13      	adds	r3, r2, #0
    294c:	00db      	lsls	r3, r3, #3
    294e:	1a9b      	subs	r3, r3, r2
    2950:	18cb      	adds	r3, r1, r3
    2952:	799a      	ldrb	r2, [r3, #6]
    2954:	1c3b      	adds	r3, r7, #0
    2956:	3317      	adds	r3, #23
    2958:	3a09      	subs	r2, #9
    295a:	4251      	negs	r1, r2
    295c:	414a      	adcs	r2, r1
    295e:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    2960:	1c3b      	adds	r3, r7, #0
    2962:	3316      	adds	r3, #22
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	1c18      	adds	r0, r3, #0
    2968:	4b33      	ldr	r3, [pc, #204]	; (2a38 <udi_cdc_multi_putc+0x10c>)
    296a:	4798      	blx	r3
    296c:	1c03      	adds	r3, r0, #0
    296e:	2201      	movs	r2, #1
    2970:	4053      	eors	r3, r2
    2972:	b2db      	uxtb	r3, r3
    2974:	2b00      	cmp	r3, #0
    2976:	d010      	beq.n	299a <udi_cdc_multi_putc+0x6e>
		if (!udi_cdc_data_running) {
    2978:	4b30      	ldr	r3, [pc, #192]	; (2a3c <udi_cdc_multi_putc+0x110>)
    297a:	781b      	ldrb	r3, [r3, #0]
    297c:	b2db      	uxtb	r3, r3
    297e:	2201      	movs	r2, #1
    2980:	4053      	eors	r3, r2
    2982:	b2db      	uxtb	r3, r3
    2984:	2b00      	cmp	r3, #0
    2986:	d001      	beq.n	298c <udi_cdc_multi_putc+0x60>
			return false;
    2988:	2300      	movs	r3, #0
    298a:	e04e      	b.n	2a2a <udi_cdc_multi_putc+0xfe>
    298c:	1c3b      	adds	r3, r7, #0
    298e:	3317      	adds	r3, #23
    2990:	1c3a      	adds	r2, r7, #0
    2992:	3217      	adds	r2, #23
    2994:	7812      	ldrb	r2, [r2, #0]
    2996:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    2998:	e7e2      	b.n	2960 <udi_cdc_multi_putc+0x34>
	}

	// Write value
	flags = cpu_irq_save();
    299a:	4b29      	ldr	r3, [pc, #164]	; (2a40 <udi_cdc_multi_putc+0x114>)
    299c:	4798      	blx	r3
    299e:	1c03      	adds	r3, r0, #0
    29a0:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    29a2:	1c3b      	adds	r3, r7, #0
    29a4:	3316      	adds	r3, #22
    29a6:	781a      	ldrb	r2, [r3, #0]
    29a8:	1c3b      	adds	r3, r7, #0
    29aa:	330f      	adds	r3, #15
    29ac:	4925      	ldr	r1, [pc, #148]	; (2a44 <udi_cdc_multi_putc+0x118>)
    29ae:	5c8a      	ldrb	r2, [r1, r2]
    29b0:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    29b2:	1c3b      	adds	r3, r7, #0
    29b4:	3316      	adds	r3, #22
    29b6:	7819      	ldrb	r1, [r3, #0]
    29b8:	1c3b      	adds	r3, r7, #0
    29ba:	330f      	adds	r3, #15
    29bc:	781b      	ldrb	r3, [r3, #0]
    29be:	1c3a      	adds	r2, r7, #0
    29c0:	3216      	adds	r2, #22
    29c2:	7814      	ldrb	r4, [r2, #0]
    29c4:	1c3a      	adds	r2, r7, #0
    29c6:	320f      	adds	r2, #15
    29c8:	7810      	ldrb	r0, [r2, #0]
    29ca:	4a1f      	ldr	r2, [pc, #124]	; (2a48 <udi_cdc_multi_putc+0x11c>)
    29cc:	0065      	lsls	r5, r4, #1
    29ce:	182d      	adds	r5, r5, r0
    29d0:	006d      	lsls	r5, r5, #1
    29d2:	5aaa      	ldrh	r2, [r5, r2]
    29d4:	1c55      	adds	r5, r2, #1
    29d6:	b2ae      	uxth	r6, r5
    29d8:	4d1b      	ldr	r5, [pc, #108]	; (2a48 <udi_cdc_multi_putc+0x11c>)
    29da:	0064      	lsls	r4, r4, #1
    29dc:	1820      	adds	r0, r4, r0
    29de:	0040      	lsls	r0, r0, #1
    29e0:	1c34      	adds	r4, r6, #0
    29e2:	5344      	strh	r4, [r0, r5]
    29e4:	1c10      	adds	r0, r2, #0
    29e6:	683a      	ldr	r2, [r7, #0]
    29e8:	b2d4      	uxtb	r4, r2
    29ea:	4d18      	ldr	r5, [pc, #96]	; (2a4c <udi_cdc_multi_putc+0x120>)
    29ec:	1c1a      	adds	r2, r3, #0
    29ee:	0092      	lsls	r2, r2, #2
    29f0:	18d2      	adds	r2, r2, r3
    29f2:	0193      	lsls	r3, r2, #6
    29f4:	1c1a      	adds	r2, r3, #0
    29f6:	1c0b      	adds	r3, r1, #0
    29f8:	009b      	lsls	r3, r3, #2
    29fa:	185b      	adds	r3, r3, r1
    29fc:	01db      	lsls	r3, r3, #7
    29fe:	18d3      	adds	r3, r2, r3
    2a00:	18eb      	adds	r3, r5, r3
    2a02:	1c22      	adds	r2, r4, #0
    2a04:	541a      	strb	r2, [r3, r0]
	cpu_irq_restore(flags);
    2a06:	693b      	ldr	r3, [r7, #16]
    2a08:	1c18      	adds	r0, r3, #0
    2a0a:	4b11      	ldr	r3, [pc, #68]	; (2a50 <udi_cdc_multi_putc+0x124>)
    2a0c:	4798      	blx	r3

	if (b_databit_9) {
    2a0e:	1c3b      	adds	r3, r7, #0
    2a10:	3317      	adds	r3, #23
    2a12:	781b      	ldrb	r3, [r3, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d007      	beq.n	2a28 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    2a18:	1c3b      	adds	r3, r7, #0
    2a1a:	3317      	adds	r3, #23
    2a1c:	2200      	movs	r2, #0
    2a1e:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    2a20:	683b      	ldr	r3, [r7, #0]
    2a22:	121b      	asrs	r3, r3, #8
    2a24:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    2a26:	e79b      	b.n	2960 <udi_cdc_multi_putc+0x34>
	}
	return true;
    2a28:	2301      	movs	r3, #1
}
    2a2a:	1c18      	adds	r0, r3, #0
    2a2c:	46bd      	mov	sp, r7
    2a2e:	b007      	add	sp, #28
    2a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	20003a18 	.word	0x20003a18
    2a38:	000028e9 	.word	0x000028e9
    2a3c:	20003a36 	.word	0x20003a36
    2a40:	00001949 	.word	0x00001949
    2a44:	20003f4c 	.word	0x20003f4c
    2a48:	20003f48 	.word	0x20003f48
    2a4c:	20003cc8 	.word	0x20003cc8
    2a50:	00001991 	.word	0x00001991

00002a54 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
    2a5a:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	2000      	movs	r0, #0
    2a60:	1c19      	adds	r1, r3, #0
    2a62:	4b03      	ldr	r3, [pc, #12]	; (2a70 <udi_cdc_putc+0x1c>)
    2a64:	4798      	blx	r3
    2a66:	1c03      	adds	r3, r0, #0
}
    2a68:	1c18      	adds	r0, r3, #0
    2a6a:	46bd      	mov	sp, r7
    2a6c:	b002      	add	sp, #8
    2a6e:	bd80      	pop	{r7, pc}
    2a70:	0000292d 	.word	0x0000292d

00002a74 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2a74:	b580      	push	{r7, lr}
    2a76:	b082      	sub	sp, #8
    2a78:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a7a:	f3ef 8310 	mrs	r3, PRIMASK
    2a7e:	603b      	str	r3, [r7, #0]
  return(result);
    2a80:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    2a82:	425a      	negs	r2, r3
    2a84:	4153      	adcs	r3, r2
    2a86:	b2db      	uxtb	r3, r3
    2a88:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2a8a:	b672      	cpsid	i
    2a8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2a90:	4b03      	ldr	r3, [pc, #12]	; (2aa0 <cpu_irq_save+0x2c>)
    2a92:	2200      	movs	r2, #0
    2a94:	701a      	strb	r2, [r3, #0]
	return flags;
    2a96:	687b      	ldr	r3, [r7, #4]
}
    2a98:	1c18      	adds	r0, r3, #0
    2a9a:	46bd      	mov	sp, r7
    2a9c:	b002      	add	sp, #8
    2a9e:	bd80      	pop	{r7, pc}
    2aa0:	200002b4 	.word	0x200002b4

00002aa4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b082      	sub	sp, #8
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
	return (flags);
    2aac:	687b      	ldr	r3, [r7, #4]
    2aae:	1e5a      	subs	r2, r3, #1
    2ab0:	4193      	sbcs	r3, r2
    2ab2:	b2db      	uxtb	r3, r3
}
    2ab4:	1c18      	adds	r0, r3, #0
    2ab6:	46bd      	mov	sp, r7
    2ab8:	b002      	add	sp, #8
    2aba:	bd80      	pop	{r7, pc}

00002abc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2abc:	b580      	push	{r7, lr}
    2abe:	b082      	sub	sp, #8
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2ac4:	687b      	ldr	r3, [r7, #4]
    2ac6:	1c18      	adds	r0, r3, #0
    2ac8:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <cpu_irq_restore+0x28>)
    2aca:	4798      	blx	r3
    2acc:	1c03      	adds	r3, r0, #0
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d005      	beq.n	2ade <cpu_irq_restore+0x22>
		cpu_irq_enable();
    2ad2:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <cpu_irq_restore+0x2c>)
    2ad4:	2201      	movs	r2, #1
    2ad6:	701a      	strb	r2, [r3, #0]
    2ad8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2adc:	b662      	cpsie	i
}
    2ade:	46bd      	mov	sp, r7
    2ae0:	b002      	add	sp, #8
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	00002aa5 	.word	0x00002aa5
    2ae8:	200002b4 	.word	0x200002b4

00002aec <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
    2af0:	4b0b      	ldr	r3, [pc, #44]	; (2b20 <udi_hid_kbd_enable+0x34>)
    2af2:	2200      	movs	r2, #0
    2af4:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
    2af6:	4b0b      	ldr	r3, [pc, #44]	; (2b24 <udi_hid_kbd_enable+0x38>)
    2af8:	2200      	movs	r2, #0
    2afa:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    2afc:	4b0a      	ldr	r3, [pc, #40]	; (2b28 <udi_hid_kbd_enable+0x3c>)
    2afe:	2200      	movs	r2, #0
    2b00:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    2b02:	4b0a      	ldr	r3, [pc, #40]	; (2b2c <udi_hid_kbd_enable+0x40>)
    2b04:	1c18      	adds	r0, r3, #0
    2b06:	2100      	movs	r1, #0
    2b08:	2208      	movs	r2, #8
    2b0a:	4b09      	ldr	r3, [pc, #36]	; (2b30 <udi_hid_kbd_enable+0x44>)
    2b0c:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    2b0e:	4b09      	ldr	r3, [pc, #36]	; (2b34 <udi_hid_kbd_enable+0x48>)
    2b10:	2200      	movs	r2, #0
    2b12:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    2b14:	4b08      	ldr	r3, [pc, #32]	; (2b38 <udi_hid_kbd_enable+0x4c>)
    2b16:	4798      	blx	r3
    2b18:	1c03      	adds	r3, r0, #0
}
    2b1a:	1c18      	adds	r0, r3, #0
    2b1c:	46bd      	mov	sp, r7
    2b1e:	bd80      	pop	{r7, pc}
    2b20:	20003f60 	.word	0x20003f60
    2b24:	20003f64 	.word	0x20003f64
    2b28:	20003f78 	.word	0x20003f78
    2b2c:	20003f70 	.word	0x20003f70
    2b30:	0000b8ab 	.word	0x0000b8ab
    2b34:	20003f6c 	.word	0x20003f6c
    2b38:	0000b031 	.word	0x0000b031

00002b3c <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
    2b40:	4b01      	ldr	r3, [pc, #4]	; (2b48 <udi_hid_kbd_disable+0xc>)
    2b42:	4798      	blx	r3
}
    2b44:	46bd      	mov	sp, r7
    2b46:	bd80      	pop	{r7, pc}
    2b48:	0000b049 	.word	0x0000b049

00002b4c <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
    2b4c:	b598      	push	{r3, r4, r7, lr}
    2b4e:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
    2b50:	4804      	ldr	r0, [pc, #16]	; (2b64 <udi_hid_kbd_setup+0x18>)
    2b52:	4905      	ldr	r1, [pc, #20]	; (2b68 <udi_hid_kbd_setup+0x1c>)
    2b54:	4a05      	ldr	r2, [pc, #20]	; (2b6c <udi_hid_kbd_setup+0x20>)
    2b56:	4b06      	ldr	r3, [pc, #24]	; (2b70 <udi_hid_kbd_setup+0x24>)
    2b58:	4c06      	ldr	r4, [pc, #24]	; (2b74 <udi_hid_kbd_setup+0x28>)
    2b5a:	47a0      	blx	r4
    2b5c:	1c03      	adds	r3, r0, #0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
    2b5e:	1c18      	adds	r0, r3, #0
    2b60:	46bd      	mov	sp, r7
    2b62:	bd98      	pop	{r3, r4, r7, pc}
    2b64:	20003f60 	.word	0x20003f60
    2b68:	20003f64 	.word	0x20003f64
    2b6c:	2000016c 	.word	0x2000016c
    2b70:	00002b85 	.word	0x00002b85
    2b74:	00002f71 	.word	0x00002f71

00002b78 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
	return 0;
    2b7c:	2300      	movs	r3, #0
}
    2b7e:	1c18      	adds	r0, r3, #0
    2b80:	46bd      	mov	sp, r7
    2b82:	bd80      	pop	{r7, pc}

00002b84 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
    2b84:	b580      	push	{r7, lr}
    2b86:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    2b88:	4b0f      	ldr	r3, [pc, #60]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	0a1b      	lsrs	r3, r3, #8
    2b8e:	b29b      	uxth	r3, r3
    2b90:	2b02      	cmp	r3, #2
    2b92:	d115      	bne.n	2bc0 <udi_hid_kbd_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2b94:	4b0c      	ldr	r3, [pc, #48]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2b96:	885a      	ldrh	r2, [r3, #2]
    2b98:	23ff      	movs	r3, #255	; 0xff
    2b9a:	4013      	ands	r3, r2
    2b9c:	b29b      	uxth	r3, r3
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d10e      	bne.n	2bc0 <udi_hid_kbd_setreport+0x3c>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    2ba2:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2ba4:	88db      	ldrh	r3, [r3, #6]
    2ba6:	2b01      	cmp	r3, #1
    2ba8:	d10a      	bne.n	2bc0 <udi_hid_kbd_setreport+0x3c>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    2baa:	4b07      	ldr	r3, [pc, #28]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2bac:	4a07      	ldr	r2, [pc, #28]	; (2bcc <udi_hid_kbd_setreport+0x48>)
    2bae:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    2bb0:	4b05      	ldr	r3, [pc, #20]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2bb2:	4a07      	ldr	r2, [pc, #28]	; (2bd0 <udi_hid_kbd_setreport+0x4c>)
    2bb4:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    2bb6:	4b04      	ldr	r3, [pc, #16]	; (2bc8 <udi_hid_kbd_setreport+0x44>)
    2bb8:	2201      	movs	r2, #1
    2bba:	819a      	strh	r2, [r3, #12]
		return true;
    2bbc:	2301      	movs	r3, #1
    2bbe:	e000      	b.n	2bc2 <udi_hid_kbd_setreport+0x3e>
	}
	return false;
    2bc0:	2300      	movs	r3, #0
}
    2bc2:	1c18      	adds	r0, r3, #0
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd80      	pop	{r7, pc}
    2bc8:	20006b9c 	.word	0x20006b9c
    2bcc:	20003f68 	.word	0x20003f68
    2bd0:	00002eb1 	.word	0x00002eb1

00002bd4 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b084      	sub	sp, #16
    2bd8:	af00      	add	r7, sp, #0
    2bda:	1c02      	adds	r2, r0, #0
    2bdc:	1dfb      	adds	r3, r7, #7
    2bde:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2be0:	4b0d      	ldr	r3, [pc, #52]	; (2c18 <udi_hid_kbd_modifier_up+0x44>)
    2be2:	4798      	blx	r3
    2be4:	1c03      	adds	r3, r0, #0
    2be6:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    2be8:	4b0c      	ldr	r3, [pc, #48]	; (2c1c <udi_hid_kbd_modifier_up+0x48>)
    2bea:	781b      	ldrb	r3, [r3, #0]
    2bec:	1dfa      	adds	r2, r7, #7
    2bee:	7812      	ldrb	r2, [r2, #0]
    2bf0:	43d2      	mvns	r2, r2
    2bf2:	b2d2      	uxtb	r2, r2
    2bf4:	4013      	ands	r3, r2
    2bf6:	b2da      	uxtb	r2, r3
    2bf8:	4b08      	ldr	r3, [pc, #32]	; (2c1c <udi_hid_kbd_modifier_up+0x48>)
    2bfa:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    2bfc:	4b08      	ldr	r3, [pc, #32]	; (2c20 <udi_hid_kbd_modifier_up+0x4c>)
    2bfe:	2201      	movs	r2, #1
    2c00:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2c02:	4b08      	ldr	r3, [pc, #32]	; (2c24 <udi_hid_kbd_modifier_up+0x50>)
    2c04:	4798      	blx	r3

	cpu_irq_restore(flags);
    2c06:	68fb      	ldr	r3, [r7, #12]
    2c08:	1c18      	adds	r0, r3, #0
    2c0a:	4b07      	ldr	r3, [pc, #28]	; (2c28 <udi_hid_kbd_modifier_up+0x54>)
    2c0c:	4798      	blx	r3
	return true;
    2c0e:	2301      	movs	r3, #1
}
    2c10:	1c18      	adds	r0, r3, #0
    2c12:	46bd      	mov	sp, r7
    2c14:	b004      	add	sp, #16
    2c16:	bd80      	pop	{r7, pc}
    2c18:	00002a75 	.word	0x00002a75
    2c1c:	20003f70 	.word	0x20003f70
    2c20:	20003f6c 	.word	0x20003f6c
    2c24:	00002e19 	.word	0x00002e19
    2c28:	00002abd 	.word	0x00002abd

00002c2c <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b084      	sub	sp, #16
    2c30:	af00      	add	r7, sp, #0
    2c32:	1c02      	adds	r2, r0, #0
    2c34:	1dfb      	adds	r3, r7, #7
    2c36:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2c38:	4b0c      	ldr	r3, [pc, #48]	; (2c6c <udi_hid_kbd_modifier_down+0x40>)
    2c3a:	4798      	blx	r3
    2c3c:	1c03      	adds	r3, r0, #0
    2c3e:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
    2c40:	4b0b      	ldr	r3, [pc, #44]	; (2c70 <udi_hid_kbd_modifier_down+0x44>)
    2c42:	781a      	ldrb	r2, [r3, #0]
    2c44:	1dfb      	adds	r3, r7, #7
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	4313      	orrs	r3, r2
    2c4a:	b2da      	uxtb	r2, r3
    2c4c:	4b08      	ldr	r3, [pc, #32]	; (2c70 <udi_hid_kbd_modifier_down+0x44>)
    2c4e:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    2c50:	4b08      	ldr	r3, [pc, #32]	; (2c74 <udi_hid_kbd_modifier_down+0x48>)
    2c52:	2201      	movs	r2, #1
    2c54:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2c56:	4b08      	ldr	r3, [pc, #32]	; (2c78 <udi_hid_kbd_modifier_down+0x4c>)
    2c58:	4798      	blx	r3

	cpu_irq_restore(flags);
    2c5a:	68fb      	ldr	r3, [r7, #12]
    2c5c:	1c18      	adds	r0, r3, #0
    2c5e:	4b07      	ldr	r3, [pc, #28]	; (2c7c <udi_hid_kbd_modifier_down+0x50>)
    2c60:	4798      	blx	r3
	return true;
    2c62:	2301      	movs	r3, #1
}
    2c64:	1c18      	adds	r0, r3, #0
    2c66:	46bd      	mov	sp, r7
    2c68:	b004      	add	sp, #16
    2c6a:	bd80      	pop	{r7, pc}
    2c6c:	00002a75 	.word	0x00002a75
    2c70:	20003f70 	.word	0x20003f70
    2c74:	20003f6c 	.word	0x20003f6c
    2c78:	00002e19 	.word	0x00002e19
    2c7c:	00002abd 	.word	0x00002abd

00002c80 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b084      	sub	sp, #16
    2c84:	af00      	add	r7, sp, #0
    2c86:	1c02      	adds	r2, r0, #0
    2c88:	1dfb      	adds	r3, r7, #7
    2c8a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2c8c:	4b2f      	ldr	r3, [pc, #188]	; (2d4c <udi_hid_kbd_up+0xcc>)
    2c8e:	4798      	blx	r3
    2c90:	1c03      	adds	r3, r0, #0
    2c92:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2c94:	1c3b      	adds	r3, r7, #0
    2c96:	330f      	adds	r3, #15
    2c98:	2202      	movs	r2, #2
    2c9a:	701a      	strb	r2, [r3, #0]
    2c9c:	e01d      	b.n	2cda <udi_hid_kbd_up+0x5a>
		if (0 == udi_hid_kbd_report[i]) {
    2c9e:	1c3b      	adds	r3, r7, #0
    2ca0:	330f      	adds	r3, #15
    2ca2:	781b      	ldrb	r3, [r3, #0]
    2ca4:	4a2a      	ldr	r2, [pc, #168]	; (2d50 <udi_hid_kbd_up+0xd0>)
    2ca6:	5cd3      	ldrb	r3, [r2, r3]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d105      	bne.n	2cb8 <udi_hid_kbd_up+0x38>
			// Already removed
			cpu_irq_restore(flags);
    2cac:	68bb      	ldr	r3, [r7, #8]
    2cae:	1c18      	adds	r0, r3, #0
    2cb0:	4b28      	ldr	r3, [pc, #160]	; (2d54 <udi_hid_kbd_up+0xd4>)
    2cb2:	4798      	blx	r3
			return true;
    2cb4:	2301      	movs	r3, #1
    2cb6:	e045      	b.n	2d44 <udi_hid_kbd_up+0xc4>
		}
		if (key_id == udi_hid_kbd_report[i])
    2cb8:	1c3b      	adds	r3, r7, #0
    2cba:	330f      	adds	r3, #15
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	4a24      	ldr	r2, [pc, #144]	; (2d50 <udi_hid_kbd_up+0xd0>)
    2cc0:	5cd3      	ldrb	r3, [r2, r3]
    2cc2:	1dfa      	adds	r2, r7, #7
    2cc4:	7812      	ldrb	r2, [r2, #0]
    2cc6:	429a      	cmp	r2, r3
    2cc8:	d100      	bne.n	2ccc <udi_hid_kbd_up+0x4c>
			break;
    2cca:	e00b      	b.n	2ce4 <udi_hid_kbd_up+0x64>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2ccc:	1c3b      	adds	r3, r7, #0
    2cce:	330f      	adds	r3, #15
    2cd0:	781a      	ldrb	r2, [r3, #0]
    2cd2:	1c3b      	adds	r3, r7, #0
    2cd4:	330f      	adds	r3, #15
    2cd6:	3201      	adds	r2, #1
    2cd8:	701a      	strb	r2, [r3, #0]
    2cda:	1c3b      	adds	r3, r7, #0
    2cdc:	330f      	adds	r3, #15
    2cde:	781b      	ldrb	r3, [r3, #0]
    2ce0:	2b07      	cmp	r3, #7
    2ce2:	d9dc      	bls.n	2c9e <udi_hid_kbd_up+0x1e>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    2ce4:	1c3b      	adds	r3, r7, #0
    2ce6:	330f      	adds	r3, #15
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	2b08      	cmp	r3, #8
    2cec:	d105      	bne.n	2cfa <udi_hid_kbd_up+0x7a>
		// Already removed
		cpu_irq_restore(flags);
    2cee:	68bb      	ldr	r3, [r7, #8]
    2cf0:	1c18      	adds	r0, r3, #0
    2cf2:	4b18      	ldr	r3, [pc, #96]	; (2d54 <udi_hid_kbd_up+0xd4>)
    2cf4:	4798      	blx	r3
		return true;
    2cf6:	2301      	movs	r3, #1
    2cf8:	e024      	b.n	2d44 <udi_hid_kbd_up+0xc4>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2cfa:	e011      	b.n	2d20 <udi_hid_kbd_up+0xa0>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    2cfc:	1c3b      	adds	r3, r7, #0
    2cfe:	330f      	adds	r3, #15
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	1c3a      	adds	r2, r7, #0
    2d04:	320f      	adds	r2, #15
    2d06:	7812      	ldrb	r2, [r2, #0]
    2d08:	3201      	adds	r2, #1
    2d0a:	4911      	ldr	r1, [pc, #68]	; (2d50 <udi_hid_kbd_up+0xd0>)
    2d0c:	5c89      	ldrb	r1, [r1, r2]
    2d0e:	4a10      	ldr	r2, [pc, #64]	; (2d50 <udi_hid_kbd_up+0xd0>)
    2d10:	54d1      	strb	r1, [r2, r3]
		i++;
    2d12:	1c3b      	adds	r3, r7, #0
    2d14:	330f      	adds	r3, #15
    2d16:	781a      	ldrb	r2, [r3, #0]
    2d18:	1c3b      	adds	r3, r7, #0
    2d1a:	330f      	adds	r3, #15
    2d1c:	3201      	adds	r2, #1
    2d1e:	701a      	strb	r2, [r3, #0]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2d20:	1c3b      	adds	r3, r7, #0
    2d22:	330f      	adds	r3, #15
    2d24:	781b      	ldrb	r3, [r3, #0]
    2d26:	2b06      	cmp	r3, #6
    2d28:	d9e8      	bls.n	2cfc <udi_hid_kbd_up+0x7c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    2d2a:	4b09      	ldr	r3, [pc, #36]	; (2d50 <udi_hid_kbd_up+0xd0>)
    2d2c:	2200      	movs	r2, #0
    2d2e:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    2d30:	4b09      	ldr	r3, [pc, #36]	; (2d58 <udi_hid_kbd_up+0xd8>)
    2d32:	2201      	movs	r2, #1
    2d34:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2d36:	4b09      	ldr	r3, [pc, #36]	; (2d5c <udi_hid_kbd_up+0xdc>)
    2d38:	4798      	blx	r3

	cpu_irq_restore(flags);
    2d3a:	68bb      	ldr	r3, [r7, #8]
    2d3c:	1c18      	adds	r0, r3, #0
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <udi_hid_kbd_up+0xd4>)
    2d40:	4798      	blx	r3
	return true;
    2d42:	2301      	movs	r3, #1
}
    2d44:	1c18      	adds	r0, r3, #0
    2d46:	46bd      	mov	sp, r7
    2d48:	b004      	add	sp, #16
    2d4a:	bd80      	pop	{r7, pc}
    2d4c:	00002a75 	.word	0x00002a75
    2d50:	20003f70 	.word	0x20003f70
    2d54:	00002abd 	.word	0x00002abd
    2d58:	20003f6c 	.word	0x20003f6c
    2d5c:	00002e19 	.word	0x00002e19

00002d60 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b084      	sub	sp, #16
    2d64:	af00      	add	r7, sp, #0
    2d66:	1c02      	adds	r2, r0, #0
    2d68:	1dfb      	adds	r3, r7, #7
    2d6a:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2d6c:	4b25      	ldr	r3, [pc, #148]	; (2e04 <udi_hid_kbd_down+0xa4>)
    2d6e:	4798      	blx	r3
    2d70:	1c03      	adds	r3, r0, #0
    2d72:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2d74:	1c3b      	adds	r3, r7, #0
    2d76:	330f      	adds	r3, #15
    2d78:	2202      	movs	r2, #2
    2d7a:	701a      	strb	r2, [r3, #0]
    2d7c:	e01d      	b.n	2dba <udi_hid_kbd_down+0x5a>
		if (0 == udi_hid_kbd_report[i])
    2d7e:	1c3b      	adds	r3, r7, #0
    2d80:	330f      	adds	r3, #15
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	4a20      	ldr	r2, [pc, #128]	; (2e08 <udi_hid_kbd_down+0xa8>)
    2d86:	5cd3      	ldrb	r3, [r2, r3]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d100      	bne.n	2d8e <udi_hid_kbd_down+0x2e>
			break;
    2d8c:	e01a      	b.n	2dc4 <udi_hid_kbd_down+0x64>
		if (key_id == udi_hid_kbd_report[i]) {
    2d8e:	1c3b      	adds	r3, r7, #0
    2d90:	330f      	adds	r3, #15
    2d92:	781b      	ldrb	r3, [r3, #0]
    2d94:	4a1c      	ldr	r2, [pc, #112]	; (2e08 <udi_hid_kbd_down+0xa8>)
    2d96:	5cd3      	ldrb	r3, [r2, r3]
    2d98:	1dfa      	adds	r2, r7, #7
    2d9a:	7812      	ldrb	r2, [r2, #0]
    2d9c:	429a      	cmp	r2, r3
    2d9e:	d105      	bne.n	2dac <udi_hid_kbd_down+0x4c>
			// Already in array
			cpu_irq_restore(flags);
    2da0:	68bb      	ldr	r3, [r7, #8]
    2da2:	1c18      	adds	r0, r3, #0
    2da4:	4b19      	ldr	r3, [pc, #100]	; (2e0c <udi_hid_kbd_down+0xac>)
    2da6:	4798      	blx	r3
			return true;
    2da8:	2301      	movs	r3, #1
    2daa:	e027      	b.n	2dfc <udi_hid_kbd_down+0x9c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2dac:	1c3b      	adds	r3, r7, #0
    2dae:	330f      	adds	r3, #15
    2db0:	781a      	ldrb	r2, [r3, #0]
    2db2:	1c3b      	adds	r3, r7, #0
    2db4:	330f      	adds	r3, #15
    2db6:	3201      	adds	r2, #1
    2db8:	701a      	strb	r2, [r3, #0]
    2dba:	1c3b      	adds	r3, r7, #0
    2dbc:	330f      	adds	r3, #15
    2dbe:	781b      	ldrb	r3, [r3, #0]
    2dc0:	2b07      	cmp	r3, #7
    2dc2:	d9dc      	bls.n	2d7e <udi_hid_kbd_down+0x1e>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    2dc4:	1c3b      	adds	r3, r7, #0
    2dc6:	330f      	adds	r3, #15
    2dc8:	781b      	ldrb	r3, [r3, #0]
    2dca:	2b08      	cmp	r3, #8
    2dcc:	d105      	bne.n	2dda <udi_hid_kbd_down+0x7a>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
    2dce:	68bb      	ldr	r3, [r7, #8]
    2dd0:	1c18      	adds	r0, r3, #0
    2dd2:	4b0e      	ldr	r3, [pc, #56]	; (2e0c <udi_hid_kbd_down+0xac>)
    2dd4:	4798      	blx	r3
		return false;
    2dd6:	2300      	movs	r3, #0
    2dd8:	e010      	b.n	2dfc <udi_hid_kbd_down+0x9c>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    2dda:	1c3b      	adds	r3, r7, #0
    2ddc:	330f      	adds	r3, #15
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	4a09      	ldr	r2, [pc, #36]	; (2e08 <udi_hid_kbd_down+0xa8>)
    2de2:	1df9      	adds	r1, r7, #7
    2de4:	7809      	ldrb	r1, [r1, #0]
    2de6:	54d1      	strb	r1, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    2de8:	4b09      	ldr	r3, [pc, #36]	; (2e10 <udi_hid_kbd_down+0xb0>)
    2dea:	2201      	movs	r2, #1
    2dec:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2dee:	4b09      	ldr	r3, [pc, #36]	; (2e14 <udi_hid_kbd_down+0xb4>)
    2df0:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
    2df2:	68bb      	ldr	r3, [r7, #8]
    2df4:	1c18      	adds	r0, r3, #0
    2df6:	4b05      	ldr	r3, [pc, #20]	; (2e0c <udi_hid_kbd_down+0xac>)
    2df8:	4798      	blx	r3
	return true;
    2dfa:	2301      	movs	r3, #1
}
    2dfc:	1c18      	adds	r0, r3, #0
    2dfe:	46bd      	mov	sp, r7
    2e00:	b004      	add	sp, #16
    2e02:	bd80      	pop	{r7, pc}
    2e04:	00002a75 	.word	0x00002a75
    2e08:	20003f70 	.word	0x20003f70
    2e0c:	00002abd 	.word	0x00002abd
    2e10:	20003f6c 	.word	0x20003f6c
    2e14:	00002e19 	.word	0x00002e19

00002e18 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
    2e18:	b590      	push	{r4, r7, lr}
    2e1a:	b083      	sub	sp, #12
    2e1c:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    2e1e:	4b10      	ldr	r3, [pc, #64]	; (2e60 <udi_hid_kbd_send_report+0x48>)
    2e20:	781b      	ldrb	r3, [r3, #0]
    2e22:	2b00      	cmp	r3, #0
    2e24:	d001      	beq.n	2e2a <udi_hid_kbd_send_report+0x12>
		return false;
    2e26:	2300      	movs	r3, #0
    2e28:	e015      	b.n	2e56 <udi_hid_kbd_send_report+0x3e>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    2e2a:	4b0e      	ldr	r3, [pc, #56]	; (2e64 <udi_hid_kbd_send_report+0x4c>)
    2e2c:	4a0e      	ldr	r2, [pc, #56]	; (2e68 <udi_hid_kbd_send_report+0x50>)
    2e2e:	ca03      	ldmia	r2!, {r0, r1}
    2e30:	c303      	stmia	r3!, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
    2e32:	4b0e      	ldr	r3, [pc, #56]	; (2e6c <udi_hid_kbd_send_report+0x54>)
    2e34:	2200      	movs	r2, #0
    2e36:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    2e38:	4b0a      	ldr	r3, [pc, #40]	; (2e64 <udi_hid_kbd_send_report+0x4c>)
    2e3a:	4a0d      	ldr	r2, [pc, #52]	; (2e70 <udi_hid_kbd_send_report+0x58>)
    2e3c:	9200      	str	r2, [sp, #0]
    2e3e:	2084      	movs	r0, #132	; 0x84
    2e40:	2100      	movs	r1, #0
    2e42:	1c1a      	adds	r2, r3, #0
    2e44:	2308      	movs	r3, #8
    2e46:	4c0b      	ldr	r4, [pc, #44]	; (2e74 <udi_hid_kbd_send_report+0x5c>)
    2e48:	47a0      	blx	r4
    2e4a:	1c03      	adds	r3, r0, #0
    2e4c:	1c1a      	adds	r2, r3, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
    2e4e:	4b04      	ldr	r3, [pc, #16]	; (2e60 <udi_hid_kbd_send_report+0x48>)
    2e50:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
    2e52:	4b03      	ldr	r3, [pc, #12]	; (2e60 <udi_hid_kbd_send_report+0x48>)
    2e54:	781b      	ldrb	r3, [r3, #0]
}
    2e56:	1c18      	adds	r0, r3, #0
    2e58:	46bd      	mov	sp, r7
    2e5a:	b001      	add	sp, #4
    2e5c:	bd90      	pop	{r4, r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	20003f78 	.word	0x20003f78
    2e64:	20003f7c 	.word	0x20003f7c
    2e68:	20003f70 	.word	0x20003f70
    2e6c:	20003f6c 	.word	0x20003f6c
    2e70:	00002e79 	.word	0x00002e79
    2e74:	000080d5 	.word	0x000080d5

00002e78 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b082      	sub	sp, #8
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6039      	str	r1, [r7, #0]
    2e80:	1dfb      	adds	r3, r7, #7
    2e82:	1c01      	adds	r1, r0, #0
    2e84:	7019      	strb	r1, [r3, #0]
    2e86:	1dbb      	adds	r3, r7, #6
    2e88:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
    2e8a:	4b06      	ldr	r3, [pc, #24]	; (2ea4 <udi_hid_kbd_report_sent+0x2c>)
    2e8c:	2200      	movs	r2, #0
    2e8e:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    2e90:	4b05      	ldr	r3, [pc, #20]	; (2ea8 <udi_hid_kbd_report_sent+0x30>)
    2e92:	781b      	ldrb	r3, [r3, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d001      	beq.n	2e9c <udi_hid_kbd_report_sent+0x24>
		udi_hid_kbd_send_report();
    2e98:	4b04      	ldr	r3, [pc, #16]	; (2eac <udi_hid_kbd_report_sent+0x34>)
    2e9a:	4798      	blx	r3
	}
}
    2e9c:	46bd      	mov	sp, r7
    2e9e:	b002      	add	sp, #8
    2ea0:	bd80      	pop	{r7, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	20003f78 	.word	0x20003f78
    2ea8:	20003f6c 	.word	0x20003f6c
    2eac:	00002e19 	.word	0x00002e19

00002eb0 <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
    2eb4:	4b03      	ldr	r3, [pc, #12]	; (2ec4 <udi_hid_kbd_setreport_valid+0x14>)
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	1c18      	adds	r0, r3, #0
    2eba:	4b03      	ldr	r3, [pc, #12]	; (2ec8 <udi_hid_kbd_setreport_valid+0x18>)
    2ebc:	4798      	blx	r3
}
    2ebe:	46bd      	mov	sp, r7
    2ec0:	bd80      	pop	{r7, pc}
    2ec2:	46c0      	nop			; (mov r8, r8)
    2ec4:	20003f68 	.word	0x20003f68
    2ec8:	00001549 	.word	0x00001549

00002ecc <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    2ed0:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <udi_hid_mouse_enable+0x34>)
    2ed2:	2200      	movs	r2, #0
    2ed4:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    2ed6:	4b0b      	ldr	r3, [pc, #44]	; (2f04 <udi_hid_mouse_enable+0x38>)
    2ed8:	2200      	movs	r2, #0
    2eda:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <udi_hid_mouse_enable+0x3c>)
    2ede:	2200      	movs	r2, #0
    2ee0:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    2ee2:	4b0a      	ldr	r3, [pc, #40]	; (2f0c <udi_hid_mouse_enable+0x40>)
    2ee4:	1c18      	adds	r0, r3, #0
    2ee6:	2100      	movs	r1, #0
    2ee8:	2204      	movs	r2, #4
    2eea:	4b09      	ldr	r3, [pc, #36]	; (2f10 <udi_hid_mouse_enable+0x44>)
    2eec:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2eee:	4b09      	ldr	r3, [pc, #36]	; (2f14 <udi_hid_mouse_enable+0x48>)
    2ef0:	2200      	movs	r2, #0
    2ef2:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    2ef4:	4b08      	ldr	r3, [pc, #32]	; (2f18 <udi_hid_mouse_enable+0x4c>)
    2ef6:	4798      	blx	r3
    2ef8:	1c03      	adds	r3, r0, #0
}
    2efa:	1c18      	adds	r0, r3, #0
    2efc:	46bd      	mov	sp, r7
    2efe:	bd80      	pop	{r7, pc}
    2f00:	20003f84 	.word	0x20003f84
    2f04:	20003f88 	.word	0x20003f88
    2f08:	20003f94 	.word	0x20003f94
    2f0c:	20003f90 	.word	0x20003f90
    2f10:	0000b8ab 	.word	0x0000b8ab
    2f14:	20003f8c 	.word	0x20003f8c
    2f18:	0000b005 	.word	0x0000b005

00002f1c <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    2f1c:	b580      	push	{r7, lr}
    2f1e:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    2f20:	4b01      	ldr	r3, [pc, #4]	; (2f28 <udi_hid_mouse_disable+0xc>)
    2f22:	4798      	blx	r3
}
    2f24:	46bd      	mov	sp, r7
    2f26:	bd80      	pop	{r7, pc}
    2f28:	0000b01d 	.word	0x0000b01d

00002f2c <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2f2c:	b598      	push	{r3, r4, r7, lr}
    2f2e:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2f30:	4804      	ldr	r0, [pc, #16]	; (2f44 <udi_hid_mouse_setup+0x18>)
    2f32:	4905      	ldr	r1, [pc, #20]	; (2f48 <udi_hid_mouse_setup+0x1c>)
    2f34:	4a05      	ldr	r2, [pc, #20]	; (2f4c <udi_hid_mouse_setup+0x20>)
    2f36:	4b06      	ldr	r3, [pc, #24]	; (2f50 <udi_hid_mouse_setup+0x24>)
    2f38:	4c06      	ldr	r4, [pc, #24]	; (2f54 <udi_hid_mouse_setup+0x28>)
    2f3a:	47a0      	blx	r4
    2f3c:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    2f3e:	1c18      	adds	r0, r3, #0
    2f40:	46bd      	mov	sp, r7
    2f42:	bd98      	pop	{r3, r4, r7, pc}
    2f44:	20003f84 	.word	0x20003f84
    2f48:	20003f88 	.word	0x20003f88
    2f4c:	200001bc 	.word	0x200001bc
    2f50:	00002f65 	.word	0x00002f65
    2f54:	00002f71 	.word	0x00002f71

00002f58 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    2f58:	b580      	push	{r7, lr}
    2f5a:	af00      	add	r7, sp, #0
	return 0;
    2f5c:	2300      	movs	r3, #0
}
    2f5e:	1c18      	adds	r0, r3, #0
    2f60:	46bd      	mov	sp, r7
    2f62:	bd80      	pop	{r7, pc}

00002f64 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	af00      	add	r7, sp, #0
	return false;
    2f68:	2300      	movs	r3, #0
}
    2f6a:	1c18      	adds	r0, r3, #0
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b084      	sub	sp, #16
    2f74:	af00      	add	r7, sp, #0
    2f76:	60f8      	str	r0, [r7, #12]
    2f78:	60b9      	str	r1, [r7, #8]
    2f7a:	607a      	str	r2, [r7, #4]
    2f7c:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    2f7e:	4b36      	ldr	r3, [pc, #216]	; (3058 <udi_hid_setup+0xe8>)
    2f80:	781b      	ldrb	r3, [r3, #0]
    2f82:	b2db      	uxtb	r3, r3
    2f84:	b25b      	sxtb	r3, r3
    2f86:	2b00      	cmp	r3, #0
    2f88:	da32      	bge.n	2ff0 <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2f8a:	4b33      	ldr	r3, [pc, #204]	; (3058 <udi_hid_setup+0xe8>)
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	1c1a      	adds	r2, r3, #0
    2f90:	2360      	movs	r3, #96	; 0x60
    2f92:	4013      	ands	r3, r2
    2f94:	d109      	bne.n	2faa <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2f96:	4b30      	ldr	r3, [pc, #192]	; (3058 <udi_hid_setup+0xe8>)
    2f98:	785b      	ldrb	r3, [r3, #1]
    2f9a:	2b06      	cmp	r3, #6
    2f9c:	d105      	bne.n	2faa <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	1c18      	adds	r0, r3, #0
    2fa2:	4b2e      	ldr	r3, [pc, #184]	; (305c <udi_hid_setup+0xec>)
    2fa4:	4798      	blx	r3
    2fa6:	1c03      	adds	r3, r0, #0
    2fa8:	e052      	b.n	3050 <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2faa:	4b2b      	ldr	r3, [pc, #172]	; (3058 <udi_hid_setup+0xe8>)
    2fac:	781b      	ldrb	r3, [r3, #0]
    2fae:	1c1a      	adds	r2, r3, #0
    2fb0:	2360      	movs	r3, #96	; 0x60
    2fb2:	4013      	ands	r3, r2
    2fb4:	2b20      	cmp	r3, #32
    2fb6:	d11b      	bne.n	2ff0 <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2fb8:	4b27      	ldr	r3, [pc, #156]	; (3058 <udi_hid_setup+0xe8>)
    2fba:	785b      	ldrb	r3, [r3, #1]
    2fbc:	2b02      	cmp	r3, #2
    2fbe:	d007      	beq.n	2fd0 <udi_hid_setup+0x60>
    2fc0:	2b03      	cmp	r3, #3
    2fc2:	d00d      	beq.n	2fe0 <udi_hid_setup+0x70>
    2fc4:	2b01      	cmp	r3, #1
    2fc6:	d113      	bne.n	2ff0 <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    2fc8:	683b      	ldr	r3, [r7, #0]
    2fca:	4798      	blx	r3
    2fcc:	1c03      	adds	r3, r0, #0
    2fce:	e03f      	b.n	3050 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    2fd0:	4b21      	ldr	r3, [pc, #132]	; (3058 <udi_hid_setup+0xe8>)
    2fd2:	68fa      	ldr	r2, [r7, #12]
    2fd4:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2fd6:	4b20      	ldr	r3, [pc, #128]	; (3058 <udi_hid_setup+0xe8>)
    2fd8:	2201      	movs	r2, #1
    2fda:	819a      	strh	r2, [r3, #12]
				return true;
    2fdc:	2301      	movs	r3, #1
    2fde:	e037      	b.n	3050 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    2fe0:	4b1d      	ldr	r3, [pc, #116]	; (3058 <udi_hid_setup+0xe8>)
    2fe2:	68ba      	ldr	r2, [r7, #8]
    2fe4:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2fe6:	4b1c      	ldr	r3, [pc, #112]	; (3058 <udi_hid_setup+0xe8>)
    2fe8:	2201      	movs	r2, #1
    2fea:	819a      	strh	r2, [r3, #12]
				return true;
    2fec:	2301      	movs	r3, #1
    2fee:	e02f      	b.n	3050 <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2ff0:	4b19      	ldr	r3, [pc, #100]	; (3058 <udi_hid_setup+0xe8>)
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	b2db      	uxtb	r3, r3
    2ff6:	b25b      	sxtb	r3, r3
    2ff8:	2b00      	cmp	r3, #0
    2ffa:	db28      	blt.n	304e <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2ffc:	4b16      	ldr	r3, [pc, #88]	; (3058 <udi_hid_setup+0xe8>)
    2ffe:	781b      	ldrb	r3, [r3, #0]
    3000:	1c1a      	adds	r2, r3, #0
    3002:	2360      	movs	r3, #96	; 0x60
    3004:	4013      	ands	r3, r2
    3006:	2b20      	cmp	r3, #32
    3008:	d121      	bne.n	304e <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    300a:	4b13      	ldr	r3, [pc, #76]	; (3058 <udi_hid_setup+0xe8>)
    300c:	785b      	ldrb	r3, [r3, #1]
    300e:	2b0a      	cmp	r3, #10
    3010:	d007      	beq.n	3022 <udi_hid_setup+0xb2>
    3012:	2b0b      	cmp	r3, #11
    3014:	d00e      	beq.n	3034 <udi_hid_setup+0xc4>
    3016:	2b09      	cmp	r3, #9
    3018:	d119      	bne.n	304e <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	4798      	blx	r3
    301e:	1c03      	adds	r3, r0, #0
    3020:	e016      	b.n	3050 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    3022:	4b0d      	ldr	r3, [pc, #52]	; (3058 <udi_hid_setup+0xe8>)
    3024:	885b      	ldrh	r3, [r3, #2]
    3026:	0a1b      	lsrs	r3, r3, #8
    3028:	b29b      	uxth	r3, r3
    302a:	b2da      	uxtb	r2, r3
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	701a      	strb	r2, [r3, #0]
				return true;
    3030:	2301      	movs	r3, #1
    3032:	e00d      	b.n	3050 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    3034:	4b08      	ldr	r3, [pc, #32]	; (3058 <udi_hid_setup+0xe8>)
    3036:	88db      	ldrh	r3, [r3, #6]
    3038:	2b00      	cmp	r3, #0
    303a:	d001      	beq.n	3040 <udi_hid_setup+0xd0>
					return false;
    303c:	2300      	movs	r3, #0
    303e:	e007      	b.n	3050 <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    3040:	4b05      	ldr	r3, [pc, #20]	; (3058 <udi_hid_setup+0xe8>)
    3042:	885b      	ldrh	r3, [r3, #2]
    3044:	b2da      	uxtb	r2, r3
    3046:	68bb      	ldr	r3, [r7, #8]
    3048:	701a      	strb	r2, [r3, #0]
				return true;
    304a:	2301      	movs	r3, #1
    304c:	e000      	b.n	3050 <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    304e:	2300      	movs	r3, #0
}
    3050:	1c18      	adds	r0, r3, #0
    3052:	46bd      	mov	sp, r7
    3054:	b004      	add	sp, #16
    3056:	bd80      	pop	{r7, pc}
    3058:	20006b9c 	.word	0x20006b9c
    305c:	00003061 	.word	0x00003061

00003060 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    3060:	b580      	push	{r7, lr}
    3062:	b084      	sub	sp, #16
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    3068:	4b22      	ldr	r3, [pc, #136]	; (30f4 <udi_hid_reqstdifaceget_descriptor+0x94>)
    306a:	4798      	blx	r3
    306c:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    306e:	3309      	adds	r3, #9
    3070:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    3072:	68fb      	ldr	r3, [r7, #12]
    3074:	785b      	ldrb	r3, [r3, #1]
    3076:	2b21      	cmp	r3, #33	; 0x21
    3078:	d001      	beq.n	307e <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    307a:	2300      	movs	r3, #0
    307c:	e036      	b.n	30ec <udi_hid_reqstdifaceget_descriptor+0x8c>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    307e:	4b1e      	ldr	r3, [pc, #120]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    3080:	885b      	ldrh	r3, [r3, #2]
    3082:	0a1b      	lsrs	r3, r3, #8
    3084:	b29b      	uxth	r3, r3
    3086:	b2db      	uxtb	r3, r3
    3088:	2b21      	cmp	r3, #33	; 0x21
    308a:	d110      	bne.n	30ae <udi_hid_reqstdifaceget_descriptor+0x4e>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    308c:	4b1a      	ldr	r3, [pc, #104]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    308e:	68fa      	ldr	r2, [r7, #12]
    3090:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    3092:	68fb      	ldr	r3, [r7, #12]
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	4a18      	ldr	r2, [pc, #96]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    3098:	88d2      	ldrh	r2, [r2, #6]
    309a:	b298      	uxth	r0, r3
    309c:	b291      	uxth	r1, r2
    309e:	4288      	cmp	r0, r1
    30a0:	d900      	bls.n	30a4 <udi_hid_reqstdifaceget_descriptor+0x44>
    30a2:	1c13      	adds	r3, r2, #0
    30a4:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    30a6:	4b14      	ldr	r3, [pc, #80]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    30a8:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    30aa:	2301      	movs	r3, #1
    30ac:	e01e      	b.n	30ec <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    30ae:	68fb      	ldr	r3, [r7, #12]
    30b0:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    30b2:	4b11      	ldr	r3, [pc, #68]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    30b4:	885b      	ldrh	r3, [r3, #2]
    30b6:	0a1b      	lsrs	r3, r3, #8
    30b8:	b29b      	uxth	r3, r3
    30ba:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    30bc:	429a      	cmp	r2, r3
    30be:	d114      	bne.n	30ea <udi_hid_reqstdifaceget_descriptor+0x8a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    30c0:	4b0d      	ldr	r3, [pc, #52]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    30c2:	687a      	ldr	r2, [r7, #4]
    30c4:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    30c6:	68fb      	ldr	r3, [r7, #12]
    30c8:	79da      	ldrb	r2, [r3, #7]
    30ca:	7a1b      	ldrb	r3, [r3, #8]
    30cc:	021b      	lsls	r3, r3, #8
    30ce:	4313      	orrs	r3, r2
    30d0:	b29b      	uxth	r3, r3
    30d2:	4a09      	ldr	r2, [pc, #36]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    30d4:	88d2      	ldrh	r2, [r2, #6]
    30d6:	b298      	uxth	r0, r3
    30d8:	b291      	uxth	r1, r2
    30da:	4288      	cmp	r0, r1
    30dc:	d900      	bls.n	30e0 <udi_hid_reqstdifaceget_descriptor+0x80>
    30de:	1c13      	adds	r3, r2, #0
    30e0:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    30e2:	4b05      	ldr	r3, [pc, #20]	; (30f8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    30e4:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    30e6:	2301      	movs	r3, #1
    30e8:	e000      	b.n	30ec <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	return false;
    30ea:	2300      	movs	r3, #0
}
    30ec:	1c18      	adds	r0, r3, #0
    30ee:	46bd      	mov	sp, r7
    30f0:	b004      	add	sp, #16
    30f2:	bd80      	pop	{r7, pc}
    30f4:	00003f35 	.word	0x00003f35
    30f8:	20006b9c 	.word	0x20006b9c

000030fc <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
	uint8_t lun;
	udi_msc_b_trans_req = false;
    3102:	4b22      	ldr	r3, [pc, #136]	; (318c <udi_msc_enable+0x90>)
    3104:	2200      	movs	r2, #0
    3106:	701a      	strb	r2, [r3, #0]
	udi_msc_b_cbw_invalid = false;
    3108:	4b21      	ldr	r3, [pc, #132]	; (3190 <udi_msc_enable+0x94>)
    310a:	2200      	movs	r2, #0
    310c:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    310e:	4b21      	ldr	r3, [pc, #132]	; (3194 <udi_msc_enable+0x98>)
    3110:	2201      	movs	r2, #1
    3112:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    3114:	4b20      	ldr	r3, [pc, #128]	; (3198 <udi_msc_enable+0x9c>)
    3116:	2201      	movs	r2, #1
    3118:	701a      	strb	r2, [r3, #0]
	udi_msc_nb_lun = get_nb_lun();
    311a:	4b20      	ldr	r3, [pc, #128]	; (319c <udi_msc_enable+0xa0>)
    311c:	4798      	blx	r3
    311e:	1c03      	adds	r3, r0, #0
    3120:	1c1a      	adds	r2, r3, #0
    3122:	4b1f      	ldr	r3, [pc, #124]	; (31a0 <udi_msc_enable+0xa4>)
    3124:	701a      	strb	r2, [r3, #0]
	if (0 == udi_msc_nb_lun)
    3126:	4b1e      	ldr	r3, [pc, #120]	; (31a0 <udi_msc_enable+0xa4>)
    3128:	781b      	ldrb	r3, [r3, #0]
    312a:	2b00      	cmp	r3, #0
    312c:	d101      	bne.n	3132 <udi_msc_enable+0x36>
		return false; // No lun available, then not authorize to enable interface
    312e:	2300      	movs	r3, #0
    3130:	e027      	b.n	3182 <udi_msc_enable+0x86>
	udi_msc_nb_lun--;
    3132:	4b1b      	ldr	r3, [pc, #108]	; (31a0 <udi_msc_enable+0xa4>)
    3134:	781b      	ldrb	r3, [r3, #0]
    3136:	3b01      	subs	r3, #1
    3138:	b2da      	uxtb	r2, r3
    313a:	4b19      	ldr	r3, [pc, #100]	; (31a0 <udi_msc_enable+0xa4>)
    313c:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
    313e:	4b19      	ldr	r3, [pc, #100]	; (31a4 <udi_msc_enable+0xa8>)
    3140:	4798      	blx	r3
    3142:	1c03      	adds	r3, r0, #0
    3144:	2201      	movs	r2, #1
    3146:	4053      	eors	r3, r2
    3148:	b2db      	uxtb	r3, r3
    314a:	2b00      	cmp	r3, #0
    314c:	d001      	beq.n	3152 <udi_msc_enable+0x56>
		return false;
    314e:	2300      	movs	r3, #0
    3150:	e017      	b.n	3182 <udi_msc_enable+0x86>
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    3152:	1dfb      	adds	r3, r7, #7
    3154:	2200      	movs	r2, #0
    3156:	701a      	strb	r2, [r3, #0]
    3158:	e00a      	b.n	3170 <udi_msc_enable+0x74>
		mem_unload(lun, false);
    315a:	1dfb      	adds	r3, r7, #7
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	1c18      	adds	r0, r3, #0
    3160:	2100      	movs	r1, #0
    3162:	4b11      	ldr	r3, [pc, #68]	; (31a8 <udi_msc_enable+0xac>)
    3164:	4798      	blx	r3
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    3166:	1dfb      	adds	r3, r7, #7
    3168:	781a      	ldrb	r2, [r3, #0]
    316a:	1dfb      	adds	r3, r7, #7
    316c:	3201      	adds	r2, #1
    316e:	701a      	strb	r2, [r3, #0]
    3170:	4b0b      	ldr	r3, [pc, #44]	; (31a0 <udi_msc_enable+0xa4>)
    3172:	781b      	ldrb	r3, [r3, #0]
    3174:	1dfa      	adds	r2, r7, #7
    3176:	7812      	ldrb	r2, [r2, #0]
    3178:	429a      	cmp	r2, r3
    317a:	d9ee      	bls.n	315a <udi_msc_enable+0x5e>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
    317c:	4b0b      	ldr	r3, [pc, #44]	; (31ac <udi_msc_enable+0xb0>)
    317e:	4798      	blx	r3
	return true;
    3180:	2301      	movs	r3, #1
}
    3182:	1c18      	adds	r0, r3, #0
    3184:	46bd      	mov	sp, r7
    3186:	b002      	add	sp, #8
    3188:	bd80      	pop	{r7, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	20003fd1 	.word	0x20003fd1
    3190:	20003fd0 	.word	0x20003fd0
    3194:	20000214 	.word	0x20000214
    3198:	20000215 	.word	0x20000215
    319c:	000016b5 	.word	0x000016b5
    31a0:	20003fb8 	.word	0x20003fb8
    31a4:	0000afd9 	.word	0x0000afd9
    31a8:	00001749 	.word	0x00001749
    31ac:	00003325 	.word	0x00003325

000031b0 <udi_msc_disable>:


void udi_msc_disable(void)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	af00      	add	r7, sp, #0
	udi_msc_b_trans_req = false;
    31b4:	4b06      	ldr	r3, [pc, #24]	; (31d0 <udi_msc_disable+0x20>)
    31b6:	2200      	movs	r2, #0
    31b8:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    31ba:	4b06      	ldr	r3, [pc, #24]	; (31d4 <udi_msc_disable+0x24>)
    31bc:	2201      	movs	r2, #1
    31be:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    31c0:	4b05      	ldr	r3, [pc, #20]	; (31d8 <udi_msc_disable+0x28>)
    31c2:	2201      	movs	r2, #1
    31c4:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
    31c6:	4b05      	ldr	r3, [pc, #20]	; (31dc <udi_msc_disable+0x2c>)
    31c8:	4798      	blx	r3
}
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	20003fd1 	.word	0x20003fd1
    31d4:	20000214 	.word	0x20000214
    31d8:	20000215 	.word	0x20000215
    31dc:	0000aff1 	.word	0x0000aff1

000031e0 <udi_msc_setup>:


bool udi_msc_setup(void)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    31e4:	4b2a      	ldr	r3, [pc, #168]	; (3290 <udi_msc_setup+0xb0>)
    31e6:	781b      	ldrb	r3, [r3, #0]
    31e8:	b2db      	uxtb	r3, r3
    31ea:	b25b      	sxtb	r3, r3
    31ec:	2b00      	cmp	r3, #0
    31ee:	da1e      	bge.n	322e <udi_msc_setup+0x4e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    31f0:	4b27      	ldr	r3, [pc, #156]	; (3290 <udi_msc_setup+0xb0>)
    31f2:	781b      	ldrb	r3, [r3, #0]
    31f4:	1c1a      	adds	r2, r3, #0
    31f6:	2360      	movs	r3, #96	; 0x60
    31f8:	4013      	ands	r3, r2
    31fa:	2b20      	cmp	r3, #32
    31fc:	d117      	bne.n	322e <udi_msc_setup+0x4e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    31fe:	4b24      	ldr	r3, [pc, #144]	; (3290 <udi_msc_setup+0xb0>)
    3200:	785b      	ldrb	r3, [r3, #1]
    3202:	2bfe      	cmp	r3, #254	; 0xfe
    3204:	d113      	bne.n	322e <udi_msc_setup+0x4e>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
    3206:	4b22      	ldr	r3, [pc, #136]	; (3290 <udi_msc_setup+0xb0>)
    3208:	88db      	ldrh	r3, [r3, #6]
    320a:	2b01      	cmp	r3, #1
    320c:	d001      	beq.n	3212 <udi_msc_setup+0x32>
					return false;	// Error for USB host
    320e:	2300      	movs	r3, #0
    3210:	e03b      	b.n	328a <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    3212:	4b1f      	ldr	r3, [pc, #124]	; (3290 <udi_msc_setup+0xb0>)
    3214:	885b      	ldrh	r3, [r3, #2]
    3216:	2b00      	cmp	r3, #0
    3218:	d001      	beq.n	321e <udi_msc_setup+0x3e>
					return false;
    321a:	2300      	movs	r3, #0
    321c:	e035      	b.n	328a <udi_msc_setup+0xaa>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    321e:	4b1c      	ldr	r3, [pc, #112]	; (3290 <udi_msc_setup+0xb0>)
    3220:	4a1c      	ldr	r2, [pc, #112]	; (3294 <udi_msc_setup+0xb4>)
    3222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    3224:	4b1a      	ldr	r3, [pc, #104]	; (3290 <udi_msc_setup+0xb0>)
    3226:	2201      	movs	r2, #1
    3228:	819a      	strh	r2, [r3, #12]
				return true;
    322a:	2301      	movs	r3, #1
    322c:	e02d      	b.n	328a <udi_msc_setup+0xaa>
			}
		}
	}
	if (Udd_setup_is_out()) {
    322e:	4b18      	ldr	r3, [pc, #96]	; (3290 <udi_msc_setup+0xb0>)
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	b2db      	uxtb	r3, r3
    3234:	b25b      	sxtb	r3, r3
    3236:	2b00      	cmp	r3, #0
    3238:	db26      	blt.n	3288 <udi_msc_setup+0xa8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    323a:	4b15      	ldr	r3, [pc, #84]	; (3290 <udi_msc_setup+0xb0>)
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	1c1a      	adds	r2, r3, #0
    3240:	2360      	movs	r3, #96	; 0x60
    3242:	4013      	ands	r3, r2
    3244:	2b20      	cmp	r3, #32
    3246:	d11f      	bne.n	3288 <udi_msc_setup+0xa8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    3248:	4b11      	ldr	r3, [pc, #68]	; (3290 <udi_msc_setup+0xb0>)
    324a:	785b      	ldrb	r3, [r3, #1]
    324c:	2bff      	cmp	r3, #255	; 0xff
    324e:	d11b      	bne.n	3288 <udi_msc_setup+0xa8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
    3250:	4b0f      	ldr	r3, [pc, #60]	; (3290 <udi_msc_setup+0xb0>)
    3252:	88db      	ldrh	r3, [r3, #6]
    3254:	2b00      	cmp	r3, #0
    3256:	d001      	beq.n	325c <udi_msc_setup+0x7c>
					return false;
    3258:	2300      	movs	r3, #0
    325a:	e016      	b.n	328a <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    325c:	4b0c      	ldr	r3, [pc, #48]	; (3290 <udi_msc_setup+0xb0>)
    325e:	885b      	ldrh	r3, [r3, #2]
    3260:	2b00      	cmp	r3, #0
    3262:	d001      	beq.n	3268 <udi_msc_setup+0x88>
					return false;
    3264:	2300      	movs	r3, #0
    3266:	e010      	b.n	328a <udi_msc_setup+0xaa>
				udi_msc_b_cbw_invalid = false;
    3268:	4b0b      	ldr	r3, [pc, #44]	; (3298 <udi_msc_setup+0xb8>)
    326a:	2200      	movs	r2, #0
    326c:	701a      	strb	r2, [r3, #0]
				udi_msc_b_trans_req = false;
    326e:	4b0b      	ldr	r3, [pc, #44]	; (329c <udi_msc_setup+0xbc>)
    3270:	2200      	movs	r2, #0
    3272:	701a      	strb	r2, [r3, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
    3274:	2002      	movs	r0, #2
    3276:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <udi_msc_setup+0xc0>)
    3278:	4798      	blx	r3
				udd_ep_abort(UDI_MSC_EP_IN);
    327a:	2081      	movs	r0, #129	; 0x81
    327c:	4b08      	ldr	r3, [pc, #32]	; (32a0 <udi_msc_setup+0xc0>)
    327e:	4798      	blx	r3
				// Restart by CBW wait
				udi_msc_cbw_wait();
    3280:	4b08      	ldr	r3, [pc, #32]	; (32a4 <udi_msc_setup+0xc4>)
    3282:	4798      	blx	r3
				return true;
    3284:	2301      	movs	r3, #1
    3286:	e000      	b.n	328a <udi_msc_setup+0xaa>
			}
		}
	}
	return false;	// Not supported request
    3288:	2300      	movs	r3, #0
}
    328a:	1c18      	adds	r0, r3, #0
    328c:	46bd      	mov	sp, r7
    328e:	bd80      	pop	{r7, pc}
    3290:	20006b9c 	.word	0x20006b9c
    3294:	20003fb8 	.word	0x20003fb8
    3298:	20003fd0 	.word	0x20003fd0
    329c:	20003fd1 	.word	0x20003fd1
    32a0:	00007c15 	.word	0x00007c15
    32a4:	00003325 	.word	0x00003325

000032a8 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
	return 0;	// MSC don't have multiple alternate setting
    32ac:	2300      	movs	r3, #0
}
    32ae:	1c18      	adds	r0, r3, #0
    32b0:	46bd      	mov	sp, r7
    32b2:	bd80      	pop	{r7, pc}

000032b4 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    32b8:	4b08      	ldr	r3, [pc, #32]	; (32dc <udi_msc_cbw_invalid+0x28>)
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	2201      	movs	r2, #1
    32be:	4053      	eors	r3, r2
    32c0:	b2db      	uxtb	r3, r3
    32c2:	2b00      	cmp	r3, #0
    32c4:	d000      	beq.n	32c8 <udi_msc_cbw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    32c6:	e007      	b.n	32d8 <udi_msc_cbw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    32c8:	2002      	movs	r0, #2
    32ca:	4b05      	ldr	r3, [pc, #20]	; (32e0 <udi_msc_cbw_invalid+0x2c>)
    32cc:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    32ce:	4b05      	ldr	r3, [pc, #20]	; (32e4 <udi_msc_cbw_invalid+0x30>)
    32d0:	2002      	movs	r0, #2
    32d2:	1c19      	adds	r1, r3, #0
    32d4:	4b04      	ldr	r3, [pc, #16]	; (32e8 <udi_msc_cbw_invalid+0x34>)
    32d6:	4798      	blx	r3
}
    32d8:	46bd      	mov	sp, r7
    32da:	bd80      	pop	{r7, pc}
    32dc:	20003fd0 	.word	0x20003fd0
    32e0:	00007f29 	.word	0x00007f29
    32e4:	000032b5 	.word	0x000032b5
    32e8:	00007ff9 	.word	0x00007ff9

000032ec <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
    32ec:	b580      	push	{r7, lr}
    32ee:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <udi_msc_csw_invalid+0x28>)
    32f2:	781b      	ldrb	r3, [r3, #0]
    32f4:	2201      	movs	r2, #1
    32f6:	4053      	eors	r3, r2
    32f8:	b2db      	uxtb	r3, r3
    32fa:	2b00      	cmp	r3, #0
    32fc:	d000      	beq.n	3300 <udi_msc_csw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    32fe:	e007      	b.n	3310 <udi_msc_csw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_IN);
    3300:	2081      	movs	r0, #129	; 0x81
    3302:	4b05      	ldr	r3, [pc, #20]	; (3318 <udi_msc_csw_invalid+0x2c>)
    3304:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    3306:	4b05      	ldr	r3, [pc, #20]	; (331c <udi_msc_csw_invalid+0x30>)
    3308:	2081      	movs	r0, #129	; 0x81
    330a:	1c19      	adds	r1, r3, #0
    330c:	4b04      	ldr	r3, [pc, #16]	; (3320 <udi_msc_csw_invalid+0x34>)
    330e:	4798      	blx	r3
}
    3310:	46bd      	mov	sp, r7
    3312:	bd80      	pop	{r7, pc}
    3314:	20003fd0 	.word	0x20003fd0
    3318:	00007f29 	.word	0x00007f29
    331c:	000032ed 	.word	0x000032ed
    3320:	00007ff9 	.word	0x00007ff9

00003324 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
    3324:	b590      	push	{r4, r7, lr}
    3326:	b083      	sub	sp, #12
    3328:	af02      	add	r7, sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    332a:	4b0b      	ldr	r3, [pc, #44]	; (3358 <udi_msc_cbw_wait+0x34>)
    332c:	4a0b      	ldr	r2, [pc, #44]	; (335c <udi_msc_cbw_wait+0x38>)
    332e:	9200      	str	r2, [sp, #0]
    3330:	2002      	movs	r0, #2
    3332:	2101      	movs	r1, #1
    3334:	1c1a      	adds	r2, r3, #0
    3336:	231f      	movs	r3, #31
    3338:	4c09      	ldr	r4, [pc, #36]	; (3360 <udi_msc_cbw_wait+0x3c>)
    333a:	47a0      	blx	r4
    333c:	1c03      	adds	r3, r0, #0
    333e:	2201      	movs	r2, #1
    3340:	4053      	eors	r3, r2
    3342:	b2db      	uxtb	r3, r3
    3344:	2b00      	cmp	r3, #0
    3346:	d004      	beq.n	3352 <udi_msc_cbw_wait+0x2e>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    3348:	4b06      	ldr	r3, [pc, #24]	; (3364 <udi_msc_cbw_wait+0x40>)
    334a:	2002      	movs	r0, #2
    334c:	1c19      	adds	r1, r3, #0
    334e:	4b06      	ldr	r3, [pc, #24]	; (3368 <udi_msc_cbw_wait+0x44>)
    3350:	4798      	blx	r3
	}
}
    3352:	46bd      	mov	sp, r7
    3354:	b001      	add	sp, #4
    3356:	bd90      	pop	{r4, r7, pc}
    3358:	20003f98 	.word	0x20003f98
    335c:	0000336d 	.word	0x0000336d
    3360:	000080d5 	.word	0x000080d5
    3364:	00003325 	.word	0x00003325
    3368:	00007ff9 	.word	0x00007ff9

0000336c <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
    336c:	b580      	push	{r7, lr}
    336e:	b082      	sub	sp, #8
    3370:	af00      	add	r7, sp, #0
    3372:	6039      	str	r1, [r7, #0]
    3374:	1dfb      	adds	r3, r7, #7
    3376:	1c01      	adds	r1, r0, #0
    3378:	7019      	strb	r1, [r3, #0]
    337a:	1dbb      	adds	r3, r7, #6
    337c:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
    337e:	1dfb      	adds	r3, r7, #7
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	2b00      	cmp	r3, #0
    3384:	d000      	beq.n	3388 <udi_msc_cbw_received+0x1c>
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    3386:	e05a      	b.n	343e <udi_msc_cbw_received+0xd2>
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	2b1f      	cmp	r3, #31
    338c:	d104      	bne.n	3398 <udi_msc_cbw_received+0x2c>
			|| (udi_msc_cbw.dCBWSignature !=
    338e:	4b2d      	ldr	r3, [pc, #180]	; (3444 <udi_msc_cbw_received+0xd8>)
    3390:	681a      	ldr	r2, [r3, #0]
    3392:	4b2d      	ldr	r3, [pc, #180]	; (3448 <udi_msc_cbw_received+0xdc>)
    3394:	429a      	cmp	r2, r3
    3396:	d007      	beq.n	33a8 <udi_msc_cbw_received+0x3c>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
    3398:	4b2c      	ldr	r3, [pc, #176]	; (344c <udi_msc_cbw_received+0xe0>)
    339a:	2201      	movs	r2, #1
    339c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    339e:	4b2c      	ldr	r3, [pc, #176]	; (3450 <udi_msc_cbw_received+0xe4>)
    33a0:	4798      	blx	r3
		udi_msc_csw_invalid();
    33a2:	4b2c      	ldr	r3, [pc, #176]	; (3454 <udi_msc_cbw_received+0xe8>)
    33a4:	4798      	blx	r3
		return;
    33a6:	e04a      	b.n	343e <udi_msc_cbw_received+0xd2>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    33a8:	4b26      	ldr	r3, [pc, #152]	; (3444 <udi_msc_cbw_received+0xd8>)
    33aa:	7b5a      	ldrb	r2, [r3, #13]
    33ac:	230f      	movs	r3, #15
    33ae:	4013      	ands	r3, r2
    33b0:	b2da      	uxtb	r2, r3
    33b2:	4b24      	ldr	r3, [pc, #144]	; (3444 <udi_msc_cbw_received+0xd8>)
    33b4:	735a      	strb	r2, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    33b6:	4b23      	ldr	r3, [pc, #140]	; (3444 <udi_msc_cbw_received+0xd8>)
    33b8:	7b5a      	ldrb	r2, [r3, #13]
    33ba:	4b27      	ldr	r3, [pc, #156]	; (3458 <udi_msc_cbw_received+0xec>)
    33bc:	781b      	ldrb	r3, [r3, #0]
    33be:	429a      	cmp	r2, r3
    33c0:	d904      	bls.n	33cc <udi_msc_cbw_received+0x60>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
    33c2:	4b26      	ldr	r3, [pc, #152]	; (345c <udi_msc_cbw_received+0xf0>)
    33c4:	4798      	blx	r3
		udi_msc_csw_process();
    33c6:	4b26      	ldr	r3, [pc, #152]	; (3460 <udi_msc_cbw_received+0xf4>)
    33c8:	4798      	blx	r3
		return;
    33ca:	e038      	b.n	343e <udi_msc_cbw_received+0xd2>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    33cc:	4b1d      	ldr	r3, [pc, #116]	; (3444 <udi_msc_cbw_received+0xd8>)
    33ce:	689a      	ldr	r2, [r3, #8]
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
    33d0:	4b24      	ldr	r3, [pc, #144]	; (3464 <udi_msc_cbw_received+0xf8>)
    33d2:	609a      	str	r2, [r3, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
    33d4:	4b1b      	ldr	r3, [pc, #108]	; (3444 <udi_msc_cbw_received+0xd8>)
    33d6:	7bdb      	ldrb	r3, [r3, #15]
    33d8:	2b5a      	cmp	r3, #90	; 0x5a
    33da:	d82b      	bhi.n	3434 <udi_msc_cbw_received+0xc8>
    33dc:	009a      	lsls	r2, r3, #2
    33de:	4b22      	ldr	r3, [pc, #136]	; (3468 <udi_msc_cbw_received+0xfc>)
    33e0:	18d3      	adds	r3, r2, r3
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	469f      	mov	pc, r3
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
    33e6:	4b21      	ldr	r3, [pc, #132]	; (346c <udi_msc_cbw_received+0x100>)
    33e8:	4798      	blx	r3
		break;
    33ea:	e028      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
    33ec:	4b20      	ldr	r3, [pc, #128]	; (3470 <udi_msc_cbw_received+0x104>)
    33ee:	4798      	blx	r3
		break;
    33f0:	e025      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
    33f2:	2000      	movs	r0, #0
    33f4:	4b1f      	ldr	r3, [pc, #124]	; (3474 <udi_msc_cbw_received+0x108>)
    33f6:	4798      	blx	r3
		break;
    33f8:	e021      	b.n	343e <udi_msc_cbw_received+0xd2>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
    33fa:	2001      	movs	r0, #1
    33fc:	4b1d      	ldr	r3, [pc, #116]	; (3474 <udi_msc_cbw_received+0x108>)
    33fe:	4798      	blx	r3
		break;
    3400:	e01d      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
    3402:	4b1d      	ldr	r3, [pc, #116]	; (3478 <udi_msc_cbw_received+0x10c>)
    3404:	4798      	blx	r3
		break;
    3406:	e01a      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
    3408:	4b1c      	ldr	r3, [pc, #112]	; (347c <udi_msc_cbw_received+0x110>)
    340a:	4798      	blx	r3
		break;
    340c:	e017      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SBC_START_STOP_UNIT:
		udi_msc_sbc_start_stop();
    340e:	4b1c      	ldr	r3, [pc, #112]	; (3480 <udi_msc_cbw_received+0x114>)
    3410:	4798      	blx	r3
		break;
    3412:	e014      	b.n	343e <udi_msc_cbw_received+0xd2>

		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		udi_msc_spc_prevent_allow_medium_removal();
    3414:	4b1b      	ldr	r3, [pc, #108]	; (3484 <udi_msc_cbw_received+0x118>)
    3416:	4798      	blx	r3
		break;
    3418:	e011      	b.n	343e <udi_msc_cbw_received+0xd2>

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
    341a:	4b1b      	ldr	r3, [pc, #108]	; (3488 <udi_msc_cbw_received+0x11c>)
    341c:	4798      	blx	r3
		udi_msc_csw_process();
    341e:	4b10      	ldr	r3, [pc, #64]	; (3460 <udi_msc_cbw_received+0xf4>)
    3420:	4798      	blx	r3
		break;
    3422:	e00c      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
    3424:	2001      	movs	r0, #1
    3426:	4b19      	ldr	r3, [pc, #100]	; (348c <udi_msc_cbw_received+0x120>)
    3428:	4798      	blx	r3
		break;
    342a:	e008      	b.n	343e <udi_msc_cbw_received+0xd2>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
    342c:	2000      	movs	r0, #0
    342e:	4b17      	ldr	r3, [pc, #92]	; (348c <udi_msc_cbw_received+0x120>)
    3430:	4798      	blx	r3
		break;
    3432:	e004      	b.n	343e <udi_msc_cbw_received+0xd2>

	default:
		udi_msc_sense_command_invalid();
    3434:	4b16      	ldr	r3, [pc, #88]	; (3490 <udi_msc_cbw_received+0x124>)
    3436:	4798      	blx	r3
		udi_msc_csw_process();
    3438:	4b09      	ldr	r3, [pc, #36]	; (3460 <udi_msc_cbw_received+0xf4>)
    343a:	4798      	blx	r3
		break;
    343c:	46c0      	nop			; (mov r8, r8)
	}
}
    343e:	46bd      	mov	sp, r7
    3440:	b002      	add	sp, #8
    3442:	bd80      	pop	{r7, pc}
    3444:	20003f98 	.word	0x20003f98
    3448:	43425355 	.word	0x43425355
    344c:	20003fd0 	.word	0x20003fd0
    3450:	000032b5 	.word	0x000032b5
    3454:	000032ed 	.word	0x000032ed
    3458:	20003fb8 	.word	0x20003fb8
    345c:	00003759 	.word	0x00003759
    3460:	00003579 	.word	0x00003579
    3464:	20000204 	.word	0x20000204
    3468:	0000b8f8 	.word	0x0000b8f8
    346c:	00003791 	.word	0x00003791
    3470:	000037ed 	.word	0x000037ed
    3474:	00003985 	.word	0x00003985
    3478:	0000395d 	.word	0x0000395d
    347c:	00003ba9 	.word	0x00003ba9
    3480:	00003b35 	.word	0x00003b35
    3484:	00003af9 	.word	0x00003af9
    3488:	000036d1 	.word	0x000036d1
    348c:	00003c45 	.word	0x00003c45
    3490:	00003775 	.word	0x00003775

00003494 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
    3494:	b580      	push	{r7, lr}
    3496:	b082      	sub	sp, #8
    3498:	af00      	add	r7, sp, #0
    349a:	6078      	str	r0, [r7, #4]
    349c:	1c0a      	adds	r2, r1, #0
    349e:	1cfb      	adds	r3, r7, #3
    34a0:	701a      	strb	r2, [r3, #0]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    34a2:	4b0d      	ldr	r3, [pc, #52]	; (34d8 <udi_msc_cbw_validate+0x44>)
    34a4:	7b1a      	ldrb	r2, [r3, #12]
    34a6:	1cfb      	adds	r3, r7, #3
    34a8:	781b      	ldrb	r3, [r3, #0]
    34aa:	4053      	eors	r3, r2
    34ac:	b2db      	uxtb	r3, r3
    34ae:	b2db      	uxtb	r3, r3
    34b0:	b25b      	sxtb	r3, r3
    34b2:	2b00      	cmp	r3, #0
    34b4:	db04      	blt.n	34c0 <udi_msc_cbw_validate+0x2c>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    34b6:	4b09      	ldr	r3, [pc, #36]	; (34dc <udi_msc_cbw_validate+0x48>)
    34b8:	689a      	ldr	r2, [r3, #8]
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	429a      	cmp	r2, r3
    34be:	d205      	bcs.n	34cc <udi_msc_cbw_validate+0x38>
		udi_msc_sense_fail_cdb_invalid();
    34c0:	4b07      	ldr	r3, [pc, #28]	; (34e0 <udi_msc_cbw_validate+0x4c>)
    34c2:	4798      	blx	r3
		udi_msc_csw_process();
    34c4:	4b07      	ldr	r3, [pc, #28]	; (34e4 <udi_msc_cbw_validate+0x50>)
    34c6:	4798      	blx	r3
		return false;
    34c8:	2300      	movs	r3, #0
    34ca:	e000      	b.n	34ce <udi_msc_cbw_validate+0x3a>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
    34cc:	2301      	movs	r3, #1
}
    34ce:	1c18      	adds	r0, r3, #0
    34d0:	46bd      	mov	sp, r7
    34d2:	b002      	add	sp, #8
    34d4:	bd80      	pop	{r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	20003f98 	.word	0x20003f98
    34dc:	20000204 	.word	0x20000204
    34e0:	00003759 	.word	0x00003759
    34e4:	00003579 	.word	0x00003579

000034e8 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
    34e8:	b590      	push	{r4, r7, lr}
    34ea:	b085      	sub	sp, #20
    34ec:	af02      	add	r7, sp, #8
    34ee:	6078      	str	r0, [r7, #4]
    34f0:	1c0a      	adds	r2, r1, #0
    34f2:	1cfb      	adds	r3, r7, #3
    34f4:	701a      	strb	r2, [r3, #0]
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    34f6:	1cfb      	adds	r3, r7, #3
    34f8:	781b      	ldrb	r3, [r3, #0]
    34fa:	687a      	ldr	r2, [r7, #4]
    34fc:	4909      	ldr	r1, [pc, #36]	; (3524 <udi_msc_data_send+0x3c>)
    34fe:	9100      	str	r1, [sp, #0]
    3500:	2081      	movs	r0, #129	; 0x81
    3502:	2101      	movs	r1, #1
    3504:	4c08      	ldr	r4, [pc, #32]	; (3528 <udi_msc_data_send+0x40>)
    3506:	47a0      	blx	r4
    3508:	1c03      	adds	r3, r0, #0
    350a:	2201      	movs	r2, #1
    350c:	4053      	eors	r3, r2
    350e:	b2db      	uxtb	r3, r3
    3510:	2b00      	cmp	r3, #0
    3512:	d003      	beq.n	351c <udi_msc_data_send+0x34>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
    3514:	4b05      	ldr	r3, [pc, #20]	; (352c <udi_msc_data_send+0x44>)
    3516:	4798      	blx	r3
		udi_msc_csw_process();
    3518:	4b05      	ldr	r3, [pc, #20]	; (3530 <udi_msc_data_send+0x48>)
    351a:	4798      	blx	r3
	}
}
    351c:	46bd      	mov	sp, r7
    351e:	b003      	add	sp, #12
    3520:	bd90      	pop	{r4, r7, pc}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	00003535 	.word	0x00003535
    3528:	000080d5 	.word	0x000080d5
    352c:	00003725 	.word	0x00003725
    3530:	00003579 	.word	0x00003579

00003534 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    3534:	b580      	push	{r7, lr}
    3536:	b082      	sub	sp, #8
    3538:	af00      	add	r7, sp, #0
    353a:	6039      	str	r1, [r7, #0]
    353c:	1dfb      	adds	r3, r7, #7
    353e:	1c01      	adds	r1, r0, #0
    3540:	7019      	strb	r1, [r3, #0]
    3542:	1dbb      	adds	r3, r7, #6
    3544:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
    3546:	1dfb      	adds	r3, r7, #7
    3548:	781b      	ldrb	r3, [r3, #0]
    354a:	2b00      	cmp	r3, #0
    354c:	d000      	beq.n	3550 <udi_msc_data_sent+0x1c>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    354e:	e009      	b.n	3564 <udi_msc_data_sent+0x30>
	}
	// Update sense data
	udi_msc_sense_pass();
    3550:	4b06      	ldr	r3, [pc, #24]	; (356c <udi_msc_data_sent+0x38>)
    3552:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    3554:	4b06      	ldr	r3, [pc, #24]	; (3570 <udi_msc_data_sent+0x3c>)
    3556:	689a      	ldr	r2, [r3, #8]
    3558:	683b      	ldr	r3, [r7, #0]
    355a:	1ad2      	subs	r2, r2, r3
    355c:	4b04      	ldr	r3, [pc, #16]	; (3570 <udi_msc_data_sent+0x3c>)
    355e:	609a      	str	r2, [r3, #8]
	udi_msc_csw_process();
    3560:	4b04      	ldr	r3, [pc, #16]	; (3574 <udi_msc_data_sent+0x40>)
    3562:	4798      	blx	r3
}
    3564:	46bd      	mov	sp, r7
    3566:	b002      	add	sp, #8
    3568:	bd80      	pop	{r7, pc}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	000036d1 	.word	0x000036d1
    3570:	20000204 	.word	0x20000204
    3574:	00003579 	.word	0x00003579

00003578 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
    3578:	b580      	push	{r7, lr}
    357a:	af00      	add	r7, sp, #0
	if (0 != udi_msc_csw.dCSWDataResidue) {
    357c:	4b0e      	ldr	r3, [pc, #56]	; (35b8 <udi_msc_csw_process+0x40>)
    357e:	689b      	ldr	r3, [r3, #8]
    3580:	2b00      	cmp	r3, #0
    3582:	d00c      	beq.n	359e <udi_msc_csw_process+0x26>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    3584:	4b0d      	ldr	r3, [pc, #52]	; (35bc <udi_msc_csw_process+0x44>)
    3586:	7b1b      	ldrb	r3, [r3, #12]
    3588:	b2db      	uxtb	r3, r3
    358a:	b25b      	sxtb	r3, r3
    358c:	2b00      	cmp	r3, #0
    358e:	da03      	bge.n	3598 <udi_msc_csw_process+0x20>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    3590:	2081      	movs	r0, #129	; 0x81
    3592:	4b0b      	ldr	r3, [pc, #44]	; (35c0 <udi_msc_csw_process+0x48>)
    3594:	4798      	blx	r3
    3596:	e002      	b.n	359e <udi_msc_csw_process+0x26>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    3598:	2002      	movs	r0, #2
    359a:	4b09      	ldr	r3, [pc, #36]	; (35c0 <udi_msc_csw_process+0x48>)
    359c:	4798      	blx	r3
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    359e:	4b07      	ldr	r3, [pc, #28]	; (35bc <udi_msc_csw_process+0x44>)
    35a0:	685a      	ldr	r2, [r3, #4]
    35a2:	4b05      	ldr	r3, [pc, #20]	; (35b8 <udi_msc_csw_process+0x40>)
    35a4:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
    35a6:	4b04      	ldr	r3, [pc, #16]	; (35b8 <udi_msc_csw_process+0x40>)
    35a8:	689a      	ldr	r2, [r3, #8]
    35aa:	4b03      	ldr	r3, [pc, #12]	; (35b8 <udi_msc_csw_process+0x40>)
    35ac:	609a      	str	r2, [r3, #8]
	udi_msc_csw_send();
    35ae:	4b05      	ldr	r3, [pc, #20]	; (35c4 <udi_msc_csw_process+0x4c>)
    35b0:	4798      	blx	r3
}
    35b2:	46bd      	mov	sp, r7
    35b4:	bd80      	pop	{r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	20000204 	.word	0x20000204
    35bc:	20003f98 	.word	0x20003f98
    35c0:	00007f29 	.word	0x00007f29
    35c4:	000035c9 	.word	0x000035c9

000035c8 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
    35c8:	b590      	push	{r4, r7, lr}
    35ca:	b083      	sub	sp, #12
    35cc:	af02      	add	r7, sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    35ce:	4b0b      	ldr	r3, [pc, #44]	; (35fc <udi_msc_csw_send+0x34>)
    35d0:	4a0b      	ldr	r2, [pc, #44]	; (3600 <udi_msc_csw_send+0x38>)
    35d2:	9200      	str	r2, [sp, #0]
    35d4:	2081      	movs	r0, #129	; 0x81
    35d6:	2100      	movs	r1, #0
    35d8:	1c1a      	adds	r2, r3, #0
    35da:	230d      	movs	r3, #13
    35dc:	4c09      	ldr	r4, [pc, #36]	; (3604 <udi_msc_csw_send+0x3c>)
    35de:	47a0      	blx	r4
    35e0:	1c03      	adds	r3, r0, #0
    35e2:	2201      	movs	r2, #1
    35e4:	4053      	eors	r3, r2
    35e6:	b2db      	uxtb	r3, r3
    35e8:	2b00      	cmp	r3, #0
    35ea:	d004      	beq.n	35f6 <udi_msc_csw_send+0x2e>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    35ec:	4b06      	ldr	r3, [pc, #24]	; (3608 <udi_msc_csw_send+0x40>)
    35ee:	2081      	movs	r0, #129	; 0x81
    35f0:	1c19      	adds	r1, r3, #0
    35f2:	4b06      	ldr	r3, [pc, #24]	; (360c <udi_msc_csw_send+0x44>)
    35f4:	4798      	blx	r3
	}
}
    35f6:	46bd      	mov	sp, r7
    35f8:	b001      	add	sp, #4
    35fa:	bd90      	pop	{r4, r7, pc}
    35fc:	20000204 	.word	0x20000204
    3600:	00003611 	.word	0x00003611
    3604:	000080d5 	.word	0x000080d5
    3608:	000035c9 	.word	0x000035c9
    360c:	00007ff9 	.word	0x00007ff9

00003610 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    3610:	b580      	push	{r7, lr}
    3612:	b082      	sub	sp, #8
    3614:	af00      	add	r7, sp, #0
    3616:	6039      	str	r1, [r7, #0]
    3618:	1dfb      	adds	r3, r7, #7
    361a:	1c01      	adds	r1, r0, #0
    361c:	7019      	strb	r1, [r3, #0]
    361e:	1dbb      	adds	r3, r7, #6
    3620:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    3622:	4b02      	ldr	r3, [pc, #8]	; (362c <udi_msc_csw_sent+0x1c>)
    3624:	4798      	blx	r3
}
    3626:	46bd      	mov	sp, r7
    3628:	b002      	add	sp, #8
    362a:	bd80      	pop	{r7, pc}
    362c:	00003325 	.word	0x00003325

00003630 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    3630:	b580      	push	{r7, lr}
    3632:	af00      	add	r7, sp, #0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <udi_msc_clear_sense+0x20>)
    3636:	1c18      	adds	r0, r3, #0
    3638:	2100      	movs	r1, #0
    363a:	2212      	movs	r2, #18
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <udi_msc_clear_sense+0x24>)
    363e:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    3640:	4b03      	ldr	r3, [pc, #12]	; (3650 <udi_msc_clear_sense+0x20>)
    3642:	22f0      	movs	r2, #240	; 0xf0
    3644:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    3646:	4b02      	ldr	r3, [pc, #8]	; (3650 <udi_msc_clear_sense+0x20>)
    3648:	220a      	movs	r2, #10
    364a:	71da      	strb	r2, [r3, #7]
}
    364c:	46bd      	mov	sp, r7
    364e:	bd80      	pop	{r7, pc}
    3650:	20003fbc 	.word	0x20003fbc
    3654:	0000b8ab 	.word	0x0000b8ab

00003658 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    3658:	b580      	push	{r7, lr}
    365a:	b082      	sub	sp, #8
    365c:	af00      	add	r7, sp, #0
    365e:	603a      	str	r2, [r7, #0]
    3660:	1dfb      	adds	r3, r7, #7
    3662:	1c02      	adds	r2, r0, #0
    3664:	701a      	strb	r2, [r3, #0]
    3666:	1d3b      	adds	r3, r7, #4
    3668:	1c0a      	adds	r2, r1, #0
    366a:	801a      	strh	r2, [r3, #0]
	udi_msc_clear_sense();
    366c:	4b15      	ldr	r3, [pc, #84]	; (36c4 <udi_msc_sense_fail+0x6c>)
    366e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    3670:	4b15      	ldr	r3, [pc, #84]	; (36c8 <udi_msc_sense_fail+0x70>)
    3672:	2201      	movs	r2, #1
    3674:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    3676:	4b15      	ldr	r3, [pc, #84]	; (36cc <udi_msc_sense_fail+0x74>)
    3678:	1dfa      	adds	r2, r7, #7
    367a:	7812      	ldrb	r2, [r2, #0]
    367c:	709a      	strb	r2, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    367e:	683b      	ldr	r3, [r7, #0]
    3680:	0e1b      	lsrs	r3, r3, #24
    3682:	b2da      	uxtb	r2, r3
    3684:	4b11      	ldr	r3, [pc, #68]	; (36cc <udi_msc_sense_fail+0x74>)
    3686:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    3688:	683b      	ldr	r3, [r7, #0]
    368a:	0c1b      	lsrs	r3, r3, #16
    368c:	b2da      	uxtb	r2, r3
    368e:	4b0f      	ldr	r3, [pc, #60]	; (36cc <udi_msc_sense_fail+0x74>)
    3690:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    3692:	683b      	ldr	r3, [r7, #0]
    3694:	0a1b      	lsrs	r3, r3, #8
    3696:	b2da      	uxtb	r2, r3
    3698:	4b0c      	ldr	r3, [pc, #48]	; (36cc <udi_msc_sense_fail+0x74>)
    369a:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    369c:	683b      	ldr	r3, [r7, #0]
    369e:	b2da      	uxtb	r2, r3
    36a0:	4b0a      	ldr	r3, [pc, #40]	; (36cc <udi_msc_sense_fail+0x74>)
    36a2:	719a      	strb	r2, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    36a4:	1d3b      	adds	r3, r7, #4
    36a6:	881b      	ldrh	r3, [r3, #0]
    36a8:	0a1b      	lsrs	r3, r3, #8
    36aa:	b29b      	uxth	r3, r3
    36ac:	b2da      	uxtb	r2, r3
    36ae:	4b07      	ldr	r3, [pc, #28]	; (36cc <udi_msc_sense_fail+0x74>)
    36b0:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    36b2:	1d3b      	adds	r3, r7, #4
    36b4:	881b      	ldrh	r3, [r3, #0]
    36b6:	b2da      	uxtb	r2, r3
    36b8:	4b04      	ldr	r3, [pc, #16]	; (36cc <udi_msc_sense_fail+0x74>)
    36ba:	735a      	strb	r2, [r3, #13]
}
    36bc:	46bd      	mov	sp, r7
    36be:	b002      	add	sp, #8
    36c0:	bd80      	pop	{r7, pc}
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	00003631 	.word	0x00003631
    36c8:	20000204 	.word	0x20000204
    36cc:	20003fbc 	.word	0x20003fbc

000036d0 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
    36d0:	b580      	push	{r7, lr}
    36d2:	af00      	add	r7, sp, #0
	udi_msc_clear_sense();
    36d4:	4b03      	ldr	r3, [pc, #12]	; (36e4 <udi_msc_sense_pass+0x14>)
    36d6:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    36d8:	4b03      	ldr	r3, [pc, #12]	; (36e8 <udi_msc_sense_pass+0x18>)
    36da:	2200      	movs	r2, #0
    36dc:	731a      	strb	r2, [r3, #12]
}
    36de:	46bd      	mov	sp, r7
    36e0:	bd80      	pop	{r7, pc}
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	00003631 	.word	0x00003631
    36e8:	20000204 	.word	0x20000204

000036ec <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    36f0:	23e8      	movs	r3, #232	; 0xe8
    36f2:	019b      	lsls	r3, r3, #6
    36f4:	2002      	movs	r0, #2
    36f6:	1c19      	adds	r1, r3, #0
    36f8:	2200      	movs	r2, #0
    36fa:	4b02      	ldr	r3, [pc, #8]	; (3704 <udi_msc_sense_fail_not_present+0x18>)
    36fc:	4798      	blx	r3
}
    36fe:	46bd      	mov	sp, r7
    3700:	bd80      	pop	{r7, pc}
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	00003659 	.word	0x00003659

00003708 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
    3708:	b580      	push	{r7, lr}
    370a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    370c:	23a0      	movs	r3, #160	; 0xa0
    370e:	019b      	lsls	r3, r3, #6
    3710:	2006      	movs	r0, #6
    3712:	1c19      	adds	r1, r3, #0
    3714:	2200      	movs	r2, #0
    3716:	4b02      	ldr	r3, [pc, #8]	; (3720 <udi_msc_sense_fail_busy_or_change+0x18>)
    3718:	4798      	blx	r3
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
    371a:	46bd      	mov	sp, r7
    371c:	bd80      	pop	{r7, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	00003659 	.word	0x00003659

00003724 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
    3724:	b580      	push	{r7, lr}
    3726:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    3728:	2004      	movs	r0, #4
    372a:	2100      	movs	r1, #0
    372c:	2200      	movs	r2, #0
    372e:	4b02      	ldr	r3, [pc, #8]	; (3738 <udi_msc_sense_fail_hardware+0x14>)
    3730:	4798      	blx	r3
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
    3732:	46bd      	mov	sp, r7
    3734:	bd80      	pop	{r7, pc}
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	00003659 	.word	0x00003659

0000373c <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
    373c:	b580      	push	{r7, lr}
    373e:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    3740:	239c      	movs	r3, #156	; 0x9c
    3742:	019b      	lsls	r3, r3, #6
    3744:	2007      	movs	r0, #7
    3746:	1c19      	adds	r1, r3, #0
    3748:	2200      	movs	r2, #0
    374a:	4b02      	ldr	r3, [pc, #8]	; (3754 <udi_msc_sense_fail_protected+0x18>)
    374c:	4798      	blx	r3
}
    374e:	46bd      	mov	sp, r7
    3750:	bd80      	pop	{r7, pc}
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	00003659 	.word	0x00003659

00003758 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
    3758:	b580      	push	{r7, lr}
    375a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    375c:	2390      	movs	r3, #144	; 0x90
    375e:	019b      	lsls	r3, r3, #6
    3760:	2005      	movs	r0, #5
    3762:	1c19      	adds	r1, r3, #0
    3764:	2200      	movs	r2, #0
    3766:	4b02      	ldr	r3, [pc, #8]	; (3770 <udi_msc_sense_fail_cdb_invalid+0x18>)
    3768:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    376a:	46bd      	mov	sp, r7
    376c:	bd80      	pop	{r7, pc}
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	00003659 	.word	0x00003659

00003774 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
    3774:	b580      	push	{r7, lr}
    3776:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    3778:	2380      	movs	r3, #128	; 0x80
    377a:	019b      	lsls	r3, r3, #6
    377c:	2005      	movs	r0, #5
    377e:	1c19      	adds	r1, r3, #0
    3780:	2200      	movs	r2, #0
    3782:	4b02      	ldr	r3, [pc, #8]	; (378c <udi_msc_sense_command_invalid+0x18>)
    3784:	4798      	blx	r3
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
    3786:	46bd      	mov	sp, r7
    3788:	bd80      	pop	{r7, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	00003659 	.word	0x00003659

00003790 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
    3790:	b580      	push	{r7, lr}
    3792:	b082      	sub	sp, #8
    3794:	af00      	add	r7, sp, #0
	uint8_t length = udi_msc_cbw.CDB[4];
    3796:	1dfb      	adds	r3, r7, #7
    3798:	4a10      	ldr	r2, [pc, #64]	; (37dc <udi_msc_spc_requestsense+0x4c>)
    379a:	7cd2      	ldrb	r2, [r2, #19]
    379c:	701a      	strb	r2, [r3, #0]

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
    379e:	1dfb      	adds	r3, r7, #7
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2b12      	cmp	r3, #18
    37a4:	d902      	bls.n	37ac <udi_msc_spc_requestsense+0x1c>
		length = sizeof(udi_msc_sense);
    37a6:	1dfb      	adds	r3, r7, #7
    37a8:	2212      	movs	r2, #18
    37aa:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    37ac:	1dfb      	adds	r3, r7, #7
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	1c18      	adds	r0, r3, #0
    37b2:	2180      	movs	r1, #128	; 0x80
    37b4:	4b0a      	ldr	r3, [pc, #40]	; (37e0 <udi_msc_spc_requestsense+0x50>)
    37b6:	4798      	blx	r3
    37b8:	1c03      	adds	r3, r0, #0
    37ba:	2201      	movs	r2, #1
    37bc:	4053      	eors	r3, r2
    37be:	b2db      	uxtb	r3, r3
    37c0:	2b00      	cmp	r3, #0
    37c2:	d000      	beq.n	37c6 <udi_msc_spc_requestsense+0x36>
		return;
    37c4:	e006      	b.n	37d4 <udi_msc_spc_requestsense+0x44>
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    37c6:	4a07      	ldr	r2, [pc, #28]	; (37e4 <udi_msc_spc_requestsense+0x54>)
    37c8:	1dfb      	adds	r3, r7, #7
    37ca:	781b      	ldrb	r3, [r3, #0]
    37cc:	1c10      	adds	r0, r2, #0
    37ce:	1c19      	adds	r1, r3, #0
    37d0:	4b05      	ldr	r3, [pc, #20]	; (37e8 <udi_msc_spc_requestsense+0x58>)
    37d2:	4798      	blx	r3
}
    37d4:	46bd      	mov	sp, r7
    37d6:	b002      	add	sp, #8
    37d8:	bd80      	pop	{r7, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	20003f98 	.word	0x20003f98
    37e0:	00003495 	.word	0x00003495
    37e4:	20003fbc 	.word	0x20003fbc
    37e8:	000034e9 	.word	0x000034e9

000037ec <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	b082      	sub	sp, #8
    37f0:	af00      	add	r7, sp, #0
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
    37f2:	1dfb      	adds	r3, r7, #7
    37f4:	4a3c      	ldr	r2, [pc, #240]	; (38e8 <udi_msc_spc_inquiry+0xfc>)
    37f6:	7cd2      	ldrb	r2, [r2, #19]
    37f8:	701a      	strb	r2, [r3, #0]

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
    37fa:	1dfb      	adds	r3, r7, #7
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	2b24      	cmp	r3, #36	; 0x24
    3800:	d902      	bls.n	3808 <udi_msc_spc_inquiry+0x1c>
		length = sizeof(udi_msc_inquiry_data);
    3802:	1dfb      	adds	r3, r7, #7
    3804:	2224      	movs	r2, #36	; 0x24
    3806:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    3808:	1dfb      	adds	r3, r7, #7
    380a:	781b      	ldrb	r3, [r3, #0]
    380c:	1c18      	adds	r0, r3, #0
    380e:	2180      	movs	r1, #128	; 0x80
    3810:	4b36      	ldr	r3, [pc, #216]	; (38ec <udi_msc_spc_inquiry+0x100>)
    3812:	4798      	blx	r3
    3814:	1c03      	adds	r3, r0, #0
    3816:	2201      	movs	r2, #1
    3818:	4053      	eors	r3, r2
    381a:	b2db      	uxtb	r3, r3
    381c:	2b00      	cmp	r3, #0
    381e:	d000      	beq.n	3822 <udi_msc_spc_inquiry+0x36>
		return;
    3820:	e05e      	b.n	38e0 <udi_msc_spc_inquiry+0xf4>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    3822:	4b31      	ldr	r3, [pc, #196]	; (38e8 <udi_msc_spc_inquiry+0xfc>)
    3824:	7c1b      	ldrb	r3, [r3, #16]
    3826:	1c1a      	adds	r2, r3, #0
    3828:	2303      	movs	r3, #3
    382a:	4013      	ands	r3, r2
    382c:	d103      	bne.n	3836 <udi_msc_spc_inquiry+0x4a>
			|| (0 != udi_msc_cbw.CDB[2])) {
    382e:	4b2e      	ldr	r3, [pc, #184]	; (38e8 <udi_msc_spc_inquiry+0xfc>)
    3830:	7c5b      	ldrb	r3, [r3, #17]
    3832:	2b00      	cmp	r3, #0
    3834:	d004      	beq.n	3840 <udi_msc_spc_inquiry+0x54>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    3836:	4b2e      	ldr	r3, [pc, #184]	; (38f0 <udi_msc_spc_inquiry+0x104>)
    3838:	4798      	blx	r3
		udi_msc_csw_process();
    383a:	4b2e      	ldr	r3, [pc, #184]	; (38f4 <udi_msc_spc_inquiry+0x108>)
    383c:	4798      	blx	r3
		return;
    383e:	e04f      	b.n	38e0 <udi_msc_spc_inquiry+0xf4>
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    3840:	4b29      	ldr	r3, [pc, #164]	; (38e8 <udi_msc_spc_inquiry+0xfc>)
    3842:	7b5b      	ldrb	r3, [r3, #13]
    3844:	1c18      	adds	r0, r3, #0
    3846:	4b2c      	ldr	r3, [pc, #176]	; (38f8 <udi_msc_spc_inquiry+0x10c>)
    3848:	4798      	blx	r3
    384a:	1c03      	adds	r3, r0, #0
    384c:	2b00      	cmp	r3, #0
    384e:	d001      	beq.n	3854 <udi_msc_spc_inquiry+0x68>
    3850:	2380      	movs	r3, #128	; 0x80
    3852:	e000      	b.n	3856 <udi_msc_spc_inquiry+0x6a>
    3854:	2300      	movs	r3, #0
    3856:	4a29      	ldr	r2, [pc, #164]	; (38fc <udi_msc_spc_inquiry+0x110>)
    3858:	7053      	strb	r3, [r2, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    385a:	4b23      	ldr	r3, [pc, #140]	; (38e8 <udi_msc_spc_inquiry+0xfc>)
    385c:	7b5b      	ldrb	r3, [r3, #13]
    385e:	1c18      	adds	r0, r3, #0
    3860:	4b27      	ldr	r3, [pc, #156]	; (3900 <udi_msc_spc_inquiry+0x114>)
    3862:	4798      	blx	r3
    3864:	1c03      	adds	r3, r0, #0
    3866:	3301      	adds	r3, #1
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
    3868:	4a24      	ldr	r2, [pc, #144]	; (38fc <udi_msc_spc_inquiry+0x110>)
    386a:	1c11      	adds	r1, r2, #0
    386c:	3110      	adds	r1, #16
    386e:	1c1a      	adds	r2, r3, #0
    3870:	2310      	movs	r3, #16
    3872:	1c08      	adds	r0, r1, #0
    3874:	1c11      	adds	r1, r2, #0
    3876:	1c1a      	adds	r2, r3, #0
    3878:	4b22      	ldr	r3, [pc, #136]	; (3904 <udi_msc_spc_inquiry+0x118>)
    387a:	4798      	blx	r3
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
    387c:	1dbb      	adds	r3, r7, #6
    387e:	2200      	movs	r2, #0
    3880:	701a      	strb	r2, [r3, #0]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    3882:	e012      	b.n	38aa <udi_msc_spc_inquiry+0xbe>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    3884:	1dbb      	adds	r3, r7, #6
    3886:	781b      	ldrb	r3, [r3, #0]
    3888:	4a1c      	ldr	r2, [pc, #112]	; (38fc <udi_msc_spc_inquiry+0x110>)
    388a:	18d3      	adds	r3, r2, r3
    388c:	7c1b      	ldrb	r3, [r3, #16]
    388e:	2b00      	cmp	r3, #0
    3890:	d00f      	beq.n	38b2 <udi_msc_spc_inquiry+0xc6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    3892:	1dbb      	adds	r3, r7, #6
    3894:	781b      	ldrb	r3, [r3, #0]
    3896:	4a19      	ldr	r2, [pc, #100]	; (38fc <udi_msc_spc_inquiry+0x110>)
    3898:	18d3      	adds	r3, r2, r3
    389a:	7c1b      	ldrb	r3, [r3, #16]
    389c:	2b22      	cmp	r3, #34	; 0x22
    389e:	d008      	beq.n	38b2 <udi_msc_spc_inquiry+0xc6>
			break;
		}
		i++;
    38a0:	1dbb      	adds	r3, r7, #6
    38a2:	781a      	ldrb	r2, [r3, #0]
    38a4:	1dbb      	adds	r3, r7, #6
    38a6:	3201      	adds	r2, #1
    38a8:	701a      	strb	r2, [r3, #0]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    38aa:	1dbb      	adds	r3, r7, #6
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b10      	cmp	r3, #16
    38b0:	d1e8      	bne.n	3884 <udi_msc_spc_inquiry+0x98>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    38b2:	e00a      	b.n	38ca <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
    38b4:	1dbb      	adds	r3, r7, #6
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	4a10      	ldr	r2, [pc, #64]	; (38fc <udi_msc_spc_inquiry+0x110>)
    38ba:	18d3      	adds	r3, r2, r3
    38bc:	2220      	movs	r2, #32
    38be:	741a      	strb	r2, [r3, #16]
		i++;
    38c0:	1dbb      	adds	r3, r7, #6
    38c2:	781a      	ldrb	r2, [r3, #0]
    38c4:	1dbb      	adds	r3, r7, #6
    38c6:	3201      	adds	r2, #1
    38c8:	701a      	strb	r2, [r3, #0]
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    38ca:	1dbb      	adds	r3, r7, #6
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	2b10      	cmp	r3, #16
    38d0:	d1f0      	bne.n	38b4 <udi_msc_spc_inquiry+0xc8>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    38d2:	4a0a      	ldr	r2, [pc, #40]	; (38fc <udi_msc_spc_inquiry+0x110>)
    38d4:	1dfb      	adds	r3, r7, #7
    38d6:	781b      	ldrb	r3, [r3, #0]
    38d8:	1c10      	adds	r0, r2, #0
    38da:	1c19      	adds	r1, r3, #0
    38dc:	4b0a      	ldr	r3, [pc, #40]	; (3908 <udi_msc_spc_inquiry+0x11c>)
    38de:	4798      	blx	r3
}
    38e0:	46bd      	mov	sp, r7
    38e2:	b002      	add	sp, #8
    38e4:	bd80      	pop	{r7, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	20003f98 	.word	0x20003f98
    38ec:	00003495 	.word	0x00003495
    38f0:	00003759 	.word	0x00003759
    38f4:	00003579 	.word	0x00003579
    38f8:	00001811 	.word	0x00001811
    38fc:	20000218 	.word	0x20000218
    3900:	00001859 	.word	0x00001859
    3904:	0000b899 	.word	0x0000b899
    3908:	000034e9 	.word	0x000034e9

0000390c <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
    390c:	b580      	push	{r7, lr}
    390e:	af00      	add	r7, sp, #0
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    3910:	4b0d      	ldr	r3, [pc, #52]	; (3948 <udi_msc_spc_testunitready_global+0x3c>)
    3912:	7b5b      	ldrb	r3, [r3, #13]
    3914:	1c18      	adds	r0, r3, #0
    3916:	4b0d      	ldr	r3, [pc, #52]	; (394c <udi_msc_spc_testunitready_global+0x40>)
    3918:	4798      	blx	r3
    391a:	1c03      	adds	r3, r0, #0
    391c:	2b02      	cmp	r3, #2
    391e:	d008      	beq.n	3932 <udi_msc_spc_testunitready_global+0x26>
    3920:	2b03      	cmp	r3, #3
    3922:	d003      	beq.n	392c <udi_msc_spc_testunitready_global+0x20>
    3924:	2b00      	cmp	r3, #0
    3926:	d107      	bne.n	3938 <udi_msc_spc_testunitready_global+0x2c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
    3928:	2301      	movs	r3, #1
    392a:	e009      	b.n	3940 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    392c:	4b08      	ldr	r3, [pc, #32]	; (3950 <udi_msc_spc_testunitready_global+0x44>)
    392e:	4798      	blx	r3
		break;
    3930:	e005      	b.n	393e <udi_msc_spc_testunitready_global+0x32>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    3932:	4b08      	ldr	r3, [pc, #32]	; (3954 <udi_msc_spc_testunitready_global+0x48>)
    3934:	4798      	blx	r3
		break;
    3936:	e002      	b.n	393e <udi_msc_spc_testunitready_global+0x32>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
    3938:	4b07      	ldr	r3, [pc, #28]	; (3958 <udi_msc_spc_testunitready_global+0x4c>)
    393a:	4798      	blx	r3
		break;
    393c:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    393e:	2300      	movs	r3, #0
}
    3940:	1c18      	adds	r0, r3, #0
    3942:	46bd      	mov	sp, r7
    3944:	bd80      	pop	{r7, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	20003f98 	.word	0x20003f98
    394c:	000016c1 	.word	0x000016c1
    3950:	00003709 	.word	0x00003709
    3954:	000036ed 	.word	0x000036ed
    3958:	00003725 	.word	0x00003725

0000395c <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
    395c:	b580      	push	{r7, lr}
    395e:	af00      	add	r7, sp, #0
	if (udi_msc_spc_testunitready_global()) {
    3960:	4b05      	ldr	r3, [pc, #20]	; (3978 <udi_msc_spc_testunitready+0x1c>)
    3962:	4798      	blx	r3
    3964:	1c03      	adds	r3, r0, #0
    3966:	2b00      	cmp	r3, #0
    3968:	d001      	beq.n	396e <udi_msc_spc_testunitready+0x12>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
    396a:	4b04      	ldr	r3, [pc, #16]	; (397c <udi_msc_spc_testunitready+0x20>)
    396c:	4798      	blx	r3
	}
	// Send status in CSW packet
	udi_msc_csw_process();
    396e:	4b04      	ldr	r3, [pc, #16]	; (3980 <udi_msc_spc_testunitready+0x24>)
    3970:	4798      	blx	r3
}
    3972:	46bd      	mov	sp, r7
    3974:	bd80      	pop	{r7, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	0000390d 	.word	0x0000390d
    397c:	000036d1 	.word	0x000036d1
    3980:	00003579 	.word	0x00003579

00003984 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    3984:	b580      	push	{r7, lr}
    3986:	b086      	sub	sp, #24
    3988:	af00      	add	r7, sp, #0
    398a:	1c02      	adds	r2, r0, #0
    398c:	1dfb      	adds	r3, r7, #7
    398e:	701a      	strb	r2, [r3, #0]
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    3990:	4b51      	ldr	r3, [pc, #324]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3992:	1c18      	adds	r0, r3, #0
    3994:	2100      	movs	r1, #0
    3996:	2214      	movs	r2, #20
    3998:	4b50      	ldr	r3, [pc, #320]	; (3adc <udi_msc_spc_mode_sense+0x158>)
    399a:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    399c:	1dfb      	adds	r3, r7, #7
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	2b00      	cmp	r3, #0
    39a2:	d00b      	beq.n	39bc <udi_msc_spc_mode_sense+0x38>
		request_lgt = udi_msc_cbw.CDB[8];
    39a4:	1c3b      	adds	r3, r7, #0
    39a6:	3316      	adds	r3, #22
    39a8:	4a4d      	ldr	r2, [pc, #308]	; (3ae0 <udi_msc_spc_mode_sense+0x15c>)
    39aa:	7dd2      	ldrb	r2, [r2, #23]
    39ac:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s10.sense_data;
    39ae:	4b4d      	ldr	r3, [pc, #308]	; (3ae4 <udi_msc_spc_mode_sense+0x160>)
    39b0:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    39b2:	1c3b      	adds	r3, r7, #0
    39b4:	3317      	adds	r3, #23
    39b6:	2208      	movs	r2, #8
    39b8:	701a      	strb	r2, [r3, #0]
    39ba:	e00a      	b.n	39d2 <udi_msc_spc_mode_sense+0x4e>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
    39bc:	1c3b      	adds	r3, r7, #0
    39be:	3316      	adds	r3, #22
    39c0:	4a47      	ldr	r2, [pc, #284]	; (3ae0 <udi_msc_spc_mode_sense+0x15c>)
    39c2:	7cd2      	ldrb	r2, [r2, #19]
    39c4:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s6.sense_data;
    39c6:	4b48      	ldr	r3, [pc, #288]	; (3ae8 <udi_msc_spc_mode_sense+0x164>)
    39c8:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    39ca:	1c3b      	adds	r3, r7, #0
    39cc:	3317      	adds	r3, #23
    39ce:	2204      	movs	r2, #4
    39d0:	701a      	strb	r2, [r3, #0]
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    39d2:	4b43      	ldr	r3, [pc, #268]	; (3ae0 <udi_msc_spc_mode_sense+0x15c>)
    39d4:	7c59      	ldrb	r1, [r3, #17]
    39d6:	1c3b      	adds	r3, r7, #0
    39d8:	330f      	adds	r3, #15
    39da:	223f      	movs	r2, #63	; 0x3f
    39dc:	400a      	ands	r2, r1
    39de:	701a      	strb	r2, [r3, #0]
	if ((SCSI_MS_MODE_INFEXP == mode)
    39e0:	1c3b      	adds	r3, r7, #0
    39e2:	330f      	adds	r3, #15
    39e4:	781b      	ldrb	r3, [r3, #0]
    39e6:	2b1c      	cmp	r3, #28
    39e8:	d004      	beq.n	39f4 <udi_msc_spc_mode_sense+0x70>
			|| (SCSI_MS_MODE_ALL == mode)) {
    39ea:	1c3b      	adds	r3, r7, #0
    39ec:	330f      	adds	r3, #15
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	2b3f      	cmp	r3, #63	; 0x3f
    39f2:	d10f      	bne.n	3a14 <udi_msc_spc_mode_sense+0x90>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
    39f4:	693b      	ldr	r3, [r7, #16]
    39f6:	221c      	movs	r2, #28
    39f8:	701a      	strb	r2, [r3, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
    39fa:	693b      	ldr	r3, [r7, #16]
    39fc:	220a      	movs	r2, #10
    39fe:	705a      	strb	r2, [r3, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
    3a00:	693b      	ldr	r3, [r7, #16]
    3a02:	2205      	movs	r2, #5
    3a04:	70da      	strb	r2, [r3, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    3a06:	1c3b      	adds	r3, r7, #0
    3a08:	3317      	adds	r3, #23
    3a0a:	1c3a      	adds	r2, r7, #0
    3a0c:	3217      	adds	r2, #23
    3a0e:	7812      	ldrb	r2, [r2, #0]
    3a10:	320c      	adds	r2, #12
    3a12:	701a      	strb	r2, [r3, #0]
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
    3a14:	1c3a      	adds	r2, r7, #0
    3a16:	3216      	adds	r2, #22
    3a18:	1c3b      	adds	r3, r7, #0
    3a1a:	3317      	adds	r3, #23
    3a1c:	7812      	ldrb	r2, [r2, #0]
    3a1e:	781b      	ldrb	r3, [r3, #0]
    3a20:	429a      	cmp	r2, r3
    3a22:	d905      	bls.n	3a30 <udi_msc_spc_mode_sense+0xac>
		request_lgt = data_sense_lgt;
    3a24:	1c3b      	adds	r3, r7, #0
    3a26:	3316      	adds	r3, #22
    3a28:	1c3a      	adds	r2, r7, #0
    3a2a:	3217      	adds	r2, #23
    3a2c:	7812      	ldrb	r2, [r2, #0]
    3a2e:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    3a30:	1c3b      	adds	r3, r7, #0
    3a32:	3316      	adds	r3, #22
    3a34:	781b      	ldrb	r3, [r3, #0]
    3a36:	1c18      	adds	r0, r3, #0
    3a38:	2180      	movs	r1, #128	; 0x80
    3a3a:	4b2c      	ldr	r3, [pc, #176]	; (3aec <udi_msc_spc_mode_sense+0x168>)
    3a3c:	4798      	blx	r3
    3a3e:	1c03      	adds	r3, r0, #0
    3a40:	2201      	movs	r2, #1
    3a42:	4053      	eors	r3, r2
    3a44:	b2db      	uxtb	r3, r3
    3a46:	2b00      	cmp	r3, #0
    3a48:	d000      	beq.n	3a4c <udi_msc_spc_mode_sense+0xc8>
		return;
    3a4a:	e041      	b.n	3ad0 <udi_msc_spc_mode_sense+0x14c>

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    3a4c:	4b24      	ldr	r3, [pc, #144]	; (3ae0 <udi_msc_spc_mode_sense+0x15c>)
    3a4e:	7b5b      	ldrb	r3, [r3, #13]
    3a50:	1c18      	adds	r0, r3, #0
    3a52:	4b27      	ldr	r3, [pc, #156]	; (3af0 <udi_msc_spc_mode_sense+0x16c>)
    3a54:	4798      	blx	r3
    3a56:	1c03      	adds	r3, r0, #0
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d001      	beq.n	3a60 <udi_msc_spc_mode_sense+0xdc>
    3a5c:	2380      	movs	r3, #128	; 0x80
    3a5e:	e000      	b.n	3a62 <udi_msc_spc_mode_sense+0xde>
    3a60:	2300      	movs	r3, #0
    3a62:	1c3a      	adds	r2, r7, #0
    3a64:	320e      	adds	r2, #14
    3a66:	7013      	strb	r3, [r2, #0]

	if (b_sense10) {
    3a68:	1dfb      	adds	r3, r7, #7
    3a6a:	781b      	ldrb	r3, [r3, #0]
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d01b      	beq.n	3aa8 <udi_msc_spc_mode_sense+0x124>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
    3a70:	1c3b      	adds	r3, r7, #0
    3a72:	3317      	adds	r3, #23
    3a74:	781b      	ldrb	r3, [r3, #0]
    3a76:	b29b      	uxth	r3, r3
    3a78:	3b02      	subs	r3, #2
    3a7a:	b29b      	uxth	r3, r3
    3a7c:	0a1b      	lsrs	r3, r3, #8
    3a7e:	b29b      	uxth	r3, r3
    3a80:	b29a      	uxth	r2, r3
    3a82:	1c3b      	adds	r3, r7, #0
    3a84:	3317      	adds	r3, #23
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	b29b      	uxth	r3, r3
    3a8a:	3b02      	subs	r3, #2
    3a8c:	b29b      	uxth	r3, r3
    3a8e:	021b      	lsls	r3, r3, #8
    3a90:	b29b      	uxth	r3, r3
    3a92:	4313      	orrs	r3, r2
    3a94:	b29b      	uxth	r3, r3
    3a96:	b29a      	uxth	r2, r3

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
    3a98:	4b0f      	ldr	r3, [pc, #60]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3a9a:	801a      	strh	r2, [r3, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
    3a9c:	4b0e      	ldr	r3, [pc, #56]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3a9e:	1c3a      	adds	r2, r7, #0
    3aa0:	320e      	adds	r2, #14
    3aa2:	7812      	ldrb	r2, [r2, #0]
    3aa4:	70da      	strb	r2, [r3, #3]
    3aa6:	e00b      	b.n	3ac0 <udi_msc_spc_mode_sense+0x13c>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    3aa8:	1c3b      	adds	r3, r7, #0
    3aaa:	3317      	adds	r3, #23
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	3b01      	subs	r3, #1
    3ab0:	b2da      	uxtb	r2, r3
    3ab2:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3ab4:	701a      	strb	r2, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
    3ab6:	4b08      	ldr	r3, [pc, #32]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3ab8:	1c3a      	adds	r2, r7, #0
    3aba:	320e      	adds	r2, #14
    3abc:	7812      	ldrb	r2, [r2, #0]
    3abe:	709a      	strb	r2, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    3ac0:	4a05      	ldr	r2, [pc, #20]	; (3ad8 <udi_msc_spc_mode_sense+0x154>)
    3ac2:	1c3b      	adds	r3, r7, #0
    3ac4:	3316      	adds	r3, #22
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	1c10      	adds	r0, r2, #0
    3aca:	1c19      	adds	r1, r3, #0
    3acc:	4b09      	ldr	r3, [pc, #36]	; (3af4 <udi_msc_spc_mode_sense+0x170>)
    3ace:	4798      	blx	r3
}
    3ad0:	46bd      	mov	sp, r7
    3ad2:	b006      	add	sp, #24
    3ad4:	bd80      	pop	{r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	20003fdc 	.word	0x20003fdc
    3adc:	0000b8ab 	.word	0x0000b8ab
    3ae0:	20003f98 	.word	0x20003f98
    3ae4:	20003fe4 	.word	0x20003fe4
    3ae8:	20003fe0 	.word	0x20003fe0
    3aec:	00003495 	.word	0x00003495
    3af0:	000017c9 	.word	0x000017c9
    3af4:	000034e9 	.word	0x000034e9

00003af8 <udi_msc_spc_prevent_allow_medium_removal>:


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
    3af8:	b580      	push	{r7, lr}
    3afa:	b082      	sub	sp, #8
    3afc:	af00      	add	r7, sp, #0
	uint8_t prevent = udi_msc_cbw.CDB[4];
    3afe:	1dfb      	adds	r3, r7, #7
    3b00:	4a08      	ldr	r2, [pc, #32]	; (3b24 <udi_msc_spc_prevent_allow_medium_removal+0x2c>)
    3b02:	7cd2      	ldrb	r2, [r2, #19]
    3b04:	701a      	strb	r2, [r3, #0]
	if (0 == prevent) {
    3b06:	1dfb      	adds	r3, r7, #7
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d102      	bne.n	3b14 <udi_msc_spc_prevent_allow_medium_removal+0x1c>
		udi_msc_sense_pass();
    3b0e:	4b06      	ldr	r3, [pc, #24]	; (3b28 <udi_msc_spc_prevent_allow_medium_removal+0x30>)
    3b10:	4798      	blx	r3
    3b12:	e001      	b.n	3b18 <udi_msc_spc_prevent_allow_medium_removal+0x20>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    3b14:	4b05      	ldr	r3, [pc, #20]	; (3b2c <udi_msc_spc_prevent_allow_medium_removal+0x34>)
    3b16:	4798      	blx	r3
	}
	udi_msc_csw_process();
    3b18:	4b05      	ldr	r3, [pc, #20]	; (3b30 <udi_msc_spc_prevent_allow_medium_removal+0x38>)
    3b1a:	4798      	blx	r3
}
    3b1c:	46bd      	mov	sp, r7
    3b1e:	b002      	add	sp, #8
    3b20:	bd80      	pop	{r7, pc}
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	20003f98 	.word	0x20003f98
    3b28:	000036d1 	.word	0x000036d1
    3b2c:	00003759 	.word	0x00003759
    3b30:	00003579 	.word	0x00003579

00003b34 <udi_msc_sbc_start_stop>:


static void udi_msc_sbc_start_stop(void)
{
    3b34:	b580      	push	{r7, lr}
    3b36:	b082      	sub	sp, #8
    3b38:	af00      	add	r7, sp, #0
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    3b3a:	4b17      	ldr	r3, [pc, #92]	; (3b98 <udi_msc_sbc_start_stop+0x64>)
    3b3c:	7cdb      	ldrb	r3, [r3, #19]
    3b3e:	1c1a      	adds	r2, r3, #0
    3b40:	2301      	movs	r3, #1
    3b42:	401a      	ands	r2, r3
    3b44:	1dfb      	adds	r3, r7, #7
    3b46:	1e51      	subs	r1, r2, #1
    3b48:	418a      	sbcs	r2, r1
    3b4a:	701a      	strb	r2, [r3, #0]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
    3b4c:	4b12      	ldr	r3, [pc, #72]	; (3b98 <udi_msc_sbc_start_stop+0x64>)
    3b4e:	7cdb      	ldrb	r3, [r3, #19]
    3b50:	1c1a      	adds	r2, r3, #0
    3b52:	2302      	movs	r3, #2
    3b54:	401a      	ands	r2, r3
    3b56:	1dbb      	adds	r3, r7, #6
    3b58:	1e51      	subs	r1, r2, #1
    3b5a:	418a      	sbcs	r2, r1
    3b5c:	701a      	strb	r2, [r3, #0]
	if (loej) {
    3b5e:	1dbb      	adds	r3, r7, #6
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d011      	beq.n	3b8a <udi_msc_sbc_start_stop+0x56>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    3b66:	4b0c      	ldr	r3, [pc, #48]	; (3b98 <udi_msc_sbc_start_stop+0x64>)
    3b68:	7b5a      	ldrb	r2, [r3, #13]
    3b6a:	1dfb      	adds	r3, r7, #7
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	1e59      	subs	r1, r3, #1
    3b70:	418b      	sbcs	r3, r1
    3b72:	b2db      	uxtb	r3, r3
    3b74:	2101      	movs	r1, #1
    3b76:	404b      	eors	r3, r1
    3b78:	b2db      	uxtb	r3, r3
    3b7a:	1c19      	adds	r1, r3, #0
    3b7c:	2301      	movs	r3, #1
    3b7e:	400b      	ands	r3, r1
    3b80:	b2db      	uxtb	r3, r3
    3b82:	1c10      	adds	r0, r2, #0
    3b84:	1c19      	adds	r1, r3, #0
    3b86:	4b05      	ldr	r3, [pc, #20]	; (3b9c <udi_msc_sbc_start_stop+0x68>)
    3b88:	4798      	blx	r3
	}
	udi_msc_sense_pass();
    3b8a:	4b05      	ldr	r3, [pc, #20]	; (3ba0 <udi_msc_sbc_start_stop+0x6c>)
    3b8c:	4798      	blx	r3
	udi_msc_csw_process();
    3b8e:	4b05      	ldr	r3, [pc, #20]	; (3ba4 <udi_msc_sbc_start_stop+0x70>)
    3b90:	4798      	blx	r3
}
    3b92:	46bd      	mov	sp, r7
    3b94:	b002      	add	sp, #8
    3b96:	bd80      	pop	{r7, pc}
    3b98:	20003f98 	.word	0x20003f98
    3b9c:	00001749 	.word	0x00001749
    3ba0:	000036d1 	.word	0x000036d1
    3ba4:	00003579 	.word	0x00003579

00003ba8 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	af00      	add	r7, sp, #0
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    3bac:	2008      	movs	r0, #8
    3bae:	2180      	movs	r1, #128	; 0x80
    3bb0:	4b1b      	ldr	r3, [pc, #108]	; (3c20 <udi_msc_sbc_read_capacity+0x78>)
    3bb2:	4798      	blx	r3
    3bb4:	1c03      	adds	r3, r0, #0
    3bb6:	2201      	movs	r2, #1
    3bb8:	4053      	eors	r3, r2
    3bba:	b2db      	uxtb	r3, r3
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d000      	beq.n	3bc2 <udi_msc_sbc_read_capacity+0x1a>
					USB_CBW_DIRECTION_IN))
		return;
    3bc0:	e02c      	b.n	3c1c <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    3bc2:	4b18      	ldr	r3, [pc, #96]	; (3c24 <udi_msc_sbc_read_capacity+0x7c>)
    3bc4:	7b5a      	ldrb	r2, [r3, #13]
    3bc6:	4b18      	ldr	r3, [pc, #96]	; (3c28 <udi_msc_sbc_read_capacity+0x80>)
    3bc8:	1c10      	adds	r0, r2, #0
    3bca:	1c19      	adds	r1, r3, #0
    3bcc:	4b17      	ldr	r3, [pc, #92]	; (3c2c <udi_msc_sbc_read_capacity+0x84>)
    3bce:	4798      	blx	r3
    3bd0:	1c03      	adds	r3, r0, #0
    3bd2:	2b02      	cmp	r3, #2
    3bd4:	d009      	beq.n	3bea <udi_msc_sbc_read_capacity+0x42>
    3bd6:	2b03      	cmp	r3, #3
    3bd8:	d002      	beq.n	3be0 <udi_msc_sbc_read_capacity+0x38>
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d00f      	beq.n	3bfe <udi_msc_sbc_read_capacity+0x56>
    3bde:	e009      	b.n	3bf4 <udi_msc_sbc_read_capacity+0x4c>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3be0:	4b13      	ldr	r3, [pc, #76]	; (3c30 <udi_msc_sbc_read_capacity+0x88>)
    3be2:	4798      	blx	r3
		udi_msc_csw_process();
    3be4:	4b13      	ldr	r3, [pc, #76]	; (3c34 <udi_msc_sbc_read_capacity+0x8c>)
    3be6:	4798      	blx	r3
		return;
    3be8:	e018      	b.n	3c1c <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    3bea:	4b13      	ldr	r3, [pc, #76]	; (3c38 <udi_msc_sbc_read_capacity+0x90>)
    3bec:	4798      	blx	r3
		udi_msc_csw_process();
    3bee:	4b11      	ldr	r3, [pc, #68]	; (3c34 <udi_msc_sbc_read_capacity+0x8c>)
    3bf0:	4798      	blx	r3
		return;
    3bf2:	e013      	b.n	3c1c <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
    3bf4:	4b11      	ldr	r3, [pc, #68]	; (3c3c <udi_msc_sbc_read_capacity+0x94>)
    3bf6:	4798      	blx	r3
		udi_msc_csw_process();
    3bf8:	4b0e      	ldr	r3, [pc, #56]	; (3c34 <udi_msc_sbc_read_capacity+0x8c>)
    3bfa:	4798      	blx	r3
		return;
    3bfc:	e00e      	b.n	3c1c <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
    3bfe:	46c0      	nop			; (mov r8, r8)
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <udi_msc_sbc_read_capacity+0x80>)
    3c02:	2280      	movs	r2, #128	; 0x80
    3c04:	0292      	lsls	r2, r2, #10
    3c06:	605a      	str	r2, [r3, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    3c08:	4b07      	ldr	r3, [pc, #28]	; (3c28 <udi_msc_sbc_read_capacity+0x80>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	ba1a      	rev	r2, r3
    3c0e:	4b06      	ldr	r3, [pc, #24]	; (3c28 <udi_msc_sbc_read_capacity+0x80>)
    3c10:	601a      	str	r2, [r3, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    3c12:	4b05      	ldr	r3, [pc, #20]	; (3c28 <udi_msc_sbc_read_capacity+0x80>)
    3c14:	1c18      	adds	r0, r3, #0
    3c16:	2108      	movs	r1, #8
    3c18:	4b09      	ldr	r3, [pc, #36]	; (3c40 <udi_msc_sbc_read_capacity+0x98>)
    3c1a:	4798      	blx	r3
			sizeof(udi_msc_capacity));
}
    3c1c:	46bd      	mov	sp, r7
    3c1e:	bd80      	pop	{r7, pc}
    3c20:	00003495 	.word	0x00003495
    3c24:	20003f98 	.word	0x20003f98
    3c28:	20003ff0 	.word	0x20003ff0
    3c2c:	00001701 	.word	0x00001701
    3c30:	00003709 	.word	0x00003709
    3c34:	00003579 	.word	0x00003579
    3c38:	000036ed 	.word	0x000036ed
    3c3c:	00003725 	.word	0x00003725
    3c40:	000034e9 	.word	0x000034e9

00003c44 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b084      	sub	sp, #16
    3c48:	af00      	add	r7, sp, #0
    3c4a:	1c02      	adds	r2, r0, #0
    3c4c:	1dfb      	adds	r3, r7, #7
    3c4e:	701a      	strb	r2, [r3, #0]
	uint32_t trans_size;

	if (!b_read) {
    3c50:	1dfb      	adds	r3, r7, #7
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	2201      	movs	r2, #1
    3c56:	4053      	eors	r3, r2
    3c58:	b2db      	uxtb	r3, r3
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d00c      	beq.n	3c78 <udi_msc_sbc_trans+0x34>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    3c5e:	4b23      	ldr	r3, [pc, #140]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c60:	7b5b      	ldrb	r3, [r3, #13]
    3c62:	1c18      	adds	r0, r3, #0
    3c64:	4b22      	ldr	r3, [pc, #136]	; (3cf0 <udi_msc_sbc_trans+0xac>)
    3c66:	4798      	blx	r3
    3c68:	1c03      	adds	r3, r0, #0
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d004      	beq.n	3c78 <udi_msc_sbc_trans+0x34>
			// Write not authorized
			udi_msc_sense_fail_protected();
    3c6e:	4b21      	ldr	r3, [pc, #132]	; (3cf4 <udi_msc_sbc_trans+0xb0>)
    3c70:	4798      	blx	r3
			udi_msc_csw_process();
    3c72:	4b21      	ldr	r3, [pc, #132]	; (3cf8 <udi_msc_sbc_trans+0xb4>)
    3c74:	4798      	blx	r3
			return;
    3c76:	e035      	b.n	3ce4 <udi_msc_sbc_trans+0xa0>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    3c78:	4b20      	ldr	r3, [pc, #128]	; (3cfc <udi_msc_sbc_trans+0xb8>)
    3c7a:	4a1c      	ldr	r2, [pc, #112]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c7c:	7c52      	ldrb	r2, [r2, #17]
    3c7e:	701a      	strb	r2, [r3, #0]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    3c80:	4b1f      	ldr	r3, [pc, #124]	; (3d00 <udi_msc_sbc_trans+0xbc>)
    3c82:	4a1a      	ldr	r2, [pc, #104]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c84:	7c92      	ldrb	r2, [r2, #18]
    3c86:	701a      	strb	r2, [r3, #0]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    3c88:	4b1e      	ldr	r3, [pc, #120]	; (3d04 <udi_msc_sbc_trans+0xc0>)
    3c8a:	4a18      	ldr	r2, [pc, #96]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c8c:	7cd2      	ldrb	r2, [r2, #19]
    3c8e:	701a      	strb	r2, [r3, #0]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    3c90:	4b1d      	ldr	r3, [pc, #116]	; (3d08 <udi_msc_sbc_trans+0xc4>)
    3c92:	4a16      	ldr	r2, [pc, #88]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c94:	7d12      	ldrb	r2, [r2, #20]
    3c96:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    3c98:	4b1c      	ldr	r3, [pc, #112]	; (3d0c <udi_msc_sbc_trans+0xc8>)
    3c9a:	4a14      	ldr	r2, [pc, #80]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3c9c:	7d92      	ldrb	r2, [r2, #22]
    3c9e:	701a      	strb	r2, [r3, #0]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    3ca0:	4b1b      	ldr	r3, [pc, #108]	; (3d10 <udi_msc_sbc_trans+0xcc>)
    3ca2:	4a12      	ldr	r2, [pc, #72]	; (3cec <udi_msc_sbc_trans+0xa8>)
    3ca4:	7dd2      	ldrb	r2, [r2, #23]
    3ca6:	701a      	strb	r2, [r3, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    3ca8:	4b19      	ldr	r3, [pc, #100]	; (3d10 <udi_msc_sbc_trans+0xcc>)
    3caa:	881b      	ldrh	r3, [r3, #0]
    3cac:	025b      	lsls	r3, r3, #9
    3cae:	60fb      	str	r3, [r7, #12]
	if (!udi_msc_cbw_validate(trans_size,
    3cb0:	1dfb      	adds	r3, r7, #7
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d001      	beq.n	3cbc <udi_msc_sbc_trans+0x78>
    3cb8:	2380      	movs	r3, #128	; 0x80
    3cba:	e000      	b.n	3cbe <udi_msc_sbc_trans+0x7a>
    3cbc:	2300      	movs	r3, #0
    3cbe:	68fa      	ldr	r2, [r7, #12]
    3cc0:	1c10      	adds	r0, r2, #0
    3cc2:	1c19      	adds	r1, r3, #0
    3cc4:	4b13      	ldr	r3, [pc, #76]	; (3d14 <udi_msc_sbc_trans+0xd0>)
    3cc6:	4798      	blx	r3
    3cc8:	1c03      	adds	r3, r0, #0
    3cca:	2201      	movs	r2, #1
    3ccc:	4053      	eors	r3, r2
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d000      	beq.n	3cd6 <udi_msc_sbc_trans+0x92>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
    3cd4:	e006      	b.n	3ce4 <udi_msc_sbc_trans+0xa0>

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    3cd6:	4b10      	ldr	r3, [pc, #64]	; (3d18 <udi_msc_sbc_trans+0xd4>)
    3cd8:	1dfa      	adds	r2, r7, #7
    3cda:	7812      	ldrb	r2, [r2, #0]
    3cdc:	701a      	strb	r2, [r3, #0]
	udi_msc_b_trans_req = true;
    3cde:	4b0f      	ldr	r3, [pc, #60]	; (3d1c <udi_msc_sbc_trans+0xd8>)
    3ce0:	2201      	movs	r2, #1
    3ce2:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    3ce4:	46bd      	mov	sp, r7
    3ce6:	b004      	add	sp, #16
    3ce8:	bd80      	pop	{r7, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	20003f98 	.word	0x20003f98
    3cf0:	000017c9 	.word	0x000017c9
    3cf4:	0000373d 	.word	0x0000373d
    3cf8:	00003579 	.word	0x00003579
    3cfc:	20003fd7 	.word	0x20003fd7
    3d00:	20003fd6 	.word	0x20003fd6
    3d04:	20003fd5 	.word	0x20003fd5
    3d08:	20003fd4 	.word	0x20003fd4
    3d0c:	20003fd9 	.word	0x20003fd9
    3d10:	20003fd8 	.word	0x20003fd8
    3d14:	00003495 	.word	0x00003495
    3d18:	20003fd2 	.word	0x20003fd2
    3d1c:	20003fd1 	.word	0x20003fd1

00003d20 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
    3d20:	b590      	push	{r4, r7, lr}
    3d22:	b083      	sub	sp, #12
    3d24:	af00      	add	r7, sp, #0
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
    3d26:	4b2a      	ldr	r3, [pc, #168]	; (3dd0 <udi_msc_process_trans+0xb0>)
    3d28:	781b      	ldrb	r3, [r3, #0]
    3d2a:	2201      	movs	r2, #1
    3d2c:	4053      	eors	r3, r2
    3d2e:	b2db      	uxtb	r3, r3
    3d30:	2b00      	cmp	r3, #0
    3d32:	d001      	beq.n	3d38 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
    3d34:	2300      	movs	r3, #0
    3d36:	e047      	b.n	3dc8 <udi_msc_process_trans+0xa8>
	udi_msc_b_trans_req = false;
    3d38:	4b25      	ldr	r3, [pc, #148]	; (3dd0 <udi_msc_process_trans+0xb0>)
    3d3a:	2200      	movs	r2, #0
    3d3c:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = false;
    3d3e:	4b25      	ldr	r3, [pc, #148]	; (3dd4 <udi_msc_process_trans+0xb4>)
    3d40:	2200      	movs	r2, #0
    3d42:	701a      	strb	r2, [r3, #0]

	// Start transfer
	if (udi_msc_b_read) {
    3d44:	4b24      	ldr	r3, [pc, #144]	; (3dd8 <udi_msc_process_trans+0xb8>)
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d00e      	beq.n	3d6a <udi_msc_process_trans+0x4a>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    3d4c:	4b23      	ldr	r3, [pc, #140]	; (3ddc <udi_msc_process_trans+0xbc>)
    3d4e:	7b59      	ldrb	r1, [r3, #13]
    3d50:	4b23      	ldr	r3, [pc, #140]	; (3de0 <udi_msc_process_trans+0xc0>)
    3d52:	681a      	ldr	r2, [r3, #0]
    3d54:	4b23      	ldr	r3, [pc, #140]	; (3de4 <udi_msc_process_trans+0xc4>)
    3d56:	881b      	ldrh	r3, [r3, #0]
    3d58:	1dfc      	adds	r4, r7, #7
    3d5a:	1c08      	adds	r0, r1, #0
    3d5c:	1c11      	adds	r1, r2, #0
    3d5e:	1c1a      	adds	r2, r3, #0
    3d60:	4b21      	ldr	r3, [pc, #132]	; (3de8 <udi_msc_process_trans+0xc8>)
    3d62:	4798      	blx	r3
    3d64:	1c03      	adds	r3, r0, #0
    3d66:	7023      	strb	r3, [r4, #0]
    3d68:	e00d      	b.n	3d86 <udi_msc_process_trans+0x66>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    3d6a:	4b1c      	ldr	r3, [pc, #112]	; (3ddc <udi_msc_process_trans+0xbc>)
    3d6c:	7b59      	ldrb	r1, [r3, #13]
    3d6e:	4b1c      	ldr	r3, [pc, #112]	; (3de0 <udi_msc_process_trans+0xc0>)
    3d70:	681a      	ldr	r2, [r3, #0]
    3d72:	4b1c      	ldr	r3, [pc, #112]	; (3de4 <udi_msc_process_trans+0xc4>)
    3d74:	881b      	ldrh	r3, [r3, #0]
    3d76:	1dfc      	adds	r4, r7, #7
    3d78:	1c08      	adds	r0, r1, #0
    3d7a:	1c11      	adds	r1, r2, #0
    3d7c:	1c1a      	adds	r2, r3, #0
    3d7e:	4b1b      	ldr	r3, [pc, #108]	; (3dec <udi_msc_process_trans+0xcc>)
    3d80:	4798      	blx	r3
    3d82:	1c03      	adds	r3, r0, #0
    3d84:	7023      	strb	r3, [r4, #0]
				udi_msc_nb_block);
	}

	// Check if transfer is aborted by reset
	if (udi_msc_b_reset_trans) {
    3d86:	4b13      	ldr	r3, [pc, #76]	; (3dd4 <udi_msc_process_trans+0xb4>)
    3d88:	781b      	ldrb	r3, [r3, #0]
    3d8a:	b2db      	uxtb	r3, r3
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d004      	beq.n	3d9a <udi_msc_process_trans+0x7a>
		udi_msc_b_reset_trans = false;
    3d90:	4b10      	ldr	r3, [pc, #64]	; (3dd4 <udi_msc_process_trans+0xb4>)
    3d92:	2200      	movs	r2, #0
    3d94:	701a      	strb	r2, [r3, #0]
		return true;
    3d96:	2301      	movs	r3, #1
    3d98:	e016      	b.n	3dc8 <udi_msc_process_trans+0xa8>
	}

	// Check status of transfer
	switch (status) {
    3d9a:	1dfb      	adds	r3, r7, #7
    3d9c:	781b      	ldrb	r3, [r3, #0]
    3d9e:	2b02      	cmp	r3, #2
    3da0:	d009      	beq.n	3db6 <udi_msc_process_trans+0x96>
    3da2:	2b03      	cmp	r3, #3
    3da4:	d004      	beq.n	3db0 <udi_msc_process_trans+0x90>
    3da6:	2b00      	cmp	r3, #0
    3da8:	d108      	bne.n	3dbc <udi_msc_process_trans+0x9c>
	case CTRL_GOOD:
		udi_msc_sense_pass();
    3daa:	4b11      	ldr	r3, [pc, #68]	; (3df0 <udi_msc_process_trans+0xd0>)
    3dac:	4798      	blx	r3
		break;
    3dae:	e008      	b.n	3dc2 <udi_msc_process_trans+0xa2>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3db0:	4b10      	ldr	r3, [pc, #64]	; (3df4 <udi_msc_process_trans+0xd4>)
    3db2:	4798      	blx	r3
		break;
    3db4:	e005      	b.n	3dc2 <udi_msc_process_trans+0xa2>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    3db6:	4b10      	ldr	r3, [pc, #64]	; (3df8 <udi_msc_process_trans+0xd8>)
    3db8:	4798      	blx	r3
		break;
    3dba:	e002      	b.n	3dc2 <udi_msc_process_trans+0xa2>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
    3dbc:	4b0f      	ldr	r3, [pc, #60]	; (3dfc <udi_msc_process_trans+0xdc>)
    3dbe:	4798      	blx	r3
		break;
    3dc0:	46c0      	nop			; (mov r8, r8)
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
    3dc2:	4b0f      	ldr	r3, [pc, #60]	; (3e00 <udi_msc_process_trans+0xe0>)
    3dc4:	4798      	blx	r3
	return true;
    3dc6:	2301      	movs	r3, #1
}
    3dc8:	1c18      	adds	r0, r3, #0
    3dca:	46bd      	mov	sp, r7
    3dcc:	b003      	add	sp, #12
    3dce:	bd90      	pop	{r4, r7, pc}
    3dd0:	20003fd1 	.word	0x20003fd1
    3dd4:	20000215 	.word	0x20000215
    3dd8:	20003fd2 	.word	0x20003fd2
    3ddc:	20003f98 	.word	0x20003f98
    3de0:	20003fd4 	.word	0x20003fd4
    3de4:	20003fd8 	.word	0x20003fd8
    3de8:	00001881 	.word	0x00001881
    3dec:	000018e5 	.word	0x000018e5
    3df0:	000036d1 	.word	0x000036d1
    3df4:	00003709 	.word	0x00003709
    3df8:	000036ed 	.word	0x000036ed
    3dfc:	00003725 	.word	0x00003725
    3e00:	00003579 	.word	0x00003579

00003e04 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	b082      	sub	sp, #8
    3e08:	af00      	add	r7, sp, #0
    3e0a:	6039      	str	r1, [r7, #0]
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	1c01      	adds	r1, r0, #0
    3e10:	7019      	strb	r1, [r3, #0]
    3e12:	1dbb      	adds	r3, r7, #6
    3e14:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    3e16:	1dfb      	adds	r3, r7, #7
    3e18:	781b      	ldrb	r3, [r3, #0]
    3e1a:	1e5a      	subs	r2, r3, #1
    3e1c:	4193      	sbcs	r3, r2
    3e1e:	b2da      	uxtb	r2, r3
    3e20:	4b03      	ldr	r3, [pc, #12]	; (3e30 <udi_msc_trans_ack+0x2c>)
    3e22:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    3e24:	4b03      	ldr	r3, [pc, #12]	; (3e34 <udi_msc_trans_ack+0x30>)
    3e26:	2201      	movs	r2, #1
    3e28:	701a      	strb	r2, [r3, #0]
}
    3e2a:	46bd      	mov	sp, r7
    3e2c:	b002      	add	sp, #8
    3e2e:	bd80      	pop	{r7, pc}
    3e30:	200069a1 	.word	0x200069a1
    3e34:	20000214 	.word	0x20000214

00003e38 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    3e38:	b5b0      	push	{r4, r5, r7, lr}
    3e3a:	b086      	sub	sp, #24
    3e3c:	af02      	add	r7, sp, #8
    3e3e:	60b9      	str	r1, [r7, #8]
    3e40:	607a      	str	r2, [r7, #4]
    3e42:	603b      	str	r3, [r7, #0]
    3e44:	1c3b      	adds	r3, r7, #0
    3e46:	330f      	adds	r3, #15
    3e48:	1c02      	adds	r2, r0, #0
    3e4a:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_b_ack_trans)
    3e4c:	4b30      	ldr	r3, [pc, #192]	; (3f10 <udi_msc_trans_block+0xd8>)
    3e4e:	781b      	ldrb	r3, [r3, #0]
    3e50:	b2db      	uxtb	r3, r3
    3e52:	2201      	movs	r2, #1
    3e54:	4053      	eors	r3, r2
    3e56:	b2db      	uxtb	r3, r3
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d001      	beq.n	3e60 <udi_msc_trans_block+0x28>
		return false;	// No possible, transfer on going
    3e5c:	2300      	movs	r3, #0
    3e5e:	e052      	b.n	3f06 <udi_msc_trans_block+0xce>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    3e60:	4b2b      	ldr	r3, [pc, #172]	; (3f10 <udi_msc_trans_block+0xd8>)
    3e62:	2200      	movs	r2, #0
    3e64:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    3e66:	1c3b      	adds	r3, r7, #0
    3e68:	330f      	adds	r3, #15
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d001      	beq.n	3e74 <udi_msc_trans_block+0x3c>
    3e70:	2381      	movs	r3, #129	; 0x81
    3e72:	e000      	b.n	3e76 <udi_msc_trans_block+0x3e>
    3e74:	2302      	movs	r3, #2
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	2a00      	cmp	r2, #0
    3e7a:	d001      	beq.n	3e80 <udi_msc_trans_block+0x48>
    3e7c:	683a      	ldr	r2, [r7, #0]
    3e7e:	e000      	b.n	3e82 <udi_msc_trans_block+0x4a>
    3e80:	4a24      	ldr	r2, [pc, #144]	; (3f14 <udi_msc_trans_block+0xdc>)
    3e82:	68bd      	ldr	r5, [r7, #8]
    3e84:	687c      	ldr	r4, [r7, #4]
    3e86:	9200      	str	r2, [sp, #0]
    3e88:	1c18      	adds	r0, r3, #0
    3e8a:	2100      	movs	r1, #0
    3e8c:	1c2a      	adds	r2, r5, #0
    3e8e:	1c23      	adds	r3, r4, #0
    3e90:	4c21      	ldr	r4, [pc, #132]	; (3f18 <udi_msc_trans_block+0xe0>)
    3e92:	47a0      	blx	r4
    3e94:	1c03      	adds	r3, r0, #0
    3e96:	2201      	movs	r2, #1
    3e98:	4053      	eors	r3, r2
    3e9a:	b2db      	uxtb	r3, r3
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d004      	beq.n	3eaa <udi_msc_trans_block+0x72>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
    3ea0:	4b1b      	ldr	r3, [pc, #108]	; (3f10 <udi_msc_trans_block+0xd8>)
    3ea2:	2201      	movs	r2, #1
    3ea4:	701a      	strb	r2, [r3, #0]
		return false;
    3ea6:	2300      	movs	r3, #0
    3ea8:	e02d      	b.n	3f06 <udi_msc_trans_block+0xce>
	}
	if (NULL == callback) {
    3eaa:	683b      	ldr	r3, [r7, #0]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d123      	bne.n	3ef8 <udi_msc_trans_block+0xc0>
		while (!udi_msc_b_ack_trans);
    3eb0:	46c0      	nop			; (mov r8, r8)
    3eb2:	4b17      	ldr	r3, [pc, #92]	; (3f10 <udi_msc_trans_block+0xd8>)
    3eb4:	781b      	ldrb	r3, [r3, #0]
    3eb6:	b2db      	uxtb	r3, r3
    3eb8:	2201      	movs	r2, #1
    3eba:	4053      	eors	r3, r2
    3ebc:	b2db      	uxtb	r3, r3
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d1f7      	bne.n	3eb2 <udi_msc_trans_block+0x7a>
		if (udi_msc_b_abort_trans) {
    3ec2:	4b16      	ldr	r3, [pc, #88]	; (3f1c <udi_msc_trans_block+0xe4>)
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	b2db      	uxtb	r3, r3
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d001      	beq.n	3ed0 <udi_msc_trans_block+0x98>
			return false;
    3ecc:	2300      	movs	r3, #0
    3ece:	e01a      	b.n	3f06 <udi_msc_trans_block+0xce>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
    3ed0:	4b13      	ldr	r3, [pc, #76]	; (3f20 <udi_msc_trans_block+0xe8>)
    3ed2:	689a      	ldr	r2, [r3, #8]
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	1ad2      	subs	r2, r2, r3
    3ed8:	4b11      	ldr	r3, [pc, #68]	; (3f20 <udi_msc_trans_block+0xe8>)
    3eda:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
    3edc:	4b0f      	ldr	r3, [pc, #60]	; (3f1c <udi_msc_trans_block+0xe4>)
    3ede:	781b      	ldrb	r3, [r3, #0]
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	1e5a      	subs	r2, r3, #1
    3ee4:	4193      	sbcs	r3, r2
    3ee6:	b2db      	uxtb	r3, r3
    3ee8:	2201      	movs	r2, #1
    3eea:	4053      	eors	r3, r2
    3eec:	b2db      	uxtb	r3, r3
    3eee:	1c1a      	adds	r2, r3, #0
    3ef0:	2301      	movs	r3, #1
    3ef2:	4013      	ands	r3, r2
    3ef4:	b2db      	uxtb	r3, r3
    3ef6:	e006      	b.n	3f06 <udi_msc_trans_block+0xce>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    3ef8:	4b09      	ldr	r3, [pc, #36]	; (3f20 <udi_msc_trans_block+0xe8>)
    3efa:	689a      	ldr	r2, [r3, #8]
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	1ad2      	subs	r2, r2, r3
    3f00:	4b07      	ldr	r3, [pc, #28]	; (3f20 <udi_msc_trans_block+0xe8>)
    3f02:	609a      	str	r2, [r3, #8]
	return true;
    3f04:	2301      	movs	r3, #1
}
    3f06:	1c18      	adds	r0, r3, #0
    3f08:	46bd      	mov	sp, r7
    3f0a:	b004      	add	sp, #16
    3f0c:	bdb0      	pop	{r4, r5, r7, pc}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	20000214 	.word	0x20000214
    3f14:	00003e05 	.word	0x00003e05
    3f18:	000080d5 	.word	0x000080d5
    3f1c:	200069a1 	.word	0x200069a1
    3f20:	20000204 	.word	0x20000204

00003f24 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    3f24:	b580      	push	{r7, lr}
    3f26:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    3f28:	4b01      	ldr	r3, [pc, #4]	; (3f30 <udc_get_string_serial_name+0xc>)
	}
    3f2a:	1c18      	adds	r0, r3, #0
    3f2c:	46bd      	mov	sp, r7
    3f2e:	bd80      	pop	{r7, pc}
    3f30:	0000ba64 	.word	0x0000ba64

00003f34 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    3f34:	b580      	push	{r7, lr}
    3f36:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    3f38:	4b02      	ldr	r3, [pc, #8]	; (3f44 <udc_get_interface_desc+0x10>)
    3f3a:	681b      	ldr	r3, [r3, #0]
}
    3f3c:	1c18      	adds	r0, r3, #0
    3f3e:	46bd      	mov	sp, r7
    3f40:	bd80      	pop	{r7, pc}
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	20004008 	.word	0x20004008

00003f48 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3f4c:	4b07      	ldr	r3, [pc, #28]	; (3f6c <udc_get_eof_conf+0x24>)
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3f52:	4b06      	ldr	r3, [pc, #24]	; (3f6c <udc_get_eof_conf+0x24>)
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	681b      	ldr	r3, [r3, #0]
    3f58:	7899      	ldrb	r1, [r3, #2]
    3f5a:	78db      	ldrb	r3, [r3, #3]
    3f5c:	021b      	lsls	r3, r3, #8
    3f5e:	430b      	orrs	r3, r1
    3f60:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3f62:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    3f64:	1c18      	adds	r0, r3, #0
    3f66:	46bd      	mov	sp, r7
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	20004004 	.word	0x20004004

00003f70 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3f70:	b580      	push	{r7, lr}
    3f72:	b084      	sub	sp, #16
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	1c0a      	adds	r2, r1, #0
    3f7a:	1cfb      	adds	r3, r7, #3
    3f7c:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3f7e:	4b12      	ldr	r3, [pc, #72]	; (3fc8 <udc_next_desc_in_iface+0x58>)
    3f80:	4798      	blx	r3
    3f82:	1c03      	adds	r3, r0, #0
    3f84:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    3f86:	687b      	ldr	r3, [r7, #4]
    3f88:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3f8a:	687a      	ldr	r2, [r7, #4]
    3f8c:	18d3      	adds	r3, r2, r3
    3f8e:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3f90:	e011      	b.n	3fb6 <udc_next_desc_in_iface+0x46>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3f92:	687b      	ldr	r3, [r7, #4]
    3f94:	785b      	ldrb	r3, [r3, #1]
    3f96:	2b04      	cmp	r3, #4
    3f98:	d100      	bne.n	3f9c <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
    3f9a:	e010      	b.n	3fbe <udc_next_desc_in_iface+0x4e>
		}
		if (desc_id == desc->bDescriptorType) {
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	785b      	ldrb	r3, [r3, #1]
    3fa0:	1cfa      	adds	r2, r7, #3
    3fa2:	7812      	ldrb	r2, [r2, #0]
    3fa4:	429a      	cmp	r2, r3
    3fa6:	d101      	bne.n	3fac <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	e009      	b.n	3fc0 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3fb0:	687a      	ldr	r2, [r7, #4]
    3fb2:	18d3      	adds	r3, r2, r3
    3fb4:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3fb6:	68fa      	ldr	r2, [r7, #12]
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	429a      	cmp	r2, r3
    3fbc:	d8e9      	bhi.n	3f92 <udc_next_desc_in_iface+0x22>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3fbe:	2300      	movs	r3, #0
}
    3fc0:	1c18      	adds	r0, r3, #0
    3fc2:	46bd      	mov	sp, r7
    3fc4:	b004      	add	sp, #16
    3fc6:	bd80      	pop	{r7, pc}
    3fc8:	00003f49 	.word	0x00003f49

00003fcc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b084      	sub	sp, #16
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	1c0a      	adds	r2, r1, #0
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	1c01      	adds	r1, r0, #0
    3fd8:	7019      	strb	r1, [r3, #0]
    3fda:	1dbb      	adds	r3, r7, #6
    3fdc:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3fde:	4b20      	ldr	r3, [pc, #128]	; (4060 <udc_update_iface_desc+0x94>)
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d101      	bne.n	3fea <udc_update_iface_desc+0x1e>
		return false;
    3fe6:	2300      	movs	r3, #0
    3fe8:	e036      	b.n	4058 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3fea:	4b1e      	ldr	r3, [pc, #120]	; (4064 <udc_update_iface_desc+0x98>)
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	681b      	ldr	r3, [r3, #0]
    3ff0:	791b      	ldrb	r3, [r3, #4]
    3ff2:	1dfa      	adds	r2, r7, #7
    3ff4:	7812      	ldrb	r2, [r2, #0]
    3ff6:	429a      	cmp	r2, r3
    3ff8:	d301      	bcc.n	3ffe <udc_update_iface_desc+0x32>
		return false;
    3ffa:	2300      	movs	r3, #0
    3ffc:	e02c      	b.n	4058 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    3ffe:	4b19      	ldr	r3, [pc, #100]	; (4064 <udc_update_iface_desc+0x98>)
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    4004:	4b18      	ldr	r3, [pc, #96]	; (4068 <udc_update_iface_desc+0x9c>)
    4006:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    4008:	4b18      	ldr	r3, [pc, #96]	; (406c <udc_update_iface_desc+0xa0>)
    400a:	4798      	blx	r3
    400c:	1c03      	adds	r3, r0, #0
    400e:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    4010:	e01c      	b.n	404c <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    4012:	4b15      	ldr	r3, [pc, #84]	; (4068 <udc_update_iface_desc+0x9c>)
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	785b      	ldrb	r3, [r3, #1]
    4018:	2b04      	cmp	r3, #4
    401a:	d10f      	bne.n	403c <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    401c:	4b12      	ldr	r3, [pc, #72]	; (4068 <udc_update_iface_desc+0x9c>)
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	789b      	ldrb	r3, [r3, #2]
    4022:	1dfa      	adds	r2, r7, #7
    4024:	7812      	ldrb	r2, [r2, #0]
    4026:	429a      	cmp	r2, r3
    4028:	d108      	bne.n	403c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    402a:	4b0f      	ldr	r3, [pc, #60]	; (4068 <udc_update_iface_desc+0x9c>)
    402c:	681b      	ldr	r3, [r3, #0]
    402e:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    4030:	1dba      	adds	r2, r7, #6
    4032:	7812      	ldrb	r2, [r2, #0]
    4034:	429a      	cmp	r2, r3
    4036:	d101      	bne.n	403c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    4038:	2301      	movs	r3, #1
    403a:	e00d      	b.n	4058 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    403c:	4b0a      	ldr	r3, [pc, #40]	; (4068 <udc_update_iface_desc+0x9c>)
    403e:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    4040:	4b09      	ldr	r3, [pc, #36]	; (4068 <udc_update_iface_desc+0x9c>)
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    4046:	18d2      	adds	r2, r2, r3
    4048:	4b07      	ldr	r3, [pc, #28]	; (4068 <udc_update_iface_desc+0x9c>)
    404a:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    404c:	4b06      	ldr	r3, [pc, #24]	; (4068 <udc_update_iface_desc+0x9c>)
    404e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    4050:	68fa      	ldr	r2, [r7, #12]
    4052:	429a      	cmp	r2, r3
    4054:	d8dd      	bhi.n	4012 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    4056:	2300      	movs	r3, #0
}
    4058:	1c18      	adds	r0, r3, #0
    405a:	46bd      	mov	sp, r7
    405c:	b004      	add	sp, #16
    405e:	bd80      	pop	{r7, pc}
    4060:	20004000 	.word	0x20004000
    4064:	20004004 	.word	0x20004004
    4068:	20004008 	.word	0x20004008
    406c:	00003f49 	.word	0x00003f49

00004070 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    4070:	b580      	push	{r7, lr}
    4072:	b084      	sub	sp, #16
    4074:	af00      	add	r7, sp, #0
    4076:	1c02      	adds	r2, r0, #0
    4078:	1dfb      	adds	r3, r7, #7
    407a:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    407c:	1dfb      	adds	r3, r7, #7
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	1c18      	adds	r0, r3, #0
    4082:	2100      	movs	r1, #0
    4084:	4b20      	ldr	r3, [pc, #128]	; (4108 <udc_iface_disable+0x98>)
    4086:	4798      	blx	r3
    4088:	1c03      	adds	r3, r0, #0
    408a:	2201      	movs	r2, #1
    408c:	4053      	eors	r3, r2
    408e:	b2db      	uxtb	r3, r3
    4090:	2b00      	cmp	r3, #0
    4092:	d001      	beq.n	4098 <udc_iface_disable+0x28>
		return false;
    4094:	2300      	movs	r3, #0
    4096:	e033      	b.n	4100 <udc_iface_disable+0x90>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4098:	4b1c      	ldr	r3, [pc, #112]	; (410c <udc_iface_disable+0x9c>)
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	685a      	ldr	r2, [r3, #4]
    409e:	1dfb      	adds	r3, r7, #7
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	009b      	lsls	r3, r3, #2
    40a4:	18d3      	adds	r3, r2, r3
    40a6:	681b      	ldr	r3, [r3, #0]
    40a8:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    40aa:	68bb      	ldr	r3, [r7, #8]
    40ac:	68db      	ldr	r3, [r3, #12]
    40ae:	4798      	blx	r3
    40b0:	1c03      	adds	r3, r0, #0
    40b2:	1dfa      	adds	r2, r7, #7
    40b4:	7812      	ldrb	r2, [r2, #0]
    40b6:	1c10      	adds	r0, r2, #0
    40b8:	1c19      	adds	r1, r3, #0
    40ba:	4b13      	ldr	r3, [pc, #76]	; (4108 <udc_iface_disable+0x98>)
    40bc:	4798      	blx	r3
    40be:	1c03      	adds	r3, r0, #0
    40c0:	2201      	movs	r2, #1
    40c2:	4053      	eors	r3, r2
    40c4:	b2db      	uxtb	r3, r3
    40c6:	2b00      	cmp	r3, #0
    40c8:	d001      	beq.n	40ce <udc_iface_disable+0x5e>
		return false;
    40ca:	2300      	movs	r3, #0
    40cc:	e018      	b.n	4100 <udc_iface_disable+0x90>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    40ce:	4b10      	ldr	r3, [pc, #64]	; (4110 <udc_iface_disable+0xa0>)
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    40d4:	68fb      	ldr	r3, [r7, #12]
    40d6:	1c18      	adds	r0, r3, #0
    40d8:	2105      	movs	r1, #5
    40da:	4b0e      	ldr	r3, [pc, #56]	; (4114 <udc_iface_disable+0xa4>)
    40dc:	4798      	blx	r3
    40de:	1c03      	adds	r3, r0, #0
    40e0:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d105      	bne.n	40f4 <udc_iface_disable+0x84>
				break;
    40e8:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    40ea:	68bb      	ldr	r3, [r7, #8]
    40ec:	685b      	ldr	r3, [r3, #4]
    40ee:	4798      	blx	r3
	return true;
    40f0:	2301      	movs	r3, #1
    40f2:	e005      	b.n	4100 <udc_iface_disable+0x90>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    40f4:	68fb      	ldr	r3, [r7, #12]
    40f6:	789b      	ldrb	r3, [r3, #2]
    40f8:	1c18      	adds	r0, r3, #0
    40fa:	4b07      	ldr	r3, [pc, #28]	; (4118 <udc_iface_disable+0xa8>)
    40fc:	4798      	blx	r3
		}
    40fe:	e7e9      	b.n	40d4 <udc_iface_disable+0x64>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    4100:	1c18      	adds	r0, r3, #0
    4102:	46bd      	mov	sp, r7
    4104:	b004      	add	sp, #16
    4106:	bd80      	pop	{r7, pc}
    4108:	00003fcd 	.word	0x00003fcd
    410c:	20004004 	.word	0x20004004
    4110:	20004008 	.word	0x20004008
    4114:	00003f71 	.word	0x00003f71
    4118:	00007cc9 	.word	0x00007cc9

0000411c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    411c:	b580      	push	{r7, lr}
    411e:	b084      	sub	sp, #16
    4120:	af00      	add	r7, sp, #0
    4122:	1c0a      	adds	r2, r1, #0
    4124:	1dfb      	adds	r3, r7, #7
    4126:	1c01      	adds	r1, r0, #0
    4128:	7019      	strb	r1, [r3, #0]
    412a:	1dbb      	adds	r3, r7, #6
    412c:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    412e:	1dfb      	adds	r3, r7, #7
    4130:	781a      	ldrb	r2, [r3, #0]
    4132:	1dbb      	adds	r3, r7, #6
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	1c10      	adds	r0, r2, #0
    4138:	1c19      	adds	r1, r3, #0
    413a:	4b20      	ldr	r3, [pc, #128]	; (41bc <udc_iface_enable+0xa0>)
    413c:	4798      	blx	r3
    413e:	1c03      	adds	r3, r0, #0
    4140:	2201      	movs	r2, #1
    4142:	4053      	eors	r3, r2
    4144:	b2db      	uxtb	r3, r3
    4146:	2b00      	cmp	r3, #0
    4148:	d001      	beq.n	414e <udc_iface_enable+0x32>
		return false;
    414a:	2300      	movs	r3, #0
    414c:	e031      	b.n	41b2 <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    414e:	4b1c      	ldr	r3, [pc, #112]	; (41c0 <udc_iface_enable+0xa4>)
    4150:	681b      	ldr	r3, [r3, #0]
    4152:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    4154:	68fb      	ldr	r3, [r7, #12]
    4156:	1c18      	adds	r0, r3, #0
    4158:	2105      	movs	r1, #5
    415a:	4b1a      	ldr	r3, [pc, #104]	; (41c4 <udc_iface_enable+0xa8>)
    415c:	4798      	blx	r3
    415e:	1c03      	adds	r3, r0, #0
    4160:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	2b00      	cmp	r3, #0
    4166:	d10c      	bne.n	4182 <udc_iface_enable+0x66>
			break;
    4168:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    416a:	4b17      	ldr	r3, [pc, #92]	; (41c8 <udc_iface_enable+0xac>)
    416c:	681b      	ldr	r3, [r3, #0]
    416e:	685a      	ldr	r2, [r3, #4]
    4170:	1dfb      	adds	r3, r7, #7
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	009b      	lsls	r3, r3, #2
    4176:	18d3      	adds	r3, r2, r3
    4178:	681b      	ldr	r3, [r3, #0]
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	4798      	blx	r3
    417e:	1c03      	adds	r3, r0, #0
    4180:	e017      	b.n	41b2 <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	7899      	ldrb	r1, [r3, #2]
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	78da      	ldrb	r2, [r3, #3]
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	7918      	ldrb	r0, [r3, #4]
    418e:	795b      	ldrb	r3, [r3, #5]
    4190:	021b      	lsls	r3, r3, #8
    4192:	4303      	orrs	r3, r0
    4194:	b29b      	uxth	r3, r3
    4196:	1c08      	adds	r0, r1, #0
    4198:	1c11      	adds	r1, r2, #0
    419a:	1c1a      	adds	r2, r3, #0
    419c:	4b0b      	ldr	r3, [pc, #44]	; (41cc <udc_iface_enable+0xb0>)
    419e:	4798      	blx	r3
    41a0:	1c03      	adds	r3, r0, #0
    41a2:	2201      	movs	r2, #1
    41a4:	4053      	eors	r3, r2
    41a6:	b2db      	uxtb	r3, r3
    41a8:	2b00      	cmp	r3, #0
    41aa:	d001      	beq.n	41b0 <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    41ac:	2300      	movs	r3, #0
    41ae:	e000      	b.n	41b2 <udc_iface_enable+0x96>
		}
	}
    41b0:	e7d0      	b.n	4154 <udc_iface_enable+0x38>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    41b2:	1c18      	adds	r0, r3, #0
    41b4:	46bd      	mov	sp, r7
    41b6:	b004      	add	sp, #16
    41b8:	bd80      	pop	{r7, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	00003fcd 	.word	0x00003fcd
    41c0:	20004008 	.word	0x20004008
    41c4:	00003f71 	.word	0x00003f71
    41c8:	20004004 	.word	0x20004004
    41cc:	00007d59 	.word	0x00007d59

000041d0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    41d0:	b580      	push	{r7, lr}
    41d2:	af00      	add	r7, sp, #0
	udd_enable();
    41d4:	4b01      	ldr	r3, [pc, #4]	; (41dc <udc_start+0xc>)
    41d6:	4798      	blx	r3
}
    41d8:	46bd      	mov	sp, r7
    41da:	bd80      	pop	{r7, pc}
    41dc:	00008cfd 	.word	0x00008cfd

000041e0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b082      	sub	sp, #8
    41e4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    41e6:	4b16      	ldr	r3, [pc, #88]	; (4240 <udc_reset+0x60>)
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d015      	beq.n	421a <udc_reset+0x3a>
		for (iface_num = 0;
    41ee:	1dfb      	adds	r3, r7, #7
    41f0:	2200      	movs	r2, #0
    41f2:	701a      	strb	r2, [r3, #0]
    41f4:	e009      	b.n	420a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    41f6:	1dfb      	adds	r3, r7, #7
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	1c18      	adds	r0, r3, #0
    41fc:	4b11      	ldr	r3, [pc, #68]	; (4244 <udc_reset+0x64>)
    41fe:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4200:	1dfb      	adds	r3, r7, #7
    4202:	781a      	ldrb	r2, [r3, #0]
    4204:	1dfb      	adds	r3, r7, #7
    4206:	3201      	adds	r2, #1
    4208:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    420a:	4b0f      	ldr	r3, [pc, #60]	; (4248 <udc_reset+0x68>)
    420c:	681b      	ldr	r3, [r3, #0]
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4212:	1dfa      	adds	r2, r7, #7
    4214:	7812      	ldrb	r2, [r2, #0]
    4216:	429a      	cmp	r2, r3
    4218:	d3ed      	bcc.n	41f6 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    421a:	4b09      	ldr	r3, [pc, #36]	; (4240 <udc_reset+0x60>)
    421c:	2200      	movs	r2, #0
    421e:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    4220:	4b0a      	ldr	r3, [pc, #40]	; (424c <udc_reset+0x6c>)
    4222:	881a      	ldrh	r2, [r3, #0]
    4224:	2302      	movs	r3, #2
    4226:	4013      	ands	r3, r2
    4228:	b29b      	uxth	r3, r3
    422a:	2b00      	cmp	r3, #0
    422c:	d001      	beq.n	4232 <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    422e:	4b08      	ldr	r3, [pc, #32]	; (4250 <udc_reset+0x70>)
    4230:	4798      	blx	r3
	}
#endif
	udc_device_status =
    4232:	4b06      	ldr	r3, [pc, #24]	; (424c <udc_reset+0x6c>)
    4234:	2201      	movs	r2, #1
    4236:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    4238:	46bd      	mov	sp, r7
    423a:	b002      	add	sp, #8
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20004000 	.word	0x20004000
    4244:	00004071 	.word	0x00004071
    4248:	20004004 	.word	0x20004004
    424c:	20003ff8 	.word	0x20003ff8
    4250:	0000aec9 	.word	0x0000aec9

00004254 <udc_sof_notify>:

void udc_sof_notify(void)
{
    4254:	b580      	push	{r7, lr}
    4256:	b082      	sub	sp, #8
    4258:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    425a:	4b16      	ldr	r3, [pc, #88]	; (42b4 <udc_sof_notify+0x60>)
    425c:	781b      	ldrb	r3, [r3, #0]
    425e:	2b00      	cmp	r3, #0
    4260:	d025      	beq.n	42ae <udc_sof_notify+0x5a>
		for (iface_num = 0;
    4262:	1dfb      	adds	r3, r7, #7
    4264:	2200      	movs	r2, #0
    4266:	701a      	strb	r2, [r3, #0]
    4268:	e019      	b.n	429e <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    426a:	4b13      	ldr	r3, [pc, #76]	; (42b8 <udc_sof_notify+0x64>)
    426c:	681b      	ldr	r3, [r3, #0]
    426e:	685a      	ldr	r2, [r3, #4]
    4270:	1dfb      	adds	r3, r7, #7
    4272:	781b      	ldrb	r3, [r3, #0]
    4274:	009b      	lsls	r3, r3, #2
    4276:	18d3      	adds	r3, r2, r3
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	691b      	ldr	r3, [r3, #16]
    427c:	2b00      	cmp	r3, #0
    427e:	d009      	beq.n	4294 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4280:	4b0d      	ldr	r3, [pc, #52]	; (42b8 <udc_sof_notify+0x64>)
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	685a      	ldr	r2, [r3, #4]
    4286:	1dfb      	adds	r3, r7, #7
    4288:	781b      	ldrb	r3, [r3, #0]
    428a:	009b      	lsls	r3, r3, #2
    428c:	18d3      	adds	r3, r2, r3
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	691b      	ldr	r3, [r3, #16]
    4292:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4294:	1dfb      	adds	r3, r7, #7
    4296:	781a      	ldrb	r2, [r3, #0]
    4298:	1dfb      	adds	r3, r7, #7
    429a:	3201      	adds	r2, #1
    429c:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    429e:	4b06      	ldr	r3, [pc, #24]	; (42b8 <udc_sof_notify+0x64>)
    42a0:	681b      	ldr	r3, [r3, #0]
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    42a6:	1dfa      	adds	r2, r7, #7
    42a8:	7812      	ldrb	r2, [r2, #0]
    42aa:	429a      	cmp	r2, r3
    42ac:	d3dd      	bcc.n	426a <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    42ae:	46bd      	mov	sp, r7
    42b0:	b002      	add	sp, #8
    42b2:	bd80      	pop	{r7, pc}
    42b4:	20004000 	.word	0x20004000
    42b8:	20004004 	.word	0x20004004

000042bc <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    42bc:	b580      	push	{r7, lr}
    42be:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    42c0:	4b07      	ldr	r3, [pc, #28]	; (42e0 <udc_req_std_dev_get_status+0x24>)
    42c2:	88db      	ldrh	r3, [r3, #6]
    42c4:	2b02      	cmp	r3, #2
    42c6:	d001      	beq.n	42cc <udc_req_std_dev_get_status+0x10>
		return false;
    42c8:	2300      	movs	r3, #0
    42ca:	e005      	b.n	42d8 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    42cc:	4b05      	ldr	r3, [pc, #20]	; (42e4 <udc_req_std_dev_get_status+0x28>)
    42ce:	1c18      	adds	r0, r3, #0
    42d0:	2102      	movs	r1, #2
    42d2:	4b05      	ldr	r3, [pc, #20]	; (42e8 <udc_req_std_dev_get_status+0x2c>)
    42d4:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    42d6:	2301      	movs	r3, #1
}
    42d8:	1c18      	adds	r0, r3, #0
    42da:	46bd      	mov	sp, r7
    42dc:	bd80      	pop	{r7, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	20006b9c 	.word	0x20006b9c
    42e4:	20003ff8 	.word	0x20003ff8
    42e8:	00008449 	.word	0x00008449

000042ec <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    42ec:	b580      	push	{r7, lr}
    42ee:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    42f0:	4b0c      	ldr	r3, [pc, #48]	; (4324 <udc_req_std_ep_get_status+0x38>)
    42f2:	88db      	ldrh	r3, [r3, #6]
    42f4:	2b02      	cmp	r3, #2
    42f6:	d001      	beq.n	42fc <udc_req_std_ep_get_status+0x10>
		return false;
    42f8:	2300      	movs	r3, #0
    42fa:	e00f      	b.n	431c <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    42fc:	4b09      	ldr	r3, [pc, #36]	; (4324 <udc_req_std_ep_get_status+0x38>)
    42fe:	889b      	ldrh	r3, [r3, #4]
    4300:	b2db      	uxtb	r3, r3
    4302:	1c18      	adds	r0, r3, #0
    4304:	4b08      	ldr	r3, [pc, #32]	; (4328 <udc_req_std_ep_get_status+0x3c>)
    4306:	4798      	blx	r3
    4308:	1c03      	adds	r3, r0, #0
    430a:	1c1a      	adds	r2, r3, #0
    430c:	4b07      	ldr	r3, [pc, #28]	; (432c <udc_req_std_ep_get_status+0x40>)
    430e:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4310:	4b06      	ldr	r3, [pc, #24]	; (432c <udc_req_std_ep_get_status+0x40>)
    4312:	1c18      	adds	r0, r3, #0
    4314:	2102      	movs	r1, #2
    4316:	4b06      	ldr	r3, [pc, #24]	; (4330 <udc_req_std_ep_get_status+0x44>)
    4318:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    431a:	2301      	movs	r3, #1
}
    431c:	1c18      	adds	r0, r3, #0
    431e:	46bd      	mov	sp, r7
    4320:	bd80      	pop	{r7, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	20006b9c 	.word	0x20006b9c
    4328:	00007efd 	.word	0x00007efd
    432c:	2000400c 	.word	0x2000400c
    4330:	00008449 	.word	0x00008449

00004334 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    4334:	b580      	push	{r7, lr}
    4336:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    4338:	4b0c      	ldr	r3, [pc, #48]	; (436c <udc_req_std_dev_clear_feature+0x38>)
    433a:	88db      	ldrh	r3, [r3, #6]
    433c:	2b00      	cmp	r3, #0
    433e:	d001      	beq.n	4344 <udc_req_std_dev_clear_feature+0x10>
		return false;
    4340:	2300      	movs	r3, #0
    4342:	e00f      	b.n	4364 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    4344:	4b09      	ldr	r3, [pc, #36]	; (436c <udc_req_std_dev_clear_feature+0x38>)
    4346:	885b      	ldrh	r3, [r3, #2]
    4348:	2b01      	cmp	r3, #1
    434a:	d10a      	bne.n	4362 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    434c:	4b08      	ldr	r3, [pc, #32]	; (4370 <udc_req_std_dev_clear_feature+0x3c>)
    434e:	881b      	ldrh	r3, [r3, #0]
    4350:	2202      	movs	r2, #2
    4352:	4393      	bics	r3, r2
    4354:	b29a      	uxth	r2, r3
    4356:	4b06      	ldr	r3, [pc, #24]	; (4370 <udc_req_std_dev_clear_feature+0x3c>)
    4358:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    435a:	4b06      	ldr	r3, [pc, #24]	; (4374 <udc_req_std_dev_clear_feature+0x40>)
    435c:	4798      	blx	r3
#endif
		return true;
    435e:	2301      	movs	r3, #1
    4360:	e000      	b.n	4364 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    4362:	2300      	movs	r3, #0
}
    4364:	1c18      	adds	r0, r3, #0
    4366:	46bd      	mov	sp, r7
    4368:	bd80      	pop	{r7, pc}
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	20006b9c 	.word	0x20006b9c
    4370:	20003ff8 	.word	0x20003ff8
    4374:	0000aec9 	.word	0x0000aec9

00004378 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    4378:	b580      	push	{r7, lr}
    437a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    437c:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <udc_req_std_ep_clear_feature+0x30>)
    437e:	88db      	ldrh	r3, [r3, #6]
    4380:	2b00      	cmp	r3, #0
    4382:	d001      	beq.n	4388 <udc_req_std_ep_clear_feature+0x10>
		return false;
    4384:	2300      	movs	r3, #0
    4386:	e00c      	b.n	43a2 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4388:	4b07      	ldr	r3, [pc, #28]	; (43a8 <udc_req_std_ep_clear_feature+0x30>)
    438a:	885b      	ldrh	r3, [r3, #2]
    438c:	2b00      	cmp	r3, #0
    438e:	d107      	bne.n	43a0 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4390:	4b05      	ldr	r3, [pc, #20]	; (43a8 <udc_req_std_ep_clear_feature+0x30>)
    4392:	889b      	ldrh	r3, [r3, #4]
    4394:	b2db      	uxtb	r3, r3
    4396:	1c18      	adds	r0, r3, #0
    4398:	4b04      	ldr	r3, [pc, #16]	; (43ac <udc_req_std_ep_clear_feature+0x34>)
    439a:	4798      	blx	r3
    439c:	1c03      	adds	r3, r0, #0
    439e:	e000      	b.n	43a2 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    43a0:	2300      	movs	r3, #0
}
    43a2:	1c18      	adds	r0, r3, #0
    43a4:	46bd      	mov	sp, r7
    43a6:	bd80      	pop	{r7, pc}
    43a8:	20006b9c 	.word	0x20006b9c
    43ac:	00007f81 	.word	0x00007f81

000043b0 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    43b0:	b580      	push	{r7, lr}
    43b2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    43b4:	4b0c      	ldr	r3, [pc, #48]	; (43e8 <udc_req_std_dev_set_feature+0x38>)
    43b6:	88db      	ldrh	r3, [r3, #6]
    43b8:	2b00      	cmp	r3, #0
    43ba:	d001      	beq.n	43c0 <udc_req_std_dev_set_feature+0x10>
		return false;
    43bc:	2300      	movs	r3, #0
    43be:	e010      	b.n	43e2 <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    43c0:	4b09      	ldr	r3, [pc, #36]	; (43e8 <udc_req_std_dev_set_feature+0x38>)
    43c2:	885b      	ldrh	r3, [r3, #2]
    43c4:	2b01      	cmp	r3, #1
    43c6:	d002      	beq.n	43ce <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    43c8:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    43ca:	2300      	movs	r3, #0
    43cc:	e009      	b.n	43e2 <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    43ce:	4b07      	ldr	r3, [pc, #28]	; (43ec <udc_req_std_dev_set_feature+0x3c>)
    43d0:	881b      	ldrh	r3, [r3, #0]
    43d2:	2202      	movs	r2, #2
    43d4:	4313      	orrs	r3, r2
    43d6:	b29a      	uxth	r2, r3
    43d8:	4b04      	ldr	r3, [pc, #16]	; (43ec <udc_req_std_dev_set_feature+0x3c>)
    43da:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    43dc:	4b04      	ldr	r3, [pc, #16]	; (43f0 <udc_req_std_dev_set_feature+0x40>)
    43de:	4798      	blx	r3
		return true;
    43e0:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    43e2:	1c18      	adds	r0, r3, #0
    43e4:	46bd      	mov	sp, r7
    43e6:	bd80      	pop	{r7, pc}
    43e8:	20006b9c 	.word	0x20006b9c
    43ec:	20003ff8 	.word	0x20003ff8
    43f0:	0000aeb9 	.word	0x0000aeb9

000043f4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    43f4:	b580      	push	{r7, lr}
    43f6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    43f8:	4b0d      	ldr	r3, [pc, #52]	; (4430 <udc_req_std_ep_set_feature+0x3c>)
    43fa:	88db      	ldrh	r3, [r3, #6]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d001      	beq.n	4404 <udc_req_std_ep_set_feature+0x10>
		return false;
    4400:	2300      	movs	r3, #0
    4402:	e012      	b.n	442a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4404:	4b0a      	ldr	r3, [pc, #40]	; (4430 <udc_req_std_ep_set_feature+0x3c>)
    4406:	885b      	ldrh	r3, [r3, #2]
    4408:	2b00      	cmp	r3, #0
    440a:	d10d      	bne.n	4428 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    440c:	4b08      	ldr	r3, [pc, #32]	; (4430 <udc_req_std_ep_set_feature+0x3c>)
    440e:	889b      	ldrh	r3, [r3, #4]
    4410:	b2db      	uxtb	r3, r3
    4412:	1c18      	adds	r0, r3, #0
    4414:	4b07      	ldr	r3, [pc, #28]	; (4434 <udc_req_std_ep_set_feature+0x40>)
    4416:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4418:	4b05      	ldr	r3, [pc, #20]	; (4430 <udc_req_std_ep_set_feature+0x3c>)
    441a:	889b      	ldrh	r3, [r3, #4]
    441c:	b2db      	uxtb	r3, r3
    441e:	1c18      	adds	r0, r3, #0
    4420:	4b05      	ldr	r3, [pc, #20]	; (4438 <udc_req_std_ep_set_feature+0x44>)
    4422:	4798      	blx	r3
    4424:	1c03      	adds	r3, r0, #0
    4426:	e000      	b.n	442a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    4428:	2300      	movs	r3, #0
}
    442a:	1c18      	adds	r0, r3, #0
    442c:	46bd      	mov	sp, r7
    442e:	bd80      	pop	{r7, pc}
    4430:	20006b9c 	.word	0x20006b9c
    4434:	00007c15 	.word	0x00007c15
    4438:	00007f29 	.word	0x00007f29

0000443c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    443c:	b580      	push	{r7, lr}
    443e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    4440:	4b05      	ldr	r3, [pc, #20]	; (4458 <udc_valid_address+0x1c>)
    4442:	885b      	ldrh	r3, [r3, #2]
    4444:	b2da      	uxtb	r2, r3
    4446:	237f      	movs	r3, #127	; 0x7f
    4448:	4013      	ands	r3, r2
    444a:	b2db      	uxtb	r3, r3
    444c:	1c18      	adds	r0, r3, #0
    444e:	4b03      	ldr	r3, [pc, #12]	; (445c <udc_valid_address+0x20>)
    4450:	4798      	blx	r3
}
    4452:	46bd      	mov	sp, r7
    4454:	bd80      	pop	{r7, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	20006b9c 	.word	0x20006b9c
    445c:	000083b5 	.word	0x000083b5

00004460 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    4460:	b580      	push	{r7, lr}
    4462:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    4464:	4b06      	ldr	r3, [pc, #24]	; (4480 <udc_req_std_dev_set_address+0x20>)
    4466:	88db      	ldrh	r3, [r3, #6]
    4468:	2b00      	cmp	r3, #0
    446a:	d001      	beq.n	4470 <udc_req_std_dev_set_address+0x10>
		return false;
    446c:	2300      	movs	r3, #0
    446e:	e003      	b.n	4478 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4470:	4b03      	ldr	r3, [pc, #12]	; (4480 <udc_req_std_dev_set_address+0x20>)
    4472:	4a04      	ldr	r2, [pc, #16]	; (4484 <udc_req_std_dev_set_address+0x24>)
    4474:	611a      	str	r2, [r3, #16]
	return true;
    4476:	2301      	movs	r3, #1
}
    4478:	1c18      	adds	r0, r3, #0
    447a:	46bd      	mov	sp, r7
    447c:	bd80      	pop	{r7, pc}
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	20006b9c 	.word	0x20006b9c
    4484:	0000443d 	.word	0x0000443d

00004488 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    4488:	b580      	push	{r7, lr}
    448a:	b084      	sub	sp, #16
    448c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    448e:	1dfb      	adds	r3, r7, #7
    4490:	2200      	movs	r2, #0
    4492:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4494:	4b34      	ldr	r3, [pc, #208]	; (4568 <udc_req_std_dev_get_str_desc+0xe0>)
    4496:	885b      	ldrh	r3, [r3, #2]
    4498:	1c1a      	adds	r2, r3, #0
    449a:	23ff      	movs	r3, #255	; 0xff
    449c:	4013      	ands	r3, r2
    449e:	2b01      	cmp	r3, #1
    44a0:	d00e      	beq.n	44c0 <udc_req_std_dev_get_str_desc+0x38>
    44a2:	dc02      	bgt.n	44aa <udc_req_std_dev_get_str_desc+0x22>
    44a4:	2b00      	cmp	r3, #0
    44a6:	d005      	beq.n	44b4 <udc_req_std_dev_get_str_desc+0x2c>
    44a8:	e01e      	b.n	44e8 <udc_req_std_dev_get_str_desc+0x60>
    44aa:	2b02      	cmp	r3, #2
    44ac:	d00e      	beq.n	44cc <udc_req_std_dev_get_str_desc+0x44>
    44ae:	2b03      	cmp	r3, #3
    44b0:	d012      	beq.n	44d8 <udc_req_std_dev_get_str_desc+0x50>
    44b2:	e019      	b.n	44e8 <udc_req_std_dev_get_str_desc+0x60>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    44b4:	4b2d      	ldr	r3, [pc, #180]	; (456c <udc_req_std_dev_get_str_desc+0xe4>)
    44b6:	1c18      	adds	r0, r3, #0
    44b8:	2104      	movs	r1, #4
    44ba:	4b2d      	ldr	r3, [pc, #180]	; (4570 <udc_req_std_dev_get_str_desc+0xe8>)
    44bc:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    44be:	e01b      	b.n	44f8 <udc_req_std_dev_get_str_desc+0x70>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    44c0:	1dfb      	adds	r3, r7, #7
    44c2:	220a      	movs	r2, #10
    44c4:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    44c6:	4b2b      	ldr	r3, [pc, #172]	; (4574 <udc_req_std_dev_get_str_desc+0xec>)
    44c8:	60bb      	str	r3, [r7, #8]
		break;
    44ca:	e015      	b.n	44f8 <udc_req_std_dev_get_str_desc+0x70>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    44cc:	1dfb      	adds	r3, r7, #7
    44ce:	2220      	movs	r2, #32
    44d0:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    44d2:	4b29      	ldr	r3, [pc, #164]	; (4578 <udc_req_std_dev_get_str_desc+0xf0>)
    44d4:	60bb      	str	r3, [r7, #8]
		break;
    44d6:	e00f      	b.n	44f8 <udc_req_std_dev_get_str_desc+0x70>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    44d8:	1dfb      	adds	r3, r7, #7
    44da:	220c      	movs	r2, #12
    44dc:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    44de:	4b27      	ldr	r3, [pc, #156]	; (457c <udc_req_std_dev_get_str_desc+0xf4>)
    44e0:	4798      	blx	r3
    44e2:	1c03      	adds	r3, r0, #0
    44e4:	60bb      	str	r3, [r7, #8]
		break;
    44e6:	e007      	b.n	44f8 <udc_req_std_dev_get_str_desc+0x70>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
    44e8:	4b25      	ldr	r3, [pc, #148]	; (4580 <udc_req_std_dev_get_str_desc+0xf8>)
    44ea:	4798      	blx	r3
    44ec:	1c03      	adds	r3, r0, #0
    44ee:	2b00      	cmp	r3, #0
    44f0:	d000      	beq.n	44f4 <udc_req_std_dev_get_str_desc+0x6c>
			break;
    44f2:	e001      	b.n	44f8 <udc_req_std_dev_get_str_desc+0x70>
		}
#endif
		return false;
    44f4:	2300      	movs	r3, #0
    44f6:	e033      	b.n	4560 <udc_req_std_dev_get_str_desc+0xd8>
	}

	if (str_length) {
    44f8:	1dfb      	adds	r3, r7, #7
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d02e      	beq.n	455e <udc_req_std_dev_get_str_desc+0xd6>
		for(i = 0; i < str_length; i++) {
    4500:	1c3b      	adds	r3, r7, #0
    4502:	330f      	adds	r3, #15
    4504:	2200      	movs	r2, #0
    4506:	701a      	strb	r2, [r3, #0]
    4508:	e013      	b.n	4532 <udc_req_std_dev_get_str_desc+0xaa>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    450a:	1c3b      	adds	r3, r7, #0
    450c:	330f      	adds	r3, #15
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	1c3a      	adds	r2, r7, #0
    4512:	320f      	adds	r2, #15
    4514:	7812      	ldrb	r2, [r2, #0]
    4516:	68b9      	ldr	r1, [r7, #8]
    4518:	188a      	adds	r2, r1, r2
    451a:	7812      	ldrb	r2, [r2, #0]
    451c:	4919      	ldr	r1, [pc, #100]	; (4584 <udc_req_std_dev_get_str_desc+0xfc>)
    451e:	005b      	lsls	r3, r3, #1
    4520:	18cb      	adds	r3, r1, r3
    4522:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4524:	1c3b      	adds	r3, r7, #0
    4526:	330f      	adds	r3, #15
    4528:	781a      	ldrb	r2, [r3, #0]
    452a:	1c3b      	adds	r3, r7, #0
    452c:	330f      	adds	r3, #15
    452e:	3201      	adds	r2, #1
    4530:	701a      	strb	r2, [r3, #0]
    4532:	1c3a      	adds	r2, r7, #0
    4534:	320f      	adds	r2, #15
    4536:	1dfb      	adds	r3, r7, #7
    4538:	7812      	ldrb	r2, [r2, #0]
    453a:	781b      	ldrb	r3, [r3, #0]
    453c:	429a      	cmp	r2, r3
    453e:	d3e4      	bcc.n	450a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4540:	1dfb      	adds	r3, r7, #7
    4542:	781b      	ldrb	r3, [r3, #0]
    4544:	3301      	adds	r3, #1
    4546:	b2db      	uxtb	r3, r3
    4548:	18db      	adds	r3, r3, r3
    454a:	b2da      	uxtb	r2, r3
    454c:	4b0d      	ldr	r3, [pc, #52]	; (4584 <udc_req_std_dev_get_str_desc+0xfc>)
    454e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    4550:	4b0c      	ldr	r3, [pc, #48]	; (4584 <udc_req_std_dev_get_str_desc+0xfc>)
    4552:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    4554:	4a0b      	ldr	r2, [pc, #44]	; (4584 <udc_req_std_dev_get_str_desc+0xfc>)
    4556:	1c10      	adds	r0, r2, #0
    4558:	1c19      	adds	r1, r3, #0
    455a:	4b05      	ldr	r3, [pc, #20]	; (4570 <udc_req_std_dev_get_str_desc+0xe8>)
    455c:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    455e:	2301      	movs	r3, #1
}
    4560:	1c18      	adds	r0, r3, #0
    4562:	46bd      	mov	sp, r7
    4564:	b004      	add	sp, #16
    4566:	bd80      	pop	{r7, pc}
    4568:	20006b9c 	.word	0x20006b9c
    456c:	2000023c 	.word	0x2000023c
    4570:	00008449 	.word	0x00008449
    4574:	20000240 	.word	0x20000240
    4578:	2000024c 	.word	0x2000024c
    457c:	00003f25 	.word	0x00003f25
    4580:	0000aed9 	.word	0x0000aed9
    4584:	20000270 	.word	0x20000270

00004588 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    458e:	4b39      	ldr	r3, [pc, #228]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    4590:	885a      	ldrh	r2, [r3, #2]
    4592:	1dfb      	adds	r3, r7, #7
    4594:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4596:	4b37      	ldr	r3, [pc, #220]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    4598:	885b      	ldrh	r3, [r3, #2]
    459a:	0a1b      	lsrs	r3, r3, #8
    459c:	b29b      	uxth	r3, r3
    459e:	b2db      	uxtb	r3, r3
    45a0:	2b02      	cmp	r3, #2
    45a2:	d012      	beq.n	45ca <udc_req_std_dev_get_descriptor+0x42>
    45a4:	dc02      	bgt.n	45ac <udc_req_std_dev_get_descriptor+0x24>
    45a6:	2b01      	cmp	r3, #1
    45a8:	d005      	beq.n	45b6 <udc_req_std_dev_get_descriptor+0x2e>
    45aa:	e052      	b.n	4652 <udc_req_std_dev_get_descriptor+0xca>
    45ac:	2b03      	cmp	r3, #3
    45ae:	d045      	beq.n	463c <udc_req_std_dev_get_descriptor+0xb4>
    45b0:	2b0f      	cmp	r3, #15
    45b2:	d02f      	beq.n	4614 <udc_req_std_dev_get_descriptor+0x8c>
    45b4:	e04d      	b.n	4652 <udc_req_std_dev_get_descriptor+0xca>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    45b6:	4b30      	ldr	r3, [pc, #192]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    45b8:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    45ba:	4b2f      	ldr	r3, [pc, #188]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    45bc:	681b      	ldr	r3, [r3, #0]
    45be:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    45c0:	1c10      	adds	r0, r2, #0
    45c2:	1c19      	adds	r1, r3, #0
    45c4:	4b2d      	ldr	r3, [pc, #180]	; (467c <udc_req_std_dev_get_descriptor+0xf4>)
    45c6:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    45c8:	e045      	b.n	4656 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    45ca:	4b2b      	ldr	r3, [pc, #172]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    45cc:	681b      	ldr	r3, [r3, #0]
    45ce:	7c5b      	ldrb	r3, [r3, #17]
    45d0:	1dfa      	adds	r2, r7, #7
    45d2:	7812      	ldrb	r2, [r2, #0]
    45d4:	429a      	cmp	r2, r3
    45d6:	d301      	bcc.n	45dc <udc_req_std_dev_get_descriptor+0x54>
					bNumConfigurations) {
				return false;
    45d8:	2300      	movs	r3, #0
    45da:	e047      	b.n	466c <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    45dc:	4b26      	ldr	r3, [pc, #152]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    45de:	685a      	ldr	r2, [r3, #4]
    45e0:	1dfb      	adds	r3, r7, #7
    45e2:	781b      	ldrb	r3, [r3, #0]
    45e4:	00db      	lsls	r3, r3, #3
    45e6:	18d3      	adds	r3, r2, r3
    45e8:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    45ea:	4b23      	ldr	r3, [pc, #140]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    45ec:	6859      	ldr	r1, [r3, #4]
    45ee:	1dfb      	adds	r3, r7, #7
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	00db      	lsls	r3, r3, #3
    45f4:	18cb      	adds	r3, r1, r3
    45f6:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    45f8:	7899      	ldrb	r1, [r3, #2]
    45fa:	78db      	ldrb	r3, [r3, #3]
    45fc:	021b      	lsls	r3, r3, #8
    45fe:	430b      	orrs	r3, r1
    4600:	b29b      	uxth	r3, r3
    4602:	1c10      	adds	r0, r2, #0
    4604:	1c19      	adds	r1, r3, #0
    4606:	4b1d      	ldr	r3, [pc, #116]	; (467c <udc_req_std_dev_get_descriptor+0xf4>)
    4608:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    460a:	4b1a      	ldr	r3, [pc, #104]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    460c:	689b      	ldr	r3, [r3, #8]
    460e:	2202      	movs	r2, #2
    4610:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    4612:	e020      	b.n	4656 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4614:	4b18      	ldr	r3, [pc, #96]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    4616:	689b      	ldr	r3, [r3, #8]
    4618:	2b00      	cmp	r3, #0
    461a:	d101      	bne.n	4620 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    461c:	2300      	movs	r3, #0
    461e:	e025      	b.n	466c <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4620:	4b15      	ldr	r3, [pc, #84]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    4622:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    4624:	4b14      	ldr	r3, [pc, #80]	; (4678 <udc_req_std_dev_get_descriptor+0xf0>)
    4626:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4628:	7899      	ldrb	r1, [r3, #2]
    462a:	78db      	ldrb	r3, [r3, #3]
    462c:	021b      	lsls	r3, r3, #8
    462e:	430b      	orrs	r3, r1
    4630:	b29b      	uxth	r3, r3
    4632:	1c10      	adds	r0, r2, #0
    4634:	1c19      	adds	r1, r3, #0
    4636:	4b11      	ldr	r3, [pc, #68]	; (467c <udc_req_std_dev_get_descriptor+0xf4>)
    4638:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    463a:	e00c      	b.n	4656 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    463c:	4b10      	ldr	r3, [pc, #64]	; (4680 <udc_req_std_dev_get_descriptor+0xf8>)
    463e:	4798      	blx	r3
    4640:	1c03      	adds	r3, r0, #0
    4642:	2201      	movs	r2, #1
    4644:	4053      	eors	r3, r2
    4646:	b2db      	uxtb	r3, r3
    4648:	2b00      	cmp	r3, #0
    464a:	d001      	beq.n	4650 <udc_req_std_dev_get_descriptor+0xc8>
			return false;
    464c:	2300      	movs	r3, #0
    464e:	e00d      	b.n	466c <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;
    4650:	e001      	b.n	4656 <udc_req_std_dev_get_descriptor+0xce>

	default:
		// Unknown descriptor requested
		return false;
    4652:	2300      	movs	r3, #0
    4654:	e00a      	b.n	466c <udc_req_std_dev_get_descriptor+0xe4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4656:	4b07      	ldr	r3, [pc, #28]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    4658:	88da      	ldrh	r2, [r3, #6]
    465a:	4b06      	ldr	r3, [pc, #24]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    465c:	899b      	ldrh	r3, [r3, #12]
    465e:	429a      	cmp	r2, r3
    4660:	d203      	bcs.n	466a <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    4662:	4b04      	ldr	r3, [pc, #16]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    4664:	88da      	ldrh	r2, [r3, #6]
    4666:	4b03      	ldr	r3, [pc, #12]	; (4674 <udc_req_std_dev_get_descriptor+0xec>)
    4668:	819a      	strh	r2, [r3, #12]
	}
	return true;
    466a:	2301      	movs	r3, #1
}
    466c:	1c18      	adds	r0, r3, #0
    466e:	46bd      	mov	sp, r7
    4670:	b002      	add	sp, #8
    4672:	bd80      	pop	{r7, pc}
    4674:	20006b9c 	.word	0x20006b9c
    4678:	2000014c 	.word	0x2000014c
    467c:	00008449 	.word	0x00008449
    4680:	00004489 	.word	0x00004489

00004684 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    4684:	b580      	push	{r7, lr}
    4686:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    4688:	4b07      	ldr	r3, [pc, #28]	; (46a8 <udc_req_std_dev_get_configuration+0x24>)
    468a:	88db      	ldrh	r3, [r3, #6]
    468c:	2b01      	cmp	r3, #1
    468e:	d001      	beq.n	4694 <udc_req_std_dev_get_configuration+0x10>
		return false;
    4690:	2300      	movs	r3, #0
    4692:	e005      	b.n	46a0 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4694:	4b05      	ldr	r3, [pc, #20]	; (46ac <udc_req_std_dev_get_configuration+0x28>)
    4696:	1c18      	adds	r0, r3, #0
    4698:	2101      	movs	r1, #1
    469a:	4b05      	ldr	r3, [pc, #20]	; (46b0 <udc_req_std_dev_get_configuration+0x2c>)
    469c:	4798      	blx	r3
	return true;
    469e:	2301      	movs	r3, #1
}
    46a0:	1c18      	adds	r0, r3, #0
    46a2:	46bd      	mov	sp, r7
    46a4:	bd80      	pop	{r7, pc}
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	20006b9c 	.word	0x20006b9c
    46ac:	20004000 	.word	0x20004000
    46b0:	00008449 	.word	0x00008449

000046b4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    46b4:	b580      	push	{r7, lr}
    46b6:	b082      	sub	sp, #8
    46b8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    46ba:	4b2a      	ldr	r3, [pc, #168]	; (4764 <udc_req_std_dev_set_configuration+0xb0>)
    46bc:	88db      	ldrh	r3, [r3, #6]
    46be:	2b00      	cmp	r3, #0
    46c0:	d001      	beq.n	46c6 <udc_req_std_dev_set_configuration+0x12>
		return false;
    46c2:	2300      	movs	r3, #0
    46c4:	e049      	b.n	475a <udc_req_std_dev_set_configuration+0xa6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    46c6:	4b28      	ldr	r3, [pc, #160]	; (4768 <udc_req_std_dev_set_configuration+0xb4>)
    46c8:	4798      	blx	r3
    46ca:	1c03      	adds	r3, r0, #0
    46cc:	2b00      	cmp	r3, #0
    46ce:	d101      	bne.n	46d4 <udc_req_std_dev_set_configuration+0x20>
		return false;
    46d0:	2300      	movs	r3, #0
    46d2:	e042      	b.n	475a <udc_req_std_dev_set_configuration+0xa6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    46d4:	4b23      	ldr	r3, [pc, #140]	; (4764 <udc_req_std_dev_set_configuration+0xb0>)
    46d6:	885b      	ldrh	r3, [r3, #2]
    46d8:	1c1a      	adds	r2, r3, #0
    46da:	23ff      	movs	r3, #255	; 0xff
    46dc:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    46de:	4b23      	ldr	r3, [pc, #140]	; (476c <udc_req_std_dev_set_configuration+0xb8>)
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    46e4:	429a      	cmp	r2, r3
    46e6:	dd01      	ble.n	46ec <udc_req_std_dev_set_configuration+0x38>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    46e8:	2300      	movs	r3, #0
    46ea:	e036      	b.n	475a <udc_req_std_dev_set_configuration+0xa6>
		}
	}

	// Reset current configuration
	udc_reset();
    46ec:	4b20      	ldr	r3, [pc, #128]	; (4770 <udc_req_std_dev_set_configuration+0xbc>)
    46ee:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    46f0:	4b1c      	ldr	r3, [pc, #112]	; (4764 <udc_req_std_dev_set_configuration+0xb0>)
    46f2:	885b      	ldrh	r3, [r3, #2]
    46f4:	b2da      	uxtb	r2, r3
    46f6:	4b1f      	ldr	r3, [pc, #124]	; (4774 <udc_req_std_dev_set_configuration+0xc0>)
    46f8:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    46fa:	4b1e      	ldr	r3, [pc, #120]	; (4774 <udc_req_std_dev_set_configuration+0xc0>)
    46fc:	781b      	ldrb	r3, [r3, #0]
    46fe:	2b00      	cmp	r3, #0
    4700:	d101      	bne.n	4706 <udc_req_std_dev_set_configuration+0x52>
		return true; // Default empty configuration requested
    4702:	2301      	movs	r3, #1
    4704:	e029      	b.n	475a <udc_req_std_dev_set_configuration+0xa6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4706:	4b19      	ldr	r3, [pc, #100]	; (476c <udc_req_std_dev_set_configuration+0xb8>)
    4708:	685a      	ldr	r2, [r3, #4]
    470a:	4b1a      	ldr	r3, [pc, #104]	; (4774 <udc_req_std_dev_set_configuration+0xc0>)
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	491a      	ldr	r1, [pc, #104]	; (4778 <udc_req_std_dev_set_configuration+0xc4>)
    4710:	185b      	adds	r3, r3, r1
    4712:	00db      	lsls	r3, r3, #3
    4714:	18d2      	adds	r2, r2, r3
    4716:	4b19      	ldr	r3, [pc, #100]	; (477c <udc_req_std_dev_set_configuration+0xc8>)
    4718:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    471a:	1dfb      	adds	r3, r7, #7
    471c:	2200      	movs	r2, #0
    471e:	701a      	strb	r2, [r3, #0]
    4720:	e012      	b.n	4748 <udc_req_std_dev_set_configuration+0x94>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4722:	1dfb      	adds	r3, r7, #7
    4724:	781b      	ldrb	r3, [r3, #0]
    4726:	1c18      	adds	r0, r3, #0
    4728:	2100      	movs	r1, #0
    472a:	4b15      	ldr	r3, [pc, #84]	; (4780 <udc_req_std_dev_set_configuration+0xcc>)
    472c:	4798      	blx	r3
    472e:	1c03      	adds	r3, r0, #0
    4730:	2201      	movs	r2, #1
    4732:	4053      	eors	r3, r2
    4734:	b2db      	uxtb	r3, r3
    4736:	2b00      	cmp	r3, #0
    4738:	d001      	beq.n	473e <udc_req_std_dev_set_configuration+0x8a>
			return false;
    473a:	2300      	movs	r3, #0
    473c:	e00d      	b.n	475a <udc_req_std_dev_set_configuration+0xa6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    473e:	1dfb      	adds	r3, r7, #7
    4740:	781a      	ldrb	r2, [r3, #0]
    4742:	1dfb      	adds	r3, r7, #7
    4744:	3201      	adds	r2, #1
    4746:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4748:	4b0c      	ldr	r3, [pc, #48]	; (477c <udc_req_std_dev_set_configuration+0xc8>)
    474a:	681b      	ldr	r3, [r3, #0]
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	791b      	ldrb	r3, [r3, #4]
    4750:	1dfa      	adds	r2, r7, #7
    4752:	7812      	ldrb	r2, [r2, #0]
    4754:	429a      	cmp	r2, r3
    4756:	d3e4      	bcc.n	4722 <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    4758:	2301      	movs	r3, #1
}
    475a:	1c18      	adds	r0, r3, #0
    475c:	46bd      	mov	sp, r7
    475e:	b002      	add	sp, #8
    4760:	bd80      	pop	{r7, pc}
    4762:	46c0      	nop			; (mov r8, r8)
    4764:	20006b9c 	.word	0x20006b9c
    4768:	000083dd 	.word	0x000083dd
    476c:	2000014c 	.word	0x2000014c
    4770:	000041e1 	.word	0x000041e1
    4774:	20004000 	.word	0x20004000
    4778:	1fffffff 	.word	0x1fffffff
    477c:	20004004 	.word	0x20004004
    4780:	0000411d 	.word	0x0000411d

00004784 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    4784:	b580      	push	{r7, lr}
    4786:	b082      	sub	sp, #8
    4788:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    478a:	4b21      	ldr	r3, [pc, #132]	; (4810 <udc_req_std_iface_get_setting+0x8c>)
    478c:	88db      	ldrh	r3, [r3, #6]
    478e:	2b01      	cmp	r3, #1
    4790:	d001      	beq.n	4796 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    4792:	2300      	movs	r3, #0
    4794:	e037      	b.n	4806 <udc_req_std_iface_get_setting+0x82>
	}
	if (!udc_num_configuration) {
    4796:	4b1f      	ldr	r3, [pc, #124]	; (4814 <udc_req_std_iface_get_setting+0x90>)
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	2b00      	cmp	r3, #0
    479c:	d101      	bne.n	47a2 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    479e:	2300      	movs	r3, #0
    47a0:	e031      	b.n	4806 <udc_req_std_iface_get_setting+0x82>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    47a2:	4b1b      	ldr	r3, [pc, #108]	; (4810 <udc_req_std_iface_get_setting+0x8c>)
    47a4:	889a      	ldrh	r2, [r3, #4]
    47a6:	1dfb      	adds	r3, r7, #7
    47a8:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    47aa:	4b1b      	ldr	r3, [pc, #108]	; (4818 <udc_req_std_iface_get_setting+0x94>)
    47ac:	681b      	ldr	r3, [r3, #0]
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	791b      	ldrb	r3, [r3, #4]
    47b2:	1dfa      	adds	r2, r7, #7
    47b4:	7812      	ldrb	r2, [r2, #0]
    47b6:	429a      	cmp	r2, r3
    47b8:	d301      	bcc.n	47be <udc_req_std_iface_get_setting+0x3a>
		return false;
    47ba:	2300      	movs	r3, #0
    47bc:	e023      	b.n	4806 <udc_req_std_iface_get_setting+0x82>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    47be:	1dfb      	adds	r3, r7, #7
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	1c18      	adds	r0, r3, #0
    47c4:	2100      	movs	r1, #0
    47c6:	4b15      	ldr	r3, [pc, #84]	; (481c <udc_req_std_iface_get_setting+0x98>)
    47c8:	4798      	blx	r3
    47ca:	1c03      	adds	r3, r0, #0
    47cc:	2201      	movs	r2, #1
    47ce:	4053      	eors	r3, r2
    47d0:	b2db      	uxtb	r3, r3
    47d2:	2b00      	cmp	r3, #0
    47d4:	d001      	beq.n	47da <udc_req_std_iface_get_setting+0x56>
		return false;
    47d6:	2300      	movs	r3, #0
    47d8:	e015      	b.n	4806 <udc_req_std_iface_get_setting+0x82>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    47da:	4b0f      	ldr	r3, [pc, #60]	; (4818 <udc_req_std_iface_get_setting+0x94>)
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	685a      	ldr	r2, [r3, #4]
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	009b      	lsls	r3, r3, #2
    47e6:	18d3      	adds	r3, r2, r3
    47e8:	681b      	ldr	r3, [r3, #0]
    47ea:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	68db      	ldr	r3, [r3, #12]
    47f0:	4798      	blx	r3
    47f2:	1c03      	adds	r3, r0, #0
    47f4:	1c1a      	adds	r2, r3, #0
    47f6:	4b0a      	ldr	r3, [pc, #40]	; (4820 <udc_req_std_iface_get_setting+0x9c>)
    47f8:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    47fa:	4b09      	ldr	r3, [pc, #36]	; (4820 <udc_req_std_iface_get_setting+0x9c>)
    47fc:	1c18      	adds	r0, r3, #0
    47fe:	2101      	movs	r1, #1
    4800:	4b08      	ldr	r3, [pc, #32]	; (4824 <udc_req_std_iface_get_setting+0xa0>)
    4802:	4798      	blx	r3
	return true;
    4804:	2301      	movs	r3, #1
}
    4806:	1c18      	adds	r0, r3, #0
    4808:	46bd      	mov	sp, r7
    480a:	b002      	add	sp, #8
    480c:	bd80      	pop	{r7, pc}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	20006b9c 	.word	0x20006b9c
    4814:	20004000 	.word	0x20004000
    4818:	20004004 	.word	0x20004004
    481c:	00003fcd 	.word	0x00003fcd
    4820:	20003ffc 	.word	0x20003ffc
    4824:	00008449 	.word	0x00008449

00004828 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    482e:	4b17      	ldr	r3, [pc, #92]	; (488c <udc_req_std_iface_set_setting+0x64>)
    4830:	88db      	ldrh	r3, [r3, #6]
    4832:	2b00      	cmp	r3, #0
    4834:	d001      	beq.n	483a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    4836:	2300      	movs	r3, #0
    4838:	e023      	b.n	4882 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
    483a:	4b15      	ldr	r3, [pc, #84]	; (4890 <udc_req_std_iface_set_setting+0x68>)
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d101      	bne.n	4846 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    4842:	2300      	movs	r3, #0
    4844:	e01d      	b.n	4882 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4846:	4b11      	ldr	r3, [pc, #68]	; (488c <udc_req_std_iface_set_setting+0x64>)
    4848:	889a      	ldrh	r2, [r3, #4]
    484a:	1dfb      	adds	r3, r7, #7
    484c:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    484e:	4b0f      	ldr	r3, [pc, #60]	; (488c <udc_req_std_iface_set_setting+0x64>)
    4850:	885a      	ldrh	r2, [r3, #2]
    4852:	1dbb      	adds	r3, r7, #6
    4854:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4856:	1dfb      	adds	r3, r7, #7
    4858:	781b      	ldrb	r3, [r3, #0]
    485a:	1c18      	adds	r0, r3, #0
    485c:	4b0d      	ldr	r3, [pc, #52]	; (4894 <udc_req_std_iface_set_setting+0x6c>)
    485e:	4798      	blx	r3
    4860:	1c03      	adds	r3, r0, #0
    4862:	2201      	movs	r2, #1
    4864:	4053      	eors	r3, r2
    4866:	b2db      	uxtb	r3, r3
    4868:	2b00      	cmp	r3, #0
    486a:	d001      	beq.n	4870 <udc_req_std_iface_set_setting+0x48>
		return false;
    486c:	2300      	movs	r3, #0
    486e:	e008      	b.n	4882 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4870:	1dfb      	adds	r3, r7, #7
    4872:	781a      	ldrb	r2, [r3, #0]
    4874:	1dbb      	adds	r3, r7, #6
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	1c10      	adds	r0, r2, #0
    487a:	1c19      	adds	r1, r3, #0
    487c:	4b06      	ldr	r3, [pc, #24]	; (4898 <udc_req_std_iface_set_setting+0x70>)
    487e:	4798      	blx	r3
    4880:	1c03      	adds	r3, r0, #0
}
    4882:	1c18      	adds	r0, r3, #0
    4884:	46bd      	mov	sp, r7
    4886:	b002      	add	sp, #8
    4888:	bd80      	pop	{r7, pc}
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	20006b9c 	.word	0x20006b9c
    4890:	20004000 	.word	0x20004000
    4894:	00004071 	.word	0x00004071
    4898:	0000411d 	.word	0x0000411d

0000489c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    489c:	b580      	push	{r7, lr}
    489e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    48a0:	4b48      	ldr	r3, [pc, #288]	; (49c4 <udc_reqstd+0x128>)
    48a2:	781b      	ldrb	r3, [r3, #0]
    48a4:	b2db      	uxtb	r3, r3
    48a6:	b25b      	sxtb	r3, r3
    48a8:	2b00      	cmp	r3, #0
    48aa:	da41      	bge.n	4930 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    48ac:	4b45      	ldr	r3, [pc, #276]	; (49c4 <udc_reqstd+0x128>)
    48ae:	88db      	ldrh	r3, [r3, #6]
    48b0:	2b00      	cmp	r3, #0
    48b2:	d101      	bne.n	48b8 <udc_reqstd+0x1c>
			return false; // Error for USB host
    48b4:	2300      	movs	r3, #0
    48b6:	e082      	b.n	49be <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    48b8:	4b42      	ldr	r3, [pc, #264]	; (49c4 <udc_reqstd+0x128>)
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	1c1a      	adds	r2, r3, #0
    48be:	231f      	movs	r3, #31
    48c0:	4013      	ands	r3, r2
    48c2:	d114      	bne.n	48ee <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    48c4:	4b3f      	ldr	r3, [pc, #252]	; (49c4 <udc_reqstd+0x128>)
    48c6:	785b      	ldrb	r3, [r3, #1]
    48c8:	2b06      	cmp	r3, #6
    48ca:	d008      	beq.n	48de <udc_reqstd+0x42>
    48cc:	2b08      	cmp	r3, #8
    48ce:	d00a      	beq.n	48e6 <udc_reqstd+0x4a>
    48d0:	2b00      	cmp	r3, #0
    48d2:	d000      	beq.n	48d6 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    48d4:	e00b      	b.n	48ee <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    48d6:	4b3c      	ldr	r3, [pc, #240]	; (49c8 <udc_reqstd+0x12c>)
    48d8:	4798      	blx	r3
    48da:	1c03      	adds	r3, r0, #0
    48dc:	e06f      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    48de:	4b3b      	ldr	r3, [pc, #236]	; (49cc <udc_reqstd+0x130>)
    48e0:	4798      	blx	r3
    48e2:	1c03      	adds	r3, r0, #0
    48e4:	e06b      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    48e6:	4b3a      	ldr	r3, [pc, #232]	; (49d0 <udc_reqstd+0x134>)
    48e8:	4798      	blx	r3
    48ea:	1c03      	adds	r3, r0, #0
    48ec:	e067      	b.n	49be <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    48ee:	4b35      	ldr	r3, [pc, #212]	; (49c4 <udc_reqstd+0x128>)
    48f0:	781b      	ldrb	r3, [r3, #0]
    48f2:	1c1a      	adds	r2, r3, #0
    48f4:	231f      	movs	r3, #31
    48f6:	4013      	ands	r3, r2
    48f8:	2b01      	cmp	r3, #1
    48fa:	d108      	bne.n	490e <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    48fc:	4b31      	ldr	r3, [pc, #196]	; (49c4 <udc_reqstd+0x128>)
    48fe:	785b      	ldrb	r3, [r3, #1]
    4900:	2b0a      	cmp	r3, #10
    4902:	d000      	beq.n	4906 <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    4904:	e003      	b.n	490e <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    4906:	4b33      	ldr	r3, [pc, #204]	; (49d4 <udc_reqstd+0x138>)
    4908:	4798      	blx	r3
    490a:	1c03      	adds	r3, r0, #0
    490c:	e057      	b.n	49be <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    490e:	4b2d      	ldr	r3, [pc, #180]	; (49c4 <udc_reqstd+0x128>)
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	1c1a      	adds	r2, r3, #0
    4914:	231f      	movs	r3, #31
    4916:	4013      	ands	r3, r2
    4918:	2b02      	cmp	r3, #2
    491a:	d14f      	bne.n	49bc <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    491c:	4b29      	ldr	r3, [pc, #164]	; (49c4 <udc_reqstd+0x128>)
    491e:	785b      	ldrb	r3, [r3, #1]
    4920:	2b00      	cmp	r3, #0
    4922:	d001      	beq.n	4928 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    4924:	46c0      	nop			; (mov r8, r8)
    4926:	e049      	b.n	49bc <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    4928:	4b2b      	ldr	r3, [pc, #172]	; (49d8 <udc_reqstd+0x13c>)
    492a:	4798      	blx	r3
    492c:	1c03      	adds	r3, r0, #0
    492e:	e046      	b.n	49be <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4930:	4b24      	ldr	r3, [pc, #144]	; (49c4 <udc_reqstd+0x128>)
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	1c1a      	adds	r2, r3, #0
    4936:	231f      	movs	r3, #31
    4938:	4013      	ands	r3, r2
    493a:	d119      	bne.n	4970 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    493c:	4b21      	ldr	r3, [pc, #132]	; (49c4 <udc_reqstd+0x128>)
    493e:	785b      	ldrb	r3, [r3, #1]
    4940:	2b09      	cmp	r3, #9
    4942:	d814      	bhi.n	496e <udc_reqstd+0xd2>
    4944:	009a      	lsls	r2, r3, #2
    4946:	4b25      	ldr	r3, [pc, #148]	; (49dc <udc_reqstd+0x140>)
    4948:	18d3      	adds	r3, r2, r3
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    494e:	4b24      	ldr	r3, [pc, #144]	; (49e0 <udc_reqstd+0x144>)
    4950:	4798      	blx	r3
    4952:	1c03      	adds	r3, r0, #0
    4954:	e033      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    4956:	4b23      	ldr	r3, [pc, #140]	; (49e4 <udc_reqstd+0x148>)
    4958:	4798      	blx	r3
    495a:	1c03      	adds	r3, r0, #0
    495c:	e02f      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    495e:	4b22      	ldr	r3, [pc, #136]	; (49e8 <udc_reqstd+0x14c>)
    4960:	4798      	blx	r3
    4962:	1c03      	adds	r3, r0, #0
    4964:	e02b      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    4966:	4b21      	ldr	r3, [pc, #132]	; (49ec <udc_reqstd+0x150>)
    4968:	4798      	blx	r3
    496a:	1c03      	adds	r3, r0, #0
    496c:	e027      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    496e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4970:	4b14      	ldr	r3, [pc, #80]	; (49c4 <udc_reqstd+0x128>)
    4972:	781b      	ldrb	r3, [r3, #0]
    4974:	1c1a      	adds	r2, r3, #0
    4976:	231f      	movs	r3, #31
    4978:	4013      	ands	r3, r2
    497a:	2b01      	cmp	r3, #1
    497c:	d108      	bne.n	4990 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    497e:	4b11      	ldr	r3, [pc, #68]	; (49c4 <udc_reqstd+0x128>)
    4980:	785b      	ldrb	r3, [r3, #1]
    4982:	2b0b      	cmp	r3, #11
    4984:	d000      	beq.n	4988 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    4986:	e003      	b.n	4990 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    4988:	4b19      	ldr	r3, [pc, #100]	; (49f0 <udc_reqstd+0x154>)
    498a:	4798      	blx	r3
    498c:	1c03      	adds	r3, r0, #0
    498e:	e016      	b.n	49be <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4990:	4b0c      	ldr	r3, [pc, #48]	; (49c4 <udc_reqstd+0x128>)
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	1c1a      	adds	r2, r3, #0
    4996:	231f      	movs	r3, #31
    4998:	4013      	ands	r3, r2
    499a:	2b02      	cmp	r3, #2
    499c:	d10e      	bne.n	49bc <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    499e:	4b09      	ldr	r3, [pc, #36]	; (49c4 <udc_reqstd+0x128>)
    49a0:	785b      	ldrb	r3, [r3, #1]
    49a2:	2b01      	cmp	r3, #1
    49a4:	d002      	beq.n	49ac <udc_reqstd+0x110>
    49a6:	2b03      	cmp	r3, #3
    49a8:	d004      	beq.n	49b4 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    49aa:	e007      	b.n	49bc <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    49ac:	4b11      	ldr	r3, [pc, #68]	; (49f4 <udc_reqstd+0x158>)
    49ae:	4798      	blx	r3
    49b0:	1c03      	adds	r3, r0, #0
    49b2:	e004      	b.n	49be <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    49b4:	4b10      	ldr	r3, [pc, #64]	; (49f8 <udc_reqstd+0x15c>)
    49b6:	4798      	blx	r3
    49b8:	1c03      	adds	r3, r0, #0
    49ba:	e000      	b.n	49be <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    49bc:	2300      	movs	r3, #0
}
    49be:	1c18      	adds	r0, r3, #0
    49c0:	46bd      	mov	sp, r7
    49c2:	bd80      	pop	{r7, pc}
    49c4:	20006b9c 	.word	0x20006b9c
    49c8:	000042bd 	.word	0x000042bd
    49cc:	00004589 	.word	0x00004589
    49d0:	00004685 	.word	0x00004685
    49d4:	00004785 	.word	0x00004785
    49d8:	000042ed 	.word	0x000042ed
    49dc:	0000ba74 	.word	0x0000ba74
    49e0:	00004461 	.word	0x00004461
    49e4:	00004335 	.word	0x00004335
    49e8:	000043b1 	.word	0x000043b1
    49ec:	000046b5 	.word	0x000046b5
    49f0:	00004829 	.word	0x00004829
    49f4:	00004379 	.word	0x00004379
    49f8:	000043f5 	.word	0x000043f5

000049fc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4a02:	4b22      	ldr	r3, [pc, #136]	; (4a8c <udc_req_iface+0x90>)
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d101      	bne.n	4a0e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    4a0a:	2300      	movs	r3, #0
    4a0c:	e03a      	b.n	4a84 <udc_req_iface+0x88>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4a0e:	4b20      	ldr	r3, [pc, #128]	; (4a90 <udc_req_iface+0x94>)
    4a10:	889a      	ldrh	r2, [r3, #4]
    4a12:	1dfb      	adds	r3, r7, #7
    4a14:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4a16:	4b1f      	ldr	r3, [pc, #124]	; (4a94 <udc_req_iface+0x98>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	681b      	ldr	r3, [r3, #0]
    4a1c:	791b      	ldrb	r3, [r3, #4]
    4a1e:	1dfa      	adds	r2, r7, #7
    4a20:	7812      	ldrb	r2, [r2, #0]
    4a22:	429a      	cmp	r2, r3
    4a24:	d301      	bcc.n	4a2a <udc_req_iface+0x2e>
		return false;
    4a26:	2300      	movs	r3, #0
    4a28:	e02c      	b.n	4a84 <udc_req_iface+0x88>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4a2a:	1dfb      	adds	r3, r7, #7
    4a2c:	781b      	ldrb	r3, [r3, #0]
    4a2e:	1c18      	adds	r0, r3, #0
    4a30:	2100      	movs	r1, #0
    4a32:	4b19      	ldr	r3, [pc, #100]	; (4a98 <udc_req_iface+0x9c>)
    4a34:	4798      	blx	r3
    4a36:	1c03      	adds	r3, r0, #0
    4a38:	2201      	movs	r2, #1
    4a3a:	4053      	eors	r3, r2
    4a3c:	b2db      	uxtb	r3, r3
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d001      	beq.n	4a46 <udc_req_iface+0x4a>
		return false;
    4a42:	2300      	movs	r3, #0
    4a44:	e01e      	b.n	4a84 <udc_req_iface+0x88>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4a46:	4b13      	ldr	r3, [pc, #76]	; (4a94 <udc_req_iface+0x98>)
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	685a      	ldr	r2, [r3, #4]
    4a4c:	1dfb      	adds	r3, r7, #7
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	009b      	lsls	r3, r3, #2
    4a52:	18d3      	adds	r3, r2, r3
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4a58:	683b      	ldr	r3, [r7, #0]
    4a5a:	68db      	ldr	r3, [r3, #12]
    4a5c:	4798      	blx	r3
    4a5e:	1c03      	adds	r3, r0, #0
    4a60:	1dfa      	adds	r2, r7, #7
    4a62:	7812      	ldrb	r2, [r2, #0]
    4a64:	1c10      	adds	r0, r2, #0
    4a66:	1c19      	adds	r1, r3, #0
    4a68:	4b0b      	ldr	r3, [pc, #44]	; (4a98 <udc_req_iface+0x9c>)
    4a6a:	4798      	blx	r3
    4a6c:	1c03      	adds	r3, r0, #0
    4a6e:	2201      	movs	r2, #1
    4a70:	4053      	eors	r3, r2
    4a72:	b2db      	uxtb	r3, r3
    4a74:	2b00      	cmp	r3, #0
    4a76:	d001      	beq.n	4a7c <udc_req_iface+0x80>
		return false;
    4a78:	2300      	movs	r3, #0
    4a7a:	e003      	b.n	4a84 <udc_req_iface+0x88>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4a7c:	683b      	ldr	r3, [r7, #0]
    4a7e:	689b      	ldr	r3, [r3, #8]
    4a80:	4798      	blx	r3
    4a82:	1c03      	adds	r3, r0, #0
}
    4a84:	1c18      	adds	r0, r3, #0
    4a86:	46bd      	mov	sp, r7
    4a88:	b002      	add	sp, #8
    4a8a:	bd80      	pop	{r7, pc}
    4a8c:	20004000 	.word	0x20004000
    4a90:	20006b9c 	.word	0x20006b9c
    4a94:	20004004 	.word	0x20004004
    4a98:	00003fcd 	.word	0x00003fcd

00004a9c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b082      	sub	sp, #8
    4aa0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4aa2:	4b21      	ldr	r3, [pc, #132]	; (4b28 <udc_req_ep+0x8c>)
    4aa4:	781b      	ldrb	r3, [r3, #0]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d101      	bne.n	4aae <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    4aaa:	2300      	movs	r3, #0
    4aac:	e038      	b.n	4b20 <udc_req_ep+0x84>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4aae:	4b1f      	ldr	r3, [pc, #124]	; (4b2c <udc_req_ep+0x90>)
    4ab0:	889a      	ldrh	r2, [r3, #4]
    4ab2:	1dfb      	adds	r3, r7, #7
    4ab4:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4ab6:	1dfb      	adds	r3, r7, #7
    4ab8:	2200      	movs	r2, #0
    4aba:	701a      	strb	r2, [r3, #0]
    4abc:	e027      	b.n	4b0e <udc_req_ep+0x72>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4abe:	4b1c      	ldr	r3, [pc, #112]	; (4b30 <udc_req_ep+0x94>)
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	685a      	ldr	r2, [r3, #4]
    4ac4:	1dfb      	adds	r3, r7, #7
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	009b      	lsls	r3, r3, #2
    4aca:	18d3      	adds	r3, r2, r3
    4acc:	681b      	ldr	r3, [r3, #0]
    4ace:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4ad0:	683b      	ldr	r3, [r7, #0]
    4ad2:	68db      	ldr	r3, [r3, #12]
    4ad4:	4798      	blx	r3
    4ad6:	1c03      	adds	r3, r0, #0
    4ad8:	1dfa      	adds	r2, r7, #7
    4ada:	7812      	ldrb	r2, [r2, #0]
    4adc:	1c10      	adds	r0, r2, #0
    4ade:	1c19      	adds	r1, r3, #0
    4ae0:	4b14      	ldr	r3, [pc, #80]	; (4b34 <udc_req_ep+0x98>)
    4ae2:	4798      	blx	r3
    4ae4:	1c03      	adds	r3, r0, #0
    4ae6:	2201      	movs	r2, #1
    4ae8:	4053      	eors	r3, r2
    4aea:	b2db      	uxtb	r3, r3
    4aec:	2b00      	cmp	r3, #0
    4aee:	d001      	beq.n	4af4 <udc_req_ep+0x58>
			return false;
    4af0:	2300      	movs	r3, #0
    4af2:	e015      	b.n	4b20 <udc_req_ep+0x84>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    4af4:	683b      	ldr	r3, [r7, #0]
    4af6:	689b      	ldr	r3, [r3, #8]
    4af8:	4798      	blx	r3
    4afa:	1c03      	adds	r3, r0, #0
    4afc:	2b00      	cmp	r3, #0
    4afe:	d001      	beq.n	4b04 <udc_req_ep+0x68>
			return true;
    4b00:	2301      	movs	r3, #1
    4b02:	e00d      	b.n	4b20 <udc_req_ep+0x84>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4b04:	1dfb      	adds	r3, r7, #7
    4b06:	781a      	ldrb	r2, [r3, #0]
    4b08:	1dfb      	adds	r3, r7, #7
    4b0a:	3201      	adds	r2, #1
    4b0c:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4b0e:	4b08      	ldr	r3, [pc, #32]	; (4b30 <udc_req_ep+0x94>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	791b      	ldrb	r3, [r3, #4]
    4b16:	1dfa      	adds	r2, r7, #7
    4b18:	7812      	ldrb	r2, [r2, #0]
    4b1a:	429a      	cmp	r2, r3
    4b1c:	d3cf      	bcc.n	4abe <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4b1e:	2300      	movs	r3, #0
}
    4b20:	1c18      	adds	r0, r3, #0
    4b22:	46bd      	mov	sp, r7
    4b24:	b002      	add	sp, #8
    4b26:	bd80      	pop	{r7, pc}
    4b28:	20004000 	.word	0x20004000
    4b2c:	20006b9c 	.word	0x20006b9c
    4b30:	20004004 	.word	0x20004004
    4b34:	00003fcd 	.word	0x00003fcd

00004b38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4b38:	b580      	push	{r7, lr}
    4b3a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4b3c:	4b20      	ldr	r3, [pc, #128]	; (4bc0 <udc_process_setup+0x88>)
    4b3e:	2200      	movs	r2, #0
    4b40:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    4b42:	4b1f      	ldr	r3, [pc, #124]	; (4bc0 <udc_process_setup+0x88>)
    4b44:	2200      	movs	r2, #0
    4b46:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    4b48:	4b1d      	ldr	r3, [pc, #116]	; (4bc0 <udc_process_setup+0x88>)
    4b4a:	2200      	movs	r2, #0
    4b4c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    4b4e:	4b1c      	ldr	r3, [pc, #112]	; (4bc0 <udc_process_setup+0x88>)
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	b2db      	uxtb	r3, r3
    4b54:	b25b      	sxtb	r3, r3
    4b56:	2b00      	cmp	r3, #0
    4b58:	da05      	bge.n	4b66 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4b5a:	4b19      	ldr	r3, [pc, #100]	; (4bc0 <udc_process_setup+0x88>)
    4b5c:	88db      	ldrh	r3, [r3, #6]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d101      	bne.n	4b66 <udc_process_setup+0x2e>
			return false; // Error from USB host
    4b62:	2300      	movs	r3, #0
    4b64:	e029      	b.n	4bba <udc_process_setup+0x82>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4b66:	4b16      	ldr	r3, [pc, #88]	; (4bc0 <udc_process_setup+0x88>)
    4b68:	781b      	ldrb	r3, [r3, #0]
    4b6a:	1c1a      	adds	r2, r3, #0
    4b6c:	2360      	movs	r3, #96	; 0x60
    4b6e:	4013      	ands	r3, r2
    4b70:	d106      	bne.n	4b80 <udc_process_setup+0x48>
		if (udc_reqstd()) {
    4b72:	4b14      	ldr	r3, [pc, #80]	; (4bc4 <udc_process_setup+0x8c>)
    4b74:	4798      	blx	r3
    4b76:	1c03      	adds	r3, r0, #0
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d001      	beq.n	4b80 <udc_process_setup+0x48>
			return true;
    4b7c:	2301      	movs	r3, #1
    4b7e:	e01c      	b.n	4bba <udc_process_setup+0x82>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4b80:	4b0f      	ldr	r3, [pc, #60]	; (4bc0 <udc_process_setup+0x88>)
    4b82:	781b      	ldrb	r3, [r3, #0]
    4b84:	1c1a      	adds	r2, r3, #0
    4b86:	231f      	movs	r3, #31
    4b88:	4013      	ands	r3, r2
    4b8a:	2b01      	cmp	r3, #1
    4b8c:	d106      	bne.n	4b9c <udc_process_setup+0x64>
		if (udc_req_iface()) {
    4b8e:	4b0e      	ldr	r3, [pc, #56]	; (4bc8 <udc_process_setup+0x90>)
    4b90:	4798      	blx	r3
    4b92:	1c03      	adds	r3, r0, #0
    4b94:	2b00      	cmp	r3, #0
    4b96:	d001      	beq.n	4b9c <udc_process_setup+0x64>
			return true;
    4b98:	2301      	movs	r3, #1
    4b9a:	e00e      	b.n	4bba <udc_process_setup+0x82>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4b9c:	4b08      	ldr	r3, [pc, #32]	; (4bc0 <udc_process_setup+0x88>)
    4b9e:	781b      	ldrb	r3, [r3, #0]
    4ba0:	1c1a      	adds	r2, r3, #0
    4ba2:	231f      	movs	r3, #31
    4ba4:	4013      	ands	r3, r2
    4ba6:	2b02      	cmp	r3, #2
    4ba8:	d106      	bne.n	4bb8 <udc_process_setup+0x80>
		if (udc_req_ep()) {
    4baa:	4b08      	ldr	r3, [pc, #32]	; (4bcc <udc_process_setup+0x94>)
    4bac:	4798      	blx	r3
    4bae:	1c03      	adds	r3, r0, #0
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d001      	beq.n	4bb8 <udc_process_setup+0x80>
			return true;
    4bb4:	2301      	movs	r3, #1
    4bb6:	e000      	b.n	4bba <udc_process_setup+0x82>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4bb8:	2300      	movs	r3, #0
#endif
}
    4bba:	1c18      	adds	r0, r3, #0
    4bbc:	46bd      	mov	sp, r7
    4bbe:	bd80      	pop	{r7, pc}
    4bc0:	20006b9c 	.word	0x20006b9c
    4bc4:	0000489d 	.word	0x0000489d
    4bc8:	000049fd 	.word	0x000049fd
    4bcc:	00004a9d 	.word	0x00004a9d

00004bd0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b082      	sub	sp, #8
    4bd4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    4bd6:	4b0f      	ldr	r3, [pc, #60]	; (4c14 <cpu_irq_enter_critical+0x44>)
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d112      	bne.n	4c04 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4bde:	f3ef 8310 	mrs	r3, PRIMASK
    4be2:	607b      	str	r3, [r7, #4]
  return(result);
    4be4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4be6:	2b00      	cmp	r3, #0
    4be8:	d109      	bne.n	4bfe <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4bea:	b672      	cpsid	i
    4bec:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4bf0:	4b09      	ldr	r3, [pc, #36]	; (4c18 <cpu_irq_enter_critical+0x48>)
    4bf2:	2200      	movs	r2, #0
    4bf4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4bf6:	4b09      	ldr	r3, [pc, #36]	; (4c1c <cpu_irq_enter_critical+0x4c>)
    4bf8:	2201      	movs	r2, #1
    4bfa:	701a      	strb	r2, [r3, #0]
    4bfc:	e002      	b.n	4c04 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4bfe:	4b07      	ldr	r3, [pc, #28]	; (4c1c <cpu_irq_enter_critical+0x4c>)
    4c00:	2200      	movs	r2, #0
    4c02:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4c04:	4b03      	ldr	r3, [pc, #12]	; (4c14 <cpu_irq_enter_critical+0x44>)
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	1c5a      	adds	r2, r3, #1
    4c0a:	4b02      	ldr	r3, [pc, #8]	; (4c14 <cpu_irq_enter_critical+0x44>)
    4c0c:	601a      	str	r2, [r3, #0]
}
    4c0e:	46bd      	mov	sp, r7
    4c10:	b002      	add	sp, #8
    4c12:	bd80      	pop	{r7, pc}
    4c14:	20004010 	.word	0x20004010
    4c18:	200002b4 	.word	0x200002b4
    4c1c:	20004014 	.word	0x20004014

00004c20 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4c24:	4b0a      	ldr	r3, [pc, #40]	; (4c50 <cpu_irq_leave_critical+0x30>)
    4c26:	681b      	ldr	r3, [r3, #0]
    4c28:	1e5a      	subs	r2, r3, #1
    4c2a:	4b09      	ldr	r3, [pc, #36]	; (4c50 <cpu_irq_leave_critical+0x30>)
    4c2c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4c2e:	4b08      	ldr	r3, [pc, #32]	; (4c50 <cpu_irq_leave_critical+0x30>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	2b00      	cmp	r3, #0
    4c34:	d10a      	bne.n	4c4c <cpu_irq_leave_critical+0x2c>
    4c36:	4b07      	ldr	r3, [pc, #28]	; (4c54 <cpu_irq_leave_critical+0x34>)
    4c38:	781b      	ldrb	r3, [r3, #0]
    4c3a:	b2db      	uxtb	r3, r3
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d005      	beq.n	4c4c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4c40:	4b05      	ldr	r3, [pc, #20]	; (4c58 <cpu_irq_leave_critical+0x38>)
    4c42:	2201      	movs	r2, #1
    4c44:	701a      	strb	r2, [r3, #0]
    4c46:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4c4a:	b662      	cpsie	i
	}
}
    4c4c:	46bd      	mov	sp, r7
    4c4e:	bd80      	pop	{r7, pc}
    4c50:	20004010 	.word	0x20004010
    4c54:	20004014 	.word	0x20004014
    4c58:	200002b4 	.word	0x200002b4

00004c5c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b084      	sub	sp, #16
    4c60:	af00      	add	r7, sp, #0
    4c62:	1c02      	adds	r2, r0, #0
    4c64:	1dfb      	adds	r3, r7, #7
    4c66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4c68:	1c3b      	adds	r3, r7, #0
    4c6a:	330f      	adds	r3, #15
    4c6c:	1dfa      	adds	r2, r7, #7
    4c6e:	7812      	ldrb	r2, [r2, #0]
    4c70:	09d2      	lsrs	r2, r2, #7
    4c72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4c74:	1c3b      	adds	r3, r7, #0
    4c76:	330e      	adds	r3, #14
    4c78:	1dfa      	adds	r2, r7, #7
    4c7a:	7812      	ldrb	r2, [r2, #0]
    4c7c:	0952      	lsrs	r2, r2, #5
    4c7e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4c80:	4b0d      	ldr	r3, [pc, #52]	; (4cb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4c82:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4c84:	1c3b      	adds	r3, r7, #0
    4c86:	330f      	adds	r3, #15
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d10e      	bne.n	4cac <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    4c8e:	1c3b      	adds	r3, r7, #0
    4c90:	330f      	adds	r3, #15
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	009b      	lsls	r3, r3, #2
    4c96:	2210      	movs	r2, #16
    4c98:	19d2      	adds	r2, r2, r7
    4c9a:	18d3      	adds	r3, r2, r3
    4c9c:	3b08      	subs	r3, #8
    4c9e:	681a      	ldr	r2, [r3, #0]
    4ca0:	1c3b      	adds	r3, r7, #0
    4ca2:	330e      	adds	r3, #14
    4ca4:	781b      	ldrb	r3, [r3, #0]
    4ca6:	01db      	lsls	r3, r3, #7
    4ca8:	18d3      	adds	r3, r2, r3
    4caa:	e000      	b.n	4cae <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4cac:	2300      	movs	r3, #0
	}
}
    4cae:	1c18      	adds	r0, r3, #0
    4cb0:	46bd      	mov	sp, r7
    4cb2:	b004      	add	sp, #16
    4cb4:	bd80      	pop	{r7, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	41004400 	.word	0x41004400

00004cbc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4cbc:	b580      	push	{r7, lr}
    4cbe:	b082      	sub	sp, #8
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	1c02      	adds	r2, r0, #0
    4cc4:	1dfb      	adds	r3, r7, #7
    4cc6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4cc8:	1dfb      	adds	r3, r7, #7
    4cca:	781b      	ldrb	r3, [r3, #0]
    4ccc:	1c18      	adds	r0, r3, #0
    4cce:	4b03      	ldr	r3, [pc, #12]	; (4cdc <port_get_group_from_gpio_pin+0x20>)
    4cd0:	4798      	blx	r3
    4cd2:	1c03      	adds	r3, r0, #0
}
    4cd4:	1c18      	adds	r0, r3, #0
    4cd6:	46bd      	mov	sp, r7
    4cd8:	b002      	add	sp, #8
    4cda:	bd80      	pop	{r7, pc}
    4cdc:	00004c5d 	.word	0x00004c5d

00004ce0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b082      	sub	sp, #8
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	2200      	movs	r2, #0
    4cec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4cee:	687b      	ldr	r3, [r7, #4]
    4cf0:	2201      	movs	r2, #1
    4cf2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4cf4:	687b      	ldr	r3, [r7, #4]
    4cf6:	2200      	movs	r2, #0
    4cf8:	709a      	strb	r2, [r3, #2]
}
    4cfa:	46bd      	mov	sp, r7
    4cfc:	b002      	add	sp, #8
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b084      	sub	sp, #16
    4d04:	af00      	add	r7, sp, #0
    4d06:	1c0a      	adds	r2, r1, #0
    4d08:	1dfb      	adds	r3, r7, #7
    4d0a:	1c01      	adds	r1, r0, #0
    4d0c:	7019      	strb	r1, [r3, #0]
    4d0e:	1dbb      	adds	r3, r7, #6
    4d10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4d12:	1dfb      	adds	r3, r7, #7
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	1c18      	adds	r0, r3, #0
    4d18:	4b0d      	ldr	r3, [pc, #52]	; (4d50 <port_pin_set_output_level+0x50>)
    4d1a:	4798      	blx	r3
    4d1c:	1c03      	adds	r3, r0, #0
    4d1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4d20:	1dfb      	adds	r3, r7, #7
    4d22:	781a      	ldrb	r2, [r3, #0]
    4d24:	231f      	movs	r3, #31
    4d26:	4013      	ands	r3, r2
    4d28:	2201      	movs	r2, #1
    4d2a:	1c11      	adds	r1, r2, #0
    4d2c:	4099      	lsls	r1, r3
    4d2e:	1c0b      	adds	r3, r1, #0
    4d30:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4d32:	1dbb      	adds	r3, r7, #6
    4d34:	781b      	ldrb	r3, [r3, #0]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d003      	beq.n	4d42 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	68ba      	ldr	r2, [r7, #8]
    4d3e:	619a      	str	r2, [r3, #24]
    4d40:	e002      	b.n	4d48 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4d42:	68fb      	ldr	r3, [r7, #12]
    4d44:	68ba      	ldr	r2, [r7, #8]
    4d46:	615a      	str	r2, [r3, #20]
	}
}
    4d48:	46bd      	mov	sp, r7
    4d4a:	b004      	add	sp, #16
    4d4c:	bd80      	pop	{r7, pc}
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	00004cbd 	.word	0x00004cbd

00004d54 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4d54:	b580      	push	{r7, lr}
    4d56:	b082      	sub	sp, #8
    4d58:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4d5a:	1d3b      	adds	r3, r7, #4
    4d5c:	1c18      	adds	r0, r3, #0
    4d5e:	4b0e      	ldr	r3, [pc, #56]	; (4d98 <system_board_init+0x44>)
    4d60:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4d62:	1d3b      	adds	r3, r7, #4
    4d64:	2201      	movs	r2, #1
    4d66:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4d68:	1d3b      	adds	r3, r7, #4
    4d6a:	203e      	movs	r0, #62	; 0x3e
    4d6c:	1c19      	adds	r1, r3, #0
    4d6e:	4b0b      	ldr	r3, [pc, #44]	; (4d9c <system_board_init+0x48>)
    4d70:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    4d72:	203e      	movs	r0, #62	; 0x3e
    4d74:	2101      	movs	r1, #1
    4d76:	4b0a      	ldr	r3, [pc, #40]	; (4da0 <system_board_init+0x4c>)
    4d78:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4d7a:	1d3b      	adds	r3, r7, #4
    4d7c:	2200      	movs	r2, #0
    4d7e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4d80:	1d3b      	adds	r3, r7, #4
    4d82:	2201      	movs	r2, #1
    4d84:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4d86:	1d3b      	adds	r3, r7, #4
    4d88:	200f      	movs	r0, #15
    4d8a:	1c19      	adds	r1, r3, #0
    4d8c:	4b03      	ldr	r3, [pc, #12]	; (4d9c <system_board_init+0x48>)
    4d8e:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    4d90:	46bd      	mov	sp, r7
    4d92:	b002      	add	sp, #8
    4d94:	bd80      	pop	{r7, pc}
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	00004ce1 	.word	0x00004ce1
    4d9c:	000053b5 	.word	0x000053b5
    4da0:	00004d01 	.word	0x00004d01

00004da4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4da4:	b580      	push	{r7, lr}
    4da6:	b084      	sub	sp, #16
    4da8:	af00      	add	r7, sp, #0
    4daa:	1c02      	adds	r2, r0, #0
    4dac:	1dfb      	adds	r3, r7, #7
    4dae:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4db0:	1c3b      	adds	r3, r7, #0
    4db2:	330f      	adds	r3, #15
    4db4:	1dfa      	adds	r2, r7, #7
    4db6:	7812      	ldrb	r2, [r2, #0]
    4db8:	0952      	lsrs	r2, r2, #5
    4dba:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4dbc:	1c3b      	adds	r3, r7, #0
    4dbe:	330f      	adds	r3, #15
    4dc0:	781b      	ldrb	r3, [r3, #0]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d10b      	bne.n	4dde <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4dc6:	4b08      	ldr	r3, [pc, #32]	; (4de8 <_extint_get_eic_from_channel+0x44>)
    4dc8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4dca:	1c3b      	adds	r3, r7, #0
    4dcc:	330f      	adds	r3, #15
    4dce:	781b      	ldrb	r3, [r3, #0]
    4dd0:	009b      	lsls	r3, r3, #2
    4dd2:	2210      	movs	r2, #16
    4dd4:	19d2      	adds	r2, r2, r7
    4dd6:	18d3      	adds	r3, r2, r3
    4dd8:	3b08      	subs	r3, #8
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	e000      	b.n	4de0 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    4dde:	2300      	movs	r3, #0
	}
}
    4de0:	1c18      	adds	r0, r3, #0
    4de2:	46bd      	mov	sp, r7
    4de4:	b004      	add	sp, #16
    4de6:	bd80      	pop	{r7, pc}
    4de8:	40001800 	.word	0x40001800

00004dec <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4dec:	b580      	push	{r7, lr}
    4dee:	b084      	sub	sp, #16
    4df0:	af00      	add	r7, sp, #0
    4df2:	1c02      	adds	r2, r0, #0
    4df4:	1dfb      	adds	r3, r7, #7
    4df6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	781b      	ldrb	r3, [r3, #0]
    4dfc:	1c18      	adds	r0, r3, #0
    4dfe:	4b0c      	ldr	r3, [pc, #48]	; (4e30 <extint_chan_is_detected+0x44>)
    4e00:	4798      	blx	r3
    4e02:	1c03      	adds	r3, r0, #0
    4e04:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4e06:	1dfb      	adds	r3, r7, #7
    4e08:	781a      	ldrb	r2, [r3, #0]
    4e0a:	231f      	movs	r3, #31
    4e0c:	4013      	ands	r3, r2
    4e0e:	2201      	movs	r2, #1
    4e10:	1c11      	adds	r1, r2, #0
    4e12:	4099      	lsls	r1, r3
    4e14:	1c0b      	adds	r3, r1, #0
    4e16:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4e18:	68fb      	ldr	r3, [r7, #12]
    4e1a:	691b      	ldr	r3, [r3, #16]
    4e1c:	68ba      	ldr	r2, [r7, #8]
    4e1e:	4013      	ands	r3, r2
    4e20:	1e5a      	subs	r2, r3, #1
    4e22:	4193      	sbcs	r3, r2
    4e24:	b2db      	uxtb	r3, r3
}
    4e26:	1c18      	adds	r0, r3, #0
    4e28:	46bd      	mov	sp, r7
    4e2a:	b004      	add	sp, #16
    4e2c:	bd80      	pop	{r7, pc}
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	00004da5 	.word	0x00004da5

00004e34 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b084      	sub	sp, #16
    4e38:	af00      	add	r7, sp, #0
    4e3a:	1c02      	adds	r2, r0, #0
    4e3c:	1dfb      	adds	r3, r7, #7
    4e3e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	781b      	ldrb	r3, [r3, #0]
    4e44:	1c18      	adds	r0, r3, #0
    4e46:	4b09      	ldr	r3, [pc, #36]	; (4e6c <extint_chan_clear_detected+0x38>)
    4e48:	4798      	blx	r3
    4e4a:	1c03      	adds	r3, r0, #0
    4e4c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4e4e:	1dfb      	adds	r3, r7, #7
    4e50:	781a      	ldrb	r2, [r3, #0]
    4e52:	231f      	movs	r3, #31
    4e54:	4013      	ands	r3, r2
    4e56:	2201      	movs	r2, #1
    4e58:	1c11      	adds	r1, r2, #0
    4e5a:	4099      	lsls	r1, r3
    4e5c:	1c0b      	adds	r3, r1, #0
    4e5e:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4e60:	68fb      	ldr	r3, [r7, #12]
    4e62:	68ba      	ldr	r2, [r7, #8]
    4e64:	611a      	str	r2, [r3, #16]
}
    4e66:	46bd      	mov	sp, r7
    4e68:	b004      	add	sp, #16
    4e6a:	bd80      	pop	{r7, pc}
    4e6c:	00004da5 	.word	0x00004da5

00004e70 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	1cfb      	adds	r3, r7, #3
    4e7a:	7019      	strb	r1, [r3, #0]
    4e7c:	1cbb      	adds	r3, r7, #2
    4e7e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4e80:	1cbb      	adds	r3, r7, #2
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	2b00      	cmp	r3, #0
    4e86:	d001      	beq.n	4e8c <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4e88:	2317      	movs	r3, #23
    4e8a:	e019      	b.n	4ec0 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4e8c:	1cfb      	adds	r3, r7, #3
    4e8e:	781a      	ldrb	r2, [r3, #0]
    4e90:	4b0d      	ldr	r3, [pc, #52]	; (4ec8 <extint_register_callback+0x58>)
    4e92:	0092      	lsls	r2, r2, #2
    4e94:	58d3      	ldr	r3, [r2, r3]
    4e96:	2b00      	cmp	r3, #0
    4e98:	d107      	bne.n	4eaa <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4e9a:	1cfb      	adds	r3, r7, #3
    4e9c:	781a      	ldrb	r2, [r3, #0]
    4e9e:	4b0a      	ldr	r3, [pc, #40]	; (4ec8 <extint_register_callback+0x58>)
    4ea0:	0092      	lsls	r2, r2, #2
    4ea2:	6879      	ldr	r1, [r7, #4]
    4ea4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    4ea6:	2300      	movs	r3, #0
    4ea8:	e00a      	b.n	4ec0 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4eaa:	1cfb      	adds	r3, r7, #3
    4eac:	781a      	ldrb	r2, [r3, #0]
    4eae:	4b06      	ldr	r3, [pc, #24]	; (4ec8 <extint_register_callback+0x58>)
    4eb0:	0092      	lsls	r2, r2, #2
    4eb2:	58d2      	ldr	r2, [r2, r3]
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	429a      	cmp	r2, r3
    4eb8:	d101      	bne.n	4ebe <extint_register_callback+0x4e>
		return STATUS_OK;
    4eba:	2300      	movs	r3, #0
    4ebc:	e000      	b.n	4ec0 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4ebe:	231d      	movs	r3, #29
}
    4ec0:	1c18      	adds	r0, r3, #0
    4ec2:	46bd      	mov	sp, r7
    4ec4:	b002      	add	sp, #8
    4ec6:	bd80      	pop	{r7, pc}
    4ec8:	200069a4 	.word	0x200069a4

00004ecc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4ecc:	b580      	push	{r7, lr}
    4ece:	b084      	sub	sp, #16
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	1c0a      	adds	r2, r1, #0
    4ed4:	1dfb      	adds	r3, r7, #7
    4ed6:	1c01      	adds	r1, r0, #0
    4ed8:	7019      	strb	r1, [r3, #0]
    4eda:	1dbb      	adds	r3, r7, #6
    4edc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4ede:	1dbb      	adds	r3, r7, #6
    4ee0:	781b      	ldrb	r3, [r3, #0]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d10e      	bne.n	4f04 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4ee6:	1dfb      	adds	r3, r7, #7
    4ee8:	781b      	ldrb	r3, [r3, #0]
    4eea:	1c18      	adds	r0, r3, #0
    4eec:	4b08      	ldr	r3, [pc, #32]	; (4f10 <extint_chan_enable_callback+0x44>)
    4eee:	4798      	blx	r3
    4ef0:	1c03      	adds	r3, r0, #0
    4ef2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    4ef4:	1dfb      	adds	r3, r7, #7
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	2201      	movs	r2, #1
    4efa:	409a      	lsls	r2, r3
    4efc:	68fb      	ldr	r3, [r7, #12]
    4efe:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f00:	2300      	movs	r3, #0
    4f02:	e000      	b.n	4f06 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4f04:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4f06:	1c18      	adds	r0, r3, #0
    4f08:	46bd      	mov	sp, r7
    4f0a:	b004      	add	sp, #16
    4f0c:	bd80      	pop	{r7, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	00004da5 	.word	0x00004da5

00004f14 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
    4f1a:	1c0a      	adds	r2, r1, #0
    4f1c:	1dfb      	adds	r3, r7, #7
    4f1e:	1c01      	adds	r1, r0, #0
    4f20:	7019      	strb	r1, [r3, #0]
    4f22:	1dbb      	adds	r3, r7, #6
    4f24:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4f26:	1dbb      	adds	r3, r7, #6
    4f28:	781b      	ldrb	r3, [r3, #0]
    4f2a:	2b00      	cmp	r3, #0
    4f2c:	d10e      	bne.n	4f4c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4f2e:	1dfb      	adds	r3, r7, #7
    4f30:	781b      	ldrb	r3, [r3, #0]
    4f32:	1c18      	adds	r0, r3, #0
    4f34:	4b08      	ldr	r3, [pc, #32]	; (4f58 <extint_chan_disable_callback+0x44>)
    4f36:	4798      	blx	r3
    4f38:	1c03      	adds	r3, r0, #0
    4f3a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4f3c:	1dfb      	adds	r3, r7, #7
    4f3e:	781b      	ldrb	r3, [r3, #0]
    4f40:	2201      	movs	r2, #1
    4f42:	409a      	lsls	r2, r3
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f48:	2300      	movs	r3, #0
    4f4a:	e000      	b.n	4f4e <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4f4c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4f4e:	1c18      	adds	r0, r3, #0
    4f50:	46bd      	mov	sp, r7
    4f52:	b004      	add	sp, #16
    4f54:	bd80      	pop	{r7, pc}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	00004da5 	.word	0x00004da5

00004f5c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4f5c:	b580      	push	{r7, lr}
    4f5e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4f60:	4b15      	ldr	r3, [pc, #84]	; (4fb8 <EIC_Handler+0x5c>)
    4f62:	2200      	movs	r2, #0
    4f64:	701a      	strb	r2, [r3, #0]
    4f66:	e021      	b.n	4fac <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    4f68:	4b13      	ldr	r3, [pc, #76]	; (4fb8 <EIC_Handler+0x5c>)
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	1c18      	adds	r0, r3, #0
    4f6e:	4b13      	ldr	r3, [pc, #76]	; (4fbc <EIC_Handler+0x60>)
    4f70:	4798      	blx	r3
    4f72:	1c03      	adds	r3, r0, #0
    4f74:	2b00      	cmp	r3, #0
    4f76:	d013      	beq.n	4fa0 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    4f78:	4b0f      	ldr	r3, [pc, #60]	; (4fb8 <EIC_Handler+0x5c>)
    4f7a:	781b      	ldrb	r3, [r3, #0]
    4f7c:	1c18      	adds	r0, r3, #0
    4f7e:	4b10      	ldr	r3, [pc, #64]	; (4fc0 <EIC_Handler+0x64>)
    4f80:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4f82:	4b0d      	ldr	r3, [pc, #52]	; (4fb8 <EIC_Handler+0x5c>)
    4f84:	781b      	ldrb	r3, [r3, #0]
    4f86:	1c1a      	adds	r2, r3, #0
    4f88:	4b0e      	ldr	r3, [pc, #56]	; (4fc4 <EIC_Handler+0x68>)
    4f8a:	0092      	lsls	r2, r2, #2
    4f8c:	58d3      	ldr	r3, [r2, r3]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d006      	beq.n	4fa0 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4f92:	4b09      	ldr	r3, [pc, #36]	; (4fb8 <EIC_Handler+0x5c>)
    4f94:	781b      	ldrb	r3, [r3, #0]
    4f96:	1c1a      	adds	r2, r3, #0
    4f98:	4b0a      	ldr	r3, [pc, #40]	; (4fc4 <EIC_Handler+0x68>)
    4f9a:	0092      	lsls	r2, r2, #2
    4f9c:	58d3      	ldr	r3, [r2, r3]
    4f9e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4fa0:	4b05      	ldr	r3, [pc, #20]	; (4fb8 <EIC_Handler+0x5c>)
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	3301      	adds	r3, #1
    4fa6:	b2da      	uxtb	r2, r3
    4fa8:	4b03      	ldr	r3, [pc, #12]	; (4fb8 <EIC_Handler+0x5c>)
    4faa:	701a      	strb	r2, [r3, #0]
    4fac:	4b02      	ldr	r3, [pc, #8]	; (4fb8 <EIC_Handler+0x5c>)
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	2b0f      	cmp	r3, #15
    4fb2:	d9d9      	bls.n	4f68 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4fb4:	46bd      	mov	sp, r7
    4fb6:	bd80      	pop	{r7, pc}
    4fb8:	200069a2 	.word	0x200069a2
    4fbc:	00004ded 	.word	0x00004ded
    4fc0:	00004e35 	.word	0x00004e35
    4fc4:	200069a4 	.word	0x200069a4

00004fc8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4fc8:	b580      	push	{r7, lr}
    4fca:	b082      	sub	sp, #8
    4fcc:	af00      	add	r7, sp, #0
    4fce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4fd0:	687b      	ldr	r3, [r7, #4]
    4fd2:	2200      	movs	r2, #0
    4fd4:	701a      	strb	r2, [r3, #0]
}
    4fd6:	46bd      	mov	sp, r7
    4fd8:	b002      	add	sp, #8
    4fda:	bd80      	pop	{r7, pc}

00004fdc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	1c02      	adds	r2, r0, #0
    4fe4:	6039      	str	r1, [r7, #0]
    4fe6:	1dfb      	adds	r3, r7, #7
    4fe8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4fea:	1dfb      	adds	r3, r7, #7
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	2b01      	cmp	r3, #1
    4ff0:	d00a      	beq.n	5008 <system_apb_clock_set_mask+0x2c>
    4ff2:	2b02      	cmp	r3, #2
    4ff4:	d00f      	beq.n	5016 <system_apb_clock_set_mask+0x3a>
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d114      	bne.n	5024 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4ffa:	4b0e      	ldr	r3, [pc, #56]	; (5034 <system_apb_clock_set_mask+0x58>)
    4ffc:	4a0d      	ldr	r2, [pc, #52]	; (5034 <system_apb_clock_set_mask+0x58>)
    4ffe:	6991      	ldr	r1, [r2, #24]
    5000:	683a      	ldr	r2, [r7, #0]
    5002:	430a      	orrs	r2, r1
    5004:	619a      	str	r2, [r3, #24]
			break;
    5006:	e00f      	b.n	5028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5008:	4b0a      	ldr	r3, [pc, #40]	; (5034 <system_apb_clock_set_mask+0x58>)
    500a:	4a0a      	ldr	r2, [pc, #40]	; (5034 <system_apb_clock_set_mask+0x58>)
    500c:	69d1      	ldr	r1, [r2, #28]
    500e:	683a      	ldr	r2, [r7, #0]
    5010:	430a      	orrs	r2, r1
    5012:	61da      	str	r2, [r3, #28]
			break;
    5014:	e008      	b.n	5028 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5016:	4b07      	ldr	r3, [pc, #28]	; (5034 <system_apb_clock_set_mask+0x58>)
    5018:	4a06      	ldr	r2, [pc, #24]	; (5034 <system_apb_clock_set_mask+0x58>)
    501a:	6a11      	ldr	r1, [r2, #32]
    501c:	683a      	ldr	r2, [r7, #0]
    501e:	430a      	orrs	r2, r1
    5020:	621a      	str	r2, [r3, #32]
			break;
    5022:	e001      	b.n	5028 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5024:	2317      	movs	r3, #23
    5026:	e000      	b.n	502a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5028:	2300      	movs	r3, #0
}
    502a:	1c18      	adds	r0, r3, #0
    502c:	46bd      	mov	sp, r7
    502e:	b002      	add	sp, #8
    5030:	bd80      	pop	{r7, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	40000400 	.word	0x40000400

00005038 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5038:	b580      	push	{r7, lr}
    503a:	b082      	sub	sp, #8
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2280      	movs	r2, #128	; 0x80
    5044:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	2200      	movs	r2, #0
    504a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	2201      	movs	r2, #1
    5050:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5052:	687b      	ldr	r3, [r7, #4]
    5054:	2200      	movs	r2, #0
    5056:	70da      	strb	r2, [r3, #3]
}
    5058:	46bd      	mov	sp, r7
    505a:	b002      	add	sp, #8
    505c:	bd80      	pop	{r7, pc}
    505e:	46c0      	nop			; (mov r8, r8)

00005060 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5060:	b580      	push	{r7, lr}
    5062:	b082      	sub	sp, #8
    5064:	af00      	add	r7, sp, #0
    5066:	1c02      	adds	r2, r0, #0
    5068:	1dfb      	adds	r3, r7, #7
    506a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    506c:	4b06      	ldr	r3, [pc, #24]	; (5088 <system_interrupt_enable+0x28>)
    506e:	1dfa      	adds	r2, r7, #7
    5070:	7812      	ldrb	r2, [r2, #0]
    5072:	1c11      	adds	r1, r2, #0
    5074:	221f      	movs	r2, #31
    5076:	400a      	ands	r2, r1
    5078:	2101      	movs	r1, #1
    507a:	1c08      	adds	r0, r1, #0
    507c:	4090      	lsls	r0, r2
    507e:	1c02      	adds	r2, r0, #0
    5080:	601a      	str	r2, [r3, #0]
}
    5082:	46bd      	mov	sp, r7
    5084:	b002      	add	sp, #8
    5086:	bd80      	pop	{r7, pc}
    5088:	e000e100 	.word	0xe000e100

0000508c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    508c:	b580      	push	{r7, lr}
    508e:	b084      	sub	sp, #16
    5090:	af00      	add	r7, sp, #0
    5092:	1c02      	adds	r2, r0, #0
    5094:	1dfb      	adds	r3, r7, #7
    5096:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5098:	1c3b      	adds	r3, r7, #0
    509a:	330f      	adds	r3, #15
    509c:	1dfa      	adds	r2, r7, #7
    509e:	7812      	ldrb	r2, [r2, #0]
    50a0:	0952      	lsrs	r2, r2, #5
    50a2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    50a4:	1c3b      	adds	r3, r7, #0
    50a6:	330f      	adds	r3, #15
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d10b      	bne.n	50c6 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    50ae:	4b08      	ldr	r3, [pc, #32]	; (50d0 <_extint_get_eic_from_channel+0x44>)
    50b0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    50b2:	1c3b      	adds	r3, r7, #0
    50b4:	330f      	adds	r3, #15
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	009b      	lsls	r3, r3, #2
    50ba:	2210      	movs	r2, #16
    50bc:	19d2      	adds	r2, r2, r7
    50be:	18d3      	adds	r3, r2, r3
    50c0:	3b08      	subs	r3, #8
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	e000      	b.n	50c8 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    50c6:	2300      	movs	r3, #0
	}
}
    50c8:	1c18      	adds	r0, r3, #0
    50ca:	46bd      	mov	sp, r7
    50cc:	b004      	add	sp, #16
    50ce:	bd80      	pop	{r7, pc}
    50d0:	40001800 	.word	0x40001800

000050d4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    50d4:	b580      	push	{r7, lr}
    50d6:	b082      	sub	sp, #8
    50d8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    50da:	4b0f      	ldr	r3, [pc, #60]	; (5118 <extint_is_syncing+0x44>)
    50dc:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    50de:	2300      	movs	r3, #0
    50e0:	607b      	str	r3, [r7, #4]
    50e2:	e011      	b.n	5108 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    50e4:	687b      	ldr	r3, [r7, #4]
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	2208      	movs	r2, #8
    50ea:	19d2      	adds	r2, r2, r7
    50ec:	18d3      	adds	r3, r2, r3
    50ee:	3b08      	subs	r3, #8
    50f0:	681b      	ldr	r3, [r3, #0]
    50f2:	785b      	ldrb	r3, [r3, #1]
    50f4:	b2db      	uxtb	r3, r3
    50f6:	b2db      	uxtb	r3, r3
    50f8:	b25b      	sxtb	r3, r3
    50fa:	2b00      	cmp	r3, #0
    50fc:	da01      	bge.n	5102 <extint_is_syncing+0x2e>
			return true;
    50fe:	2301      	movs	r3, #1
    5100:	e006      	b.n	5110 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5102:	687b      	ldr	r3, [r7, #4]
    5104:	3301      	adds	r3, #1
    5106:	607b      	str	r3, [r7, #4]
    5108:	687b      	ldr	r3, [r7, #4]
    510a:	2b00      	cmp	r3, #0
    510c:	d0ea      	beq.n	50e4 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    510e:	2300      	movs	r3, #0
}
    5110:	1c18      	adds	r0, r3, #0
    5112:	46bd      	mov	sp, r7
    5114:	b002      	add	sp, #8
    5116:	bd80      	pop	{r7, pc}
    5118:	40001800 	.word	0x40001800

0000511c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5122:	4b2c      	ldr	r3, [pc, #176]	; (51d4 <_system_extint_init+0xb8>)
    5124:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    5126:	2000      	movs	r0, #0
    5128:	2140      	movs	r1, #64	; 0x40
    512a:	4b2b      	ldr	r3, [pc, #172]	; (51d8 <_system_extint_init+0xbc>)
    512c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    512e:	1c3b      	adds	r3, r7, #0
    5130:	1c18      	adds	r0, r3, #0
    5132:	4b2a      	ldr	r3, [pc, #168]	; (51dc <_system_extint_init+0xc0>)
    5134:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    5136:	1c3b      	adds	r3, r7, #0
    5138:	2200      	movs	r2, #0
    513a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    513c:	1c3b      	adds	r3, r7, #0
    513e:	2005      	movs	r0, #5
    5140:	1c19      	adds	r1, r3, #0
    5142:	4b27      	ldr	r3, [pc, #156]	; (51e0 <_system_extint_init+0xc4>)
    5144:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    5146:	2005      	movs	r0, #5
    5148:	4b26      	ldr	r3, [pc, #152]	; (51e4 <_system_extint_init+0xc8>)
    514a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    514c:	2300      	movs	r3, #0
    514e:	60fb      	str	r3, [r7, #12]
    5150:	e016      	b.n	5180 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5152:	68fb      	ldr	r3, [r7, #12]
    5154:	009b      	lsls	r3, r3, #2
    5156:	2110      	movs	r1, #16
    5158:	19c9      	adds	r1, r1, r7
    515a:	18cb      	adds	r3, r1, r3
    515c:	3b0c      	subs	r3, #12
    515e:	681a      	ldr	r2, [r3, #0]
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	009b      	lsls	r3, r3, #2
    5164:	2110      	movs	r1, #16
    5166:	19c9      	adds	r1, r1, r7
    5168:	18cb      	adds	r3, r1, r3
    516a:	3b0c      	subs	r3, #12
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	781b      	ldrb	r3, [r3, #0]
    5170:	b2db      	uxtb	r3, r3
    5172:	2101      	movs	r1, #1
    5174:	430b      	orrs	r3, r1
    5176:	b2db      	uxtb	r3, r3
    5178:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    517a:	68fb      	ldr	r3, [r7, #12]
    517c:	3301      	adds	r3, #1
    517e:	60fb      	str	r3, [r7, #12]
    5180:	68fb      	ldr	r3, [r7, #12]
    5182:	2b00      	cmp	r3, #0
    5184:	d0e5      	beq.n	5152 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	4b17      	ldr	r3, [pc, #92]	; (51e8 <_system_extint_init+0xcc>)
    518a:	4798      	blx	r3
    518c:	1c03      	adds	r3, r0, #0
    518e:	2b00      	cmp	r3, #0
    5190:	d1fa      	bne.n	5188 <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5192:	1c3b      	adds	r3, r7, #0
    5194:	330b      	adds	r3, #11
    5196:	2200      	movs	r2, #0
    5198:	701a      	strb	r2, [r3, #0]
    519a:	e00d      	b.n	51b8 <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    519c:	1c3b      	adds	r3, r7, #0
    519e:	330b      	adds	r3, #11
    51a0:	781a      	ldrb	r2, [r3, #0]
    51a2:	4b12      	ldr	r3, [pc, #72]	; (51ec <_system_extint_init+0xd0>)
    51a4:	0092      	lsls	r2, r2, #2
    51a6:	2100      	movs	r1, #0
    51a8:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    51aa:	1c3b      	adds	r3, r7, #0
    51ac:	330b      	adds	r3, #11
    51ae:	781a      	ldrb	r2, [r3, #0]
    51b0:	1c3b      	adds	r3, r7, #0
    51b2:	330b      	adds	r3, #11
    51b4:	3201      	adds	r2, #1
    51b6:	701a      	strb	r2, [r3, #0]
    51b8:	1c3b      	adds	r3, r7, #0
    51ba:	330b      	adds	r3, #11
    51bc:	781b      	ldrb	r3, [r3, #0]
    51be:	2b0f      	cmp	r3, #15
    51c0:	d9ec      	bls.n	519c <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    51c2:	2004      	movs	r0, #4
    51c4:	4b0a      	ldr	r3, [pc, #40]	; (51f0 <_system_extint_init+0xd4>)
    51c6:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    51c8:	4b0a      	ldr	r3, [pc, #40]	; (51f4 <_system_extint_init+0xd8>)
    51ca:	4798      	blx	r3
}
    51cc:	46bd      	mov	sp, r7
    51ce:	b004      	add	sp, #16
    51d0:	bd80      	pop	{r7, pc}
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	40001800 	.word	0x40001800
    51d8:	00004fdd 	.word	0x00004fdd
    51dc:	00004fc9 	.word	0x00004fc9
    51e0:	000070fd 	.word	0x000070fd
    51e4:	0000713d 	.word	0x0000713d
    51e8:	000050d5 	.word	0x000050d5
    51ec:	200069a4 	.word	0x200069a4
    51f0:	00005061 	.word	0x00005061
    51f4:	000051f9 	.word	0x000051f9

000051f8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    51f8:	b580      	push	{r7, lr}
    51fa:	b082      	sub	sp, #8
    51fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    51fe:	4b14      	ldr	r3, [pc, #80]	; (5250 <_extint_enable+0x58>)
    5200:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5202:	2300      	movs	r3, #0
    5204:	607b      	str	r3, [r7, #4]
    5206:	e016      	b.n	5236 <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	009b      	lsls	r3, r3, #2
    520c:	2108      	movs	r1, #8
    520e:	19c9      	adds	r1, r1, r7
    5210:	18cb      	adds	r3, r1, r3
    5212:	3b08      	subs	r3, #8
    5214:	681a      	ldr	r2, [r3, #0]
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	009b      	lsls	r3, r3, #2
    521a:	2108      	movs	r1, #8
    521c:	19c9      	adds	r1, r1, r7
    521e:	18cb      	adds	r3, r1, r3
    5220:	3b08      	subs	r3, #8
    5222:	681b      	ldr	r3, [r3, #0]
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	b2db      	uxtb	r3, r3
    5228:	2102      	movs	r1, #2
    522a:	430b      	orrs	r3, r1
    522c:	b2db      	uxtb	r3, r3
    522e:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	3301      	adds	r3, #1
    5234:	607b      	str	r3, [r7, #4]
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	2b00      	cmp	r3, #0
    523a:	d0e5      	beq.n	5208 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    523c:	46c0      	nop			; (mov r8, r8)
    523e:	4b05      	ldr	r3, [pc, #20]	; (5254 <_extint_enable+0x5c>)
    5240:	4798      	blx	r3
    5242:	1c03      	adds	r3, r0, #0
    5244:	2b00      	cmp	r3, #0
    5246:	d1fa      	bne.n	523e <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5248:	46bd      	mov	sp, r7
    524a:	b002      	add	sp, #8
    524c:	bd80      	pop	{r7, pc}
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	40001800 	.word	0x40001800
    5254:	000050d5 	.word	0x000050d5

00005258 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5258:	b580      	push	{r7, lr}
    525a:	b082      	sub	sp, #8
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	2200      	movs	r2, #0
    5264:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	2200      	movs	r2, #0
    526a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	2201      	movs	r2, #1
    5270:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5272:	687b      	ldr	r3, [r7, #4]
    5274:	2201      	movs	r2, #1
    5276:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    5278:	687b      	ldr	r3, [r7, #4]
    527a:	2200      	movs	r2, #0
    527c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	2202      	movs	r2, #2
    5282:	72da      	strb	r2, [r3, #11]
}
    5284:	46bd      	mov	sp, r7
    5286:	b002      	add	sp, #8
    5288:	bd80      	pop	{r7, pc}
    528a:	46c0      	nop			; (mov r8, r8)

0000528c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    528c:	b590      	push	{r4, r7, lr}
    528e:	b087      	sub	sp, #28
    5290:	af00      	add	r7, sp, #0
    5292:	1c02      	adds	r2, r0, #0
    5294:	6039      	str	r1, [r7, #0]
    5296:	1dfb      	adds	r3, r7, #7
    5298:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    529a:	1c3b      	adds	r3, r7, #0
    529c:	3308      	adds	r3, #8
    529e:	1c18      	adds	r0, r3, #0
    52a0:	4b37      	ldr	r3, [pc, #220]	; (5380 <extint_chan_set_config+0xf4>)
    52a2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    52a4:	683b      	ldr	r3, [r7, #0]
    52a6:	685b      	ldr	r3, [r3, #4]
    52a8:	b2da      	uxtb	r2, r3
    52aa:	1c3b      	adds	r3, r7, #0
    52ac:	3308      	adds	r3, #8
    52ae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    52b0:	1c3b      	adds	r3, r7, #0
    52b2:	3308      	adds	r3, #8
    52b4:	2200      	movs	r2, #0
    52b6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	7a1a      	ldrb	r2, [r3, #8]
    52bc:	1c3b      	adds	r3, r7, #0
    52be:	3308      	adds	r3, #8
    52c0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	b2da      	uxtb	r2, r3
    52c8:	1c3b      	adds	r3, r7, #0
    52ca:	3308      	adds	r3, #8
    52cc:	1c10      	adds	r0, r2, #0
    52ce:	1c19      	adds	r1, r3, #0
    52d0:	4b2c      	ldr	r3, [pc, #176]	; (5384 <extint_chan_set_config+0xf8>)
    52d2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    52d4:	1dfb      	adds	r3, r7, #7
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	1c18      	adds	r0, r3, #0
    52da:	4b2b      	ldr	r3, [pc, #172]	; (5388 <extint_chan_set_config+0xfc>)
    52dc:	4798      	blx	r3
    52de:	1c03      	adds	r3, r0, #0
    52e0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    52e2:	1dfb      	adds	r3, r7, #7
    52e4:	781a      	ldrb	r2, [r3, #0]
    52e6:	2307      	movs	r3, #7
    52e8:	4013      	ands	r3, r2
    52ea:	009b      	lsls	r3, r3, #2
    52ec:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    52ee:	683b      	ldr	r3, [r7, #0]
    52f0:	7adb      	ldrb	r3, [r3, #11]
    52f2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    52f4:	683b      	ldr	r3, [r7, #0]
    52f6:	7a9b      	ldrb	r3, [r3, #10]
    52f8:	2b00      	cmp	r3, #0
    52fa:	d003      	beq.n	5304 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    52fc:	697b      	ldr	r3, [r7, #20]
    52fe:	2208      	movs	r2, #8
    5300:	4313      	orrs	r3, r2
    5302:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    5304:	1dfb      	adds	r3, r7, #7
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	08db      	lsrs	r3, r3, #3
    530a:	b2db      	uxtb	r3, r3
    530c:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    530e:	1dfb      	adds	r3, r7, #7
    5310:	781b      	ldrb	r3, [r3, #0]
    5312:	08db      	lsrs	r3, r3, #3
    5314:	b2db      	uxtb	r3, r3
    5316:	1c19      	adds	r1, r3, #0
    5318:	693b      	ldr	r3, [r7, #16]
    531a:	3106      	adds	r1, #6
    531c:	0089      	lsls	r1, r1, #2
    531e:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5320:	68f9      	ldr	r1, [r7, #12]
    5322:	200f      	movs	r0, #15
    5324:	1c04      	adds	r4, r0, #0
    5326:	408c      	lsls	r4, r1
    5328:	1c21      	adds	r1, r4, #0
    532a:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    532c:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    532e:	68fb      	ldr	r3, [r7, #12]
    5330:	6978      	ldr	r0, [r7, #20]
    5332:	1c04      	adds	r4, r0, #0
    5334:	409c      	lsls	r4, r3
    5336:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    5338:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    533a:	693b      	ldr	r3, [r7, #16]
    533c:	3206      	adds	r2, #6
    533e:	0092      	lsls	r2, r2, #2
    5340:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    5342:	683b      	ldr	r3, [r7, #0]
    5344:	7a5b      	ldrb	r3, [r3, #9]
    5346:	2b00      	cmp	r3, #0
    5348:	d00b      	beq.n	5362 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    534a:	693b      	ldr	r3, [r7, #16]
    534c:	695a      	ldr	r2, [r3, #20]
    534e:	1dfb      	adds	r3, r7, #7
    5350:	781b      	ldrb	r3, [r3, #0]
    5352:	2101      	movs	r1, #1
    5354:	1c08      	adds	r0, r1, #0
    5356:	4098      	lsls	r0, r3
    5358:	1c03      	adds	r3, r0, #0
    535a:	431a      	orrs	r2, r3
    535c:	693b      	ldr	r3, [r7, #16]
    535e:	615a      	str	r2, [r3, #20]
    5360:	e00b      	b.n	537a <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    5362:	693b      	ldr	r3, [r7, #16]
    5364:	695b      	ldr	r3, [r3, #20]
    5366:	1dfa      	adds	r2, r7, #7
    5368:	7812      	ldrb	r2, [r2, #0]
    536a:	2101      	movs	r1, #1
    536c:	1c0c      	adds	r4, r1, #0
    536e:	4094      	lsls	r4, r2
    5370:	1c22      	adds	r2, r4, #0
    5372:	43d2      	mvns	r2, r2
    5374:	401a      	ands	r2, r3
    5376:	693b      	ldr	r3, [r7, #16]
    5378:	615a      	str	r2, [r3, #20]
	}
}
    537a:	46bd      	mov	sp, r7
    537c:	b007      	add	sp, #28
    537e:	bd90      	pop	{r4, r7, pc}
    5380:	00005039 	.word	0x00005039
    5384:	000073e1 	.word	0x000073e1
    5388:	0000508d 	.word	0x0000508d

0000538c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    538c:	b580      	push	{r7, lr}
    538e:	b082      	sub	sp, #8
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	2280      	movs	r2, #128	; 0x80
    5398:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	2200      	movs	r2, #0
    539e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    53a0:	687b      	ldr	r3, [r7, #4]
    53a2:	2201      	movs	r2, #1
    53a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	2200      	movs	r2, #0
    53aa:	70da      	strb	r2, [r3, #3]
}
    53ac:	46bd      	mov	sp, r7
    53ae:	b002      	add	sp, #8
    53b0:	bd80      	pop	{r7, pc}
    53b2:	46c0      	nop			; (mov r8, r8)

000053b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b084      	sub	sp, #16
    53b8:	af00      	add	r7, sp, #0
    53ba:	1c02      	adds	r2, r0, #0
    53bc:	6039      	str	r1, [r7, #0]
    53be:	1dfb      	adds	r3, r7, #7
    53c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    53c2:	1c3b      	adds	r3, r7, #0
    53c4:	330c      	adds	r3, #12
    53c6:	1c18      	adds	r0, r3, #0
    53c8:	4b0f      	ldr	r3, [pc, #60]	; (5408 <port_pin_set_config+0x54>)
    53ca:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    53cc:	1c3b      	adds	r3, r7, #0
    53ce:	330c      	adds	r3, #12
    53d0:	2280      	movs	r2, #128	; 0x80
    53d2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	781a      	ldrb	r2, [r3, #0]
    53d8:	1c3b      	adds	r3, r7, #0
    53da:	330c      	adds	r3, #12
    53dc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    53de:	683b      	ldr	r3, [r7, #0]
    53e0:	785a      	ldrb	r2, [r3, #1]
    53e2:	1c3b      	adds	r3, r7, #0
    53e4:	330c      	adds	r3, #12
    53e6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    53e8:	683b      	ldr	r3, [r7, #0]
    53ea:	789a      	ldrb	r2, [r3, #2]
    53ec:	1c3b      	adds	r3, r7, #0
    53ee:	330c      	adds	r3, #12
    53f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    53f2:	1dfb      	adds	r3, r7, #7
    53f4:	781a      	ldrb	r2, [r3, #0]
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	330c      	adds	r3, #12
    53fa:	1c10      	adds	r0, r2, #0
    53fc:	1c19      	adds	r1, r3, #0
    53fe:	4b03      	ldr	r3, [pc, #12]	; (540c <port_pin_set_config+0x58>)
    5400:	4798      	blx	r3
}
    5402:	46bd      	mov	sp, r7
    5404:	b004      	add	sp, #16
    5406:	bd80      	pop	{r7, pc}
    5408:	0000538d 	.word	0x0000538d
    540c:	000073e1 	.word	0x000073e1

00005410 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5410:	b580      	push	{r7, lr}
    5412:	b082      	sub	sp, #8
    5414:	af00      	add	r7, sp, #0
    5416:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	2200      	movs	r2, #0
    541c:	701a      	strb	r2, [r3, #0]
}
    541e:	46bd      	mov	sp, r7
    5420:	b002      	add	sp, #8
    5422:	bd80      	pop	{r7, pc}

00005424 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5424:	b5b0      	push	{r4, r5, r7, lr}
    5426:	b08e      	sub	sp, #56	; 0x38
    5428:	af00      	add	r7, sp, #0
    542a:	6138      	str	r0, [r7, #16]
    542c:	6179      	str	r1, [r7, #20]
    542e:	60ba      	str	r2, [r7, #8]
    5430:	60fb      	str	r3, [r7, #12]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5432:	2200      	movs	r2, #0
    5434:	2300      	movs	r3, #0
    5436:	62ba      	str	r2, [r7, #40]	; 0x28
    5438:	62fb      	str	r3, [r7, #44]	; 0x2c
    543a:	2200      	movs	r2, #0
    543c:	2300      	movs	r3, #0
    543e:	623a      	str	r2, [r7, #32]
    5440:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    5442:	233f      	movs	r3, #63	; 0x3f
    5444:	637b      	str	r3, [r7, #52]	; 0x34
    5446:	e05b      	b.n	5500 <long_division+0xdc>
		bit_shift = (uint64_t)1 << i;
    5448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    544a:	3b20      	subs	r3, #32
    544c:	2b00      	cmp	r3, #0
    544e:	db05      	blt.n	545c <long_division+0x38>
    5450:	2201      	movs	r2, #1
    5452:	1c10      	adds	r0, r2, #0
    5454:	4098      	lsls	r0, r3
    5456:	1c03      	adds	r3, r0, #0
    5458:	61fb      	str	r3, [r7, #28]
    545a:	e00d      	b.n	5478 <long_division+0x54>
    545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    545e:	2220      	movs	r2, #32
    5460:	1ad3      	subs	r3, r2, r3
    5462:	2201      	movs	r2, #1
    5464:	1c11      	adds	r1, r2, #0
    5466:	40d9      	lsrs	r1, r3
    5468:	1c0b      	adds	r3, r1, #0
    546a:	2100      	movs	r1, #0
    546c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    546e:	1c08      	adds	r0, r1, #0
    5470:	4090      	lsls	r0, r2
    5472:	1c02      	adds	r2, r0, #0
    5474:	4313      	orrs	r3, r2
    5476:	61fb      	str	r3, [r7, #28]
    5478:	2201      	movs	r2, #1
    547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    547c:	1c11      	adds	r1, r2, #0
    547e:	4099      	lsls	r1, r3
    5480:	1c0b      	adds	r3, r1, #0
    5482:	61bb      	str	r3, [r7, #24]

		r = r << 1;
    5484:	6a3a      	ldr	r2, [r7, #32]
    5486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5488:	1892      	adds	r2, r2, r2
    548a:	415b      	adcs	r3, r3
    548c:	623a      	str	r2, [r7, #32]
    548e:	627b      	str	r3, [r7, #36]	; 0x24

		if (n & bit_shift) {
    5490:	693b      	ldr	r3, [r7, #16]
    5492:	69ba      	ldr	r2, [r7, #24]
    5494:	1c14      	adds	r4, r2, #0
    5496:	401c      	ands	r4, r3
    5498:	697b      	ldr	r3, [r7, #20]
    549a:	69fa      	ldr	r2, [r7, #28]
    549c:	1c15      	adds	r5, r2, #0
    549e:	401d      	ands	r5, r3
    54a0:	1c23      	adds	r3, r4, #0
    54a2:	432b      	orrs	r3, r5
    54a4:	d007      	beq.n	54b6 <long_division+0x92>
			r |= 0x01;
    54a6:	6a3b      	ldr	r3, [r7, #32]
    54a8:	2201      	movs	r2, #1
    54aa:	4313      	orrs	r3, r2
    54ac:	623b      	str	r3, [r7, #32]
    54ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54b0:	2200      	movs	r2, #0
    54b2:	4313      	orrs	r3, r2
    54b4:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (r >= d) {
    54b6:	68fa      	ldr	r2, [r7, #12]
    54b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ba:	429a      	cmp	r2, r3
    54bc:	d81d      	bhi.n	54fa <long_division+0xd6>
    54be:	68fa      	ldr	r2, [r7, #12]
    54c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54c2:	429a      	cmp	r2, r3
    54c4:	d103      	bne.n	54ce <long_division+0xaa>
    54c6:	68ba      	ldr	r2, [r7, #8]
    54c8:	6a3b      	ldr	r3, [r7, #32]
    54ca:	429a      	cmp	r2, r3
    54cc:	d815      	bhi.n	54fa <long_division+0xd6>
			r = r - d;
    54ce:	6a3a      	ldr	r2, [r7, #32]
    54d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54d2:	603a      	str	r2, [r7, #0]
    54d4:	607b      	str	r3, [r7, #4]
    54d6:	68ba      	ldr	r2, [r7, #8]
    54d8:	68fb      	ldr	r3, [r7, #12]
    54da:	6838      	ldr	r0, [r7, #0]
    54dc:	6879      	ldr	r1, [r7, #4]
    54de:	1a80      	subs	r0, r0, r2
    54e0:	4199      	sbcs	r1, r3
    54e2:	1c02      	adds	r2, r0, #0
    54e4:	1c0b      	adds	r3, r1, #0
    54e6:	623a      	str	r2, [r7, #32]
    54e8:	627b      	str	r3, [r7, #36]	; 0x24
			q |= bit_shift;
    54ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    54ec:	69bb      	ldr	r3, [r7, #24]
    54ee:	4313      	orrs	r3, r2
    54f0:	62bb      	str	r3, [r7, #40]	; 0x28
    54f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    54f4:	69fb      	ldr	r3, [r7, #28]
    54f6:	4313      	orrs	r3, r2
    54f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    54fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    54fc:	3b01      	subs	r3, #1
    54fe:	637b      	str	r3, [r7, #52]	; 0x34
    5500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5502:	2b00      	cmp	r3, #0
    5504:	daa0      	bge.n	5448 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    5506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5508:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
    550a:	1c18      	adds	r0, r3, #0
    550c:	1c21      	adds	r1, r4, #0
    550e:	46bd      	mov	sp, r7
    5510:	b00e      	add	sp, #56	; 0x38
    5512:	bdb0      	pop	{r4, r5, r7, pc}

00005514 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5514:	b580      	push	{r7, lr}
    5516:	b086      	sub	sp, #24
    5518:	af00      	add	r7, sp, #0
    551a:	60f8      	str	r0, [r7, #12]
    551c:	60b9      	str	r1, [r7, #8]
    551e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    5520:	1c3b      	adds	r3, r7, #0
    5522:	3316      	adds	r3, #22
    5524:	2200      	movs	r2, #0
    5526:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    5528:	68bb      	ldr	r3, [r7, #8]
    552a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    552c:	68bb      	ldr	r3, [r7, #8]
    552e:	085a      	lsrs	r2, r3, #1
    5530:	68fb      	ldr	r3, [r7, #12]
    5532:	429a      	cmp	r2, r3
    5534:	d201      	bcs.n	553a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5536:	2340      	movs	r3, #64	; 0x40
    5538:	e026      	b.n	5588 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    553a:	68bb      	ldr	r3, [r7, #8]
    553c:	085b      	lsrs	r3, r3, #1
    553e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    5540:	e00a      	b.n	5558 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    5542:	693a      	ldr	r2, [r7, #16]
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	1ad3      	subs	r3, r2, r3
    5548:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    554a:	1c3b      	adds	r3, r7, #0
    554c:	3316      	adds	r3, #22
    554e:	881a      	ldrh	r2, [r3, #0]
    5550:	1c3b      	adds	r3, r7, #0
    5552:	3316      	adds	r3, #22
    5554:	3201      	adds	r2, #1
    5556:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    5558:	693a      	ldr	r2, [r7, #16]
    555a:	68fb      	ldr	r3, [r7, #12]
    555c:	429a      	cmp	r2, r3
    555e:	d2f0      	bcs.n	5542 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    5560:	1c3b      	adds	r3, r7, #0
    5562:	3316      	adds	r3, #22
    5564:	1c3a      	adds	r2, r7, #0
    5566:	3216      	adds	r2, #22
    5568:	8812      	ldrh	r2, [r2, #0]
    556a:	3a01      	subs	r2, #1
    556c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    556e:	1c3b      	adds	r3, r7, #0
    5570:	3316      	adds	r3, #22
    5572:	881b      	ldrh	r3, [r3, #0]
    5574:	2bff      	cmp	r3, #255	; 0xff
    5576:	d901      	bls.n	557c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5578:	2340      	movs	r3, #64	; 0x40
    557a:	e005      	b.n	5588 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	1c3a      	adds	r2, r7, #0
    5580:	3216      	adds	r2, #22
    5582:	8812      	ldrh	r2, [r2, #0]
    5584:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    5586:	2300      	movs	r3, #0
	}
}
    5588:	1c18      	adds	r0, r3, #0
    558a:	46bd      	mov	sp, r7
    558c:	b006      	add	sp, #24
    558e:	bd80      	pop	{r7, pc}

00005590 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5590:	b5f0      	push	{r4, r5, r6, r7, lr}
    5592:	b09d      	sub	sp, #116	; 0x74
    5594:	af00      	add	r7, sp, #0
    5596:	63f8      	str	r0, [r7, #60]	; 0x3c
    5598:	63b9      	str	r1, [r7, #56]	; 0x38
    559a:	637a      	str	r2, [r7, #52]	; 0x34
    559c:	1c3a      	adds	r2, r7, #0
    559e:	3233      	adds	r2, #51	; 0x33
    55a0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    55a2:	2300      	movs	r3, #0
    55a4:	2400      	movs	r4, #0
    55a6:	65bb      	str	r3, [r7, #88]	; 0x58
    55a8:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    55aa:	2300      	movs	r3, #0
    55ac:	2400      	movs	r4, #0
    55ae:	653b      	str	r3, [r7, #80]	; 0x50
    55b0:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    55b2:	2300      	movs	r3, #0
    55b4:	2400      	movs	r4, #0
    55b6:	66bb      	str	r3, [r7, #104]	; 0x68
    55b8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    55ba:	2300      	movs	r3, #0
    55bc:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    55be:	1c3b      	adds	r3, r7, #0
    55c0:	3388      	adds	r3, #136	; 0x88
    55c2:	781a      	ldrb	r2, [r3, #0]
    55c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    55c6:	435a      	muls	r2, r3
    55c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    55ca:	429a      	cmp	r2, r3
    55cc:	d901      	bls.n	55d2 <_sercom_get_async_baud_val+0x42>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    55ce:	2340      	movs	r3, #64	; 0x40
    55d0:	e0af      	b.n	5732 <_sercom_get_async_baud_val+0x1a2>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    55d2:	1c3b      	adds	r3, r7, #0
    55d4:	3333      	adds	r3, #51	; 0x33
    55d6:	781b      	ldrb	r3, [r3, #0]
    55d8:	2b00      	cmp	r3, #0
    55da:	d143      	bne.n	5664 <_sercom_get_async_baud_val+0xd4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    55dc:	1c3b      	adds	r3, r7, #0
    55de:	3388      	adds	r3, #136	; 0x88
    55e0:	781b      	ldrb	r3, [r3, #0]
    55e2:	b2db      	uxtb	r3, r3
    55e4:	62bb      	str	r3, [r7, #40]	; 0x28
    55e6:	2300      	movs	r3, #0
    55e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    55ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    55ec:	623b      	str	r3, [r7, #32]
    55ee:	2300      	movs	r3, #0
    55f0:	627b      	str	r3, [r7, #36]	; 0x24
    55f2:	4c55      	ldr	r4, [pc, #340]	; (5748 <_sercom_get_async_baud_val+0x1b8>)
    55f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    55f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    55f8:	6a3a      	ldr	r2, [r7, #32]
    55fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    55fc:	47a0      	blx	r4
    55fe:	1c03      	adds	r3, r0, #0
    5600:	1c0c      	adds	r4, r1, #0
    5602:	001b      	movs	r3, r3
    5604:	64fb      	str	r3, [r7, #76]	; 0x4c
    5606:	2300      	movs	r3, #0
    5608:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    560c:	61bb      	str	r3, [r7, #24]
    560e:	2300      	movs	r3, #0
    5610:	61fb      	str	r3, [r7, #28]
    5612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5614:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    5616:	1c18      	adds	r0, r3, #0
    5618:	1c21      	adds	r1, r4, #0
    561a:	69ba      	ldr	r2, [r7, #24]
    561c:	69fb      	ldr	r3, [r7, #28]
    561e:	4c4b      	ldr	r4, [pc, #300]	; (574c <_sercom_get_async_baud_val+0x1bc>)
    5620:	47a0      	blx	r4
    5622:	1c03      	adds	r3, r0, #0
    5624:	1c0c      	adds	r4, r1, #0
    5626:	65bb      	str	r3, [r7, #88]	; 0x58
    5628:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    562a:	4a46      	ldr	r2, [pc, #280]	; (5744 <_sercom_get_async_baud_val+0x1b4>)
    562c:	4944      	ldr	r1, [pc, #272]	; (5740 <_sercom_get_async_baud_val+0x1b0>)
    562e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5630:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    5632:	1c0d      	adds	r5, r1, #0
    5634:	1c16      	adds	r6, r2, #0
    5636:	1aed      	subs	r5, r5, r3
    5638:	41a6      	sbcs	r6, r4
    563a:	1c2b      	adds	r3, r5, #0
    563c:	1c34      	adds	r4, r6, #0
    563e:	653b      	str	r3, [r7, #80]	; 0x50
    5640:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    5642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5644:	0c1b      	lsrs	r3, r3, #16
    5646:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5648:	0412      	lsls	r2, r2, #16
    564a:	617a      	str	r2, [r7, #20]
    564c:	697e      	ldr	r6, [r7, #20]
    564e:	431e      	orrs	r6, r3
    5650:	617e      	str	r6, [r7, #20]
    5652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5654:	041b      	lsls	r3, r3, #16
    5656:	613b      	str	r3, [r7, #16]
    5658:	697a      	ldr	r2, [r7, #20]
    565a:	0013      	movs	r3, r2
    565c:	66bb      	str	r3, [r7, #104]	; 0x68
    565e:	2300      	movs	r3, #0
    5660:	66fb      	str	r3, [r7, #108]	; 0x6c
    5662:	e060      	b.n	5726 <_sercom_get_async_baud_val+0x196>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5664:	1c3b      	adds	r3, r7, #0
    5666:	3333      	adds	r3, #51	; 0x33
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	2b01      	cmp	r3, #1
    566c:	d15b      	bne.n	5726 <_sercom_get_async_baud_val+0x196>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    566e:	1c3b      	adds	r3, r7, #0
    5670:	3367      	adds	r3, #103	; 0x67
    5672:	2200      	movs	r2, #0
    5674:	701a      	strb	r2, [r3, #0]
    5676:	e040      	b.n	56fa <_sercom_get_async_baud_val+0x16a>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    5678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    567a:	1c1d      	adds	r5, r3, #0
    567c:	2300      	movs	r3, #0
    567e:	1c1e      	adds	r6, r3, #0
    5680:	0f6b      	lsrs	r3, r5, #29
    5682:	00f2      	lsls	r2, r6, #3
    5684:	4313      	orrs	r3, r2
    5686:	64fb      	str	r3, [r7, #76]	; 0x4c
    5688:	00eb      	lsls	r3, r5, #3
    568a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    568e:	60bb      	str	r3, [r7, #8]
    5690:	2300      	movs	r3, #0
    5692:	60fb      	str	r3, [r7, #12]
    5694:	1c3b      	adds	r3, r7, #0
    5696:	3388      	adds	r3, #136	; 0x88
    5698:	781b      	ldrb	r3, [r3, #0]
    569a:	b2db      	uxtb	r3, r3
    569c:	603b      	str	r3, [r7, #0]
    569e:	2300      	movs	r3, #0
    56a0:	607b      	str	r3, [r7, #4]
    56a2:	4c29      	ldr	r4, [pc, #164]	; (5748 <_sercom_get_async_baud_val+0x1b8>)
    56a4:	68b8      	ldr	r0, [r7, #8]
    56a6:	68f9      	ldr	r1, [r7, #12]
    56a8:	683a      	ldr	r2, [r7, #0]
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	47a0      	blx	r4
    56ae:	1c03      	adds	r3, r0, #0
    56b0:	1c0c      	adds	r4, r1, #0
    56b2:	643b      	str	r3, [r7, #64]	; 0x40
    56b4:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    56b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    56b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    56ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56bc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    56be:	1c08      	adds	r0, r1, #0
    56c0:	1c11      	adds	r1, r2, #0
    56c2:	1c1a      	adds	r2, r3, #0
    56c4:	1c23      	adds	r3, r4, #0
    56c6:	4c21      	ldr	r4, [pc, #132]	; (574c <_sercom_get_async_baud_val+0x1bc>)
    56c8:	47a0      	blx	r4
    56ca:	1c03      	adds	r3, r0, #0
    56cc:	1c0c      	adds	r4, r1, #0
    56ce:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    56d0:	1c3b      	adds	r3, r7, #0
    56d2:	3367      	adds	r3, #103	; 0x67
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    56d8:	1ad3      	subs	r3, r2, r3
    56da:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    56dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    56de:	08db      	lsrs	r3, r3, #3
    56e0:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    56e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    56e4:	4b1a      	ldr	r3, [pc, #104]	; (5750 <_sercom_get_async_baud_val+0x1c0>)
    56e6:	429a      	cmp	r2, r3
    56e8:	d800      	bhi.n	56ec <_sercom_get_async_baud_val+0x15c>
				break;
    56ea:	e00b      	b.n	5704 <_sercom_get_async_baud_val+0x174>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    56ec:	1c3b      	adds	r3, r7, #0
    56ee:	3367      	adds	r3, #103	; 0x67
    56f0:	781a      	ldrb	r2, [r3, #0]
    56f2:	1c3b      	adds	r3, r7, #0
    56f4:	3367      	adds	r3, #103	; 0x67
    56f6:	3201      	adds	r2, #1
    56f8:	701a      	strb	r2, [r3, #0]
    56fa:	1c3b      	adds	r3, r7, #0
    56fc:	3367      	adds	r3, #103	; 0x67
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	2b07      	cmp	r3, #7
    5702:	d9b9      	bls.n	5678 <_sercom_get_async_baud_val+0xe8>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    5704:	1c3b      	adds	r3, r7, #0
    5706:	3367      	adds	r3, #103	; 0x67
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	2b08      	cmp	r3, #8
    570c:	d101      	bne.n	5712 <_sercom_get_async_baud_val+0x182>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    570e:	2340      	movs	r3, #64	; 0x40
    5710:	e00f      	b.n	5732 <_sercom_get_async_baud_val+0x1a2>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    5712:	1c3b      	adds	r3, r7, #0
    5714:	3367      	adds	r3, #103	; 0x67
    5716:	781b      	ldrb	r3, [r3, #0]
    5718:	035b      	lsls	r3, r3, #13
    571a:	1c1a      	adds	r2, r3, #0
    571c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    571e:	4313      	orrs	r3, r2
    5720:	66bb      	str	r3, [r7, #104]	; 0x68
    5722:	2300      	movs	r3, #0
    5724:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    5726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5728:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    572a:	b29a      	uxth	r2, r3
    572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    572e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    5730:	2300      	movs	r3, #0
}
    5732:	1c18      	adds	r0, r3, #0
    5734:	46bd      	mov	sp, r7
    5736:	b01d      	add	sp, #116	; 0x74
    5738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	46c0      	nop			; (mov r8, r8)
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	00000000 	.word	0x00000000
    5744:	00000001 	.word	0x00000001
    5748:	0000b809 	.word	0x0000b809
    574c:	00005425 	.word	0x00005425
    5750:	00001fff 	.word	0x00001fff
    5754:	46c0      	nop			; (mov r8, r8)
    5756:	46c0      	nop			; (mov r8, r8)

00005758 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5758:	b580      	push	{r7, lr}
    575a:	b084      	sub	sp, #16
    575c:	af00      	add	r7, sp, #0
    575e:	1c0a      	adds	r2, r1, #0
    5760:	1dfb      	adds	r3, r7, #7
    5762:	1c01      	adds	r1, r0, #0
    5764:	7019      	strb	r1, [r3, #0]
    5766:	1dbb      	adds	r3, r7, #6
    5768:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    576a:	4b1a      	ldr	r3, [pc, #104]	; (57d4 <sercom_set_gclk_generator+0x7c>)
    576c:	781b      	ldrb	r3, [r3, #0]
    576e:	2201      	movs	r2, #1
    5770:	4053      	eors	r3, r2
    5772:	b2db      	uxtb	r3, r3
    5774:	2b00      	cmp	r3, #0
    5776:	d103      	bne.n	5780 <sercom_set_gclk_generator+0x28>
    5778:	1dbb      	adds	r3, r7, #6
    577a:	781b      	ldrb	r3, [r3, #0]
    577c:	2b00      	cmp	r3, #0
    577e:	d01b      	beq.n	57b8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5780:	1c3b      	adds	r3, r7, #0
    5782:	330c      	adds	r3, #12
    5784:	1c18      	adds	r0, r3, #0
    5786:	4b14      	ldr	r3, [pc, #80]	; (57d8 <sercom_set_gclk_generator+0x80>)
    5788:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    578a:	1c3b      	adds	r3, r7, #0
    578c:	330c      	adds	r3, #12
    578e:	1dfa      	adds	r2, r7, #7
    5790:	7812      	ldrb	r2, [r2, #0]
    5792:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5794:	1c3b      	adds	r3, r7, #0
    5796:	330c      	adds	r3, #12
    5798:	2013      	movs	r0, #19
    579a:	1c19      	adds	r1, r3, #0
    579c:	4b0f      	ldr	r3, [pc, #60]	; (57dc <sercom_set_gclk_generator+0x84>)
    579e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    57a0:	2013      	movs	r0, #19
    57a2:	4b0f      	ldr	r3, [pc, #60]	; (57e0 <sercom_set_gclk_generator+0x88>)
    57a4:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    57a6:	4b0b      	ldr	r3, [pc, #44]	; (57d4 <sercom_set_gclk_generator+0x7c>)
    57a8:	1dfa      	adds	r2, r7, #7
    57aa:	7812      	ldrb	r2, [r2, #0]
    57ac:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    57ae:	4b09      	ldr	r3, [pc, #36]	; (57d4 <sercom_set_gclk_generator+0x7c>)
    57b0:	2201      	movs	r2, #1
    57b2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    57b4:	2300      	movs	r3, #0
    57b6:	e008      	b.n	57ca <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    57b8:	4b06      	ldr	r3, [pc, #24]	; (57d4 <sercom_set_gclk_generator+0x7c>)
    57ba:	785b      	ldrb	r3, [r3, #1]
    57bc:	1dfa      	adds	r2, r7, #7
    57be:	7812      	ldrb	r2, [r2, #0]
    57c0:	429a      	cmp	r2, r3
    57c2:	d101      	bne.n	57c8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    57c4:	2300      	movs	r3, #0
    57c6:	e000      	b.n	57ca <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    57c8:	231d      	movs	r3, #29
}
    57ca:	1c18      	adds	r0, r3, #0
    57cc:	46bd      	mov	sp, r7
    57ce:	b004      	add	sp, #16
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	20004018 	.word	0x20004018
    57d8:	00005411 	.word	0x00005411
    57dc:	000070fd 	.word	0x000070fd
    57e0:	0000713d 	.word	0x0000713d

000057e4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    57e4:	b580      	push	{r7, lr}
    57e6:	b082      	sub	sp, #8
    57e8:	af00      	add	r7, sp, #0
    57ea:	6078      	str	r0, [r7, #4]
    57ec:	1c0a      	adds	r2, r1, #0
    57ee:	1cfb      	adds	r3, r7, #3
    57f0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	4a4d      	ldr	r2, [pc, #308]	; (592c <_sercom_get_default_pad+0x148>)
    57f6:	4293      	cmp	r3, r2
    57f8:	d03f      	beq.n	587a <_sercom_get_default_pad+0x96>
    57fa:	4a4c      	ldr	r2, [pc, #304]	; (592c <_sercom_get_default_pad+0x148>)
    57fc:	4293      	cmp	r3, r2
    57fe:	d806      	bhi.n	580e <_sercom_get_default_pad+0x2a>
    5800:	4a4b      	ldr	r2, [pc, #300]	; (5930 <_sercom_get_default_pad+0x14c>)
    5802:	4293      	cmp	r3, r2
    5804:	d00f      	beq.n	5826 <_sercom_get_default_pad+0x42>
    5806:	4a4b      	ldr	r2, [pc, #300]	; (5934 <_sercom_get_default_pad+0x150>)
    5808:	4293      	cmp	r3, r2
    580a:	d021      	beq.n	5850 <_sercom_get_default_pad+0x6c>
    580c:	e089      	b.n	5922 <_sercom_get_default_pad+0x13e>
    580e:	4a4a      	ldr	r2, [pc, #296]	; (5938 <_sercom_get_default_pad+0x154>)
    5810:	4293      	cmp	r3, r2
    5812:	d100      	bne.n	5816 <_sercom_get_default_pad+0x32>
    5814:	e05b      	b.n	58ce <_sercom_get_default_pad+0xea>
    5816:	4a49      	ldr	r2, [pc, #292]	; (593c <_sercom_get_default_pad+0x158>)
    5818:	4293      	cmp	r3, r2
    581a:	d100      	bne.n	581e <_sercom_get_default_pad+0x3a>
    581c:	e06c      	b.n	58f8 <_sercom_get_default_pad+0x114>
    581e:	4a48      	ldr	r2, [pc, #288]	; (5940 <_sercom_get_default_pad+0x15c>)
    5820:	4293      	cmp	r3, r2
    5822:	d03f      	beq.n	58a4 <_sercom_get_default_pad+0xc0>
    5824:	e07d      	b.n	5922 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5826:	1cfb      	adds	r3, r7, #3
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	2b01      	cmp	r3, #1
    582c:	d00a      	beq.n	5844 <_sercom_get_default_pad+0x60>
    582e:	dc02      	bgt.n	5836 <_sercom_get_default_pad+0x52>
    5830:	2b00      	cmp	r3, #0
    5832:	d005      	beq.n	5840 <_sercom_get_default_pad+0x5c>
    5834:	e075      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5836:	2b02      	cmp	r3, #2
    5838:	d006      	beq.n	5848 <_sercom_get_default_pad+0x64>
    583a:	2b03      	cmp	r3, #3
    583c:	d006      	beq.n	584c <_sercom_get_default_pad+0x68>
    583e:	e070      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5840:	4b40      	ldr	r3, [pc, #256]	; (5944 <_sercom_get_default_pad+0x160>)
    5842:	e06f      	b.n	5924 <_sercom_get_default_pad+0x140>
    5844:	4b40      	ldr	r3, [pc, #256]	; (5948 <_sercom_get_default_pad+0x164>)
    5846:	e06d      	b.n	5924 <_sercom_get_default_pad+0x140>
    5848:	4b40      	ldr	r3, [pc, #256]	; (594c <_sercom_get_default_pad+0x168>)
    584a:	e06b      	b.n	5924 <_sercom_get_default_pad+0x140>
    584c:	4b40      	ldr	r3, [pc, #256]	; (5950 <_sercom_get_default_pad+0x16c>)
    584e:	e069      	b.n	5924 <_sercom_get_default_pad+0x140>
    5850:	1cfb      	adds	r3, r7, #3
    5852:	781b      	ldrb	r3, [r3, #0]
    5854:	2b01      	cmp	r3, #1
    5856:	d00a      	beq.n	586e <_sercom_get_default_pad+0x8a>
    5858:	dc02      	bgt.n	5860 <_sercom_get_default_pad+0x7c>
    585a:	2b00      	cmp	r3, #0
    585c:	d005      	beq.n	586a <_sercom_get_default_pad+0x86>
    585e:	e060      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5860:	2b02      	cmp	r3, #2
    5862:	d006      	beq.n	5872 <_sercom_get_default_pad+0x8e>
    5864:	2b03      	cmp	r3, #3
    5866:	d006      	beq.n	5876 <_sercom_get_default_pad+0x92>
    5868:	e05b      	b.n	5922 <_sercom_get_default_pad+0x13e>
    586a:	2303      	movs	r3, #3
    586c:	e05a      	b.n	5924 <_sercom_get_default_pad+0x140>
    586e:	4b39      	ldr	r3, [pc, #228]	; (5954 <_sercom_get_default_pad+0x170>)
    5870:	e058      	b.n	5924 <_sercom_get_default_pad+0x140>
    5872:	4b39      	ldr	r3, [pc, #228]	; (5958 <_sercom_get_default_pad+0x174>)
    5874:	e056      	b.n	5924 <_sercom_get_default_pad+0x140>
    5876:	4b39      	ldr	r3, [pc, #228]	; (595c <_sercom_get_default_pad+0x178>)
    5878:	e054      	b.n	5924 <_sercom_get_default_pad+0x140>
    587a:	1cfb      	adds	r3, r7, #3
    587c:	781b      	ldrb	r3, [r3, #0]
    587e:	2b01      	cmp	r3, #1
    5880:	d00a      	beq.n	5898 <_sercom_get_default_pad+0xb4>
    5882:	dc02      	bgt.n	588a <_sercom_get_default_pad+0xa6>
    5884:	2b00      	cmp	r3, #0
    5886:	d005      	beq.n	5894 <_sercom_get_default_pad+0xb0>
    5888:	e04b      	b.n	5922 <_sercom_get_default_pad+0x13e>
    588a:	2b02      	cmp	r3, #2
    588c:	d006      	beq.n	589c <_sercom_get_default_pad+0xb8>
    588e:	2b03      	cmp	r3, #3
    5890:	d006      	beq.n	58a0 <_sercom_get_default_pad+0xbc>
    5892:	e046      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5894:	4b32      	ldr	r3, [pc, #200]	; (5960 <_sercom_get_default_pad+0x17c>)
    5896:	e045      	b.n	5924 <_sercom_get_default_pad+0x140>
    5898:	4b32      	ldr	r3, [pc, #200]	; (5964 <_sercom_get_default_pad+0x180>)
    589a:	e043      	b.n	5924 <_sercom_get_default_pad+0x140>
    589c:	4b32      	ldr	r3, [pc, #200]	; (5968 <_sercom_get_default_pad+0x184>)
    589e:	e041      	b.n	5924 <_sercom_get_default_pad+0x140>
    58a0:	4b32      	ldr	r3, [pc, #200]	; (596c <_sercom_get_default_pad+0x188>)
    58a2:	e03f      	b.n	5924 <_sercom_get_default_pad+0x140>
    58a4:	1cfb      	adds	r3, r7, #3
    58a6:	781b      	ldrb	r3, [r3, #0]
    58a8:	2b01      	cmp	r3, #1
    58aa:	d00a      	beq.n	58c2 <_sercom_get_default_pad+0xde>
    58ac:	dc02      	bgt.n	58b4 <_sercom_get_default_pad+0xd0>
    58ae:	2b00      	cmp	r3, #0
    58b0:	d005      	beq.n	58be <_sercom_get_default_pad+0xda>
    58b2:	e036      	b.n	5922 <_sercom_get_default_pad+0x13e>
    58b4:	2b02      	cmp	r3, #2
    58b6:	d006      	beq.n	58c6 <_sercom_get_default_pad+0xe2>
    58b8:	2b03      	cmp	r3, #3
    58ba:	d006      	beq.n	58ca <_sercom_get_default_pad+0xe6>
    58bc:	e031      	b.n	5922 <_sercom_get_default_pad+0x13e>
    58be:	4b2c      	ldr	r3, [pc, #176]	; (5970 <_sercom_get_default_pad+0x18c>)
    58c0:	e030      	b.n	5924 <_sercom_get_default_pad+0x140>
    58c2:	4b2c      	ldr	r3, [pc, #176]	; (5974 <_sercom_get_default_pad+0x190>)
    58c4:	e02e      	b.n	5924 <_sercom_get_default_pad+0x140>
    58c6:	4b2c      	ldr	r3, [pc, #176]	; (5978 <_sercom_get_default_pad+0x194>)
    58c8:	e02c      	b.n	5924 <_sercom_get_default_pad+0x140>
    58ca:	4b2c      	ldr	r3, [pc, #176]	; (597c <_sercom_get_default_pad+0x198>)
    58cc:	e02a      	b.n	5924 <_sercom_get_default_pad+0x140>
    58ce:	1cfb      	adds	r3, r7, #3
    58d0:	781b      	ldrb	r3, [r3, #0]
    58d2:	2b01      	cmp	r3, #1
    58d4:	d00a      	beq.n	58ec <_sercom_get_default_pad+0x108>
    58d6:	dc02      	bgt.n	58de <_sercom_get_default_pad+0xfa>
    58d8:	2b00      	cmp	r3, #0
    58da:	d005      	beq.n	58e8 <_sercom_get_default_pad+0x104>
    58dc:	e021      	b.n	5922 <_sercom_get_default_pad+0x13e>
    58de:	2b02      	cmp	r3, #2
    58e0:	d006      	beq.n	58f0 <_sercom_get_default_pad+0x10c>
    58e2:	2b03      	cmp	r3, #3
    58e4:	d006      	beq.n	58f4 <_sercom_get_default_pad+0x110>
    58e6:	e01c      	b.n	5922 <_sercom_get_default_pad+0x13e>
    58e8:	4b25      	ldr	r3, [pc, #148]	; (5980 <_sercom_get_default_pad+0x19c>)
    58ea:	e01b      	b.n	5924 <_sercom_get_default_pad+0x140>
    58ec:	4b25      	ldr	r3, [pc, #148]	; (5984 <_sercom_get_default_pad+0x1a0>)
    58ee:	e019      	b.n	5924 <_sercom_get_default_pad+0x140>
    58f0:	4b25      	ldr	r3, [pc, #148]	; (5988 <_sercom_get_default_pad+0x1a4>)
    58f2:	e017      	b.n	5924 <_sercom_get_default_pad+0x140>
    58f4:	4b25      	ldr	r3, [pc, #148]	; (598c <_sercom_get_default_pad+0x1a8>)
    58f6:	e015      	b.n	5924 <_sercom_get_default_pad+0x140>
    58f8:	1cfb      	adds	r3, r7, #3
    58fa:	781b      	ldrb	r3, [r3, #0]
    58fc:	2b01      	cmp	r3, #1
    58fe:	d00a      	beq.n	5916 <_sercom_get_default_pad+0x132>
    5900:	dc02      	bgt.n	5908 <_sercom_get_default_pad+0x124>
    5902:	2b00      	cmp	r3, #0
    5904:	d005      	beq.n	5912 <_sercom_get_default_pad+0x12e>
    5906:	e00c      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5908:	2b02      	cmp	r3, #2
    590a:	d006      	beq.n	591a <_sercom_get_default_pad+0x136>
    590c:	2b03      	cmp	r3, #3
    590e:	d006      	beq.n	591e <_sercom_get_default_pad+0x13a>
    5910:	e007      	b.n	5922 <_sercom_get_default_pad+0x13e>
    5912:	4b1f      	ldr	r3, [pc, #124]	; (5990 <_sercom_get_default_pad+0x1ac>)
    5914:	e006      	b.n	5924 <_sercom_get_default_pad+0x140>
    5916:	4b1f      	ldr	r3, [pc, #124]	; (5994 <_sercom_get_default_pad+0x1b0>)
    5918:	e004      	b.n	5924 <_sercom_get_default_pad+0x140>
    591a:	4b1f      	ldr	r3, [pc, #124]	; (5998 <_sercom_get_default_pad+0x1b4>)
    591c:	e002      	b.n	5924 <_sercom_get_default_pad+0x140>
    591e:	4b1f      	ldr	r3, [pc, #124]	; (599c <_sercom_get_default_pad+0x1b8>)
    5920:	e000      	b.n	5924 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    5922:	2300      	movs	r3, #0
}
    5924:	1c18      	adds	r0, r3, #0
    5926:	46bd      	mov	sp, r7
    5928:	b002      	add	sp, #8
    592a:	bd80      	pop	{r7, pc}
    592c:	42001000 	.word	0x42001000
    5930:	42000800 	.word	0x42000800
    5934:	42000c00 	.word	0x42000c00
    5938:	42001800 	.word	0x42001800
    593c:	42001c00 	.word	0x42001c00
    5940:	42001400 	.word	0x42001400
    5944:	00040003 	.word	0x00040003
    5948:	00050003 	.word	0x00050003
    594c:	00060003 	.word	0x00060003
    5950:	00070003 	.word	0x00070003
    5954:	00010003 	.word	0x00010003
    5958:	001e0003 	.word	0x001e0003
    595c:	001f0003 	.word	0x001f0003
    5960:	00080003 	.word	0x00080003
    5964:	00090003 	.word	0x00090003
    5968:	000a0003 	.word	0x000a0003
    596c:	000b0003 	.word	0x000b0003
    5970:	00100003 	.word	0x00100003
    5974:	00110003 	.word	0x00110003
    5978:	00120003 	.word	0x00120003
    597c:	00130003 	.word	0x00130003
    5980:	000c0003 	.word	0x000c0003
    5984:	000d0003 	.word	0x000d0003
    5988:	000e0003 	.word	0x000e0003
    598c:	000f0003 	.word	0x000f0003
    5990:	00160003 	.word	0x00160003
    5994:	00170003 	.word	0x00170003
    5998:	00180003 	.word	0x00180003
    599c:	00190003 	.word	0x00190003

000059a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    59a0:	b590      	push	{r4, r7, lr}
    59a2:	b08b      	sub	sp, #44	; 0x2c
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    59a8:	1c3b      	adds	r3, r7, #0
    59aa:	330c      	adds	r3, #12
    59ac:	4a0e      	ldr	r2, [pc, #56]	; (59e8 <_sercom_get_sercom_inst_index+0x48>)
    59ae:	ca13      	ldmia	r2!, {r0, r1, r4}
    59b0:	c313      	stmia	r3!, {r0, r1, r4}
    59b2:	ca13      	ldmia	r2!, {r0, r1, r4}
    59b4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    59b6:	2300      	movs	r3, #0
    59b8:	627b      	str	r3, [r7, #36]	; 0x24
    59ba:	e00d      	b.n	59d8 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    59bc:	687a      	ldr	r2, [r7, #4]
    59be:	1c3b      	adds	r3, r7, #0
    59c0:	330c      	adds	r3, #12
    59c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    59c4:	0089      	lsls	r1, r1, #2
    59c6:	58cb      	ldr	r3, [r1, r3]
    59c8:	429a      	cmp	r2, r3
    59ca:	d102      	bne.n	59d2 <_sercom_get_sercom_inst_index+0x32>
			return i;
    59cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59ce:	b2db      	uxtb	r3, r3
    59d0:	e006      	b.n	59e0 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    59d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59d4:	3301      	adds	r3, #1
    59d6:	627b      	str	r3, [r7, #36]	; 0x24
    59d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59da:	2b05      	cmp	r3, #5
    59dc:	d9ee      	bls.n	59bc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    59de:	2300      	movs	r3, #0
}
    59e0:	1c18      	adds	r0, r3, #0
    59e2:	46bd      	mov	sp, r7
    59e4:	b00b      	add	sp, #44	; 0x2c
    59e6:	bd90      	pop	{r4, r7, pc}
    59e8:	0000ba9c 	.word	0x0000ba9c

000059ec <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	b082      	sub	sp, #8
    59f0:	af00      	add	r7, sp, #0
    59f2:	1c02      	adds	r2, r0, #0
    59f4:	1dfb      	adds	r3, r7, #7
    59f6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    59f8:	46bd      	mov	sp, r7
    59fa:	b002      	add	sp, #8
    59fc:	bd80      	pop	{r7, pc}
    59fe:	46c0      	nop			; (mov r8, r8)

00005a00 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	b084      	sub	sp, #16
    5a04:	af00      	add	r7, sp, #0
    5a06:	1c02      	adds	r2, r0, #0
    5a08:	6039      	str	r1, [r7, #0]
    5a0a:	1dfb      	adds	r3, r7, #7
    5a0c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    5a0e:	4b13      	ldr	r3, [pc, #76]	; (5a5c <_sercom_set_handler+0x5c>)
    5a10:	781b      	ldrb	r3, [r3, #0]
    5a12:	2201      	movs	r2, #1
    5a14:	4053      	eors	r3, r2
    5a16:	b2db      	uxtb	r3, r3
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d015      	beq.n	5a48 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a1c:	2300      	movs	r3, #0
    5a1e:	60fb      	str	r3, [r7, #12]
    5a20:	e00c      	b.n	5a3c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5a22:	4b0f      	ldr	r3, [pc, #60]	; (5a60 <_sercom_set_handler+0x60>)
    5a24:	68fa      	ldr	r2, [r7, #12]
    5a26:	0092      	lsls	r2, r2, #2
    5a28:	490e      	ldr	r1, [pc, #56]	; (5a64 <_sercom_set_handler+0x64>)
    5a2a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    5a2c:	4b0e      	ldr	r3, [pc, #56]	; (5a68 <_sercom_set_handler+0x68>)
    5a2e:	68fa      	ldr	r2, [r7, #12]
    5a30:	0092      	lsls	r2, r2, #2
    5a32:	2100      	movs	r1, #0
    5a34:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	3301      	adds	r3, #1
    5a3a:	60fb      	str	r3, [r7, #12]
    5a3c:	68fb      	ldr	r3, [r7, #12]
    5a3e:	2b05      	cmp	r3, #5
    5a40:	d9ef      	bls.n	5a22 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    5a42:	4b06      	ldr	r3, [pc, #24]	; (5a5c <_sercom_set_handler+0x5c>)
    5a44:	2201      	movs	r2, #1
    5a46:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5a48:	1dfb      	adds	r3, r7, #7
    5a4a:	781a      	ldrb	r2, [r3, #0]
    5a4c:	4b04      	ldr	r3, [pc, #16]	; (5a60 <_sercom_set_handler+0x60>)
    5a4e:	0092      	lsls	r2, r2, #2
    5a50:	6839      	ldr	r1, [r7, #0]
    5a52:	50d1      	str	r1, [r2, r3]
}
    5a54:	46bd      	mov	sp, r7
    5a56:	b004      	add	sp, #16
    5a58:	bd80      	pop	{r7, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	2000401c 	.word	0x2000401c
    5a60:	20004020 	.word	0x20004020
    5a64:	000059ed 	.word	0x000059ed
    5a68:	200069e4 	.word	0x200069e4

00005a6c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5a6c:	b590      	push	{r4, r7, lr}
    5a6e:	b085      	sub	sp, #20
    5a70:	af00      	add	r7, sp, #0
    5a72:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5a74:	1c3a      	adds	r2, r7, #0
    5a76:	3208      	adds	r2, #8
    5a78:	4b0e      	ldr	r3, [pc, #56]	; (5ab4 <_sercom_get_interrupt_vector+0x48>)
    5a7a:	1c11      	adds	r1, r2, #0
    5a7c:	1c1a      	adds	r2, r3, #0
    5a7e:	2306      	movs	r3, #6
    5a80:	1c08      	adds	r0, r1, #0
    5a82:	1c11      	adds	r1, r2, #0
    5a84:	1c1a      	adds	r2, r3, #0
    5a86:	4b0c      	ldr	r3, [pc, #48]	; (5ab8 <_sercom_get_interrupt_vector+0x4c>)
    5a88:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5a8a:	1c3c      	adds	r4, r7, #0
    5a8c:	340f      	adds	r4, #15
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	1c18      	adds	r0, r3, #0
    5a92:	4b0a      	ldr	r3, [pc, #40]	; (5abc <_sercom_get_interrupt_vector+0x50>)
    5a94:	4798      	blx	r3
    5a96:	1c03      	adds	r3, r0, #0
    5a98:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5a9a:	1c3b      	adds	r3, r7, #0
    5a9c:	330f      	adds	r3, #15
    5a9e:	781b      	ldrb	r3, [r3, #0]
    5aa0:	1c3a      	adds	r2, r7, #0
    5aa2:	3208      	adds	r2, #8
    5aa4:	5cd3      	ldrb	r3, [r2, r3]
    5aa6:	b2db      	uxtb	r3, r3
    5aa8:	b25b      	sxtb	r3, r3
}
    5aaa:	1c18      	adds	r0, r3, #0
    5aac:	46bd      	mov	sp, r7
    5aae:	b005      	add	sp, #20
    5ab0:	bd90      	pop	{r4, r7, pc}
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	0000bab4 	.word	0x0000bab4
    5ab8:	0000b899 	.word	0x0000b899
    5abc:	000059a1 	.word	0x000059a1

00005ac0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5ac0:	b580      	push	{r7, lr}
    5ac2:	af00      	add	r7, sp, #0
    5ac4:	4b02      	ldr	r3, [pc, #8]	; (5ad0 <SERCOM0_Handler+0x10>)
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	2000      	movs	r0, #0
    5aca:	4798      	blx	r3
    5acc:	46bd      	mov	sp, r7
    5ace:	bd80      	pop	{r7, pc}
    5ad0:	20004020 	.word	0x20004020

00005ad4 <SERCOM1_Handler>:
    5ad4:	b580      	push	{r7, lr}
    5ad6:	af00      	add	r7, sp, #0
    5ad8:	4b02      	ldr	r3, [pc, #8]	; (5ae4 <SERCOM1_Handler+0x10>)
    5ada:	685b      	ldr	r3, [r3, #4]
    5adc:	2001      	movs	r0, #1
    5ade:	4798      	blx	r3
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	20004020 	.word	0x20004020

00005ae8 <SERCOM2_Handler>:
    5ae8:	b580      	push	{r7, lr}
    5aea:	af00      	add	r7, sp, #0
    5aec:	4b02      	ldr	r3, [pc, #8]	; (5af8 <SERCOM2_Handler+0x10>)
    5aee:	689b      	ldr	r3, [r3, #8]
    5af0:	2002      	movs	r0, #2
    5af2:	4798      	blx	r3
    5af4:	46bd      	mov	sp, r7
    5af6:	bd80      	pop	{r7, pc}
    5af8:	20004020 	.word	0x20004020

00005afc <SERCOM3_Handler>:
    5afc:	b580      	push	{r7, lr}
    5afe:	af00      	add	r7, sp, #0
    5b00:	4b02      	ldr	r3, [pc, #8]	; (5b0c <SERCOM3_Handler+0x10>)
    5b02:	68db      	ldr	r3, [r3, #12]
    5b04:	2003      	movs	r0, #3
    5b06:	4798      	blx	r3
    5b08:	46bd      	mov	sp, r7
    5b0a:	bd80      	pop	{r7, pc}
    5b0c:	20004020 	.word	0x20004020

00005b10 <SERCOM4_Handler>:
    5b10:	b580      	push	{r7, lr}
    5b12:	af00      	add	r7, sp, #0
    5b14:	4b02      	ldr	r3, [pc, #8]	; (5b20 <SERCOM4_Handler+0x10>)
    5b16:	691b      	ldr	r3, [r3, #16]
    5b18:	2004      	movs	r0, #4
    5b1a:	4798      	blx	r3
    5b1c:	46bd      	mov	sp, r7
    5b1e:	bd80      	pop	{r7, pc}
    5b20:	20004020 	.word	0x20004020

00005b24 <SERCOM5_Handler>:
    5b24:	b580      	push	{r7, lr}
    5b26:	af00      	add	r7, sp, #0
    5b28:	4b02      	ldr	r3, [pc, #8]	; (5b34 <SERCOM5_Handler+0x10>)
    5b2a:	695b      	ldr	r3, [r3, #20]
    5b2c:	2005      	movs	r0, #5
    5b2e:	4798      	blx	r3
    5b30:	46bd      	mov	sp, r7
    5b32:	bd80      	pop	{r7, pc}
    5b34:	20004020 	.word	0x20004020

00005b38 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b082      	sub	sp, #8
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	2200      	movs	r2, #0
    5b44:	701a      	strb	r2, [r3, #0]
}
    5b46:	46bd      	mov	sp, r7
    5b48:	b002      	add	sp, #8
    5b4a:	bd80      	pop	{r7, pc}

00005b4c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b082      	sub	sp, #8
    5b50:	af00      	add	r7, sp, #0
    5b52:	1c02      	adds	r2, r0, #0
    5b54:	6039      	str	r1, [r7, #0]
    5b56:	1dfb      	adds	r3, r7, #7
    5b58:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5b5a:	1dfb      	adds	r3, r7, #7
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	2b01      	cmp	r3, #1
    5b60:	d00a      	beq.n	5b78 <system_apb_clock_set_mask+0x2c>
    5b62:	2b02      	cmp	r3, #2
    5b64:	d00f      	beq.n	5b86 <system_apb_clock_set_mask+0x3a>
    5b66:	2b00      	cmp	r3, #0
    5b68:	d114      	bne.n	5b94 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5b6a:	4b0e      	ldr	r3, [pc, #56]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b6c:	4a0d      	ldr	r2, [pc, #52]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b6e:	6991      	ldr	r1, [r2, #24]
    5b70:	683a      	ldr	r2, [r7, #0]
    5b72:	430a      	orrs	r2, r1
    5b74:	619a      	str	r2, [r3, #24]
			break;
    5b76:	e00f      	b.n	5b98 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5b78:	4b0a      	ldr	r3, [pc, #40]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b7a:	4a0a      	ldr	r2, [pc, #40]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b7c:	69d1      	ldr	r1, [r2, #28]
    5b7e:	683a      	ldr	r2, [r7, #0]
    5b80:	430a      	orrs	r2, r1
    5b82:	61da      	str	r2, [r3, #28]
			break;
    5b84:	e008      	b.n	5b98 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5b86:	4b07      	ldr	r3, [pc, #28]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b88:	4a06      	ldr	r2, [pc, #24]	; (5ba4 <system_apb_clock_set_mask+0x58>)
    5b8a:	6a11      	ldr	r1, [r2, #32]
    5b8c:	683a      	ldr	r2, [r7, #0]
    5b8e:	430a      	orrs	r2, r1
    5b90:	621a      	str	r2, [r3, #32]
			break;
    5b92:	e001      	b.n	5b98 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5b94:	2317      	movs	r3, #23
    5b96:	e000      	b.n	5b9a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5b98:	2300      	movs	r3, #0
}
    5b9a:	1c18      	adds	r0, r3, #0
    5b9c:	46bd      	mov	sp, r7
    5b9e:	b002      	add	sp, #8
    5ba0:	bd80      	pop	{r7, pc}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	40000400 	.word	0x40000400

00005ba8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	b082      	sub	sp, #8
    5bac:	af00      	add	r7, sp, #0
    5bae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	2280      	movs	r2, #128	; 0x80
    5bb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	2200      	movs	r2, #0
    5bba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	2201      	movs	r2, #1
    5bc0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5bc2:	687b      	ldr	r3, [r7, #4]
    5bc4:	2200      	movs	r2, #0
    5bc6:	70da      	strb	r2, [r3, #3]
}
    5bc8:	46bd      	mov	sp, r7
    5bca:	b002      	add	sp, #8
    5bcc:	bd80      	pop	{r7, pc}
    5bce:	46c0      	nop			; (mov r8, r8)

00005bd0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5bd4:	4b05      	ldr	r3, [pc, #20]	; (5bec <system_is_debugger_present+0x1c>)
    5bd6:	789b      	ldrb	r3, [r3, #2]
    5bd8:	b2db      	uxtb	r3, r3
    5bda:	1c1a      	adds	r2, r3, #0
    5bdc:	2302      	movs	r3, #2
    5bde:	4013      	ands	r3, r2
    5be0:	1e5a      	subs	r2, r3, #1
    5be2:	4193      	sbcs	r3, r2
    5be4:	b2db      	uxtb	r3, r3
}
    5be6:	1c18      	adds	r0, r3, #0
    5be8:	46bd      	mov	sp, r7
    5bea:	bd80      	pop	{r7, pc}
    5bec:	41002000 	.word	0x41002000

00005bf0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b084      	sub	sp, #16
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	69db      	ldr	r3, [r3, #28]
    5c02:	1e5a      	subs	r2, r3, #1
    5c04:	4193      	sbcs	r3, r2
    5c06:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5c08:	1c18      	adds	r0, r3, #0
    5c0a:	46bd      	mov	sp, r7
    5c0c:	b004      	add	sp, #16
    5c0e:	bd80      	pop	{r7, pc}

00005c10 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5c10:	b580      	push	{r7, lr}
    5c12:	b082      	sub	sp, #8
    5c14:	af00      	add	r7, sp, #0
    5c16:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5c18:	46c0      	nop			; (mov r8, r8)
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	1c18      	adds	r0, r3, #0
    5c1e:	4b04      	ldr	r3, [pc, #16]	; (5c30 <_usart_wait_for_sync+0x20>)
    5c20:	4798      	blx	r3
    5c22:	1c03      	adds	r3, r0, #0
    5c24:	2b00      	cmp	r3, #0
    5c26:	d1f8      	bne.n	5c1a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5c28:	46bd      	mov	sp, r7
    5c2a:	b002      	add	sp, #8
    5c2c:	bd80      	pop	{r7, pc}
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	00005bf1 	.word	0x00005bf1

00005c34 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5c34:	b5b0      	push	{r4, r5, r7, lr}
    5c36:	b08c      	sub	sp, #48	; 0x30
    5c38:	af02      	add	r7, sp, #8
    5c3a:	6078      	str	r0, [r7, #4]
    5c3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	681b      	ldr	r3, [r3, #0]
    5c42:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	1c18      	adds	r0, r3, #0
    5c4a:	4bad      	ldr	r3, [pc, #692]	; (5f00 <_usart_set_config+0x2cc>)
    5c4c:	4798      	blx	r3
    5c4e:	1c03      	adds	r3, r0, #0
    5c50:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c52:	697b      	ldr	r3, [r7, #20]
    5c54:	3314      	adds	r3, #20
    5c56:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5c58:	2300      	movs	r3, #0
    5c5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5c5c:	2300      	movs	r3, #0
    5c5e:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    5c60:	1c3b      	adds	r3, r7, #0
    5c62:	330e      	adds	r3, #14
    5c64:	2200      	movs	r2, #0
    5c66:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5c68:	1c3b      	adds	r3, r7, #0
    5c6a:	331f      	adds	r3, #31
    5c6c:	2200      	movs	r2, #0
    5c6e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5c70:	1c3b      	adds	r3, r7, #0
    5c72:	331e      	adds	r3, #30
    5c74:	2210      	movs	r2, #16
    5c76:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5c78:	683b      	ldr	r3, [r7, #0]
    5c7a:	8a1b      	ldrh	r3, [r3, #16]
    5c7c:	2280      	movs	r2, #128	; 0x80
    5c7e:	01d2      	lsls	r2, r2, #7
    5c80:	4293      	cmp	r3, r2
    5c82:	d01c      	beq.n	5cbe <_usart_set_config+0x8a>
    5c84:	2280      	movs	r2, #128	; 0x80
    5c86:	01d2      	lsls	r2, r2, #7
    5c88:	4293      	cmp	r3, r2
    5c8a:	dc06      	bgt.n	5c9a <_usart_set_config+0x66>
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d00d      	beq.n	5cac <_usart_set_config+0x78>
    5c90:	2280      	movs	r2, #128	; 0x80
    5c92:	0192      	lsls	r2, r2, #6
    5c94:	4293      	cmp	r3, r2
    5c96:	d024      	beq.n	5ce2 <_usart_set_config+0xae>
    5c98:	e035      	b.n	5d06 <_usart_set_config+0xd2>
    5c9a:	22c0      	movs	r2, #192	; 0xc0
    5c9c:	01d2      	lsls	r2, r2, #7
    5c9e:	4293      	cmp	r3, r2
    5ca0:	d028      	beq.n	5cf4 <_usart_set_config+0xc0>
    5ca2:	2280      	movs	r2, #128	; 0x80
    5ca4:	0212      	lsls	r2, r2, #8
    5ca6:	4293      	cmp	r3, r2
    5ca8:	d012      	beq.n	5cd0 <_usart_set_config+0x9c>
    5caa:	e02c      	b.n	5d06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5cac:	1c3b      	adds	r3, r7, #0
    5cae:	331f      	adds	r3, #31
    5cb0:	2200      	movs	r2, #0
    5cb2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5cb4:	1c3b      	adds	r3, r7, #0
    5cb6:	331e      	adds	r3, #30
    5cb8:	2210      	movs	r2, #16
    5cba:	701a      	strb	r2, [r3, #0]
			break;
    5cbc:	e023      	b.n	5d06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5cbe:	1c3b      	adds	r3, r7, #0
    5cc0:	331f      	adds	r3, #31
    5cc2:	2200      	movs	r2, #0
    5cc4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5cc6:	1c3b      	adds	r3, r7, #0
    5cc8:	331e      	adds	r3, #30
    5cca:	2208      	movs	r2, #8
    5ccc:	701a      	strb	r2, [r3, #0]
			break;
    5cce:	e01a      	b.n	5d06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5cd0:	1c3b      	adds	r3, r7, #0
    5cd2:	331f      	adds	r3, #31
    5cd4:	2200      	movs	r2, #0
    5cd6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5cd8:	1c3b      	adds	r3, r7, #0
    5cda:	331e      	adds	r3, #30
    5cdc:	2203      	movs	r2, #3
    5cde:	701a      	strb	r2, [r3, #0]
			break;
    5ce0:	e011      	b.n	5d06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ce2:	1c3b      	adds	r3, r7, #0
    5ce4:	331f      	adds	r3, #31
    5ce6:	2201      	movs	r2, #1
    5ce8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5cea:	1c3b      	adds	r3, r7, #0
    5cec:	331e      	adds	r3, #30
    5cee:	2210      	movs	r2, #16
    5cf0:	701a      	strb	r2, [r3, #0]
			break;
    5cf2:	e008      	b.n	5d06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5cf4:	1c3b      	adds	r3, r7, #0
    5cf6:	331f      	adds	r3, #31
    5cf8:	2201      	movs	r2, #1
    5cfa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5cfc:	1c3b      	adds	r3, r7, #0
    5cfe:	331e      	adds	r3, #30
    5d00:	2208      	movs	r2, #8
    5d02:	701a      	strb	r2, [r3, #0]
			break;
    5d04:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5d06:	683b      	ldr	r3, [r7, #0]
    5d08:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5d0a:	683b      	ldr	r3, [r7, #0]
    5d0c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5d0e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5d10:	683b      	ldr	r3, [r7, #0]
    5d12:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    5d14:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    5d16:	683b      	ldr	r3, [r7, #0]
    5d18:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5d1a:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5d1c:	683b      	ldr	r3, [r7, #0]
    5d1e:	7e1b      	ldrb	r3, [r3, #24]
    5d20:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    5d22:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5d24:	6839      	ldr	r1, [r7, #0]
    5d26:	2326      	movs	r3, #38	; 0x26
    5d28:	5ccb      	ldrb	r3, [r1, r3]
    5d2a:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5d2c:	4313      	orrs	r3, r2
    5d2e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    5d30:	1c3b      	adds	r3, r7, #0
    5d32:	331d      	adds	r3, #29
    5d34:	2200      	movs	r2, #0
    5d36:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    5d38:	683b      	ldr	r3, [r7, #0]
    5d3a:	685b      	ldr	r3, [r3, #4]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d020      	beq.n	5d82 <_usart_set_config+0x14e>
    5d40:	2280      	movs	r2, #128	; 0x80
    5d42:	0552      	lsls	r2, r2, #21
    5d44:	4293      	cmp	r3, r2
    5d46:	d14e      	bne.n	5de6 <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5d48:	683a      	ldr	r2, [r7, #0]
    5d4a:	2327      	movs	r3, #39	; 0x27
    5d4c:	5cd3      	ldrb	r3, [r2, r3]
    5d4e:	2201      	movs	r2, #1
    5d50:	4053      	eors	r3, r2
    5d52:	b2db      	uxtb	r3, r3
    5d54:	2b00      	cmp	r3, #0
    5d56:	d013      	beq.n	5d80 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5d58:	683b      	ldr	r3, [r7, #0]
    5d5a:	6a1d      	ldr	r5, [r3, #32]
    5d5c:	693b      	ldr	r3, [r7, #16]
    5d5e:	b2db      	uxtb	r3, r3
    5d60:	1c18      	adds	r0, r3, #0
    5d62:	4b68      	ldr	r3, [pc, #416]	; (5f04 <_usart_set_config+0x2d0>)
    5d64:	4798      	blx	r3
    5d66:	1c02      	adds	r2, r0, #0
    5d68:	1c3c      	adds	r4, r7, #0
    5d6a:	341d      	adds	r4, #29
    5d6c:	1c3b      	adds	r3, r7, #0
    5d6e:	330e      	adds	r3, #14
    5d70:	1c28      	adds	r0, r5, #0
    5d72:	1c11      	adds	r1, r2, #0
    5d74:	1c1a      	adds	r2, r3, #0
    5d76:	4b64      	ldr	r3, [pc, #400]	; (5f08 <_usart_set_config+0x2d4>)
    5d78:	4798      	blx	r3
    5d7a:	1c03      	adds	r3, r0, #0
    5d7c:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5d7e:	e032      	b.n	5de6 <_usart_set_config+0x1b2>
    5d80:	e031      	b.n	5de6 <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5d82:	683a      	ldr	r2, [r7, #0]
    5d84:	2327      	movs	r3, #39	; 0x27
    5d86:	5cd3      	ldrb	r3, [r2, r3]
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d013      	beq.n	5db4 <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5d8c:	683b      	ldr	r3, [r7, #0]
    5d8e:	6a18      	ldr	r0, [r3, #32]
    5d90:	683b      	ldr	r3, [r7, #0]
    5d92:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    5d94:	1c3c      	adds	r4, r7, #0
    5d96:	341d      	adds	r4, #29
    5d98:	1c3a      	adds	r2, r7, #0
    5d9a:	320e      	adds	r2, #14
    5d9c:	1c3b      	adds	r3, r7, #0
    5d9e:	331f      	adds	r3, #31
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	1c3d      	adds	r5, r7, #0
    5da4:	351e      	adds	r5, #30
    5da6:	782d      	ldrb	r5, [r5, #0]
    5da8:	9500      	str	r5, [sp, #0]
    5daa:	4d58      	ldr	r5, [pc, #352]	; (5f0c <_usart_set_config+0x2d8>)
    5dac:	47a8      	blx	r5
    5dae:	1c03      	adds	r3, r0, #0
    5db0:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5db2:	e017      	b.n	5de4 <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5db4:	683b      	ldr	r3, [r7, #0]
    5db6:	6a1d      	ldr	r5, [r3, #32]
    5db8:	693b      	ldr	r3, [r7, #16]
    5dba:	b2db      	uxtb	r3, r3
    5dbc:	1c18      	adds	r0, r3, #0
    5dbe:	4b51      	ldr	r3, [pc, #324]	; (5f04 <_usart_set_config+0x2d0>)
    5dc0:	4798      	blx	r3
    5dc2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    5dc4:	1c3c      	adds	r4, r7, #0
    5dc6:	341d      	adds	r4, #29
    5dc8:	1c3a      	adds	r2, r7, #0
    5dca:	320e      	adds	r2, #14
    5dcc:	1c3b      	adds	r3, r7, #0
    5dce:	331f      	adds	r3, #31
    5dd0:	781b      	ldrb	r3, [r3, #0]
    5dd2:	1c38      	adds	r0, r7, #0
    5dd4:	301e      	adds	r0, #30
    5dd6:	7800      	ldrb	r0, [r0, #0]
    5dd8:	9000      	str	r0, [sp, #0]
    5dda:	1c28      	adds	r0, r5, #0
    5ddc:	4d4b      	ldr	r5, [pc, #300]	; (5f0c <_usart_set_config+0x2d8>)
    5dde:	47a8      	blx	r5
    5de0:	1c03      	adds	r3, r0, #0
    5de2:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5de4:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5de6:	1c3b      	adds	r3, r7, #0
    5de8:	331d      	adds	r3, #29
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	2b00      	cmp	r3, #0
    5dee:	d003      	beq.n	5df8 <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    5df0:	1c3b      	adds	r3, r7, #0
    5df2:	331d      	adds	r3, #29
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	e07e      	b.n	5ef6 <_usart_set_config+0x2c2>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5df8:	683b      	ldr	r3, [r7, #0]
    5dfa:	7e5b      	ldrb	r3, [r3, #25]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d003      	beq.n	5e08 <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5e00:	683b      	ldr	r3, [r7, #0]
    5e02:	7e9a      	ldrb	r2, [r3, #26]
    5e04:	69bb      	ldr	r3, [r7, #24]
    5e06:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	1c18      	adds	r0, r3, #0
    5e0c:	4b40      	ldr	r3, [pc, #256]	; (5f10 <_usart_set_config+0x2dc>)
    5e0e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5e10:	1c3b      	adds	r3, r7, #0
    5e12:	330e      	adds	r3, #14
    5e14:	881a      	ldrh	r2, [r3, #0]
    5e16:	69bb      	ldr	r3, [r7, #24]
    5e18:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    5e1a:	683b      	ldr	r3, [r7, #0]
    5e1c:	685b      	ldr	r3, [r3, #4]
    5e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e20:	4313      	orrs	r3, r2
    5e22:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5e24:	683a      	ldr	r2, [r7, #0]
    5e26:	2327      	movs	r3, #39	; 0x27
    5e28:	5cd3      	ldrb	r3, [r2, r3]
    5e2a:	2201      	movs	r2, #1
    5e2c:	4053      	eors	r3, r2
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	2b00      	cmp	r3, #0
    5e32:	d003      	beq.n	5e3c <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e36:	2204      	movs	r2, #4
    5e38:	4313      	orrs	r3, r2
    5e3a:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	7a9a      	ldrb	r2, [r3, #10]
    5e40:	683b      	ldr	r3, [r7, #0]
    5e42:	7adb      	ldrb	r3, [r3, #11]
    5e44:	4313      	orrs	r3, r2
    5e46:	b2db      	uxtb	r3, r3
    5e48:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e4a:	683b      	ldr	r3, [r7, #0]
    5e4c:	7e5b      	ldrb	r3, [r3, #25]
    5e4e:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5e50:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e52:	683b      	ldr	r3, [r7, #0]
    5e54:	7f1b      	ldrb	r3, [r3, #28]
    5e56:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5e58:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e5a:	683b      	ldr	r3, [r7, #0]
    5e5c:	7f5b      	ldrb	r3, [r3, #29]
    5e5e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5e60:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5e62:	6839      	ldr	r1, [r7, #0]
    5e64:	2324      	movs	r3, #36	; 0x24
    5e66:	5ccb      	ldrb	r3, [r1, r3]
    5e68:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5e6a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5e6c:	6839      	ldr	r1, [r7, #0]
    5e6e:	2325      	movs	r3, #37	; 0x25
    5e70:	5ccb      	ldrb	r3, [r1, r3]
    5e72:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5e74:	4313      	orrs	r3, r2
    5e76:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5e78:	683b      	ldr	r3, [r7, #0]
    5e7a:	891b      	ldrh	r3, [r3, #8]
    5e7c:	2bff      	cmp	r3, #255	; 0xff
    5e7e:	d014      	beq.n	5eaa <_usart_set_config+0x276>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5e80:	683b      	ldr	r3, [r7, #0]
    5e82:	7edb      	ldrb	r3, [r3, #27]
    5e84:	2b00      	cmp	r3, #0
    5e86:	d005      	beq.n	5e94 <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    5e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e8a:	22a0      	movs	r2, #160	; 0xa0
    5e8c:	04d2      	lsls	r2, r2, #19
    5e8e:	4313      	orrs	r3, r2
    5e90:	627b      	str	r3, [r7, #36]	; 0x24
    5e92:	e004      	b.n	5e9e <_usart_set_config+0x26a>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e96:	2280      	movs	r2, #128	; 0x80
    5e98:	0452      	lsls	r2, r2, #17
    5e9a:	4313      	orrs	r3, r2
    5e9c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    5e9e:	683b      	ldr	r3, [r7, #0]
    5ea0:	891b      	ldrh	r3, [r3, #8]
    5ea2:	6a3a      	ldr	r2, [r7, #32]
    5ea4:	4313      	orrs	r3, r2
    5ea6:	623b      	str	r3, [r7, #32]
    5ea8:	e008      	b.n	5ebc <_usart_set_config+0x288>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5eaa:	683b      	ldr	r3, [r7, #0]
    5eac:	7edb      	ldrb	r3, [r3, #27]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	d004      	beq.n	5ebc <_usart_set_config+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eb4:	2280      	movs	r2, #128	; 0x80
    5eb6:	04d2      	lsls	r2, r2, #19
    5eb8:	4313      	orrs	r3, r2
    5eba:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5ebc:	683a      	ldr	r2, [r7, #0]
    5ebe:	232c      	movs	r3, #44	; 0x2c
    5ec0:	5cd3      	ldrb	r3, [r2, r3]
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d104      	bne.n	5ed0 <_usart_set_config+0x29c>
    5ec6:	4b13      	ldr	r3, [pc, #76]	; (5f14 <_usart_set_config+0x2e0>)
    5ec8:	4798      	blx	r3
    5eca:	1c03      	adds	r3, r0, #0
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d003      	beq.n	5ed8 <_usart_set_config+0x2a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ed2:	2280      	movs	r2, #128	; 0x80
    5ed4:	4313      	orrs	r3, r2
    5ed6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	1c18      	adds	r0, r3, #0
    5edc:	4b0c      	ldr	r3, [pc, #48]	; (5f10 <_usart_set_config+0x2dc>)
    5ede:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5ee0:	69bb      	ldr	r3, [r7, #24]
    5ee2:	6a3a      	ldr	r2, [r7, #32]
    5ee4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5ee6:	687b      	ldr	r3, [r7, #4]
    5ee8:	1c18      	adds	r0, r3, #0
    5eea:	4b09      	ldr	r3, [pc, #36]	; (5f10 <_usart_set_config+0x2dc>)
    5eec:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5eee:	69bb      	ldr	r3, [r7, #24]
    5ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ef2:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    5ef4:	2300      	movs	r3, #0
}
    5ef6:	1c18      	adds	r0, r3, #0
    5ef8:	46bd      	mov	sp, r7
    5efa:	b00a      	add	sp, #40	; 0x28
    5efc:	bdb0      	pop	{r4, r5, r7, pc}
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	000059a1 	.word	0x000059a1
    5f04:	00007219 	.word	0x00007219
    5f08:	00005515 	.word	0x00005515
    5f0c:	00005591 	.word	0x00005591
    5f10:	00005c11 	.word	0x00005c11
    5f14:	00005bd1 	.word	0x00005bd1

00005f18 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5f18:	b590      	push	{r4, r7, lr}
    5f1a:	b093      	sub	sp, #76	; 0x4c
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	60f8      	str	r0, [r7, #12]
    5f20:	60b9      	str	r1, [r7, #8]
    5f22:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5f24:	1c3b      	adds	r3, r7, #0
    5f26:	333b      	adds	r3, #59	; 0x3b
    5f28:	2200      	movs	r2, #0
    5f2a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5f2c:	68fb      	ldr	r3, [r7, #12]
    5f2e:	68ba      	ldr	r2, [r7, #8]
    5f30:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f32:	68fb      	ldr	r3, [r7, #12]
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5f38:	68fb      	ldr	r3, [r7, #12]
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	1c18      	adds	r0, r3, #0
    5f3e:	4b86      	ldr	r3, [pc, #536]	; (6158 <usart_init+0x240>)
    5f40:	4798      	blx	r3
    5f42:	1c03      	adds	r3, r0, #0
    5f44:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5f48:	3302      	adds	r3, #2
    5f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5f4e:	3314      	adds	r3, #20
    5f50:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5f54:	681a      	ldr	r2, [r3, #0]
    5f56:	2301      	movs	r3, #1
    5f58:	4013      	ands	r3, r2
    5f5a:	d001      	beq.n	5f60 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5f5c:	2305      	movs	r3, #5
    5f5e:	e0f6      	b.n	614e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5f62:	681a      	ldr	r2, [r3, #0]
    5f64:	2302      	movs	r3, #2
    5f66:	4013      	ands	r3, r2
    5f68:	d001      	beq.n	5f6e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5f6a:	231c      	movs	r3, #28
    5f6c:	e0ef      	b.n	614e <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f70:	2201      	movs	r2, #1
    5f72:	1c11      	adds	r1, r2, #0
    5f74:	4099      	lsls	r1, r3
    5f76:	1c0b      	adds	r3, r1, #0
    5f78:	2002      	movs	r0, #2
    5f7a:	1c19      	adds	r1, r3, #0
    5f7c:	4b77      	ldr	r3, [pc, #476]	; (615c <usart_init+0x244>)
    5f7e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5f80:	1c3b      	adds	r3, r7, #0
    5f82:	3324      	adds	r3, #36	; 0x24
    5f84:	1c18      	adds	r0, r3, #0
    5f86:	4b76      	ldr	r3, [pc, #472]	; (6160 <usart_init+0x248>)
    5f88:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5f8a:	687a      	ldr	r2, [r7, #4]
    5f8c:	232d      	movs	r3, #45	; 0x2d
    5f8e:	5cd2      	ldrb	r2, [r2, r3]
    5f90:	1c3b      	adds	r3, r7, #0
    5f92:	3324      	adds	r3, #36	; 0x24
    5f94:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f98:	b2da      	uxtb	r2, r3
    5f9a:	1c3b      	adds	r3, r7, #0
    5f9c:	3324      	adds	r3, #36	; 0x24
    5f9e:	1c10      	adds	r0, r2, #0
    5fa0:	1c19      	adds	r1, r3, #0
    5fa2:	4b70      	ldr	r3, [pc, #448]	; (6164 <usart_init+0x24c>)
    5fa4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5fa8:	b2db      	uxtb	r3, r3
    5faa:	1c18      	adds	r0, r3, #0
    5fac:	4b6e      	ldr	r3, [pc, #440]	; (6168 <usart_init+0x250>)
    5fae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5fb0:	687a      	ldr	r2, [r7, #4]
    5fb2:	232d      	movs	r3, #45	; 0x2d
    5fb4:	5cd3      	ldrb	r3, [r2, r3]
    5fb6:	1c18      	adds	r0, r3, #0
    5fb8:	2100      	movs	r1, #0
    5fba:	4b6c      	ldr	r3, [pc, #432]	; (616c <usart_init+0x254>)
    5fbc:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	7ada      	ldrb	r2, [r3, #11]
    5fc2:	68fb      	ldr	r3, [r7, #12]
    5fc4:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5fc6:	687a      	ldr	r2, [r7, #4]
    5fc8:	2324      	movs	r3, #36	; 0x24
    5fca:	5cd2      	ldrb	r2, [r2, r3]
    5fcc:	68fb      	ldr	r3, [r7, #12]
    5fce:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5fd0:	687a      	ldr	r2, [r7, #4]
    5fd2:	2325      	movs	r3, #37	; 0x25
    5fd4:	5cd2      	ldrb	r2, [r2, r3]
    5fd6:	68fb      	ldr	r3, [r7, #12]
    5fd8:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	7eda      	ldrb	r2, [r3, #27]
    5fde:	68fb      	ldr	r3, [r7, #12]
    5fe0:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	7f1a      	ldrb	r2, [r3, #28]
    5fe6:	68fb      	ldr	r3, [r7, #12]
    5fe8:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5fea:	1c3c      	adds	r4, r7, #0
    5fec:	343b      	adds	r4, #59	; 0x3b
    5fee:	68fa      	ldr	r2, [r7, #12]
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	1c10      	adds	r0, r2, #0
    5ff4:	1c19      	adds	r1, r3, #0
    5ff6:	4b5e      	ldr	r3, [pc, #376]	; (6170 <usart_init+0x258>)
    5ff8:	4798      	blx	r3
    5ffa:	1c03      	adds	r3, r0, #0
    5ffc:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5ffe:	1c3b      	adds	r3, r7, #0
    6000:	333b      	adds	r3, #59	; 0x3b
    6002:	781b      	ldrb	r3, [r3, #0]
    6004:	2b00      	cmp	r3, #0
    6006:	d003      	beq.n	6010 <usart_init+0xf8>
		return status_code;
    6008:	1c3b      	adds	r3, r7, #0
    600a:	333b      	adds	r3, #59	; 0x3b
    600c:	781b      	ldrb	r3, [r3, #0]
    600e:	e09e      	b.n	614e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6010:	1c3b      	adds	r3, r7, #0
    6012:	3320      	adds	r3, #32
    6014:	1c18      	adds	r0, r3, #0
    6016:	4b57      	ldr	r3, [pc, #348]	; (6174 <usart_init+0x25c>)
    6018:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    601a:	1c3b      	adds	r3, r7, #0
    601c:	3320      	adds	r3, #32
    601e:	2200      	movs	r2, #0
    6020:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6022:	1c3b      	adds	r3, r7, #0
    6024:	3320      	adds	r3, #32
    6026:	2200      	movs	r2, #0
    6028:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    602e:	1c3b      	adds	r3, r7, #0
    6030:	3310      	adds	r3, #16
    6032:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6034:	687b      	ldr	r3, [r7, #4]
    6036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    6038:	1c3b      	adds	r3, r7, #0
    603a:	3310      	adds	r3, #16
    603c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    603e:	687b      	ldr	r3, [r7, #4]
    6040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    6042:	1c3b      	adds	r3, r7, #0
    6044:	3310      	adds	r3, #16
    6046:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    604c:	1c3b      	adds	r3, r7, #0
    604e:	3310      	adds	r3, #16
    6050:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6052:	1c3b      	adds	r3, r7, #0
    6054:	3347      	adds	r3, #71	; 0x47
    6056:	2200      	movs	r2, #0
    6058:	701a      	strb	r2, [r3, #0]
    605a:	e02c      	b.n	60b6 <usart_init+0x19e>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    605c:	1c3b      	adds	r3, r7, #0
    605e:	3347      	adds	r3, #71	; 0x47
    6060:	781a      	ldrb	r2, [r3, #0]
    6062:	1c3b      	adds	r3, r7, #0
    6064:	3310      	adds	r3, #16
    6066:	0092      	lsls	r2, r2, #2
    6068:	58d3      	ldr	r3, [r2, r3]
    606a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    606c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    606e:	2b00      	cmp	r3, #0
    6070:	d109      	bne.n	6086 <usart_init+0x16e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6072:	68ba      	ldr	r2, [r7, #8]
    6074:	1c3b      	adds	r3, r7, #0
    6076:	3347      	adds	r3, #71	; 0x47
    6078:	781b      	ldrb	r3, [r3, #0]
    607a:	1c10      	adds	r0, r2, #0
    607c:	1c19      	adds	r1, r3, #0
    607e:	4b3e      	ldr	r3, [pc, #248]	; (6178 <usart_init+0x260>)
    6080:	4798      	blx	r3
    6082:	1c03      	adds	r3, r0, #0
    6084:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6088:	3301      	adds	r3, #1
    608a:	d00d      	beq.n	60a8 <usart_init+0x190>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    608c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    608e:	b2da      	uxtb	r2, r3
    6090:	1c3b      	adds	r3, r7, #0
    6092:	3320      	adds	r3, #32
    6094:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6098:	0c1b      	lsrs	r3, r3, #16
    609a:	b2da      	uxtb	r2, r3
    609c:	1c3b      	adds	r3, r7, #0
    609e:	3320      	adds	r3, #32
    60a0:	1c10      	adds	r0, r2, #0
    60a2:	1c19      	adds	r1, r3, #0
    60a4:	4b35      	ldr	r3, [pc, #212]	; (617c <usart_init+0x264>)
    60a6:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    60a8:	1c3b      	adds	r3, r7, #0
    60aa:	3347      	adds	r3, #71	; 0x47
    60ac:	781a      	ldrb	r2, [r3, #0]
    60ae:	1c3b      	adds	r3, r7, #0
    60b0:	3347      	adds	r3, #71	; 0x47
    60b2:	3201      	adds	r2, #1
    60b4:	701a      	strb	r2, [r3, #0]
    60b6:	1c3b      	adds	r3, r7, #0
    60b8:	3347      	adds	r3, #71	; 0x47
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	2b03      	cmp	r3, #3
    60be:	d9cd      	bls.n	605c <usart_init+0x144>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    60c0:	2300      	movs	r3, #0
    60c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    60c4:	e009      	b.n	60da <usart_init+0x1c2>
		module->callback[i]            = NULL;
    60c6:	68fa      	ldr	r2, [r7, #12]
    60c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    60ca:	3302      	adds	r3, #2
    60cc:	009b      	lsls	r3, r3, #2
    60ce:	18d3      	adds	r3, r2, r3
    60d0:	2200      	movs	r2, #0
    60d2:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    60d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    60d6:	3301      	adds	r3, #1
    60d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    60da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    60dc:	2b05      	cmp	r3, #5
    60de:	d9f2      	bls.n	60c6 <usart_init+0x1ae>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    60e0:	68fb      	ldr	r3, [r7, #12]
    60e2:	2200      	movs	r2, #0
    60e4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    60e6:	68fb      	ldr	r3, [r7, #12]
    60e8:	2200      	movs	r2, #0
    60ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    60ec:	68fb      	ldr	r3, [r7, #12]
    60ee:	2200      	movs	r2, #0
    60f0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    60f2:	68fb      	ldr	r3, [r7, #12]
    60f4:	2200      	movs	r2, #0
    60f6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    60f8:	68fa      	ldr	r2, [r7, #12]
    60fa:	2330      	movs	r3, #48	; 0x30
    60fc:	2100      	movs	r1, #0
    60fe:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    6100:	68fa      	ldr	r2, [r7, #12]
    6102:	2331      	movs	r3, #49	; 0x31
    6104:	2100      	movs	r1, #0
    6106:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    6108:	68fa      	ldr	r2, [r7, #12]
    610a:	2332      	movs	r3, #50	; 0x32
    610c:	2100      	movs	r1, #0
    610e:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    6110:	68fa      	ldr	r2, [r7, #12]
    6112:	2333      	movs	r3, #51	; 0x33
    6114:	2100      	movs	r1, #0
    6116:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6118:	68fb      	ldr	r3, [r7, #12]
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	1c3c      	adds	r4, r7, #0
    611e:	3427      	adds	r4, #39	; 0x27
    6120:	1c18      	adds	r0, r3, #0
    6122:	4b0d      	ldr	r3, [pc, #52]	; (6158 <usart_init+0x240>)
    6124:	4798      	blx	r3
    6126:	1c03      	adds	r3, r0, #0
    6128:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    612a:	1c3b      	adds	r3, r7, #0
    612c:	3327      	adds	r3, #39	; 0x27
    612e:	781a      	ldrb	r2, [r3, #0]
    6130:	4b13      	ldr	r3, [pc, #76]	; (6180 <usart_init+0x268>)
    6132:	1c10      	adds	r0, r2, #0
    6134:	1c19      	adds	r1, r3, #0
    6136:	4b13      	ldr	r3, [pc, #76]	; (6184 <usart_init+0x26c>)
    6138:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    613a:	1c3b      	adds	r3, r7, #0
    613c:	3327      	adds	r3, #39	; 0x27
    613e:	781a      	ldrb	r2, [r3, #0]
    6140:	4b11      	ldr	r3, [pc, #68]	; (6188 <usart_init+0x270>)
    6142:	0092      	lsls	r2, r2, #2
    6144:	68f9      	ldr	r1, [r7, #12]
    6146:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    6148:	1c3b      	adds	r3, r7, #0
    614a:	333b      	adds	r3, #59	; 0x3b
    614c:	781b      	ldrb	r3, [r3, #0]
}
    614e:	1c18      	adds	r0, r3, #0
    6150:	46bd      	mov	sp, r7
    6152:	b013      	add	sp, #76	; 0x4c
    6154:	bd90      	pop	{r4, r7, pc}
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	000059a1 	.word	0x000059a1
    615c:	00005b4d 	.word	0x00005b4d
    6160:	00005b39 	.word	0x00005b39
    6164:	000070fd 	.word	0x000070fd
    6168:	0000713d 	.word	0x0000713d
    616c:	00005759 	.word	0x00005759
    6170:	00005c35 	.word	0x00005c35
    6174:	00005ba9 	.word	0x00005ba9
    6178:	000057e5 	.word	0x000057e5
    617c:	000073e1 	.word	0x000073e1
    6180:	000063a5 	.word	0x000063a5
    6184:	00005a01 	.word	0x00005a01
    6188:	200069e4 	.word	0x200069e4

0000618c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    618c:	b580      	push	{r7, lr}
    618e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6190:	4b01      	ldr	r3, [pc, #4]	; (6198 <system_interrupt_enter_critical_section+0xc>)
    6192:	4798      	blx	r3
}
    6194:	46bd      	mov	sp, r7
    6196:	bd80      	pop	{r7, pc}
    6198:	00004bd1 	.word	0x00004bd1

0000619c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    619c:	b580      	push	{r7, lr}
    619e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    61a0:	4b01      	ldr	r3, [pc, #4]	; (61a8 <system_interrupt_leave_critical_section+0xc>)
    61a2:	4798      	blx	r3
}
    61a4:	46bd      	mov	sp, r7
    61a6:	bd80      	pop	{r7, pc}
    61a8:	00004c21 	.word	0x00004c21

000061ac <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    61ac:	b580      	push	{r7, lr}
    61ae:	b084      	sub	sp, #16
    61b0:	af00      	add	r7, sp, #0
    61b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	681b      	ldr	r3, [r3, #0]
    61b8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    61ba:	68fb      	ldr	r3, [r7, #12]
    61bc:	69db      	ldr	r3, [r3, #28]
    61be:	1e5a      	subs	r2, r3, #1
    61c0:	4193      	sbcs	r3, r2
    61c2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    61c4:	1c18      	adds	r0, r3, #0
    61c6:	46bd      	mov	sp, r7
    61c8:	b004      	add	sp, #16
    61ca:	bd80      	pop	{r7, pc}

000061cc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    61cc:	b580      	push	{r7, lr}
    61ce:	b082      	sub	sp, #8
    61d0:	af00      	add	r7, sp, #0
    61d2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    61d4:	46c0      	nop			; (mov r8, r8)
    61d6:	687b      	ldr	r3, [r7, #4]
    61d8:	1c18      	adds	r0, r3, #0
    61da:	4b04      	ldr	r3, [pc, #16]	; (61ec <_usart_wait_for_sync+0x20>)
    61dc:	4798      	blx	r3
    61de:	1c03      	adds	r3, r0, #0
    61e0:	2b00      	cmp	r3, #0
    61e2:	d1f8      	bne.n	61d6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    61e4:	46bd      	mov	sp, r7
    61e6:	b002      	add	sp, #8
    61e8:	bd80      	pop	{r7, pc}
    61ea:	46c0      	nop			; (mov r8, r8)
    61ec:	000061ad 	.word	0x000061ad

000061f0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    61f0:	b580      	push	{r7, lr}
    61f2:	b086      	sub	sp, #24
    61f4:	af00      	add	r7, sp, #0
    61f6:	60f8      	str	r0, [r7, #12]
    61f8:	60b9      	str	r1, [r7, #8]
    61fa:	1dbb      	adds	r3, r7, #6
    61fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    61fe:	68fb      	ldr	r3, [r7, #12]
    6200:	681b      	ldr	r3, [r3, #0]
    6202:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6204:	4b0f      	ldr	r3, [pc, #60]	; (6244 <_usart_write_buffer+0x54>)
    6206:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    620c:	b29b      	uxth	r3, r3
    620e:	2b00      	cmp	r3, #0
    6210:	d003      	beq.n	621a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    6212:	4b0d      	ldr	r3, [pc, #52]	; (6248 <_usart_write_buffer+0x58>)
    6214:	4798      	blx	r3
		return STATUS_BUSY;
    6216:	2305      	movs	r3, #5
    6218:	e010      	b.n	623c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    621a:	68fb      	ldr	r3, [r7, #12]
    621c:	1dba      	adds	r2, r7, #6
    621e:	8812      	ldrh	r2, [r2, #0]
    6220:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    6222:	4b09      	ldr	r3, [pc, #36]	; (6248 <_usart_write_buffer+0x58>)
    6224:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    6226:	68fb      	ldr	r3, [r7, #12]
    6228:	68ba      	ldr	r2, [r7, #8]
    622a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    622c:	68fa      	ldr	r2, [r7, #12]
    622e:	2333      	movs	r3, #51	; 0x33
    6230:	2105      	movs	r1, #5
    6232:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    6234:	697b      	ldr	r3, [r7, #20]
    6236:	2201      	movs	r2, #1
    6238:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    623a:	2300      	movs	r3, #0
}
    623c:	1c18      	adds	r0, r3, #0
    623e:	46bd      	mov	sp, r7
    6240:	b006      	add	sp, #24
    6242:	bd80      	pop	{r7, pc}
    6244:	0000618d 	.word	0x0000618d
    6248:	0000619d 	.word	0x0000619d

0000624c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    624c:	b580      	push	{r7, lr}
    624e:	b086      	sub	sp, #24
    6250:	af00      	add	r7, sp, #0
    6252:	60f8      	str	r0, [r7, #12]
    6254:	60b9      	str	r1, [r7, #8]
    6256:	1dbb      	adds	r3, r7, #6
    6258:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    625a:	68fb      	ldr	r3, [r7, #12]
    625c:	681b      	ldr	r3, [r3, #0]
    625e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    6260:	4b16      	ldr	r3, [pc, #88]	; (62bc <_usart_read_buffer+0x70>)
    6262:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    6264:	68fb      	ldr	r3, [r7, #12]
    6266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6268:	b29b      	uxth	r3, r3
    626a:	2b00      	cmp	r3, #0
    626c:	d003      	beq.n	6276 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    626e:	4b14      	ldr	r3, [pc, #80]	; (62c0 <_usart_read_buffer+0x74>)
    6270:	4798      	blx	r3
		return STATUS_BUSY;
    6272:	2305      	movs	r3, #5
    6274:	e01e      	b.n	62b4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    6276:	68fb      	ldr	r3, [r7, #12]
    6278:	1dba      	adds	r2, r7, #6
    627a:	8812      	ldrh	r2, [r2, #0]
    627c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    627e:	4b10      	ldr	r3, [pc, #64]	; (62c0 <_usart_read_buffer+0x74>)
    6280:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    6282:	68fb      	ldr	r3, [r7, #12]
    6284:	68ba      	ldr	r2, [r7, #8]
    6286:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    6288:	68fa      	ldr	r2, [r7, #12]
    628a:	2332      	movs	r3, #50	; 0x32
    628c:	2105      	movs	r1, #5
    628e:	54d1      	strb	r1, [r2, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6290:	697b      	ldr	r3, [r7, #20]
    6292:	2204      	movs	r2, #4
    6294:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	7a1b      	ldrb	r3, [r3, #8]
    629a:	2b00      	cmp	r3, #0
    629c:	d002      	beq.n	62a4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    629e:	697b      	ldr	r3, [r7, #20]
    62a0:	2220      	movs	r2, #32
    62a2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	7a5b      	ldrb	r3, [r3, #9]
    62a8:	2b00      	cmp	r3, #0
    62aa:	d002      	beq.n	62b2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    62ac:	697b      	ldr	r3, [r7, #20]
    62ae:	2208      	movs	r2, #8
    62b0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    62b2:	2300      	movs	r3, #0
}
    62b4:	1c18      	adds	r0, r3, #0
    62b6:	46bd      	mov	sp, r7
    62b8:	b006      	add	sp, #24
    62ba:	bd80      	pop	{r7, pc}
    62bc:	0000618d 	.word	0x0000618d
    62c0:	0000619d 	.word	0x0000619d

000062c4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    62c4:	b580      	push	{r7, lr}
    62c6:	b084      	sub	sp, #16
    62c8:	af00      	add	r7, sp, #0
    62ca:	60f8      	str	r0, [r7, #12]
    62cc:	60b9      	str	r1, [r7, #8]
    62ce:	1dfb      	adds	r3, r7, #7
    62d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    62d2:	1dfb      	adds	r3, r7, #7
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	68fa      	ldr	r2, [r7, #12]
    62d8:	3302      	adds	r3, #2
    62da:	009b      	lsls	r3, r3, #2
    62dc:	18d3      	adds	r3, r2, r3
    62de:	68ba      	ldr	r2, [r7, #8]
    62e0:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    62e2:	68fa      	ldr	r2, [r7, #12]
    62e4:	2330      	movs	r3, #48	; 0x30
    62e6:	5cd3      	ldrb	r3, [r2, r3]
    62e8:	b2da      	uxtb	r2, r3
    62ea:	1dfb      	adds	r3, r7, #7
    62ec:	781b      	ldrb	r3, [r3, #0]
    62ee:	2101      	movs	r1, #1
    62f0:	1c08      	adds	r0, r1, #0
    62f2:	4098      	lsls	r0, r3
    62f4:	1c03      	adds	r3, r0, #0
    62f6:	b2db      	uxtb	r3, r3
    62f8:	4313      	orrs	r3, r2
    62fa:	b2db      	uxtb	r3, r3
    62fc:	b2d9      	uxtb	r1, r3
    62fe:	68fa      	ldr	r2, [r7, #12]
    6300:	2330      	movs	r3, #48	; 0x30
    6302:	54d1      	strb	r1, [r2, r3]
}
    6304:	46bd      	mov	sp, r7
    6306:	b004      	add	sp, #16
    6308:	bd80      	pop	{r7, pc}
    630a:	46c0      	nop			; (mov r8, r8)

0000630c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    630c:	b580      	push	{r7, lr}
    630e:	b084      	sub	sp, #16
    6310:	af00      	add	r7, sp, #0
    6312:	60f8      	str	r0, [r7, #12]
    6314:	60b9      	str	r1, [r7, #8]
    6316:	1dbb      	adds	r3, r7, #6
    6318:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    631a:	1dbb      	adds	r3, r7, #6
    631c:	881b      	ldrh	r3, [r3, #0]
    631e:	2b00      	cmp	r3, #0
    6320:	d101      	bne.n	6326 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    6322:	2317      	movs	r3, #23
    6324:	e012      	b.n	634c <usart_write_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    6326:	68fb      	ldr	r3, [r7, #12]
    6328:	79db      	ldrb	r3, [r3, #7]
    632a:	2201      	movs	r2, #1
    632c:	4053      	eors	r3, r2
    632e:	b2db      	uxtb	r3, r3
    6330:	2b00      	cmp	r3, #0
    6332:	d001      	beq.n	6338 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6334:	231c      	movs	r3, #28
    6336:	e009      	b.n	634c <usart_write_buffer_job+0x40>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    6338:	68f9      	ldr	r1, [r7, #12]
    633a:	68ba      	ldr	r2, [r7, #8]
    633c:	1dbb      	adds	r3, r7, #6
    633e:	881b      	ldrh	r3, [r3, #0]
    6340:	1c08      	adds	r0, r1, #0
    6342:	1c11      	adds	r1, r2, #0
    6344:	1c1a      	adds	r2, r3, #0
    6346:	4b03      	ldr	r3, [pc, #12]	; (6354 <usart_write_buffer_job+0x48>)
    6348:	4798      	blx	r3
    634a:	1c03      	adds	r3, r0, #0
}
    634c:	1c18      	adds	r0, r3, #0
    634e:	46bd      	mov	sp, r7
    6350:	b004      	add	sp, #16
    6352:	bd80      	pop	{r7, pc}
    6354:	000061f1 	.word	0x000061f1

00006358 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6358:	b580      	push	{r7, lr}
    635a:	b084      	sub	sp, #16
    635c:	af00      	add	r7, sp, #0
    635e:	60f8      	str	r0, [r7, #12]
    6360:	60b9      	str	r1, [r7, #8]
    6362:	1dbb      	adds	r3, r7, #6
    6364:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    6366:	1dbb      	adds	r3, r7, #6
    6368:	881b      	ldrh	r3, [r3, #0]
    636a:	2b00      	cmp	r3, #0
    636c:	d101      	bne.n	6372 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    636e:	2317      	movs	r3, #23
    6370:	e012      	b.n	6398 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6372:	68fb      	ldr	r3, [r7, #12]
    6374:	799b      	ldrb	r3, [r3, #6]
    6376:	2201      	movs	r2, #1
    6378:	4053      	eors	r3, r2
    637a:	b2db      	uxtb	r3, r3
    637c:	2b00      	cmp	r3, #0
    637e:	d001      	beq.n	6384 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    6380:	231c      	movs	r3, #28
    6382:	e009      	b.n	6398 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    6384:	68f9      	ldr	r1, [r7, #12]
    6386:	68ba      	ldr	r2, [r7, #8]
    6388:	1dbb      	adds	r3, r7, #6
    638a:	881b      	ldrh	r3, [r3, #0]
    638c:	1c08      	adds	r0, r1, #0
    638e:	1c11      	adds	r1, r2, #0
    6390:	1c1a      	adds	r2, r3, #0
    6392:	4b03      	ldr	r3, [pc, #12]	; (63a0 <usart_read_buffer_job+0x48>)
    6394:	4798      	blx	r3
    6396:	1c03      	adds	r3, r0, #0
}
    6398:	1c18      	adds	r0, r3, #0
    639a:	46bd      	mov	sp, r7
    639c:	b004      	add	sp, #16
    639e:	bd80      	pop	{r7, pc}
    63a0:	0000624d 	.word	0x0000624d

000063a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    63a4:	b580      	push	{r7, lr}
    63a6:	b088      	sub	sp, #32
    63a8:	af00      	add	r7, sp, #0
    63aa:	1c02      	adds	r2, r0, #0
    63ac:	1dfb      	adds	r3, r7, #7
    63ae:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    63b0:	1dfb      	adds	r3, r7, #7
    63b2:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    63b4:	4bb0      	ldr	r3, [pc, #704]	; (6678 <_usart_interrupt_handler+0x2d4>)
    63b6:	0092      	lsls	r2, r2, #2
    63b8:	58d3      	ldr	r3, [r2, r3]
    63ba:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    63bc:	69bb      	ldr	r3, [r7, #24]
    63be:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    63c0:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    63c2:	69bb      	ldr	r3, [r7, #24]
    63c4:	1c18      	adds	r0, r3, #0
    63c6:	4bad      	ldr	r3, [pc, #692]	; (667c <_usart_interrupt_handler+0x2d8>)
    63c8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    63ca:	697b      	ldr	r3, [r7, #20]
    63cc:	7e1b      	ldrb	r3, [r3, #24]
    63ce:	b2da      	uxtb	r2, r3
    63d0:	1c3b      	adds	r3, r7, #0
    63d2:	3312      	adds	r3, #18
    63d4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    63d6:	697b      	ldr	r3, [r7, #20]
    63d8:	7d9b      	ldrb	r3, [r3, #22]
    63da:	b2db      	uxtb	r3, r3
    63dc:	1c1a      	adds	r2, r3, #0
    63de:	1c3b      	adds	r3, r7, #0
    63e0:	3312      	adds	r3, #18
    63e2:	1c39      	adds	r1, r7, #0
    63e4:	3112      	adds	r1, #18
    63e6:	8809      	ldrh	r1, [r1, #0]
    63e8:	400a      	ands	r2, r1
    63ea:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    63ec:	69ba      	ldr	r2, [r7, #24]
    63ee:	2330      	movs	r3, #48	; 0x30
    63f0:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    63f2:	69b9      	ldr	r1, [r7, #24]
    63f4:	2231      	movs	r2, #49	; 0x31
    63f6:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    63f8:	4013      	ands	r3, r2
    63fa:	b2da      	uxtb	r2, r3
    63fc:	1c3b      	adds	r3, r7, #0
    63fe:	3310      	adds	r3, #16
    6400:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6402:	1c3b      	adds	r3, r7, #0
    6404:	3312      	adds	r3, #18
    6406:	881a      	ldrh	r2, [r3, #0]
    6408:	2301      	movs	r3, #1
    640a:	4013      	ands	r3, r2
    640c:	d044      	beq.n	6498 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    640e:	69bb      	ldr	r3, [r7, #24]
    6410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6412:	b29b      	uxth	r3, r3
    6414:	2b00      	cmp	r3, #0
    6416:	d03c      	beq.n	6492 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6418:	69bb      	ldr	r3, [r7, #24]
    641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    641c:	781b      	ldrb	r3, [r3, #0]
    641e:	b2da      	uxtb	r2, r3
    6420:	1c3b      	adds	r3, r7, #0
    6422:	331c      	adds	r3, #28
    6424:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6426:	69bb      	ldr	r3, [r7, #24]
    6428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    642a:	1c5a      	adds	r2, r3, #1
    642c:	69bb      	ldr	r3, [r7, #24]
    642e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6430:	69bb      	ldr	r3, [r7, #24]
    6432:	795b      	ldrb	r3, [r3, #5]
    6434:	2b01      	cmp	r3, #1
    6436:	d112      	bne.n	645e <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6438:	69bb      	ldr	r3, [r7, #24]
    643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    643c:	781b      	ldrb	r3, [r3, #0]
    643e:	b2db      	uxtb	r3, r3
    6440:	021b      	lsls	r3, r3, #8
    6442:	b29a      	uxth	r2, r3
    6444:	1c3b      	adds	r3, r7, #0
    6446:	331c      	adds	r3, #28
    6448:	881b      	ldrh	r3, [r3, #0]
    644a:	4313      	orrs	r3, r2
    644c:	b29a      	uxth	r2, r3
    644e:	1c3b      	adds	r3, r7, #0
    6450:	331c      	adds	r3, #28
    6452:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6454:	69bb      	ldr	r3, [r7, #24]
    6456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6458:	1c5a      	adds	r2, r3, #1
    645a:	69bb      	ldr	r3, [r7, #24]
    645c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    645e:	1c3b      	adds	r3, r7, #0
    6460:	331c      	adds	r3, #28
    6462:	881b      	ldrh	r3, [r3, #0]
    6464:	05db      	lsls	r3, r3, #23
    6466:	0ddb      	lsrs	r3, r3, #23
    6468:	b29a      	uxth	r2, r3
    646a:	697b      	ldr	r3, [r7, #20]
    646c:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    646e:	69bb      	ldr	r3, [r7, #24]
    6470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6472:	b29b      	uxth	r3, r3
    6474:	3b01      	subs	r3, #1
    6476:	b29b      	uxth	r3, r3
    6478:	69ba      	ldr	r2, [r7, #24]
    647a:	1c19      	adds	r1, r3, #0
    647c:	85d1      	strh	r1, [r2, #46]	; 0x2e
    647e:	2b00      	cmp	r3, #0
    6480:	d106      	bne.n	6490 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6482:	697b      	ldr	r3, [r7, #20]
    6484:	2201      	movs	r2, #1
    6486:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6488:	697b      	ldr	r3, [r7, #20]
    648a:	2202      	movs	r2, #2
    648c:	759a      	strb	r2, [r3, #22]
    648e:	e003      	b.n	6498 <_usart_interrupt_handler+0xf4>
    6490:	e002      	b.n	6498 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6492:	697b      	ldr	r3, [r7, #20]
    6494:	2201      	movs	r2, #1
    6496:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6498:	1c3b      	adds	r3, r7, #0
    649a:	3312      	adds	r3, #18
    649c:	881a      	ldrh	r2, [r3, #0]
    649e:	2302      	movs	r3, #2
    64a0:	4013      	ands	r3, r2
    64a2:	d011      	beq.n	64c8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    64a4:	697b      	ldr	r3, [r7, #20]
    64a6:	2202      	movs	r2, #2
    64a8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    64aa:	69ba      	ldr	r2, [r7, #24]
    64ac:	2333      	movs	r3, #51	; 0x33
    64ae:	2100      	movs	r1, #0
    64b0:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    64b2:	1c3b      	adds	r3, r7, #0
    64b4:	3310      	adds	r3, #16
    64b6:	881a      	ldrh	r2, [r3, #0]
    64b8:	2301      	movs	r3, #1
    64ba:	4013      	ands	r3, r2
    64bc:	d004      	beq.n	64c8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    64be:	69bb      	ldr	r3, [r7, #24]
    64c0:	68db      	ldr	r3, [r3, #12]
    64c2:	69ba      	ldr	r2, [r7, #24]
    64c4:	1c10      	adds	r0, r2, #0
    64c6:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    64c8:	1c3b      	adds	r3, r7, #0
    64ca:	3312      	adds	r3, #18
    64cc:	881a      	ldrh	r2, [r3, #0]
    64ce:	2304      	movs	r3, #4
    64d0:	4013      	ands	r3, r2
    64d2:	d100      	bne.n	64d6 <_usart_interrupt_handler+0x132>
    64d4:	e0d7      	b.n	6686 <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    64d6:	69bb      	ldr	r3, [r7, #24]
    64d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    64da:	b29b      	uxth	r3, r3
    64dc:	2b00      	cmp	r3, #0
    64de:	d100      	bne.n	64e2 <_usart_interrupt_handler+0x13e>
    64e0:	e0ce      	b.n	6680 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    64e2:	697b      	ldr	r3, [r7, #20]
    64e4:	8b5b      	ldrh	r3, [r3, #26]
    64e6:	b29b      	uxth	r3, r3
    64e8:	b2d9      	uxtb	r1, r3
    64ea:	1c3b      	adds	r3, r7, #0
    64ec:	331f      	adds	r3, #31
    64ee:	223f      	movs	r2, #63	; 0x3f
    64f0:	400a      	ands	r2, r1
    64f2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    64f4:	1c3b      	adds	r3, r7, #0
    64f6:	331f      	adds	r3, #31
    64f8:	781a      	ldrb	r2, [r3, #0]
    64fa:	2308      	movs	r3, #8
    64fc:	4013      	ands	r3, r2
    64fe:	d007      	beq.n	6510 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6500:	1c3b      	adds	r3, r7, #0
    6502:	331f      	adds	r3, #31
    6504:	1c3a      	adds	r2, r7, #0
    6506:	321f      	adds	r2, #31
    6508:	7812      	ldrb	r2, [r2, #0]
    650a:	2108      	movs	r1, #8
    650c:	438a      	bics	r2, r1
    650e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6510:	1c3b      	adds	r3, r7, #0
    6512:	331f      	adds	r3, #31
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	2b00      	cmp	r3, #0
    6518:	d100      	bne.n	651c <_usart_interrupt_handler+0x178>
    651a:	e069      	b.n	65f0 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    651c:	1c3b      	adds	r3, r7, #0
    651e:	331f      	adds	r3, #31
    6520:	781a      	ldrb	r2, [r3, #0]
    6522:	2302      	movs	r3, #2
    6524:	4013      	ands	r3, r2
    6526:	d00c      	beq.n	6542 <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6528:	69ba      	ldr	r2, [r7, #24]
    652a:	2332      	movs	r3, #50	; 0x32
    652c:	211a      	movs	r1, #26
    652e:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    6530:	697b      	ldr	r3, [r7, #20]
    6532:	8b5b      	ldrh	r3, [r3, #26]
    6534:	b29b      	uxth	r3, r3
    6536:	2202      	movs	r2, #2
    6538:	4313      	orrs	r3, r2
    653a:	b29a      	uxth	r2, r3
    653c:	697b      	ldr	r3, [r7, #20]
    653e:	835a      	strh	r2, [r3, #26]
    6540:	e04a      	b.n	65d8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6542:	1c3b      	adds	r3, r7, #0
    6544:	331f      	adds	r3, #31
    6546:	781a      	ldrb	r2, [r3, #0]
    6548:	2304      	movs	r3, #4
    654a:	4013      	ands	r3, r2
    654c:	d00c      	beq.n	6568 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    654e:	69ba      	ldr	r2, [r7, #24]
    6550:	2332      	movs	r3, #50	; 0x32
    6552:	211e      	movs	r1, #30
    6554:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    6556:	697b      	ldr	r3, [r7, #20]
    6558:	8b5b      	ldrh	r3, [r3, #26]
    655a:	b29b      	uxth	r3, r3
    655c:	2204      	movs	r2, #4
    655e:	4313      	orrs	r3, r2
    6560:	b29a      	uxth	r2, r3
    6562:	697b      	ldr	r3, [r7, #20]
    6564:	835a      	strh	r2, [r3, #26]
    6566:	e037      	b.n	65d8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6568:	1c3b      	adds	r3, r7, #0
    656a:	331f      	adds	r3, #31
    656c:	781a      	ldrb	r2, [r3, #0]
    656e:	2301      	movs	r3, #1
    6570:	4013      	ands	r3, r2
    6572:	d00c      	beq.n	658e <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6574:	69ba      	ldr	r2, [r7, #24]
    6576:	2332      	movs	r3, #50	; 0x32
    6578:	2113      	movs	r1, #19
    657a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    657c:	697b      	ldr	r3, [r7, #20]
    657e:	8b5b      	ldrh	r3, [r3, #26]
    6580:	b29b      	uxth	r3, r3
    6582:	2201      	movs	r2, #1
    6584:	4313      	orrs	r3, r2
    6586:	b29a      	uxth	r2, r3
    6588:	697b      	ldr	r3, [r7, #20]
    658a:	835a      	strh	r2, [r3, #26]
    658c:	e024      	b.n	65d8 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    658e:	1c3b      	adds	r3, r7, #0
    6590:	331f      	adds	r3, #31
    6592:	781a      	ldrb	r2, [r3, #0]
    6594:	2310      	movs	r3, #16
    6596:	4013      	ands	r3, r2
    6598:	d00c      	beq.n	65b4 <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    659a:	69ba      	ldr	r2, [r7, #24]
    659c:	2332      	movs	r3, #50	; 0x32
    659e:	2142      	movs	r1, #66	; 0x42
    65a0:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    65a2:	697b      	ldr	r3, [r7, #20]
    65a4:	8b5b      	ldrh	r3, [r3, #26]
    65a6:	b29b      	uxth	r3, r3
    65a8:	2210      	movs	r2, #16
    65aa:	4313      	orrs	r3, r2
    65ac:	b29a      	uxth	r2, r3
    65ae:	697b      	ldr	r3, [r7, #20]
    65b0:	835a      	strh	r2, [r3, #26]
    65b2:	e011      	b.n	65d8 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    65b4:	1c3b      	adds	r3, r7, #0
    65b6:	331f      	adds	r3, #31
    65b8:	781a      	ldrb	r2, [r3, #0]
    65ba:	2320      	movs	r3, #32
    65bc:	4013      	ands	r3, r2
    65be:	d00b      	beq.n	65d8 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    65c0:	69ba      	ldr	r2, [r7, #24]
    65c2:	2332      	movs	r3, #50	; 0x32
    65c4:	2141      	movs	r1, #65	; 0x41
    65c6:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    65c8:	697b      	ldr	r3, [r7, #20]
    65ca:	8b5b      	ldrh	r3, [r3, #26]
    65cc:	b29b      	uxth	r3, r3
    65ce:	2220      	movs	r2, #32
    65d0:	4313      	orrs	r3, r2
    65d2:	b29a      	uxth	r2, r3
    65d4:	697b      	ldr	r3, [r7, #20]
    65d6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    65d8:	1c3b      	adds	r3, r7, #0
    65da:	3310      	adds	r3, #16
    65dc:	881a      	ldrh	r2, [r3, #0]
    65de:	2304      	movs	r3, #4
    65e0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    65e2:	d050      	beq.n	6686 <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    65e4:	69bb      	ldr	r3, [r7, #24]
    65e6:	695b      	ldr	r3, [r3, #20]
    65e8:	69ba      	ldr	r2, [r7, #24]
    65ea:	1c10      	adds	r0, r2, #0
    65ec:	4798      	blx	r3
    65ee:	e04a      	b.n	6686 <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    65f0:	697b      	ldr	r3, [r7, #20]
    65f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    65f4:	b29a      	uxth	r2, r3
    65f6:	1c3b      	adds	r3, r7, #0
    65f8:	330e      	adds	r3, #14
    65fa:	05d2      	lsls	r2, r2, #23
    65fc:	0dd2      	lsrs	r2, r2, #23
    65fe:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6600:	69bb      	ldr	r3, [r7, #24]
    6602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6604:	1c3a      	adds	r2, r7, #0
    6606:	320e      	adds	r2, #14
    6608:	8812      	ldrh	r2, [r2, #0]
    660a:	b2d2      	uxtb	r2, r2
    660c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    660e:	69bb      	ldr	r3, [r7, #24]
    6610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6612:	1c5a      	adds	r2, r3, #1
    6614:	69bb      	ldr	r3, [r7, #24]
    6616:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6618:	69bb      	ldr	r3, [r7, #24]
    661a:	795b      	ldrb	r3, [r3, #5]
    661c:	2b01      	cmp	r3, #1
    661e:	d10d      	bne.n	663c <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6620:	69bb      	ldr	r3, [r7, #24]
    6622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6624:	1c3a      	adds	r2, r7, #0
    6626:	320e      	adds	r2, #14
    6628:	8812      	ldrh	r2, [r2, #0]
    662a:	0a12      	lsrs	r2, r2, #8
    662c:	b292      	uxth	r2, r2
    662e:	b2d2      	uxtb	r2, r2
    6630:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    6632:	69bb      	ldr	r3, [r7, #24]
    6634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6636:	1c5a      	adds	r2, r3, #1
    6638:	69bb      	ldr	r3, [r7, #24]
    663a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    663c:	69bb      	ldr	r3, [r7, #24]
    663e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6640:	b29b      	uxth	r3, r3
    6642:	3b01      	subs	r3, #1
    6644:	b29b      	uxth	r3, r3
    6646:	69ba      	ldr	r2, [r7, #24]
    6648:	1c19      	adds	r1, r3, #0
    664a:	8591      	strh	r1, [r2, #44]	; 0x2c
    664c:	2b00      	cmp	r3, #0
    664e:	d112      	bne.n	6676 <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6650:	697b      	ldr	r3, [r7, #20]
    6652:	2204      	movs	r2, #4
    6654:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6656:	69ba      	ldr	r2, [r7, #24]
    6658:	2332      	movs	r3, #50	; 0x32
    665a:	2100      	movs	r1, #0
    665c:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    665e:	1c3b      	adds	r3, r7, #0
    6660:	3310      	adds	r3, #16
    6662:	881a      	ldrh	r2, [r3, #0]
    6664:	2302      	movs	r3, #2
    6666:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    6668:	d005      	beq.n	6676 <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    666a:	69bb      	ldr	r3, [r7, #24]
    666c:	691b      	ldr	r3, [r3, #16]
    666e:	69ba      	ldr	r2, [r7, #24]
    6670:	1c10      	adds	r0, r2, #0
    6672:	4798      	blx	r3
    6674:	e007      	b.n	6686 <_usart_interrupt_handler+0x2e2>
    6676:	e006      	b.n	6686 <_usart_interrupt_handler+0x2e2>
    6678:	200069e4 	.word	0x200069e4
    667c:	000061cd 	.word	0x000061cd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6680:	697b      	ldr	r3, [r7, #20]
    6682:	2204      	movs	r2, #4
    6684:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6686:	1c3b      	adds	r3, r7, #0
    6688:	3312      	adds	r3, #18
    668a:	881a      	ldrh	r2, [r3, #0]
    668c:	2310      	movs	r3, #16
    668e:	4013      	ands	r3, r2
    6690:	d010      	beq.n	66b4 <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6692:	697b      	ldr	r3, [r7, #20]
    6694:	2210      	movs	r2, #16
    6696:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6698:	697b      	ldr	r3, [r7, #20]
    669a:	2210      	movs	r2, #16
    669c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    669e:	1c3b      	adds	r3, r7, #0
    66a0:	3310      	adds	r3, #16
    66a2:	881a      	ldrh	r2, [r3, #0]
    66a4:	2310      	movs	r3, #16
    66a6:	4013      	ands	r3, r2
    66a8:	d004      	beq.n	66b4 <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    66aa:	69bb      	ldr	r3, [r7, #24]
    66ac:	69db      	ldr	r3, [r3, #28]
    66ae:	69ba      	ldr	r2, [r7, #24]
    66b0:	1c10      	adds	r0, r2, #0
    66b2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    66b4:	1c3b      	adds	r3, r7, #0
    66b6:	3312      	adds	r3, #18
    66b8:	881a      	ldrh	r2, [r3, #0]
    66ba:	2320      	movs	r3, #32
    66bc:	4013      	ands	r3, r2
    66be:	d010      	beq.n	66e2 <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    66c0:	697b      	ldr	r3, [r7, #20]
    66c2:	2220      	movs	r2, #32
    66c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    66c6:	697b      	ldr	r3, [r7, #20]
    66c8:	2220      	movs	r2, #32
    66ca:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    66cc:	1c3b      	adds	r3, r7, #0
    66ce:	3310      	adds	r3, #16
    66d0:	881a      	ldrh	r2, [r3, #0]
    66d2:	2308      	movs	r3, #8
    66d4:	4013      	ands	r3, r2
    66d6:	d004      	beq.n	66e2 <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    66d8:	69bb      	ldr	r3, [r7, #24]
    66da:	699b      	ldr	r3, [r3, #24]
    66dc:	69ba      	ldr	r2, [r7, #24]
    66de:	1c10      	adds	r0, r2, #0
    66e0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    66e2:	1c3b      	adds	r3, r7, #0
    66e4:	3312      	adds	r3, #18
    66e6:	881a      	ldrh	r2, [r3, #0]
    66e8:	2308      	movs	r3, #8
    66ea:	4013      	ands	r3, r2
    66ec:	d010      	beq.n	6710 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    66ee:	697b      	ldr	r3, [r7, #20]
    66f0:	2208      	movs	r2, #8
    66f2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    66f4:	697b      	ldr	r3, [r7, #20]
    66f6:	2208      	movs	r2, #8
    66f8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    66fa:	1c3b      	adds	r3, r7, #0
    66fc:	3310      	adds	r3, #16
    66fe:	881a      	ldrh	r2, [r3, #0]
    6700:	2320      	movs	r3, #32
    6702:	4013      	ands	r3, r2
    6704:	d004      	beq.n	6710 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6706:	69bb      	ldr	r3, [r7, #24]
    6708:	6a1b      	ldr	r3, [r3, #32]
    670a:	69ba      	ldr	r2, [r7, #24]
    670c:	1c10      	adds	r0, r2, #0
    670e:	4798      	blx	r3
		}
	}
#endif
}
    6710:	46bd      	mov	sp, r7
    6712:	b008      	add	sp, #32
    6714:	bd80      	pop	{r7, pc}
    6716:	46c0      	nop			; (mov r8, r8)

00006718 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    6718:	b580      	push	{r7, lr}
    671a:	b082      	sub	sp, #8
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	2201      	movs	r2, #1
    6724:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6726:	687b      	ldr	r3, [r7, #4]
    6728:	2200      	movs	r2, #0
    672a:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    672c:	687b      	ldr	r3, [r7, #4]
    672e:	2206      	movs	r2, #6
    6730:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	2200      	movs	r2, #0
    6736:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	2200      	movs	r2, #0
    673c:	725a      	strb	r2, [r3, #9]
}
    673e:	46bd      	mov	sp, r7
    6740:	b002      	add	sp, #8
    6742:	bd80      	pop	{r7, pc}

00006744 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    6744:	b580      	push	{r7, lr}
    6746:	b082      	sub	sp, #8
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	2203      	movs	r2, #3
    6750:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	2200      	movs	r2, #0
    6756:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	2201      	movs	r2, #1
    675c:	709a      	strb	r2, [r3, #2]
}
    675e:	46bd      	mov	sp, r7
    6760:	b002      	add	sp, #8
    6762:	bd80      	pop	{r7, pc}

00006764 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    6764:	b580      	push	{r7, lr}
    6766:	b082      	sub	sp, #8
    6768:	af00      	add	r7, sp, #0
    676a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	2200      	movs	r2, #0
    6770:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	2200      	movs	r2, #0
    6776:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	2200      	movs	r2, #0
    677c:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	2200      	movs	r2, #0
    6782:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	2200      	movs	r2, #0
    6788:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	2201      	movs	r2, #1
    678e:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	2207      	movs	r2, #7
    6794:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	223f      	movs	r2, #63	; 0x3f
    679a:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	2201      	movs	r2, #1
    67a0:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	2201      	movs	r2, #1
    67a6:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	2206      	movs	r2, #6
    67ac:	821a      	strh	r2, [r3, #16]
}
    67ae:	46bd      	mov	sp, r7
    67b0:	b002      	add	sp, #8
    67b2:	bd80      	pop	{r7, pc}

000067b4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
    67ba:	1c02      	adds	r2, r0, #0
    67bc:	1dfb      	adds	r3, r7, #7
    67be:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    67c0:	4b03      	ldr	r3, [pc, #12]	; (67d0 <system_cpu_clock_set_divider+0x1c>)
    67c2:	1dfa      	adds	r2, r7, #7
    67c4:	7812      	ldrb	r2, [r2, #0]
    67c6:	721a      	strb	r2, [r3, #8]
}
    67c8:	46bd      	mov	sp, r7
    67ca:	b002      	add	sp, #8
    67cc:	bd80      	pop	{r7, pc}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	40000400 	.word	0x40000400

000067d4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b082      	sub	sp, #8
    67d8:	af00      	add	r7, sp, #0
    67da:	1c0a      	adds	r2, r1, #0
    67dc:	1dfb      	adds	r3, r7, #7
    67de:	1c01      	adds	r1, r0, #0
    67e0:	7019      	strb	r1, [r3, #0]
    67e2:	1dbb      	adds	r3, r7, #6
    67e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    67e6:	1dfb      	adds	r3, r7, #7
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	2b01      	cmp	r3, #1
    67ec:	d008      	beq.n	6800 <system_apb_clock_set_divider+0x2c>
    67ee:	2b02      	cmp	r3, #2
    67f0:	d00b      	beq.n	680a <system_apb_clock_set_divider+0x36>
    67f2:	2b00      	cmp	r3, #0
    67f4:	d10e      	bne.n	6814 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    67f6:	4b0b      	ldr	r3, [pc, #44]	; (6824 <system_apb_clock_set_divider+0x50>)
    67f8:	1dba      	adds	r2, r7, #6
    67fa:	7812      	ldrb	r2, [r2, #0]
    67fc:	725a      	strb	r2, [r3, #9]
			break;
    67fe:	e00b      	b.n	6818 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    6800:	4b08      	ldr	r3, [pc, #32]	; (6824 <system_apb_clock_set_divider+0x50>)
    6802:	1dba      	adds	r2, r7, #6
    6804:	7812      	ldrb	r2, [r2, #0]
    6806:	729a      	strb	r2, [r3, #10]
			break;
    6808:	e006      	b.n	6818 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    680a:	4b06      	ldr	r3, [pc, #24]	; (6824 <system_apb_clock_set_divider+0x50>)
    680c:	1dba      	adds	r2, r7, #6
    680e:	7812      	ldrb	r2, [r2, #0]
    6810:	72da      	strb	r2, [r3, #11]
			break;
    6812:	e001      	b.n	6818 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6814:	2317      	movs	r3, #23
    6816:	e000      	b.n	681a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    6818:	2300      	movs	r3, #0
}
    681a:	1c18      	adds	r0, r3, #0
    681c:	46bd      	mov	sp, r7
    681e:	b002      	add	sp, #8
    6820:	bd80      	pop	{r7, pc}
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	40000400 	.word	0x40000400

00006828 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6828:	b580      	push	{r7, lr}
    682a:	b082      	sub	sp, #8
    682c:	af00      	add	r7, sp, #0
    682e:	1c02      	adds	r2, r0, #0
    6830:	1dfb      	adds	r3, r7, #7
    6832:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6834:	4b08      	ldr	r3, [pc, #32]	; (6858 <system_flash_set_waitstates+0x30>)
    6836:	1dfa      	adds	r2, r7, #7
    6838:	7811      	ldrb	r1, [r2, #0]
    683a:	220f      	movs	r2, #15
    683c:	400a      	ands	r2, r1
    683e:	b2d1      	uxtb	r1, r2
    6840:	220f      	movs	r2, #15
    6842:	400a      	ands	r2, r1
    6844:	0052      	lsls	r2, r2, #1
    6846:	6859      	ldr	r1, [r3, #4]
    6848:	201e      	movs	r0, #30
    684a:	4381      	bics	r1, r0
    684c:	430a      	orrs	r2, r1
    684e:	605a      	str	r2, [r3, #4]
}
    6850:	46bd      	mov	sp, r7
    6852:	b002      	add	sp, #8
    6854:	bd80      	pop	{r7, pc}
    6856:	46c0      	nop			; (mov r8, r8)
    6858:	41004000 	.word	0x41004000

0000685c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    685c:	b580      	push	{r7, lr}
    685e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6860:	46c0      	nop			; (mov r8, r8)
    6862:	4b03      	ldr	r3, [pc, #12]	; (6870 <_system_dfll_wait_for_sync+0x14>)
    6864:	68da      	ldr	r2, [r3, #12]
    6866:	2310      	movs	r3, #16
    6868:	4013      	ands	r3, r2
    686a:	d0fa      	beq.n	6862 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    686c:	46bd      	mov	sp, r7
    686e:	bd80      	pop	{r7, pc}
    6870:	40000800 	.word	0x40000800

00006874 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6874:	b580      	push	{r7, lr}
    6876:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    6878:	4a0c      	ldr	r2, [pc, #48]	; (68ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    687a:	4b0d      	ldr	r3, [pc, #52]	; (68b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	b29b      	uxth	r3, r3
    6880:	2180      	movs	r1, #128	; 0x80
    6882:	438b      	bics	r3, r1
    6884:	b29b      	uxth	r3, r3
    6886:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6888:	4b0a      	ldr	r3, [pc, #40]	; (68b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    688a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    688c:	4b07      	ldr	r3, [pc, #28]	; (68ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    688e:	4a08      	ldr	r2, [pc, #32]	; (68b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6890:	6892      	ldr	r2, [r2, #8]
    6892:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6894:	4b05      	ldr	r3, [pc, #20]	; (68ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6896:	4a06      	ldr	r2, [pc, #24]	; (68b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6898:	6852      	ldr	r2, [r2, #4]
    689a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    689c:	4a03      	ldr	r2, [pc, #12]	; (68ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    689e:	4b04      	ldr	r3, [pc, #16]	; (68b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    68a0:	681b      	ldr	r3, [r3, #0]
    68a2:	b29b      	uxth	r3, r3
    68a4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    68a6:	46bd      	mov	sp, r7
    68a8:	bd80      	pop	{r7, pc}
    68aa:	46c0      	nop			; (mov r8, r8)
    68ac:	40000800 	.word	0x40000800
    68b0:	20004038 	.word	0x20004038
    68b4:	0000685d 	.word	0x0000685d

000068b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    68b8:	b580      	push	{r7, lr}
    68ba:	b082      	sub	sp, #8
    68bc:	af00      	add	r7, sp, #0
    68be:	1c02      	adds	r2, r0, #0
    68c0:	1dfb      	adds	r3, r7, #7
    68c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    68c4:	1dfb      	adds	r3, r7, #7
    68c6:	781b      	ldrb	r3, [r3, #0]
    68c8:	2b08      	cmp	r3, #8
    68ca:	d843      	bhi.n	6954 <system_clock_source_get_hz+0x9c>
    68cc:	009a      	lsls	r2, r3, #2
    68ce:	4b24      	ldr	r3, [pc, #144]	; (6960 <system_clock_source_get_hz+0xa8>)
    68d0:	18d3      	adds	r3, r2, r3
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    68d6:	4b23      	ldr	r3, [pc, #140]	; (6964 <system_clock_source_get_hz+0xac>)
    68d8:	691b      	ldr	r3, [r3, #16]
    68da:	e03c      	b.n	6956 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    68dc:	4b22      	ldr	r3, [pc, #136]	; (6968 <system_clock_source_get_hz+0xb0>)
    68de:	6a1b      	ldr	r3, [r3, #32]
    68e0:	0a1b      	lsrs	r3, r3, #8
    68e2:	1c1a      	adds	r2, r3, #0
    68e4:	2303      	movs	r3, #3
    68e6:	4013      	ands	r3, r2
    68e8:	b2db      	uxtb	r3, r3
    68ea:	4a20      	ldr	r2, [pc, #128]	; (696c <system_clock_source_get_hz+0xb4>)
    68ec:	1c11      	adds	r1, r2, #0
    68ee:	40d9      	lsrs	r1, r3
    68f0:	1c0b      	adds	r3, r1, #0
    68f2:	e030      	b.n	6956 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    68f4:	2380      	movs	r3, #128	; 0x80
    68f6:	021b      	lsls	r3, r3, #8
    68f8:	e02d      	b.n	6956 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    68fa:	2380      	movs	r3, #128	; 0x80
    68fc:	021b      	lsls	r3, r3, #8
    68fe:	e02a      	b.n	6956 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6900:	4b18      	ldr	r3, [pc, #96]	; (6964 <system_clock_source_get_hz+0xac>)
    6902:	695b      	ldr	r3, [r3, #20]
    6904:	e027      	b.n	6956 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6906:	4b17      	ldr	r3, [pc, #92]	; (6964 <system_clock_source_get_hz+0xac>)
    6908:	681a      	ldr	r2, [r3, #0]
    690a:	2302      	movs	r3, #2
    690c:	4013      	ands	r3, r2
    690e:	d101      	bne.n	6914 <system_clock_source_get_hz+0x5c>
			return 0;
    6910:	2300      	movs	r3, #0
    6912:	e020      	b.n	6956 <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6914:	4b16      	ldr	r3, [pc, #88]	; (6970 <system_clock_source_get_hz+0xb8>)
    6916:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    6918:	4b12      	ldr	r3, [pc, #72]	; (6964 <system_clock_source_get_hz+0xac>)
    691a:	681a      	ldr	r2, [r3, #0]
    691c:	2304      	movs	r3, #4
    691e:	4013      	ands	r3, r2
    6920:	d009      	beq.n	6936 <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6922:	2000      	movs	r0, #0
    6924:	4b13      	ldr	r3, [pc, #76]	; (6974 <system_clock_source_get_hz+0xbc>)
    6926:	4798      	blx	r3
    6928:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    692a:	4b0e      	ldr	r3, [pc, #56]	; (6964 <system_clock_source_get_hz+0xac>)
    692c:	689b      	ldr	r3, [r3, #8]
    692e:	041b      	lsls	r3, r3, #16
    6930:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6932:	4353      	muls	r3, r2
    6934:	e00f      	b.n	6956 <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    6936:	4b10      	ldr	r3, [pc, #64]	; (6978 <system_clock_source_get_hz+0xc0>)
    6938:	e00d      	b.n	6956 <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    693a:	4a0b      	ldr	r2, [pc, #44]	; (6968 <system_clock_source_get_hz+0xb0>)
    693c:	2350      	movs	r3, #80	; 0x50
    693e:	5cd3      	ldrb	r3, [r2, r3]
    6940:	b2db      	uxtb	r3, r3
    6942:	1c1a      	adds	r2, r3, #0
    6944:	2304      	movs	r3, #4
    6946:	4013      	ands	r3, r2
    6948:	d101      	bne.n	694e <system_clock_source_get_hz+0x96>
			return 0;
    694a:	2300      	movs	r3, #0
    694c:	e003      	b.n	6956 <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    694e:	4b05      	ldr	r3, [pc, #20]	; (6964 <system_clock_source_get_hz+0xac>)
    6950:	68db      	ldr	r3, [r3, #12]
    6952:	e000      	b.n	6956 <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    6954:	2300      	movs	r3, #0
	}
}
    6956:	1c18      	adds	r0, r3, #0
    6958:	46bd      	mov	sp, r7
    695a:	b002      	add	sp, #8
    695c:	bd80      	pop	{r7, pc}
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	0000babc 	.word	0x0000babc
    6964:	20004038 	.word	0x20004038
    6968:	40000800 	.word	0x40000800
    696c:	007a1200 	.word	0x007a1200
    6970:	0000685d 	.word	0x0000685d
    6974:	00007219 	.word	0x00007219
    6978:	02dc6c00 	.word	0x02dc6c00

0000697c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    697c:	b580      	push	{r7, lr}
    697e:	b084      	sub	sp, #16
    6980:	af00      	add	r7, sp, #0
    6982:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6984:	4b16      	ldr	r3, [pc, #88]	; (69e0 <system_clock_source_osc8m_set_config+0x64>)
    6986:	6a1b      	ldr	r3, [r3, #32]
    6988:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	781b      	ldrb	r3, [r3, #0]
    698e:	1c1a      	adds	r2, r3, #0
    6990:	2303      	movs	r3, #3
    6992:	4013      	ands	r3, r2
    6994:	b2d9      	uxtb	r1, r3
    6996:	1c3b      	adds	r3, r7, #0
    6998:	330d      	adds	r3, #13
    699a:	2203      	movs	r2, #3
    699c:	400a      	ands	r2, r1
    699e:	7819      	ldrb	r1, [r3, #0]
    69a0:	2003      	movs	r0, #3
    69a2:	4381      	bics	r1, r0
    69a4:	430a      	orrs	r2, r1
    69a6:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	789a      	ldrb	r2, [r3, #2]
    69ac:	1c3b      	adds	r3, r7, #0
    69ae:	330c      	adds	r3, #12
    69b0:	01d2      	lsls	r2, r2, #7
    69b2:	7818      	ldrb	r0, [r3, #0]
    69b4:	217f      	movs	r1, #127	; 0x7f
    69b6:	4001      	ands	r1, r0
    69b8:	430a      	orrs	r2, r1
    69ba:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    69bc:	687b      	ldr	r3, [r7, #4]
    69be:	7859      	ldrb	r1, [r3, #1]
    69c0:	1c3b      	adds	r3, r7, #0
    69c2:	330c      	adds	r3, #12
    69c4:	2201      	movs	r2, #1
    69c6:	400a      	ands	r2, r1
    69c8:	0192      	lsls	r2, r2, #6
    69ca:	7819      	ldrb	r1, [r3, #0]
    69cc:	2040      	movs	r0, #64	; 0x40
    69ce:	4381      	bics	r1, r0
    69d0:	430a      	orrs	r2, r1
    69d2:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    69d4:	4b02      	ldr	r3, [pc, #8]	; (69e0 <system_clock_source_osc8m_set_config+0x64>)
    69d6:	68fa      	ldr	r2, [r7, #12]
    69d8:	621a      	str	r2, [r3, #32]
}
    69da:	46bd      	mov	sp, r7
    69dc:	b004      	add	sp, #16
    69de:	bd80      	pop	{r7, pc}
    69e0:	40000800 	.word	0x40000800

000069e4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    69e4:	b580      	push	{r7, lr}
    69e6:	b082      	sub	sp, #8
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	7a1b      	ldrb	r3, [r3, #8]
    69f0:	029b      	lsls	r3, r3, #10
    69f2:	041b      	lsls	r3, r3, #16
    69f4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    69f6:	687b      	ldr	r3, [r7, #4]
    69f8:	895b      	ldrh	r3, [r3, #10]
    69fa:	059b      	lsls	r3, r3, #22
    69fc:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    69fe:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    6a00:	4b22      	ldr	r3, [pc, #136]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a02:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6a0c:	4313      	orrs	r3, r2
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6a12:	687b      	ldr	r3, [r7, #4]
    6a14:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    6a16:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6a1c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	785b      	ldrb	r3, [r3, #1]
    6a22:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    6a24:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    6a26:	4b19      	ldr	r3, [pc, #100]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a28:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	781b      	ldrb	r3, [r3, #0]
    6a2e:	2b04      	cmp	r3, #4
    6a30:	d116      	bne.n	6a60 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6a32:	687b      	ldr	r3, [r7, #4]
    6a34:	7b1b      	ldrb	r3, [r3, #12]
    6a36:	069b      	lsls	r3, r3, #26
    6a38:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6a3a:	687b      	ldr	r3, [r7, #4]
    6a3c:	89db      	ldrh	r3, [r3, #14]
    6a3e:	041b      	lsls	r3, r3, #16
    6a40:	1c19      	adds	r1, r3, #0
    6a42:	4b13      	ldr	r3, [pc, #76]	; (6a90 <system_clock_source_dfll_set_config+0xac>)
    6a44:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6a46:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6a4c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    6a4e:	4b0f      	ldr	r3, [pc, #60]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a50:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6a52:	4b0e      	ldr	r3, [pc, #56]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a54:	681a      	ldr	r2, [r3, #0]
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	781b      	ldrb	r3, [r3, #0]
    6a5a:	431a      	orrs	r2, r3
    6a5c:	4b0b      	ldr	r3, [pc, #44]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a5e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	2b20      	cmp	r3, #32
    6a66:	d10e      	bne.n	6a86 <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	8a1b      	ldrh	r3, [r3, #16]
    6a6c:	1c1a      	adds	r2, r3, #0
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    6a6e:	4b07      	ldr	r3, [pc, #28]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a70:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6a72:	4b06      	ldr	r3, [pc, #24]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a74:	681a      	ldr	r2, [r3, #0]
    6a76:	687b      	ldr	r3, [r7, #4]
    6a78:	781b      	ldrb	r3, [r3, #0]
    6a7a:	4313      	orrs	r3, r2
    6a7c:	2280      	movs	r2, #128	; 0x80
    6a7e:	00d2      	lsls	r2, r2, #3
    6a80:	431a      	orrs	r2, r3
    6a82:	4b02      	ldr	r3, [pc, #8]	; (6a8c <system_clock_source_dfll_set_config+0xa8>)
    6a84:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6a86:	46bd      	mov	sp, r7
    6a88:	b002      	add	sp, #8
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	20004038 	.word	0x20004038
    6a90:	03ff0000 	.word	0x03ff0000

00006a94 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6a94:	b580      	push	{r7, lr}
    6a96:	b082      	sub	sp, #8
    6a98:	af00      	add	r7, sp, #0
    6a9a:	1c02      	adds	r2, r0, #0
    6a9c:	1dfb      	adds	r3, r7, #7
    6a9e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6aa0:	1dfb      	adds	r3, r7, #7
    6aa2:	781b      	ldrb	r3, [r3, #0]
    6aa4:	2b08      	cmp	r3, #8
    6aa6:	d83b      	bhi.n	6b20 <system_clock_source_enable+0x8c>
    6aa8:	009a      	lsls	r2, r3, #2
    6aaa:	4b21      	ldr	r3, [pc, #132]	; (6b30 <system_clock_source_enable+0x9c>)
    6aac:	18d3      	adds	r3, r2, r3
    6aae:	681b      	ldr	r3, [r3, #0]
    6ab0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6ab2:	4b20      	ldr	r3, [pc, #128]	; (6b34 <system_clock_source_enable+0xa0>)
    6ab4:	4a1f      	ldr	r2, [pc, #124]	; (6b34 <system_clock_source_enable+0xa0>)
    6ab6:	6a12      	ldr	r2, [r2, #32]
    6ab8:	2102      	movs	r1, #2
    6aba:	430a      	orrs	r2, r1
    6abc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6abe:	2300      	movs	r3, #0
    6ac0:	e031      	b.n	6b26 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6ac2:	4b1c      	ldr	r3, [pc, #112]	; (6b34 <system_clock_source_enable+0xa0>)
    6ac4:	4a1b      	ldr	r2, [pc, #108]	; (6b34 <system_clock_source_enable+0xa0>)
    6ac6:	6992      	ldr	r2, [r2, #24]
    6ac8:	2102      	movs	r1, #2
    6aca:	430a      	orrs	r2, r1
    6acc:	619a      	str	r2, [r3, #24]
		break;
    6ace:	e029      	b.n	6b24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6ad0:	4b18      	ldr	r3, [pc, #96]	; (6b34 <system_clock_source_enable+0xa0>)
    6ad2:	4a18      	ldr	r2, [pc, #96]	; (6b34 <system_clock_source_enable+0xa0>)
    6ad4:	8a12      	ldrh	r2, [r2, #16]
    6ad6:	b292      	uxth	r2, r2
    6ad8:	2102      	movs	r1, #2
    6ada:	430a      	orrs	r2, r1
    6adc:	b292      	uxth	r2, r2
    6ade:	821a      	strh	r2, [r3, #16]
		break;
    6ae0:	e020      	b.n	6b24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6ae2:	4b14      	ldr	r3, [pc, #80]	; (6b34 <system_clock_source_enable+0xa0>)
    6ae4:	4a13      	ldr	r2, [pc, #76]	; (6b34 <system_clock_source_enable+0xa0>)
    6ae6:	8a92      	ldrh	r2, [r2, #20]
    6ae8:	b292      	uxth	r2, r2
    6aea:	2102      	movs	r1, #2
    6aec:	430a      	orrs	r2, r1
    6aee:	b292      	uxth	r2, r2
    6af0:	829a      	strh	r2, [r3, #20]
		break;
    6af2:	e017      	b.n	6b24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6af4:	4b10      	ldr	r3, [pc, #64]	; (6b38 <system_clock_source_enable+0xa4>)
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	2202      	movs	r2, #2
    6afa:	431a      	orrs	r2, r3
    6afc:	4b0e      	ldr	r3, [pc, #56]	; (6b38 <system_clock_source_enable+0xa4>)
    6afe:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6b00:	4b0e      	ldr	r3, [pc, #56]	; (6b3c <system_clock_source_enable+0xa8>)
    6b02:	4798      	blx	r3
		break;
    6b04:	e00e      	b.n	6b24 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    6b06:	4a0b      	ldr	r2, [pc, #44]	; (6b34 <system_clock_source_enable+0xa0>)
    6b08:	490a      	ldr	r1, [pc, #40]	; (6b34 <system_clock_source_enable+0xa0>)
    6b0a:	2344      	movs	r3, #68	; 0x44
    6b0c:	5ccb      	ldrb	r3, [r1, r3]
    6b0e:	b2db      	uxtb	r3, r3
    6b10:	2102      	movs	r1, #2
    6b12:	430b      	orrs	r3, r1
    6b14:	b2d9      	uxtb	r1, r3
    6b16:	2344      	movs	r3, #68	; 0x44
    6b18:	54d1      	strb	r1, [r2, r3]
		break;
    6b1a:	e003      	b.n	6b24 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6b1c:	2300      	movs	r3, #0
    6b1e:	e002      	b.n	6b26 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6b20:	2317      	movs	r3, #23
    6b22:	e000      	b.n	6b26 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6b24:	2300      	movs	r3, #0
}
    6b26:	1c18      	adds	r0, r3, #0
    6b28:	46bd      	mov	sp, r7
    6b2a:	b002      	add	sp, #8
    6b2c:	bd80      	pop	{r7, pc}
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	0000bae0 	.word	0x0000bae0
    6b34:	40000800 	.word	0x40000800
    6b38:	20004038 	.word	0x20004038
    6b3c:	00006875 	.word	0x00006875

00006b40 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	b084      	sub	sp, #16
    6b44:	af00      	add	r7, sp, #0
    6b46:	1c02      	adds	r2, r0, #0
    6b48:	1dfb      	adds	r3, r7, #7
    6b4a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6b4c:	2300      	movs	r3, #0
    6b4e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6b50:	1dfb      	adds	r3, r7, #7
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	2b08      	cmp	r3, #8
    6b56:	d821      	bhi.n	6b9c <system_clock_source_is_ready+0x5c>
    6b58:	009a      	lsls	r2, r3, #2
    6b5a:	4b18      	ldr	r3, [pc, #96]	; (6bbc <system_clock_source_is_ready+0x7c>)
    6b5c:	18d3      	adds	r3, r2, r3
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6b62:	2308      	movs	r3, #8
    6b64:	60fb      	str	r3, [r7, #12]
		break;
    6b66:	e01b      	b.n	6ba0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6b68:	2304      	movs	r3, #4
    6b6a:	60fb      	str	r3, [r7, #12]
		break;
    6b6c:	e018      	b.n	6ba0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6b6e:	2301      	movs	r3, #1
    6b70:	60fb      	str	r3, [r7, #12]
		break;
    6b72:	e015      	b.n	6ba0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6b74:	2302      	movs	r3, #2
    6b76:	60fb      	str	r3, [r7, #12]
		break;
    6b78:	e012      	b.n	6ba0 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    6b7a:	2310      	movs	r3, #16
    6b7c:	60fb      	str	r3, [r7, #12]
		}
		break;
    6b7e:	e00f      	b.n	6ba0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6b80:	4a0f      	ldr	r2, [pc, #60]	; (6bc0 <system_clock_source_is_ready+0x80>)
    6b82:	2350      	movs	r3, #80	; 0x50
    6b84:	5cd3      	ldrb	r3, [r2, r3]
    6b86:	b2db      	uxtb	r3, r3
    6b88:	1c1a      	adds	r2, r3, #0
    6b8a:	2303      	movs	r3, #3
    6b8c:	4013      	ands	r3, r2
    6b8e:	3b03      	subs	r3, #3
    6b90:	425a      	negs	r2, r3
    6b92:	4153      	adcs	r3, r2
    6b94:	b2db      	uxtb	r3, r3
    6b96:	e00c      	b.n	6bb2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6b98:	2301      	movs	r3, #1
    6b9a:	e00a      	b.n	6bb2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    6b9c:	2300      	movs	r3, #0
    6b9e:	e008      	b.n	6bb2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6ba0:	4b07      	ldr	r3, [pc, #28]	; (6bc0 <system_clock_source_is_ready+0x80>)
    6ba2:	68db      	ldr	r3, [r3, #12]
    6ba4:	68fa      	ldr	r2, [r7, #12]
    6ba6:	401a      	ands	r2, r3
    6ba8:	68fb      	ldr	r3, [r7, #12]
    6baa:	1ad3      	subs	r3, r2, r3
    6bac:	425a      	negs	r2, r3
    6bae:	4153      	adcs	r3, r2
    6bb0:	b2db      	uxtb	r3, r3
}
    6bb2:	1c18      	adds	r0, r3, #0
    6bb4:	46bd      	mov	sp, r7
    6bb6:	b004      	add	sp, #16
    6bb8:	bd80      	pop	{r7, pc}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	0000bb04 	.word	0x0000bb04
    6bc0:	40000800 	.word	0x40000800

00006bc4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6bc4:	b580      	push	{r7, lr}
    6bc6:	b082      	sub	sp, #8
    6bc8:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    6bca:	1c3b      	adds	r3, r7, #0
    6bcc:	2201      	movs	r2, #1
    6bce:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6bd0:	2300      	movs	r3, #0
    6bd2:	607b      	str	r3, [r7, #4]
    6bd4:	e009      	b.n	6bea <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6bd6:	687b      	ldr	r3, [r7, #4]
    6bd8:	b2da      	uxtb	r2, r3
    6bda:	1c3b      	adds	r3, r7, #0
    6bdc:	1c10      	adds	r0, r2, #0
    6bde:	1c19      	adds	r1, r3, #0
    6be0:	4b05      	ldr	r3, [pc, #20]	; (6bf8 <_switch_peripheral_gclk+0x34>)
    6be2:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6be4:	687b      	ldr	r3, [r7, #4]
    6be6:	3301      	adds	r3, #1
    6be8:	607b      	str	r3, [r7, #4]
    6bea:	687b      	ldr	r3, [r7, #4]
    6bec:	2b24      	cmp	r3, #36	; 0x24
    6bee:	d9f2      	bls.n	6bd6 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b002      	add	sp, #8
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	000070fd 	.word	0x000070fd

00006bfc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	b0a6      	sub	sp, #152	; 0x98
    6c00:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6c02:	4b5c      	ldr	r3, [pc, #368]	; (6d74 <system_clock_init+0x178>)
    6c04:	22c2      	movs	r2, #194	; 0xc2
    6c06:	00d2      	lsls	r2, r2, #3
    6c08:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6c0a:	2002      	movs	r0, #2
    6c0c:	4b5a      	ldr	r3, [pc, #360]	; (6d78 <system_clock_init+0x17c>)
    6c0e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6c10:	4b5a      	ldr	r3, [pc, #360]	; (6d7c <system_clock_init+0x180>)
    6c12:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6c14:	1c3b      	adds	r3, r7, #0
    6c16:	3380      	adds	r3, #128	; 0x80
    6c18:	1c18      	adds	r0, r3, #0
    6c1a:	4b59      	ldr	r3, [pc, #356]	; (6d80 <system_clock_init+0x184>)
    6c1c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6c1e:	1c3b      	adds	r3, r7, #0
    6c20:	3380      	adds	r3, #128	; 0x80
    6c22:	2220      	movs	r2, #32
    6c24:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6c26:	1c3b      	adds	r3, r7, #0
    6c28:	3380      	adds	r3, #128	; 0x80
    6c2a:	2200      	movs	r2, #0
    6c2c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE and FINE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL. COARSE and DFLL.FINE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6c2e:	4b55      	ldr	r3, [pc, #340]	; (6d84 <system_clock_init+0x188>)
    6c30:	681b      	ldr	r3, [r3, #0]
    6c32:	0e9b      	lsrs	r3, r3, #26
    6c34:	2294      	movs	r2, #148	; 0x94
    6c36:	19d2      	adds	r2, r2, r7
    6c38:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6c3a:	2294      	movs	r2, #148	; 0x94
    6c3c:	19d2      	adds	r2, r2, r7
    6c3e:	6813      	ldr	r3, [r2, #0]
    6c40:	2b3f      	cmp	r3, #63	; 0x3f
    6c42:	d103      	bne.n	6c4c <system_clock_init+0x50>
		coarse = 0x1f;
    6c44:	231f      	movs	r3, #31
    6c46:	2294      	movs	r2, #148	; 0x94
    6c48:	19d2      	adds	r2, r2, r7
    6c4a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6c4c:	2294      	movs	r2, #148	; 0x94
    6c4e:	19d2      	adds	r2, r2, r7
    6c50:	6813      	ldr	r3, [r2, #0]
    6c52:	b2da      	uxtb	r2, r3
    6c54:	1c3b      	adds	r3, r7, #0
    6c56:	3380      	adds	r3, #128	; 0x80
    6c58:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6c5a:	1c3b      	adds	r3, r7, #0
    6c5c:	3380      	adds	r3, #128	; 0x80
    6c5e:	2200      	movs	r2, #0
    6c60:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6c62:	1c3b      	adds	r3, r7, #0
    6c64:	3380      	adds	r3, #128	; 0x80
    6c66:	2200      	movs	r2, #0
    6c68:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6c6a:	1c3b      	adds	r3, r7, #0
    6c6c:	3380      	adds	r3, #128	; 0x80
    6c6e:	2200      	movs	r2, #0
    6c70:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6c72:	1c3b      	adds	r3, r7, #0
    6c74:	3380      	adds	r3, #128	; 0x80
    6c76:	2200      	movs	r2, #0
    6c78:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6c7a:	1c3b      	adds	r3, r7, #0
    6c7c:	3380      	adds	r3, #128	; 0x80
    6c7e:	2207      	movs	r2, #7
    6c80:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6c82:	1c3b      	adds	r3, r7, #0
    6c84:	3380      	adds	r3, #128	; 0x80
    6c86:	223f      	movs	r2, #63	; 0x3f
    6c88:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_value   = 0x1ff;
    6c8a:	1c3b      	adds	r3, r7, #0
    6c8c:	3380      	adds	r3, #128	; 0x80
    6c8e:	4a3e      	ldr	r2, [pc, #248]	; (6d88 <system_clock_init+0x18c>)
    6c90:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6c92:	1c3b      	adds	r3, r7, #0
    6c94:	3380      	adds	r3, #128	; 0x80
    6c96:	2200      	movs	r2, #0
    6c98:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
    6c9a:	1c3b      	adds	r3, r7, #0
    6c9c:	3380      	adds	r3, #128	; 0x80
    6c9e:	2208      	movs	r2, #8
    6ca0:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6ca2:	1c3b      	adds	r3, r7, #0
    6ca4:	3380      	adds	r3, #128	; 0x80
    6ca6:	2200      	movs	r2, #0
    6ca8:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    6caa:	1c3b      	adds	r3, r7, #0
    6cac:	3380      	adds	r3, #128	; 0x80
    6cae:	2280      	movs	r2, #128	; 0x80
    6cb0:	0052      	lsls	r2, r2, #1
    6cb2:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    6cb4:	1c3b      	adds	r3, r7, #0
    6cb6:	3380      	adds	r3, #128	; 0x80
    6cb8:	4a34      	ldr	r2, [pc, #208]	; (6d8c <system_clock_init+0x190>)
    6cba:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6cbc:	1c3b      	adds	r3, r7, #0
    6cbe:	3380      	adds	r3, #128	; 0x80
    6cc0:	1c18      	adds	r0, r3, #0
    6cc2:	4b33      	ldr	r3, [pc, #204]	; (6d90 <system_clock_init+0x194>)
    6cc4:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6cc6:	1c3b      	adds	r3, r7, #0
    6cc8:	337c      	adds	r3, #124	; 0x7c
    6cca:	1c18      	adds	r0, r3, #0
    6ccc:	4b31      	ldr	r3, [pc, #196]	; (6d94 <system_clock_init+0x198>)
    6cce:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6cd0:	1c3b      	adds	r3, r7, #0
    6cd2:	337c      	adds	r3, #124	; 0x7c
    6cd4:	2200      	movs	r2, #0
    6cd6:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6cd8:	1c3b      	adds	r3, r7, #0
    6cda:	337c      	adds	r3, #124	; 0x7c
    6cdc:	2201      	movs	r2, #1
    6cde:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6ce0:	1c3b      	adds	r3, r7, #0
    6ce2:	337c      	adds	r3, #124	; 0x7c
    6ce4:	2200      	movs	r2, #0
    6ce6:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6ce8:	1c3b      	adds	r3, r7, #0
    6cea:	337c      	adds	r3, #124	; 0x7c
    6cec:	1c18      	adds	r0, r3, #0
    6cee:	4b2a      	ldr	r3, [pc, #168]	; (6d98 <system_clock_init+0x19c>)
    6cf0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6cf2:	2006      	movs	r0, #6
    6cf4:	4b29      	ldr	r3, [pc, #164]	; (6d9c <system_clock_init+0x1a0>)
    6cf6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6cf8:	4b29      	ldr	r3, [pc, #164]	; (6da0 <system_clock_init+0x1a4>)
    6cfa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6cfc:	2007      	movs	r0, #7
    6cfe:	4b27      	ldr	r3, [pc, #156]	; (6d9c <system_clock_init+0x1a0>)
    6d00:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6d02:	46c0      	nop			; (mov r8, r8)
    6d04:	2007      	movs	r0, #7
    6d06:	4b27      	ldr	r3, [pc, #156]	; (6da4 <system_clock_init+0x1a8>)
    6d08:	4798      	blx	r3
    6d0a:	1c03      	adds	r3, r0, #0
    6d0c:	2201      	movs	r2, #1
    6d0e:	4053      	eors	r3, r2
    6d10:	b2db      	uxtb	r3, r3
    6d12:	2b00      	cmp	r3, #0
    6d14:	d1f6      	bne.n	6d04 <system_clock_init+0x108>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    6d16:	4b17      	ldr	r3, [pc, #92]	; (6d74 <system_clock_init+0x178>)
    6d18:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6d1a:	2180      	movs	r1, #128	; 0x80
    6d1c:	430a      	orrs	r2, r1
    6d1e:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6d20:	2000      	movs	r0, #0
    6d22:	4b21      	ldr	r3, [pc, #132]	; (6da8 <system_clock_init+0x1ac>)
    6d24:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6d26:	2000      	movs	r0, #0
    6d28:	2100      	movs	r1, #0
    6d2a:	4b20      	ldr	r3, [pc, #128]	; (6dac <system_clock_init+0x1b0>)
    6d2c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6d2e:	2001      	movs	r0, #1
    6d30:	2100      	movs	r1, #0
    6d32:	4b1e      	ldr	r3, [pc, #120]	; (6dac <system_clock_init+0x1b0>)
    6d34:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6d36:	2002      	movs	r0, #2
    6d38:	2100      	movs	r1, #0
    6d3a:	4b1c      	ldr	r3, [pc, #112]	; (6dac <system_clock_init+0x1b0>)
    6d3c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6d3e:	1c3b      	adds	r3, r7, #0
    6d40:	1c18      	adds	r0, r3, #0
    6d42:	4b1b      	ldr	r3, [pc, #108]	; (6db0 <system_clock_init+0x1b4>)
    6d44:	4798      	blx	r3
    6d46:	1c3b      	adds	r3, r7, #0
    6d48:	2207      	movs	r2, #7
    6d4a:	701a      	strb	r2, [r3, #0]
    6d4c:	1c3b      	adds	r3, r7, #0
    6d4e:	2201      	movs	r2, #1
    6d50:	605a      	str	r2, [r3, #4]
    6d52:	1c3b      	adds	r3, r7, #0
    6d54:	2201      	movs	r2, #1
    6d56:	721a      	strb	r2, [r3, #8]
    6d58:	1c3b      	adds	r3, r7, #0
    6d5a:	2200      	movs	r2, #0
    6d5c:	725a      	strb	r2, [r3, #9]
    6d5e:	1c3b      	adds	r3, r7, #0
    6d60:	2000      	movs	r0, #0
    6d62:	1c19      	adds	r1, r3, #0
    6d64:	4b13      	ldr	r3, [pc, #76]	; (6db4 <system_clock_init+0x1b8>)
    6d66:	4798      	blx	r3
    6d68:	2000      	movs	r0, #0
    6d6a:	4b13      	ldr	r3, [pc, #76]	; (6db8 <system_clock_init+0x1bc>)
    6d6c:	4798      	blx	r3
#endif
}
    6d6e:	46bd      	mov	sp, r7
    6d70:	b026      	add	sp, #152	; 0x98
    6d72:	bd80      	pop	{r7, pc}
    6d74:	40000800 	.word	0x40000800
    6d78:	00006829 	.word	0x00006829
    6d7c:	00006bc5 	.word	0x00006bc5
    6d80:	00006765 	.word	0x00006765
    6d84:	00806024 	.word	0x00806024
    6d88:	000001ff 	.word	0x000001ff
    6d8c:	ffffbb80 	.word	0xffffbb80
    6d90:	000069e5 	.word	0x000069e5
    6d94:	00006745 	.word	0x00006745
    6d98:	0000697d 	.word	0x0000697d
    6d9c:	00006a95 	.word	0x00006a95
    6da0:	00006e5d 	.word	0x00006e5d
    6da4:	00006b41 	.word	0x00006b41
    6da8:	000067b5 	.word	0x000067b5
    6dac:	000067d5 	.word	0x000067d5
    6db0:	00006719 	.word	0x00006719
    6db4:	00006e8d 	.word	0x00006e8d
    6db8:	00006fb5 	.word	0x00006fb5

00006dbc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6dbc:	b580      	push	{r7, lr}
    6dbe:	b082      	sub	sp, #8
    6dc0:	af00      	add	r7, sp, #0
    6dc2:	1c02      	adds	r2, r0, #0
    6dc4:	6039      	str	r1, [r7, #0]
    6dc6:	1dfb      	adds	r3, r7, #7
    6dc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6dca:	1dfb      	adds	r3, r7, #7
    6dcc:	781b      	ldrb	r3, [r3, #0]
    6dce:	2b01      	cmp	r3, #1
    6dd0:	d00a      	beq.n	6de8 <system_apb_clock_set_mask+0x2c>
    6dd2:	2b02      	cmp	r3, #2
    6dd4:	d00f      	beq.n	6df6 <system_apb_clock_set_mask+0x3a>
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	d114      	bne.n	6e04 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6dda:	4b0e      	ldr	r3, [pc, #56]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6ddc:	4a0d      	ldr	r2, [pc, #52]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6dde:	6991      	ldr	r1, [r2, #24]
    6de0:	683a      	ldr	r2, [r7, #0]
    6de2:	430a      	orrs	r2, r1
    6de4:	619a      	str	r2, [r3, #24]
			break;
    6de6:	e00f      	b.n	6e08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6de8:	4b0a      	ldr	r3, [pc, #40]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6dea:	4a0a      	ldr	r2, [pc, #40]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6dec:	69d1      	ldr	r1, [r2, #28]
    6dee:	683a      	ldr	r2, [r7, #0]
    6df0:	430a      	orrs	r2, r1
    6df2:	61da      	str	r2, [r3, #28]
			break;
    6df4:	e008      	b.n	6e08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6df6:	4b07      	ldr	r3, [pc, #28]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6df8:	4a06      	ldr	r2, [pc, #24]	; (6e14 <system_apb_clock_set_mask+0x58>)
    6dfa:	6a11      	ldr	r1, [r2, #32]
    6dfc:	683a      	ldr	r2, [r7, #0]
    6dfe:	430a      	orrs	r2, r1
    6e00:	621a      	str	r2, [r3, #32]
			break;
    6e02:	e001      	b.n	6e08 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6e04:	2317      	movs	r3, #23
    6e06:	e000      	b.n	6e0a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6e08:	2300      	movs	r3, #0
}
    6e0a:	1c18      	adds	r0, r3, #0
    6e0c:	46bd      	mov	sp, r7
    6e0e:	b002      	add	sp, #8
    6e10:	bd80      	pop	{r7, pc}
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	40000400 	.word	0x40000400

00006e18 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6e18:	b580      	push	{r7, lr}
    6e1a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6e1c:	4b01      	ldr	r3, [pc, #4]	; (6e24 <system_interrupt_enter_critical_section+0xc>)
    6e1e:	4798      	blx	r3
}
    6e20:	46bd      	mov	sp, r7
    6e22:	bd80      	pop	{r7, pc}
    6e24:	00004bd1 	.word	0x00004bd1

00006e28 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6e28:	b580      	push	{r7, lr}
    6e2a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6e2c:	4b01      	ldr	r3, [pc, #4]	; (6e34 <system_interrupt_leave_critical_section+0xc>)
    6e2e:	4798      	blx	r3
}
    6e30:	46bd      	mov	sp, r7
    6e32:	bd80      	pop	{r7, pc}
    6e34:	00004c21 	.word	0x00004c21

00006e38 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6e3c:	4b06      	ldr	r3, [pc, #24]	; (6e58 <system_gclk_is_syncing+0x20>)
    6e3e:	785b      	ldrb	r3, [r3, #1]
    6e40:	b2db      	uxtb	r3, r3
    6e42:	b2db      	uxtb	r3, r3
    6e44:	b25b      	sxtb	r3, r3
    6e46:	2b00      	cmp	r3, #0
    6e48:	da01      	bge.n	6e4e <system_gclk_is_syncing+0x16>
		return true;
    6e4a:	2301      	movs	r3, #1
    6e4c:	e000      	b.n	6e50 <system_gclk_is_syncing+0x18>
	}

	return false;
    6e4e:	2300      	movs	r3, #0
}
    6e50:	1c18      	adds	r0, r3, #0
    6e52:	46bd      	mov	sp, r7
    6e54:	bd80      	pop	{r7, pc}
    6e56:	46c0      	nop			; (mov r8, r8)
    6e58:	40000c00 	.word	0x40000c00

00006e5c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6e5c:	b580      	push	{r7, lr}
    6e5e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6e60:	2000      	movs	r0, #0
    6e62:	2108      	movs	r1, #8
    6e64:	4b07      	ldr	r3, [pc, #28]	; (6e84 <system_gclk_init+0x28>)
    6e66:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6e68:	4b07      	ldr	r3, [pc, #28]	; (6e88 <system_gclk_init+0x2c>)
    6e6a:	2201      	movs	r2, #1
    6e6c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6e6e:	46c0      	nop			; (mov r8, r8)
    6e70:	4b05      	ldr	r3, [pc, #20]	; (6e88 <system_gclk_init+0x2c>)
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	b2db      	uxtb	r3, r3
    6e76:	1c1a      	adds	r2, r3, #0
    6e78:	2301      	movs	r3, #1
    6e7a:	4013      	ands	r3, r2
    6e7c:	d1f8      	bne.n	6e70 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6e7e:	46bd      	mov	sp, r7
    6e80:	bd80      	pop	{r7, pc}
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	00006dbd 	.word	0x00006dbd
    6e88:	40000c00 	.word	0x40000c00

00006e8c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6e8c:	b580      	push	{r7, lr}
    6e8e:	b086      	sub	sp, #24
    6e90:	af00      	add	r7, sp, #0
    6e92:	1c02      	adds	r2, r0, #0
    6e94:	6039      	str	r1, [r7, #0]
    6e96:	1dfb      	adds	r3, r7, #7
    6e98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6e9a:	1dfb      	adds	r3, r7, #7
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6ea0:	1dfb      	adds	r3, r7, #7
    6ea2:	781b      	ldrb	r3, [r3, #0]
    6ea4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6ea6:	683b      	ldr	r3, [r7, #0]
    6ea8:	781b      	ldrb	r3, [r3, #0]
    6eaa:	021b      	lsls	r3, r3, #8
    6eac:	697a      	ldr	r2, [r7, #20]
    6eae:	4313      	orrs	r3, r2
    6eb0:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6eb2:	683b      	ldr	r3, [r7, #0]
    6eb4:	785b      	ldrb	r3, [r3, #1]
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d004      	beq.n	6ec4 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6eba:	697b      	ldr	r3, [r7, #20]
    6ebc:	2280      	movs	r2, #128	; 0x80
    6ebe:	02d2      	lsls	r2, r2, #11
    6ec0:	4313      	orrs	r3, r2
    6ec2:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6ec4:	683b      	ldr	r3, [r7, #0]
    6ec6:	7a5b      	ldrb	r3, [r3, #9]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d004      	beq.n	6ed6 <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ecc:	697b      	ldr	r3, [r7, #20]
    6ece:	2280      	movs	r2, #128	; 0x80
    6ed0:	0312      	lsls	r2, r2, #12
    6ed2:	4313      	orrs	r3, r2
    6ed4:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6ed6:	683b      	ldr	r3, [r7, #0]
    6ed8:	685b      	ldr	r3, [r3, #4]
    6eda:	2b01      	cmp	r3, #1
    6edc:	d92c      	bls.n	6f38 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6ede:	683b      	ldr	r3, [r7, #0]
    6ee0:	685a      	ldr	r2, [r3, #4]
    6ee2:	683b      	ldr	r3, [r7, #0]
    6ee4:	685b      	ldr	r3, [r3, #4]
    6ee6:	3b01      	subs	r3, #1
    6ee8:	4013      	ands	r3, r2
    6eea:	d11a      	bne.n	6f22 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6eec:	2300      	movs	r3, #0
    6eee:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6ef0:	2302      	movs	r3, #2
    6ef2:	60bb      	str	r3, [r7, #8]
    6ef4:	e005      	b.n	6f02 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    6ef6:	68fb      	ldr	r3, [r7, #12]
    6ef8:	3301      	adds	r3, #1
    6efa:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    6efc:	68bb      	ldr	r3, [r7, #8]
    6efe:	005b      	lsls	r3, r3, #1
    6f00:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6f02:	683b      	ldr	r3, [r7, #0]
    6f04:	685a      	ldr	r2, [r3, #4]
    6f06:	68bb      	ldr	r3, [r7, #8]
    6f08:	429a      	cmp	r2, r3
    6f0a:	d8f4      	bhi.n	6ef6 <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6f0c:	68fb      	ldr	r3, [r7, #12]
    6f0e:	021b      	lsls	r3, r3, #8
    6f10:	693a      	ldr	r2, [r7, #16]
    6f12:	4313      	orrs	r3, r2
    6f14:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f16:	697b      	ldr	r3, [r7, #20]
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	0352      	lsls	r2, r2, #13
    6f1c:	4313      	orrs	r3, r2
    6f1e:	617b      	str	r3, [r7, #20]
    6f20:	e00a      	b.n	6f38 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6f22:	683b      	ldr	r3, [r7, #0]
    6f24:	685b      	ldr	r3, [r3, #4]
    6f26:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6f28:	693a      	ldr	r2, [r7, #16]
    6f2a:	4313      	orrs	r3, r2
    6f2c:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f2e:	697b      	ldr	r3, [r7, #20]
    6f30:	2280      	movs	r2, #128	; 0x80
    6f32:	0292      	lsls	r2, r2, #10
    6f34:	4313      	orrs	r3, r2
    6f36:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f38:	683b      	ldr	r3, [r7, #0]
    6f3a:	7a1b      	ldrb	r3, [r3, #8]
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d005      	beq.n	6f4c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f40:	697b      	ldr	r3, [r7, #20]
    6f42:	2280      	movs	r2, #128	; 0x80
    6f44:	0392      	lsls	r2, r2, #14
    6f46:	4313      	orrs	r3, r2
    6f48:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6f4a:	e7ff      	b.n	6f4c <system_gclk_gen_set_config+0xc0>
    6f4c:	46c0      	nop			; (mov r8, r8)
    6f4e:	4b14      	ldr	r3, [pc, #80]	; (6fa0 <system_gclk_gen_set_config+0x114>)
    6f50:	4798      	blx	r3
    6f52:	1c03      	adds	r3, r0, #0
    6f54:	2b00      	cmp	r3, #0
    6f56:	d1fa      	bne.n	6f4e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6f58:	4b12      	ldr	r3, [pc, #72]	; (6fa4 <system_gclk_gen_set_config+0x118>)
    6f5a:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6f5c:	4b12      	ldr	r3, [pc, #72]	; (6fa8 <system_gclk_gen_set_config+0x11c>)
    6f5e:	1dfa      	adds	r2, r7, #7
    6f60:	7812      	ldrb	r2, [r2, #0]
    6f62:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6f64:	46c0      	nop			; (mov r8, r8)
    6f66:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <system_gclk_gen_set_config+0x114>)
    6f68:	4798      	blx	r3
    6f6a:	1c03      	adds	r3, r0, #0
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d1fa      	bne.n	6f66 <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6f70:	4b0e      	ldr	r3, [pc, #56]	; (6fac <system_gclk_gen_set_config+0x120>)
    6f72:	693a      	ldr	r2, [r7, #16]
    6f74:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	4b09      	ldr	r3, [pc, #36]	; (6fa0 <system_gclk_gen_set_config+0x114>)
    6f7a:	4798      	blx	r3
    6f7c:	1c03      	adds	r3, r0, #0
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d1fa      	bne.n	6f78 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6f82:	4b0a      	ldr	r3, [pc, #40]	; (6fac <system_gclk_gen_set_config+0x120>)
    6f84:	4a09      	ldr	r2, [pc, #36]	; (6fac <system_gclk_gen_set_config+0x120>)
    6f86:	6851      	ldr	r1, [r2, #4]
    6f88:	2280      	movs	r2, #128	; 0x80
    6f8a:	0252      	lsls	r2, r2, #9
    6f8c:	4011      	ands	r1, r2
    6f8e:	697a      	ldr	r2, [r7, #20]
    6f90:	430a      	orrs	r2, r1
    6f92:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6f94:	4b06      	ldr	r3, [pc, #24]	; (6fb0 <system_gclk_gen_set_config+0x124>)
    6f96:	4798      	blx	r3
}
    6f98:	46bd      	mov	sp, r7
    6f9a:	b006      	add	sp, #24
    6f9c:	bd80      	pop	{r7, pc}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	00006e39 	.word	0x00006e39
    6fa4:	00006e19 	.word	0x00006e19
    6fa8:	40000c08 	.word	0x40000c08
    6fac:	40000c00 	.word	0x40000c00
    6fb0:	00006e29 	.word	0x00006e29

00006fb4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b082      	sub	sp, #8
    6fb8:	af00      	add	r7, sp, #0
    6fba:	1c02      	adds	r2, r0, #0
    6fbc:	1dfb      	adds	r3, r7, #7
    6fbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6fc0:	46c0      	nop			; (mov r8, r8)
    6fc2:	4b0e      	ldr	r3, [pc, #56]	; (6ffc <system_gclk_gen_enable+0x48>)
    6fc4:	4798      	blx	r3
    6fc6:	1c03      	adds	r3, r0, #0
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d1fa      	bne.n	6fc2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6fcc:	4b0c      	ldr	r3, [pc, #48]	; (7000 <system_gclk_gen_enable+0x4c>)
    6fce:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6fd0:	4b0c      	ldr	r3, [pc, #48]	; (7004 <system_gclk_gen_enable+0x50>)
    6fd2:	1dfa      	adds	r2, r7, #7
    6fd4:	7812      	ldrb	r2, [r2, #0]
    6fd6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6fd8:	46c0      	nop			; (mov r8, r8)
    6fda:	4b08      	ldr	r3, [pc, #32]	; (6ffc <system_gclk_gen_enable+0x48>)
    6fdc:	4798      	blx	r3
    6fde:	1c03      	adds	r3, r0, #0
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d1fa      	bne.n	6fda <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6fe4:	4b08      	ldr	r3, [pc, #32]	; (7008 <system_gclk_gen_enable+0x54>)
    6fe6:	4a08      	ldr	r2, [pc, #32]	; (7008 <system_gclk_gen_enable+0x54>)
    6fe8:	6852      	ldr	r2, [r2, #4]
    6fea:	2180      	movs	r1, #128	; 0x80
    6fec:	0249      	lsls	r1, r1, #9
    6fee:	430a      	orrs	r2, r1
    6ff0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6ff2:	4b06      	ldr	r3, [pc, #24]	; (700c <system_gclk_gen_enable+0x58>)
    6ff4:	4798      	blx	r3
}
    6ff6:	46bd      	mov	sp, r7
    6ff8:	b002      	add	sp, #8
    6ffa:	bd80      	pop	{r7, pc}
    6ffc:	00006e39 	.word	0x00006e39
    7000:	00006e19 	.word	0x00006e19
    7004:	40000c04 	.word	0x40000c04
    7008:	40000c00 	.word	0x40000c00
    700c:	00006e29 	.word	0x00006e29

00007010 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7010:	b580      	push	{r7, lr}
    7012:	b086      	sub	sp, #24
    7014:	af00      	add	r7, sp, #0
    7016:	1c02      	adds	r2, r0, #0
    7018:	1dfb      	adds	r3, r7, #7
    701a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    701c:	46c0      	nop			; (mov r8, r8)
    701e:	4b2f      	ldr	r3, [pc, #188]	; (70dc <system_gclk_gen_get_hz+0xcc>)
    7020:	4798      	blx	r3
    7022:	1c03      	adds	r3, r0, #0
    7024:	2b00      	cmp	r3, #0
    7026:	d1fa      	bne.n	701e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    7028:	4b2d      	ldr	r3, [pc, #180]	; (70e0 <system_gclk_gen_get_hz+0xd0>)
    702a:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    702c:	4b2d      	ldr	r3, [pc, #180]	; (70e4 <system_gclk_gen_get_hz+0xd4>)
    702e:	1dfa      	adds	r2, r7, #7
    7030:	7812      	ldrb	r2, [r2, #0]
    7032:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7034:	46c0      	nop			; (mov r8, r8)
    7036:	4b29      	ldr	r3, [pc, #164]	; (70dc <system_gclk_gen_get_hz+0xcc>)
    7038:	4798      	blx	r3
    703a:	1c03      	adds	r3, r0, #0
    703c:	2b00      	cmp	r3, #0
    703e:	d1fa      	bne.n	7036 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7040:	4b29      	ldr	r3, [pc, #164]	; (70e8 <system_gclk_gen_get_hz+0xd8>)
    7042:	685b      	ldr	r3, [r3, #4]
    7044:	0a1b      	lsrs	r3, r3, #8
    7046:	1c1a      	adds	r2, r3, #0
    7048:	231f      	movs	r3, #31
    704a:	4013      	ands	r3, r2
    704c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    704e:	1c18      	adds	r0, r3, #0
    7050:	4b26      	ldr	r3, [pc, #152]	; (70ec <system_gclk_gen_get_hz+0xdc>)
    7052:	4798      	blx	r3
    7054:	1c03      	adds	r3, r0, #0
    7056:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7058:	4b22      	ldr	r3, [pc, #136]	; (70e4 <system_gclk_gen_get_hz+0xd4>)
    705a:	1dfa      	adds	r2, r7, #7
    705c:	7812      	ldrb	r2, [r2, #0]
    705e:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7060:	4b21      	ldr	r3, [pc, #132]	; (70e8 <system_gclk_gen_get_hz+0xd8>)
    7062:	685b      	ldr	r3, [r3, #4]
    7064:	0d1b      	lsrs	r3, r3, #20
    7066:	1c1a      	adds	r2, r3, #0
    7068:	2301      	movs	r3, #1
    706a:	4013      	ands	r3, r2
    706c:	b2da      	uxtb	r2, r3
    706e:	1c3b      	adds	r3, r7, #0
    7070:	3313      	adds	r3, #19
    7072:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7074:	4b1e      	ldr	r3, [pc, #120]	; (70f0 <system_gclk_gen_get_hz+0xe0>)
    7076:	1dfa      	adds	r2, r7, #7
    7078:	7812      	ldrb	r2, [r2, #0]
    707a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    707c:	46c0      	nop			; (mov r8, r8)
    707e:	4b17      	ldr	r3, [pc, #92]	; (70dc <system_gclk_gen_get_hz+0xcc>)
    7080:	4798      	blx	r3
    7082:	1c03      	adds	r3, r0, #0
    7084:	2b00      	cmp	r3, #0
    7086:	d1fa      	bne.n	707e <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7088:	4b17      	ldr	r3, [pc, #92]	; (70e8 <system_gclk_gen_get_hz+0xd8>)
    708a:	689b      	ldr	r3, [r3, #8]
    708c:	0a1b      	lsrs	r3, r3, #8
    708e:	2200      	movs	r2, #0
    7090:	4393      	bics	r3, r2
    7092:	b29b      	uxth	r3, r3
    7094:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    7096:	4b17      	ldr	r3, [pc, #92]	; (70f4 <system_gclk_gen_get_hz+0xe4>)
    7098:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    709a:	1c3b      	adds	r3, r7, #0
    709c:	3313      	adds	r3, #19
    709e:	781b      	ldrb	r3, [r3, #0]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d109      	bne.n	70b8 <system_gclk_gen_get_hz+0xa8>
    70a4:	68fb      	ldr	r3, [r7, #12]
    70a6:	2b01      	cmp	r3, #1
    70a8:	d906      	bls.n	70b8 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    70aa:	4b13      	ldr	r3, [pc, #76]	; (70f8 <system_gclk_gen_get_hz+0xe8>)
    70ac:	6978      	ldr	r0, [r7, #20]
    70ae:	68f9      	ldr	r1, [r7, #12]
    70b0:	4798      	blx	r3
    70b2:	1c03      	adds	r3, r0, #0
    70b4:	617b      	str	r3, [r7, #20]
    70b6:	e00b      	b.n	70d0 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    70b8:	1c3b      	adds	r3, r7, #0
    70ba:	3313      	adds	r3, #19
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	2b00      	cmp	r3, #0
    70c0:	d006      	beq.n	70d0 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    70c2:	68fb      	ldr	r3, [r7, #12]
    70c4:	3301      	adds	r3, #1
    70c6:	697a      	ldr	r2, [r7, #20]
    70c8:	1c11      	adds	r1, r2, #0
    70ca:	40d9      	lsrs	r1, r3
    70cc:	1c0b      	adds	r3, r1, #0
    70ce:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    70d0:	697b      	ldr	r3, [r7, #20]
}
    70d2:	1c18      	adds	r0, r3, #0
    70d4:	46bd      	mov	sp, r7
    70d6:	b006      	add	sp, #24
    70d8:	bd80      	pop	{r7, pc}
    70da:	46c0      	nop			; (mov r8, r8)
    70dc:	00006e39 	.word	0x00006e39
    70e0:	00006e19 	.word	0x00006e19
    70e4:	40000c04 	.word	0x40000c04
    70e8:	40000c00 	.word	0x40000c00
    70ec:	000068b9 	.word	0x000068b9
    70f0:	40000c08 	.word	0x40000c08
    70f4:	00006e29 	.word	0x00006e29
    70f8:	0000b669 	.word	0x0000b669

000070fc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    70fc:	b580      	push	{r7, lr}
    70fe:	b084      	sub	sp, #16
    7100:	af00      	add	r7, sp, #0
    7102:	1c02      	adds	r2, r0, #0
    7104:	6039      	str	r1, [r7, #0]
    7106:	1dfb      	adds	r3, r7, #7
    7108:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    710a:	1dfb      	adds	r3, r7, #7
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7110:	683b      	ldr	r3, [r7, #0]
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	021b      	lsls	r3, r3, #8
    7116:	68fa      	ldr	r2, [r7, #12]
    7118:	4313      	orrs	r3, r2
    711a:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    711c:	1dfb      	adds	r3, r7, #7
    711e:	781b      	ldrb	r3, [r3, #0]
    7120:	1c18      	adds	r0, r3, #0
    7122:	4b04      	ldr	r3, [pc, #16]	; (7134 <system_gclk_chan_set_config+0x38>)
    7124:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7126:	4b04      	ldr	r3, [pc, #16]	; (7138 <system_gclk_chan_set_config+0x3c>)
    7128:	68fa      	ldr	r2, [r7, #12]
    712a:	b292      	uxth	r2, r2
    712c:	805a      	strh	r2, [r3, #2]
}
    712e:	46bd      	mov	sp, r7
    7130:	b004      	add	sp, #16
    7132:	bd80      	pop	{r7, pc}
    7134:	00007181 	.word	0x00007181
    7138:	40000c00 	.word	0x40000c00

0000713c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    713c:	b580      	push	{r7, lr}
    713e:	b082      	sub	sp, #8
    7140:	af00      	add	r7, sp, #0
    7142:	1c02      	adds	r2, r0, #0
    7144:	1dfb      	adds	r3, r7, #7
    7146:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7148:	4b09      	ldr	r3, [pc, #36]	; (7170 <system_gclk_chan_enable+0x34>)
    714a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    714c:	4b09      	ldr	r3, [pc, #36]	; (7174 <system_gclk_chan_enable+0x38>)
    714e:	1dfa      	adds	r2, r7, #7
    7150:	7812      	ldrb	r2, [r2, #0]
    7152:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7154:	4b08      	ldr	r3, [pc, #32]	; (7178 <system_gclk_chan_enable+0x3c>)
    7156:	4a08      	ldr	r2, [pc, #32]	; (7178 <system_gclk_chan_enable+0x3c>)
    7158:	8852      	ldrh	r2, [r2, #2]
    715a:	b292      	uxth	r2, r2
    715c:	2180      	movs	r1, #128	; 0x80
    715e:	01c9      	lsls	r1, r1, #7
    7160:	430a      	orrs	r2, r1
    7162:	b292      	uxth	r2, r2
    7164:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    7166:	4b05      	ldr	r3, [pc, #20]	; (717c <system_gclk_chan_enable+0x40>)
    7168:	4798      	blx	r3
}
    716a:	46bd      	mov	sp, r7
    716c:	b002      	add	sp, #8
    716e:	bd80      	pop	{r7, pc}
    7170:	00006e19 	.word	0x00006e19
    7174:	40000c02 	.word	0x40000c02
    7178:	40000c00 	.word	0x40000c00
    717c:	00006e29 	.word	0x00006e29

00007180 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7180:	b580      	push	{r7, lr}
    7182:	b084      	sub	sp, #16
    7184:	af00      	add	r7, sp, #0
    7186:	1c02      	adds	r2, r0, #0
    7188:	1dfb      	adds	r3, r7, #7
    718a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    718c:	4b1c      	ldr	r3, [pc, #112]	; (7200 <system_gclk_chan_disable+0x80>)
    718e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7190:	4b1c      	ldr	r3, [pc, #112]	; (7204 <system_gclk_chan_disable+0x84>)
    7192:	1dfa      	adds	r2, r7, #7
    7194:	7812      	ldrb	r2, [r2, #0]
    7196:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7198:	4b1b      	ldr	r3, [pc, #108]	; (7208 <system_gclk_chan_disable+0x88>)
    719a:	885b      	ldrh	r3, [r3, #2]
    719c:	b29b      	uxth	r3, r3
    719e:	0a1b      	lsrs	r3, r3, #8
    71a0:	1c1a      	adds	r2, r3, #0
    71a2:	230f      	movs	r3, #15
    71a4:	4013      	ands	r3, r2
    71a6:	b2db      	uxtb	r3, r3
    71a8:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    71aa:	4b17      	ldr	r3, [pc, #92]	; (7208 <system_gclk_chan_disable+0x88>)
    71ac:	8859      	ldrh	r1, [r3, #2]
    71ae:	4a17      	ldr	r2, [pc, #92]	; (720c <system_gclk_chan_disable+0x8c>)
    71b0:	400a      	ands	r2, r1
    71b2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    71b4:	4b14      	ldr	r3, [pc, #80]	; (7208 <system_gclk_chan_disable+0x88>)
    71b6:	4a14      	ldr	r2, [pc, #80]	; (7208 <system_gclk_chan_disable+0x88>)
    71b8:	8852      	ldrh	r2, [r2, #2]
    71ba:	b291      	uxth	r1, r2
    71bc:	4a14      	ldr	r2, [pc, #80]	; (7210 <system_gclk_chan_disable+0x90>)
    71be:	400a      	ands	r2, r1
    71c0:	b292      	uxth	r2, r2
    71c2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    71c4:	46c0      	nop			; (mov r8, r8)
    71c6:	4b10      	ldr	r3, [pc, #64]	; (7208 <system_gclk_chan_disable+0x88>)
    71c8:	885b      	ldrh	r3, [r3, #2]
    71ca:	b29b      	uxth	r3, r3
    71cc:	1c1a      	adds	r2, r3, #0
    71ce:	2380      	movs	r3, #128	; 0x80
    71d0:	01db      	lsls	r3, r3, #7
    71d2:	4013      	ands	r3, r2
    71d4:	d1f7      	bne.n	71c6 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    71d6:	4b0c      	ldr	r3, [pc, #48]	; (7208 <system_gclk_chan_disable+0x88>)
    71d8:	68fa      	ldr	r2, [r7, #12]
    71da:	b2d2      	uxtb	r2, r2
    71dc:	1c11      	adds	r1, r2, #0
    71de:	220f      	movs	r2, #15
    71e0:	400a      	ands	r2, r1
    71e2:	b2d1      	uxtb	r1, r2
    71e4:	220f      	movs	r2, #15
    71e6:	400a      	ands	r2, r1
    71e8:	0212      	lsls	r2, r2, #8
    71ea:	8858      	ldrh	r0, [r3, #2]
    71ec:	4907      	ldr	r1, [pc, #28]	; (720c <system_gclk_chan_disable+0x8c>)
    71ee:	4001      	ands	r1, r0
    71f0:	430a      	orrs	r2, r1
    71f2:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    71f4:	4b07      	ldr	r3, [pc, #28]	; (7214 <system_gclk_chan_disable+0x94>)
    71f6:	4798      	blx	r3
}
    71f8:	46bd      	mov	sp, r7
    71fa:	b004      	add	sp, #16
    71fc:	bd80      	pop	{r7, pc}
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	00006e19 	.word	0x00006e19
    7204:	40000c02 	.word	0x40000c02
    7208:	40000c00 	.word	0x40000c00
    720c:	fffff0ff 	.word	0xfffff0ff
    7210:	ffffbfff 	.word	0xffffbfff
    7214:	00006e29 	.word	0x00006e29

00007218 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7218:	b580      	push	{r7, lr}
    721a:	b084      	sub	sp, #16
    721c:	af00      	add	r7, sp, #0
    721e:	1c02      	adds	r2, r0, #0
    7220:	1dfb      	adds	r3, r7, #7
    7222:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7224:	4b0e      	ldr	r3, [pc, #56]	; (7260 <system_gclk_chan_get_hz+0x48>)
    7226:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7228:	4b0e      	ldr	r3, [pc, #56]	; (7264 <system_gclk_chan_get_hz+0x4c>)
    722a:	1dfa      	adds	r2, r7, #7
    722c:	7812      	ldrb	r2, [r2, #0]
    722e:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7230:	4b0d      	ldr	r3, [pc, #52]	; (7268 <system_gclk_chan_get_hz+0x50>)
    7232:	885b      	ldrh	r3, [r3, #2]
    7234:	b29b      	uxth	r3, r3
    7236:	0a1b      	lsrs	r3, r3, #8
    7238:	1c1a      	adds	r2, r3, #0
    723a:	230f      	movs	r3, #15
    723c:	4013      	ands	r3, r2
    723e:	b2da      	uxtb	r2, r3
    7240:	1c3b      	adds	r3, r7, #0
    7242:	330f      	adds	r3, #15
    7244:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    7246:	4b09      	ldr	r3, [pc, #36]	; (726c <system_gclk_chan_get_hz+0x54>)
    7248:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    724a:	1c3b      	adds	r3, r7, #0
    724c:	330f      	adds	r3, #15
    724e:	781b      	ldrb	r3, [r3, #0]
    7250:	1c18      	adds	r0, r3, #0
    7252:	4b07      	ldr	r3, [pc, #28]	; (7270 <system_gclk_chan_get_hz+0x58>)
    7254:	4798      	blx	r3
    7256:	1c03      	adds	r3, r0, #0
}
    7258:	1c18      	adds	r0, r3, #0
    725a:	46bd      	mov	sp, r7
    725c:	b004      	add	sp, #16
    725e:	bd80      	pop	{r7, pc}
    7260:	00006e19 	.word	0x00006e19
    7264:	40000c02 	.word	0x40000c02
    7268:	40000c00 	.word	0x40000c00
    726c:	00006e29 	.word	0x00006e29
    7270:	00007011 	.word	0x00007011

00007274 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7274:	b580      	push	{r7, lr}
    7276:	b084      	sub	sp, #16
    7278:	af00      	add	r7, sp, #0
    727a:	1c02      	adds	r2, r0, #0
    727c:	1dfb      	adds	r3, r7, #7
    727e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7280:	1c3b      	adds	r3, r7, #0
    7282:	330f      	adds	r3, #15
    7284:	1dfa      	adds	r2, r7, #7
    7286:	7812      	ldrb	r2, [r2, #0]
    7288:	09d2      	lsrs	r2, r2, #7
    728a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    728c:	1c3b      	adds	r3, r7, #0
    728e:	330e      	adds	r3, #14
    7290:	1dfa      	adds	r2, r7, #7
    7292:	7812      	ldrb	r2, [r2, #0]
    7294:	0952      	lsrs	r2, r2, #5
    7296:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7298:	4b0d      	ldr	r3, [pc, #52]	; (72d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    729a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    729c:	1c3b      	adds	r3, r7, #0
    729e:	330f      	adds	r3, #15
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	2b00      	cmp	r3, #0
    72a4:	d10e      	bne.n	72c4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    72a6:	1c3b      	adds	r3, r7, #0
    72a8:	330f      	adds	r3, #15
    72aa:	781b      	ldrb	r3, [r3, #0]
    72ac:	009b      	lsls	r3, r3, #2
    72ae:	2210      	movs	r2, #16
    72b0:	19d2      	adds	r2, r2, r7
    72b2:	18d3      	adds	r3, r2, r3
    72b4:	3b08      	subs	r3, #8
    72b6:	681a      	ldr	r2, [r3, #0]
    72b8:	1c3b      	adds	r3, r7, #0
    72ba:	330e      	adds	r3, #14
    72bc:	781b      	ldrb	r3, [r3, #0]
    72be:	01db      	lsls	r3, r3, #7
    72c0:	18d3      	adds	r3, r2, r3
    72c2:	e000      	b.n	72c6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    72c4:	2300      	movs	r3, #0
	}
}
    72c6:	1c18      	adds	r0, r3, #0
    72c8:	46bd      	mov	sp, r7
    72ca:	b004      	add	sp, #16
    72cc:	bd80      	pop	{r7, pc}
    72ce:	46c0      	nop			; (mov r8, r8)
    72d0:	41004400 	.word	0x41004400

000072d4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    72d4:	b580      	push	{r7, lr}
    72d6:	b088      	sub	sp, #32
    72d8:	af00      	add	r7, sp, #0
    72da:	60f8      	str	r0, [r7, #12]
    72dc:	60b9      	str	r1, [r7, #8]
    72de:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    72e0:	2300      	movs	r3, #0
    72e2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	78db      	ldrb	r3, [r3, #3]
    72e8:	2201      	movs	r2, #1
    72ea:	4053      	eors	r3, r2
    72ec:	b2db      	uxtb	r3, r3
    72ee:	2b00      	cmp	r3, #0
    72f0:	d034      	beq.n	735c <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    72f2:	687b      	ldr	r3, [r7, #4]
    72f4:	781b      	ldrb	r3, [r3, #0]
    72f6:	2b80      	cmp	r3, #128	; 0x80
    72f8:	d00a      	beq.n	7310 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    72fa:	69fb      	ldr	r3, [r7, #28]
    72fc:	2280      	movs	r2, #128	; 0x80
    72fe:	0252      	lsls	r2, r2, #9
    7300:	4313      	orrs	r3, r2
    7302:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	061b      	lsls	r3, r3, #24
    730a:	69fa      	ldr	r2, [r7, #28]
    730c:	4313      	orrs	r3, r2
    730e:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7310:	687b      	ldr	r3, [r7, #4]
    7312:	785b      	ldrb	r3, [r3, #1]
    7314:	2b00      	cmp	r3, #0
    7316:	d003      	beq.n	7320 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    731c:	2b02      	cmp	r3, #2
    731e:	d110      	bne.n	7342 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7320:	69fb      	ldr	r3, [r7, #28]
    7322:	2280      	movs	r2, #128	; 0x80
    7324:	0292      	lsls	r2, r2, #10
    7326:	4313      	orrs	r3, r2
    7328:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	789b      	ldrb	r3, [r3, #2]
    732e:	2b00      	cmp	r3, #0
    7330:	d004      	beq.n	733c <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7332:	69fb      	ldr	r3, [r7, #28]
    7334:	2280      	movs	r2, #128	; 0x80
    7336:	02d2      	lsls	r2, r2, #11
    7338:	4313      	orrs	r3, r2
    733a:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    733c:	68fb      	ldr	r3, [r7, #12]
    733e:	68ba      	ldr	r2, [r7, #8]
    7340:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	785b      	ldrb	r3, [r3, #1]
    7346:	2b01      	cmp	r3, #1
    7348:	d003      	beq.n	7352 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    734a:	687b      	ldr	r3, [r7, #4]
    734c:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    734e:	2b02      	cmp	r3, #2
    7350:	d107      	bne.n	7362 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7352:	69fa      	ldr	r2, [r7, #28]
    7354:	4b21      	ldr	r3, [pc, #132]	; (73dc <_system_pinmux_config+0x108>)
    7356:	4013      	ands	r3, r2
    7358:	61fb      	str	r3, [r7, #28]
    735a:	e002      	b.n	7362 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	68ba      	ldr	r2, [r7, #8]
    7360:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7362:	68bb      	ldr	r3, [r7, #8]
    7364:	041b      	lsls	r3, r3, #16
    7366:	0c1b      	lsrs	r3, r3, #16
    7368:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    736a:	68bb      	ldr	r3, [r7, #8]
    736c:	0c1b      	lsrs	r3, r3, #16
    736e:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7370:	69ba      	ldr	r2, [r7, #24]
    7372:	69fb      	ldr	r3, [r7, #28]
    7374:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7376:	22a0      	movs	r2, #160	; 0xa0
    7378:	05d2      	lsls	r2, r2, #23
    737a:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    737c:	68fb      	ldr	r3, [r7, #12]
    737e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7380:	697a      	ldr	r2, [r7, #20]
    7382:	69fb      	ldr	r3, [r7, #28]
    7384:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7386:	22d0      	movs	r2, #208	; 0xd0
    7388:	0612      	lsls	r2, r2, #24
    738a:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    738c:	68fb      	ldr	r3, [r7, #12]
    738e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	78db      	ldrb	r3, [r3, #3]
    7394:	2201      	movs	r2, #1
    7396:	4053      	eors	r3, r2
    7398:	b2db      	uxtb	r3, r3
    739a:	2b00      	cmp	r3, #0
    739c:	d01a      	beq.n	73d4 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    739e:	69fa      	ldr	r2, [r7, #28]
    73a0:	2380      	movs	r3, #128	; 0x80
    73a2:	02db      	lsls	r3, r3, #11
    73a4:	4013      	ands	r3, r2
    73a6:	d00a      	beq.n	73be <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	789b      	ldrb	r3, [r3, #2]
    73ac:	2b01      	cmp	r3, #1
    73ae:	d103      	bne.n	73b8 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    73b0:	68fb      	ldr	r3, [r7, #12]
    73b2:	68ba      	ldr	r2, [r7, #8]
    73b4:	619a      	str	r2, [r3, #24]
    73b6:	e002      	b.n	73be <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    73b8:	68fb      	ldr	r3, [r7, #12]
    73ba:	68ba      	ldr	r2, [r7, #8]
    73bc:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	785b      	ldrb	r3, [r3, #1]
    73c2:	2b01      	cmp	r3, #1
    73c4:	d003      	beq.n	73ce <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    73c6:	687b      	ldr	r3, [r7, #4]
    73c8:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73ca:	2b02      	cmp	r3, #2
    73cc:	d102      	bne.n	73d4 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    73ce:	68fb      	ldr	r3, [r7, #12]
    73d0:	68ba      	ldr	r2, [r7, #8]
    73d2:	609a      	str	r2, [r3, #8]
		}
	}
}
    73d4:	46bd      	mov	sp, r7
    73d6:	b008      	add	sp, #32
    73d8:	bd80      	pop	{r7, pc}
    73da:	46c0      	nop			; (mov r8, r8)
    73dc:	fffbffff 	.word	0xfffbffff

000073e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b084      	sub	sp, #16
    73e4:	af00      	add	r7, sp, #0
    73e6:	1c02      	adds	r2, r0, #0
    73e8:	6039      	str	r1, [r7, #0]
    73ea:	1dfb      	adds	r3, r7, #7
    73ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    73ee:	1dfb      	adds	r3, r7, #7
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	1c18      	adds	r0, r3, #0
    73f4:	4b0b      	ldr	r3, [pc, #44]	; (7424 <system_pinmux_pin_set_config+0x44>)
    73f6:	4798      	blx	r3
    73f8:	1c03      	adds	r3, r0, #0
    73fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    73fc:	1dfb      	adds	r3, r7, #7
    73fe:	781a      	ldrb	r2, [r3, #0]
    7400:	231f      	movs	r3, #31
    7402:	4013      	ands	r3, r2
    7404:	2201      	movs	r2, #1
    7406:	1c11      	adds	r1, r2, #0
    7408:	4099      	lsls	r1, r3
    740a:	1c0b      	adds	r3, r1, #0
    740c:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    740e:	68f9      	ldr	r1, [r7, #12]
    7410:	68ba      	ldr	r2, [r7, #8]
    7412:	683b      	ldr	r3, [r7, #0]
    7414:	1c08      	adds	r0, r1, #0
    7416:	1c11      	adds	r1, r2, #0
    7418:	1c1a      	adds	r2, r3, #0
    741a:	4b03      	ldr	r3, [pc, #12]	; (7428 <system_pinmux_pin_set_config+0x48>)
    741c:	4798      	blx	r3
}
    741e:	46bd      	mov	sp, r7
    7420:	b004      	add	sp, #16
    7422:	bd80      	pop	{r7, pc}
    7424:	00007275 	.word	0x00007275
    7428:	000072d5 	.word	0x000072d5

0000742c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    742c:	b580      	push	{r7, lr}
    742e:	af00      	add	r7, sp, #0
	return;
    7430:	46c0      	nop			; (mov r8, r8)
}
    7432:	46bd      	mov	sp, r7
    7434:	bd80      	pop	{r7, pc}
    7436:	46c0      	nop			; (mov r8, r8)

00007438 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7438:	b580      	push	{r7, lr}
    743a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    743c:	4b04      	ldr	r3, [pc, #16]	; (7450 <system_init+0x18>)
    743e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7440:	4b04      	ldr	r3, [pc, #16]	; (7454 <system_init+0x1c>)
    7442:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7444:	4b04      	ldr	r3, [pc, #16]	; (7458 <system_init+0x20>)
    7446:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7448:	4b04      	ldr	r3, [pc, #16]	; (745c <system_init+0x24>)
    744a:	4798      	blx	r3
}
    744c:	46bd      	mov	sp, r7
    744e:	bd80      	pop	{r7, pc}
    7450:	00006bfd 	.word	0x00006bfd
    7454:	00004d55 	.word	0x00004d55
    7458:	0000742d 	.word	0x0000742d
    745c:	0000511d 	.word	0x0000511d

00007460 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    7460:	b580      	push	{r7, lr}
    7462:	b082      	sub	sp, #8
    7464:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7466:	f3ef 8310 	mrs	r3, PRIMASK
    746a:	603b      	str	r3, [r7, #0]
  return(result);
    746c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    746e:	425a      	negs	r2, r3
    7470:	4153      	adcs	r3, r2
    7472:	b2db      	uxtb	r3, r3
    7474:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    7476:	b672      	cpsid	i
    7478:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    747c:	4b03      	ldr	r3, [pc, #12]	; (748c <cpu_irq_save+0x2c>)
    747e:	2200      	movs	r2, #0
    7480:	701a      	strb	r2, [r3, #0]
	return flags;
    7482:	687b      	ldr	r3, [r7, #4]
}
    7484:	1c18      	adds	r0, r3, #0
    7486:	46bd      	mov	sp, r7
    7488:	b002      	add	sp, #8
    748a:	bd80      	pop	{r7, pc}
    748c:	200002b4 	.word	0x200002b4

00007490 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    7490:	b580      	push	{r7, lr}
    7492:	b082      	sub	sp, #8
    7494:	af00      	add	r7, sp, #0
    7496:	6078      	str	r0, [r7, #4]
	return (flags);
    7498:	687b      	ldr	r3, [r7, #4]
    749a:	1e5a      	subs	r2, r3, #1
    749c:	4193      	sbcs	r3, r2
    749e:	b2db      	uxtb	r3, r3
}
    74a0:	1c18      	adds	r0, r3, #0
    74a2:	46bd      	mov	sp, r7
    74a4:	b002      	add	sp, #8
    74a6:	bd80      	pop	{r7, pc}

000074a8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    74a8:	b580      	push	{r7, lr}
    74aa:	b082      	sub	sp, #8
    74ac:	af00      	add	r7, sp, #0
    74ae:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    74b0:	687b      	ldr	r3, [r7, #4]
    74b2:	1c18      	adds	r0, r3, #0
    74b4:	4b06      	ldr	r3, [pc, #24]	; (74d0 <cpu_irq_restore+0x28>)
    74b6:	4798      	blx	r3
    74b8:	1c03      	adds	r3, r0, #0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d005      	beq.n	74ca <cpu_irq_restore+0x22>
		cpu_irq_enable();
    74be:	4b05      	ldr	r3, [pc, #20]	; (74d4 <cpu_irq_restore+0x2c>)
    74c0:	2201      	movs	r2, #1
    74c2:	701a      	strb	r2, [r3, #0]
    74c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    74c8:	b662      	cpsie	i
}
    74ca:	46bd      	mov	sp, r7
    74cc:	b002      	add	sp, #8
    74ce:	bd80      	pop	{r7, pc}
    74d0:	00007491 	.word	0x00007491
    74d4:	200002b4 	.word	0x200002b4

000074d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    74d8:	b580      	push	{r7, lr}
    74da:	b084      	sub	sp, #16
    74dc:	af00      	add	r7, sp, #0
    74de:	1c02      	adds	r2, r0, #0
    74e0:	1dfb      	adds	r3, r7, #7
    74e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    74e4:	1c3b      	adds	r3, r7, #0
    74e6:	330f      	adds	r3, #15
    74e8:	1dfa      	adds	r2, r7, #7
    74ea:	7812      	ldrb	r2, [r2, #0]
    74ec:	09d2      	lsrs	r2, r2, #7
    74ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    74f0:	1c3b      	adds	r3, r7, #0
    74f2:	330e      	adds	r3, #14
    74f4:	1dfa      	adds	r2, r7, #7
    74f6:	7812      	ldrb	r2, [r2, #0]
    74f8:	0952      	lsrs	r2, r2, #5
    74fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    74fc:	4b0d      	ldr	r3, [pc, #52]	; (7534 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    74fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7500:	1c3b      	adds	r3, r7, #0
    7502:	330f      	adds	r3, #15
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	2b00      	cmp	r3, #0
    7508:	d10e      	bne.n	7528 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    750a:	1c3b      	adds	r3, r7, #0
    750c:	330f      	adds	r3, #15
    750e:	781b      	ldrb	r3, [r3, #0]
    7510:	009b      	lsls	r3, r3, #2
    7512:	2210      	movs	r2, #16
    7514:	19d2      	adds	r2, r2, r7
    7516:	18d3      	adds	r3, r2, r3
    7518:	3b08      	subs	r3, #8
    751a:	681a      	ldr	r2, [r3, #0]
    751c:	1c3b      	adds	r3, r7, #0
    751e:	330e      	adds	r3, #14
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	01db      	lsls	r3, r3, #7
    7524:	18d3      	adds	r3, r2, r3
    7526:	e000      	b.n	752a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    7528:	2300      	movs	r3, #0
	}
}
    752a:	1c18      	adds	r0, r3, #0
    752c:	46bd      	mov	sp, r7
    752e:	b004      	add	sp, #16
    7530:	bd80      	pop	{r7, pc}
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	41004400 	.word	0x41004400

00007538 <usb_get_state_machine_status>:
 * \brief Get the status of USB module's state machine
 *
 * \param module_inst Pointer to USB module instance
 */
static inline uint8_t usb_get_state_machine_status(struct usb_module *module_inst)
{
    7538:	b580      	push	{r7, lr}
    753a:	b082      	sub	sp, #8
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    7540:	687b      	ldr	r3, [r7, #4]
    7542:	681b      	ldr	r3, [r3, #0]
    7544:	7b5b      	ldrb	r3, [r3, #13]
    7546:	b2db      	uxtb	r3, r3
}
    7548:	1c18      	adds	r0, r3, #0
    754a:	46bd      	mov	sp, r7
    754c:	b002      	add	sp, #8
    754e:	bd80      	pop	{r7, pc}

00007550 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    7550:	b580      	push	{r7, lr}
    7552:	b082      	sub	sp, #8
    7554:	af00      	add	r7, sp, #0
    7556:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	681a      	ldr	r2, [r3, #0]
    755c:	687b      	ldr	r3, [r7, #4]
    755e:	681b      	ldr	r3, [r3, #0]
    7560:	891b      	ldrh	r3, [r3, #8]
    7562:	b29b      	uxth	r3, r3
    7564:	2101      	movs	r1, #1
    7566:	438b      	bics	r3, r1
    7568:	b29b      	uxth	r3, r3
    756a:	8113      	strh	r3, [r2, #8]
}
    756c:	46bd      	mov	sp, r7
    756e:	b002      	add	sp, #8
    7570:	bd80      	pop	{r7, pc}
    7572:	46c0      	nop			; (mov r8, r8)

00007574 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    7574:	b580      	push	{r7, lr}
    7576:	b082      	sub	sp, #8
    7578:	af00      	add	r7, sp, #0
    757a:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    757c:	687b      	ldr	r3, [r7, #4]
    757e:	681a      	ldr	r2, [r3, #0]
    7580:	687b      	ldr	r3, [r7, #4]
    7582:	681b      	ldr	r3, [r3, #0]
    7584:	891b      	ldrh	r3, [r3, #8]
    7586:	b29b      	uxth	r3, r3
    7588:	2101      	movs	r1, #1
    758a:	430b      	orrs	r3, r1
    758c:	b29b      	uxth	r3, r3
    758e:	8113      	strh	r3, [r2, #8]
}
    7590:	46bd      	mov	sp, r7
    7592:	b002      	add	sp, #8
    7594:	bd80      	pop	{r7, pc}
    7596:	46c0      	nop			; (mov r8, r8)

00007598 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    7598:	b580      	push	{r7, lr}
    759a:	b082      	sub	sp, #8
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    75a0:	687b      	ldr	r3, [r7, #4]
    75a2:	681b      	ldr	r3, [r3, #0]
    75a4:	7a9a      	ldrb	r2, [r3, #10]
    75a6:	237f      	movs	r3, #127	; 0x7f
    75a8:	4013      	ands	r3, r2
    75aa:	b2db      	uxtb	r3, r3
}
    75ac:	1c18      	adds	r0, r3, #0
    75ae:	46bd      	mov	sp, r7
    75b0:	b002      	add	sp, #8
    75b2:	bd80      	pop	{r7, pc}

000075b4 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
    75bc:	1c0a      	adds	r2, r1, #0
    75be:	1cfb      	adds	r3, r7, #3
    75c0:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	1cfa      	adds	r2, r7, #3
    75c8:	7812      	ldrb	r2, [r2, #0]
    75ca:	2180      	movs	r1, #128	; 0x80
    75cc:	4249      	negs	r1, r1
    75ce:	430a      	orrs	r2, r1
    75d0:	b2d2      	uxtb	r2, r2
    75d2:	729a      	strb	r2, [r3, #10]
}
    75d4:	46bd      	mov	sp, r7
    75d6:	b002      	add	sp, #8
    75d8:	bd80      	pop	{r7, pc}
    75da:	46c0      	nop			; (mov r8, r8)

000075dc <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    75dc:	b580      	push	{r7, lr}
    75de:	b082      	sub	sp, #8
    75e0:	af00      	add	r7, sp, #0
    75e2:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    75e4:	687b      	ldr	r3, [r7, #4]
    75e6:	681b      	ldr	r3, [r3, #0]
    75e8:	8a1b      	ldrh	r3, [r3, #16]
    75ea:	b29b      	uxth	r3, r3
    75ec:	08db      	lsrs	r3, r3, #3
    75ee:	055b      	lsls	r3, r3, #21
    75f0:	0d5b      	lsrs	r3, r3, #21
    75f2:	b29b      	uxth	r3, r3
}
    75f4:	1c18      	adds	r0, r3, #0
    75f6:	46bd      	mov	sp, r7
    75f8:	b002      	add	sp, #8
    75fa:	bd80      	pop	{r7, pc}

000075fc <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	b082      	sub	sp, #8
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	681b      	ldr	r3, [r3, #0]
    7608:	8a1b      	ldrh	r3, [r3, #16]
    760a:	b29b      	uxth	r3, r3
}
    760c:	1c18      	adds	r0, r3, #0
    760e:	46bd      	mov	sp, r7
    7610:	b002      	add	sp, #8
    7612:	bd80      	pop	{r7, pc}

00007614 <usb_device_send_remote_wake_up>:
 * \brief USB device send the resume wakeup
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	681a      	ldr	r2, [r3, #0]
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	891b      	ldrh	r3, [r3, #8]
    7626:	b29b      	uxth	r3, r3
    7628:	2102      	movs	r1, #2
    762a:	430b      	orrs	r3, r1
    762c:	b29b      	uxth	r3, r3
    762e:	8113      	strh	r3, [r2, #8]
}
    7630:	46bd      	mov	sp, r7
    7632:	b002      	add	sp, #8
    7634:	bd80      	pop	{r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)

00007638 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    7638:	b580      	push	{r7, lr}
    763a:	b082      	sub	sp, #8
    763c:	af00      	add	r7, sp, #0
    763e:	6078      	str	r0, [r7, #4]
    7640:	1c0a      	adds	r2, r1, #0
    7642:	1cfb      	adds	r3, r7, #3
    7644:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	681b      	ldr	r3, [r3, #0]
    764a:	1cfa      	adds	r2, r7, #3
    764c:	7811      	ldrb	r1, [r2, #0]
    764e:	2203      	movs	r2, #3
    7650:	400a      	ands	r2, r1
    7652:	b2d1      	uxtb	r1, r2
    7654:	2203      	movs	r2, #3
    7656:	400a      	ands	r2, r1
    7658:	0292      	lsls	r2, r2, #10
    765a:	8918      	ldrh	r0, [r3, #8]
    765c:	4903      	ldr	r1, [pc, #12]	; (766c <usb_device_set_lpm_mode+0x34>)
    765e:	4001      	ands	r1, r0
    7660:	430a      	orrs	r2, r1
    7662:	811a      	strh	r2, [r3, #8]
}
    7664:	46bd      	mov	sp, r7
    7666:	b002      	add	sp, #8
    7668:	bd80      	pop	{r7, pc}
    766a:	46c0      	nop			; (mov r8, r8)
    766c:	fffff3ff 	.word	0xfffff3ff

00007670 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7670:	b580      	push	{r7, lr}
    7672:	b082      	sub	sp, #8
    7674:	af00      	add	r7, sp, #0
    7676:	1c02      	adds	r2, r0, #0
    7678:	1dfb      	adds	r3, r7, #7
    767a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    767c:	1dfb      	adds	r3, r7, #7
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	1c18      	adds	r0, r3, #0
    7682:	4b03      	ldr	r3, [pc, #12]	; (7690 <port_get_group_from_gpio_pin+0x20>)
    7684:	4798      	blx	r3
    7686:	1c03      	adds	r3, r0, #0
}
    7688:	1c18      	adds	r0, r3, #0
    768a:	46bd      	mov	sp, r7
    768c:	b002      	add	sp, #8
    768e:	bd80      	pop	{r7, pc}
    7690:	000074d9 	.word	0x000074d9

00007694 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    7694:	b580      	push	{r7, lr}
    7696:	b084      	sub	sp, #16
    7698:	af00      	add	r7, sp, #0
    769a:	1c02      	adds	r2, r0, #0
    769c:	1dfb      	adds	r3, r7, #7
    769e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    76a0:	1dfb      	adds	r3, r7, #7
    76a2:	781b      	ldrb	r3, [r3, #0]
    76a4:	1c18      	adds	r0, r3, #0
    76a6:	4b0c      	ldr	r3, [pc, #48]	; (76d8 <port_pin_get_input_level+0x44>)
    76a8:	4798      	blx	r3
    76aa:	1c03      	adds	r3, r0, #0
    76ac:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    76ae:	1dfb      	adds	r3, r7, #7
    76b0:	781a      	ldrb	r2, [r3, #0]
    76b2:	231f      	movs	r3, #31
    76b4:	4013      	ands	r3, r2
    76b6:	2201      	movs	r2, #1
    76b8:	1c11      	adds	r1, r2, #0
    76ba:	4099      	lsls	r1, r3
    76bc:	1c0b      	adds	r3, r1, #0
    76be:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	6a1b      	ldr	r3, [r3, #32]
    76c4:	68ba      	ldr	r2, [r7, #8]
    76c6:	4013      	ands	r3, r2
    76c8:	1e5a      	subs	r2, r3, #1
    76ca:	4193      	sbcs	r3, r2
    76cc:	b2db      	uxtb	r3, r3
}
    76ce:	1c18      	adds	r0, r3, #0
    76d0:	46bd      	mov	sp, r7
    76d2:	b004      	add	sp, #16
    76d4:	bd80      	pop	{r7, pc}
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	00007671 	.word	0x00007671

000076dc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    76dc:	b580      	push	{r7, lr}
    76de:	b084      	sub	sp, #16
    76e0:	af00      	add	r7, sp, #0
    76e2:	1c02      	adds	r2, r0, #0
    76e4:	1dfb      	adds	r3, r7, #7
    76e6:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    76e8:	1dfb      	adds	r3, r7, #7
    76ea:	781b      	ldrb	r3, [r3, #0]
    76ec:	4a0b      	ldr	r2, [pc, #44]	; (771c <sleepmgr_lock_mode+0x40>)
    76ee:	5cd3      	ldrb	r3, [r2, r3]
    76f0:	2bff      	cmp	r3, #255	; 0xff
    76f2:	d100      	bne.n	76f6 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    76f4:	e7fe      	b.n	76f4 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    76f6:	4b0a      	ldr	r3, [pc, #40]	; (7720 <sleepmgr_lock_mode+0x44>)
    76f8:	4798      	blx	r3
    76fa:	1c03      	adds	r3, r0, #0
    76fc:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    76fe:	1dfb      	adds	r3, r7, #7
    7700:	781b      	ldrb	r3, [r3, #0]
    7702:	4a06      	ldr	r2, [pc, #24]	; (771c <sleepmgr_lock_mode+0x40>)
    7704:	5cd2      	ldrb	r2, [r2, r3]
    7706:	3201      	adds	r2, #1
    7708:	b2d1      	uxtb	r1, r2
    770a:	4a04      	ldr	r2, [pc, #16]	; (771c <sleepmgr_lock_mode+0x40>)
    770c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    770e:	68fb      	ldr	r3, [r7, #12]
    7710:	1c18      	adds	r0, r3, #0
    7712:	4b04      	ldr	r3, [pc, #16]	; (7724 <sleepmgr_lock_mode+0x48>)
    7714:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    7716:	46bd      	mov	sp, r7
    7718:	b004      	add	sp, #16
    771a:	bd80      	pop	{r7, pc}
    771c:	2000699c 	.word	0x2000699c
    7720:	00007461 	.word	0x00007461
    7724:	000074a9 	.word	0x000074a9

00007728 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    7728:	b580      	push	{r7, lr}
    772a:	b084      	sub	sp, #16
    772c:	af00      	add	r7, sp, #0
    772e:	1c02      	adds	r2, r0, #0
    7730:	1dfb      	adds	r3, r7, #7
    7732:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    7734:	1dfb      	adds	r3, r7, #7
    7736:	781b      	ldrb	r3, [r3, #0]
    7738:	4a0b      	ldr	r2, [pc, #44]	; (7768 <sleepmgr_unlock_mode+0x40>)
    773a:	5cd3      	ldrb	r3, [r2, r3]
    773c:	2b00      	cmp	r3, #0
    773e:	d100      	bne.n	7742 <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    7740:	e7fe      	b.n	7740 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    7742:	4b0a      	ldr	r3, [pc, #40]	; (776c <sleepmgr_unlock_mode+0x44>)
    7744:	4798      	blx	r3
    7746:	1c03      	adds	r3, r0, #0
    7748:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    774a:	1dfb      	adds	r3, r7, #7
    774c:	781b      	ldrb	r3, [r3, #0]
    774e:	4a06      	ldr	r2, [pc, #24]	; (7768 <sleepmgr_unlock_mode+0x40>)
    7750:	5cd2      	ldrb	r2, [r2, r3]
    7752:	3a01      	subs	r2, #1
    7754:	b2d1      	uxtb	r1, r2
    7756:	4a04      	ldr	r2, [pc, #16]	; (7768 <sleepmgr_unlock_mode+0x40>)
    7758:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    775a:	68fb      	ldr	r3, [r7, #12]
    775c:	1c18      	adds	r0, r3, #0
    775e:	4b04      	ldr	r3, [pc, #16]	; (7770 <sleepmgr_unlock_mode+0x48>)
    7760:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    7762:	46bd      	mov	sp, r7
    7764:	b004      	add	sp, #16
    7766:	bd80      	pop	{r7, pc}
    7768:	2000699c 	.word	0x2000699c
    776c:	00007461 	.word	0x00007461
    7770:	000074a9 	.word	0x000074a9

00007774 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    7774:	b580      	push	{r7, lr}
    7776:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    7778:	4b0b      	ldr	r3, [pc, #44]	; (77a8 <udd_wait_clock_ready+0x34>)
    777a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    777c:	b29b      	uxth	r3, r3
    777e:	1c1a      	adds	r2, r3, #0
    7780:	2320      	movs	r3, #32
    7782:	4013      	ands	r3, r2
    7784:	d107      	bne.n	7796 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	4b07      	ldr	r3, [pc, #28]	; (77a8 <udd_wait_clock_ready+0x34>)
    778a:	68da      	ldr	r2, [r3, #12]
    778c:	23d0      	movs	r3, #208	; 0xd0
    778e:	4013      	ands	r3, r2
    7790:	2bd0      	cmp	r3, #208	; 0xd0
    7792:	d1f9      	bne.n	7788 <udd_wait_clock_ready+0x14>
    7794:	e005      	b.n	77a2 <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    7796:	46c0      	nop			; (mov r8, r8)
    7798:	4b03      	ldr	r3, [pc, #12]	; (77a8 <udd_wait_clock_ready+0x34>)
    779a:	68da      	ldr	r2, [r3, #12]
    779c:	2310      	movs	r3, #16
    779e:	4013      	ands	r3, r2
    77a0:	d0fa      	beq.n	7798 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    77a2:	46bd      	mov	sp, r7
    77a4:	bd80      	pop	{r7, pc}
    77a6:	46c0      	nop			; (mov r8, r8)
    77a8:	40000800 	.word	0x40000800

000077ac <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	b084      	sub	sp, #16
    77b0:	af00      	add	r7, sp, #0
    77b2:	1c02      	adds	r2, r0, #0
    77b4:	1dfb      	adds	r3, r7, #7
    77b6:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    77b8:	1c3a      	adds	r2, r7, #0
    77ba:	320c      	adds	r2, #12
    77bc:	4b16      	ldr	r3, [pc, #88]	; (7818 <udd_sleep_mode+0x6c>)
    77be:	1c11      	adds	r1, r2, #0
    77c0:	1c1a      	adds	r2, r3, #0
    77c2:	2304      	movs	r3, #4
    77c4:	1c08      	adds	r0, r1, #0
    77c6:	1c11      	adds	r1, r2, #0
    77c8:	1c1a      	adds	r2, r3, #0
    77ca:	4b14      	ldr	r3, [pc, #80]	; (781c <udd_sleep_mode+0x70>)
    77cc:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    77ce:	4b14      	ldr	r3, [pc, #80]	; (7820 <udd_sleep_mode+0x74>)
    77d0:	781b      	ldrb	r3, [r3, #0]
    77d2:	1dfa      	adds	r2, r7, #7
    77d4:	7812      	ldrb	r2, [r2, #0]
    77d6:	429a      	cmp	r2, r3
    77d8:	d01b      	beq.n	7812 <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    77da:	1dfb      	adds	r3, r7, #7
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	2b00      	cmp	r3, #0
    77e0:	d007      	beq.n	77f2 <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    77e2:	1dfb      	adds	r3, r7, #7
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	1c3a      	adds	r2, r7, #0
    77e8:	320c      	adds	r2, #12
    77ea:	5cd3      	ldrb	r3, [r2, r3]
    77ec:	1c18      	adds	r0, r3, #0
    77ee:	4b0d      	ldr	r3, [pc, #52]	; (7824 <udd_sleep_mode+0x78>)
    77f0:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    77f2:	4b0b      	ldr	r3, [pc, #44]	; (7820 <udd_sleep_mode+0x74>)
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	2b00      	cmp	r3, #0
    77f8:	d007      	beq.n	780a <udd_sleep_mode+0x5e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    77fa:	4b09      	ldr	r3, [pc, #36]	; (7820 <udd_sleep_mode+0x74>)
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	1c3a      	adds	r2, r7, #0
    7800:	320c      	adds	r2, #12
    7802:	5cd3      	ldrb	r3, [r2, r3]
    7804:	1c18      	adds	r0, r3, #0
    7806:	4b08      	ldr	r3, [pc, #32]	; (7828 <udd_sleep_mode+0x7c>)
    7808:	4798      	blx	r3
	}
	udd_state = new_state;
    780a:	4b05      	ldr	r3, [pc, #20]	; (7820 <udd_sleep_mode+0x74>)
    780c:	1dfa      	adds	r2, r7, #7
    780e:	7812      	ldrb	r2, [r2, #0]
    7810:	701a      	strb	r2, [r3, #0]
}
    7812:	46bd      	mov	sp, r7
    7814:	b004      	add	sp, #16
    7816:	bd80      	pop	{r7, pc}
    7818:	0000bb28 	.word	0x0000bb28
    781c:	0000b899 	.word	0x0000b899
    7820:	20004170 	.word	0x20004170
    7824:	000076dd 	.word	0x000076dd
    7828:	00007729 	.word	0x00007729

0000782c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    782c:	b580      	push	{r7, lr}
    782e:	b082      	sub	sp, #8
    7830:	af00      	add	r7, sp, #0
    7832:	1c02      	adds	r2, r0, #0
    7834:	1dfb      	adds	r3, r7, #7
    7836:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    7838:	1dfb      	adds	r3, r7, #7
    783a:	781a      	ldrb	r2, [r3, #0]
    783c:	230f      	movs	r3, #15
    783e:	4013      	ands	r3, r2
    7840:	005a      	lsls	r2, r3, #1
    7842:	1dfb      	adds	r3, r7, #7
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	09db      	lsrs	r3, r3, #7
    7848:	b2db      	uxtb	r3, r3
    784a:	18d3      	adds	r3, r2, r3
    784c:	1e9a      	subs	r2, r3, #2
    784e:	1c13      	adds	r3, r2, #0
    7850:	009b      	lsls	r3, r3, #2
    7852:	189b      	adds	r3, r3, r2
    7854:	009b      	lsls	r3, r3, #2
    7856:	4a03      	ldr	r2, [pc, #12]	; (7864 <udd_ep_get_job+0x38>)
    7858:	189b      	adds	r3, r3, r2
}
    785a:	1c18      	adds	r0, r3, #0
    785c:	46bd      	mov	sp, r7
    785e:	b002      	add	sp, #8
    7860:	bd80      	pop	{r7, pc}
    7862:	46c0      	nop			; (mov r8, r8)
    7864:	20004058 	.word	0x20004058

00007868 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    7868:	b590      	push	{r4, r7, lr}
    786a:	b089      	sub	sp, #36	; 0x24
    786c:	af00      	add	r7, sp, #0
    786e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7874:	1c3b      	adds	r3, r7, #0
    7876:	3317      	adds	r3, #23
    7878:	69ba      	ldr	r2, [r7, #24]
    787a:	7992      	ldrb	r2, [r2, #6]
    787c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    787e:	1c3b      	adds	r3, r7, #0
    7880:	3317      	adds	r3, #23
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	1c18      	adds	r0, r3, #0
    7886:	4b55      	ldr	r3, [pc, #340]	; (79dc <udd_ep_trans_in_next+0x174>)
    7888:	4798      	blx	r3
    788a:	1c03      	adds	r3, r0, #0
    788c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    788e:	1c3b      	adds	r3, r7, #0
    7890:	330f      	adds	r3, #15
    7892:	1c3a      	adds	r2, r7, #0
    7894:	3217      	adds	r2, #23
    7896:	7811      	ldrb	r1, [r2, #0]
    7898:	220f      	movs	r2, #15
    789a:	400a      	ands	r2, r1
    789c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    789e:	1c3b      	adds	r3, r7, #0
    78a0:	330c      	adds	r3, #12
    78a2:	693a      	ldr	r2, [r7, #16]
    78a4:	8a12      	ldrh	r2, [r2, #16]
    78a6:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    78a8:	1c3b      	adds	r3, r7, #0
    78aa:	330a      	adds	r3, #10
    78ac:	69ba      	ldr	r2, [r7, #24]
    78ae:	8852      	ldrh	r2, [r2, #2]
    78b0:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    78b2:	693b      	ldr	r3, [r7, #16]
    78b4:	68da      	ldr	r2, [r3, #12]
    78b6:	1c3b      	adds	r3, r7, #0
    78b8:	330a      	adds	r3, #10
    78ba:	881b      	ldrh	r3, [r3, #0]
    78bc:	18d2      	adds	r2, r2, r3
    78be:	693b      	ldr	r3, [r7, #16]
    78c0:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    78c2:	693b      	ldr	r3, [r7, #16]
    78c4:	68da      	ldr	r2, [r3, #12]
    78c6:	693b      	ldr	r3, [r7, #16]
    78c8:	689b      	ldr	r3, [r3, #8]
    78ca:	429a      	cmp	r2, r3
    78cc:	d053      	beq.n	7976 <udd_ep_trans_in_next+0x10e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    78ce:	693b      	ldr	r3, [r7, #16]
    78d0:	689b      	ldr	r3, [r3, #8]
    78d2:	b299      	uxth	r1, r3
    78d4:	693b      	ldr	r3, [r7, #16]
    78d6:	68db      	ldr	r3, [r3, #12]
    78d8:	b29a      	uxth	r2, r3
    78da:	1c3b      	adds	r3, r7, #0
    78dc:	331e      	adds	r3, #30
    78de:	1a8a      	subs	r2, r1, r2
    78e0:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    78e2:	1c3b      	adds	r3, r7, #0
    78e4:	331e      	adds	r3, #30
    78e6:	881a      	ldrh	r2, [r3, #0]
    78e8:	4b3d      	ldr	r3, [pc, #244]	; (79e0 <udd_ep_trans_in_next+0x178>)
    78ea:	429a      	cmp	r2, r3
    78ec:	d90e      	bls.n	790c <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    78ee:	1c3b      	adds	r3, r7, #0
    78f0:	330c      	adds	r3, #12
    78f2:	881a      	ldrh	r2, [r3, #0]
    78f4:	493a      	ldr	r1, [pc, #232]	; (79e0 <udd_ep_trans_in_next+0x178>)
    78f6:	4b3b      	ldr	r3, [pc, #236]	; (79e4 <udd_ep_trans_in_next+0x17c>)
    78f8:	1c08      	adds	r0, r1, #0
    78fa:	1c11      	adds	r1, r2, #0
    78fc:	4798      	blx	r3
    78fe:	1c0b      	adds	r3, r1, #0
    7900:	b29a      	uxth	r2, r3
    7902:	1c3b      	adds	r3, r7, #0
    7904:	331e      	adds	r3, #30
    7906:	4936      	ldr	r1, [pc, #216]	; (79e0 <udd_ep_trans_in_next+0x178>)
    7908:	1a8a      	subs	r2, r1, r2
    790a:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    790c:	693b      	ldr	r3, [r7, #16]
    790e:	7c9b      	ldrb	r3, [r3, #18]
    7910:	079b      	lsls	r3, r3, #30
    7912:	0fdb      	lsrs	r3, r3, #31
    7914:	b2db      	uxtb	r3, r3
    7916:	2b00      	cmp	r3, #0
    7918:	d00f      	beq.n	793a <udd_ep_trans_in_next+0xd2>
    791a:	1c3a      	adds	r2, r7, #0
    791c:	321e      	adds	r2, #30
    791e:	1c3b      	adds	r3, r7, #0
    7920:	330c      	adds	r3, #12
    7922:	8811      	ldrh	r1, [r2, #0]
    7924:	881a      	ldrh	r2, [r3, #0]
    7926:	4b30      	ldr	r3, [pc, #192]	; (79e8 <udd_ep_trans_in_next+0x180>)
    7928:	1c08      	adds	r0, r1, #0
    792a:	1c11      	adds	r1, r2, #0
    792c:	4798      	blx	r3
    792e:	1c0b      	adds	r3, r1, #0
    7930:	b29b      	uxth	r3, r3
    7932:	2b00      	cmp	r3, #0
    7934:	d101      	bne.n	793a <udd_ep_trans_in_next+0xd2>
    7936:	2301      	movs	r3, #1
    7938:	e000      	b.n	793c <udd_ep_trans_in_next+0xd4>
    793a:	2300      	movs	r3, #0
    793c:	b2db      	uxtb	r3, r3
    793e:	1c1a      	adds	r2, r3, #0
    7940:	2301      	movs	r3, #1
    7942:	4013      	ands	r3, r2
    7944:	b2d9      	uxtb	r1, r3
    7946:	693b      	ldr	r3, [r7, #16]
    7948:	2201      	movs	r2, #1
    794a:	400a      	ands	r2, r1
    794c:	1892      	adds	r2, r2, r2
    794e:	7c99      	ldrb	r1, [r3, #18]
    7950:	2002      	movs	r0, #2
    7952:	4381      	bics	r1, r0
    7954:	430a      	orrs	r2, r1
    7956:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7958:	693b      	ldr	r3, [r7, #16]
    795a:	685a      	ldr	r2, [r3, #4]
    795c:	693b      	ldr	r3, [r7, #16]
    795e:	68db      	ldr	r3, [r3, #12]
    7960:	18d2      	adds	r2, r2, r3
    7962:	1c3b      	adds	r3, r7, #0
    7964:	331e      	adds	r3, #30
    7966:	881b      	ldrh	r3, [r3, #0]
    7968:	4820      	ldr	r0, [pc, #128]	; (79ec <udd_ep_trans_in_next+0x184>)
    796a:	1c39      	adds	r1, r7, #0
    796c:	310f      	adds	r1, #15
    796e:	7809      	ldrb	r1, [r1, #0]
    7970:	4c1f      	ldr	r4, [pc, #124]	; (79f0 <udd_ep_trans_in_next+0x188>)
    7972:	47a0      	blx	r4
		return;
    7974:	e02f      	b.n	79d6 <udd_ep_trans_in_next+0x16e>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    7976:	693b      	ldr	r3, [r7, #16]
    7978:	7c9b      	ldrb	r3, [r3, #18]
    797a:	079b      	lsls	r3, r3, #30
    797c:	0fdb      	lsrs	r3, r3, #31
    797e:	b2db      	uxtb	r3, r3
    7980:	2b00      	cmp	r3, #0
    7982:	d014      	beq.n	79ae <udd_ep_trans_in_next+0x146>
		ptr_job->b_shortpacket = false;
    7984:	693b      	ldr	r3, [r7, #16]
    7986:	7c9a      	ldrb	r2, [r3, #18]
    7988:	2102      	movs	r1, #2
    798a:	438a      	bics	r2, r1
    798c:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    798e:	693b      	ldr	r3, [r7, #16]
    7990:	685a      	ldr	r2, [r3, #4]
    7992:	693b      	ldr	r3, [r7, #16]
    7994:	68db      	ldr	r3, [r3, #12]
    7996:	18d3      	adds	r3, r2, r3
    7998:	4914      	ldr	r1, [pc, #80]	; (79ec <udd_ep_trans_in_next+0x184>)
    799a:	1c3a      	adds	r2, r7, #0
    799c:	320f      	adds	r2, #15
    799e:	7812      	ldrb	r2, [r2, #0]
    79a0:	1c08      	adds	r0, r1, #0
    79a2:	1c11      	adds	r1, r2, #0
    79a4:	1c1a      	adds	r2, r3, #0
    79a6:	2300      	movs	r3, #0
    79a8:	4c11      	ldr	r4, [pc, #68]	; (79f0 <udd_ep_trans_in_next+0x188>)
    79aa:	47a0      	blx	r4
		return;
    79ac:	e013      	b.n	79d6 <udd_ep_trans_in_next+0x16e>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    79ae:	693b      	ldr	r3, [r7, #16]
    79b0:	7c9a      	ldrb	r2, [r3, #18]
    79b2:	2101      	movs	r1, #1
    79b4:	438a      	bics	r2, r1
    79b6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    79b8:	693b      	ldr	r3, [r7, #16]
    79ba:	681b      	ldr	r3, [r3, #0]
    79bc:	2b00      	cmp	r3, #0
    79be:	d00a      	beq.n	79d6 <udd_ep_trans_in_next+0x16e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    79c0:	693b      	ldr	r3, [r7, #16]
    79c2:	681c      	ldr	r4, [r3, #0]
    79c4:	693b      	ldr	r3, [r7, #16]
    79c6:	68da      	ldr	r2, [r3, #12]
    79c8:	1c3b      	adds	r3, r7, #0
    79ca:	3317      	adds	r3, #23
    79cc:	781b      	ldrb	r3, [r3, #0]
    79ce:	2000      	movs	r0, #0
    79d0:	1c11      	adds	r1, r2, #0
    79d2:	1c1a      	adds	r2, r3, #0
    79d4:	47a0      	blx	r4
	}
}
    79d6:	46bd      	mov	sp, r7
    79d8:	b009      	add	sp, #36	; 0x24
    79da:	bd90      	pop	{r4, r7, pc}
    79dc:	0000782d 	.word	0x0000782d
    79e0:	00001fff 	.word	0x00001fff
    79e4:	0000b7b1 	.word	0x0000b7b1
    79e8:	0000b6f1 	.word	0x0000b6f1
    79ec:	20006a34 	.word	0x20006a34
    79f0:	0000a009 	.word	0x0000a009

000079f4 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    79f4:	b5b0      	push	{r4, r5, r7, lr}
    79f6:	b088      	sub	sp, #32
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7a00:	1c3b      	adds	r3, r7, #0
    7a02:	3317      	adds	r3, #23
    7a04:	69ba      	ldr	r2, [r7, #24]
    7a06:	7992      	ldrb	r2, [r2, #6]
    7a08:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    7a0a:	1c3b      	adds	r3, r7, #0
    7a0c:	3317      	adds	r3, #23
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	1c18      	adds	r0, r3, #0
    7a12:	4b67      	ldr	r3, [pc, #412]	; (7bb0 <udd_ep_trans_out_next+0x1bc>)
    7a14:	4798      	blx	r3
    7a16:	1c03      	adds	r3, r0, #0
    7a18:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    7a1a:	1c3b      	adds	r3, r7, #0
    7a1c:	330f      	adds	r3, #15
    7a1e:	1c3a      	adds	r2, r7, #0
    7a20:	3217      	adds	r2, #23
    7a22:	7811      	ldrb	r1, [r2, #0]
    7a24:	220f      	movs	r2, #15
    7a26:	400a      	ands	r2, r1
    7a28:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    7a2a:	1c3b      	adds	r3, r7, #0
    7a2c:	330c      	adds	r3, #12
    7a2e:	693a      	ldr	r2, [r7, #16]
    7a30:	8a12      	ldrh	r2, [r2, #16]
    7a32:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    7a34:	1c3b      	adds	r3, r7, #0
    7a36:	330a      	adds	r3, #10
    7a38:	69ba      	ldr	r2, [r7, #24]
    7a3a:	8812      	ldrh	r2, [r2, #0]
    7a3c:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    7a3e:	693b      	ldr	r3, [r7, #16]
    7a40:	7c9b      	ldrb	r3, [r3, #18]
    7a42:	075b      	lsls	r3, r3, #29
    7a44:	0fdb      	lsrs	r3, r3, #31
    7a46:	b2db      	uxtb	r3, r3
    7a48:	2b00      	cmp	r3, #0
    7a4a:	d01a      	beq.n	7a82 <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    7a4c:	693b      	ldr	r3, [r7, #16]
    7a4e:	685a      	ldr	r2, [r3, #4]
    7a50:	693b      	ldr	r3, [r7, #16]
    7a52:	68db      	ldr	r3, [r3, #12]
    7a54:	18d5      	adds	r5, r2, r3
    7a56:	1c3b      	adds	r3, r7, #0
    7a58:	330f      	adds	r3, #15
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	3b01      	subs	r3, #1
    7a5e:	00da      	lsls	r2, r3, #3
    7a60:	4b54      	ldr	r3, [pc, #336]	; (7bb4 <udd_ep_trans_out_next+0x1c0>)
    7a62:	18d4      	adds	r4, r2, r3
    7a64:	693b      	ldr	r3, [r7, #16]
    7a66:	6899      	ldr	r1, [r3, #8]
    7a68:	1c3b      	adds	r3, r7, #0
    7a6a:	330c      	adds	r3, #12
    7a6c:	881a      	ldrh	r2, [r3, #0]
    7a6e:	4b52      	ldr	r3, [pc, #328]	; (7bb8 <udd_ep_trans_out_next+0x1c4>)
    7a70:	1c08      	adds	r0, r1, #0
    7a72:	1c11      	adds	r1, r2, #0
    7a74:	4798      	blx	r3
    7a76:	1c0b      	adds	r3, r1, #0
    7a78:	1c28      	adds	r0, r5, #0
    7a7a:	1c21      	adds	r1, r4, #0
    7a7c:	1c1a      	adds	r2, r3, #0
    7a7e:	4b4f      	ldr	r3, [pc, #316]	; (7bbc <udd_ep_trans_out_next+0x1c8>)
    7a80:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    7a82:	693b      	ldr	r3, [r7, #16]
    7a84:	68da      	ldr	r2, [r3, #12]
    7a86:	1c3b      	adds	r3, r7, #0
    7a88:	330a      	adds	r3, #10
    7a8a:	881b      	ldrh	r3, [r3, #0]
    7a8c:	18d2      	adds	r2, r2, r3
    7a8e:	693b      	ldr	r3, [r7, #16]
    7a90:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    7a92:	693b      	ldr	r3, [r7, #16]
    7a94:	68da      	ldr	r2, [r3, #12]
    7a96:	693b      	ldr	r3, [r7, #16]
    7a98:	689b      	ldr	r3, [r3, #8]
    7a9a:	429a      	cmp	r2, r3
    7a9c:	d903      	bls.n	7aa6 <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    7a9e:	693b      	ldr	r3, [r7, #16]
    7aa0:	689a      	ldr	r2, [r3, #8]
    7aa2:	693b      	ldr	r3, [r7, #16]
    7aa4:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    7aa6:	69bb      	ldr	r3, [r7, #24]
    7aa8:	889b      	ldrh	r3, [r3, #4]
    7aaa:	1c3a      	adds	r2, r7, #0
    7aac:	320a      	adds	r2, #10
    7aae:	8812      	ldrh	r2, [r2, #0]
    7ab0:	429a      	cmp	r2, r3
    7ab2:	d165      	bne.n	7b80 <udd_ep_trans_out_next+0x18c>
    7ab4:	693b      	ldr	r3, [r7, #16]
    7ab6:	68da      	ldr	r2, [r3, #12]
    7ab8:	693b      	ldr	r3, [r7, #16]
    7aba:	689b      	ldr	r3, [r3, #8]
    7abc:	429a      	cmp	r2, r3
    7abe:	d05f      	beq.n	7b80 <udd_ep_trans_out_next+0x18c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7ac0:	693b      	ldr	r3, [r7, #16]
    7ac2:	689b      	ldr	r3, [r3, #8]
    7ac4:	b299      	uxth	r1, r3
    7ac6:	693b      	ldr	r3, [r7, #16]
    7ac8:	68db      	ldr	r3, [r3, #12]
    7aca:	b29a      	uxth	r2, r3
    7acc:	1c3b      	adds	r3, r7, #0
    7ace:	331e      	adds	r3, #30
    7ad0:	1a8a      	subs	r2, r1, r2
    7ad2:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7ad4:	1c3b      	adds	r3, r7, #0
    7ad6:	331e      	adds	r3, #30
    7ad8:	881a      	ldrh	r2, [r3, #0]
    7ada:	4b39      	ldr	r3, [pc, #228]	; (7bc0 <udd_ep_trans_out_next+0x1cc>)
    7adc:	429a      	cmp	r2, r3
    7ade:	d90f      	bls.n	7b00 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    7ae0:	1c3b      	adds	r3, r7, #0
    7ae2:	330c      	adds	r3, #12
    7ae4:	881a      	ldrh	r2, [r3, #0]
    7ae6:	4936      	ldr	r1, [pc, #216]	; (7bc0 <udd_ep_trans_out_next+0x1cc>)
    7ae8:	4b36      	ldr	r3, [pc, #216]	; (7bc4 <udd_ep_trans_out_next+0x1d0>)
    7aea:	1c08      	adds	r0, r1, #0
    7aec:	1c11      	adds	r1, r2, #0
    7aee:	4798      	blx	r3
    7af0:	1c0b      	adds	r3, r1, #0
    7af2:	b29a      	uxth	r2, r3
    7af4:	1c3b      	adds	r3, r7, #0
    7af6:	331e      	adds	r3, #30
    7af8:	4931      	ldr	r1, [pc, #196]	; (7bc0 <udd_ep_trans_out_next+0x1cc>)
    7afa:	1a8a      	subs	r2, r1, r2
    7afc:	801a      	strh	r2, [r3, #0]
    7afe:	e012      	b.n	7b26 <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    7b00:	1c3a      	adds	r2, r7, #0
    7b02:	321e      	adds	r2, #30
    7b04:	1c3b      	adds	r3, r7, #0
    7b06:	330c      	adds	r3, #12
    7b08:	8811      	ldrh	r1, [r2, #0]
    7b0a:	881a      	ldrh	r2, [r3, #0]
    7b0c:	4b2a      	ldr	r3, [pc, #168]	; (7bb8 <udd_ep_trans_out_next+0x1c4>)
    7b0e:	1c08      	adds	r0, r1, #0
    7b10:	1c11      	adds	r1, r2, #0
    7b12:	4798      	blx	r3
    7b14:	1c0b      	adds	r3, r1, #0
    7b16:	b29a      	uxth	r2, r3
    7b18:	1c3b      	adds	r3, r7, #0
    7b1a:	331e      	adds	r3, #30
    7b1c:	1c39      	adds	r1, r7, #0
    7b1e:	311e      	adds	r1, #30
    7b20:	8809      	ldrh	r1, [r1, #0]
    7b22:	1a8a      	subs	r2, r1, r2
    7b24:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    7b26:	1c3a      	adds	r2, r7, #0
    7b28:	321e      	adds	r2, #30
    7b2a:	1c3b      	adds	r3, r7, #0
    7b2c:	330c      	adds	r3, #12
    7b2e:	8812      	ldrh	r2, [r2, #0]
    7b30:	881b      	ldrh	r3, [r3, #0]
    7b32:	429a      	cmp	r2, r3
    7b34:	d215      	bcs.n	7b62 <udd_ep_trans_out_next+0x16e>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    7b36:	693b      	ldr	r3, [r7, #16]
    7b38:	7c9a      	ldrb	r2, [r3, #18]
    7b3a:	2104      	movs	r1, #4
    7b3c:	430a      	orrs	r2, r1
    7b3e:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    7b40:	1c3b      	adds	r3, r7, #0
    7b42:	330f      	adds	r3, #15
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	3b01      	subs	r3, #1
    7b48:	00da      	lsls	r2, r3, #3
    7b4a:	4b1a      	ldr	r3, [pc, #104]	; (7bb4 <udd_ep_trans_out_next+0x1c0>)
    7b4c:	18d2      	adds	r2, r2, r3
    7b4e:	1c3b      	adds	r3, r7, #0
    7b50:	330c      	adds	r3, #12
    7b52:	881b      	ldrh	r3, [r3, #0]
    7b54:	481c      	ldr	r0, [pc, #112]	; (7bc8 <udd_ep_trans_out_next+0x1d4>)
    7b56:	1c39      	adds	r1, r7, #0
    7b58:	310f      	adds	r1, #15
    7b5a:	7809      	ldrb	r1, [r1, #0]
    7b5c:	4c1b      	ldr	r4, [pc, #108]	; (7bcc <udd_ep_trans_out_next+0x1d8>)
    7b5e:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    7b60:	e022      	b.n	7ba8 <udd_ep_trans_out_next+0x1b4>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7b62:	693b      	ldr	r3, [r7, #16]
    7b64:	685a      	ldr	r2, [r3, #4]
    7b66:	693b      	ldr	r3, [r7, #16]
    7b68:	68db      	ldr	r3, [r3, #12]
    7b6a:	18d2      	adds	r2, r2, r3
    7b6c:	1c3b      	adds	r3, r7, #0
    7b6e:	331e      	adds	r3, #30
    7b70:	881b      	ldrh	r3, [r3, #0]
    7b72:	4815      	ldr	r0, [pc, #84]	; (7bc8 <udd_ep_trans_out_next+0x1d4>)
    7b74:	1c39      	adds	r1, r7, #0
    7b76:	310f      	adds	r1, #15
    7b78:	7809      	ldrb	r1, [r1, #0]
    7b7a:	4c14      	ldr	r4, [pc, #80]	; (7bcc <udd_ep_trans_out_next+0x1d8>)
    7b7c:	47a0      	blx	r4
		}
		return;
    7b7e:	e013      	b.n	7ba8 <udd_ep_trans_out_next+0x1b4>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    7b80:	693b      	ldr	r3, [r7, #16]
    7b82:	7c9a      	ldrb	r2, [r3, #18]
    7b84:	2101      	movs	r1, #1
    7b86:	438a      	bics	r2, r1
    7b88:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    7b8a:	693b      	ldr	r3, [r7, #16]
    7b8c:	681b      	ldr	r3, [r3, #0]
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d00a      	beq.n	7ba8 <udd_ep_trans_out_next+0x1b4>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    7b92:	693b      	ldr	r3, [r7, #16]
    7b94:	681c      	ldr	r4, [r3, #0]
    7b96:	693b      	ldr	r3, [r7, #16]
    7b98:	68da      	ldr	r2, [r3, #12]
    7b9a:	1c3b      	adds	r3, r7, #0
    7b9c:	3317      	adds	r3, #23
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	2000      	movs	r0, #0
    7ba2:	1c11      	adds	r1, r2, #0
    7ba4:	1c1a      	adds	r2, r3, #0
    7ba6:	47a0      	blx	r4
	}
}
    7ba8:	46bd      	mov	sp, r7
    7baa:	b008      	add	sp, #32
    7bac:	bdb0      	pop	{r4, r5, r7, pc}
    7bae:	46c0      	nop			; (mov r8, r8)
    7bb0:	0000782d 	.word	0x0000782d
    7bb4:	200069fc 	.word	0x200069fc
    7bb8:	0000b6f1 	.word	0x0000b6f1
    7bbc:	0000b899 	.word	0x0000b899
    7bc0:	00001fff 	.word	0x00001fff
    7bc4:	0000b7b1 	.word	0x0000b7b1
    7bc8:	20006a34 	.word	0x20006a34
    7bcc:	0000a0c1 	.word	0x0000a0c1

00007bd0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    7bd0:	b580      	push	{r7, lr}
    7bd2:	b084      	sub	sp, #16
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
    7bd8:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7bda:	683b      	ldr	r3, [r7, #0]
    7bdc:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7bde:	1c3b      	adds	r3, r7, #0
    7be0:	330b      	adds	r3, #11
    7be2:	68fa      	ldr	r2, [r7, #12]
    7be4:	7992      	ldrb	r2, [r2, #6]
    7be6:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7be8:	1c3b      	adds	r3, r7, #0
    7bea:	330b      	adds	r3, #11
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	b25b      	sxtb	r3, r3
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	da04      	bge.n	7bfe <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    7bf4:	683b      	ldr	r3, [r7, #0]
    7bf6:	1c18      	adds	r0, r3, #0
    7bf8:	4b04      	ldr	r3, [pc, #16]	; (7c0c <udd_ep_transfer_process+0x3c>)
    7bfa:	4798      	blx	r3
    7bfc:	e003      	b.n	7c06 <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    7bfe:	683b      	ldr	r3, [r7, #0]
    7c00:	1c18      	adds	r0, r3, #0
    7c02:	4b03      	ldr	r3, [pc, #12]	; (7c10 <udd_ep_transfer_process+0x40>)
    7c04:	4798      	blx	r3
	}
}
    7c06:	46bd      	mov	sp, r7
    7c08:	b004      	add	sp, #16
    7c0a:	bd80      	pop	{r7, pc}
    7c0c:	00007869 	.word	0x00007869
    7c10:	000079f5 	.word	0x000079f5

00007c14 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    7c14:	b590      	push	{r4, r7, lr}
    7c16:	b085      	sub	sp, #20
    7c18:	af00      	add	r7, sp, #0
    7c1a:	1c02      	adds	r2, r0, #0
    7c1c:	1dfb      	adds	r3, r7, #7
    7c1e:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    7c20:	4a15      	ldr	r2, [pc, #84]	; (7c78 <udd_ep_abort+0x64>)
    7c22:	1dfb      	adds	r3, r7, #7
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	1c10      	adds	r0, r2, #0
    7c28:	1c19      	adds	r1, r3, #0
    7c2a:	4b14      	ldr	r3, [pc, #80]	; (7c7c <udd_ep_abort+0x68>)
    7c2c:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    7c2e:	1dfb      	adds	r3, r7, #7
    7c30:	781b      	ldrb	r3, [r3, #0]
    7c32:	1c18      	adds	r0, r3, #0
    7c34:	4b12      	ldr	r3, [pc, #72]	; (7c80 <udd_ep_abort+0x6c>)
    7c36:	4798      	blx	r3
    7c38:	1c03      	adds	r3, r0, #0
    7c3a:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    7c3c:	68fb      	ldr	r3, [r7, #12]
    7c3e:	7c9b      	ldrb	r3, [r3, #18]
    7c40:	07db      	lsls	r3, r3, #31
    7c42:	0fdb      	lsrs	r3, r3, #31
    7c44:	b2db      	uxtb	r3, r3
    7c46:	2b00      	cmp	r3, #0
    7c48:	d100      	bne.n	7c4c <udd_ep_abort+0x38>
		return;
    7c4a:	e012      	b.n	7c72 <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    7c4c:	68fb      	ldr	r3, [r7, #12]
    7c4e:	7c9a      	ldrb	r2, [r3, #18]
    7c50:	2101      	movs	r1, #1
    7c52:	438a      	bics	r2, r1
    7c54:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    7c56:	68fb      	ldr	r3, [r7, #12]
    7c58:	681b      	ldr	r3, [r3, #0]
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d009      	beq.n	7c72 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    7c5e:	68fb      	ldr	r3, [r7, #12]
    7c60:	681c      	ldr	r4, [r3, #0]
    7c62:	68fb      	ldr	r3, [r7, #12]
    7c64:	68da      	ldr	r2, [r3, #12]
    7c66:	1dfb      	adds	r3, r7, #7
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	2001      	movs	r0, #1
    7c6c:	1c11      	adds	r1, r2, #0
    7c6e:	1c1a      	adds	r2, r3, #0
    7c70:	47a0      	blx	r4
	}
}
    7c72:	46bd      	mov	sp, r7
    7c74:	b005      	add	sp, #20
    7c76:	bd90      	pop	{r4, r7, pc}
    7c78:	20006a34 	.word	0x20006a34
    7c7c:	00009da9 	.word	0x00009da9
    7c80:	0000782d 	.word	0x0000782d

00007c84 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    7c84:	b580      	push	{r7, lr}
    7c86:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21
	return false;
    7c88:	2300      	movs	r3, #0
#endif
}
    7c8a:	1c18      	adds	r0, r3, #0
    7c8c:	46bd      	mov	sp, r7
    7c8e:	bd80      	pop	{r7, pc}

00007c90 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    7c90:	b580      	push	{r7, lr}
    7c92:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    7c94:	4b03      	ldr	r3, [pc, #12]	; (7ca4 <udd_get_frame_number+0x14>)
    7c96:	1c18      	adds	r0, r3, #0
    7c98:	4b03      	ldr	r3, [pc, #12]	; (7ca8 <udd_get_frame_number+0x18>)
    7c9a:	4798      	blx	r3
    7c9c:	1c03      	adds	r3, r0, #0
}
    7c9e:	1c18      	adds	r0, r3, #0
    7ca0:	46bd      	mov	sp, r7
    7ca2:	bd80      	pop	{r7, pc}
    7ca4:	20006a34 	.word	0x20006a34
    7ca8:	000075dd 	.word	0x000075dd

00007cac <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	af00      	add	r7, sp, #0
	return usb_device_get_micro_frame_number(&usb_device);
    7cb0:	4b03      	ldr	r3, [pc, #12]	; (7cc0 <udd_get_micro_frame_number+0x14>)
    7cb2:	1c18      	adds	r0, r3, #0
    7cb4:	4b03      	ldr	r3, [pc, #12]	; (7cc4 <udd_get_micro_frame_number+0x18>)
    7cb6:	4798      	blx	r3
    7cb8:	1c03      	adds	r3, r0, #0
}
    7cba:	1c18      	adds	r0, r3, #0
    7cbc:	46bd      	mov	sp, r7
    7cbe:	bd80      	pop	{r7, pc}
    7cc0:	20006a34 	.word	0x20006a34
    7cc4:	000075fd 	.word	0x000075fd

00007cc8 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    7cc8:	b580      	push	{r7, lr}
    7cca:	b084      	sub	sp, #16
    7ccc:	af00      	add	r7, sp, #0
    7cce:	1c02      	adds	r2, r0, #0
    7cd0:	1dfb      	adds	r3, r7, #7
    7cd2:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    7cd4:	1c3b      	adds	r3, r7, #0
    7cd6:	3308      	adds	r3, #8
    7cd8:	1c18      	adds	r0, r3, #0
    7cda:	4b19      	ldr	r3, [pc, #100]	; (7d40 <udd_ep_free+0x78>)
    7cdc:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7cde:	1c3b      	adds	r3, r7, #0
    7ce0:	330f      	adds	r3, #15
    7ce2:	1dfa      	adds	r2, r7, #7
    7ce4:	7811      	ldrb	r1, [r2, #0]
    7ce6:	220f      	movs	r2, #15
    7ce8:	400a      	ands	r2, r1
    7cea:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    7cec:	1dfb      	adds	r3, r7, #7
    7cee:	781b      	ldrb	r3, [r3, #0]
    7cf0:	1c18      	adds	r0, r3, #0
    7cf2:	4b14      	ldr	r3, [pc, #80]	; (7d44 <udd_ep_free+0x7c>)
    7cf4:	4798      	blx	r3

	config_ep.ep_address = ep;
    7cf6:	1c3b      	adds	r3, r7, #0
    7cf8:	3308      	adds	r3, #8
    7cfa:	1dfa      	adds	r2, r7, #7
    7cfc:	7812      	ldrb	r2, [r2, #0]
    7cfe:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    7d00:	1c3b      	adds	r3, r7, #0
    7d02:	3308      	adds	r3, #8
    7d04:	2200      	movs	r2, #0
    7d06:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    7d08:	4a0f      	ldr	r2, [pc, #60]	; (7d48 <udd_ep_free+0x80>)
    7d0a:	1c3b      	adds	r3, r7, #0
    7d0c:	3308      	adds	r3, #8
    7d0e:	1c10      	adds	r0, r2, #0
    7d10:	1c19      	adds	r1, r3, #0
    7d12:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <udd_ep_free+0x84>)
    7d14:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7d16:	4a0c      	ldr	r2, [pc, #48]	; (7d48 <udd_ep_free+0x80>)
    7d18:	1c3b      	adds	r3, r7, #0
    7d1a:	330f      	adds	r3, #15
    7d1c:	781b      	ldrb	r3, [r3, #0]
    7d1e:	1c10      	adds	r0, r2, #0
    7d20:	1c19      	adds	r1, r3, #0
    7d22:	2200      	movs	r2, #0
    7d24:	4b0a      	ldr	r3, [pc, #40]	; (7d50 <udd_ep_free+0x88>)
    7d26:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7d28:	4a07      	ldr	r2, [pc, #28]	; (7d48 <udd_ep_free+0x80>)
    7d2a:	1dfb      	adds	r3, r7, #7
    7d2c:	781b      	ldrb	r3, [r3, #0]
    7d2e:	1c10      	adds	r0, r2, #0
    7d30:	1c19      	adds	r1, r3, #0
    7d32:	2200      	movs	r2, #0
    7d34:	4b07      	ldr	r3, [pc, #28]	; (7d54 <udd_ep_free+0x8c>)
    7d36:	4798      	blx	r3
}
    7d38:	46bd      	mov	sp, r7
    7d3a:	b004      	add	sp, #16
    7d3c:	bd80      	pop	{r7, pc}
    7d3e:	46c0      	nop			; (mov r8, r8)
    7d40:	00009831 	.word	0x00009831
    7d44:	00007c15 	.word	0x00007c15
    7d48:	20006a34 	.word	0x20006a34
    7d4c:	00009859 	.word	0x00009859
    7d50:	00009499 	.word	0x00009499
    7d54:	00009695 	.word	0x00009695

00007d58 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    7d58:	b590      	push	{r4, r7, lr}
    7d5a:	b087      	sub	sp, #28
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	1dfb      	adds	r3, r7, #7
    7d60:	7018      	strb	r0, [r3, #0]
    7d62:	1dbb      	adds	r3, r7, #6
    7d64:	7019      	strb	r1, [r3, #0]
    7d66:	1d3b      	adds	r3, r7, #4
    7d68:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    7d6a:	1c3b      	adds	r3, r7, #0
    7d6c:	330c      	adds	r3, #12
    7d6e:	1c18      	adds	r0, r3, #0
    7d70:	4b5a      	ldr	r3, [pc, #360]	; (7edc <udd_ep_alloc+0x184>)
    7d72:	4798      	blx	r3

	config_ep.ep_address = ep;
    7d74:	1c3b      	adds	r3, r7, #0
    7d76:	330c      	adds	r3, #12
    7d78:	1dfa      	adds	r2, r7, #7
    7d7a:	7812      	ldrb	r2, [r2, #0]
    7d7c:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    7d7e:	1d3b      	adds	r3, r7, #4
    7d80:	881b      	ldrh	r3, [r3, #0]
    7d82:	2b08      	cmp	r3, #8
    7d84:	d804      	bhi.n	7d90 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    7d86:	1c3b      	adds	r3, r7, #0
    7d88:	330c      	adds	r3, #12
    7d8a:	2200      	movs	r2, #0
    7d8c:	705a      	strb	r2, [r3, #1]
    7d8e:	e045      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 16) {
    7d90:	1d3b      	adds	r3, r7, #4
    7d92:	881b      	ldrh	r3, [r3, #0]
    7d94:	2b10      	cmp	r3, #16
    7d96:	d804      	bhi.n	7da2 <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    7d98:	1c3b      	adds	r3, r7, #0
    7d9a:	330c      	adds	r3, #12
    7d9c:	2201      	movs	r2, #1
    7d9e:	705a      	strb	r2, [r3, #1]
    7da0:	e03c      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 32) {
    7da2:	1d3b      	adds	r3, r7, #4
    7da4:	881b      	ldrh	r3, [r3, #0]
    7da6:	2b20      	cmp	r3, #32
    7da8:	d804      	bhi.n	7db4 <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    7daa:	1c3b      	adds	r3, r7, #0
    7dac:	330c      	adds	r3, #12
    7dae:	2202      	movs	r2, #2
    7db0:	705a      	strb	r2, [r3, #1]
    7db2:	e033      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 64) {
    7db4:	1d3b      	adds	r3, r7, #4
    7db6:	881b      	ldrh	r3, [r3, #0]
    7db8:	2b40      	cmp	r3, #64	; 0x40
    7dba:	d804      	bhi.n	7dc6 <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    7dbc:	1c3b      	adds	r3, r7, #0
    7dbe:	330c      	adds	r3, #12
    7dc0:	2203      	movs	r2, #3
    7dc2:	705a      	strb	r2, [r3, #1]
    7dc4:	e02a      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 128) {
    7dc6:	1d3b      	adds	r3, r7, #4
    7dc8:	881b      	ldrh	r3, [r3, #0]
    7dca:	2b80      	cmp	r3, #128	; 0x80
    7dcc:	d804      	bhi.n	7dd8 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    7dce:	1c3b      	adds	r3, r7, #0
    7dd0:	330c      	adds	r3, #12
    7dd2:	2204      	movs	r2, #4
    7dd4:	705a      	strb	r2, [r3, #1]
    7dd6:	e021      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 256) {
    7dd8:	1d3b      	adds	r3, r7, #4
    7dda:	881a      	ldrh	r2, [r3, #0]
    7ddc:	2380      	movs	r3, #128	; 0x80
    7dde:	005b      	lsls	r3, r3, #1
    7de0:	429a      	cmp	r2, r3
    7de2:	d804      	bhi.n	7dee <udd_ep_alloc+0x96>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    7de4:	1c3b      	adds	r3, r7, #0
    7de6:	330c      	adds	r3, #12
    7de8:	2205      	movs	r2, #5
    7dea:	705a      	strb	r2, [r3, #1]
    7dec:	e016      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 512) {
    7dee:	1d3b      	adds	r3, r7, #4
    7df0:	881a      	ldrh	r2, [r3, #0]
    7df2:	2380      	movs	r3, #128	; 0x80
    7df4:	009b      	lsls	r3, r3, #2
    7df6:	429a      	cmp	r2, r3
    7df8:	d804      	bhi.n	7e04 <udd_ep_alloc+0xac>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    7dfa:	1c3b      	adds	r3, r7, #0
    7dfc:	330c      	adds	r3, #12
    7dfe:	2206      	movs	r2, #6
    7e00:	705a      	strb	r2, [r3, #1]
    7e02:	e00b      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 1023) {
    7e04:	1d3b      	adds	r3, r7, #4
    7e06:	881a      	ldrh	r2, [r3, #0]
    7e08:	4b35      	ldr	r3, [pc, #212]	; (7ee0 <udd_ep_alloc+0x188>)
    7e0a:	429a      	cmp	r2, r3
    7e0c:	d804      	bhi.n	7e18 <udd_ep_alloc+0xc0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    7e0e:	1c3b      	adds	r3, r7, #0
    7e10:	330c      	adds	r3, #12
    7e12:	2207      	movs	r2, #7
    7e14:	705a      	strb	r2, [r3, #1]
    7e16:	e001      	b.n	7e1c <udd_ep_alloc+0xc4>
	} else {
		return false;
    7e18:	2300      	movs	r3, #0
    7e1a:	e05b      	b.n	7ed4 <udd_ep_alloc+0x17c>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    7e1c:	1dfb      	adds	r3, r7, #7
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	1c18      	adds	r0, r3, #0
    7e22:	4b30      	ldr	r3, [pc, #192]	; (7ee4 <udd_ep_alloc+0x18c>)
    7e24:	4798      	blx	r3
    7e26:	1c03      	adds	r3, r0, #0
    7e28:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    7e2a:	697b      	ldr	r3, [r7, #20]
    7e2c:	1d3a      	adds	r2, r7, #4
    7e2e:	8812      	ldrh	r2, [r2, #0]
    7e30:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    7e32:	1dbb      	adds	r3, r7, #6
    7e34:	1dba      	adds	r2, r7, #6
    7e36:	7811      	ldrb	r1, [r2, #0]
    7e38:	2203      	movs	r2, #3
    7e3a:	400a      	ands	r2, r1
    7e3c:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    7e3e:	1dbb      	adds	r3, r7, #6
    7e40:	781b      	ldrb	r3, [r3, #0]
    7e42:	2b01      	cmp	r3, #1
    7e44:	d104      	bne.n	7e50 <udd_ep_alloc+0xf8>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    7e46:	1c3b      	adds	r3, r7, #0
    7e48:	330c      	adds	r3, #12
    7e4a:	2202      	movs	r2, #2
    7e4c:	70da      	strb	r2, [r3, #3]
    7e4e:	e013      	b.n	7e78 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    7e50:	1dbb      	adds	r3, r7, #6
    7e52:	781b      	ldrb	r3, [r3, #0]
    7e54:	2b02      	cmp	r3, #2
    7e56:	d104      	bne.n	7e62 <udd_ep_alloc+0x10a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    7e58:	1c3b      	adds	r3, r7, #0
    7e5a:	330c      	adds	r3, #12
    7e5c:	2203      	movs	r2, #3
    7e5e:	70da      	strb	r2, [r3, #3]
    7e60:	e00a      	b.n	7e78 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    7e62:	1dbb      	adds	r3, r7, #6
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	2b03      	cmp	r3, #3
    7e68:	d104      	bne.n	7e74 <udd_ep_alloc+0x11c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    7e6a:	1c3b      	adds	r3, r7, #0
    7e6c:	330c      	adds	r3, #12
    7e6e:	2204      	movs	r2, #4
    7e70:	70da      	strb	r2, [r3, #3]
    7e72:	e001      	b.n	7e78 <udd_ep_alloc+0x120>
	} else {
		return false;
    7e74:	2300      	movs	r3, #0
    7e76:	e02d      	b.n	7ed4 <udd_ep_alloc+0x17c>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7e78:	1c3b      	adds	r3, r7, #0
    7e7a:	3313      	adds	r3, #19
    7e7c:	1dfa      	adds	r2, r7, #7
    7e7e:	7811      	ldrb	r1, [r2, #0]
    7e80:	220f      	movs	r2, #15
    7e82:	400a      	ands	r2, r1
    7e84:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    7e86:	4a18      	ldr	r2, [pc, #96]	; (7ee8 <udd_ep_alloc+0x190>)
    7e88:	1c3b      	adds	r3, r7, #0
    7e8a:	330c      	adds	r3, #12
    7e8c:	1c10      	adds	r0, r2, #0
    7e8e:	1c19      	adds	r1, r3, #0
    7e90:	4b16      	ldr	r3, [pc, #88]	; (7eec <udd_ep_alloc+0x194>)
    7e92:	4798      	blx	r3
    7e94:	1c03      	adds	r3, r0, #0
    7e96:	2b00      	cmp	r3, #0
    7e98:	d001      	beq.n	7e9e <udd_ep_alloc+0x146>
		return false;
    7e9a:	2300      	movs	r3, #0
    7e9c:	e01a      	b.n	7ed4 <udd_ep_alloc+0x17c>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    7e9e:	4912      	ldr	r1, [pc, #72]	; (7ee8 <udd_ep_alloc+0x190>)
    7ea0:	1c3b      	adds	r3, r7, #0
    7ea2:	3313      	adds	r3, #19
    7ea4:	781a      	ldrb	r2, [r3, #0]
    7ea6:	4b12      	ldr	r3, [pc, #72]	; (7ef0 <udd_ep_alloc+0x198>)
    7ea8:	1c08      	adds	r0, r1, #0
    7eaa:	1c11      	adds	r1, r2, #0
    7eac:	2200      	movs	r2, #0
    7eae:	4c11      	ldr	r4, [pc, #68]	; (7ef4 <udd_ep_alloc+0x19c>)
    7eb0:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7eb2:	4a0d      	ldr	r2, [pc, #52]	; (7ee8 <udd_ep_alloc+0x190>)
    7eb4:	1dfb      	adds	r3, r7, #7
    7eb6:	781b      	ldrb	r3, [r3, #0]
    7eb8:	1c10      	adds	r0, r2, #0
    7eba:	1c19      	adds	r1, r3, #0
    7ebc:	2200      	movs	r2, #0
    7ebe:	4b0e      	ldr	r3, [pc, #56]	; (7ef8 <udd_ep_alloc+0x1a0>)
    7ec0:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    7ec2:	4a09      	ldr	r2, [pc, #36]	; (7ee8 <udd_ep_alloc+0x190>)
    7ec4:	1dfb      	adds	r3, r7, #7
    7ec6:	781b      	ldrb	r3, [r3, #0]
    7ec8:	1c10      	adds	r0, r2, #0
    7eca:	1c19      	adds	r1, r3, #0
    7ecc:	2201      	movs	r2, #1
    7ece:	4b0a      	ldr	r3, [pc, #40]	; (7ef8 <udd_ep_alloc+0x1a0>)
    7ed0:	4798      	blx	r3

	return true;
    7ed2:	2301      	movs	r3, #1
}
    7ed4:	1c18      	adds	r0, r3, #0
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b007      	add	sp, #28
    7eda:	bd90      	pop	{r4, r7, pc}
    7edc:	00009831 	.word	0x00009831
    7ee0:	000003ff 	.word	0x000003ff
    7ee4:	0000782d 	.word	0x0000782d
    7ee8:	20006a34 	.word	0x20006a34
    7eec:	00009859 	.word	0x00009859
    7ef0:	00007bd1 	.word	0x00007bd1
    7ef4:	00009425 	.word	0x00009425
    7ef8:	00009505 	.word	0x00009505

00007efc <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    7efc:	b580      	push	{r7, lr}
    7efe:	b082      	sub	sp, #8
    7f00:	af00      	add	r7, sp, #0
    7f02:	1c02      	adds	r2, r0, #0
    7f04:	1dfb      	adds	r3, r7, #7
    7f06:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    7f08:	4a05      	ldr	r2, [pc, #20]	; (7f20 <udd_ep_is_halted+0x24>)
    7f0a:	1dfb      	adds	r3, r7, #7
    7f0c:	781b      	ldrb	r3, [r3, #0]
    7f0e:	1c10      	adds	r0, r2, #0
    7f10:	1c19      	adds	r1, r3, #0
    7f12:	4b04      	ldr	r3, [pc, #16]	; (7f24 <udd_ep_is_halted+0x28>)
    7f14:	4798      	blx	r3
    7f16:	1c03      	adds	r3, r0, #0
}
    7f18:	1c18      	adds	r0, r3, #0
    7f1a:	46bd      	mov	sp, r7
    7f1c:	b002      	add	sp, #8
    7f1e:	bd80      	pop	{r7, pc}
    7f20:	20006a34 	.word	0x20006a34
    7f24:	00009e29 	.word	0x00009e29

00007f28 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	1c02      	adds	r2, r0, #0
    7f30:	1dfb      	adds	r3, r7, #7
    7f32:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7f34:	1c3b      	adds	r3, r7, #0
    7f36:	330f      	adds	r3, #15
    7f38:	1dfa      	adds	r2, r7, #7
    7f3a:	7811      	ldrb	r1, [r2, #0]
    7f3c:	220f      	movs	r2, #15
    7f3e:	400a      	ands	r2, r1
    7f40:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7f42:	1c3b      	adds	r3, r7, #0
    7f44:	330f      	adds	r3, #15
    7f46:	781b      	ldrb	r3, [r3, #0]
    7f48:	2b07      	cmp	r3, #7
    7f4a:	d901      	bls.n	7f50 <udd_ep_set_halt+0x28>
		return false;
    7f4c:	2300      	movs	r3, #0
    7f4e:	e00c      	b.n	7f6a <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    7f50:	4a08      	ldr	r2, [pc, #32]	; (7f74 <udd_ep_set_halt+0x4c>)
    7f52:	1dfb      	adds	r3, r7, #7
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	1c10      	adds	r0, r2, #0
    7f58:	1c19      	adds	r1, r3, #0
    7f5a:	4b07      	ldr	r3, [pc, #28]	; (7f78 <udd_ep_set_halt+0x50>)
    7f5c:	4798      	blx	r3

	udd_ep_abort(ep);
    7f5e:	1dfb      	adds	r3, r7, #7
    7f60:	781b      	ldrb	r3, [r3, #0]
    7f62:	1c18      	adds	r0, r3, #0
    7f64:	4b05      	ldr	r3, [pc, #20]	; (7f7c <udd_ep_set_halt+0x54>)
    7f66:	4798      	blx	r3
	return true;
    7f68:	2301      	movs	r3, #1
}
    7f6a:	1c18      	adds	r0, r3, #0
    7f6c:	46bd      	mov	sp, r7
    7f6e:	b004      	add	sp, #16
    7f70:	bd80      	pop	{r7, pc}
    7f72:	46c0      	nop			; (mov r8, r8)
    7f74:	20006a34 	.word	0x20006a34
    7f78:	00009e99 	.word	0x00009e99
    7f7c:	00007c15 	.word	0x00007c15

00007f80 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    7f80:	b580      	push	{r7, lr}
    7f82:	b084      	sub	sp, #16
    7f84:	af00      	add	r7, sp, #0
    7f86:	1c02      	adds	r2, r0, #0
    7f88:	1dfb      	adds	r3, r7, #7
    7f8a:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7f8c:	1c3b      	adds	r3, r7, #0
    7f8e:	330f      	adds	r3, #15
    7f90:	1dfa      	adds	r2, r7, #7
    7f92:	7811      	ldrb	r1, [r2, #0]
    7f94:	220f      	movs	r2, #15
    7f96:	400a      	ands	r2, r1
    7f98:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7f9a:	1c3b      	adds	r3, r7, #0
    7f9c:	330f      	adds	r3, #15
    7f9e:	781b      	ldrb	r3, [r3, #0]
    7fa0:	2b07      	cmp	r3, #7
    7fa2:	d901      	bls.n	7fa8 <udd_ep_clear_halt+0x28>
		return false;
    7fa4:	2300      	movs	r3, #0
    7fa6:	e01d      	b.n	7fe4 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    7fa8:	1dfb      	adds	r3, r7, #7
    7faa:	781b      	ldrb	r3, [r3, #0]
    7fac:	1c18      	adds	r0, r3, #0
    7fae:	4b0f      	ldr	r3, [pc, #60]	; (7fec <udd_ep_clear_halt+0x6c>)
    7fb0:	4798      	blx	r3
    7fb2:	1c03      	adds	r3, r0, #0
    7fb4:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    7fb6:	4a0e      	ldr	r2, [pc, #56]	; (7ff0 <udd_ep_clear_halt+0x70>)
    7fb8:	1dfb      	adds	r3, r7, #7
    7fba:	781b      	ldrb	r3, [r3, #0]
    7fbc:	1c10      	adds	r0, r2, #0
    7fbe:	1c19      	adds	r1, r3, #0
    7fc0:	4b0c      	ldr	r3, [pc, #48]	; (7ff4 <udd_ep_clear_halt+0x74>)
    7fc2:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    7fc4:	68bb      	ldr	r3, [r7, #8]
    7fc6:	7c9b      	ldrb	r3, [r3, #18]
    7fc8:	07db      	lsls	r3, r3, #31
    7fca:	0fdb      	lsrs	r3, r3, #31
    7fcc:	b2db      	uxtb	r3, r3
    7fce:	2b01      	cmp	r3, #1
    7fd0:	d107      	bne.n	7fe2 <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    7fd2:	68bb      	ldr	r3, [r7, #8]
    7fd4:	7c9a      	ldrb	r2, [r3, #18]
    7fd6:	2101      	movs	r1, #1
    7fd8:	438a      	bics	r2, r1
    7fda:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    7fdc:	68bb      	ldr	r3, [r7, #8]
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	4798      	blx	r3
	}

	return true;
    7fe2:	2301      	movs	r3, #1
}
    7fe4:	1c18      	adds	r0, r3, #0
    7fe6:	46bd      	mov	sp, r7
    7fe8:	b004      	add	sp, #16
    7fea:	bd80      	pop	{r7, pc}
    7fec:	0000782d 	.word	0x0000782d
    7ff0:	20006a34 	.word	0x20006a34
    7ff4:	00009ef1 	.word	0x00009ef1

00007ff8 <udd_ep_wait_stall_clear>:

bool udd_ep_wait_stall_clear(udd_ep_id_t ep, udd_callback_halt_cleared_t callback)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b084      	sub	sp, #16
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	1c02      	adds	r2, r0, #0
    8000:	6039      	str	r1, [r7, #0]
    8002:	1dfb      	adds	r3, r7, #7
    8004:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ep_num = ep & USB_EP_ADDR_MASK;
    8006:	1c3b      	adds	r3, r7, #0
    8008:	330f      	adds	r3, #15
    800a:	1dfa      	adds	r2, r7, #7
    800c:	7811      	ldrb	r1, [r2, #0]
    800e:	220f      	movs	r2, #15
    8010:	400a      	ands	r2, r1
    8012:	701a      	strb	r2, [r3, #0]
	if (USB_DEVICE_MAX_EP < ep_num) {
    8014:	1c3b      	adds	r3, r7, #0
    8016:	330f      	adds	r3, #15
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	2b07      	cmp	r3, #7
    801c:	d901      	bls.n	8022 <udd_ep_wait_stall_clear+0x2a>
		return false;
    801e:	2300      	movs	r3, #0
    8020:	e032      	b.n	8088 <udd_ep_wait_stall_clear+0x90>
	}

	ptr_job = udd_ep_get_job(ep);
    8022:	1dfb      	adds	r3, r7, #7
    8024:	781b      	ldrb	r3, [r3, #0]
    8026:	1c18      	adds	r0, r3, #0
    8028:	4b19      	ldr	r3, [pc, #100]	; (8090 <udd_ep_wait_stall_clear+0x98>)
    802a:	4798      	blx	r3
    802c:	1c03      	adds	r3, r0, #0
    802e:	60bb      	str	r3, [r7, #8]
	if (ptr_job->busy == true) {
    8030:	68bb      	ldr	r3, [r7, #8]
    8032:	7c9b      	ldrb	r3, [r3, #18]
    8034:	07db      	lsls	r3, r3, #31
    8036:	0fdb      	lsrs	r3, r3, #31
    8038:	b2db      	uxtb	r3, r3
    803a:	2b01      	cmp	r3, #1
    803c:	d101      	bne.n	8042 <udd_ep_wait_stall_clear+0x4a>
		return false; /* Job already on going */
    803e:	2300      	movs	r3, #0
    8040:	e022      	b.n	8088 <udd_ep_wait_stall_clear+0x90>
	}

	/* Wait clear halt endpoint */
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    8042:	4a14      	ldr	r2, [pc, #80]	; (8094 <udd_ep_wait_stall_clear+0x9c>)
    8044:	1dfb      	adds	r3, r7, #7
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	1c10      	adds	r0, r2, #0
    804a:	1c19      	adds	r1, r3, #0
    804c:	4b12      	ldr	r3, [pc, #72]	; (8098 <udd_ep_wait_stall_clear+0xa0>)
    804e:	4798      	blx	r3
    8050:	1c03      	adds	r3, r0, #0
    8052:	2b00      	cmp	r3, #0
    8054:	d009      	beq.n	806a <udd_ep_wait_stall_clear+0x72>
		/* Endpoint halted then registers the callback */
		ptr_job->busy = true;
    8056:	68bb      	ldr	r3, [r7, #8]
    8058:	7c9a      	ldrb	r2, [r3, #18]
    805a:	2101      	movs	r1, #1
    805c:	430a      	orrs	r2, r1
    805e:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    8060:	68bb      	ldr	r3, [r7, #8]
    8062:	683a      	ldr	r2, [r7, #0]
    8064:	601a      	str	r2, [r3, #0]
		return true;
    8066:	2301      	movs	r3, #1
    8068:	e00e      	b.n	8088 <udd_ep_wait_stall_clear+0x90>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    806a:	4a0a      	ldr	r2, [pc, #40]	; (8094 <udd_ep_wait_stall_clear+0x9c>)
    806c:	1dfb      	adds	r3, r7, #7
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	1c10      	adds	r0, r2, #0
    8072:	1c19      	adds	r1, r3, #0
    8074:	4b09      	ldr	r3, [pc, #36]	; (809c <udd_ep_wait_stall_clear+0xa4>)
    8076:	4798      	blx	r3
    8078:	1c03      	adds	r3, r0, #0
    807a:	2b00      	cmp	r3, #0
    807c:	d003      	beq.n	8086 <udd_ep_wait_stall_clear+0x8e>
		callback(); /* Endpoint not halted then call directly callback */
    807e:	683b      	ldr	r3, [r7, #0]
    8080:	4798      	blx	r3
		return true;
    8082:	2301      	movs	r3, #1
    8084:	e000      	b.n	8088 <udd_ep_wait_stall_clear+0x90>
	} else {
		return false;
    8086:	2300      	movs	r3, #0
	}
}
    8088:	1c18      	adds	r0, r3, #0
    808a:	46bd      	mov	sp, r7
    808c:	b004      	add	sp, #16
    808e:	bd80      	pop	{r7, pc}
    8090:	0000782d 	.word	0x0000782d
    8094:	20006a34 	.word	0x20006a34
    8098:	00009e29 	.word	0x00009e29
    809c:	00009d2d 	.word	0x00009d2d

000080a0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    80a0:	b580      	push	{r7, lr}
    80a2:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    80a4:	4b07      	ldr	r3, [pc, #28]	; (80c4 <udd_ctrl_stall_data+0x24>)
    80a6:	2205      	movs	r2, #5
    80a8:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    80aa:	4b07      	ldr	r3, [pc, #28]	; (80c8 <udd_ctrl_stall_data+0x28>)
    80ac:	1c18      	adds	r0, r3, #0
    80ae:	2180      	movs	r1, #128	; 0x80
    80b0:	4b06      	ldr	r3, [pc, #24]	; (80cc <udd_ctrl_stall_data+0x2c>)
    80b2:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    80b4:	4b04      	ldr	r3, [pc, #16]	; (80c8 <udd_ctrl_stall_data+0x28>)
    80b6:	1c18      	adds	r0, r3, #0
    80b8:	2100      	movs	r1, #0
    80ba:	4b05      	ldr	r3, [pc, #20]	; (80d0 <udd_ctrl_stall_data+0x30>)
    80bc:	4798      	blx	r3
}
    80be:	46bd      	mov	sp, r7
    80c0:	bd80      	pop	{r7, pc}
    80c2:	46c0      	nop			; (mov r8, r8)
    80c4:	20004050 	.word	0x20004050
    80c8:	20006a34 	.word	0x20006a34
    80cc:	00009e99 	.word	0x00009e99
    80d0:	00009ef1 	.word	0x00009ef1

000080d4 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    80d4:	b590      	push	{r4, r7, lr}
    80d6:	b089      	sub	sp, #36	; 0x24
    80d8:	af00      	add	r7, sp, #0
    80da:	60ba      	str	r2, [r7, #8]
    80dc:	607b      	str	r3, [r7, #4]
    80de:	1c3b      	adds	r3, r7, #0
    80e0:	330f      	adds	r3, #15
    80e2:	1c02      	adds	r2, r0, #0
    80e4:	701a      	strb	r2, [r3, #0]
    80e6:	1c3b      	adds	r3, r7, #0
    80e8:	330e      	adds	r3, #14
    80ea:	1c0a      	adds	r2, r1, #0
    80ec:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    80ee:	1c3b      	adds	r3, r7, #0
    80f0:	331d      	adds	r3, #29
    80f2:	1c3a      	adds	r2, r7, #0
    80f4:	320f      	adds	r2, #15
    80f6:	7811      	ldrb	r1, [r2, #0]
    80f8:	220f      	movs	r2, #15
    80fa:	400a      	ands	r2, r1
    80fc:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    80fe:	1c3b      	adds	r3, r7, #0
    8100:	331d      	adds	r3, #29
    8102:	781b      	ldrb	r3, [r3, #0]
    8104:	2b07      	cmp	r3, #7
    8106:	d808      	bhi.n	811a <udd_ep_run+0x46>
    8108:	1c3b      	adds	r3, r7, #0
    810a:	330f      	adds	r3, #15
    810c:	781b      	ldrb	r3, [r3, #0]
    810e:	1c18      	adds	r0, r3, #0
    8110:	4b9d      	ldr	r3, [pc, #628]	; (8388 <udd_ep_run+0x2b4>)
    8112:	4798      	blx	r3
    8114:	1c03      	adds	r3, r0, #0
    8116:	2b00      	cmp	r3, #0
    8118:	d001      	beq.n	811e <udd_ep_run+0x4a>
		return false;
    811a:	2300      	movs	r3, #0
    811c:	e130      	b.n	8380 <udd_ep_run+0x2ac>
	}

	ptr_job = udd_ep_get_job(ep);
    811e:	1c3b      	adds	r3, r7, #0
    8120:	330f      	adds	r3, #15
    8122:	781b      	ldrb	r3, [r3, #0]
    8124:	1c18      	adds	r0, r3, #0
    8126:	4b99      	ldr	r3, [pc, #612]	; (838c <udd_ep_run+0x2b8>)
    8128:	4798      	blx	r3
    812a:	1c03      	adds	r3, r0, #0
    812c:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    812e:	4b98      	ldr	r3, [pc, #608]	; (8390 <udd_ep_run+0x2bc>)
    8130:	4798      	blx	r3
    8132:	1c03      	adds	r3, r0, #0
    8134:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    8136:	69bb      	ldr	r3, [r7, #24]
    8138:	7c9b      	ldrb	r3, [r3, #18]
    813a:	07db      	lsls	r3, r3, #31
    813c:	0fdb      	lsrs	r3, r3, #31
    813e:	b2db      	uxtb	r3, r3
    8140:	2b01      	cmp	r3, #1
    8142:	d105      	bne.n	8150 <udd_ep_run+0x7c>
		cpu_irq_restore(flags);
    8144:	697b      	ldr	r3, [r7, #20]
    8146:	1c18      	adds	r0, r3, #0
    8148:	4b92      	ldr	r3, [pc, #584]	; (8394 <udd_ep_run+0x2c0>)
    814a:	4798      	blx	r3
		return false; /* Job already on going */
    814c:	2300      	movs	r3, #0
    814e:	e117      	b.n	8380 <udd_ep_run+0x2ac>
	}
	ptr_job->busy = true;
    8150:	69bb      	ldr	r3, [r7, #24]
    8152:	7c9a      	ldrb	r2, [r3, #18]
    8154:	2101      	movs	r1, #1
    8156:	430a      	orrs	r2, r1
    8158:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    815a:	697b      	ldr	r3, [r7, #20]
    815c:	1c18      	adds	r0, r3, #0
    815e:	4b8d      	ldr	r3, [pc, #564]	; (8394 <udd_ep_run+0x2c0>)
    8160:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    8162:	69bb      	ldr	r3, [r7, #24]
    8164:	68ba      	ldr	r2, [r7, #8]
    8166:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    8168:	69bb      	ldr	r3, [r7, #24]
    816a:	687a      	ldr	r2, [r7, #4]
    816c:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    816e:	69bb      	ldr	r3, [r7, #24]
    8170:	2200      	movs	r2, #0
    8172:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    8174:	69bb      	ldr	r3, [r7, #24]
    8176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8178:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    817a:	69bb      	ldr	r3, [r7, #24]
    817c:	1c3a      	adds	r2, r7, #0
    817e:	320e      	adds	r2, #14
    8180:	7811      	ldrb	r1, [r2, #0]
    8182:	2201      	movs	r2, #1
    8184:	400a      	ands	r2, r1
    8186:	1892      	adds	r2, r2, r2
    8188:	7c99      	ldrb	r1, [r3, #18]
    818a:	2002      	movs	r0, #2
    818c:	4381      	bics	r1, r0
    818e:	430a      	orrs	r2, r1
    8190:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    8192:	69bb      	ldr	r3, [r7, #24]
    8194:	7c9a      	ldrb	r2, [r3, #18]
    8196:	2104      	movs	r1, #4
    8198:	438a      	bics	r2, r1
    819a:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    819c:	1c3b      	adds	r3, r7, #0
    819e:	330f      	adds	r3, #15
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	b25b      	sxtb	r3, r3
    81a4:	2b00      	cmp	r3, #0
    81a6:	db00      	blt.n	81aa <udd_ep_run+0xd6>
    81a8:	e077      	b.n	829a <udd_ep_run+0x1c6>
		if (0 != ptr_job->buf_size) {
    81aa:	69bb      	ldr	r3, [r7, #24]
    81ac:	689b      	ldr	r3, [r3, #8]
    81ae:	2b00      	cmp	r3, #0
    81b0:	d03f      	beq.n	8232 <udd_ep_run+0x15e>
			next_trans = ptr_job->buf_size;
    81b2:	69bb      	ldr	r3, [r7, #24]
    81b4:	689a      	ldr	r2, [r3, #8]
    81b6:	1c3b      	adds	r3, r7, #0
    81b8:	331e      	adds	r3, #30
    81ba:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    81bc:	1c3b      	adds	r3, r7, #0
    81be:	331e      	adds	r3, #30
    81c0:	881a      	ldrh	r2, [r3, #0]
    81c2:	4b75      	ldr	r3, [pc, #468]	; (8398 <udd_ep_run+0x2c4>)
    81c4:	429a      	cmp	r2, r3
    81c6:	d90e      	bls.n	81e6 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    81c8:	69bb      	ldr	r3, [r7, #24]
    81ca:	8a1b      	ldrh	r3, [r3, #16]
    81cc:	1c1a      	adds	r2, r3, #0
    81ce:	4972      	ldr	r1, [pc, #456]	; (8398 <udd_ep_run+0x2c4>)
    81d0:	4b72      	ldr	r3, [pc, #456]	; (839c <udd_ep_run+0x2c8>)
    81d2:	1c08      	adds	r0, r1, #0
    81d4:	1c11      	adds	r1, r2, #0
    81d6:	4798      	blx	r3
    81d8:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    81da:	b29a      	uxth	r2, r3
    81dc:	1c3b      	adds	r3, r7, #0
    81de:	331e      	adds	r3, #30
    81e0:	496d      	ldr	r1, [pc, #436]	; (8398 <udd_ep_run+0x2c4>)
    81e2:	1a8a      	subs	r2, r1, r2
    81e4:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    81e6:	69bb      	ldr	r3, [r7, #24]
    81e8:	7c9b      	ldrb	r3, [r3, #18]
    81ea:	079b      	lsls	r3, r3, #30
    81ec:	0fdb      	lsrs	r3, r3, #31
    81ee:	b2db      	uxtb	r3, r3
    81f0:	2b00      	cmp	r3, #0
    81f2:	d00e      	beq.n	8212 <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    81f4:	69bb      	ldr	r3, [r7, #24]
    81f6:	8a1a      	ldrh	r2, [r3, #16]
    81f8:	1c3b      	adds	r3, r7, #0
    81fa:	331e      	adds	r3, #30
    81fc:	8819      	ldrh	r1, [r3, #0]
    81fe:	4b68      	ldr	r3, [pc, #416]	; (83a0 <udd_ep_run+0x2cc>)
    8200:	1c08      	adds	r0, r1, #0
    8202:	1c11      	adds	r1, r2, #0
    8204:	4798      	blx	r3
    8206:	1c0b      	adds	r3, r1, #0
    8208:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    820a:	2b00      	cmp	r3, #0
    820c:	d101      	bne.n	8212 <udd_ep_run+0x13e>
    820e:	2301      	movs	r3, #1
    8210:	e000      	b.n	8214 <udd_ep_run+0x140>
    8212:	2300      	movs	r3, #0
    8214:	b2db      	uxtb	r3, r3
    8216:	1c1a      	adds	r2, r3, #0
    8218:	2301      	movs	r3, #1
    821a:	4013      	ands	r3, r2
    821c:	b2d9      	uxtb	r1, r3
    821e:	69bb      	ldr	r3, [r7, #24]
    8220:	2201      	movs	r2, #1
    8222:	400a      	ands	r2, r1
    8224:	1892      	adds	r2, r2, r2
    8226:	7c99      	ldrb	r1, [r3, #18]
    8228:	2002      	movs	r0, #2
    822a:	4381      	bics	r1, r0
    822c:	430a      	orrs	r2, r1
    822e:	749a      	strb	r2, [r3, #18]
    8230:	e023      	b.n	827a <udd_ep_run+0x1a6>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    8232:	69bb      	ldr	r3, [r7, #24]
    8234:	7c9b      	ldrb	r3, [r3, #18]
    8236:	079b      	lsls	r3, r3, #30
    8238:	0fdb      	lsrs	r3, r3, #31
    823a:	b2db      	uxtb	r3, r3
    823c:	2b01      	cmp	r3, #1
    823e:	d109      	bne.n	8254 <udd_ep_run+0x180>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    8240:	69bb      	ldr	r3, [r7, #24]
    8242:	7c9a      	ldrb	r2, [r3, #18]
    8244:	2102      	movs	r1, #2
    8246:	438a      	bics	r2, r1
    8248:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    824a:	1c3b      	adds	r3, r7, #0
    824c:	331e      	adds	r3, #30
    824e:	2200      	movs	r2, #0
    8250:	801a      	strh	r2, [r3, #0]
    8252:	e012      	b.n	827a <udd_ep_run+0x1a6>
		} else {
			ptr_job->busy = false;
    8254:	69bb      	ldr	r3, [r7, #24]
    8256:	7c9a      	ldrb	r2, [r3, #18]
    8258:	2101      	movs	r1, #1
    825a:	438a      	bics	r2, r1
    825c:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    825e:	69bb      	ldr	r3, [r7, #24]
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	2b00      	cmp	r3, #0
    8264:	d007      	beq.n	8276 <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    8266:	69bb      	ldr	r3, [r7, #24]
    8268:	681b      	ldr	r3, [r3, #0]
    826a:	1c3a      	adds	r2, r7, #0
    826c:	320f      	adds	r2, #15
    826e:	7812      	ldrb	r2, [r2, #0]
    8270:	2000      	movs	r0, #0
    8272:	2100      	movs	r1, #0
    8274:	4798      	blx	r3
			}
			return true;
    8276:	2301      	movs	r3, #1
    8278:	e082      	b.n	8380 <udd_ep_run+0x2ac>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    827a:	69bb      	ldr	r3, [r7, #24]
    827c:	685a      	ldr	r2, [r3, #4]
    827e:	1c3b      	adds	r3, r7, #0
    8280:	331e      	adds	r3, #30
    8282:	881b      	ldrh	r3, [r3, #0]
    8284:	4847      	ldr	r0, [pc, #284]	; (83a4 <udd_ep_run+0x2d0>)
    8286:	1c39      	adds	r1, r7, #0
    8288:	311d      	adds	r1, #29
    828a:	7809      	ldrb	r1, [r1, #0]
    828c:	4c46      	ldr	r4, [pc, #280]	; (83a8 <udd_ep_run+0x2d4>)
    828e:	47a0      	blx	r4
    8290:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    8292:	425a      	negs	r2, r3
    8294:	4153      	adcs	r3, r2
    8296:	b2db      	uxtb	r3, r3
    8298:	e072      	b.n	8380 <udd_ep_run+0x2ac>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    829a:	69bb      	ldr	r3, [r7, #24]
    829c:	689b      	ldr	r3, [r3, #8]
    829e:	2b00      	cmp	r3, #0
    82a0:	d05c      	beq.n	835c <udd_ep_run+0x288>
			next_trans = ptr_job->buf_size;
    82a2:	69bb      	ldr	r3, [r7, #24]
    82a4:	689a      	ldr	r2, [r3, #8]
    82a6:	1c3b      	adds	r3, r7, #0
    82a8:	331e      	adds	r3, #30
    82aa:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    82ac:	1c3b      	adds	r3, r7, #0
    82ae:	331e      	adds	r3, #30
    82b0:	881a      	ldrh	r2, [r3, #0]
    82b2:	4b39      	ldr	r3, [pc, #228]	; (8398 <udd_ep_run+0x2c4>)
    82b4:	429a      	cmp	r2, r3
    82b6:	d90f      	bls.n	82d8 <udd_ep_run+0x204>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    82b8:	69bb      	ldr	r3, [r7, #24]
    82ba:	8a1b      	ldrh	r3, [r3, #16]
    82bc:	1c1a      	adds	r2, r3, #0
    82be:	4936      	ldr	r1, [pc, #216]	; (8398 <udd_ep_run+0x2c4>)
    82c0:	4b36      	ldr	r3, [pc, #216]	; (839c <udd_ep_run+0x2c8>)
    82c2:	1c08      	adds	r0, r1, #0
    82c4:	1c11      	adds	r1, r2, #0
    82c6:	4798      	blx	r3
    82c8:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    82ca:	b29a      	uxth	r2, r3
    82cc:	1c3b      	adds	r3, r7, #0
    82ce:	331e      	adds	r3, #30
    82d0:	4931      	ldr	r1, [pc, #196]	; (8398 <udd_ep_run+0x2c4>)
    82d2:	1a8a      	subs	r2, r1, r2
    82d4:	801a      	strh	r2, [r3, #0]
    82d6:	e011      	b.n	82fc <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    82d8:	69bb      	ldr	r3, [r7, #24]
    82da:	8a1a      	ldrh	r2, [r3, #16]
    82dc:	1c3b      	adds	r3, r7, #0
    82de:	331e      	adds	r3, #30
    82e0:	8819      	ldrh	r1, [r3, #0]
    82e2:	4b2f      	ldr	r3, [pc, #188]	; (83a0 <udd_ep_run+0x2cc>)
    82e4:	1c08      	adds	r0, r1, #0
    82e6:	1c11      	adds	r1, r2, #0
    82e8:	4798      	blx	r3
    82ea:	1c0b      	adds	r3, r1, #0
    82ec:	b29a      	uxth	r2, r3
    82ee:	1c3b      	adds	r3, r7, #0
    82f0:	331e      	adds	r3, #30
    82f2:	1c39      	adds	r1, r7, #0
    82f4:	311e      	adds	r1, #30
    82f6:	8809      	ldrh	r1, [r1, #0]
    82f8:	1a8a      	subs	r2, r1, r2
    82fa:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    82fc:	69bb      	ldr	r3, [r7, #24]
    82fe:	8a1b      	ldrh	r3, [r3, #16]
    8300:	1c3a      	adds	r2, r7, #0
    8302:	321e      	adds	r2, #30
    8304:	8812      	ldrh	r2, [r2, #0]
    8306:	429a      	cmp	r2, r3
    8308:	d218      	bcs.n	833c <udd_ep_run+0x268>
				ptr_job->b_use_out_cache_buffer = true;
    830a:	69bb      	ldr	r3, [r7, #24]
    830c:	7c9a      	ldrb	r2, [r3, #18]
    830e:	2104      	movs	r1, #4
    8310:	430a      	orrs	r2, r1
    8312:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    8314:	1c3b      	adds	r3, r7, #0
    8316:	331d      	adds	r3, #29
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	3b01      	subs	r3, #1
    831c:	00da      	lsls	r2, r3, #3
    831e:	4b23      	ldr	r3, [pc, #140]	; (83ac <udd_ep_run+0x2d8>)
    8320:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    8322:	69bb      	ldr	r3, [r7, #24]
    8324:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    8326:	481f      	ldr	r0, [pc, #124]	; (83a4 <udd_ep_run+0x2d0>)
    8328:	1c39      	adds	r1, r7, #0
    832a:	311d      	adds	r1, #29
    832c:	7809      	ldrb	r1, [r1, #0]
    832e:	4c20      	ldr	r4, [pc, #128]	; (83b0 <udd_ep_run+0x2dc>)
    8330:	47a0      	blx	r4
    8332:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    8334:	425a      	negs	r2, r3
    8336:	4153      	adcs	r3, r2
    8338:	b2db      	uxtb	r3, r3
    833a:	e021      	b.n	8380 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    833c:	69bb      	ldr	r3, [r7, #24]
    833e:	685a      	ldr	r2, [r3, #4]
    8340:	1c3b      	adds	r3, r7, #0
    8342:	331e      	adds	r3, #30
    8344:	881b      	ldrh	r3, [r3, #0]
    8346:	4817      	ldr	r0, [pc, #92]	; (83a4 <udd_ep_run+0x2d0>)
    8348:	1c39      	adds	r1, r7, #0
    834a:	311d      	adds	r1, #29
    834c:	7809      	ldrb	r1, [r1, #0]
    834e:	4c18      	ldr	r4, [pc, #96]	; (83b0 <udd_ep_run+0x2dc>)
    8350:	47a0      	blx	r4
    8352:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    8354:	425a      	negs	r2, r3
    8356:	4153      	adcs	r3, r2
    8358:	b2db      	uxtb	r3, r3
    835a:	e011      	b.n	8380 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    835c:	69bb      	ldr	r3, [r7, #24]
    835e:	7c9a      	ldrb	r2, [r3, #18]
    8360:	2101      	movs	r1, #1
    8362:	438a      	bics	r2, r1
    8364:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    8366:	69bb      	ldr	r3, [r7, #24]
    8368:	681b      	ldr	r3, [r3, #0]
    836a:	2b00      	cmp	r3, #0
    836c:	d007      	beq.n	837e <udd_ep_run+0x2aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    836e:	69bb      	ldr	r3, [r7, #24]
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	1c3a      	adds	r2, r7, #0
    8374:	320f      	adds	r2, #15
    8376:	7812      	ldrb	r2, [r2, #0]
    8378:	2000      	movs	r0, #0
    837a:	2100      	movs	r1, #0
    837c:	4798      	blx	r3
			}
			return true;
    837e:	2301      	movs	r3, #1
		}
	}
}
    8380:	1c18      	adds	r0, r3, #0
    8382:	46bd      	mov	sp, r7
    8384:	b009      	add	sp, #36	; 0x24
    8386:	bd90      	pop	{r4, r7, pc}
    8388:	00007efd 	.word	0x00007efd
    838c:	0000782d 	.word	0x0000782d
    8390:	00007461 	.word	0x00007461
    8394:	000074a9 	.word	0x000074a9
    8398:	00001fff 	.word	0x00001fff
    839c:	0000b7b1 	.word	0x0000b7b1
    83a0:	0000b6f1 	.word	0x0000b6f1
    83a4:	20006a34 	.word	0x20006a34
    83a8:	0000a009 	.word	0x0000a009
    83ac:	200069fc 	.word	0x200069fc
    83b0:	0000a0c1 	.word	0x0000a0c1

000083b4 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    83b4:	b580      	push	{r7, lr}
    83b6:	b082      	sub	sp, #8
    83b8:	af00      	add	r7, sp, #0
    83ba:	1c02      	adds	r2, r0, #0
    83bc:	1dfb      	adds	r3, r7, #7
    83be:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    83c0:	4a04      	ldr	r2, [pc, #16]	; (83d4 <udd_set_address+0x20>)
    83c2:	1dfb      	adds	r3, r7, #7
    83c4:	781b      	ldrb	r3, [r3, #0]
    83c6:	1c10      	adds	r0, r2, #0
    83c8:	1c19      	adds	r1, r3, #0
    83ca:	4b03      	ldr	r3, [pc, #12]	; (83d8 <udd_set_address+0x24>)
    83cc:	4798      	blx	r3
}
    83ce:	46bd      	mov	sp, r7
    83d0:	b002      	add	sp, #8
    83d2:	bd80      	pop	{r7, pc}
    83d4:	20006a34 	.word	0x20006a34
    83d8:	000075b5 	.word	0x000075b5

000083dc <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    83dc:	b580      	push	{r7, lr}
    83de:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    83e0:	4b03      	ldr	r3, [pc, #12]	; (83f0 <udd_getaddress+0x14>)
    83e2:	1c18      	adds	r0, r3, #0
    83e4:	4b03      	ldr	r3, [pc, #12]	; (83f4 <udd_getaddress+0x18>)
    83e6:	4798      	blx	r3
    83e8:	1c03      	adds	r3, r0, #0
}
    83ea:	1c18      	adds	r0, r3, #0
    83ec:	46bd      	mov	sp, r7
    83ee:	bd80      	pop	{r7, pc}
    83f0:	20006a34 	.word	0x20006a34
    83f4:	00007599 	.word	0x00007599

000083f8 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
	uint32_t try = 5;
    83fe:	2305      	movs	r3, #5
    8400:	607b      	str	r3, [r7, #4]
	udd_wait_clock_ready();
    8402:	4b0c      	ldr	r3, [pc, #48]	; (8434 <udd_send_remotewakeup+0x3c>)
    8404:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_IDLE);
    8406:	2003      	movs	r0, #3
    8408:	4b0b      	ldr	r3, [pc, #44]	; (8438 <udd_send_remotewakeup+0x40>)
    840a:	4798      	blx	r3
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    840c:	e003      	b.n	8416 <udd_send_remotewakeup+0x1e>
		usb_device_send_remote_wake_up(&usb_device);
    840e:	4b0b      	ldr	r3, [pc, #44]	; (843c <udd_send_remotewakeup+0x44>)
    8410:	1c18      	adds	r0, r3, #0
    8412:	4b0b      	ldr	r3, [pc, #44]	; (8440 <udd_send_remotewakeup+0x48>)
    8414:	4798      	blx	r3
void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    8416:	4b09      	ldr	r3, [pc, #36]	; (843c <udd_send_remotewakeup+0x44>)
    8418:	1c18      	adds	r0, r3, #0
    841a:	4b0a      	ldr	r3, [pc, #40]	; (8444 <udd_send_remotewakeup+0x4c>)
    841c:	4798      	blx	r3
    841e:	1c03      	adds	r3, r0, #0
    8420:	2b02      	cmp	r3, #2
    8422:	d004      	beq.n	842e <udd_send_remotewakeup+0x36>
    8424:	687b      	ldr	r3, [r7, #4]
    8426:	1e5a      	subs	r2, r3, #1
    8428:	607a      	str	r2, [r7, #4]
    842a:	2b00      	cmp	r3, #0
    842c:	d1ef      	bne.n	840e <udd_send_remotewakeup+0x16>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    842e:	46bd      	mov	sp, r7
    8430:	b002      	add	sp, #8
    8432:	bd80      	pop	{r7, pc}
    8434:	00007775 	.word	0x00007775
    8438:	000077ad 	.word	0x000077ad
    843c:	20006a34 	.word	0x20006a34
    8440:	00007615 	.word	0x00007615
    8444:	00007539 	.word	0x00007539

00008448 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    8448:	b580      	push	{r7, lr}
    844a:	b082      	sub	sp, #8
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
    8450:	1c0a      	adds	r2, r1, #0
    8452:	1cbb      	adds	r3, r7, #2
    8454:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    8456:	4b05      	ldr	r3, [pc, #20]	; (846c <udd_set_setup_payload+0x24>)
    8458:	687a      	ldr	r2, [r7, #4]
    845a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    845c:	4b03      	ldr	r3, [pc, #12]	; (846c <udd_set_setup_payload+0x24>)
    845e:	1cba      	adds	r2, r7, #2
    8460:	8812      	ldrh	r2, [r2, #0]
    8462:	819a      	strh	r2, [r3, #12]
}
    8464:	46bd      	mov	sp, r7
    8466:	b002      	add	sp, #8
    8468:	bd80      	pop	{r7, pc}
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	20006b9c 	.word	0x20006b9c

00008470 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    8470:	b580      	push	{r7, lr}
    8472:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    8474:	4b13      	ldr	r3, [pc, #76]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    8476:	781a      	ldrb	r2, [r3, #0]
    8478:	4b13      	ldr	r3, [pc, #76]	; (84c8 <udd_ctrl_fetch_ram+0x58>)
    847a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    847c:	4b11      	ldr	r3, [pc, #68]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    847e:	785a      	ldrb	r2, [r3, #1]
    8480:	4b11      	ldr	r3, [pc, #68]	; (84c8 <udd_ctrl_fetch_ram+0x58>)
    8482:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    8484:	4b0f      	ldr	r3, [pc, #60]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    8486:	78db      	ldrb	r3, [r3, #3]
    8488:	021b      	lsls	r3, r3, #8
    848a:	b29a      	uxth	r2, r3
    848c:	4b0d      	ldr	r3, [pc, #52]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    848e:	789b      	ldrb	r3, [r3, #2]
    8490:	18d3      	adds	r3, r2, r3
    8492:	b29a      	uxth	r2, r3
    8494:	4b0c      	ldr	r3, [pc, #48]	; (84c8 <udd_ctrl_fetch_ram+0x58>)
    8496:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    8498:	4b0a      	ldr	r3, [pc, #40]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    849a:	795b      	ldrb	r3, [r3, #5]
    849c:	021b      	lsls	r3, r3, #8
    849e:	b29a      	uxth	r2, r3
    84a0:	4b08      	ldr	r3, [pc, #32]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    84a2:	791b      	ldrb	r3, [r3, #4]
    84a4:	18d3      	adds	r3, r2, r3
    84a6:	b29a      	uxth	r2, r3
    84a8:	4b07      	ldr	r3, [pc, #28]	; (84c8 <udd_ctrl_fetch_ram+0x58>)
    84aa:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    84ac:	4b05      	ldr	r3, [pc, #20]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    84ae:	79db      	ldrb	r3, [r3, #7]
    84b0:	021b      	lsls	r3, r3, #8
    84b2:	b29a      	uxth	r2, r3
    84b4:	4b03      	ldr	r3, [pc, #12]	; (84c4 <udd_ctrl_fetch_ram+0x54>)
    84b6:	799b      	ldrb	r3, [r3, #6]
    84b8:	18d3      	adds	r3, r2, r3
    84ba:	b29a      	uxth	r2, r3
    84bc:	4b02      	ldr	r3, [pc, #8]	; (84c8 <udd_ctrl_fetch_ram+0x58>)
    84be:	80da      	strh	r2, [r3, #6]
}
    84c0:	46bd      	mov	sp, r7
    84c2:	bd80      	pop	{r7, pc}
    84c4:	20006bb4 	.word	0x20006bb4
    84c8:	20006b9c 	.word	0x20006b9c

000084cc <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    84cc:	b598      	push	{r3, r4, r7, lr}
    84ce:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    84d0:	4b09      	ldr	r3, [pc, #36]	; (84f8 <udd_ctrl_send_zlp_in+0x2c>)
    84d2:	2203      	movs	r2, #3
    84d4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    84d6:	4a09      	ldr	r2, [pc, #36]	; (84fc <udd_ctrl_send_zlp_in+0x30>)
    84d8:	4b09      	ldr	r3, [pc, #36]	; (8500 <udd_ctrl_send_zlp_in+0x34>)
    84da:	1c10      	adds	r0, r2, #0
    84dc:	1c19      	adds	r1, r3, #0
    84de:	4b09      	ldr	r3, [pc, #36]	; (8504 <udd_ctrl_send_zlp_in+0x38>)
    84e0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    84e2:	4b09      	ldr	r3, [pc, #36]	; (8508 <udd_ctrl_send_zlp_in+0x3c>)
    84e4:	689b      	ldr	r3, [r3, #8]
    84e6:	4a05      	ldr	r2, [pc, #20]	; (84fc <udd_ctrl_send_zlp_in+0x30>)
    84e8:	1c10      	adds	r0, r2, #0
    84ea:	2100      	movs	r1, #0
    84ec:	1c1a      	adds	r2, r3, #0
    84ee:	2300      	movs	r3, #0
    84f0:	4c06      	ldr	r4, [pc, #24]	; (850c <udd_ctrl_send_zlp_in+0x40>)
    84f2:	47a0      	blx	r4
}
    84f4:	46bd      	mov	sp, r7
    84f6:	bd98      	pop	{r3, r4, r7, pc}
    84f8:	20004050 	.word	0x20004050
    84fc:	20006a34 	.word	0x20006a34
    8500:	20006bb4 	.word	0x20006bb4
    8504:	0000a16d 	.word	0x0000a16d
    8508:	20006b9c 	.word	0x20006b9c
    850c:	0000a009 	.word	0x0000a009

00008510 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    8510:	b590      	push	{r4, r7, lr}
    8512:	b083      	sub	sp, #12
    8514:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    8516:	4b30      	ldr	r3, [pc, #192]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    8518:	8999      	ldrh	r1, [r3, #12]
    851a:	4b30      	ldr	r3, [pc, #192]	; (85dc <udd_ctrl_in_sent+0xcc>)
    851c:	881a      	ldrh	r2, [r3, #0]
    851e:	1dbb      	adds	r3, r7, #6
    8520:	1a8a      	subs	r2, r1, r2
    8522:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    8524:	1dbb      	adds	r3, r7, #6
    8526:	881b      	ldrh	r3, [r3, #0]
    8528:	2b00      	cmp	r3, #0
    852a:	d12f      	bne.n	858c <udd_ctrl_in_sent+0x7c>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    852c:	4b2c      	ldr	r3, [pc, #176]	; (85e0 <udd_ctrl_in_sent+0xd0>)
    852e:	881a      	ldrh	r2, [r3, #0]
    8530:	4b2a      	ldr	r3, [pc, #168]	; (85dc <udd_ctrl_in_sent+0xcc>)
    8532:	881b      	ldrh	r3, [r3, #0]
    8534:	18d3      	adds	r3, r2, r3
    8536:	b29a      	uxth	r2, r3
    8538:	4b29      	ldr	r3, [pc, #164]	; (85e0 <udd_ctrl_in_sent+0xd0>)
    853a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    853c:	4b26      	ldr	r3, [pc, #152]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    853e:	88da      	ldrh	r2, [r3, #6]
    8540:	4b27      	ldr	r3, [pc, #156]	; (85e0 <udd_ctrl_in_sent+0xd0>)
    8542:	881b      	ldrh	r3, [r3, #0]
    8544:	429a      	cmp	r2, r3
    8546:	d003      	beq.n	8550 <udd_ctrl_in_sent+0x40>
    8548:	4b26      	ldr	r3, [pc, #152]	; (85e4 <udd_ctrl_in_sent+0xd4>)
    854a:	781b      	ldrb	r3, [r3, #0]
    854c:	2b00      	cmp	r3, #0
    854e:	d009      	beq.n	8564 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    8550:	4b25      	ldr	r3, [pc, #148]	; (85e8 <udd_ctrl_in_sent+0xd8>)
    8552:	2204      	movs	r2, #4
    8554:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    8556:	4a25      	ldr	r2, [pc, #148]	; (85ec <udd_ctrl_in_sent+0xdc>)
    8558:	4b25      	ldr	r3, [pc, #148]	; (85f0 <udd_ctrl_in_sent+0xe0>)
    855a:	1c10      	adds	r0, r2, #0
    855c:	1c19      	adds	r1, r3, #0
    855e:	4b25      	ldr	r3, [pc, #148]	; (85f4 <udd_ctrl_in_sent+0xe4>)
    8560:	4798      	blx	r3
			return;
    8562:	e035      	b.n	85d0 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    8564:	4b1c      	ldr	r3, [pc, #112]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    8566:	695b      	ldr	r3, [r3, #20]
    8568:	2b00      	cmp	r3, #0
    856a:	d00f      	beq.n	858c <udd_ctrl_in_sent+0x7c>
    856c:	4b1a      	ldr	r3, [pc, #104]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    856e:	695b      	ldr	r3, [r3, #20]
    8570:	4798      	blx	r3
    8572:	1c03      	adds	r3, r0, #0
    8574:	2201      	movs	r2, #1
    8576:	4053      	eors	r3, r2
    8578:	b2db      	uxtb	r3, r3
    857a:	2b00      	cmp	r3, #0
    857c:	d106      	bne.n	858c <udd_ctrl_in_sent+0x7c>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    857e:	4b17      	ldr	r3, [pc, #92]	; (85dc <udd_ctrl_in_sent+0xcc>)
    8580:	2200      	movs	r2, #0
    8582:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    8584:	1dbb      	adds	r3, r7, #6
    8586:	4a14      	ldr	r2, [pc, #80]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    8588:	8992      	ldrh	r2, [r2, #12]
    858a:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    858c:	1dbb      	adds	r3, r7, #6
    858e:	881b      	ldrh	r3, [r3, #0]
    8590:	2b3f      	cmp	r3, #63	; 0x3f
    8592:	d906      	bls.n	85a2 <udd_ctrl_in_sent+0x92>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    8594:	1dbb      	adds	r3, r7, #6
    8596:	2240      	movs	r2, #64	; 0x40
    8598:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    859a:	4b12      	ldr	r3, [pc, #72]	; (85e4 <udd_ctrl_in_sent+0xd4>)
    859c:	2200      	movs	r2, #0
    859e:	701a      	strb	r2, [r3, #0]
    85a0:	e002      	b.n	85a8 <udd_ctrl_in_sent+0x98>
	} else {
		b_shortpacket = true;
    85a2:	4b10      	ldr	r3, [pc, #64]	; (85e4 <udd_ctrl_in_sent+0xd4>)
    85a4:	2201      	movs	r2, #1
    85a6:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    85a8:	4b0b      	ldr	r3, [pc, #44]	; (85d8 <udd_ctrl_in_sent+0xc8>)
    85aa:	689a      	ldr	r2, [r3, #8]
    85ac:	4b0b      	ldr	r3, [pc, #44]	; (85dc <udd_ctrl_in_sent+0xcc>)
    85ae:	881b      	ldrh	r3, [r3, #0]
    85b0:	18d2      	adds	r2, r2, r3
    85b2:	1dbb      	adds	r3, r7, #6
    85b4:	881b      	ldrh	r3, [r3, #0]
    85b6:	490d      	ldr	r1, [pc, #52]	; (85ec <udd_ctrl_in_sent+0xdc>)
    85b8:	1c08      	adds	r0, r1, #0
    85ba:	2100      	movs	r1, #0
    85bc:	4c0e      	ldr	r4, [pc, #56]	; (85f8 <udd_ctrl_in_sent+0xe8>)
    85be:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    85c0:	4b06      	ldr	r3, [pc, #24]	; (85dc <udd_ctrl_in_sent+0xcc>)
    85c2:	881a      	ldrh	r2, [r3, #0]
    85c4:	1dbb      	adds	r3, r7, #6
    85c6:	881b      	ldrh	r3, [r3, #0]
    85c8:	18d3      	adds	r3, r2, r3
    85ca:	b29a      	uxth	r2, r3
    85cc:	4b03      	ldr	r3, [pc, #12]	; (85dc <udd_ctrl_in_sent+0xcc>)
    85ce:	801a      	strh	r2, [r3, #0]
}
    85d0:	46bd      	mov	sp, r7
    85d2:	b003      	add	sp, #12
    85d4:	bd90      	pop	{r4, r7, pc}
    85d6:	46c0      	nop			; (mov r8, r8)
    85d8:	20006b9c 	.word	0x20006b9c
    85dc:	20004054 	.word	0x20004054
    85e0:	20004052 	.word	0x20004052
    85e4:	20004171 	.word	0x20004171
    85e8:	20004050 	.word	0x20004050
    85ec:	20006a34 	.word	0x20006a34
    85f0:	20006bb4 	.word	0x20006bb4
    85f4:	0000a16d 	.word	0x0000a16d
    85f8:	0000a009 	.word	0x0000a009

000085fc <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    85fc:	b590      	push	{r4, r7, lr}
    85fe:	b085      	sub	sp, #20
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8604:	687b      	ldr	r3, [r7, #4]
    8606:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    8608:	1c3b      	adds	r3, r7, #0
    860a:	330e      	adds	r3, #14
    860c:	68ba      	ldr	r2, [r7, #8]
    860e:	8812      	ldrh	r2, [r2, #0]
    8610:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    8612:	4b46      	ldr	r3, [pc, #280]	; (872c <udd_ctrl_out_received+0x130>)
    8614:	899b      	ldrh	r3, [r3, #12]
    8616:	1c1a      	adds	r2, r3, #0
    8618:	4b45      	ldr	r3, [pc, #276]	; (8730 <udd_ctrl_out_received+0x134>)
    861a:	881b      	ldrh	r3, [r3, #0]
    861c:	1c19      	adds	r1, r3, #0
    861e:	1c3b      	adds	r3, r7, #0
    8620:	330e      	adds	r3, #14
    8622:	881b      	ldrh	r3, [r3, #0]
    8624:	18cb      	adds	r3, r1, r3
    8626:	429a      	cmp	r2, r3
    8628:	da07      	bge.n	863a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    862a:	4b40      	ldr	r3, [pc, #256]	; (872c <udd_ctrl_out_received+0x130>)
    862c:	8999      	ldrh	r1, [r3, #12]
    862e:	4b40      	ldr	r3, [pc, #256]	; (8730 <udd_ctrl_out_received+0x134>)
    8630:	881a      	ldrh	r2, [r3, #0]
    8632:	1c3b      	adds	r3, r7, #0
    8634:	330e      	adds	r3, #14
    8636:	1a8a      	subs	r2, r1, r2
    8638:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    863a:	4b3c      	ldr	r3, [pc, #240]	; (872c <udd_ctrl_out_received+0x130>)
    863c:	689a      	ldr	r2, [r3, #8]
    863e:	4b3c      	ldr	r3, [pc, #240]	; (8730 <udd_ctrl_out_received+0x134>)
    8640:	881b      	ldrh	r3, [r3, #0]
    8642:	18d1      	adds	r1, r2, r3
    8644:	1c3b      	adds	r3, r7, #0
    8646:	330e      	adds	r3, #14
    8648:	881b      	ldrh	r3, [r3, #0]
    864a:	4a3a      	ldr	r2, [pc, #232]	; (8734 <udd_ctrl_out_received+0x138>)
    864c:	1c08      	adds	r0, r1, #0
    864e:	1c11      	adds	r1, r2, #0
    8650:	1c1a      	adds	r2, r3, #0
    8652:	4b39      	ldr	r3, [pc, #228]	; (8738 <udd_ctrl_out_received+0x13c>)
    8654:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    8656:	4b36      	ldr	r3, [pc, #216]	; (8730 <udd_ctrl_out_received+0x134>)
    8658:	881a      	ldrh	r2, [r3, #0]
    865a:	1c3b      	adds	r3, r7, #0
    865c:	330e      	adds	r3, #14
    865e:	881b      	ldrh	r3, [r3, #0]
    8660:	18d3      	adds	r3, r2, r3
    8662:	b29a      	uxth	r2, r3
    8664:	4b32      	ldr	r3, [pc, #200]	; (8730 <udd_ctrl_out_received+0x134>)
    8666:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    8668:	1c3b      	adds	r3, r7, #0
    866a:	330e      	adds	r3, #14
    866c:	881b      	ldrh	r3, [r3, #0]
    866e:	2b40      	cmp	r3, #64	; 0x40
    8670:	d10a      	bne.n	8688 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    8672:	4b2e      	ldr	r3, [pc, #184]	; (872c <udd_ctrl_out_received+0x130>)
    8674:	88db      	ldrh	r3, [r3, #6]
    8676:	1c1a      	adds	r2, r3, #0
    8678:	4b30      	ldr	r3, [pc, #192]	; (873c <udd_ctrl_out_received+0x140>)
    867a:	881b      	ldrh	r3, [r3, #0]
    867c:	1c19      	adds	r1, r3, #0
    867e:	4b2c      	ldr	r3, [pc, #176]	; (8730 <udd_ctrl_out_received+0x134>)
    8680:	881b      	ldrh	r3, [r3, #0]
    8682:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    8684:	429a      	cmp	r2, r3
    8686:	dc1a      	bgt.n	86be <udd_ctrl_out_received+0xc2>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    8688:	4b29      	ldr	r3, [pc, #164]	; (8730 <udd_ctrl_out_received+0x134>)
    868a:	881a      	ldrh	r2, [r3, #0]
    868c:	4b27      	ldr	r3, [pc, #156]	; (872c <udd_ctrl_out_received+0x130>)
    868e:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    8690:	4b26      	ldr	r3, [pc, #152]	; (872c <udd_ctrl_out_received+0x130>)
    8692:	695b      	ldr	r3, [r3, #20]
    8694:	2b00      	cmp	r3, #0
    8696:	d00f      	beq.n	86b8 <udd_ctrl_out_received+0xbc>
			if (!udd_g_ctrlreq.over_under_run()) {
    8698:	4b24      	ldr	r3, [pc, #144]	; (872c <udd_ctrl_out_received+0x130>)
    869a:	695b      	ldr	r3, [r3, #20]
    869c:	4798      	blx	r3
    869e:	1c03      	adds	r3, r0, #0
    86a0:	2201      	movs	r2, #1
    86a2:	4053      	eors	r3, r2
    86a4:	b2db      	uxtb	r3, r3
    86a6:	2b00      	cmp	r3, #0
    86a8:	d006      	beq.n	86b8 <udd_ctrl_out_received+0xbc>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    86aa:	4b25      	ldr	r3, [pc, #148]	; (8740 <udd_ctrl_out_received+0x144>)
    86ac:	2205      	movs	r2, #5
    86ae:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    86b0:	2000      	movs	r0, #0
    86b2:	4b24      	ldr	r3, [pc, #144]	; (8744 <udd_ctrl_out_received+0x148>)
    86b4:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    86b6:	e036      	b.n	8726 <udd_ctrl_out_received+0x12a>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    86b8:	4b23      	ldr	r3, [pc, #140]	; (8748 <udd_ctrl_out_received+0x14c>)
    86ba:	4798      	blx	r3
		return;
    86bc:	e033      	b.n	8726 <udd_ctrl_out_received+0x12a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    86be:	4b1b      	ldr	r3, [pc, #108]	; (872c <udd_ctrl_out_received+0x130>)
    86c0:	899a      	ldrh	r2, [r3, #12]
    86c2:	4b1b      	ldr	r3, [pc, #108]	; (8730 <udd_ctrl_out_received+0x134>)
    86c4:	881b      	ldrh	r3, [r3, #0]
    86c6:	429a      	cmp	r2, r3
    86c8:	d125      	bne.n	8716 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    86ca:	4b18      	ldr	r3, [pc, #96]	; (872c <udd_ctrl_out_received+0x130>)
    86cc:	695b      	ldr	r3, [r3, #20]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d106      	bne.n	86e0 <udd_ctrl_out_received+0xe4>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    86d2:	4b1b      	ldr	r3, [pc, #108]	; (8740 <udd_ctrl_out_received+0x144>)
    86d4:	2205      	movs	r2, #5
    86d6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    86d8:	2000      	movs	r0, #0
    86da:	4b1a      	ldr	r3, [pc, #104]	; (8744 <udd_ctrl_out_received+0x148>)
    86dc:	4798      	blx	r3
			return;
    86de:	e022      	b.n	8726 <udd_ctrl_out_received+0x12a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    86e0:	4b12      	ldr	r3, [pc, #72]	; (872c <udd_ctrl_out_received+0x130>)
    86e2:	695b      	ldr	r3, [r3, #20]
    86e4:	4798      	blx	r3
    86e6:	1c03      	adds	r3, r0, #0
    86e8:	2201      	movs	r2, #1
    86ea:	4053      	eors	r3, r2
    86ec:	b2db      	uxtb	r3, r3
    86ee:	2b00      	cmp	r3, #0
    86f0:	d006      	beq.n	8700 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    86f2:	4b13      	ldr	r3, [pc, #76]	; (8740 <udd_ctrl_out_received+0x144>)
    86f4:	2205      	movs	r2, #5
    86f6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    86f8:	2000      	movs	r0, #0
    86fa:	4b12      	ldr	r3, [pc, #72]	; (8744 <udd_ctrl_out_received+0x148>)
    86fc:	4798      	blx	r3
			return;
    86fe:	e012      	b.n	8726 <udd_ctrl_out_received+0x12a>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    8700:	4b0e      	ldr	r3, [pc, #56]	; (873c <udd_ctrl_out_received+0x140>)
    8702:	881a      	ldrh	r2, [r3, #0]
    8704:	4b0a      	ldr	r3, [pc, #40]	; (8730 <udd_ctrl_out_received+0x134>)
    8706:	881b      	ldrh	r3, [r3, #0]
    8708:	18d3      	adds	r3, r2, r3
    870a:	b29a      	uxth	r2, r3
    870c:	4b0b      	ldr	r3, [pc, #44]	; (873c <udd_ctrl_out_received+0x140>)
    870e:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    8710:	4b07      	ldr	r3, [pc, #28]	; (8730 <udd_ctrl_out_received+0x134>)
    8712:	2200      	movs	r2, #0
    8714:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    8716:	4a0d      	ldr	r2, [pc, #52]	; (874c <udd_ctrl_out_received+0x150>)
    8718:	4b06      	ldr	r3, [pc, #24]	; (8734 <udd_ctrl_out_received+0x138>)
    871a:	1c10      	adds	r0, r2, #0
    871c:	2100      	movs	r1, #0
    871e:	1c1a      	adds	r2, r3, #0
    8720:	2340      	movs	r3, #64	; 0x40
    8722:	4c0b      	ldr	r4, [pc, #44]	; (8750 <udd_ctrl_out_received+0x154>)
    8724:	47a0      	blx	r4
}
    8726:	46bd      	mov	sp, r7
    8728:	b005      	add	sp, #20
    872a:	bd90      	pop	{r4, r7, pc}
    872c:	20006b9c 	.word	0x20006b9c
    8730:	20004054 	.word	0x20004054
    8734:	20006bb4 	.word	0x20006bb4
    8738:	0000b899 	.word	0x0000b899
    873c:	20004052 	.word	0x20004052
    8740:	20004050 	.word	0x20004050
    8744:	00007f29 	.word	0x00007f29
    8748:	000084cd 	.word	0x000084cd
    874c:	20006a34 	.word	0x20006a34
    8750:	0000a0c1 	.word	0x0000a0c1

00008754 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    8754:	b590      	push	{r4, r7, lr}
    8756:	b085      	sub	sp, #20
    8758:	af00      	add	r7, sp, #0
    875a:	6078      	str	r0, [r7, #4]
    875c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    875e:	683b      	ldr	r3, [r7, #0]
    8760:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    8762:	4b2b      	ldr	r3, [pc, #172]	; (8810 <_usb_ep0_on_setup+0xbc>)
    8764:	781b      	ldrb	r3, [r3, #0]
    8766:	2b00      	cmp	r3, #0
    8768:	d009      	beq.n	877e <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    876a:	4b2a      	ldr	r3, [pc, #168]	; (8814 <_usb_ep0_on_setup+0xc0>)
    876c:	691b      	ldr	r3, [r3, #16]
    876e:	2b00      	cmp	r3, #0
    8770:	d002      	beq.n	8778 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    8772:	4b28      	ldr	r3, [pc, #160]	; (8814 <_usb_ep0_on_setup+0xc0>)
    8774:	691b      	ldr	r3, [r3, #16]
    8776:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    8778:	4b25      	ldr	r3, [pc, #148]	; (8810 <_usb_ep0_on_setup+0xbc>)
    877a:	2200      	movs	r2, #0
    877c:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    877e:	68fb      	ldr	r3, [r7, #12]
    8780:	881b      	ldrh	r3, [r3, #0]
    8782:	2b08      	cmp	r3, #8
    8784:	d002      	beq.n	878c <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    8786:	4b24      	ldr	r3, [pc, #144]	; (8818 <_usb_ep0_on_setup+0xc4>)
    8788:	4798      	blx	r3
		return;
    878a:	e03e      	b.n	880a <_usb_ep0_on_setup+0xb6>
	} else {
		udd_ctrl_fetch_ram();
    878c:	4b23      	ldr	r3, [pc, #140]	; (881c <_usb_ep0_on_setup+0xc8>)
    878e:	4798      	blx	r3
		if (false == udc_process_setup()) {
    8790:	4b23      	ldr	r3, [pc, #140]	; (8820 <_usb_ep0_on_setup+0xcc>)
    8792:	4798      	blx	r3
    8794:	1c03      	adds	r3, r0, #0
    8796:	2201      	movs	r2, #1
    8798:	4053      	eors	r3, r2
    879a:	b2db      	uxtb	r3, r3
    879c:	2b00      	cmp	r3, #0
    879e:	d002      	beq.n	87a6 <_usb_ep0_on_setup+0x52>
			udd_ctrl_stall_data();
    87a0:	4b1d      	ldr	r3, [pc, #116]	; (8818 <_usb_ep0_on_setup+0xc4>)
    87a2:	4798      	blx	r3
			return;
    87a4:	e031      	b.n	880a <_usb_ep0_on_setup+0xb6>
		} else if (Udd_setup_is_in()) {
    87a6:	4b1b      	ldr	r3, [pc, #108]	; (8814 <_usb_ep0_on_setup+0xc0>)
    87a8:	781b      	ldrb	r3, [r3, #0]
    87aa:	b2db      	uxtb	r3, r3
    87ac:	b25b      	sxtb	r3, r3
    87ae:	2b00      	cmp	r3, #0
    87b0:	da13      	bge.n	87da <_usb_ep0_on_setup+0x86>
			udd_ctrl_prev_payload_nb_trans = 0;
    87b2:	4b1c      	ldr	r3, [pc, #112]	; (8824 <_usb_ep0_on_setup+0xd0>)
    87b4:	2200      	movs	r2, #0
    87b6:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    87b8:	4b1b      	ldr	r3, [pc, #108]	; (8828 <_usb_ep0_on_setup+0xd4>)
    87ba:	2200      	movs	r2, #0
    87bc:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    87be:	4b14      	ldr	r3, [pc, #80]	; (8810 <_usb_ep0_on_setup+0xbc>)
    87c0:	2202      	movs	r2, #2
    87c2:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    87c4:	4a19      	ldr	r2, [pc, #100]	; (882c <_usb_ep0_on_setup+0xd8>)
    87c6:	4b1a      	ldr	r3, [pc, #104]	; (8830 <_usb_ep0_on_setup+0xdc>)
    87c8:	1c10      	adds	r0, r2, #0
    87ca:	2100      	movs	r1, #0
    87cc:	1c1a      	adds	r2, r3, #0
    87ce:	2340      	movs	r3, #64	; 0x40
    87d0:	4c18      	ldr	r4, [pc, #96]	; (8834 <_usb_ep0_on_setup+0xe0>)
    87d2:	47a0      	blx	r4
			udd_ctrl_in_sent();
    87d4:	4b18      	ldr	r3, [pc, #96]	; (8838 <_usb_ep0_on_setup+0xe4>)
    87d6:	4798      	blx	r3
    87d8:	e017      	b.n	880a <_usb_ep0_on_setup+0xb6>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    87da:	4b0e      	ldr	r3, [pc, #56]	; (8814 <_usb_ep0_on_setup+0xc0>)
    87dc:	88db      	ldrh	r3, [r3, #6]
    87de:	2b00      	cmp	r3, #0
    87e0:	d102      	bne.n	87e8 <_usb_ep0_on_setup+0x94>
				udd_ctrl_send_zlp_in();
    87e2:	4b16      	ldr	r3, [pc, #88]	; (883c <_usb_ep0_on_setup+0xe8>)
    87e4:	4798      	blx	r3
				return;
    87e6:	e010      	b.n	880a <_usb_ep0_on_setup+0xb6>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    87e8:	4b0e      	ldr	r3, [pc, #56]	; (8824 <_usb_ep0_on_setup+0xd0>)
    87ea:	2200      	movs	r2, #0
    87ec:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    87ee:	4b0e      	ldr	r3, [pc, #56]	; (8828 <_usb_ep0_on_setup+0xd4>)
    87f0:	2200      	movs	r2, #0
    87f2:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    87f4:	4b06      	ldr	r3, [pc, #24]	; (8810 <_usb_ep0_on_setup+0xbc>)
    87f6:	2201      	movs	r2, #1
    87f8:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    87fa:	4a0c      	ldr	r2, [pc, #48]	; (882c <_usb_ep0_on_setup+0xd8>)
    87fc:	4b0c      	ldr	r3, [pc, #48]	; (8830 <_usb_ep0_on_setup+0xdc>)
    87fe:	1c10      	adds	r0, r2, #0
    8800:	2100      	movs	r1, #0
    8802:	1c1a      	adds	r2, r3, #0
    8804:	2340      	movs	r3, #64	; 0x40
    8806:	4c0b      	ldr	r4, [pc, #44]	; (8834 <_usb_ep0_on_setup+0xe0>)
    8808:	47a0      	blx	r4
			}
		}
	}
}
    880a:	46bd      	mov	sp, r7
    880c:	b005      	add	sp, #20
    880e:	bd90      	pop	{r4, r7, pc}
    8810:	20004050 	.word	0x20004050
    8814:	20006b9c 	.word	0x20006b9c
    8818:	000080a1 	.word	0x000080a1
    881c:	00008471 	.word	0x00008471
    8820:	00004b39 	.word	0x00004b39
    8824:	20004052 	.word	0x20004052
    8828:	20004054 	.word	0x20004054
    882c:	20006a34 	.word	0x20006a34
    8830:	20006bb4 	.word	0x20006bb4
    8834:	0000a0c1 	.word	0x0000a0c1
    8838:	00008511 	.word	0x00008511
    883c:	000084cd 	.word	0x000084cd

00008840 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    8840:	b580      	push	{r7, lr}
    8842:	b084      	sub	sp, #16
    8844:	af00      	add	r7, sp, #0
    8846:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8848:	687b      	ldr	r3, [r7, #4]
    884a:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    884c:	4b0a      	ldr	r3, [pc, #40]	; (8878 <udd_ctrl_underflow+0x38>)
    884e:	781b      	ldrb	r3, [r3, #0]
    8850:	2b01      	cmp	r3, #1
    8852:	d102      	bne.n	885a <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    8854:	4b09      	ldr	r3, [pc, #36]	; (887c <udd_ctrl_underflow+0x3c>)
    8856:	4798      	blx	r3
    8858:	e00a      	b.n	8870 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    885a:	4b07      	ldr	r3, [pc, #28]	; (8878 <udd_ctrl_underflow+0x38>)
    885c:	781b      	ldrb	r3, [r3, #0]
    885e:	2b04      	cmp	r3, #4
    8860:	d106      	bne.n	8870 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	799b      	ldrb	r3, [r3, #6]
    8866:	4a06      	ldr	r2, [pc, #24]	; (8880 <udd_ctrl_underflow+0x40>)
    8868:	1c10      	adds	r0, r2, #0
    886a:	1c19      	adds	r1, r3, #0
    886c:	4b05      	ldr	r3, [pc, #20]	; (8884 <udd_ctrl_underflow+0x44>)
    886e:	4798      	blx	r3
	}
}
    8870:	46bd      	mov	sp, r7
    8872:	b004      	add	sp, #16
    8874:	bd80      	pop	{r7, pc}
    8876:	46c0      	nop			; (mov r8, r8)
    8878:	20004050 	.word	0x20004050
    887c:	000084cd 	.word	0x000084cd
    8880:	20006a34 	.word	0x20006a34
    8884:	00009e99 	.word	0x00009e99

00008888 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    8888:	b580      	push	{r7, lr}
    888a:	b084      	sub	sp, #16
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    8894:	4b0a      	ldr	r3, [pc, #40]	; (88c0 <udd_ctrl_overflow+0x38>)
    8896:	781b      	ldrb	r3, [r3, #0]
    8898:	2b02      	cmp	r3, #2
    889a:	d103      	bne.n	88a4 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    889c:	4b08      	ldr	r3, [pc, #32]	; (88c0 <udd_ctrl_overflow+0x38>)
    889e:	2204      	movs	r2, #4
    88a0:	701a      	strb	r2, [r3, #0]
    88a2:	e00a      	b.n	88ba <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    88a4:	4b06      	ldr	r3, [pc, #24]	; (88c0 <udd_ctrl_overflow+0x38>)
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	2b03      	cmp	r3, #3
    88aa:	d106      	bne.n	88ba <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    88ac:	68fb      	ldr	r3, [r7, #12]
    88ae:	799b      	ldrb	r3, [r3, #6]
    88b0:	4a04      	ldr	r2, [pc, #16]	; (88c4 <udd_ctrl_overflow+0x3c>)
    88b2:	1c10      	adds	r0, r2, #0
    88b4:	1c19      	adds	r1, r3, #0
    88b6:	4b04      	ldr	r3, [pc, #16]	; (88c8 <udd_ctrl_overflow+0x40>)
    88b8:	4798      	blx	r3
	}
}
    88ba:	46bd      	mov	sp, r7
    88bc:	b004      	add	sp, #16
    88be:	bd80      	pop	{r7, pc}
    88c0:	20004050 	.word	0x20004050
    88c4:	20006a34 	.word	0x20006a34
    88c8:	00009e99 	.word	0x00009e99

000088cc <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    88cc:	b580      	push	{r7, lr}
    88ce:	b084      	sub	sp, #16
    88d0:	af00      	add	r7, sp, #0
    88d2:	6078      	str	r0, [r7, #4]
    88d4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    88d6:	683b      	ldr	r3, [r7, #0]
    88d8:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    88da:	68fb      	ldr	r3, [r7, #12]
    88dc:	799b      	ldrb	r3, [r3, #6]
    88de:	b2db      	uxtb	r3, r3
    88e0:	b25b      	sxtb	r3, r3
    88e2:	2b00      	cmp	r3, #0
    88e4:	da04      	bge.n	88f0 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    88e6:	683b      	ldr	r3, [r7, #0]
    88e8:	1c18      	adds	r0, r3, #0
    88ea:	4b05      	ldr	r3, [pc, #20]	; (8900 <_usb_ep0_on_tansfer_fail+0x34>)
    88ec:	4798      	blx	r3
    88ee:	e003      	b.n	88f8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    88f0:	683b      	ldr	r3, [r7, #0]
    88f2:	1c18      	adds	r0, r3, #0
    88f4:	4b03      	ldr	r3, [pc, #12]	; (8904 <_usb_ep0_on_tansfer_fail+0x38>)
    88f6:	4798      	blx	r3
	}
}
    88f8:	46bd      	mov	sp, r7
    88fa:	b004      	add	sp, #16
    88fc:	bd80      	pop	{r7, pc}
    88fe:	46c0      	nop			; (mov r8, r8)
    8900:	00008841 	.word	0x00008841
    8904:	00008889 	.word	0x00008889

00008908 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    8908:	b580      	push	{r7, lr}
    890a:	b082      	sub	sp, #8
    890c:	af00      	add	r7, sp, #0
    890e:	6078      	str	r0, [r7, #4]
    8910:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    8912:	4b0e      	ldr	r3, [pc, #56]	; (894c <_usb_ep0_on_tansfer_ok+0x44>)
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	2b01      	cmp	r3, #1
    8918:	d104      	bne.n	8924 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    891a:	683b      	ldr	r3, [r7, #0]
    891c:	1c18      	adds	r0, r3, #0
    891e:	4b0c      	ldr	r3, [pc, #48]	; (8950 <_usb_ep0_on_tansfer_ok+0x48>)
    8920:	4798      	blx	r3
    8922:	e010      	b.n	8946 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    8924:	4b09      	ldr	r3, [pc, #36]	; (894c <_usb_ep0_on_tansfer_ok+0x44>)
    8926:	781b      	ldrb	r3, [r3, #0]
    8928:	2b02      	cmp	r3, #2
    892a:	d102      	bne.n	8932 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    892c:	4b09      	ldr	r3, [pc, #36]	; (8954 <_usb_ep0_on_tansfer_ok+0x4c>)
    892e:	4798      	blx	r3
    8930:	e009      	b.n	8946 <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    8932:	4b09      	ldr	r3, [pc, #36]	; (8958 <_usb_ep0_on_tansfer_ok+0x50>)
    8934:	691b      	ldr	r3, [r3, #16]
    8936:	2b00      	cmp	r3, #0
    8938:	d002      	beq.n	8940 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    893a:	4b07      	ldr	r3, [pc, #28]	; (8958 <_usb_ep0_on_tansfer_ok+0x50>)
    893c:	691b      	ldr	r3, [r3, #16]
    893e:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    8940:	4b02      	ldr	r3, [pc, #8]	; (894c <_usb_ep0_on_tansfer_ok+0x44>)
    8942:	2200      	movs	r2, #0
    8944:	701a      	strb	r2, [r3, #0]
		}
}
    8946:	46bd      	mov	sp, r7
    8948:	b002      	add	sp, #8
    894a:	bd80      	pop	{r7, pc}
    894c:	20004050 	.word	0x20004050
    8950:	000085fd 	.word	0x000085fd
    8954:	00008511 	.word	0x00008511
    8958:	20006b9c 	.word	0x20006b9c

0000895c <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    895c:	b590      	push	{r4, r7, lr}
    895e:	b085      	sub	sp, #20
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    8964:	1c3b      	adds	r3, r7, #0
    8966:	330c      	adds	r3, #12
    8968:	1c18      	adds	r0, r3, #0
    896a:	4b22      	ldr	r3, [pc, #136]	; (89f4 <udd_ctrl_ep_enable+0x98>)
    896c:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    896e:	1c3b      	adds	r3, r7, #0
    8970:	330c      	adds	r3, #12
    8972:	2203      	movs	r2, #3
    8974:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    8976:	687a      	ldr	r2, [r7, #4]
    8978:	1c3b      	adds	r3, r7, #0
    897a:	330c      	adds	r3, #12
    897c:	1c10      	adds	r0, r2, #0
    897e:	1c19      	adds	r1, r3, #0
    8980:	4b1d      	ldr	r3, [pc, #116]	; (89f8 <udd_ctrl_ep_enable+0x9c>)
    8982:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    8984:	687a      	ldr	r2, [r7, #4]
    8986:	4b1d      	ldr	r3, [pc, #116]	; (89fc <udd_ctrl_ep_enable+0xa0>)
    8988:	1c10      	adds	r0, r2, #0
    898a:	1c19      	adds	r1, r3, #0
    898c:	4b1c      	ldr	r3, [pc, #112]	; (8a00 <udd_ctrl_ep_enable+0xa4>)
    898e:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    8990:	687a      	ldr	r2, [r7, #4]
    8992:	4b1c      	ldr	r3, [pc, #112]	; (8a04 <udd_ctrl_ep_enable+0xa8>)
    8994:	1c10      	adds	r0, r2, #0
    8996:	2100      	movs	r1, #0
    8998:	2202      	movs	r2, #2
    899a:	4c1b      	ldr	r4, [pc, #108]	; (8a08 <udd_ctrl_ep_enable+0xac>)
    899c:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    899e:	687a      	ldr	r2, [r7, #4]
    89a0:	4b1a      	ldr	r3, [pc, #104]	; (8a0c <udd_ctrl_ep_enable+0xb0>)
    89a2:	1c10      	adds	r0, r2, #0
    89a4:	2100      	movs	r1, #0
    89a6:	2200      	movs	r2, #0
    89a8:	4c17      	ldr	r4, [pc, #92]	; (8a08 <udd_ctrl_ep_enable+0xac>)
    89aa:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    89ac:	687a      	ldr	r2, [r7, #4]
    89ae:	4b18      	ldr	r3, [pc, #96]	; (8a10 <udd_ctrl_ep_enable+0xb4>)
    89b0:	1c10      	adds	r0, r2, #0
    89b2:	2100      	movs	r1, #0
    89b4:	2201      	movs	r2, #1
    89b6:	4c14      	ldr	r4, [pc, #80]	; (8a08 <udd_ctrl_ep_enable+0xac>)
    89b8:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    89ba:	687b      	ldr	r3, [r7, #4]
    89bc:	1c18      	adds	r0, r3, #0
    89be:	2100      	movs	r1, #0
    89c0:	2202      	movs	r2, #2
    89c2:	4b14      	ldr	r3, [pc, #80]	; (8a14 <udd_ctrl_ep_enable+0xb8>)
    89c4:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	1c18      	adds	r0, r3, #0
    89ca:	2100      	movs	r1, #0
    89cc:	2200      	movs	r2, #0
    89ce:	4b11      	ldr	r3, [pc, #68]	; (8a14 <udd_ctrl_ep_enable+0xb8>)
    89d0:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	1c18      	adds	r0, r3, #0
    89d6:	2100      	movs	r1, #0
    89d8:	2201      	movs	r2, #1
    89da:	4b0e      	ldr	r3, [pc, #56]	; (8a14 <udd_ctrl_ep_enable+0xb8>)
    89dc:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	1c18      	adds	r0, r3, #0
    89e2:	2101      	movs	r1, #1
    89e4:	4b0c      	ldr	r3, [pc, #48]	; (8a18 <udd_ctrl_ep_enable+0xbc>)
    89e6:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    89e8:	4b0c      	ldr	r3, [pc, #48]	; (8a1c <udd_ctrl_ep_enable+0xc0>)
    89ea:	2200      	movs	r2, #0
    89ec:	701a      	strb	r2, [r3, #0]
}
    89ee:	46bd      	mov	sp, r7
    89f0:	b005      	add	sp, #20
    89f2:	bd90      	pop	{r4, r7, pc}
    89f4:	00009831 	.word	0x00009831
    89f8:	00009859 	.word	0x00009859
    89fc:	20006bb4 	.word	0x20006bb4
    8a00:	0000a16d 	.word	0x0000a16d
    8a04:	00008755 	.word	0x00008755
    8a08:	00009425 	.word	0x00009425
    8a0c:	00008909 	.word	0x00008909
    8a10:	000088cd 	.word	0x000088cd
    8a14:	00009505 	.word	0x00009505
    8a18:	00007639 	.word	0x00007639
    8a1c:	20004050 	.word	0x20004050

00008a20 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    8a20:	b580      	push	{r7, lr}
    8a22:	b082      	sub	sp, #8
    8a24:	af00      	add	r7, sp, #0
    8a26:	6078      	str	r0, [r7, #4]
    8a28:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8a2a:	4b09      	ldr	r3, [pc, #36]	; (8a50 <_usb_on_suspend+0x30>)
    8a2c:	1c18      	adds	r0, r3, #0
    8a2e:	2104      	movs	r1, #4
    8a30:	4b08      	ldr	r3, [pc, #32]	; (8a54 <_usb_on_suspend+0x34>)
    8a32:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8a34:	4b06      	ldr	r3, [pc, #24]	; (8a50 <_usb_on_suspend+0x30>)
    8a36:	1c18      	adds	r0, r3, #0
    8a38:	2102      	movs	r1, #2
    8a3a:	4b07      	ldr	r3, [pc, #28]	; (8a58 <_usb_on_suspend+0x38>)
    8a3c:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    8a3e:	2001      	movs	r0, #1
    8a40:	4b06      	ldr	r3, [pc, #24]	; (8a5c <_usb_on_suspend+0x3c>)
    8a42:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    8a44:	4b06      	ldr	r3, [pc, #24]	; (8a60 <_usb_on_suspend+0x40>)
    8a46:	4798      	blx	r3
#endif
}
    8a48:	46bd      	mov	sp, r7
    8a4a:	b002      	add	sp, #8
    8a4c:	bd80      	pop	{r7, pc}
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	20006a34 	.word	0x20006a34
    8a54:	000093d1 	.word	0x000093d1
    8a58:	00009375 	.word	0x00009375
    8a5c:	000077ad 	.word	0x000077ad
    8a60:	0000ae29 	.word	0x0000ae29

00008a64 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	b084      	sub	sp, #16
    8a68:	af00      	add	r7, sp, #0
    8a6a:	6078      	str	r0, [r7, #4]
    8a6c:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    8a6e:	683b      	ldr	r3, [r7, #0]
    8a70:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8a72:	4b0a      	ldr	r3, [pc, #40]	; (8a9c <_usb_device_lpm_suspend+0x38>)
    8a74:	1c18      	adds	r0, r3, #0
    8a76:	2106      	movs	r1, #6
    8a78:	4b09      	ldr	r3, [pc, #36]	; (8aa0 <_usb_device_lpm_suspend+0x3c>)
    8a7a:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8a7c:	4b07      	ldr	r3, [pc, #28]	; (8a9c <_usb_device_lpm_suspend+0x38>)
    8a7e:	1c18      	adds	r0, r3, #0
    8a80:	2104      	movs	r1, #4
    8a82:	4b07      	ldr	r3, [pc, #28]	; (8aa0 <_usb_device_lpm_suspend+0x3c>)
    8a84:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8a86:	4b05      	ldr	r3, [pc, #20]	; (8a9c <_usb_device_lpm_suspend+0x38>)
    8a88:	1c18      	adds	r0, r3, #0
    8a8a:	2102      	movs	r1, #2
    8a8c:	4b05      	ldr	r3, [pc, #20]	; (8aa4 <_usb_device_lpm_suspend+0x40>)
    8a8e:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    8a90:	2002      	movs	r0, #2
    8a92:	4b05      	ldr	r3, [pc, #20]	; (8aa8 <_usb_device_lpm_suspend+0x44>)
    8a94:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    8a96:	46bd      	mov	sp, r7
    8a98:	b004      	add	sp, #16
    8a9a:	bd80      	pop	{r7, pc}
    8a9c:	20006a34 	.word	0x20006a34
    8aa0:	000093d1 	.word	0x000093d1
    8aa4:	00009375 	.word	0x00009375
    8aa8:	000077ad 	.word	0x000077ad

00008aac <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    8aac:	b580      	push	{r7, lr}
    8aae:	b082      	sub	sp, #8
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	6078      	str	r0, [r7, #4]
    8ab4:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    8ab6:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <_usb_on_sof_notify+0x18>)
    8ab8:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    8aba:	4b03      	ldr	r3, [pc, #12]	; (8ac8 <_usb_on_sof_notify+0x1c>)
    8abc:	4798      	blx	r3
#endif
}
    8abe:	46bd      	mov	sp, r7
    8ac0:	b002      	add	sp, #8
    8ac2:	bd80      	pop	{r7, pc}
    8ac4:	00004255 	.word	0x00004255
    8ac8:	0000ae49 	.word	0x0000ae49

00008acc <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    8acc:	b580      	push	{r7, lr}
    8ace:	b082      	sub	sp, #8
    8ad0:	af00      	add	r7, sp, #0
    8ad2:	6078      	str	r0, [r7, #4]
    8ad4:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    8ad6:	4b07      	ldr	r3, [pc, #28]	; (8af4 <_usb_on_bus_reset+0x28>)
    8ad8:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	1c18      	adds	r0, r3, #0
    8ade:	2100      	movs	r1, #0
    8ae0:	4b05      	ldr	r3, [pc, #20]	; (8af8 <_usb_on_bus_reset+0x2c>)
    8ae2:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	1c18      	adds	r0, r3, #0
    8ae8:	4b04      	ldr	r3, [pc, #16]	; (8afc <_usb_on_bus_reset+0x30>)
    8aea:	4798      	blx	r3
}
    8aec:	46bd      	mov	sp, r7
    8aee:	b002      	add	sp, #8
    8af0:	bd80      	pop	{r7, pc}
    8af2:	46c0      	nop			; (mov r8, r8)
    8af4:	000041e1 	.word	0x000041e1
    8af8:	000075b5 	.word	0x000075b5
    8afc:	0000895d 	.word	0x0000895d

00008b00 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b082      	sub	sp, #8
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
    8b08:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    8b0a:	4b10      	ldr	r3, [pc, #64]	; (8b4c <_usb_on_wakeup+0x4c>)
    8b0c:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8b0e:	4b10      	ldr	r3, [pc, #64]	; (8b50 <_usb_on_wakeup+0x50>)
    8b10:	1c18      	adds	r0, r3, #0
    8b12:	2102      	movs	r1, #2
    8b14:	4b0f      	ldr	r3, [pc, #60]	; (8b54 <_usb_on_wakeup+0x54>)
    8b16:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8b18:	4b0d      	ldr	r3, [pc, #52]	; (8b50 <_usb_on_wakeup+0x50>)
    8b1a:	1c18      	adds	r0, r3, #0
    8b1c:	2104      	movs	r1, #4
    8b1e:	4b0e      	ldr	r3, [pc, #56]	; (8b58 <_usb_on_wakeup+0x58>)
    8b20:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    8b22:	4a0b      	ldr	r2, [pc, #44]	; (8b50 <_usb_on_wakeup+0x50>)
    8b24:	4b0d      	ldr	r3, [pc, #52]	; (8b5c <_usb_on_wakeup+0x5c>)
    8b26:	1c10      	adds	r0, r2, #0
    8b28:	2106      	movs	r1, #6
    8b2a:	1c1a      	adds	r2, r3, #0
    8b2c:	4b0c      	ldr	r3, [pc, #48]	; (8b60 <_usb_on_wakeup+0x60>)
    8b2e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8b30:	4b07      	ldr	r3, [pc, #28]	; (8b50 <_usb_on_wakeup+0x50>)
    8b32:	1c18      	adds	r0, r3, #0
    8b34:	2106      	movs	r1, #6
    8b36:	4b08      	ldr	r3, [pc, #32]	; (8b58 <_usb_on_wakeup+0x58>)
    8b38:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    8b3a:	2003      	movs	r0, #3
    8b3c:	4b09      	ldr	r3, [pc, #36]	; (8b64 <_usb_on_wakeup+0x64>)
    8b3e:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    8b40:	4b09      	ldr	r3, [pc, #36]	; (8b68 <_usb_on_wakeup+0x68>)
    8b42:	4798      	blx	r3
#endif
}
    8b44:	46bd      	mov	sp, r7
    8b46:	b002      	add	sp, #8
    8b48:	bd80      	pop	{r7, pc}
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	00007775 	.word	0x00007775
    8b50:	20006a34 	.word	0x20006a34
    8b54:	000093d1 	.word	0x000093d1
    8b58:	00009375 	.word	0x00009375
    8b5c:	00008a65 	.word	0x00008a65
    8b60:	00009325 	.word	0x00009325
    8b64:	000077ad 	.word	0x000077ad
    8b68:	0000ae39 	.word	0x0000ae39

00008b6c <udd_detach>:

void udd_detach(void)
{
    8b6c:	b580      	push	{r7, lr}
    8b6e:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    8b70:	4b04      	ldr	r3, [pc, #16]	; (8b84 <udd_detach+0x18>)
    8b72:	1c18      	adds	r0, r3, #0
    8b74:	4b04      	ldr	r3, [pc, #16]	; (8b88 <udd_detach+0x1c>)
    8b76:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    8b78:	2001      	movs	r0, #1
    8b7a:	4b04      	ldr	r3, [pc, #16]	; (8b8c <udd_detach+0x20>)
    8b7c:	4798      	blx	r3
}
    8b7e:	46bd      	mov	sp, r7
    8b80:	bd80      	pop	{r7, pc}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	20006a34 	.word	0x20006a34
    8b88:	00007575 	.word	0x00007575
    8b8c:	000077ad 	.word	0x000077ad

00008b90 <udd_attach>:

void udd_attach(void)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    8b94:	2003      	movs	r0, #3
    8b96:	4b22      	ldr	r3, [pc, #136]	; (8c20 <udd_attach+0x90>)
    8b98:	4798      	blx	r3
	usb_device_attach(&usb_device);
    8b9a:	4b22      	ldr	r3, [pc, #136]	; (8c24 <udd_attach+0x94>)
    8b9c:	1c18      	adds	r0, r3, #0
    8b9e:	4b22      	ldr	r3, [pc, #136]	; (8c28 <udd_attach+0x98>)
    8ba0:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    8ba2:	4a20      	ldr	r2, [pc, #128]	; (8c24 <udd_attach+0x94>)
    8ba4:	4b21      	ldr	r3, [pc, #132]	; (8c2c <udd_attach+0x9c>)
    8ba6:	1c10      	adds	r0, r2, #0
    8ba8:	2104      	movs	r1, #4
    8baa:	1c1a      	adds	r2, r3, #0
    8bac:	4b20      	ldr	r3, [pc, #128]	; (8c30 <udd_attach+0xa0>)
    8bae:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    8bb0:	4a1c      	ldr	r2, [pc, #112]	; (8c24 <udd_attach+0x94>)
    8bb2:	4b20      	ldr	r3, [pc, #128]	; (8c34 <udd_attach+0xa4>)
    8bb4:	1c10      	adds	r0, r2, #0
    8bb6:	2100      	movs	r1, #0
    8bb8:	1c1a      	adds	r2, r3, #0
    8bba:	4b1d      	ldr	r3, [pc, #116]	; (8c30 <udd_attach+0xa0>)
    8bbc:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    8bbe:	4a19      	ldr	r2, [pc, #100]	; (8c24 <udd_attach+0x94>)
    8bc0:	4b1d      	ldr	r3, [pc, #116]	; (8c38 <udd_attach+0xa8>)
    8bc2:	1c10      	adds	r0, r2, #0
    8bc4:	2101      	movs	r1, #1
    8bc6:	1c1a      	adds	r2, r3, #0
    8bc8:	4b19      	ldr	r3, [pc, #100]	; (8c30 <udd_attach+0xa0>)
    8bca:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    8bcc:	4a15      	ldr	r2, [pc, #84]	; (8c24 <udd_attach+0x94>)
    8bce:	4b1b      	ldr	r3, [pc, #108]	; (8c3c <udd_attach+0xac>)
    8bd0:	1c10      	adds	r0, r2, #0
    8bd2:	2102      	movs	r1, #2
    8bd4:	1c1a      	adds	r2, r3, #0
    8bd6:	4b16      	ldr	r3, [pc, #88]	; (8c30 <udd_attach+0xa0>)
    8bd8:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8bda:	4b12      	ldr	r3, [pc, #72]	; (8c24 <udd_attach+0x94>)
    8bdc:	1c18      	adds	r0, r3, #0
    8bde:	2104      	movs	r1, #4
    8be0:	4b17      	ldr	r3, [pc, #92]	; (8c40 <udd_attach+0xb0>)
    8be2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    8be4:	4b0f      	ldr	r3, [pc, #60]	; (8c24 <udd_attach+0x94>)
    8be6:	1c18      	adds	r0, r3, #0
    8be8:	2100      	movs	r1, #0
    8bea:	4b15      	ldr	r3, [pc, #84]	; (8c40 <udd_attach+0xb0>)
    8bec:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    8bee:	4b0d      	ldr	r3, [pc, #52]	; (8c24 <udd_attach+0x94>)
    8bf0:	1c18      	adds	r0, r3, #0
    8bf2:	2101      	movs	r1, #1
    8bf4:	4b12      	ldr	r3, [pc, #72]	; (8c40 <udd_attach+0xb0>)
    8bf6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8bf8:	4b0a      	ldr	r3, [pc, #40]	; (8c24 <udd_attach+0x94>)
    8bfa:	1c18      	adds	r0, r3, #0
    8bfc:	2102      	movs	r1, #2
    8bfe:	4b10      	ldr	r3, [pc, #64]	; (8c40 <udd_attach+0xb0>)
    8c00:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    8c02:	4a08      	ldr	r2, [pc, #32]	; (8c24 <udd_attach+0x94>)
    8c04:	4b0f      	ldr	r3, [pc, #60]	; (8c44 <udd_attach+0xb4>)
    8c06:	1c10      	adds	r0, r2, #0
    8c08:	2106      	movs	r1, #6
    8c0a:	1c1a      	adds	r2, r3, #0
    8c0c:	4b08      	ldr	r3, [pc, #32]	; (8c30 <udd_attach+0xa0>)
    8c0e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8c10:	4b04      	ldr	r3, [pc, #16]	; (8c24 <udd_attach+0x94>)
    8c12:	1c18      	adds	r0, r3, #0
    8c14:	2106      	movs	r1, #6
    8c16:	4b0a      	ldr	r3, [pc, #40]	; (8c40 <udd_attach+0xb0>)
    8c18:	4798      	blx	r3
#endif
}
    8c1a:	46bd      	mov	sp, r7
    8c1c:	bd80      	pop	{r7, pc}
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	000077ad 	.word	0x000077ad
    8c24:	20006a34 	.word	0x20006a34
    8c28:	00007551 	.word	0x00007551
    8c2c:	00008a21 	.word	0x00008a21
    8c30:	00009325 	.word	0x00009325
    8c34:	00008aad 	.word	0x00008aad
    8c38:	00008acd 	.word	0x00008acd
    8c3c:	00008b01 	.word	0x00008b01
    8c40:	00009375 	.word	0x00009375
    8c44:	00008a65 	.word	0x00008a65

00008c48 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    8c4c:	200e      	movs	r0, #14
    8c4e:	2100      	movs	r1, #0
    8c50:	4b09      	ldr	r3, [pc, #36]	; (8c78 <_uhd_vbus_handler+0x30>)
    8c52:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    8c54:	200e      	movs	r0, #14
    8c56:	4b09      	ldr	r3, [pc, #36]	; (8c7c <_uhd_vbus_handler+0x34>)
    8c58:	4798      	blx	r3
    8c5a:	1c03      	adds	r3, r0, #0
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d002      	beq.n	8c66 <_uhd_vbus_handler+0x1e>
		udd_attach();
    8c60:	4b07      	ldr	r3, [pc, #28]	; (8c80 <_uhd_vbus_handler+0x38>)
    8c62:	4798      	blx	r3
    8c64:	e001      	b.n	8c6a <_uhd_vbus_handler+0x22>
	} else {
		udd_detach();
    8c66:	4b07      	ldr	r3, [pc, #28]	; (8c84 <_uhd_vbus_handler+0x3c>)
    8c68:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    8c6a:	200e      	movs	r0, #14
    8c6c:	2100      	movs	r1, #0
    8c6e:	4b06      	ldr	r3, [pc, #24]	; (8c88 <_uhd_vbus_handler+0x40>)
    8c70:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8c72:	46bd      	mov	sp, r7
    8c74:	bd80      	pop	{r7, pc}
    8c76:	46c0      	nop			; (mov r8, r8)
    8c78:	00004f15 	.word	0x00004f15
    8c7c:	00007695 	.word	0x00007695
    8c80:	00008b91 	.word	0x00008b91
    8c84:	00008b6d 	.word	0x00008b6d
    8c88:	00004ecd 	.word	0x00004ecd

00008c8c <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b084      	sub	sp, #16
    8c90:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    8c92:	1d3b      	adds	r3, r7, #4
    8c94:	1c18      	adds	r0, r3, #0
    8c96:	4b13      	ldr	r3, [pc, #76]	; (8ce4 <_usb_vbus_config+0x58>)
    8c98:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    8c9a:	1d3b      	adds	r3, r7, #4
    8c9c:	220e      	movs	r2, #14
    8c9e:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    8ca0:	1d3b      	adds	r3, r7, #4
    8ca2:	2200      	movs	r2, #0
    8ca4:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    8ca6:	1d3b      	adds	r3, r7, #4
    8ca8:	2200      	movs	r2, #0
    8caa:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    8cac:	1d3b      	adds	r3, r7, #4
    8cae:	2203      	movs	r2, #3
    8cb0:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    8cb2:	1d3b      	adds	r3, r7, #4
    8cb4:	2201      	movs	r2, #1
    8cb6:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    8cb8:	200e      	movs	r0, #14
    8cba:	2100      	movs	r1, #0
    8cbc:	4b0a      	ldr	r3, [pc, #40]	; (8ce8 <_usb_vbus_config+0x5c>)
    8cbe:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    8cc0:	1d3b      	adds	r3, r7, #4
    8cc2:	200e      	movs	r0, #14
    8cc4:	1c19      	adds	r1, r3, #0
    8cc6:	4b09      	ldr	r3, [pc, #36]	; (8cec <_usb_vbus_config+0x60>)
    8cc8:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    8cca:	4b09      	ldr	r3, [pc, #36]	; (8cf0 <_usb_vbus_config+0x64>)
    8ccc:	1c18      	adds	r0, r3, #0
    8cce:	210e      	movs	r1, #14
    8cd0:	2200      	movs	r2, #0
    8cd2:	4b08      	ldr	r3, [pc, #32]	; (8cf4 <_usb_vbus_config+0x68>)
    8cd4:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    8cd6:	200e      	movs	r0, #14
    8cd8:	2100      	movs	r1, #0
    8cda:	4b07      	ldr	r3, [pc, #28]	; (8cf8 <_usb_vbus_config+0x6c>)
    8cdc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8cde:	46bd      	mov	sp, r7
    8ce0:	b004      	add	sp, #16
    8ce2:	bd80      	pop	{r7, pc}
    8ce4:	00005259 	.word	0x00005259
    8ce8:	00004f15 	.word	0x00004f15
    8cec:	0000528d 	.word	0x0000528d
    8cf0:	00008c49 	.word	0x00008c49
    8cf4:	00004e71 	.word	0x00004e71
    8cf8:	00004ecd 	.word	0x00004ecd

00008cfc <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b082      	sub	sp, #8
    8d00:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    8d02:	4b16      	ldr	r3, [pc, #88]	; (8d5c <udd_enable+0x60>)
    8d04:	4798      	blx	r3
    8d06:	1c03      	adds	r3, r0, #0
    8d08:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    8d0a:	1c3b      	adds	r3, r7, #0
    8d0c:	1c18      	adds	r0, r3, #0
    8d0e:	4b14      	ldr	r3, [pc, #80]	; (8d60 <udd_enable+0x64>)
    8d10:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    8d12:	1c3b      	adds	r3, r7, #0
    8d14:	2200      	movs	r2, #0
    8d16:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    8d18:	4912      	ldr	r1, [pc, #72]	; (8d64 <udd_enable+0x68>)
    8d1a:	4a13      	ldr	r2, [pc, #76]	; (8d68 <udd_enable+0x6c>)
    8d1c:	1c3b      	adds	r3, r7, #0
    8d1e:	1c08      	adds	r0, r1, #0
    8d20:	1c11      	adds	r1, r2, #0
    8d22:	1c1a      	adds	r2, r3, #0
    8d24:	4b11      	ldr	r3, [pc, #68]	; (8d6c <udd_enable+0x70>)
    8d26:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    8d28:	4b0e      	ldr	r3, [pc, #56]	; (8d64 <udd_enable+0x68>)
    8d2a:	1c18      	adds	r0, r3, #0
    8d2c:	4b10      	ldr	r3, [pc, #64]	; (8d70 <udd_enable+0x74>)
    8d2e:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    8d30:	4b10      	ldr	r3, [pc, #64]	; (8d74 <udd_enable+0x78>)
    8d32:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    8d34:	2001      	movs	r0, #1
    8d36:	4b10      	ldr	r3, [pc, #64]	; (8d78 <udd_enable+0x7c>)
    8d38:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    8d3a:	4b10      	ldr	r3, [pc, #64]	; (8d7c <udd_enable+0x80>)
    8d3c:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    8d3e:	200e      	movs	r0, #14
    8d40:	4b0f      	ldr	r3, [pc, #60]	; (8d80 <udd_enable+0x84>)
    8d42:	4798      	blx	r3
    8d44:	1c03      	adds	r3, r0, #0
    8d46:	2b00      	cmp	r3, #0
    8d48:	d001      	beq.n	8d4e <udd_enable+0x52>
		/* USB Attach */
		_uhd_vbus_handler();
    8d4a:	4b0e      	ldr	r3, [pc, #56]	; (8d84 <udd_enable+0x88>)
    8d4c:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	1c18      	adds	r0, r3, #0
    8d52:	4b0d      	ldr	r3, [pc, #52]	; (8d88 <udd_enable+0x8c>)
    8d54:	4798      	blx	r3
}
    8d56:	46bd      	mov	sp, r7
    8d58:	b002      	add	sp, #8
    8d5a:	bd80      	pop	{r7, pc}
    8d5c:	00007461 	.word	0x00007461
    8d60:	0000a76d 	.word	0x0000a76d
    8d64:	20006a34 	.word	0x20006a34
    8d68:	41005000 	.word	0x41005000
    8d6c:	0000a795 	.word	0x0000a795
    8d70:	0000a70d 	.word	0x0000a70d
    8d74:	00007775 	.word	0x00007775
    8d78:	000077ad 	.word	0x000077ad
    8d7c:	00008c8d 	.word	0x00008c8d
    8d80:	00007695 	.word	0x00007695
    8d84:	00008c49 	.word	0x00008c49
    8d88:	000074a9 	.word	0x000074a9

00008d8c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	2200      	movs	r2, #0
    8d98:	701a      	strb	r2, [r3, #0]
}
    8d9a:	46bd      	mov	sp, r7
    8d9c:	b002      	add	sp, #8
    8d9e:	bd80      	pop	{r7, pc}

00008da0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8da0:	b580      	push	{r7, lr}
    8da2:	b082      	sub	sp, #8
    8da4:	af00      	add	r7, sp, #0
    8da6:	1c02      	adds	r2, r0, #0
    8da8:	6039      	str	r1, [r7, #0]
    8daa:	1dfb      	adds	r3, r7, #7
    8dac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8dae:	1dfb      	adds	r3, r7, #7
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	2b01      	cmp	r3, #1
    8db4:	d00a      	beq.n	8dcc <system_apb_clock_set_mask+0x2c>
    8db6:	2b02      	cmp	r3, #2
    8db8:	d00f      	beq.n	8dda <system_apb_clock_set_mask+0x3a>
    8dba:	2b00      	cmp	r3, #0
    8dbc:	d114      	bne.n	8de8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8dbe:	4b0e      	ldr	r3, [pc, #56]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8dc0:	4a0d      	ldr	r2, [pc, #52]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8dc2:	6991      	ldr	r1, [r2, #24]
    8dc4:	683a      	ldr	r2, [r7, #0]
    8dc6:	430a      	orrs	r2, r1
    8dc8:	619a      	str	r2, [r3, #24]
			break;
    8dca:	e00f      	b.n	8dec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8dcc:	4b0a      	ldr	r3, [pc, #40]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8dce:	4a0a      	ldr	r2, [pc, #40]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8dd0:	69d1      	ldr	r1, [r2, #28]
    8dd2:	683a      	ldr	r2, [r7, #0]
    8dd4:	430a      	orrs	r2, r1
    8dd6:	61da      	str	r2, [r3, #28]
			break;
    8dd8:	e008      	b.n	8dec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8dda:	4b07      	ldr	r3, [pc, #28]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8ddc:	4a06      	ldr	r2, [pc, #24]	; (8df8 <system_apb_clock_set_mask+0x58>)
    8dde:	6a11      	ldr	r1, [r2, #32]
    8de0:	683a      	ldr	r2, [r7, #0]
    8de2:	430a      	orrs	r2, r1
    8de4:	621a      	str	r2, [r3, #32]
			break;
    8de6:	e001      	b.n	8dec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8de8:	2317      	movs	r3, #23
    8dea:	e000      	b.n	8dee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8dec:	2300      	movs	r3, #0
}
    8dee:	1c18      	adds	r0, r3, #0
    8df0:	46bd      	mov	sp, r7
    8df2:	b002      	add	sp, #8
    8df4:	bd80      	pop	{r7, pc}
    8df6:	46c0      	nop			; (mov r8, r8)
    8df8:	40000400 	.word	0x40000400

00008dfc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b082      	sub	sp, #8
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	2280      	movs	r2, #128	; 0x80
    8e08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	2200      	movs	r2, #0
    8e0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	2201      	movs	r2, #1
    8e14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8e16:	687b      	ldr	r3, [r7, #4]
    8e18:	2200      	movs	r2, #0
    8e1a:	70da      	strb	r2, [r3, #3]
}
    8e1c:	46bd      	mov	sp, r7
    8e1e:	b002      	add	sp, #8
    8e20:	bd80      	pop	{r7, pc}
    8e22:	46c0      	nop			; (mov r8, r8)

00008e24 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	af00      	add	r7, sp, #0
    8e2a:	1c02      	adds	r2, r0, #0
    8e2c:	1dfb      	adds	r3, r7, #7
    8e2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e30:	4b06      	ldr	r3, [pc, #24]	; (8e4c <system_interrupt_enable+0x28>)
    8e32:	1dfa      	adds	r2, r7, #7
    8e34:	7812      	ldrb	r2, [r2, #0]
    8e36:	1c11      	adds	r1, r2, #0
    8e38:	221f      	movs	r2, #31
    8e3a:	400a      	ands	r2, r1
    8e3c:	2101      	movs	r1, #1
    8e3e:	1c08      	adds	r0, r1, #0
    8e40:	4090      	lsls	r0, r2
    8e42:	1c02      	adds	r2, r0, #0
    8e44:	601a      	str	r2, [r3, #0]
}
    8e46:	46bd      	mov	sp, r7
    8e48:	b002      	add	sp, #8
    8e4a:	bd80      	pop	{r7, pc}
    8e4c:	e000e100 	.word	0xe000e100

00008e50 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    8e50:	b580      	push	{r7, lr}
    8e52:	b082      	sub	sp, #8
    8e54:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    8e56:	4bbe      	ldr	r3, [pc, #760]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8e58:	681b      	ldr	r3, [r3, #0]
    8e5a:	681b      	ldr	r3, [r3, #0]
    8e5c:	8c1b      	ldrh	r3, [r3, #32]
    8e5e:	b29b      	uxth	r3, r3
    8e60:	1c1a      	adds	r2, r3, #0
    8e62:	4bbc      	ldr	r3, [pc, #752]	; (9154 <_usb_host_interrupt_handler+0x304>)
    8e64:	1c10      	adds	r0, r2, #0
    8e66:	4798      	blx	r3
    8e68:	1c03      	adds	r3, r0, #0
    8e6a:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    8e6c:	687b      	ldr	r3, [r7, #4]
    8e6e:	2b1f      	cmp	r3, #31
    8e70:	d900      	bls.n	8e74 <_usb_host_interrupt_handler+0x24>
    8e72:	e179      	b.n	9168 <_usb_host_interrupt_handler+0x318>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    8e74:	4bb6      	ldr	r3, [pc, #728]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8e76:	681b      	ldr	r3, [r3, #0]
    8e78:	681a      	ldr	r2, [r3, #0]
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	3308      	adds	r3, #8
    8e7e:	015b      	lsls	r3, r3, #5
    8e80:	18d3      	adds	r3, r2, r3
    8e82:	79db      	ldrb	r3, [r3, #7]
    8e84:	b2db      	uxtb	r3, r3
    8e86:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    8e88:	683a      	ldr	r2, [r7, #0]
    8e8a:	2303      	movs	r3, #3
    8e8c:	4013      	ands	r3, r2
    8e8e:	d100      	bne.n	8e92 <_usb_host_interrupt_handler+0x42>
    8e90:	e08a      	b.n	8fa8 <_usb_host_interrupt_handler+0x158>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	2201      	movs	r2, #1
    8e96:	1c11      	adds	r1, r2, #0
    8e98:	4099      	lsls	r1, r3
    8e9a:	1c0b      	adds	r3, r1, #0
    8e9c:	43db      	mvns	r3, r3
    8e9e:	1c1a      	adds	r2, r3, #0
    8ea0:	4bad      	ldr	r3, [pc, #692]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8ea2:	681b      	ldr	r3, [r3, #0]
    8ea4:	401a      	ands	r2, r3
    8ea6:	4bac      	ldr	r3, [pc, #688]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8ea8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8eaa:	4ba9      	ldr	r3, [pc, #676]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8eac:	681b      	ldr	r3, [r3, #0]
    8eae:	681a      	ldr	r2, [r3, #0]
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	3308      	adds	r3, #8
    8eb4:	015b      	lsls	r3, r3, #5
    8eb6:	18d3      	adds	r3, r2, r3
    8eb8:	2203      	movs	r2, #3
    8eba:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8ebc:	4ba4      	ldr	r3, [pc, #656]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8ebe:	6819      	ldr	r1, [r3, #0]
    8ec0:	23a8      	movs	r3, #168	; 0xa8
    8ec2:	687a      	ldr	r2, [r7, #4]
    8ec4:	188a      	adds	r2, r1, r2
    8ec6:	18d3      	adds	r3, r2, r3
    8ec8:	799b      	ldrb	r3, [r3, #6]
    8eca:	1c1a      	adds	r2, r3, #0
    8ecc:	2301      	movs	r3, #1
    8ece:	4013      	ands	r3, r2
    8ed0:	d06a      	beq.n	8fa8 <_usb_host_interrupt_handler+0x158>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	b2da      	uxtb	r2, r3
    8ed6:	4ba1      	ldr	r3, [pc, #644]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8ed8:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    8eda:	4b9d      	ldr	r3, [pc, #628]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8edc:	681b      	ldr	r3, [r3, #0]
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	687a      	ldr	r2, [r7, #4]
    8ee2:	3208      	adds	r2, #8
    8ee4:	0152      	lsls	r2, r2, #5
    8ee6:	5cd2      	ldrb	r2, [r2, r3]
    8ee8:	2303      	movs	r3, #3
    8eea:	4013      	ands	r3, r2
    8eec:	b2db      	uxtb	r3, r3
    8eee:	2b01      	cmp	r3, #1
    8ef0:	d11f      	bne.n	8f32 <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8ef2:	4a9b      	ldr	r2, [pc, #620]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	015b      	lsls	r3, r3, #5
    8ef8:	18d3      	adds	r3, r2, r3
    8efa:	685b      	ldr	r3, [r3, #4]
    8efc:	049b      	lsls	r3, r3, #18
    8efe:	0c9b      	lsrs	r3, r3, #18
    8f00:	b29b      	uxth	r3, r3
    8f02:	1c1a      	adds	r2, r3, #0
    8f04:	4b95      	ldr	r3, [pc, #596]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f06:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8f08:	4a95      	ldr	r2, [pc, #596]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	015b      	lsls	r3, r3, #5
    8f0e:	18d3      	adds	r3, r2, r3
    8f10:	685b      	ldr	r3, [r3, #4]
    8f12:	0b9b      	lsrs	r3, r3, #14
    8f14:	049b      	lsls	r3, r3, #18
    8f16:	0c9b      	lsrs	r3, r3, #18
    8f18:	b29b      	uxth	r3, r3
    8f1a:	1c1a      	adds	r2, r3, #0
    8f1c:	4b8f      	ldr	r3, [pc, #572]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f1e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    8f20:	4a8f      	ldr	r2, [pc, #572]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	015b      	lsls	r3, r3, #5
    8f26:	18d3      	adds	r3, r2, r3
    8f28:	685a      	ldr	r2, [r3, #4]
    8f2a:	0b92      	lsrs	r2, r2, #14
    8f2c:	0392      	lsls	r2, r2, #14
    8f2e:	605a      	str	r2, [r3, #4]
    8f30:	e02d      	b.n	8f8e <_usb_host_interrupt_handler+0x13e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8f32:	4a8b      	ldr	r2, [pc, #556]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	015b      	lsls	r3, r3, #5
    8f38:	18d3      	adds	r3, r2, r3
    8f3a:	685b      	ldr	r3, [r3, #4]
    8f3c:	0b9b      	lsrs	r3, r3, #14
    8f3e:	049b      	lsls	r3, r3, #18
    8f40:	0c9b      	lsrs	r3, r3, #18
    8f42:	b29b      	uxth	r3, r3
    8f44:	1c1a      	adds	r2, r3, #0
    8f46:	4b85      	ldr	r3, [pc, #532]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f48:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8f4a:	4a85      	ldr	r2, [pc, #532]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	015b      	lsls	r3, r3, #5
    8f50:	18d3      	adds	r3, r2, r3
    8f52:	685b      	ldr	r3, [r3, #4]
    8f54:	049b      	lsls	r3, r3, #18
    8f56:	0c9b      	lsrs	r3, r3, #18
    8f58:	b29b      	uxth	r3, r3
    8f5a:	1c1a      	adds	r2, r3, #0
    8f5c:	4b7f      	ldr	r3, [pc, #508]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f5e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    8f60:	4a7f      	ldr	r2, [pc, #508]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	015b      	lsls	r3, r3, #5
    8f66:	18d3      	adds	r3, r2, r3
    8f68:	6859      	ldr	r1, [r3, #4]
    8f6a:	4a7e      	ldr	r2, [pc, #504]	; (9164 <_usb_host_interrupt_handler+0x314>)
    8f6c:	400a      	ands	r2, r1
    8f6e:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    8f70:	4b7a      	ldr	r3, [pc, #488]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f72:	885b      	ldrh	r3, [r3, #2]
    8f74:	2b00      	cmp	r3, #0
    8f76:	d10a      	bne.n	8f8e <_usb_host_interrupt_handler+0x13e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8f78:	4a79      	ldr	r2, [pc, #484]	; (9160 <_usb_host_interrupt_handler+0x310>)
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	015b      	lsls	r3, r3, #5
    8f7e:	18d3      	adds	r3, r2, r3
    8f80:	685b      	ldr	r3, [r3, #4]
    8f82:	049b      	lsls	r3, r3, #18
    8f84:	0c9b      	lsrs	r3, r3, #18
    8f86:	b29b      	uxth	r3, r3
    8f88:	1c1a      	adds	r2, r3, #0
    8f8a:	4b74      	ldr	r3, [pc, #464]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8f8c:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    8f8e:	4b70      	ldr	r3, [pc, #448]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8f90:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    8f92:	687b      	ldr	r3, [r7, #4]
    8f94:	3302      	adds	r3, #2
    8f96:	011b      	lsls	r3, r3, #4
    8f98:	18d3      	adds	r3, r2, r3
    8f9a:	685a      	ldr	r2, [r3, #4]
    8f9c:	4b6c      	ldr	r3, [pc, #432]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8f9e:	6819      	ldr	r1, [r3, #0]
    8fa0:	4b6e      	ldr	r3, [pc, #440]	; (915c <_usb_host_interrupt_handler+0x30c>)
    8fa2:	1c08      	adds	r0, r1, #0
    8fa4:	1c19      	adds	r1, r3, #0
    8fa6:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    8fa8:	683a      	ldr	r2, [r7, #0]
    8faa:	2304      	movs	r3, #4
    8fac:	4013      	ands	r3, r2
    8fae:	d014      	beq.n	8fda <_usb_host_interrupt_handler+0x18a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8fb0:	687b      	ldr	r3, [r7, #4]
    8fb2:	2201      	movs	r2, #1
    8fb4:	1c11      	adds	r1, r2, #0
    8fb6:	4099      	lsls	r1, r3
    8fb8:	1c0b      	adds	r3, r1, #0
    8fba:	43db      	mvns	r3, r3
    8fbc:	1c1a      	adds	r2, r3, #0
    8fbe:	4b66      	ldr	r3, [pc, #408]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8fc0:	681b      	ldr	r3, [r3, #0]
    8fc2:	401a      	ands	r2, r3
    8fc4:	4b64      	ldr	r3, [pc, #400]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8fc6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8fc8:	4b61      	ldr	r3, [pc, #388]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8fca:	681b      	ldr	r3, [r3, #0]
    8fcc:	681a      	ldr	r2, [r3, #0]
    8fce:	687b      	ldr	r3, [r7, #4]
    8fd0:	3308      	adds	r3, #8
    8fd2:	015b      	lsls	r3, r3, #5
    8fd4:	18d3      	adds	r3, r2, r3
    8fd6:	2204      	movs	r2, #4
    8fd8:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    8fda:	683a      	ldr	r2, [r7, #0]
    8fdc:	2308      	movs	r3, #8
    8fde:	4013      	ands	r3, r2
    8fe0:	d03d      	beq.n	905e <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	2201      	movs	r2, #1
    8fe6:	1c11      	adds	r1, r2, #0
    8fe8:	4099      	lsls	r1, r3
    8fea:	1c0b      	adds	r3, r1, #0
    8fec:	43db      	mvns	r3, r3
    8fee:	1c1a      	adds	r2, r3, #0
    8ff0:	4b59      	ldr	r3, [pc, #356]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	401a      	ands	r2, r3
    8ff6:	4b58      	ldr	r3, [pc, #352]	; (9158 <_usb_host_interrupt_handler+0x308>)
    8ff8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8ffa:	4b55      	ldr	r3, [pc, #340]	; (9150 <_usb_host_interrupt_handler+0x300>)
    8ffc:	681b      	ldr	r3, [r3, #0]
    8ffe:	681a      	ldr	r2, [r3, #0]
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	3308      	adds	r3, #8
    9004:	015b      	lsls	r3, r3, #5
    9006:	18d3      	adds	r3, r2, r3
    9008:	2208      	movs	r2, #8
    900a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    900c:	4b50      	ldr	r3, [pc, #320]	; (9150 <_usb_host_interrupt_handler+0x300>)
    900e:	6819      	ldr	r1, [r3, #0]
    9010:	23a8      	movs	r3, #168	; 0xa8
    9012:	687a      	ldr	r2, [r7, #4]
    9014:	188a      	adds	r2, r1, r2
    9016:	18d3      	adds	r3, r2, r3
    9018:	799b      	ldrb	r3, [r3, #6]
    901a:	1c1a      	adds	r2, r3, #0
    901c:	2302      	movs	r3, #2
    901e:	4013      	ands	r3, r2
    9020:	d01d      	beq.n	905e <_usb_host_interrupt_handler+0x20e>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	b2da      	uxtb	r2, r3
    9026:	4b4d      	ldr	r3, [pc, #308]	; (915c <_usb_host_interrupt_handler+0x30c>)
    9028:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    902a:	4a4d      	ldr	r2, [pc, #308]	; (9160 <_usb_host_interrupt_handler+0x310>)
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	015b      	lsls	r3, r3, #5
    9030:	18d3      	adds	r3, r2, r3
    9032:	3308      	adds	r3, #8
    9034:	88db      	ldrh	r3, [r3, #6]
    9036:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    9038:	b2da      	uxtb	r2, r3
    903a:	231f      	movs	r3, #31
    903c:	4013      	ands	r3, r2
    903e:	b2da      	uxtb	r2, r3
    9040:	4b46      	ldr	r3, [pc, #280]	; (915c <_usb_host_interrupt_handler+0x30c>)
    9042:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    9044:	4b42      	ldr	r3, [pc, #264]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9046:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	011b      	lsls	r3, r3, #4
    904c:	18d3      	adds	r3, r2, r3
    904e:	3324      	adds	r3, #36	; 0x24
    9050:	685a      	ldr	r2, [r3, #4]
    9052:	4b3f      	ldr	r3, [pc, #252]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9054:	6819      	ldr	r1, [r3, #0]
    9056:	4b41      	ldr	r3, [pc, #260]	; (915c <_usb_host_interrupt_handler+0x30c>)
    9058:	1c08      	adds	r0, r1, #0
    905a:	1c19      	adds	r1, r3, #0
    905c:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    905e:	683a      	ldr	r2, [r7, #0]
    9060:	2310      	movs	r3, #16
    9062:	4013      	ands	r3, r2
    9064:	d03b      	beq.n	90de <_usb_host_interrupt_handler+0x28e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	2201      	movs	r2, #1
    906a:	1c11      	adds	r1, r2, #0
    906c:	4099      	lsls	r1, r3
    906e:	1c0b      	adds	r3, r1, #0
    9070:	43db      	mvns	r3, r3
    9072:	1c1a      	adds	r2, r3, #0
    9074:	4b38      	ldr	r3, [pc, #224]	; (9158 <_usb_host_interrupt_handler+0x308>)
    9076:	681b      	ldr	r3, [r3, #0]
    9078:	401a      	ands	r2, r3
    907a:	4b37      	ldr	r3, [pc, #220]	; (9158 <_usb_host_interrupt_handler+0x308>)
    907c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    907e:	4b34      	ldr	r3, [pc, #208]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9080:	681b      	ldr	r3, [r3, #0]
    9082:	681a      	ldr	r2, [r3, #0]
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	3308      	adds	r3, #8
    9088:	015b      	lsls	r3, r3, #5
    908a:	18d3      	adds	r3, r2, r3
    908c:	2210      	movs	r2, #16
    908e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    9090:	4b2f      	ldr	r3, [pc, #188]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9092:	6819      	ldr	r1, [r3, #0]
    9094:	23a8      	movs	r3, #168	; 0xa8
    9096:	687a      	ldr	r2, [r7, #4]
    9098:	188a      	adds	r2, r1, r2
    909a:	18d3      	adds	r3, r2, r3
    909c:	799b      	ldrb	r3, [r3, #6]
    909e:	1c1a      	adds	r2, r3, #0
    90a0:	2304      	movs	r3, #4
    90a2:	4013      	ands	r3, r2
    90a4:	d01b      	beq.n	90de <_usb_host_interrupt_handler+0x28e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	b2da      	uxtb	r2, r3
    90aa:	4b2c      	ldr	r3, [pc, #176]	; (915c <_usb_host_interrupt_handler+0x30c>)
    90ac:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    90ae:	4a2c      	ldr	r2, [pc, #176]	; (9160 <_usb_host_interrupt_handler+0x310>)
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	015b      	lsls	r3, r3, #5
    90b4:	18d3      	adds	r3, r2, r3
    90b6:	685b      	ldr	r3, [r3, #4]
    90b8:	0b9b      	lsrs	r3, r3, #14
    90ba:	049b      	lsls	r3, r3, #18
    90bc:	0c9b      	lsrs	r3, r3, #18
    90be:	b29b      	uxth	r3, r3
    90c0:	1c1a      	adds	r2, r3, #0
    90c2:	4b26      	ldr	r3, [pc, #152]	; (915c <_usb_host_interrupt_handler+0x30c>)
    90c4:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    90c6:	4b22      	ldr	r3, [pc, #136]	; (9150 <_usb_host_interrupt_handler+0x300>)
    90c8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	011b      	lsls	r3, r3, #4
    90ce:	18d3      	adds	r3, r2, r3
    90d0:	3328      	adds	r3, #40	; 0x28
    90d2:	685a      	ldr	r2, [r3, #4]
    90d4:	4b1e      	ldr	r3, [pc, #120]	; (9150 <_usb_host_interrupt_handler+0x300>)
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	1c18      	adds	r0, r3, #0
    90da:	2100      	movs	r1, #0
    90dc:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    90de:	683a      	ldr	r2, [r7, #0]
    90e0:	2320      	movs	r3, #32
    90e2:	4013      	ands	r3, r2
    90e4:	d100      	bne.n	90e8 <_usb_host_interrupt_handler+0x298>
    90e6:	e115      	b.n	9314 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	2201      	movs	r2, #1
    90ec:	1c11      	adds	r1, r2, #0
    90ee:	4099      	lsls	r1, r3
    90f0:	1c0b      	adds	r3, r1, #0
    90f2:	43db      	mvns	r3, r3
    90f4:	1c1a      	adds	r2, r3, #0
    90f6:	4b18      	ldr	r3, [pc, #96]	; (9158 <_usb_host_interrupt_handler+0x308>)
    90f8:	681b      	ldr	r3, [r3, #0]
    90fa:	401a      	ands	r2, r3
    90fc:	4b16      	ldr	r3, [pc, #88]	; (9158 <_usb_host_interrupt_handler+0x308>)
    90fe:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    9100:	4b13      	ldr	r3, [pc, #76]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9102:	681b      	ldr	r3, [r3, #0]
    9104:	681a      	ldr	r2, [r3, #0]
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	3308      	adds	r3, #8
    910a:	015b      	lsls	r3, r3, #5
    910c:	18d3      	adds	r3, r2, r3
    910e:	2220      	movs	r2, #32
    9110:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    9112:	4b0f      	ldr	r3, [pc, #60]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9114:	6819      	ldr	r1, [r3, #0]
    9116:	23a8      	movs	r3, #168	; 0xa8
    9118:	687a      	ldr	r2, [r7, #4]
    911a:	188a      	adds	r2, r1, r2
    911c:	18d3      	adds	r3, r2, r3
    911e:	799b      	ldrb	r3, [r3, #6]
    9120:	1c1a      	adds	r2, r3, #0
    9122:	2308      	movs	r3, #8
    9124:	4013      	ands	r3, r2
    9126:	d100      	bne.n	912a <_usb_host_interrupt_handler+0x2da>
    9128:	e0f4      	b.n	9314 <_usb_host_interrupt_handler+0x4c4>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	b2da      	uxtb	r2, r3
    912e:	4b0b      	ldr	r3, [pc, #44]	; (915c <_usb_host_interrupt_handler+0x30c>)
    9130:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    9132:	4b07      	ldr	r3, [pc, #28]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9134:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	011b      	lsls	r3, r3, #4
    913a:	18d3      	adds	r3, r2, r3
    913c:	332c      	adds	r3, #44	; 0x2c
    913e:	685a      	ldr	r2, [r3, #4]
    9140:	4b03      	ldr	r3, [pc, #12]	; (9150 <_usb_host_interrupt_handler+0x300>)
    9142:	6819      	ldr	r1, [r3, #0]
    9144:	4b05      	ldr	r3, [pc, #20]	; (915c <_usb_host_interrupt_handler+0x30c>)
    9146:	1c08      	adds	r0, r1, #0
    9148:	1c19      	adds	r1, r3, #0
    914a:	4790      	blx	r2
    914c:	e0e2      	b.n	9314 <_usb_host_interrupt_handler+0x4c4>
    914e:	46c0      	nop			; (mov r8, r8)
    9150:	20004174 	.word	0x20004174
    9154:	0000b7c9 	.word	0x0000b7c9
    9158:	2000418c 	.word	0x2000418c
    915c:	20004178 	.word	0x20004178
    9160:	20006bf4 	.word	0x20006bf4
    9164:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    9168:	4b6c      	ldr	r3, [pc, #432]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    916a:	681b      	ldr	r3, [r3, #0]
    916c:	681b      	ldr	r3, [r3, #0]
    916e:	8b9b      	ldrh	r3, [r3, #28]
    9170:	b29b      	uxth	r3, r3
    9172:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    9174:	683a      	ldr	r2, [r7, #0]
    9176:	2304      	movs	r3, #4
    9178:	4013      	ands	r3, r2
    917a:	d013      	beq.n	91a4 <_usb_host_interrupt_handler+0x354>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    917c:	4b67      	ldr	r3, [pc, #412]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    917e:	681b      	ldr	r3, [r3, #0]
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	2204      	movs	r2, #4
    9184:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    9186:	4b65      	ldr	r3, [pc, #404]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9188:	681a      	ldr	r2, [r3, #0]
    918a:	23a5      	movs	r3, #165	; 0xa5
    918c:	5cd3      	ldrb	r3, [r2, r3]
    918e:	1c1a      	adds	r2, r3, #0
    9190:	2301      	movs	r3, #1
    9192:	4013      	ands	r3, r2
    9194:	d006      	beq.n	91a4 <_usb_host_interrupt_handler+0x354>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    9196:	4b61      	ldr	r3, [pc, #388]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9198:	681b      	ldr	r3, [r3, #0]
    919a:	685a      	ldr	r2, [r3, #4]
    919c:	4b5f      	ldr	r3, [pc, #380]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    919e:	681b      	ldr	r3, [r3, #0]
    91a0:	1c18      	adds	r0, r3, #0
    91a2:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    91a4:	683a      	ldr	r2, [r7, #0]
    91a6:	2308      	movs	r3, #8
    91a8:	4013      	ands	r3, r2
    91aa:	d016      	beq.n	91da <_usb_host_interrupt_handler+0x38a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    91ac:	4b5c      	ldr	r3, [pc, #368]	; (9320 <_usb_host_interrupt_handler+0x4d0>)
    91ae:	2200      	movs	r2, #0
    91b0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    91b2:	4b5a      	ldr	r3, [pc, #360]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91b4:	681b      	ldr	r3, [r3, #0]
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	2208      	movs	r2, #8
    91ba:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    91bc:	4b57      	ldr	r3, [pc, #348]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91be:	681a      	ldr	r2, [r3, #0]
    91c0:	23a5      	movs	r3, #165	; 0xa5
    91c2:	5cd3      	ldrb	r3, [r2, r3]
    91c4:	1c1a      	adds	r2, r3, #0
    91c6:	2302      	movs	r3, #2
    91c8:	4013      	ands	r3, r2
    91ca:	d006      	beq.n	91da <_usb_host_interrupt_handler+0x38a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    91cc:	4b53      	ldr	r3, [pc, #332]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91ce:	681b      	ldr	r3, [r3, #0]
    91d0:	689a      	ldr	r2, [r3, #8]
    91d2:	4b52      	ldr	r3, [pc, #328]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91d4:	681b      	ldr	r3, [r3, #0]
    91d6:	1c18      	adds	r0, r3, #0
    91d8:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    91da:	683a      	ldr	r2, [r7, #0]
    91dc:	2340      	movs	r3, #64	; 0x40
    91de:	4013      	ands	r3, r2
    91e0:	d013      	beq.n	920a <_usb_host_interrupt_handler+0x3ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    91e2:	4b4e      	ldr	r3, [pc, #312]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91e4:	681b      	ldr	r3, [r3, #0]
    91e6:	681b      	ldr	r3, [r3, #0]
    91e8:	2240      	movs	r2, #64	; 0x40
    91ea:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    91ec:	4b4b      	ldr	r3, [pc, #300]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91ee:	681a      	ldr	r2, [r3, #0]
    91f0:	23a5      	movs	r3, #165	; 0xa5
    91f2:	5cd3      	ldrb	r3, [r2, r3]
    91f4:	1c1a      	adds	r2, r3, #0
    91f6:	2310      	movs	r3, #16
    91f8:	4013      	ands	r3, r2
    91fa:	d006      	beq.n	920a <_usb_host_interrupt_handler+0x3ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    91fc:	4b47      	ldr	r3, [pc, #284]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    91fe:	681b      	ldr	r3, [r3, #0]
    9200:	695a      	ldr	r2, [r3, #20]
    9202:	4b46      	ldr	r3, [pc, #280]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9204:	681b      	ldr	r3, [r3, #0]
    9206:	1c18      	adds	r0, r3, #0
    9208:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    920a:	683a      	ldr	r2, [r7, #0]
    920c:	2320      	movs	r3, #32
    920e:	4013      	ands	r3, r2
    9210:	d013      	beq.n	923a <_usb_host_interrupt_handler+0x3ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    9212:	4b42      	ldr	r3, [pc, #264]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9214:	681b      	ldr	r3, [r3, #0]
    9216:	681b      	ldr	r3, [r3, #0]
    9218:	2220      	movs	r2, #32
    921a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    921c:	4b3f      	ldr	r3, [pc, #252]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    921e:	681a      	ldr	r2, [r3, #0]
    9220:	23a5      	movs	r3, #165	; 0xa5
    9222:	5cd3      	ldrb	r3, [r2, r3]
    9224:	1c1a      	adds	r2, r3, #0
    9226:	2308      	movs	r3, #8
    9228:	4013      	ands	r3, r2
    922a:	d006      	beq.n	923a <_usb_host_interrupt_handler+0x3ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    922c:	4b3b      	ldr	r3, [pc, #236]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    922e:	681b      	ldr	r3, [r3, #0]
    9230:	691a      	ldr	r2, [r3, #16]
    9232:	4b3a      	ldr	r3, [pc, #232]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9234:	681b      	ldr	r3, [r3, #0]
    9236:	1c18      	adds	r0, r3, #0
    9238:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    923a:	683a      	ldr	r2, [r7, #0]
    923c:	2310      	movs	r3, #16
    923e:	4013      	ands	r3, r2
    9240:	d013      	beq.n	926a <_usb_host_interrupt_handler+0x41a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    9242:	4b36      	ldr	r3, [pc, #216]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9244:	681b      	ldr	r3, [r3, #0]
    9246:	681b      	ldr	r3, [r3, #0]
    9248:	2210      	movs	r2, #16
    924a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    924c:	4b33      	ldr	r3, [pc, #204]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    924e:	681a      	ldr	r2, [r3, #0]
    9250:	23a5      	movs	r3, #165	; 0xa5
    9252:	5cd3      	ldrb	r3, [r2, r3]
    9254:	1c1a      	adds	r2, r3, #0
    9256:	2304      	movs	r3, #4
    9258:	4013      	ands	r3, r2
    925a:	d006      	beq.n	926a <_usb_host_interrupt_handler+0x41a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    925c:	4b2f      	ldr	r3, [pc, #188]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    925e:	681b      	ldr	r3, [r3, #0]
    9260:	68da      	ldr	r2, [r3, #12]
    9262:	4b2e      	ldr	r3, [pc, #184]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9264:	681b      	ldr	r3, [r3, #0]
    9266:	1c18      	adds	r0, r3, #0
    9268:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    926a:	683a      	ldr	r2, [r7, #0]
    926c:	2380      	movs	r3, #128	; 0x80
    926e:	4013      	ands	r3, r2
    9270:	d016      	beq.n	92a0 <_usb_host_interrupt_handler+0x450>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    9272:	4b2b      	ldr	r3, [pc, #172]	; (9320 <_usb_host_interrupt_handler+0x4d0>)
    9274:	2200      	movs	r2, #0
    9276:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    9278:	4b28      	ldr	r3, [pc, #160]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    927a:	681b      	ldr	r3, [r3, #0]
    927c:	681b      	ldr	r3, [r3, #0]
    927e:	2280      	movs	r2, #128	; 0x80
    9280:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    9282:	4b26      	ldr	r3, [pc, #152]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9284:	681a      	ldr	r2, [r3, #0]
    9286:	23a5      	movs	r3, #165	; 0xa5
    9288:	5cd3      	ldrb	r3, [r2, r3]
    928a:	1c1a      	adds	r2, r3, #0
    928c:	2320      	movs	r3, #32
    928e:	4013      	ands	r3, r2
    9290:	d006      	beq.n	92a0 <_usb_host_interrupt_handler+0x450>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    9292:	4b22      	ldr	r3, [pc, #136]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9294:	681b      	ldr	r3, [r3, #0]
    9296:	699a      	ldr	r2, [r3, #24]
    9298:	4b20      	ldr	r3, [pc, #128]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    929a:	681b      	ldr	r3, [r3, #0]
    929c:	1c18      	adds	r0, r3, #0
    929e:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    92a0:	683a      	ldr	r2, [r7, #0]
    92a2:	2380      	movs	r3, #128	; 0x80
    92a4:	005b      	lsls	r3, r3, #1
    92a6:	4013      	ands	r3, r2
    92a8:	d017      	beq.n	92da <_usb_host_interrupt_handler+0x48a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    92aa:	4b1d      	ldr	r3, [pc, #116]	; (9320 <_usb_host_interrupt_handler+0x4d0>)
    92ac:	2200      	movs	r2, #0
    92ae:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    92b0:	4b1a      	ldr	r3, [pc, #104]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92b2:	681b      	ldr	r3, [r3, #0]
    92b4:	681b      	ldr	r3, [r3, #0]
    92b6:	2280      	movs	r2, #128	; 0x80
    92b8:	0052      	lsls	r2, r2, #1
    92ba:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    92bc:	4b17      	ldr	r3, [pc, #92]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92be:	681a      	ldr	r2, [r3, #0]
    92c0:	23a5      	movs	r3, #165	; 0xa5
    92c2:	5cd3      	ldrb	r3, [r2, r3]
    92c4:	1c1a      	adds	r2, r3, #0
    92c6:	2340      	movs	r3, #64	; 0x40
    92c8:	4013      	ands	r3, r2
    92ca:	d006      	beq.n	92da <_usb_host_interrupt_handler+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    92cc:	4b13      	ldr	r3, [pc, #76]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92ce:	681b      	ldr	r3, [r3, #0]
    92d0:	69da      	ldr	r2, [r3, #28]
    92d2:	4b12      	ldr	r3, [pc, #72]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92d4:	681b      	ldr	r3, [r3, #0]
    92d6:	1c18      	adds	r0, r3, #0
    92d8:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    92da:	683a      	ldr	r2, [r7, #0]
    92dc:	2380      	movs	r3, #128	; 0x80
    92de:	009b      	lsls	r3, r3, #2
    92e0:	4013      	ands	r3, r2
    92e2:	d017      	beq.n	9314 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    92e4:	4b0e      	ldr	r3, [pc, #56]	; (9320 <_usb_host_interrupt_handler+0x4d0>)
    92e6:	2200      	movs	r2, #0
    92e8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    92ea:	4b0c      	ldr	r3, [pc, #48]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92ec:	681b      	ldr	r3, [r3, #0]
    92ee:	681b      	ldr	r3, [r3, #0]
    92f0:	2280      	movs	r2, #128	; 0x80
    92f2:	0092      	lsls	r2, r2, #2
    92f4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    92f6:	4b09      	ldr	r3, [pc, #36]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    92f8:	681a      	ldr	r2, [r3, #0]
    92fa:	23a5      	movs	r3, #165	; 0xa5
    92fc:	5cd3      	ldrb	r3, [r2, r3]
    92fe:	b2db      	uxtb	r3, r3
    9300:	b25b      	sxtb	r3, r3
    9302:	2b00      	cmp	r3, #0
    9304:	da06      	bge.n	9314 <_usb_host_interrupt_handler+0x4c4>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    9306:	4b05      	ldr	r3, [pc, #20]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    9308:	681b      	ldr	r3, [r3, #0]
    930a:	6a1a      	ldr	r2, [r3, #32]
    930c:	4b03      	ldr	r3, [pc, #12]	; (931c <_usb_host_interrupt_handler+0x4cc>)
    930e:	681b      	ldr	r3, [r3, #0]
    9310:	1c18      	adds	r0, r3, #0
    9312:	4790      	blx	r2
			}
		}

	}
}
    9314:	46bd      	mov	sp, r7
    9316:	b002      	add	sp, #8
    9318:	bd80      	pop	{r7, pc}
    931a:	46c0      	nop			; (mov r8, r8)
    931c:	20004174 	.word	0x20004174
    9320:	2000418c 	.word	0x2000418c

00009324 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    9324:	b580      	push	{r7, lr}
    9326:	b084      	sub	sp, #16
    9328:	af00      	add	r7, sp, #0
    932a:	60f8      	str	r0, [r7, #12]
    932c:	607a      	str	r2, [r7, #4]
    932e:	1c3b      	adds	r3, r7, #0
    9330:	330b      	adds	r3, #11
    9332:	1c0a      	adds	r2, r1, #0
    9334:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    9336:	1c3b      	adds	r3, r7, #0
    9338:	330b      	adds	r3, #11
    933a:	781a      	ldrb	r2, [r3, #0]
    933c:	68fb      	ldr	r3, [r7, #12]
    933e:	322e      	adds	r2, #46	; 0x2e
    9340:	0092      	lsls	r2, r2, #2
    9342:	6879      	ldr	r1, [r7, #4]
    9344:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    9346:	68fa      	ldr	r2, [r7, #12]
    9348:	23aa      	movs	r3, #170	; 0xaa
    934a:	005b      	lsls	r3, r3, #1
    934c:	5ad2      	ldrh	r2, [r2, r3]
    934e:	1c3b      	adds	r3, r7, #0
    9350:	330b      	adds	r3, #11
    9352:	7819      	ldrb	r1, [r3, #0]
    9354:	4b06      	ldr	r3, [pc, #24]	; (9370 <usb_device_register_callback+0x4c>)
    9356:	0049      	lsls	r1, r1, #1
    9358:	5acb      	ldrh	r3, [r1, r3]
    935a:	4313      	orrs	r3, r2
    935c:	b299      	uxth	r1, r3
    935e:	68fa      	ldr	r2, [r7, #12]
    9360:	23aa      	movs	r3, #170	; 0xaa
    9362:	005b      	lsls	r3, r3, #1
    9364:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    9366:	2300      	movs	r3, #0
}
    9368:	1c18      	adds	r0, r3, #0
    936a:	46bd      	mov	sp, r7
    936c:	b004      	add	sp, #16
    936e:	bd80      	pop	{r7, pc}
    9370:	0000bb2c 	.word	0x0000bb2c

00009374 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    9374:	b580      	push	{r7, lr}
    9376:	b082      	sub	sp, #8
    9378:	af00      	add	r7, sp, #0
    937a:	6078      	str	r0, [r7, #4]
    937c:	1c0a      	adds	r2, r1, #0
    937e:	1cfb      	adds	r3, r7, #3
    9380:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	681b      	ldr	r3, [r3, #0]
    9386:	1cfa      	adds	r2, r7, #3
    9388:	7811      	ldrb	r1, [r2, #0]
    938a:	4a10      	ldr	r2, [pc, #64]	; (93cc <usb_device_enable_callback+0x58>)
    938c:	0049      	lsls	r1, r1, #1
    938e:	5a8a      	ldrh	r2, [r1, r2]
    9390:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    9392:	687a      	ldr	r2, [r7, #4]
    9394:	23ab      	movs	r3, #171	; 0xab
    9396:	005b      	lsls	r3, r3, #1
    9398:	5ad2      	ldrh	r2, [r2, r3]
    939a:	1cfb      	adds	r3, r7, #3
    939c:	7819      	ldrb	r1, [r3, #0]
    939e:	4b0b      	ldr	r3, [pc, #44]	; (93cc <usb_device_enable_callback+0x58>)
    93a0:	0049      	lsls	r1, r1, #1
    93a2:	5acb      	ldrh	r3, [r1, r3]
    93a4:	4313      	orrs	r3, r2
    93a6:	b299      	uxth	r1, r3
    93a8:	687a      	ldr	r2, [r7, #4]
    93aa:	23ab      	movs	r3, #171	; 0xab
    93ac:	005b      	lsls	r3, r3, #1
    93ae:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	681b      	ldr	r3, [r3, #0]
    93b4:	1cfa      	adds	r2, r7, #3
    93b6:	7811      	ldrb	r1, [r2, #0]
    93b8:	4a04      	ldr	r2, [pc, #16]	; (93cc <usb_device_enable_callback+0x58>)
    93ba:	0049      	lsls	r1, r1, #1
    93bc:	5a8a      	ldrh	r2, [r1, r2]
    93be:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    93c0:	2300      	movs	r3, #0
}
    93c2:	1c18      	adds	r0, r3, #0
    93c4:	46bd      	mov	sp, r7
    93c6:	b002      	add	sp, #8
    93c8:	bd80      	pop	{r7, pc}
    93ca:	46c0      	nop			; (mov r8, r8)
    93cc:	0000bb2c 	.word	0x0000bb2c

000093d0 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    93d0:	b580      	push	{r7, lr}
    93d2:	b082      	sub	sp, #8
    93d4:	af00      	add	r7, sp, #0
    93d6:	6078      	str	r0, [r7, #4]
    93d8:	1c0a      	adds	r2, r1, #0
    93da:	1cfb      	adds	r3, r7, #3
    93dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    93de:	687a      	ldr	r2, [r7, #4]
    93e0:	23ab      	movs	r3, #171	; 0xab
    93e2:	005b      	lsls	r3, r3, #1
    93e4:	5ad3      	ldrh	r3, [r2, r3]
    93e6:	b29b      	uxth	r3, r3
    93e8:	1cfa      	adds	r2, r7, #3
    93ea:	7811      	ldrb	r1, [r2, #0]
    93ec:	4a0c      	ldr	r2, [pc, #48]	; (9420 <usb_device_disable_callback+0x50>)
    93ee:	0049      	lsls	r1, r1, #1
    93f0:	5a8a      	ldrh	r2, [r1, r2]
    93f2:	b292      	uxth	r2, r2
    93f4:	43d2      	mvns	r2, r2
    93f6:	b292      	uxth	r2, r2
    93f8:	4013      	ands	r3, r2
    93fa:	b29b      	uxth	r3, r3
    93fc:	b299      	uxth	r1, r3
    93fe:	687a      	ldr	r2, [r7, #4]
    9400:	23ab      	movs	r3, #171	; 0xab
    9402:	005b      	lsls	r3, r3, #1
    9404:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	1cfa      	adds	r2, r7, #3
    940c:	7811      	ldrb	r1, [r2, #0]
    940e:	4a04      	ldr	r2, [pc, #16]	; (9420 <usb_device_disable_callback+0x50>)
    9410:	0049      	lsls	r1, r1, #1
    9412:	5a8a      	ldrh	r2, [r1, r2]
    9414:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    9416:	2300      	movs	r3, #0
}
    9418:	1c18      	adds	r0, r3, #0
    941a:	46bd      	mov	sp, r7
    941c:	b002      	add	sp, #8
    941e:	bd80      	pop	{r7, pc}
    9420:	0000bb2c 	.word	0x0000bb2c

00009424 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    9424:	b580      	push	{r7, lr}
    9426:	b084      	sub	sp, #16
    9428:	af00      	add	r7, sp, #0
    942a:	60f8      	str	r0, [r7, #12]
    942c:	607b      	str	r3, [r7, #4]
    942e:	1c3b      	adds	r3, r7, #0
    9430:	330b      	adds	r3, #11
    9432:	7019      	strb	r1, [r3, #0]
    9434:	1c3b      	adds	r3, r7, #0
    9436:	330a      	adds	r3, #10
    9438:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    943a:	1c3b      	adds	r3, r7, #0
    943c:	330b      	adds	r3, #11
    943e:	7819      	ldrb	r1, [r3, #0]
    9440:	1c3b      	adds	r3, r7, #0
    9442:	330a      	adds	r3, #10
    9444:	781b      	ldrb	r3, [r3, #0]
    9446:	68fa      	ldr	r2, [r7, #12]
    9448:	0089      	lsls	r1, r1, #2
    944a:	18cb      	adds	r3, r1, r3
    944c:	3334      	adds	r3, #52	; 0x34
    944e:	009b      	lsls	r3, r3, #2
    9450:	18d3      	adds	r3, r2, r3
    9452:	687a      	ldr	r2, [r7, #4]
    9454:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    9456:	1c3b      	adds	r3, r7, #0
    9458:	330b      	adds	r3, #11
    945a:	7819      	ldrb	r1, [r3, #0]
    945c:	1c3b      	adds	r3, r7, #0
    945e:	330b      	adds	r3, #11
    9460:	781a      	ldrb	r2, [r3, #0]
    9462:	68f8      	ldr	r0, [r7, #12]
    9464:	23ac      	movs	r3, #172	; 0xac
    9466:	005b      	lsls	r3, r3, #1
    9468:	1882      	adds	r2, r0, r2
    946a:	18d3      	adds	r3, r2, r3
    946c:	781a      	ldrb	r2, [r3, #0]
    946e:	1c3b      	adds	r3, r7, #0
    9470:	330a      	adds	r3, #10
    9472:	781b      	ldrb	r3, [r3, #0]
    9474:	4807      	ldr	r0, [pc, #28]	; (9494 <usb_device_endpoint_register_callback+0x70>)
    9476:	5cc3      	ldrb	r3, [r0, r3]
    9478:	4313      	orrs	r3, r2
    947a:	b2da      	uxtb	r2, r3
    947c:	68f8      	ldr	r0, [r7, #12]
    947e:	23ac      	movs	r3, #172	; 0xac
    9480:	005b      	lsls	r3, r3, #1
    9482:	1841      	adds	r1, r0, r1
    9484:	18cb      	adds	r3, r1, r3
    9486:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    9488:	2300      	movs	r3, #0
}
    948a:	1c18      	adds	r0, r3, #0
    948c:	46bd      	mov	sp, r7
    948e:	b004      	add	sp, #16
    9490:	bd80      	pop	{r7, pc}
    9492:	46c0      	nop			; (mov r8, r8)
    9494:	0000bb3c 	.word	0x0000bb3c

00009498 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    9498:	b580      	push	{r7, lr}
    949a:	b082      	sub	sp, #8
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
    94a0:	1cfb      	adds	r3, r7, #3
    94a2:	7019      	strb	r1, [r3, #0]
    94a4:	1cbb      	adds	r3, r7, #2
    94a6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    94a8:	1cfb      	adds	r3, r7, #3
    94aa:	7819      	ldrb	r1, [r3, #0]
    94ac:	1cbb      	adds	r3, r7, #2
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	687a      	ldr	r2, [r7, #4]
    94b2:	0089      	lsls	r1, r1, #2
    94b4:	18cb      	adds	r3, r1, r3
    94b6:	3334      	adds	r3, #52	; 0x34
    94b8:	009b      	lsls	r3, r3, #2
    94ba:	18d3      	adds	r3, r2, r3
    94bc:	2200      	movs	r2, #0
    94be:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    94c0:	1cfb      	adds	r3, r7, #3
    94c2:	7819      	ldrb	r1, [r3, #0]
    94c4:	1cfb      	adds	r3, r7, #3
    94c6:	781a      	ldrb	r2, [r3, #0]
    94c8:	6878      	ldr	r0, [r7, #4]
    94ca:	23ac      	movs	r3, #172	; 0xac
    94cc:	005b      	lsls	r3, r3, #1
    94ce:	1882      	adds	r2, r0, r2
    94d0:	18d3      	adds	r3, r2, r3
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	b2db      	uxtb	r3, r3
    94d6:	1cba      	adds	r2, r7, #2
    94d8:	7812      	ldrb	r2, [r2, #0]
    94da:	4809      	ldr	r0, [pc, #36]	; (9500 <usb_device_endpoint_unregister_callback+0x68>)
    94dc:	5c82      	ldrb	r2, [r0, r2]
    94de:	b2d2      	uxtb	r2, r2
    94e0:	43d2      	mvns	r2, r2
    94e2:	b2d2      	uxtb	r2, r2
    94e4:	4013      	ands	r3, r2
    94e6:	b2db      	uxtb	r3, r3
    94e8:	b2da      	uxtb	r2, r3
    94ea:	6878      	ldr	r0, [r7, #4]
    94ec:	23ac      	movs	r3, #172	; 0xac
    94ee:	005b      	lsls	r3, r3, #1
    94f0:	1841      	adds	r1, r0, r1
    94f2:	18cb      	adds	r3, r1, r3
    94f4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    94f6:	2300      	movs	r3, #0
}
    94f8:	1c18      	adds	r0, r3, #0
    94fa:	46bd      	mov	sp, r7
    94fc:	b002      	add	sp, #8
    94fe:	bd80      	pop	{r7, pc}
    9500:	0000bb3c 	.word	0x0000bb3c

00009504 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	af00      	add	r7, sp, #0
    950a:	6078      	str	r0, [r7, #4]
    950c:	1cfb      	adds	r3, r7, #3
    950e:	7019      	strb	r1, [r3, #0]
    9510:	1cbb      	adds	r3, r7, #2
    9512:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9514:	1c3b      	adds	r3, r7, #0
    9516:	330f      	adds	r3, #15
    9518:	1cfa      	adds	r2, r7, #3
    951a:	7811      	ldrb	r1, [r2, #0]
    951c:	220f      	movs	r2, #15
    951e:	400a      	ands	r2, r1
    9520:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    9522:	1c3b      	adds	r3, r7, #0
    9524:	330f      	adds	r3, #15
    9526:	7819      	ldrb	r1, [r3, #0]
    9528:	1c3b      	adds	r3, r7, #0
    952a:	330f      	adds	r3, #15
    952c:	781a      	ldrb	r2, [r3, #0]
    952e:	6878      	ldr	r0, [r7, #4]
    9530:	23b0      	movs	r3, #176	; 0xb0
    9532:	005b      	lsls	r3, r3, #1
    9534:	1882      	adds	r2, r0, r2
    9536:	18d3      	adds	r3, r2, r3
    9538:	781a      	ldrb	r2, [r3, #0]
    953a:	1cbb      	adds	r3, r7, #2
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	4854      	ldr	r0, [pc, #336]	; (9690 <usb_device_endpoint_enable_callback+0x18c>)
    9540:	5cc3      	ldrb	r3, [r0, r3]
    9542:	4313      	orrs	r3, r2
    9544:	b2da      	uxtb	r2, r3
    9546:	6878      	ldr	r0, [r7, #4]
    9548:	23b0      	movs	r3, #176	; 0xb0
    954a:	005b      	lsls	r3, r3, #1
    954c:	1841      	adds	r1, r0, r1
    954e:	18cb      	adds	r3, r1, r3
    9550:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    9552:	1cbb      	adds	r3, r7, #2
    9554:	781b      	ldrb	r3, [r3, #0]
    9556:	2b00      	cmp	r3, #0
    9558:	d12f      	bne.n	95ba <usb_device_endpoint_enable_callback+0xb6>
		if (ep_num == 0) { // control endpoint
    955a:	1c3b      	adds	r3, r7, #0
    955c:	330f      	adds	r3, #15
    955e:	781b      	ldrb	r3, [r3, #0]
    9560:	2b00      	cmp	r3, #0
    9562:	d10c      	bne.n	957e <usb_device_endpoint_enable_callback+0x7a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    9564:	687b      	ldr	r3, [r7, #4]
    9566:	6819      	ldr	r1, [r3, #0]
    9568:	1c3b      	adds	r3, r7, #0
    956a:	330f      	adds	r3, #15
    956c:	781a      	ldrb	r2, [r3, #0]
    956e:	2384      	movs	r3, #132	; 0x84
    9570:	005b      	lsls	r3, r3, #1
    9572:	0152      	lsls	r2, r2, #5
    9574:	188a      	adds	r2, r1, r2
    9576:	18d3      	adds	r3, r2, r3
    9578:	2203      	movs	r2, #3
    957a:	705a      	strb	r2, [r3, #1]
    957c:	e01d      	b.n	95ba <usb_device_endpoint_enable_callback+0xb6>
		} else if (ep & USB_EP_DIR_IN) {
    957e:	1cfb      	adds	r3, r7, #3
    9580:	781b      	ldrb	r3, [r3, #0]
    9582:	b25b      	sxtb	r3, r3
    9584:	2b00      	cmp	r3, #0
    9586:	da0c      	bge.n	95a2 <usb_device_endpoint_enable_callback+0x9e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    9588:	687b      	ldr	r3, [r7, #4]
    958a:	6819      	ldr	r1, [r3, #0]
    958c:	1c3b      	adds	r3, r7, #0
    958e:	330f      	adds	r3, #15
    9590:	781a      	ldrb	r2, [r3, #0]
    9592:	2384      	movs	r3, #132	; 0x84
    9594:	005b      	lsls	r3, r3, #1
    9596:	0152      	lsls	r2, r2, #5
    9598:	188a      	adds	r2, r1, r2
    959a:	18d3      	adds	r3, r2, r3
    959c:	2202      	movs	r2, #2
    959e:	705a      	strb	r2, [r3, #1]
    95a0:	e00b      	b.n	95ba <usb_device_endpoint_enable_callback+0xb6>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	6819      	ldr	r1, [r3, #0]
    95a6:	1c3b      	adds	r3, r7, #0
    95a8:	330f      	adds	r3, #15
    95aa:	781a      	ldrb	r2, [r3, #0]
    95ac:	2384      	movs	r3, #132	; 0x84
    95ae:	005b      	lsls	r3, r3, #1
    95b0:	0152      	lsls	r2, r2, #5
    95b2:	188a      	adds	r2, r1, r2
    95b4:	18d3      	adds	r3, r2, r3
    95b6:	2201      	movs	r2, #1
    95b8:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    95ba:	1cbb      	adds	r3, r7, #2
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	2b01      	cmp	r3, #1
    95c0:	d12f      	bne.n	9622 <usb_device_endpoint_enable_callback+0x11e>
		if (ep_num == 0) { // control endpoint
    95c2:	1c3b      	adds	r3, r7, #0
    95c4:	330f      	adds	r3, #15
    95c6:	781b      	ldrb	r3, [r3, #0]
    95c8:	2b00      	cmp	r3, #0
    95ca:	d10c      	bne.n	95e6 <usb_device_endpoint_enable_callback+0xe2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    95cc:	687b      	ldr	r3, [r7, #4]
    95ce:	6819      	ldr	r1, [r3, #0]
    95d0:	1c3b      	adds	r3, r7, #0
    95d2:	330f      	adds	r3, #15
    95d4:	781a      	ldrb	r2, [r3, #0]
    95d6:	2384      	movs	r3, #132	; 0x84
    95d8:	005b      	lsls	r3, r3, #1
    95da:	0152      	lsls	r2, r2, #5
    95dc:	188a      	adds	r2, r1, r2
    95de:	18d3      	adds	r3, r2, r3
    95e0:	220c      	movs	r2, #12
    95e2:	705a      	strb	r2, [r3, #1]
    95e4:	e01d      	b.n	9622 <usb_device_endpoint_enable_callback+0x11e>
		} else if (ep & USB_EP_DIR_IN) {
    95e6:	1cfb      	adds	r3, r7, #3
    95e8:	781b      	ldrb	r3, [r3, #0]
    95ea:	b25b      	sxtb	r3, r3
    95ec:	2b00      	cmp	r3, #0
    95ee:	da0c      	bge.n	960a <usb_device_endpoint_enable_callback+0x106>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    95f0:	687b      	ldr	r3, [r7, #4]
    95f2:	6819      	ldr	r1, [r3, #0]
    95f4:	1c3b      	adds	r3, r7, #0
    95f6:	330f      	adds	r3, #15
    95f8:	781a      	ldrb	r2, [r3, #0]
    95fa:	2384      	movs	r3, #132	; 0x84
    95fc:	005b      	lsls	r3, r3, #1
    95fe:	0152      	lsls	r2, r2, #5
    9600:	188a      	adds	r2, r1, r2
    9602:	18d3      	adds	r3, r2, r3
    9604:	2208      	movs	r2, #8
    9606:	705a      	strb	r2, [r3, #1]
    9608:	e00b      	b.n	9622 <usb_device_endpoint_enable_callback+0x11e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	6819      	ldr	r1, [r3, #0]
    960e:	1c3b      	adds	r3, r7, #0
    9610:	330f      	adds	r3, #15
    9612:	781a      	ldrb	r2, [r3, #0]
    9614:	2384      	movs	r3, #132	; 0x84
    9616:	005b      	lsls	r3, r3, #1
    9618:	0152      	lsls	r2, r2, #5
    961a:	188a      	adds	r2, r1, r2
    961c:	18d3      	adds	r3, r2, r3
    961e:	2204      	movs	r2, #4
    9620:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    9622:	1cbb      	adds	r3, r7, #2
    9624:	781b      	ldrb	r3, [r3, #0]
    9626:	2b02      	cmp	r3, #2
    9628:	d10b      	bne.n	9642 <usb_device_endpoint_enable_callback+0x13e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    962a:	687b      	ldr	r3, [r7, #4]
    962c:	6819      	ldr	r1, [r3, #0]
    962e:	1c3b      	adds	r3, r7, #0
    9630:	330f      	adds	r3, #15
    9632:	781a      	ldrb	r2, [r3, #0]
    9634:	2384      	movs	r3, #132	; 0x84
    9636:	005b      	lsls	r3, r3, #1
    9638:	0152      	lsls	r2, r2, #5
    963a:	188a      	adds	r2, r1, r2
    963c:	18d3      	adds	r3, r2, r3
    963e:	2210      	movs	r2, #16
    9640:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    9642:	1cbb      	adds	r3, r7, #2
    9644:	781b      	ldrb	r3, [r3, #0]
    9646:	2b03      	cmp	r3, #3
    9648:	d11d      	bne.n	9686 <usb_device_endpoint_enable_callback+0x182>
		if (ep & USB_EP_DIR_IN) {
    964a:	1cfb      	adds	r3, r7, #3
    964c:	781b      	ldrb	r3, [r3, #0]
    964e:	b25b      	sxtb	r3, r3
    9650:	2b00      	cmp	r3, #0
    9652:	da0c      	bge.n	966e <usb_device_endpoint_enable_callback+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	6819      	ldr	r1, [r3, #0]
    9658:	1c3b      	adds	r3, r7, #0
    965a:	330f      	adds	r3, #15
    965c:	781a      	ldrb	r2, [r3, #0]
    965e:	2384      	movs	r3, #132	; 0x84
    9660:	005b      	lsls	r3, r3, #1
    9662:	0152      	lsls	r2, r2, #5
    9664:	188a      	adds	r2, r1, r2
    9666:	18d3      	adds	r3, r2, r3
    9668:	2240      	movs	r2, #64	; 0x40
    966a:	705a      	strb	r2, [r3, #1]
    966c:	e00b      	b.n	9686 <usb_device_endpoint_enable_callback+0x182>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    966e:	687b      	ldr	r3, [r7, #4]
    9670:	6819      	ldr	r1, [r3, #0]
    9672:	1c3b      	adds	r3, r7, #0
    9674:	330f      	adds	r3, #15
    9676:	781a      	ldrb	r2, [r3, #0]
    9678:	2384      	movs	r3, #132	; 0x84
    967a:	005b      	lsls	r3, r3, #1
    967c:	0152      	lsls	r2, r2, #5
    967e:	188a      	adds	r2, r1, r2
    9680:	18d3      	adds	r3, r2, r3
    9682:	2220      	movs	r2, #32
    9684:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    9686:	2300      	movs	r3, #0
}
    9688:	1c18      	adds	r0, r3, #0
    968a:	46bd      	mov	sp, r7
    968c:	b004      	add	sp, #16
    968e:	bd80      	pop	{r7, pc}
    9690:	0000bb3c 	.word	0x0000bb3c

00009694 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    9694:	b580      	push	{r7, lr}
    9696:	b084      	sub	sp, #16
    9698:	af00      	add	r7, sp, #0
    969a:	6078      	str	r0, [r7, #4]
    969c:	1cfb      	adds	r3, r7, #3
    969e:	7019      	strb	r1, [r3, #0]
    96a0:	1cbb      	adds	r3, r7, #2
    96a2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    96a4:	1c3b      	adds	r3, r7, #0
    96a6:	330f      	adds	r3, #15
    96a8:	1cfa      	adds	r2, r7, #3
    96aa:	7811      	ldrb	r1, [r2, #0]
    96ac:	220f      	movs	r2, #15
    96ae:	400a      	ands	r2, r1
    96b0:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    96b2:	1c3b      	adds	r3, r7, #0
    96b4:	330f      	adds	r3, #15
    96b6:	7819      	ldrb	r1, [r3, #0]
    96b8:	1c3b      	adds	r3, r7, #0
    96ba:	330f      	adds	r3, #15
    96bc:	781a      	ldrb	r2, [r3, #0]
    96be:	6878      	ldr	r0, [r7, #4]
    96c0:	23b0      	movs	r3, #176	; 0xb0
    96c2:	005b      	lsls	r3, r3, #1
    96c4:	1882      	adds	r2, r0, r2
    96c6:	18d3      	adds	r3, r2, r3
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	b2db      	uxtb	r3, r3
    96cc:	1cba      	adds	r2, r7, #2
    96ce:	7812      	ldrb	r2, [r2, #0]
    96d0:	4856      	ldr	r0, [pc, #344]	; (982c <usb_device_endpoint_disable_callback+0x198>)
    96d2:	5c82      	ldrb	r2, [r0, r2]
    96d4:	b2d2      	uxtb	r2, r2
    96d6:	43d2      	mvns	r2, r2
    96d8:	b2d2      	uxtb	r2, r2
    96da:	4013      	ands	r3, r2
    96dc:	b2db      	uxtb	r3, r3
    96de:	b2da      	uxtb	r2, r3
    96e0:	6878      	ldr	r0, [r7, #4]
    96e2:	23b0      	movs	r3, #176	; 0xb0
    96e4:	005b      	lsls	r3, r3, #1
    96e6:	1841      	adds	r1, r0, r1
    96e8:	18cb      	adds	r3, r1, r3
    96ea:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    96ec:	1cbb      	adds	r3, r7, #2
    96ee:	781b      	ldrb	r3, [r3, #0]
    96f0:	2b00      	cmp	r3, #0
    96f2:	d12f      	bne.n	9754 <usb_device_endpoint_disable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    96f4:	1c3b      	adds	r3, r7, #0
    96f6:	330f      	adds	r3, #15
    96f8:	781b      	ldrb	r3, [r3, #0]
    96fa:	2b00      	cmp	r3, #0
    96fc:	d10c      	bne.n	9718 <usb_device_endpoint_disable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    96fe:	687b      	ldr	r3, [r7, #4]
    9700:	6819      	ldr	r1, [r3, #0]
    9702:	1c3b      	adds	r3, r7, #0
    9704:	330f      	adds	r3, #15
    9706:	781a      	ldrb	r2, [r3, #0]
    9708:	2384      	movs	r3, #132	; 0x84
    970a:	005b      	lsls	r3, r3, #1
    970c:	0152      	lsls	r2, r2, #5
    970e:	188a      	adds	r2, r1, r2
    9710:	18d3      	adds	r3, r2, r3
    9712:	2203      	movs	r2, #3
    9714:	701a      	strb	r2, [r3, #0]
    9716:	e01d      	b.n	9754 <usb_device_endpoint_disable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    9718:	1cfb      	adds	r3, r7, #3
    971a:	781b      	ldrb	r3, [r3, #0]
    971c:	b25b      	sxtb	r3, r3
    971e:	2b00      	cmp	r3, #0
    9720:	da0c      	bge.n	973c <usb_device_endpoint_disable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    9722:	687b      	ldr	r3, [r7, #4]
    9724:	6819      	ldr	r1, [r3, #0]
    9726:	1c3b      	adds	r3, r7, #0
    9728:	330f      	adds	r3, #15
    972a:	781a      	ldrb	r2, [r3, #0]
    972c:	2384      	movs	r3, #132	; 0x84
    972e:	005b      	lsls	r3, r3, #1
    9730:	0152      	lsls	r2, r2, #5
    9732:	188a      	adds	r2, r1, r2
    9734:	18d3      	adds	r3, r2, r3
    9736:	2202      	movs	r2, #2
    9738:	701a      	strb	r2, [r3, #0]
    973a:	e00b      	b.n	9754 <usb_device_endpoint_disable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	6819      	ldr	r1, [r3, #0]
    9740:	1c3b      	adds	r3, r7, #0
    9742:	330f      	adds	r3, #15
    9744:	781a      	ldrb	r2, [r3, #0]
    9746:	2384      	movs	r3, #132	; 0x84
    9748:	005b      	lsls	r3, r3, #1
    974a:	0152      	lsls	r2, r2, #5
    974c:	188a      	adds	r2, r1, r2
    974e:	18d3      	adds	r3, r2, r3
    9750:	2201      	movs	r2, #1
    9752:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    9754:	1cbb      	adds	r3, r7, #2
    9756:	781b      	ldrb	r3, [r3, #0]
    9758:	2b01      	cmp	r3, #1
    975a:	d12f      	bne.n	97bc <usb_device_endpoint_disable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    975c:	1c3b      	adds	r3, r7, #0
    975e:	330f      	adds	r3, #15
    9760:	781b      	ldrb	r3, [r3, #0]
    9762:	2b00      	cmp	r3, #0
    9764:	d10c      	bne.n	9780 <usb_device_endpoint_disable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    9766:	687b      	ldr	r3, [r7, #4]
    9768:	6819      	ldr	r1, [r3, #0]
    976a:	1c3b      	adds	r3, r7, #0
    976c:	330f      	adds	r3, #15
    976e:	781a      	ldrb	r2, [r3, #0]
    9770:	2384      	movs	r3, #132	; 0x84
    9772:	005b      	lsls	r3, r3, #1
    9774:	0152      	lsls	r2, r2, #5
    9776:	188a      	adds	r2, r1, r2
    9778:	18d3      	adds	r3, r2, r3
    977a:	220c      	movs	r2, #12
    977c:	701a      	strb	r2, [r3, #0]
    977e:	e01d      	b.n	97bc <usb_device_endpoint_disable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    9780:	1cfb      	adds	r3, r7, #3
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	b25b      	sxtb	r3, r3
    9786:	2b00      	cmp	r3, #0
    9788:	da0c      	bge.n	97a4 <usb_device_endpoint_disable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    978a:	687b      	ldr	r3, [r7, #4]
    978c:	6819      	ldr	r1, [r3, #0]
    978e:	1c3b      	adds	r3, r7, #0
    9790:	330f      	adds	r3, #15
    9792:	781a      	ldrb	r2, [r3, #0]
    9794:	2384      	movs	r3, #132	; 0x84
    9796:	005b      	lsls	r3, r3, #1
    9798:	0152      	lsls	r2, r2, #5
    979a:	188a      	adds	r2, r1, r2
    979c:	18d3      	adds	r3, r2, r3
    979e:	2208      	movs	r2, #8
    97a0:	701a      	strb	r2, [r3, #0]
    97a2:	e00b      	b.n	97bc <usb_device_endpoint_disable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    97a4:	687b      	ldr	r3, [r7, #4]
    97a6:	6819      	ldr	r1, [r3, #0]
    97a8:	1c3b      	adds	r3, r7, #0
    97aa:	330f      	adds	r3, #15
    97ac:	781a      	ldrb	r2, [r3, #0]
    97ae:	2384      	movs	r3, #132	; 0x84
    97b0:	005b      	lsls	r3, r3, #1
    97b2:	0152      	lsls	r2, r2, #5
    97b4:	188a      	adds	r2, r1, r2
    97b6:	18d3      	adds	r3, r2, r3
    97b8:	2204      	movs	r2, #4
    97ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    97bc:	1cbb      	adds	r3, r7, #2
    97be:	781b      	ldrb	r3, [r3, #0]
    97c0:	2b02      	cmp	r3, #2
    97c2:	d10b      	bne.n	97dc <usb_device_endpoint_disable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    97c4:	687b      	ldr	r3, [r7, #4]
    97c6:	6819      	ldr	r1, [r3, #0]
    97c8:	1c3b      	adds	r3, r7, #0
    97ca:	330f      	adds	r3, #15
    97cc:	781a      	ldrb	r2, [r3, #0]
    97ce:	2384      	movs	r3, #132	; 0x84
    97d0:	005b      	lsls	r3, r3, #1
    97d2:	0152      	lsls	r2, r2, #5
    97d4:	188a      	adds	r2, r1, r2
    97d6:	18d3      	adds	r3, r2, r3
    97d8:	2210      	movs	r2, #16
    97da:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    97dc:	1cbb      	adds	r3, r7, #2
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	2b03      	cmp	r3, #3
    97e2:	d11d      	bne.n	9820 <usb_device_endpoint_disable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    97e4:	1cfb      	adds	r3, r7, #3
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	b25b      	sxtb	r3, r3
    97ea:	2b00      	cmp	r3, #0
    97ec:	da0c      	bge.n	9808 <usb_device_endpoint_disable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	6819      	ldr	r1, [r3, #0]
    97f2:	1c3b      	adds	r3, r7, #0
    97f4:	330f      	adds	r3, #15
    97f6:	781a      	ldrb	r2, [r3, #0]
    97f8:	2384      	movs	r3, #132	; 0x84
    97fa:	005b      	lsls	r3, r3, #1
    97fc:	0152      	lsls	r2, r2, #5
    97fe:	188a      	adds	r2, r1, r2
    9800:	18d3      	adds	r3, r2, r3
    9802:	2240      	movs	r2, #64	; 0x40
    9804:	701a      	strb	r2, [r3, #0]
    9806:	e00b      	b.n	9820 <usb_device_endpoint_disable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	6819      	ldr	r1, [r3, #0]
    980c:	1c3b      	adds	r3, r7, #0
    980e:	330f      	adds	r3, #15
    9810:	781a      	ldrb	r2, [r3, #0]
    9812:	2384      	movs	r3, #132	; 0x84
    9814:	005b      	lsls	r3, r3, #1
    9816:	0152      	lsls	r2, r2, #5
    9818:	188a      	adds	r2, r1, r2
    981a:	18d3      	adds	r3, r2, r3
    981c:	2220      	movs	r2, #32
    981e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    9820:	2300      	movs	r3, #0
}
    9822:	1c18      	adds	r0, r3, #0
    9824:	46bd      	mov	sp, r7
    9826:	b004      	add	sp, #16
    9828:	bd80      	pop	{r7, pc}
    982a:	46c0      	nop			; (mov r8, r8)
    982c:	0000bb3c 	.word	0x0000bb3c

00009830 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    9830:	b580      	push	{r7, lr}
    9832:	b082      	sub	sp, #8
    9834:	af00      	add	r7, sp, #0
    9836:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	2200      	movs	r2, #0
    983c:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    983e:	687b      	ldr	r3, [r7, #4]
    9840:	2200      	movs	r2, #0
    9842:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	2200      	movs	r2, #0
    9848:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	2201      	movs	r2, #1
    984e:	70da      	strb	r2, [r3, #3]
}
    9850:	46bd      	mov	sp, r7
    9852:	b002      	add	sp, #8
    9854:	bd80      	pop	{r7, pc}
    9856:	46c0      	nop			; (mov r8, r8)

00009858 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    9858:	b590      	push	{r4, r7, lr}
    985a:	b085      	sub	sp, #20
    985c:	af00      	add	r7, sp, #0
    985e:	6078      	str	r0, [r7, #4]
    9860:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    9862:	683b      	ldr	r3, [r7, #0]
    9864:	7819      	ldrb	r1, [r3, #0]
    9866:	1c3b      	adds	r3, r7, #0
    9868:	330f      	adds	r3, #15
    986a:	220f      	movs	r2, #15
    986c:	400a      	ands	r2, r1
    986e:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    9870:	683b      	ldr	r3, [r7, #0]
    9872:	781b      	ldrb	r3, [r3, #0]
    9874:	b2db      	uxtb	r3, r3
    9876:	09db      	lsrs	r3, r3, #7
    9878:	b2da      	uxtb	r2, r3
    987a:	1c3b      	adds	r3, r7, #0
    987c:	330e      	adds	r3, #14
    987e:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    9880:	683b      	ldr	r3, [r7, #0]
    9882:	78db      	ldrb	r3, [r3, #3]
    9884:	2b04      	cmp	r3, #4
    9886:	d900      	bls.n	988a <usb_device_endpoint_set_config+0x32>
    9888:	e1f2      	b.n	9c70 <usb_device_endpoint_set_config+0x418>
    988a:	009a      	lsls	r2, r3, #2
    988c:	4bdd      	ldr	r3, [pc, #884]	; (9c04 <usb_device_endpoint_set_config+0x3ac>)
    988e:	18d3      	adds	r3, r2, r3
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    9894:	687b      	ldr	r3, [r7, #4]
    9896:	681b      	ldr	r3, [r3, #0]
    9898:	1c3a      	adds	r2, r7, #0
    989a:	320f      	adds	r2, #15
    989c:	7812      	ldrb	r2, [r2, #0]
    989e:	3208      	adds	r2, #8
    98a0:	0152      	lsls	r2, r2, #5
    98a2:	2100      	movs	r1, #0
    98a4:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    98a6:	2300      	movs	r3, #0
    98a8:	e237      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    98aa:	687b      	ldr	r3, [r7, #4]
    98ac:	681b      	ldr	r3, [r3, #0]
    98ae:	1c3a      	adds	r2, r7, #0
    98b0:	320f      	adds	r2, #15
    98b2:	7812      	ldrb	r2, [r2, #0]
    98b4:	3208      	adds	r2, #8
    98b6:	0152      	lsls	r2, r2, #5
    98b8:	5cd3      	ldrb	r3, [r2, r3]
    98ba:	b2db      	uxtb	r3, r3
    98bc:	1c1a      	adds	r2, r3, #0
    98be:	2307      	movs	r3, #7
    98c0:	4013      	ands	r3, r2
    98c2:	d12e      	bne.n	9922 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	1c3a      	adds	r2, r7, #0
    98ca:	320f      	adds	r2, #15
    98cc:	7812      	ldrb	r2, [r2, #0]
    98ce:	3208      	adds	r2, #8
    98d0:	0152      	lsls	r2, r2, #5
    98d2:	5cd3      	ldrb	r3, [r2, r3]
    98d4:	b2db      	uxtb	r3, r3
    98d6:	1c1a      	adds	r2, r3, #0
    98d8:	2370      	movs	r3, #112	; 0x70
    98da:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    98dc:	d121      	bne.n	9922 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	681b      	ldr	r3, [r3, #0]
    98e2:	1c3a      	adds	r2, r7, #0
    98e4:	320f      	adds	r2, #15
    98e6:	7812      	ldrb	r2, [r2, #0]
    98e8:	3208      	adds	r2, #8
    98ea:	0152      	lsls	r2, r2, #5
    98ec:	2111      	movs	r1, #17
    98ee:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    98f0:	687b      	ldr	r3, [r7, #4]
    98f2:	681a      	ldr	r2, [r3, #0]
    98f4:	1c3b      	adds	r3, r7, #0
    98f6:	330f      	adds	r3, #15
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	3308      	adds	r3, #8
    98fc:	015b      	lsls	r3, r3, #5
    98fe:	18d3      	adds	r3, r2, r3
    9900:	2240      	movs	r2, #64	; 0x40
    9902:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	681a      	ldr	r2, [r3, #0]
    9908:	1c3b      	adds	r3, r7, #0
    990a:	330f      	adds	r3, #15
    990c:	781b      	ldrb	r3, [r3, #0]
    990e:	3308      	adds	r3, #8
    9910:	015b      	lsls	r3, r3, #5
    9912:	18d3      	adds	r3, r2, r3
    9914:	2280      	movs	r2, #128	; 0x80
    9916:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    9918:	683b      	ldr	r3, [r7, #0]
    991a:	789b      	ldrb	r3, [r3, #2]
    991c:	2b00      	cmp	r3, #0
    991e:	d102      	bne.n	9926 <usb_device_endpoint_set_config+0xce>
    9920:	e026      	b.n	9970 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    9922:	231c      	movs	r3, #28
    9924:	e1f9      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9926:	1c3b      	adds	r3, r7, #0
    9928:	330f      	adds	r3, #15
    992a:	7818      	ldrb	r0, [r3, #0]
    992c:	1c3b      	adds	r3, r7, #0
    992e:	330f      	adds	r3, #15
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	4ab5      	ldr	r2, [pc, #724]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    9934:	015b      	lsls	r3, r3, #5
    9936:	18d3      	adds	r3, r2, r3
    9938:	685b      	ldr	r3, [r3, #4]
    993a:	2280      	movs	r2, #128	; 0x80
    993c:	0612      	lsls	r2, r2, #24
    993e:	431a      	orrs	r2, r3
    9940:	49b1      	ldr	r1, [pc, #708]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    9942:	0143      	lsls	r3, r0, #5
    9944:	18cb      	adds	r3, r1, r3
    9946:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9948:	1c3b      	adds	r3, r7, #0
    994a:	330f      	adds	r3, #15
    994c:	7818      	ldrb	r0, [r3, #0]
    994e:	1c3b      	adds	r3, r7, #0
    9950:	330f      	adds	r3, #15
    9952:	781b      	ldrb	r3, [r3, #0]
    9954:	4aac      	ldr	r2, [pc, #688]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    9956:	015b      	lsls	r3, r3, #5
    9958:	18d3      	adds	r3, r2, r3
    995a:	3310      	adds	r3, #16
    995c:	685b      	ldr	r3, [r3, #4]
    995e:	2280      	movs	r2, #128	; 0x80
    9960:	0612      	lsls	r2, r2, #24
    9962:	431a      	orrs	r2, r3
    9964:	49a8      	ldr	r1, [pc, #672]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    9966:	0143      	lsls	r3, r0, #5
    9968:	18cb      	adds	r3, r1, r3
    996a:	3310      	adds	r3, #16
    996c:	605a      	str	r2, [r3, #4]
    996e:	e021      	b.n	99b4 <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9970:	1c3b      	adds	r3, r7, #0
    9972:	330f      	adds	r3, #15
    9974:	7818      	ldrb	r0, [r3, #0]
    9976:	1c3b      	adds	r3, r7, #0
    9978:	330f      	adds	r3, #15
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	4aa2      	ldr	r2, [pc, #648]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    997e:	015b      	lsls	r3, r3, #5
    9980:	18d3      	adds	r3, r2, r3
    9982:	685b      	ldr	r3, [r3, #4]
    9984:	005b      	lsls	r3, r3, #1
    9986:	085a      	lsrs	r2, r3, #1
    9988:	499f      	ldr	r1, [pc, #636]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    998a:	0143      	lsls	r3, r0, #5
    998c:	18cb      	adds	r3, r1, r3
    998e:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9990:	1c3b      	adds	r3, r7, #0
    9992:	330f      	adds	r3, #15
    9994:	7818      	ldrb	r0, [r3, #0]
    9996:	1c3b      	adds	r3, r7, #0
    9998:	330f      	adds	r3, #15
    999a:	781b      	ldrb	r3, [r3, #0]
    999c:	4a9a      	ldr	r2, [pc, #616]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    999e:	015b      	lsls	r3, r3, #5
    99a0:	18d3      	adds	r3, r2, r3
    99a2:	3310      	adds	r3, #16
    99a4:	685b      	ldr	r3, [r3, #4]
    99a6:	005b      	lsls	r3, r3, #1
    99a8:	085a      	lsrs	r2, r3, #1
    99aa:	4997      	ldr	r1, [pc, #604]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    99ac:	0143      	lsls	r3, r0, #5
    99ae:	18cb      	adds	r3, r1, r3
    99b0:	3310      	adds	r3, #16
    99b2:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    99b4:	1c3b      	adds	r3, r7, #0
    99b6:	330f      	adds	r3, #15
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	683a      	ldr	r2, [r7, #0]
    99bc:	7852      	ldrb	r2, [r2, #1]
    99be:	1c11      	adds	r1, r2, #0
    99c0:	2207      	movs	r2, #7
    99c2:	400a      	ands	r2, r1
    99c4:	b2d1      	uxtb	r1, r2
    99c6:	4a90      	ldr	r2, [pc, #576]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    99c8:	015b      	lsls	r3, r3, #5
    99ca:	18d3      	adds	r3, r2, r3
    99cc:	2207      	movs	r2, #7
    99ce:	400a      	ands	r2, r1
    99d0:	0712      	lsls	r2, r2, #28
    99d2:	6858      	ldr	r0, [r3, #4]
    99d4:	498d      	ldr	r1, [pc, #564]	; (9c0c <usb_device_endpoint_set_config+0x3b4>)
    99d6:	4001      	ands	r1, r0
    99d8:	430a      	orrs	r2, r1
    99da:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    99dc:	1c3b      	adds	r3, r7, #0
    99de:	330f      	adds	r3, #15
    99e0:	781b      	ldrb	r3, [r3, #0]
    99e2:	683a      	ldr	r2, [r7, #0]
    99e4:	7852      	ldrb	r2, [r2, #1]
    99e6:	1c11      	adds	r1, r2, #0
    99e8:	2207      	movs	r2, #7
    99ea:	400a      	ands	r2, r1
    99ec:	b2d1      	uxtb	r1, r2
    99ee:	4a86      	ldr	r2, [pc, #536]	; (9c08 <usb_device_endpoint_set_config+0x3b0>)
    99f0:	015b      	lsls	r3, r3, #5
    99f2:	18d3      	adds	r3, r2, r3
    99f4:	3310      	adds	r3, #16
    99f6:	2207      	movs	r2, #7
    99f8:	400a      	ands	r2, r1
    99fa:	0712      	lsls	r2, r2, #28
    99fc:	6858      	ldr	r0, [r3, #4]
    99fe:	4983      	ldr	r1, [pc, #524]	; (9c0c <usb_device_endpoint_set_config+0x3b4>)
    9a00:	4001      	ands	r1, r0
    9a02:	430a      	orrs	r2, r1
    9a04:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    9a06:	2300      	movs	r3, #0
    9a08:	e187      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    9a0a:	1c3b      	adds	r3, r7, #0
    9a0c:	330e      	adds	r3, #14
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	2b00      	cmp	r3, #0
    9a12:	d02e      	beq.n	9a72 <usb_device_endpoint_set_config+0x21a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	681b      	ldr	r3, [r3, #0]
    9a18:	1c3a      	adds	r2, r7, #0
    9a1a:	320f      	adds	r2, #15
    9a1c:	7812      	ldrb	r2, [r2, #0]
    9a1e:	3208      	adds	r2, #8
    9a20:	0152      	lsls	r2, r2, #5
    9a22:	5cd3      	ldrb	r3, [r2, r3]
    9a24:	b2db      	uxtb	r3, r3
    9a26:	1c1a      	adds	r2, r3, #0
    9a28:	2370      	movs	r3, #112	; 0x70
    9a2a:	4013      	ands	r3, r2
    9a2c:	d11f      	bne.n	9a6e <usb_device_endpoint_set_config+0x216>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    9a2e:	687b      	ldr	r3, [r7, #4]
    9a30:	681a      	ldr	r2, [r3, #0]
    9a32:	1c3b      	adds	r3, r7, #0
    9a34:	330f      	adds	r3, #15
    9a36:	7818      	ldrb	r0, [r3, #0]
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	681b      	ldr	r3, [r3, #0]
    9a3c:	1c39      	adds	r1, r7, #0
    9a3e:	310f      	adds	r1, #15
    9a40:	7809      	ldrb	r1, [r1, #0]
    9a42:	3108      	adds	r1, #8
    9a44:	0149      	lsls	r1, r1, #5
    9a46:	5ccb      	ldrb	r3, [r1, r3]
    9a48:	b2db      	uxtb	r3, r3
    9a4a:	2120      	movs	r1, #32
    9a4c:	430b      	orrs	r3, r1
    9a4e:	b2d9      	uxtb	r1, r3
    9a50:	1c03      	adds	r3, r0, #0
    9a52:	3308      	adds	r3, #8
    9a54:	015b      	lsls	r3, r3, #5
    9a56:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9a58:	687b      	ldr	r3, [r7, #4]
    9a5a:	681a      	ldr	r2, [r3, #0]
    9a5c:	1c3b      	adds	r3, r7, #0
    9a5e:	330f      	adds	r3, #15
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	3308      	adds	r3, #8
    9a64:	015b      	lsls	r3, r3, #5
    9a66:	18d3      	adds	r3, r2, r3
    9a68:	2280      	movs	r2, #128	; 0x80
    9a6a:	711a      	strb	r2, [r3, #4]
    9a6c:	e030      	b.n	9ad0 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    9a6e:	231c      	movs	r3, #28
    9a70:	e153      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    9a72:	687b      	ldr	r3, [r7, #4]
    9a74:	681b      	ldr	r3, [r3, #0]
    9a76:	1c3a      	adds	r2, r7, #0
    9a78:	320f      	adds	r2, #15
    9a7a:	7812      	ldrb	r2, [r2, #0]
    9a7c:	3208      	adds	r2, #8
    9a7e:	0152      	lsls	r2, r2, #5
    9a80:	5cd3      	ldrb	r3, [r2, r3]
    9a82:	b2db      	uxtb	r3, r3
    9a84:	1c1a      	adds	r2, r3, #0
    9a86:	2307      	movs	r3, #7
    9a88:	4013      	ands	r3, r2
    9a8a:	d11f      	bne.n	9acc <usb_device_endpoint_set_config+0x274>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	681a      	ldr	r2, [r3, #0]
    9a90:	1c3b      	adds	r3, r7, #0
    9a92:	330f      	adds	r3, #15
    9a94:	7818      	ldrb	r0, [r3, #0]
    9a96:	687b      	ldr	r3, [r7, #4]
    9a98:	681b      	ldr	r3, [r3, #0]
    9a9a:	1c39      	adds	r1, r7, #0
    9a9c:	310f      	adds	r1, #15
    9a9e:	7809      	ldrb	r1, [r1, #0]
    9aa0:	3108      	adds	r1, #8
    9aa2:	0149      	lsls	r1, r1, #5
    9aa4:	5ccb      	ldrb	r3, [r1, r3]
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	2102      	movs	r1, #2
    9aaa:	430b      	orrs	r3, r1
    9aac:	b2d9      	uxtb	r1, r3
    9aae:	1c03      	adds	r3, r0, #0
    9ab0:	3308      	adds	r3, #8
    9ab2:	015b      	lsls	r3, r3, #5
    9ab4:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	681a      	ldr	r2, [r3, #0]
    9aba:	1c3b      	adds	r3, r7, #0
    9abc:	330f      	adds	r3, #15
    9abe:	781b      	ldrb	r3, [r3, #0]
    9ac0:	3308      	adds	r3, #8
    9ac2:	015b      	lsls	r3, r3, #5
    9ac4:	18d3      	adds	r3, r2, r3
    9ac6:	2240      	movs	r2, #64	; 0x40
    9ac8:	715a      	strb	r2, [r3, #5]
    9aca:	e001      	b.n	9ad0 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    9acc:	231c      	movs	r3, #28
    9ace:	e124      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9ad0:	e0cf      	b.n	9c72 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    9ad2:	1c3b      	adds	r3, r7, #0
    9ad4:	330e      	adds	r3, #14
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d02e      	beq.n	9b3a <usb_device_endpoint_set_config+0x2e2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    9adc:	687b      	ldr	r3, [r7, #4]
    9ade:	681b      	ldr	r3, [r3, #0]
    9ae0:	1c3a      	adds	r2, r7, #0
    9ae2:	320f      	adds	r2, #15
    9ae4:	7812      	ldrb	r2, [r2, #0]
    9ae6:	3208      	adds	r2, #8
    9ae8:	0152      	lsls	r2, r2, #5
    9aea:	5cd3      	ldrb	r3, [r2, r3]
    9aec:	b2db      	uxtb	r3, r3
    9aee:	1c1a      	adds	r2, r3, #0
    9af0:	2370      	movs	r3, #112	; 0x70
    9af2:	4013      	ands	r3, r2
    9af4:	d11f      	bne.n	9b36 <usb_device_endpoint_set_config+0x2de>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	681a      	ldr	r2, [r3, #0]
    9afa:	1c3b      	adds	r3, r7, #0
    9afc:	330f      	adds	r3, #15
    9afe:	7818      	ldrb	r0, [r3, #0]
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	681b      	ldr	r3, [r3, #0]
    9b04:	1c39      	adds	r1, r7, #0
    9b06:	310f      	adds	r1, #15
    9b08:	7809      	ldrb	r1, [r1, #0]
    9b0a:	3108      	adds	r1, #8
    9b0c:	0149      	lsls	r1, r1, #5
    9b0e:	5ccb      	ldrb	r3, [r1, r3]
    9b10:	b2db      	uxtb	r3, r3
    9b12:	2130      	movs	r1, #48	; 0x30
    9b14:	430b      	orrs	r3, r1
    9b16:	b2d9      	uxtb	r1, r3
    9b18:	1c03      	adds	r3, r0, #0
    9b1a:	3308      	adds	r3, #8
    9b1c:	015b      	lsls	r3, r3, #5
    9b1e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	681a      	ldr	r2, [r3, #0]
    9b24:	1c3b      	adds	r3, r7, #0
    9b26:	330f      	adds	r3, #15
    9b28:	781b      	ldrb	r3, [r3, #0]
    9b2a:	3308      	adds	r3, #8
    9b2c:	015b      	lsls	r3, r3, #5
    9b2e:	18d3      	adds	r3, r2, r3
    9b30:	2280      	movs	r2, #128	; 0x80
    9b32:	711a      	strb	r2, [r3, #4]
    9b34:	e030      	b.n	9b98 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    9b36:	231c      	movs	r3, #28
    9b38:	e0ef      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	681b      	ldr	r3, [r3, #0]
    9b3e:	1c3a      	adds	r2, r7, #0
    9b40:	320f      	adds	r2, #15
    9b42:	7812      	ldrb	r2, [r2, #0]
    9b44:	3208      	adds	r2, #8
    9b46:	0152      	lsls	r2, r2, #5
    9b48:	5cd3      	ldrb	r3, [r2, r3]
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	1c1a      	adds	r2, r3, #0
    9b4e:	2307      	movs	r3, #7
    9b50:	4013      	ands	r3, r2
    9b52:	d11f      	bne.n	9b94 <usb_device_endpoint_set_config+0x33c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	681a      	ldr	r2, [r3, #0]
    9b58:	1c3b      	adds	r3, r7, #0
    9b5a:	330f      	adds	r3, #15
    9b5c:	7818      	ldrb	r0, [r3, #0]
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	681b      	ldr	r3, [r3, #0]
    9b62:	1c39      	adds	r1, r7, #0
    9b64:	310f      	adds	r1, #15
    9b66:	7809      	ldrb	r1, [r1, #0]
    9b68:	3108      	adds	r1, #8
    9b6a:	0149      	lsls	r1, r1, #5
    9b6c:	5ccb      	ldrb	r3, [r1, r3]
    9b6e:	b2db      	uxtb	r3, r3
    9b70:	2103      	movs	r1, #3
    9b72:	430b      	orrs	r3, r1
    9b74:	b2d9      	uxtb	r1, r3
    9b76:	1c03      	adds	r3, r0, #0
    9b78:	3308      	adds	r3, #8
    9b7a:	015b      	lsls	r3, r3, #5
    9b7c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9b7e:	687b      	ldr	r3, [r7, #4]
    9b80:	681a      	ldr	r2, [r3, #0]
    9b82:	1c3b      	adds	r3, r7, #0
    9b84:	330f      	adds	r3, #15
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	3308      	adds	r3, #8
    9b8a:	015b      	lsls	r3, r3, #5
    9b8c:	18d3      	adds	r3, r2, r3
    9b8e:	2240      	movs	r2, #64	; 0x40
    9b90:	715a      	strb	r2, [r3, #5]
    9b92:	e001      	b.n	9b98 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    9b94:	231c      	movs	r3, #28
    9b96:	e0c0      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9b98:	e06b      	b.n	9c72 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    9b9a:	1c3b      	adds	r3, r7, #0
    9b9c:	330e      	adds	r3, #14
    9b9e:	781b      	ldrb	r3, [r3, #0]
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d035      	beq.n	9c10 <usb_device_endpoint_set_config+0x3b8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	681b      	ldr	r3, [r3, #0]
    9ba8:	1c3a      	adds	r2, r7, #0
    9baa:	320f      	adds	r2, #15
    9bac:	7812      	ldrb	r2, [r2, #0]
    9bae:	3208      	adds	r2, #8
    9bb0:	0152      	lsls	r2, r2, #5
    9bb2:	5cd3      	ldrb	r3, [r2, r3]
    9bb4:	b2db      	uxtb	r3, r3
    9bb6:	1c1a      	adds	r2, r3, #0
    9bb8:	2370      	movs	r3, #112	; 0x70
    9bba:	4013      	ands	r3, r2
    9bbc:	d11f      	bne.n	9bfe <usb_device_endpoint_set_config+0x3a6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	681a      	ldr	r2, [r3, #0]
    9bc2:	1c3b      	adds	r3, r7, #0
    9bc4:	330f      	adds	r3, #15
    9bc6:	7818      	ldrb	r0, [r3, #0]
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	681b      	ldr	r3, [r3, #0]
    9bcc:	1c39      	adds	r1, r7, #0
    9bce:	310f      	adds	r1, #15
    9bd0:	7809      	ldrb	r1, [r1, #0]
    9bd2:	3108      	adds	r1, #8
    9bd4:	0149      	lsls	r1, r1, #5
    9bd6:	5ccb      	ldrb	r3, [r1, r3]
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	2140      	movs	r1, #64	; 0x40
    9bdc:	430b      	orrs	r3, r1
    9bde:	b2d9      	uxtb	r1, r3
    9be0:	1c03      	adds	r3, r0, #0
    9be2:	3308      	adds	r3, #8
    9be4:	015b      	lsls	r3, r3, #5
    9be6:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	681a      	ldr	r2, [r3, #0]
    9bec:	1c3b      	adds	r3, r7, #0
    9bee:	330f      	adds	r3, #15
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	3308      	adds	r3, #8
    9bf4:	015b      	lsls	r3, r3, #5
    9bf6:	18d3      	adds	r3, r2, r3
    9bf8:	2280      	movs	r2, #128	; 0x80
    9bfa:	711a      	strb	r2, [r3, #4]
    9bfc:	e037      	b.n	9c6e <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    9bfe:	231c      	movs	r3, #28
    9c00:	e08b      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
    9c02:	46c0      	nop			; (mov r8, r8)
    9c04:	0000bb40 	.word	0x0000bb40
    9c08:	20006bf4 	.word	0x20006bf4
    9c0c:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	681b      	ldr	r3, [r3, #0]
    9c14:	1c3a      	adds	r2, r7, #0
    9c16:	320f      	adds	r2, #15
    9c18:	7812      	ldrb	r2, [r2, #0]
    9c1a:	3208      	adds	r2, #8
    9c1c:	0152      	lsls	r2, r2, #5
    9c1e:	5cd3      	ldrb	r3, [r2, r3]
    9c20:	b2db      	uxtb	r3, r3
    9c22:	1c1a      	adds	r2, r3, #0
    9c24:	2307      	movs	r3, #7
    9c26:	4013      	ands	r3, r2
    9c28:	d11f      	bne.n	9c6a <usb_device_endpoint_set_config+0x412>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    9c2a:	687b      	ldr	r3, [r7, #4]
    9c2c:	681a      	ldr	r2, [r3, #0]
    9c2e:	1c3b      	adds	r3, r7, #0
    9c30:	330f      	adds	r3, #15
    9c32:	7818      	ldrb	r0, [r3, #0]
    9c34:	687b      	ldr	r3, [r7, #4]
    9c36:	681b      	ldr	r3, [r3, #0]
    9c38:	1c39      	adds	r1, r7, #0
    9c3a:	310f      	adds	r1, #15
    9c3c:	7809      	ldrb	r1, [r1, #0]
    9c3e:	3108      	adds	r1, #8
    9c40:	0149      	lsls	r1, r1, #5
    9c42:	5ccb      	ldrb	r3, [r1, r3]
    9c44:	b2db      	uxtb	r3, r3
    9c46:	2104      	movs	r1, #4
    9c48:	430b      	orrs	r3, r1
    9c4a:	b2d9      	uxtb	r1, r3
    9c4c:	1c03      	adds	r3, r0, #0
    9c4e:	3308      	adds	r3, #8
    9c50:	015b      	lsls	r3, r3, #5
    9c52:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	681a      	ldr	r2, [r3, #0]
    9c58:	1c3b      	adds	r3, r7, #0
    9c5a:	330f      	adds	r3, #15
    9c5c:	781b      	ldrb	r3, [r3, #0]
    9c5e:	3308      	adds	r3, #8
    9c60:	015b      	lsls	r3, r3, #5
    9c62:	18d3      	adds	r3, r2, r3
    9c64:	2240      	movs	r2, #64	; 0x40
    9c66:	715a      	strb	r2, [r3, #5]
    9c68:	e001      	b.n	9c6e <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    9c6a:	231c      	movs	r3, #28
    9c6c:	e055      	b.n	9d1a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9c6e:	e000      	b.n	9c72 <usb_device_endpoint_set_config+0x41a>

		default:
			break;
    9c70:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    9c72:	1c3b      	adds	r3, r7, #0
    9c74:	330f      	adds	r3, #15
    9c76:	7818      	ldrb	r0, [r3, #0]
    9c78:	1c3b      	adds	r3, r7, #0
    9c7a:	330e      	adds	r3, #14
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	683a      	ldr	r2, [r7, #0]
    9c80:	7852      	ldrb	r2, [r2, #1]
    9c82:	1c11      	adds	r1, r2, #0
    9c84:	2207      	movs	r2, #7
    9c86:	400a      	ands	r2, r1
    9c88:	b2d1      	uxtb	r1, r2
    9c8a:	4a26      	ldr	r2, [pc, #152]	; (9d24 <usb_device_endpoint_set_config+0x4cc>)
    9c8c:	0040      	lsls	r0, r0, #1
    9c8e:	18c3      	adds	r3, r0, r3
    9c90:	011b      	lsls	r3, r3, #4
    9c92:	18d3      	adds	r3, r2, r3
    9c94:	2207      	movs	r2, #7
    9c96:	400a      	ands	r2, r1
    9c98:	0712      	lsls	r2, r2, #28
    9c9a:	6858      	ldr	r0, [r3, #4]
    9c9c:	4922      	ldr	r1, [pc, #136]	; (9d28 <usb_device_endpoint_set_config+0x4d0>)
    9c9e:	4001      	ands	r1, r0
    9ca0:	430a      	orrs	r2, r1
    9ca2:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    9ca4:	683b      	ldr	r3, [r7, #0]
    9ca6:	789b      	ldrb	r3, [r3, #2]
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d01b      	beq.n	9ce4 <usb_device_endpoint_set_config+0x48c>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9cac:	1c3b      	adds	r3, r7, #0
    9cae:	330f      	adds	r3, #15
    9cb0:	781c      	ldrb	r4, [r3, #0]
    9cb2:	1c3b      	adds	r3, r7, #0
    9cb4:	330e      	adds	r3, #14
    9cb6:	7818      	ldrb	r0, [r3, #0]
    9cb8:	1c3b      	adds	r3, r7, #0
    9cba:	330f      	adds	r3, #15
    9cbc:	7819      	ldrb	r1, [r3, #0]
    9cbe:	1c3b      	adds	r3, r7, #0
    9cc0:	330e      	adds	r3, #14
    9cc2:	781b      	ldrb	r3, [r3, #0]
    9cc4:	4a17      	ldr	r2, [pc, #92]	; (9d24 <usb_device_endpoint_set_config+0x4cc>)
    9cc6:	0049      	lsls	r1, r1, #1
    9cc8:	18cb      	adds	r3, r1, r3
    9cca:	011b      	lsls	r3, r3, #4
    9ccc:	18d3      	adds	r3, r2, r3
    9cce:	685b      	ldr	r3, [r3, #4]
    9cd0:	2280      	movs	r2, #128	; 0x80
    9cd2:	0612      	lsls	r2, r2, #24
    9cd4:	431a      	orrs	r2, r3
    9cd6:	4913      	ldr	r1, [pc, #76]	; (9d24 <usb_device_endpoint_set_config+0x4cc>)
    9cd8:	0063      	lsls	r3, r4, #1
    9cda:	181b      	adds	r3, r3, r0
    9cdc:	011b      	lsls	r3, r3, #4
    9cde:	18cb      	adds	r3, r1, r3
    9ce0:	605a      	str	r2, [r3, #4]
    9ce2:	e019      	b.n	9d18 <usb_device_endpoint_set_config+0x4c0>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9ce4:	1c3b      	adds	r3, r7, #0
    9ce6:	330f      	adds	r3, #15
    9ce8:	781c      	ldrb	r4, [r3, #0]
    9cea:	1c3b      	adds	r3, r7, #0
    9cec:	330e      	adds	r3, #14
    9cee:	7818      	ldrb	r0, [r3, #0]
    9cf0:	1c3b      	adds	r3, r7, #0
    9cf2:	330f      	adds	r3, #15
    9cf4:	7819      	ldrb	r1, [r3, #0]
    9cf6:	1c3b      	adds	r3, r7, #0
    9cf8:	330e      	adds	r3, #14
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	4a09      	ldr	r2, [pc, #36]	; (9d24 <usb_device_endpoint_set_config+0x4cc>)
    9cfe:	0049      	lsls	r1, r1, #1
    9d00:	18cb      	adds	r3, r1, r3
    9d02:	011b      	lsls	r3, r3, #4
    9d04:	18d3      	adds	r3, r2, r3
    9d06:	685b      	ldr	r3, [r3, #4]
    9d08:	005b      	lsls	r3, r3, #1
    9d0a:	085a      	lsrs	r2, r3, #1
    9d0c:	4905      	ldr	r1, [pc, #20]	; (9d24 <usb_device_endpoint_set_config+0x4cc>)
    9d0e:	0063      	lsls	r3, r4, #1
    9d10:	181b      	adds	r3, r3, r0
    9d12:	011b      	lsls	r3, r3, #4
    9d14:	18cb      	adds	r3, r1, r3
    9d16:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    9d18:	2300      	movs	r3, #0
}
    9d1a:	1c18      	adds	r0, r3, #0
    9d1c:	46bd      	mov	sp, r7
    9d1e:	b005      	add	sp, #20
    9d20:	bd90      	pop	{r4, r7, pc}
    9d22:	46c0      	nop			; (mov r8, r8)
    9d24:	20006bf4 	.word	0x20006bf4
    9d28:	8fffffff 	.word	0x8fffffff

00009d2c <usb_device_endpoint_is_configured>:
 * \param ep            Endpoint address (direction & number)
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b084      	sub	sp, #16
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
    9d34:	1c0a      	adds	r2, r1, #0
    9d36:	1cfb      	adds	r3, r7, #3
    9d38:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9d3a:	1c3b      	adds	r3, r7, #0
    9d3c:	330e      	adds	r3, #14
    9d3e:	1cfa      	adds	r2, r7, #3
    9d40:	7811      	ldrb	r1, [r2, #0]
    9d42:	220f      	movs	r2, #15
    9d44:	400a      	ands	r2, r1
    9d46:	701a      	strb	r2, [r3, #0]
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    9d48:	1cfb      	adds	r3, r7, #3
    9d4a:	781b      	ldrb	r3, [r3, #0]
    9d4c:	b25b      	sxtb	r3, r3
    9d4e:	2b00      	cmp	r3, #0
    9d50:	da11      	bge.n	9d76 <usb_device_endpoint_is_configured+0x4a>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    9d52:	687b      	ldr	r3, [r7, #4]
    9d54:	681b      	ldr	r3, [r3, #0]
    9d56:	1c3a      	adds	r2, r7, #0
    9d58:	320e      	adds	r2, #14
    9d5a:	7812      	ldrb	r2, [r2, #0]
    9d5c:	3208      	adds	r2, #8
    9d5e:	0152      	lsls	r2, r2, #5
    9d60:	5cd3      	ldrb	r3, [r2, r3]
    9d62:	b2db      	uxtb	r3, r3
    9d64:	091b      	lsrs	r3, r3, #4
    9d66:	1c1a      	adds	r2, r3, #0
    9d68:	2307      	movs	r3, #7
    9d6a:	4013      	ands	r3, r2
    9d6c:	b2da      	uxtb	r2, r3
    9d6e:	1c3b      	adds	r3, r7, #0
    9d70:	330f      	adds	r3, #15
    9d72:	701a      	strb	r2, [r3, #0]
    9d74:	e00d      	b.n	9d92 <usb_device_endpoint_is_configured+0x66>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	681b      	ldr	r3, [r3, #0]
    9d7a:	1c3a      	adds	r2, r7, #0
    9d7c:	320e      	adds	r2, #14
    9d7e:	7812      	ldrb	r2, [r2, #0]
    9d80:	3208      	adds	r2, #8
    9d82:	0152      	lsls	r2, r2, #5
    9d84:	5cd2      	ldrb	r2, [r2, r3]
    9d86:	2307      	movs	r3, #7
    9d88:	4013      	ands	r3, r2
    9d8a:	b2da      	uxtb	r2, r3
    9d8c:	1c3b      	adds	r3, r7, #0
    9d8e:	330f      	adds	r3, #15
    9d90:	701a      	strb	r2, [r3, #0]
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    9d92:	1c3b      	adds	r3, r7, #0
    9d94:	330f      	adds	r3, #15
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	1e5a      	subs	r2, r3, #1
    9d9a:	4193      	sbcs	r3, r2
    9d9c:	b2db      	uxtb	r3, r3
}
    9d9e:	1c18      	adds	r0, r3, #0
    9da0:	46bd      	mov	sp, r7
    9da2:	b004      	add	sp, #16
    9da4:	bd80      	pop	{r7, pc}
    9da6:	46c0      	nop			; (mov r8, r8)

00009da8 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b084      	sub	sp, #16
    9dac:	af00      	add	r7, sp, #0
    9dae:	6078      	str	r0, [r7, #4]
    9db0:	1c0a      	adds	r2, r1, #0
    9db2:	1cfb      	adds	r3, r7, #3
    9db4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    9db6:	1c3b      	adds	r3, r7, #0
    9db8:	330f      	adds	r3, #15
    9dba:	1cfa      	adds	r2, r7, #3
    9dbc:	7811      	ldrb	r1, [r2, #0]
    9dbe:	220f      	movs	r2, #15
    9dc0:	400a      	ands	r2, r1
    9dc2:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    9dc4:	1cfb      	adds	r3, r7, #3
    9dc6:	781b      	ldrb	r3, [r3, #0]
    9dc8:	b25b      	sxtb	r3, r3
    9dca:	2b00      	cmp	r3, #0
    9dcc:	da14      	bge.n	9df8 <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9dce:	687b      	ldr	r3, [r7, #4]
    9dd0:	681a      	ldr	r2, [r3, #0]
    9dd2:	1c3b      	adds	r3, r7, #0
    9dd4:	330f      	adds	r3, #15
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	3308      	adds	r3, #8
    9dda:	015b      	lsls	r3, r3, #5
    9ddc:	18d3      	adds	r3, r2, r3
    9dde:	2280      	movs	r2, #128	; 0x80
    9de0:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    9de2:	687b      	ldr	r3, [r7, #4]
    9de4:	681a      	ldr	r2, [r3, #0]
    9de6:	1c3b      	adds	r3, r7, #0
    9de8:	330f      	adds	r3, #15
    9dea:	781b      	ldrb	r3, [r3, #0]
    9dec:	3308      	adds	r3, #8
    9dee:	015b      	lsls	r3, r3, #5
    9df0:	18d3      	adds	r3, r2, r3
    9df2:	2202      	movs	r2, #2
    9df4:	71da      	strb	r2, [r3, #7]
    9df6:	e013      	b.n	9e20 <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9df8:	687b      	ldr	r3, [r7, #4]
    9dfa:	681a      	ldr	r2, [r3, #0]
    9dfc:	1c3b      	adds	r3, r7, #0
    9dfe:	330f      	adds	r3, #15
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	3308      	adds	r3, #8
    9e04:	015b      	lsls	r3, r3, #5
    9e06:	18d3      	adds	r3, r2, r3
    9e08:	2240      	movs	r2, #64	; 0x40
    9e0a:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	681a      	ldr	r2, [r3, #0]
    9e10:	1c3b      	adds	r3, r7, #0
    9e12:	330f      	adds	r3, #15
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	3308      	adds	r3, #8
    9e18:	015b      	lsls	r3, r3, #5
    9e1a:	18d3      	adds	r3, r2, r3
    9e1c:	2201      	movs	r2, #1
    9e1e:	71da      	strb	r2, [r3, #7]
	}
}
    9e20:	46bd      	mov	sp, r7
    9e22:	b004      	add	sp, #16
    9e24:	bd80      	pop	{r7, pc}
    9e26:	46c0      	nop			; (mov r8, r8)

00009e28 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    9e28:	b580      	push	{r7, lr}
    9e2a:	b084      	sub	sp, #16
    9e2c:	af00      	add	r7, sp, #0
    9e2e:	6078      	str	r0, [r7, #4]
    9e30:	1c0a      	adds	r2, r1, #0
    9e32:	1cfb      	adds	r3, r7, #3
    9e34:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9e36:	1c3b      	adds	r3, r7, #0
    9e38:	330f      	adds	r3, #15
    9e3a:	1cfa      	adds	r2, r7, #3
    9e3c:	7811      	ldrb	r1, [r2, #0]
    9e3e:	220f      	movs	r2, #15
    9e40:	400a      	ands	r2, r1
    9e42:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    9e44:	1cfb      	adds	r3, r7, #3
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	b25b      	sxtb	r3, r3
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	da10      	bge.n	9e70 <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	681a      	ldr	r2, [r3, #0]
    9e52:	1c3b      	adds	r3, r7, #0
    9e54:	330f      	adds	r3, #15
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	3308      	adds	r3, #8
    9e5a:	015b      	lsls	r3, r3, #5
    9e5c:	18d3      	adds	r3, r2, r3
    9e5e:	799b      	ldrb	r3, [r3, #6]
    9e60:	b2db      	uxtb	r3, r3
    9e62:	1c1a      	adds	r2, r3, #0
    9e64:	2320      	movs	r3, #32
    9e66:	4013      	ands	r3, r2
    9e68:	1e5a      	subs	r2, r3, #1
    9e6a:	4193      	sbcs	r3, r2
    9e6c:	b2db      	uxtb	r3, r3
    9e6e:	e00f      	b.n	9e90 <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	681a      	ldr	r2, [r3, #0]
    9e74:	1c3b      	adds	r3, r7, #0
    9e76:	330f      	adds	r3, #15
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	3308      	adds	r3, #8
    9e7c:	015b      	lsls	r3, r3, #5
    9e7e:	18d3      	adds	r3, r2, r3
    9e80:	799b      	ldrb	r3, [r3, #6]
    9e82:	b2db      	uxtb	r3, r3
    9e84:	1c1a      	adds	r2, r3, #0
    9e86:	2310      	movs	r3, #16
    9e88:	4013      	ands	r3, r2
    9e8a:	1e5a      	subs	r2, r3, #1
    9e8c:	4193      	sbcs	r3, r2
    9e8e:	b2db      	uxtb	r3, r3
	}
}
    9e90:	1c18      	adds	r0, r3, #0
    9e92:	46bd      	mov	sp, r7
    9e94:	b004      	add	sp, #16
    9e96:	bd80      	pop	{r7, pc}

00009e98 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    9e98:	b580      	push	{r7, lr}
    9e9a:	b084      	sub	sp, #16
    9e9c:	af00      	add	r7, sp, #0
    9e9e:	6078      	str	r0, [r7, #4]
    9ea0:	1c0a      	adds	r2, r1, #0
    9ea2:	1cfb      	adds	r3, r7, #3
    9ea4:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9ea6:	1c3b      	adds	r3, r7, #0
    9ea8:	330f      	adds	r3, #15
    9eaa:	1cfa      	adds	r2, r7, #3
    9eac:	7811      	ldrb	r1, [r2, #0]
    9eae:	220f      	movs	r2, #15
    9eb0:	400a      	ands	r2, r1
    9eb2:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    9eb4:	1cfb      	adds	r3, r7, #3
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	b25b      	sxtb	r3, r3
    9eba:	2b00      	cmp	r3, #0
    9ebc:	da0a      	bge.n	9ed4 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9ebe:	687b      	ldr	r3, [r7, #4]
    9ec0:	681a      	ldr	r2, [r3, #0]
    9ec2:	1c3b      	adds	r3, r7, #0
    9ec4:	330f      	adds	r3, #15
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	3308      	adds	r3, #8
    9eca:	015b      	lsls	r3, r3, #5
    9ecc:	18d3      	adds	r3, r2, r3
    9ece:	2220      	movs	r2, #32
    9ed0:	715a      	strb	r2, [r3, #5]
    9ed2:	e009      	b.n	9ee8 <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    9ed4:	687b      	ldr	r3, [r7, #4]
    9ed6:	681a      	ldr	r2, [r3, #0]
    9ed8:	1c3b      	adds	r3, r7, #0
    9eda:	330f      	adds	r3, #15
    9edc:	781b      	ldrb	r3, [r3, #0]
    9ede:	3308      	adds	r3, #8
    9ee0:	015b      	lsls	r3, r3, #5
    9ee2:	18d3      	adds	r3, r2, r3
    9ee4:	2210      	movs	r2, #16
    9ee6:	715a      	strb	r2, [r3, #5]
	}
}
    9ee8:	46bd      	mov	sp, r7
    9eea:	b004      	add	sp, #16
    9eec:	bd80      	pop	{r7, pc}
    9eee:	46c0      	nop			; (mov r8, r8)

00009ef0 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    9ef0:	b580      	push	{r7, lr}
    9ef2:	b084      	sub	sp, #16
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	6078      	str	r0, [r7, #4]
    9ef8:	1c0a      	adds	r2, r1, #0
    9efa:	1cfb      	adds	r3, r7, #3
    9efc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9efe:	1c3b      	adds	r3, r7, #0
    9f00:	330f      	adds	r3, #15
    9f02:	1cfa      	adds	r2, r7, #3
    9f04:	7811      	ldrb	r1, [r2, #0]
    9f06:	220f      	movs	r2, #15
    9f08:	400a      	ands	r2, r1
    9f0a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    9f0c:	1cfb      	adds	r3, r7, #3
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	b25b      	sxtb	r3, r3
    9f12:	2b00      	cmp	r3, #0
    9f14:	da3a      	bge.n	9f8c <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    9f16:	687b      	ldr	r3, [r7, #4]
    9f18:	681a      	ldr	r2, [r3, #0]
    9f1a:	1c3b      	adds	r3, r7, #0
    9f1c:	330f      	adds	r3, #15
    9f1e:	781b      	ldrb	r3, [r3, #0]
    9f20:	3308      	adds	r3, #8
    9f22:	015b      	lsls	r3, r3, #5
    9f24:	18d3      	adds	r3, r2, r3
    9f26:	799b      	ldrb	r3, [r3, #6]
    9f28:	b2db      	uxtb	r3, r3
    9f2a:	1c1a      	adds	r2, r3, #0
    9f2c:	2320      	movs	r3, #32
    9f2e:	4013      	ands	r3, r2
    9f30:	d066      	beq.n	a000 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	681a      	ldr	r2, [r3, #0]
    9f36:	1c3b      	adds	r3, r7, #0
    9f38:	330f      	adds	r3, #15
    9f3a:	781b      	ldrb	r3, [r3, #0]
    9f3c:	3308      	adds	r3, #8
    9f3e:	015b      	lsls	r3, r3, #5
    9f40:	18d3      	adds	r3, r2, r3
    9f42:	2220      	movs	r2, #32
    9f44:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    9f46:	687b      	ldr	r3, [r7, #4]
    9f48:	681a      	ldr	r2, [r3, #0]
    9f4a:	1c3b      	adds	r3, r7, #0
    9f4c:	330f      	adds	r3, #15
    9f4e:	781b      	ldrb	r3, [r3, #0]
    9f50:	3308      	adds	r3, #8
    9f52:	015b      	lsls	r3, r3, #5
    9f54:	18d3      	adds	r3, r2, r3
    9f56:	79db      	ldrb	r3, [r3, #7]
    9f58:	b2db      	uxtb	r3, r3
    9f5a:	1c1a      	adds	r2, r3, #0
    9f5c:	2340      	movs	r3, #64	; 0x40
    9f5e:	4013      	ands	r3, r2
    9f60:	d04e      	beq.n	a000 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	681a      	ldr	r2, [r3, #0]
    9f66:	1c3b      	adds	r3, r7, #0
    9f68:	330f      	adds	r3, #15
    9f6a:	781b      	ldrb	r3, [r3, #0]
    9f6c:	3308      	adds	r3, #8
    9f6e:	015b      	lsls	r3, r3, #5
    9f70:	18d3      	adds	r3, r2, r3
    9f72:	2240      	movs	r2, #64	; 0x40
    9f74:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	681a      	ldr	r2, [r3, #0]
    9f7a:	1c3b      	adds	r3, r7, #0
    9f7c:	330f      	adds	r3, #15
    9f7e:	781b      	ldrb	r3, [r3, #0]
    9f80:	3308      	adds	r3, #8
    9f82:	015b      	lsls	r3, r3, #5
    9f84:	18d3      	adds	r3, r2, r3
    9f86:	2202      	movs	r2, #2
    9f88:	711a      	strb	r2, [r3, #4]
    9f8a:	e039      	b.n	a000 <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    9f8c:	687b      	ldr	r3, [r7, #4]
    9f8e:	681a      	ldr	r2, [r3, #0]
    9f90:	1c3b      	adds	r3, r7, #0
    9f92:	330f      	adds	r3, #15
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	3308      	adds	r3, #8
    9f98:	015b      	lsls	r3, r3, #5
    9f9a:	18d3      	adds	r3, r2, r3
    9f9c:	799b      	ldrb	r3, [r3, #6]
    9f9e:	b2db      	uxtb	r3, r3
    9fa0:	1c1a      	adds	r2, r3, #0
    9fa2:	2310      	movs	r3, #16
    9fa4:	4013      	ands	r3, r2
    9fa6:	d02b      	beq.n	a000 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    9fa8:	687b      	ldr	r3, [r7, #4]
    9faa:	681a      	ldr	r2, [r3, #0]
    9fac:	1c3b      	adds	r3, r7, #0
    9fae:	330f      	adds	r3, #15
    9fb0:	781b      	ldrb	r3, [r3, #0]
    9fb2:	3308      	adds	r3, #8
    9fb4:	015b      	lsls	r3, r3, #5
    9fb6:	18d3      	adds	r3, r2, r3
    9fb8:	2210      	movs	r2, #16
    9fba:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9fbc:	687b      	ldr	r3, [r7, #4]
    9fbe:	681a      	ldr	r2, [r3, #0]
    9fc0:	1c3b      	adds	r3, r7, #0
    9fc2:	330f      	adds	r3, #15
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	3308      	adds	r3, #8
    9fc8:	015b      	lsls	r3, r3, #5
    9fca:	18d3      	adds	r3, r2, r3
    9fcc:	79db      	ldrb	r3, [r3, #7]
    9fce:	b2db      	uxtb	r3, r3
    9fd0:	1c1a      	adds	r2, r3, #0
    9fd2:	2320      	movs	r3, #32
    9fd4:	4013      	ands	r3, r2
    9fd6:	d013      	beq.n	a000 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9fd8:	687b      	ldr	r3, [r7, #4]
    9fda:	681a      	ldr	r2, [r3, #0]
    9fdc:	1c3b      	adds	r3, r7, #0
    9fde:	330f      	adds	r3, #15
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	3308      	adds	r3, #8
    9fe4:	015b      	lsls	r3, r3, #5
    9fe6:	18d3      	adds	r3, r2, r3
    9fe8:	2220      	movs	r2, #32
    9fea:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	681a      	ldr	r2, [r3, #0]
    9ff0:	1c3b      	adds	r3, r7, #0
    9ff2:	330f      	adds	r3, #15
    9ff4:	781b      	ldrb	r3, [r3, #0]
    9ff6:	3308      	adds	r3, #8
    9ff8:	015b      	lsls	r3, r3, #5
    9ffa:	18d3      	adds	r3, r2, r3
    9ffc:	2201      	movs	r2, #1
    9ffe:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    a000:	46bd      	mov	sp, r7
    a002:	b004      	add	sp, #16
    a004:	bd80      	pop	{r7, pc}
    a006:	46c0      	nop			; (mov r8, r8)

0000a008 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    a008:	b580      	push	{r7, lr}
    a00a:	b086      	sub	sp, #24
    a00c:	af00      	add	r7, sp, #0
    a00e:	60f8      	str	r0, [r7, #12]
    a010:	607a      	str	r2, [r7, #4]
    a012:	603b      	str	r3, [r7, #0]
    a014:	1c3b      	adds	r3, r7, #0
    a016:	330b      	adds	r3, #11
    a018:	1c0a      	adds	r2, r1, #0
    a01a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    a01c:	68fb      	ldr	r3, [r7, #12]
    a01e:	681b      	ldr	r3, [r3, #0]
    a020:	1c3a      	adds	r2, r7, #0
    a022:	320b      	adds	r2, #11
    a024:	7812      	ldrb	r2, [r2, #0]
    a026:	3208      	adds	r2, #8
    a028:	0152      	lsls	r2, r2, #5
    a02a:	5cd3      	ldrb	r3, [r2, r3]
    a02c:	b2db      	uxtb	r3, r3
    a02e:	091b      	lsrs	r3, r3, #4
    a030:	1c1a      	adds	r2, r3, #0
    a032:	2307      	movs	r3, #7
    a034:	4013      	ands	r3, r2
    a036:	b2da      	uxtb	r2, r3
    a038:	1c3b      	adds	r3, r7, #0
    a03a:	3317      	adds	r3, #23
    a03c:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    a03e:	1c3b      	adds	r3, r7, #0
    a040:	3317      	adds	r3, #23
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	2b00      	cmp	r3, #0
    a046:	d101      	bne.n	a04c <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    a048:	231c      	movs	r3, #28
    a04a:	e031      	b.n	a0b0 <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    a04c:	1c3b      	adds	r3, r7, #0
    a04e:	330b      	adds	r3, #11
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	687a      	ldr	r2, [r7, #4]
    a054:	4918      	ldr	r1, [pc, #96]	; (a0b8 <usb_device_endpoint_write_buffer_job+0xb0>)
    a056:	015b      	lsls	r3, r3, #5
    a058:	18cb      	adds	r3, r1, r3
    a05a:	3310      	adds	r3, #16
    a05c:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    a05e:	1c3b      	adds	r3, r7, #0
    a060:	330b      	adds	r3, #11
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	4a14      	ldr	r2, [pc, #80]	; (a0b8 <usb_device_endpoint_write_buffer_job+0xb0>)
    a066:	015b      	lsls	r3, r3, #5
    a068:	18d3      	adds	r3, r2, r3
    a06a:	3310      	adds	r3, #16
    a06c:	6859      	ldr	r1, [r3, #4]
    a06e:	4a13      	ldr	r2, [pc, #76]	; (a0bc <usb_device_endpoint_write_buffer_job+0xb4>)
    a070:	400a      	ands	r2, r1
    a072:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    a074:	1c3b      	adds	r3, r7, #0
    a076:	330b      	adds	r3, #11
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	683a      	ldr	r2, [r7, #0]
    a07c:	b292      	uxth	r2, r2
    a07e:	0492      	lsls	r2, r2, #18
    a080:	0c92      	lsrs	r2, r2, #18
    a082:	b292      	uxth	r2, r2
    a084:	490c      	ldr	r1, [pc, #48]	; (a0b8 <usb_device_endpoint_write_buffer_job+0xb0>)
    a086:	015b      	lsls	r3, r3, #5
    a088:	18cb      	adds	r3, r1, r3
    a08a:	3310      	adds	r3, #16
    a08c:	0492      	lsls	r2, r2, #18
    a08e:	0c92      	lsrs	r2, r2, #18
    a090:	6859      	ldr	r1, [r3, #4]
    a092:	0b89      	lsrs	r1, r1, #14
    a094:	0389      	lsls	r1, r1, #14
    a096:	430a      	orrs	r2, r1
    a098:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    a09a:	68fb      	ldr	r3, [r7, #12]
    a09c:	681a      	ldr	r2, [r3, #0]
    a09e:	1c3b      	adds	r3, r7, #0
    a0a0:	330b      	adds	r3, #11
    a0a2:	781b      	ldrb	r3, [r3, #0]
    a0a4:	3308      	adds	r3, #8
    a0a6:	015b      	lsls	r3, r3, #5
    a0a8:	18d3      	adds	r3, r2, r3
    a0aa:	2280      	movs	r2, #128	; 0x80
    a0ac:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    a0ae:	2300      	movs	r3, #0
}
    a0b0:	1c18      	adds	r0, r3, #0
    a0b2:	46bd      	mov	sp, r7
    a0b4:	b006      	add	sp, #24
    a0b6:	bd80      	pop	{r7, pc}
    a0b8:	20006bf4 	.word	0x20006bf4
    a0bc:	f0003fff 	.word	0xf0003fff

0000a0c0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    a0c0:	b580      	push	{r7, lr}
    a0c2:	b086      	sub	sp, #24
    a0c4:	af00      	add	r7, sp, #0
    a0c6:	60f8      	str	r0, [r7, #12]
    a0c8:	607a      	str	r2, [r7, #4]
    a0ca:	603b      	str	r3, [r7, #0]
    a0cc:	1c3b      	adds	r3, r7, #0
    a0ce:	330b      	adds	r3, #11
    a0d0:	1c0a      	adds	r2, r1, #0
    a0d2:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    a0d4:	68fb      	ldr	r3, [r7, #12]
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	1c3a      	adds	r2, r7, #0
    a0da:	320b      	adds	r2, #11
    a0dc:	7812      	ldrb	r2, [r2, #0]
    a0de:	3208      	adds	r2, #8
    a0e0:	0152      	lsls	r2, r2, #5
    a0e2:	5cd2      	ldrb	r2, [r2, r3]
    a0e4:	2307      	movs	r3, #7
    a0e6:	4013      	ands	r3, r2
    a0e8:	b2da      	uxtb	r2, r3
    a0ea:	1c3b      	adds	r3, r7, #0
    a0ec:	3317      	adds	r3, #23
    a0ee:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    a0f0:	1c3b      	adds	r3, r7, #0
    a0f2:	3317      	adds	r3, #23
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d101      	bne.n	a0fe <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    a0fa:	231c      	movs	r3, #28
    a0fc:	e02e      	b.n	a15c <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    a0fe:	1c3b      	adds	r3, r7, #0
    a100:	330b      	adds	r3, #11
    a102:	781a      	ldrb	r2, [r3, #0]
    a104:	6879      	ldr	r1, [r7, #4]
    a106:	4b17      	ldr	r3, [pc, #92]	; (a164 <usb_device_endpoint_read_buffer_job+0xa4>)
    a108:	0152      	lsls	r2, r2, #5
    a10a:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    a10c:	1c3b      	adds	r3, r7, #0
    a10e:	330b      	adds	r3, #11
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	683a      	ldr	r2, [r7, #0]
    a114:	b292      	uxth	r2, r2
    a116:	0492      	lsls	r2, r2, #18
    a118:	0c92      	lsrs	r2, r2, #18
    a11a:	b292      	uxth	r2, r2
    a11c:	4911      	ldr	r1, [pc, #68]	; (a164 <usb_device_endpoint_read_buffer_job+0xa4>)
    a11e:	015b      	lsls	r3, r3, #5
    a120:	18cb      	adds	r3, r1, r3
    a122:	0492      	lsls	r2, r2, #18
    a124:	0c92      	lsrs	r2, r2, #18
    a126:	0392      	lsls	r2, r2, #14
    a128:	6858      	ldr	r0, [r3, #4]
    a12a:	490f      	ldr	r1, [pc, #60]	; (a168 <usb_device_endpoint_read_buffer_job+0xa8>)
    a12c:	4001      	ands	r1, r0
    a12e:	430a      	orrs	r2, r1
    a130:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    a132:	1c3b      	adds	r3, r7, #0
    a134:	330b      	adds	r3, #11
    a136:	781b      	ldrb	r3, [r3, #0]
    a138:	4a0a      	ldr	r2, [pc, #40]	; (a164 <usb_device_endpoint_read_buffer_job+0xa4>)
    a13a:	015b      	lsls	r3, r3, #5
    a13c:	18d3      	adds	r3, r2, r3
    a13e:	685a      	ldr	r2, [r3, #4]
    a140:	0b92      	lsrs	r2, r2, #14
    a142:	0392      	lsls	r2, r2, #14
    a144:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    a146:	68fb      	ldr	r3, [r7, #12]
    a148:	681a      	ldr	r2, [r3, #0]
    a14a:	1c3b      	adds	r3, r7, #0
    a14c:	330b      	adds	r3, #11
    a14e:	781b      	ldrb	r3, [r3, #0]
    a150:	3308      	adds	r3, #8
    a152:	015b      	lsls	r3, r3, #5
    a154:	18d3      	adds	r3, r2, r3
    a156:	2240      	movs	r2, #64	; 0x40
    a158:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    a15a:	2300      	movs	r3, #0
}
    a15c:	1c18      	adds	r0, r3, #0
    a15e:	46bd      	mov	sp, r7
    a160:	b006      	add	sp, #24
    a162:	bd80      	pop	{r7, pc}
    a164:	20006bf4 	.word	0x20006bf4
    a168:	f0003fff 	.word	0xf0003fff

0000a16c <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    a16c:	b580      	push	{r7, lr}
    a16e:	b082      	sub	sp, #8
    a170:	af00      	add	r7, sp, #0
    a172:	6078      	str	r0, [r7, #4]
    a174:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    a176:	683a      	ldr	r2, [r7, #0]
    a178:	4b0c      	ldr	r3, [pc, #48]	; (a1ac <usb_device_endpoint_setup_buffer_job+0x40>)
    a17a:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    a17c:	4b0b      	ldr	r3, [pc, #44]	; (a1ac <usb_device_endpoint_setup_buffer_job+0x40>)
    a17e:	6859      	ldr	r1, [r3, #4]
    a180:	4a0b      	ldr	r2, [pc, #44]	; (a1b0 <usb_device_endpoint_setup_buffer_job+0x44>)
    a182:	400a      	ands	r2, r1
    a184:	2180      	movs	r1, #128	; 0x80
    a186:	0289      	lsls	r1, r1, #10
    a188:	430a      	orrs	r2, r1
    a18a:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    a18c:	4b07      	ldr	r3, [pc, #28]	; (a1ac <usb_device_endpoint_setup_buffer_job+0x40>)
    a18e:	685a      	ldr	r2, [r3, #4]
    a190:	0b92      	lsrs	r2, r2, #14
    a192:	0392      	lsls	r2, r2, #14
    a194:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	681a      	ldr	r2, [r3, #0]
    a19a:	2382      	movs	r3, #130	; 0x82
    a19c:	005b      	lsls	r3, r3, #1
    a19e:	2140      	movs	r1, #64	; 0x40
    a1a0:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    a1a2:	2300      	movs	r3, #0
}
    a1a4:	1c18      	adds	r0, r3, #0
    a1a6:	46bd      	mov	sp, r7
    a1a8:	b002      	add	sp, #8
    a1aa:	bd80      	pop	{r7, pc}
    a1ac:	20006bf4 	.word	0x20006bf4
    a1b0:	f0003fff 	.word	0xf0003fff

0000a1b4 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b084      	sub	sp, #16
    a1b8:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    a1ba:	4bcc      	ldr	r3, [pc, #816]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a1bc:	681b      	ldr	r3, [r3, #0]
    a1be:	681a      	ldr	r2, [r3, #0]
    a1c0:	1c3b      	adds	r3, r7, #0
    a1c2:	3308      	adds	r3, #8
    a1c4:	8c12      	ldrh	r2, [r2, #32]
    a1c6:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    a1c8:	1c3b      	adds	r3, r7, #0
    a1ca:	3308      	adds	r3, #8
    a1cc:	881b      	ldrh	r3, [r3, #0]
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d158      	bne.n	a284 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    a1d2:	4bc6      	ldr	r3, [pc, #792]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a1d4:	681b      	ldr	r3, [r3, #0]
    a1d6:	681a      	ldr	r2, [r3, #0]
    a1d8:	1dbb      	adds	r3, r7, #6
    a1da:	8b92      	ldrh	r2, [r2, #28]
    a1dc:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    a1de:	4bc3      	ldr	r3, [pc, #780]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a1e0:	681a      	ldr	r2, [r3, #0]
    a1e2:	23ab      	movs	r3, #171	; 0xab
    a1e4:	005b      	lsls	r3, r3, #1
    a1e6:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    a1e8:	1dba      	adds	r2, r7, #6
    a1ea:	8812      	ldrh	r2, [r2, #0]
    a1ec:	4013      	ands	r3, r2
    a1ee:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    a1f0:	4bbe      	ldr	r3, [pc, #760]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a1f2:	6819      	ldr	r1, [r3, #0]
    a1f4:	23aa      	movs	r3, #170	; 0xaa
    a1f6:	005b      	lsls	r3, r3, #1
    a1f8:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    a1fa:	1d3b      	adds	r3, r7, #4
    a1fc:	400a      	ands	r2, r1
    a1fe:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    a200:	2300      	movs	r3, #0
    a202:	60fb      	str	r3, [r7, #12]
    a204:	e03a      	b.n	a27c <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    a206:	4bba      	ldr	r3, [pc, #744]	; (a4f0 <_usb_device_interrupt_handler+0x33c>)
    a208:	68fa      	ldr	r2, [r7, #12]
    a20a:	0052      	lsls	r2, r2, #1
    a20c:	5ad3      	ldrh	r3, [r2, r3]
    a20e:	1dba      	adds	r2, r7, #6
    a210:	8812      	ldrh	r2, [r2, #0]
    a212:	4013      	ands	r3, r2
    a214:	b29b      	uxth	r3, r3
    a216:	2b00      	cmp	r3, #0
    a218:	d007      	beq.n	a22a <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    a21a:	4bb4      	ldr	r3, [pc, #720]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a21c:	681b      	ldr	r3, [r3, #0]
    a21e:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    a220:	4ab3      	ldr	r2, [pc, #716]	; (a4f0 <_usb_device_interrupt_handler+0x33c>)
    a222:	68f9      	ldr	r1, [r7, #12]
    a224:	0049      	lsls	r1, r1, #1
    a226:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    a228:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    a22a:	4bb1      	ldr	r3, [pc, #708]	; (a4f0 <_usb_device_interrupt_handler+0x33c>)
    a22c:	68fa      	ldr	r2, [r7, #12]
    a22e:	0052      	lsls	r2, r2, #1
    a230:	5ad3      	ldrh	r3, [r2, r3]
    a232:	1d3a      	adds	r2, r7, #4
    a234:	8812      	ldrh	r2, [r2, #0]
    a236:	4013      	ands	r3, r2
    a238:	b29b      	uxth	r3, r3
    a23a:	2b00      	cmp	r3, #0
    a23c:	d01b      	beq.n	a276 <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    a23e:	68fb      	ldr	r3, [r7, #12]
    a240:	2b06      	cmp	r3, #6
    a242:	d10c      	bne.n	a25e <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    a244:	4bab      	ldr	r3, [pc, #684]	; (a4f4 <_usb_device_interrupt_handler+0x340>)
    a246:	891b      	ldrh	r3, [r3, #8]
    a248:	b29b      	uxth	r3, r3
    a24a:	091b      	lsrs	r3, r3, #4
    a24c:	055b      	lsls	r3, r3, #21
    a24e:	0d5b      	lsrs	r3, r3, #21
    a250:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    a252:	1c1a      	adds	r2, r3, #0
    a254:	2380      	movs	r3, #128	; 0x80
    a256:	005b      	lsls	r3, r3, #1
    a258:	401a      	ands	r2, r3
    a25a:	4ba7      	ldr	r3, [pc, #668]	; (a4f8 <_usb_device_interrupt_handler+0x344>)
    a25c:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    a25e:	4ba3      	ldr	r3, [pc, #652]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	68fa      	ldr	r2, [r7, #12]
    a264:	322e      	adds	r2, #46	; 0x2e
    a266:	0092      	lsls	r2, r2, #2
    a268:	58d2      	ldr	r2, [r2, r3]
    a26a:	4ba0      	ldr	r3, [pc, #640]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a26c:	6819      	ldr	r1, [r3, #0]
    a26e:	4ba2      	ldr	r3, [pc, #648]	; (a4f8 <_usb_device_interrupt_handler+0x344>)
    a270:	1c08      	adds	r0, r1, #0
    a272:	1c19      	adds	r1, r3, #0
    a274:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    a276:	68fb      	ldr	r3, [r7, #12]
    a278:	3301      	adds	r3, #1
    a27a:	60fb      	str	r3, [r7, #12]
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	2b06      	cmp	r3, #6
    a280:	ddc1      	ble.n	a206 <_usb_device_interrupt_handler+0x52>
    a282:	e239      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    a284:	1c3b      	adds	r3, r7, #0
    a286:	330b      	adds	r3, #11
    a288:	2200      	movs	r2, #0
    a28a:	701a      	strb	r2, [r3, #0]
    a28c:	e22e      	b.n	a6ec <_usb_device_interrupt_handler+0x538>

			if (ep_inst & (1 << i)) {
    a28e:	1c3b      	adds	r3, r7, #0
    a290:	3308      	adds	r3, #8
    a292:	881a      	ldrh	r2, [r3, #0]
    a294:	1c3b      	adds	r3, r7, #0
    a296:	330b      	adds	r3, #11
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	411a      	asrs	r2, r3
    a29c:	2301      	movs	r3, #1
    a29e:	4013      	ands	r3, r2
    a2a0:	d100      	bne.n	a2a4 <_usb_device_interrupt_handler+0xf0>
    a2a2:	e21c      	b.n	a6de <_usb_device_interrupt_handler+0x52a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    a2a4:	4b91      	ldr	r3, [pc, #580]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a2a6:	681b      	ldr	r3, [r3, #0]
    a2a8:	681a      	ldr	r2, [r3, #0]
    a2aa:	1c3b      	adds	r3, r7, #0
    a2ac:	330b      	adds	r3, #11
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	3308      	adds	r3, #8
    a2b2:	015b      	lsls	r3, r3, #5
    a2b4:	18d3      	adds	r3, r2, r3
    a2b6:	79db      	ldrb	r3, [r3, #7]
    a2b8:	b2da      	uxtb	r2, r3
    a2ba:	1dbb      	adds	r3, r7, #6
    a2bc:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    a2be:	4b8b      	ldr	r3, [pc, #556]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a2c0:	6819      	ldr	r1, [r3, #0]
    a2c2:	1c3b      	adds	r3, r7, #0
    a2c4:	330b      	adds	r3, #11
    a2c6:	781a      	ldrb	r2, [r3, #0]
    a2c8:	23b0      	movs	r3, #176	; 0xb0
    a2ca:	005b      	lsls	r3, r3, #1
    a2cc:	188a      	adds	r2, r1, r2
    a2ce:	18d3      	adds	r3, r2, r3
    a2d0:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    a2d2:	1dba      	adds	r2, r7, #6
    a2d4:	8812      	ldrh	r2, [r2, #0]
    a2d6:	4013      	ands	r3, r2
    a2d8:	b29b      	uxth	r3, r3
    a2da:	b299      	uxth	r1, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    a2dc:	4b83      	ldr	r3, [pc, #524]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a2de:	6818      	ldr	r0, [r3, #0]
    a2e0:	1c3b      	adds	r3, r7, #0
    a2e2:	330b      	adds	r3, #11
    a2e4:	781a      	ldrb	r2, [r3, #0]
    a2e6:	23ac      	movs	r3, #172	; 0xac
    a2e8:	005b      	lsls	r3, r3, #1
    a2ea:	1882      	adds	r2, r0, r2
    a2ec:	18d3      	adds	r3, r2, r3
    a2ee:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    a2f0:	1c1a      	adds	r2, r3, #0
    a2f2:	1c0b      	adds	r3, r1, #0
    a2f4:	4013      	ands	r3, r2
    a2f6:	b29a      	uxth	r2, r3
    a2f8:	1d3b      	adds	r3, r7, #4
    a2fa:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    a2fc:	1dbb      	adds	r3, r7, #6
    a2fe:	881a      	ldrh	r2, [r3, #0]
    a300:	2360      	movs	r3, #96	; 0x60
    a302:	4013      	ands	r3, r2
    a304:	d059      	beq.n	a3ba <_usb_device_interrupt_handler+0x206>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    a306:	4b79      	ldr	r3, [pc, #484]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a308:	681b      	ldr	r3, [r3, #0]
    a30a:	681a      	ldr	r2, [r3, #0]
    a30c:	1c3b      	adds	r3, r7, #0
    a30e:	330b      	adds	r3, #11
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	3308      	adds	r3, #8
    a314:	015b      	lsls	r3, r3, #5
    a316:	18d3      	adds	r3, r2, r3
    a318:	79db      	ldrb	r3, [r3, #7]
    a31a:	b2db      	uxtb	r3, r3
    a31c:	1c1a      	adds	r2, r3, #0
    a31e:	2340      	movs	r3, #64	; 0x40
    a320:	4013      	ands	r3, r2
    a322:	d014      	beq.n	a34e <_usb_device_interrupt_handler+0x19a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    a324:	4b71      	ldr	r3, [pc, #452]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a326:	681b      	ldr	r3, [r3, #0]
    a328:	681a      	ldr	r2, [r3, #0]
    a32a:	1c3b      	adds	r3, r7, #0
    a32c:	330b      	adds	r3, #11
    a32e:	781b      	ldrb	r3, [r3, #0]
    a330:	3308      	adds	r3, #8
    a332:	015b      	lsls	r3, r3, #5
    a334:	18d3      	adds	r3, r2, r3
    a336:	2240      	movs	r2, #64	; 0x40
    a338:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    a33a:	1c3b      	adds	r3, r7, #0
    a33c:	330b      	adds	r3, #11
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	2280      	movs	r2, #128	; 0x80
    a342:	4252      	negs	r2, r2
    a344:	4313      	orrs	r3, r2
    a346:	b2da      	uxtb	r2, r3
    a348:	4b6c      	ldr	r3, [pc, #432]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a34a:	719a      	strb	r2, [r3, #6]
    a34c:	e01e      	b.n	a38c <_usb_device_interrupt_handler+0x1d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    a34e:	4b67      	ldr	r3, [pc, #412]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a350:	681b      	ldr	r3, [r3, #0]
    a352:	681a      	ldr	r2, [r3, #0]
    a354:	1c3b      	adds	r3, r7, #0
    a356:	330b      	adds	r3, #11
    a358:	781b      	ldrb	r3, [r3, #0]
    a35a:	3308      	adds	r3, #8
    a35c:	015b      	lsls	r3, r3, #5
    a35e:	18d3      	adds	r3, r2, r3
    a360:	79db      	ldrb	r3, [r3, #7]
    a362:	b2db      	uxtb	r3, r3
    a364:	1c1a      	adds	r2, r3, #0
    a366:	2320      	movs	r3, #32
    a368:	4013      	ands	r3, r2
    a36a:	d00f      	beq.n	a38c <_usb_device_interrupt_handler+0x1d8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    a36c:	4b5f      	ldr	r3, [pc, #380]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a36e:	681b      	ldr	r3, [r3, #0]
    a370:	681a      	ldr	r2, [r3, #0]
    a372:	1c3b      	adds	r3, r7, #0
    a374:	330b      	adds	r3, #11
    a376:	781b      	ldrb	r3, [r3, #0]
    a378:	3308      	adds	r3, #8
    a37a:	015b      	lsls	r3, r3, #5
    a37c:	18d3      	adds	r3, r2, r3
    a37e:	2220      	movs	r2, #32
    a380:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    a382:	4b5e      	ldr	r3, [pc, #376]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a384:	1c3a      	adds	r2, r7, #0
    a386:	320b      	adds	r2, #11
    a388:	7812      	ldrb	r2, [r2, #0]
    a38a:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    a38c:	1d3b      	adds	r3, r7, #4
    a38e:	881a      	ldrh	r2, [r3, #0]
    a390:	2360      	movs	r3, #96	; 0x60
    a392:	4013      	ands	r3, r2
    a394:	d010      	beq.n	a3b8 <_usb_device_interrupt_handler+0x204>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    a396:	4b55      	ldr	r3, [pc, #340]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a398:	6819      	ldr	r1, [r3, #0]
    a39a:	1c3b      	adds	r3, r7, #0
    a39c:	330b      	adds	r3, #11
    a39e:	781a      	ldrb	r2, [r3, #0]
    a3a0:	23dc      	movs	r3, #220	; 0xdc
    a3a2:	0112      	lsls	r2, r2, #4
    a3a4:	188a      	adds	r2, r1, r2
    a3a6:	18d3      	adds	r3, r2, r3
    a3a8:	685a      	ldr	r2, [r3, #4]
    a3aa:	4b50      	ldr	r3, [pc, #320]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a3ac:	6819      	ldr	r1, [r3, #0]
    a3ae:	4b53      	ldr	r3, [pc, #332]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a3b0:	1c08      	adds	r0, r1, #0
    a3b2:	1c19      	adds	r1, r3, #0
    a3b4:	4790      	blx	r2
					}
					return;
    a3b6:	e19f      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a3b8:	e19e      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a3ba:	1dbb      	adds	r3, r7, #6
    a3bc:	881a      	ldrh	r2, [r3, #0]
    a3be:	2310      	movs	r3, #16
    a3c0:	4013      	ands	r3, r2
    a3c2:	d038      	beq.n	a436 <_usb_device_interrupt_handler+0x282>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    a3c4:	4b49      	ldr	r3, [pc, #292]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a3c6:	681b      	ldr	r3, [r3, #0]
    a3c8:	681a      	ldr	r2, [r3, #0]
    a3ca:	1c3b      	adds	r3, r7, #0
    a3cc:	330b      	adds	r3, #11
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	3308      	adds	r3, #8
    a3d2:	015b      	lsls	r3, r3, #5
    a3d4:	18d3      	adds	r3, r2, r3
    a3d6:	2210      	movs	r2, #16
    a3d8:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    a3da:	4b44      	ldr	r3, [pc, #272]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a3dc:	6819      	ldr	r1, [r3, #0]
    a3de:	1c3b      	adds	r3, r7, #0
    a3e0:	330b      	adds	r3, #11
    a3e2:	781a      	ldrb	r2, [r3, #0]
    a3e4:	23b0      	movs	r3, #176	; 0xb0
    a3e6:	005b      	lsls	r3, r3, #1
    a3e8:	188a      	adds	r2, r1, r2
    a3ea:	18d3      	adds	r3, r2, r3
    a3ec:	781b      	ldrb	r3, [r3, #0]
    a3ee:	2210      	movs	r2, #16
    a3f0:	4013      	ands	r3, r2
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d01d      	beq.n	a434 <_usb_device_interrupt_handler+0x280>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    a3f8:	1c3b      	adds	r3, r7, #0
    a3fa:	330b      	adds	r3, #11
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	4a3d      	ldr	r2, [pc, #244]	; (a4f4 <_usb_device_interrupt_handler+0x340>)
    a400:	015b      	lsls	r3, r3, #5
    a402:	18d3      	adds	r3, r2, r3
    a404:	685b      	ldr	r3, [r3, #4]
    a406:	049b      	lsls	r3, r3, #18
    a408:	0c9b      	lsrs	r3, r3, #18
    a40a:	b29b      	uxth	r3, r3
    a40c:	1c1a      	adds	r2, r3, #0
    a40e:	4b3b      	ldr	r3, [pc, #236]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a410:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    a412:	4b36      	ldr	r3, [pc, #216]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a414:	6819      	ldr	r1, [r3, #0]
    a416:	1c3b      	adds	r3, r7, #0
    a418:	330b      	adds	r3, #11
    a41a:	781a      	ldrb	r2, [r3, #0]
    a41c:	23d8      	movs	r3, #216	; 0xd8
    a41e:	0112      	lsls	r2, r2, #4
    a420:	188a      	adds	r2, r1, r2
    a422:	18d3      	adds	r3, r2, r3
    a424:	685a      	ldr	r2, [r3, #4]
    a426:	4b31      	ldr	r3, [pc, #196]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a428:	6819      	ldr	r1, [r3, #0]
    a42a:	4b34      	ldr	r3, [pc, #208]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a42c:	1c08      	adds	r0, r1, #0
    a42e:	1c19      	adds	r1, r3, #0
    a430:	4790      	blx	r2
					}
					return;
    a432:	e161      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a434:	e160      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    a436:	1dbb      	adds	r3, r7, #6
    a438:	881a      	ldrh	r2, [r3, #0]
    a43a:	230c      	movs	r3, #12
    a43c:	4013      	ands	r3, r2
    a43e:	d100      	bne.n	a442 <_usb_device_interrupt_handler+0x28e>
    a440:	e0c5      	b.n	a5ce <_usb_device_interrupt_handler+0x41a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a442:	4b2a      	ldr	r3, [pc, #168]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a444:	681b      	ldr	r3, [r3, #0]
    a446:	681a      	ldr	r2, [r3, #0]
    a448:	1c3b      	adds	r3, r7, #0
    a44a:	330b      	adds	r3, #11
    a44c:	781b      	ldrb	r3, [r3, #0]
    a44e:	3308      	adds	r3, #8
    a450:	015b      	lsls	r3, r3, #5
    a452:	18d3      	adds	r3, r2, r3
    a454:	79db      	ldrb	r3, [r3, #7]
    a456:	b2db      	uxtb	r3, r3
    a458:	1c1a      	adds	r2, r3, #0
    a45a:	2308      	movs	r3, #8
    a45c:	4013      	ands	r3, r2
    a45e:	d04f      	beq.n	a500 <_usb_device_interrupt_handler+0x34c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    a460:	4b22      	ldr	r3, [pc, #136]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a462:	681b      	ldr	r3, [r3, #0]
    a464:	681a      	ldr	r2, [r3, #0]
    a466:	1c3b      	adds	r3, r7, #0
    a468:	330b      	adds	r3, #11
    a46a:	781b      	ldrb	r3, [r3, #0]
    a46c:	3308      	adds	r3, #8
    a46e:	015b      	lsls	r3, r3, #5
    a470:	18d3      	adds	r3, r2, r3
    a472:	2208      	movs	r2, #8
    a474:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    a476:	1c3b      	adds	r3, r7, #0
    a478:	330b      	adds	r3, #11
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	4a1d      	ldr	r2, [pc, #116]	; (a4f4 <_usb_device_interrupt_handler+0x340>)
    a47e:	015b      	lsls	r3, r3, #5
    a480:	18d3      	adds	r3, r2, r3
    a482:	3318      	adds	r3, #24
    a484:	789b      	ldrb	r3, [r3, #2]
    a486:	b2db      	uxtb	r3, r3
    a488:	1c1a      	adds	r2, r3, #0
    a48a:	2302      	movs	r3, #2
    a48c:	4013      	ands	r3, r2
    a48e:	d013      	beq.n	a4b8 <_usb_device_interrupt_handler+0x304>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    a490:	1c3b      	adds	r3, r7, #0
    a492:	330b      	adds	r3, #11
    a494:	781b      	ldrb	r3, [r3, #0]
    a496:	1c3a      	adds	r2, r7, #0
    a498:	320b      	adds	r2, #11
    a49a:	7812      	ldrb	r2, [r2, #0]
    a49c:	4915      	ldr	r1, [pc, #84]	; (a4f4 <_usb_device_interrupt_handler+0x340>)
    a49e:	0152      	lsls	r2, r2, #5
    a4a0:	188a      	adds	r2, r1, r2
    a4a2:	3218      	adds	r2, #24
    a4a4:	7892      	ldrb	r2, [r2, #2]
    a4a6:	b2d2      	uxtb	r2, r2
    a4a8:	2102      	movs	r1, #2
    a4aa:	438a      	bics	r2, r1
    a4ac:	b2d2      	uxtb	r2, r2
    a4ae:	4911      	ldr	r1, [pc, #68]	; (a4f4 <_usb_device_interrupt_handler+0x340>)
    a4b0:	015b      	lsls	r3, r3, #5
    a4b2:	18cb      	adds	r3, r1, r3
    a4b4:	3318      	adds	r3, #24
    a4b6:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    a4b8:	1c3b      	adds	r3, r7, #0
    a4ba:	330b      	adds	r3, #11
    a4bc:	781b      	ldrb	r3, [r3, #0]
    a4be:	2280      	movs	r2, #128	; 0x80
    a4c0:	4252      	negs	r2, r2
    a4c2:	4313      	orrs	r3, r2
    a4c4:	b2da      	uxtb	r2, r3
    a4c6:	4b0d      	ldr	r3, [pc, #52]	; (a4fc <_usb_device_interrupt_handler+0x348>)
    a4c8:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a4ca:	4b08      	ldr	r3, [pc, #32]	; (a4ec <_usb_device_interrupt_handler+0x338>)
    a4cc:	681b      	ldr	r3, [r3, #0]
    a4ce:	681a      	ldr	r2, [r3, #0]
    a4d0:	1c3b      	adds	r3, r7, #0
    a4d2:	330b      	adds	r3, #11
    a4d4:	781b      	ldrb	r3, [r3, #0]
    a4d6:	3308      	adds	r3, #8
    a4d8:	015b      	lsls	r3, r3, #5
    a4da:	18d3      	adds	r3, r2, r3
    a4dc:	79db      	ldrb	r3, [r3, #7]
    a4de:	b2db      	uxtb	r3, r3
    a4e0:	1c1a      	adds	r2, r3, #0
    a4e2:	2302      	movs	r3, #2
    a4e4:	4013      	ands	r3, r2
    a4e6:	d05b      	beq.n	a5a0 <_usb_device_interrupt_handler+0x3ec>
							return;
    a4e8:	e106      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a4ea:	46c0      	nop			; (mov r8, r8)
    a4ec:	20004174 	.word	0x20004174
    a4f0:	0000bb2c 	.word	0x0000bb2c
    a4f4:	20006bf4 	.word	0x20006bf4
    a4f8:	20004180 	.word	0x20004180
    a4fc:	20004184 	.word	0x20004184
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a500:	4b7f      	ldr	r3, [pc, #508]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a502:	681b      	ldr	r3, [r3, #0]
    a504:	681a      	ldr	r2, [r3, #0]
    a506:	1c3b      	adds	r3, r7, #0
    a508:	330b      	adds	r3, #11
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	3308      	adds	r3, #8
    a50e:	015b      	lsls	r3, r3, #5
    a510:	18d3      	adds	r3, r2, r3
    a512:	79db      	ldrb	r3, [r3, #7]
    a514:	b2db      	uxtb	r3, r3
    a516:	1c1a      	adds	r2, r3, #0
    a518:	2304      	movs	r3, #4
    a51a:	4013      	ands	r3, r2
    a51c:	d040      	beq.n	a5a0 <_usb_device_interrupt_handler+0x3ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    a51e:	4b78      	ldr	r3, [pc, #480]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a520:	681b      	ldr	r3, [r3, #0]
    a522:	681a      	ldr	r2, [r3, #0]
    a524:	1c3b      	adds	r3, r7, #0
    a526:	330b      	adds	r3, #11
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	3308      	adds	r3, #8
    a52c:	015b      	lsls	r3, r3, #5
    a52e:	18d3      	adds	r3, r2, r3
    a530:	2204      	movs	r2, #4
    a532:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    a534:	1c3b      	adds	r3, r7, #0
    a536:	330b      	adds	r3, #11
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	4a72      	ldr	r2, [pc, #456]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a53c:	015b      	lsls	r3, r3, #5
    a53e:	18d3      	adds	r3, r2, r3
    a540:	3308      	adds	r3, #8
    a542:	789b      	ldrb	r3, [r3, #2]
    a544:	b2db      	uxtb	r3, r3
    a546:	1c1a      	adds	r2, r3, #0
    a548:	2302      	movs	r3, #2
    a54a:	4013      	ands	r3, r2
    a54c:	d013      	beq.n	a576 <_usb_device_interrupt_handler+0x3c2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    a54e:	1c3b      	adds	r3, r7, #0
    a550:	330b      	adds	r3, #11
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	1c3a      	adds	r2, r7, #0
    a556:	320b      	adds	r2, #11
    a558:	7812      	ldrb	r2, [r2, #0]
    a55a:	496a      	ldr	r1, [pc, #424]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a55c:	0152      	lsls	r2, r2, #5
    a55e:	188a      	adds	r2, r1, r2
    a560:	3208      	adds	r2, #8
    a562:	7892      	ldrb	r2, [r2, #2]
    a564:	b2d2      	uxtb	r2, r2
    a566:	2102      	movs	r1, #2
    a568:	438a      	bics	r2, r1
    a56a:	b2d2      	uxtb	r2, r2
    a56c:	4965      	ldr	r1, [pc, #404]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a56e:	015b      	lsls	r3, r3, #5
    a570:	18cb      	adds	r3, r1, r3
    a572:	3308      	adds	r3, #8
    a574:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    a576:	4b64      	ldr	r3, [pc, #400]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a578:	1c3a      	adds	r2, r7, #0
    a57a:	320b      	adds	r2, #11
    a57c:	7812      	ldrb	r2, [r2, #0]
    a57e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a580:	4b5f      	ldr	r3, [pc, #380]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a582:	681b      	ldr	r3, [r3, #0]
    a584:	681a      	ldr	r2, [r3, #0]
    a586:	1c3b      	adds	r3, r7, #0
    a588:	330b      	adds	r3, #11
    a58a:	781b      	ldrb	r3, [r3, #0]
    a58c:	3308      	adds	r3, #8
    a58e:	015b      	lsls	r3, r3, #5
    a590:	18d3      	adds	r3, r2, r3
    a592:	79db      	ldrb	r3, [r3, #7]
    a594:	b2db      	uxtb	r3, r3
    a596:	1c1a      	adds	r2, r3, #0
    a598:	2301      	movs	r3, #1
    a59a:	4013      	ands	r3, r2
    a59c:	d000      	beq.n	a5a0 <_usb_device_interrupt_handler+0x3ec>
							return;
    a59e:	e0ab      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    a5a0:	1d3b      	adds	r3, r7, #4
    a5a2:	881a      	ldrh	r2, [r3, #0]
    a5a4:	230c      	movs	r3, #12
    a5a6:	4013      	ands	r3, r2
    a5a8:	d010      	beq.n	a5cc <_usb_device_interrupt_handler+0x418>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    a5aa:	4b55      	ldr	r3, [pc, #340]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a5ac:	6819      	ldr	r1, [r3, #0]
    a5ae:	1c3b      	adds	r3, r7, #0
    a5b0:	330b      	adds	r3, #11
    a5b2:	781a      	ldrb	r2, [r3, #0]
    a5b4:	23d4      	movs	r3, #212	; 0xd4
    a5b6:	0112      	lsls	r2, r2, #4
    a5b8:	188a      	adds	r2, r1, r2
    a5ba:	18d3      	adds	r3, r2, r3
    a5bc:	685a      	ldr	r2, [r3, #4]
    a5be:	4b50      	ldr	r3, [pc, #320]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a5c0:	6819      	ldr	r1, [r3, #0]
    a5c2:	4b51      	ldr	r3, [pc, #324]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a5c4:	1c08      	adds	r0, r1, #0
    a5c6:	1c19      	adds	r1, r3, #0
    a5c8:	4790      	blx	r2
					}
					return;
    a5ca:	e095      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a5cc:	e094      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    a5ce:	1dbb      	adds	r3, r7, #6
    a5d0:	881a      	ldrh	r2, [r3, #0]
    a5d2:	2303      	movs	r3, #3
    a5d4:	4013      	ands	r3, r2
    a5d6:	d100      	bne.n	a5da <_usb_device_interrupt_handler+0x426>
    a5d8:	e081      	b.n	a6de <_usb_device_interrupt_handler+0x52a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a5da:	4b49      	ldr	r3, [pc, #292]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a5dc:	681b      	ldr	r3, [r3, #0]
    a5de:	681a      	ldr	r2, [r3, #0]
    a5e0:	1c3b      	adds	r3, r7, #0
    a5e2:	330b      	adds	r3, #11
    a5e4:	781b      	ldrb	r3, [r3, #0]
    a5e6:	3308      	adds	r3, #8
    a5e8:	015b      	lsls	r3, r3, #5
    a5ea:	18d3      	adds	r3, r2, r3
    a5ec:	79db      	ldrb	r3, [r3, #7]
    a5ee:	b2db      	uxtb	r3, r3
    a5f0:	1c1a      	adds	r2, r3, #0
    a5f2:	2302      	movs	r3, #2
    a5f4:	4013      	ands	r3, r2
    a5f6:	d022      	beq.n	a63e <_usb_device_interrupt_handler+0x48a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    a5f8:	4b41      	ldr	r3, [pc, #260]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a5fa:	681b      	ldr	r3, [r3, #0]
    a5fc:	681a      	ldr	r2, [r3, #0]
    a5fe:	1c3b      	adds	r3, r7, #0
    a600:	330b      	adds	r3, #11
    a602:	781b      	ldrb	r3, [r3, #0]
    a604:	3308      	adds	r3, #8
    a606:	015b      	lsls	r3, r3, #5
    a608:	18d3      	adds	r3, r2, r3
    a60a:	2202      	movs	r2, #2
    a60c:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    a60e:	1c3b      	adds	r3, r7, #0
    a610:	330b      	adds	r3, #11
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	2280      	movs	r2, #128	; 0x80
    a616:	4252      	negs	r2, r2
    a618:	4313      	orrs	r3, r2
    a61a:	b2da      	uxtb	r2, r3
    a61c:	4b3a      	ldr	r3, [pc, #232]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a61e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    a620:	1c3b      	adds	r3, r7, #0
    a622:	330b      	adds	r3, #11
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	4a37      	ldr	r2, [pc, #220]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a628:	015b      	lsls	r3, r3, #5
    a62a:	18d3      	adds	r3, r2, r3
    a62c:	3310      	adds	r3, #16
    a62e:	685b      	ldr	r3, [r3, #4]
    a630:	049b      	lsls	r3, r3, #18
    a632:	0c9b      	lsrs	r3, r3, #18
    a634:	b29b      	uxth	r3, r3
    a636:	1c1a      	adds	r2, r3, #0
    a638:	4b33      	ldr	r3, [pc, #204]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a63a:	805a      	strh	r2, [r3, #2]
    a63c:	e039      	b.n	a6b2 <_usb_device_interrupt_handler+0x4fe>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a63e:	4b30      	ldr	r3, [pc, #192]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a640:	681b      	ldr	r3, [r3, #0]
    a642:	681a      	ldr	r2, [r3, #0]
    a644:	1c3b      	adds	r3, r7, #0
    a646:	330b      	adds	r3, #11
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	3308      	adds	r3, #8
    a64c:	015b      	lsls	r3, r3, #5
    a64e:	18d3      	adds	r3, r2, r3
    a650:	79db      	ldrb	r3, [r3, #7]
    a652:	b2db      	uxtb	r3, r3
    a654:	1c1a      	adds	r2, r3, #0
    a656:	2301      	movs	r3, #1
    a658:	4013      	ands	r3, r2
    a65a:	d02a      	beq.n	a6b2 <_usb_device_interrupt_handler+0x4fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    a65c:	4b28      	ldr	r3, [pc, #160]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a65e:	681b      	ldr	r3, [r3, #0]
    a660:	681a      	ldr	r2, [r3, #0]
    a662:	1c3b      	adds	r3, r7, #0
    a664:	330b      	adds	r3, #11
    a666:	781b      	ldrb	r3, [r3, #0]
    a668:	3308      	adds	r3, #8
    a66a:	015b      	lsls	r3, r3, #5
    a66c:	18d3      	adds	r3, r2, r3
    a66e:	2201      	movs	r2, #1
    a670:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    a672:	4b25      	ldr	r3, [pc, #148]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a674:	1c3a      	adds	r2, r7, #0
    a676:	320b      	adds	r2, #11
    a678:	7812      	ldrb	r2, [r2, #0]
    a67a:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    a67c:	1c3b      	adds	r3, r7, #0
    a67e:	330b      	adds	r3, #11
    a680:	781b      	ldrb	r3, [r3, #0]
    a682:	4a20      	ldr	r2, [pc, #128]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a684:	015b      	lsls	r3, r3, #5
    a686:	18d3      	adds	r3, r2, r3
    a688:	685b      	ldr	r3, [r3, #4]
    a68a:	049b      	lsls	r3, r3, #18
    a68c:	0c9b      	lsrs	r3, r3, #18
    a68e:	b29b      	uxth	r3, r3
    a690:	1c1a      	adds	r2, r3, #0
    a692:	4b1d      	ldr	r3, [pc, #116]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a694:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    a696:	1c3b      	adds	r3, r7, #0
    a698:	330b      	adds	r3, #11
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	4a19      	ldr	r2, [pc, #100]	; (a704 <_usb_device_interrupt_handler+0x550>)
    a69e:	015b      	lsls	r3, r3, #5
    a6a0:	18d3      	adds	r3, r2, r3
    a6a2:	685b      	ldr	r3, [r3, #4]
    a6a4:	0b9b      	lsrs	r3, r3, #14
    a6a6:	049b      	lsls	r3, r3, #18
    a6a8:	0c9b      	lsrs	r3, r3, #18
    a6aa:	b29b      	uxth	r3, r3
    a6ac:	1c1a      	adds	r2, r3, #0
    a6ae:	4b16      	ldr	r3, [pc, #88]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a6b0:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    a6b2:	1d3b      	adds	r3, r7, #4
    a6b4:	881a      	ldrh	r2, [r3, #0]
    a6b6:	2303      	movs	r3, #3
    a6b8:	4013      	ands	r3, r2
    a6ba:	d00f      	beq.n	a6dc <_usb_device_interrupt_handler+0x528>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    a6bc:	4b10      	ldr	r3, [pc, #64]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a6be:	681a      	ldr	r2, [r3, #0]
    a6c0:	1c3b      	adds	r3, r7, #0
    a6c2:	330b      	adds	r3, #11
    a6c4:	781b      	ldrb	r3, [r3, #0]
    a6c6:	330d      	adds	r3, #13
    a6c8:	011b      	lsls	r3, r3, #4
    a6ca:	18d3      	adds	r3, r2, r3
    a6cc:	685a      	ldr	r2, [r3, #4]
    a6ce:	4b0c      	ldr	r3, [pc, #48]	; (a700 <_usb_device_interrupt_handler+0x54c>)
    a6d0:	6819      	ldr	r1, [r3, #0]
    a6d2:	4b0d      	ldr	r3, [pc, #52]	; (a708 <_usb_device_interrupt_handler+0x554>)
    a6d4:	1c08      	adds	r0, r1, #0
    a6d6:	1c19      	adds	r1, r3, #0
    a6d8:	4790      	blx	r2
					}
					return;
    a6da:	e00d      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a6dc:	e00c      	b.n	a6f8 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    a6de:	1c3b      	adds	r3, r7, #0
    a6e0:	330b      	adds	r3, #11
    a6e2:	781a      	ldrb	r2, [r3, #0]
    a6e4:	1c3b      	adds	r3, r7, #0
    a6e6:	330b      	adds	r3, #11
    a6e8:	3201      	adds	r2, #1
    a6ea:	701a      	strb	r2, [r3, #0]
    a6ec:	1c3b      	adds	r3, r7, #0
    a6ee:	330b      	adds	r3, #11
    a6f0:	781b      	ldrb	r3, [r3, #0]
    a6f2:	2b07      	cmp	r3, #7
    a6f4:	d800      	bhi.n	a6f8 <_usb_device_interrupt_handler+0x544>
    a6f6:	e5ca      	b.n	a28e <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    a6f8:	46bd      	mov	sp, r7
    a6fa:	b004      	add	sp, #16
    a6fc:	bd80      	pop	{r7, pc}
    a6fe:	46c0      	nop			; (mov r8, r8)
    a700:	20004174 	.word	0x20004174
    a704:	20006bf4 	.word	0x20006bf4
    a708:	20004184 	.word	0x20004184

0000a70c <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	681a      	ldr	r2, [r3, #0]
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	781b      	ldrb	r3, [r3, #0]
    a71e:	b2db      	uxtb	r3, r3
    a720:	2102      	movs	r1, #2
    a722:	430b      	orrs	r3, r1
    a724:	b2db      	uxtb	r3, r3
    a726:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    a728:	46c0      	nop			; (mov r8, r8)
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	681b      	ldr	r3, [r3, #0]
    a72e:	789b      	ldrb	r3, [r3, #2]
    a730:	b2db      	uxtb	r3, r3
    a732:	2b02      	cmp	r3, #2
    a734:	d0f9      	beq.n	a72a <usb_enable+0x1e>
}
    a736:	46bd      	mov	sp, r7
    a738:	b002      	add	sp, #8
    a73a:	bd80      	pop	{r7, pc}

0000a73c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    a73c:	b580      	push	{r7, lr}
    a73e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    a740:	4b07      	ldr	r3, [pc, #28]	; (a760 <USB_Handler+0x24>)
    a742:	681b      	ldr	r3, [r3, #0]
    a744:	681b      	ldr	r3, [r3, #0]
    a746:	781b      	ldrb	r3, [r3, #0]
    a748:	b2db      	uxtb	r3, r3
    a74a:	09db      	lsrs	r3, r3, #7
    a74c:	b2db      	uxtb	r3, r3
    a74e:	2b00      	cmp	r3, #0
    a750:	d002      	beq.n	a758 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    a752:	4b04      	ldr	r3, [pc, #16]	; (a764 <USB_Handler+0x28>)
    a754:	4798      	blx	r3
    a756:	e001      	b.n	a75c <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    a758:	4b03      	ldr	r3, [pc, #12]	; (a768 <USB_Handler+0x2c>)
    a75a:	4798      	blx	r3
	}
}
    a75c:	46bd      	mov	sp, r7
    a75e:	bd80      	pop	{r7, pc}
    a760:	20004174 	.word	0x20004174
    a764:	00008e51 	.word	0x00008e51
    a768:	0000a1b5 	.word	0x0000a1b5

0000a76c <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    a76c:	b580      	push	{r7, lr}
    a76e:	b082      	sub	sp, #8
    a770:	af00      	add	r7, sp, #0
    a772:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	2200      	movs	r2, #0
    a778:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    a77a:	687b      	ldr	r3, [r7, #4]
    a77c:	2201      	movs	r2, #1
    a77e:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	2200      	movs	r2, #0
    a784:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	2201      	movs	r2, #1
    a78a:	70da      	strb	r2, [r3, #3]
}
    a78c:	46bd      	mov	sp, r7
    a78e:	b002      	add	sp, #8
    a790:	bd80      	pop	{r7, pc}
    a792:	46c0      	nop			; (mov r8, r8)

0000a794 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    a794:	b580      	push	{r7, lr}
    a796:	b08c      	sub	sp, #48	; 0x30
    a798:	af00      	add	r7, sp, #0
    a79a:	60f8      	str	r0, [r7, #12]
    a79c:	60b9      	str	r1, [r7, #8]
    a79e:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    a7a0:	4bbb      	ldr	r3, [pc, #748]	; (aa90 <usb_init+0x2fc>)
    a7a2:	2200      	movs	r2, #0
    a7a4:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    a7a6:	4bbb      	ldr	r3, [pc, #748]	; (aa94 <usb_init+0x300>)
    a7a8:	68fa      	ldr	r2, [r7, #12]
    a7aa:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    a7ac:	68fb      	ldr	r3, [r7, #12]
    a7ae:	68ba      	ldr	r2, [r7, #8]
    a7b0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    a7b2:	2001      	movs	r0, #1
    a7b4:	2120      	movs	r1, #32
    a7b6:	4bb8      	ldr	r3, [pc, #736]	; (aa98 <usb_init+0x304>)
    a7b8:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    a7ba:	1c3b      	adds	r3, r7, #0
    a7bc:	3318      	adds	r3, #24
    a7be:	1c18      	adds	r0, r3, #0
    a7c0:	4bb6      	ldr	r3, [pc, #728]	; (aa9c <usb_init+0x308>)
    a7c2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    a7c4:	1c3b      	adds	r3, r7, #0
    a7c6:	3318      	adds	r3, #24
    a7c8:	2206      	movs	r2, #6
    a7ca:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    a7cc:	1c3b      	adds	r3, r7, #0
    a7ce:	3318      	adds	r3, #24
    a7d0:	2018      	movs	r0, #24
    a7d2:	1c19      	adds	r1, r3, #0
    a7d4:	4bb2      	ldr	r3, [pc, #712]	; (aaa0 <usb_init+0x30c>)
    a7d6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    a7d8:	1c3b      	adds	r3, r7, #0
    a7da:	3318      	adds	r3, #24
    a7dc:	2206      	movs	r2, #6
    a7de:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    a7e0:	1c3b      	adds	r3, r7, #0
    a7e2:	3318      	adds	r3, #24
    a7e4:	2019      	movs	r0, #25
    a7e6:	1c19      	adds	r1, r3, #0
    a7e8:	4bad      	ldr	r3, [pc, #692]	; (aaa0 <usb_init+0x30c>)
    a7ea:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    a7ec:	1c3b      	adds	r3, r7, #0
    a7ee:	3314      	adds	r3, #20
    a7f0:	1c18      	adds	r0, r3, #0
    a7f2:	4bac      	ldr	r3, [pc, #688]	; (aaa4 <usb_init+0x310>)
    a7f4:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    a7f6:	687b      	ldr	r3, [r7, #4]
    a7f8:	789a      	ldrb	r2, [r3, #2]
    a7fa:	1c3b      	adds	r3, r7, #0
    a7fc:	3314      	adds	r3, #20
    a7fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    a800:	1c3b      	adds	r3, r7, #0
    a802:	3314      	adds	r3, #20
    a804:	2006      	movs	r0, #6
    a806:	1c19      	adds	r1, r3, #0
    a808:	4ba7      	ldr	r3, [pc, #668]	; (aaa8 <usb_init+0x314>)
    a80a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    a80c:	2006      	movs	r0, #6
    a80e:	4ba7      	ldr	r3, [pc, #668]	; (aaac <usb_init+0x318>)
    a810:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    a812:	68bb      	ldr	r3, [r7, #8]
    a814:	781a      	ldrb	r2, [r3, #0]
    a816:	2101      	movs	r1, #1
    a818:	430a      	orrs	r2, r1
    a81a:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    a81c:	46c0      	nop			; (mov r8, r8)
    a81e:	68bb      	ldr	r3, [r7, #8]
    a820:	789a      	ldrb	r2, [r3, #2]
    a822:	2301      	movs	r3, #1
    a824:	4013      	ands	r3, r2
    a826:	b2db      	uxtb	r3, r3
    a828:	2b00      	cmp	r3, #0
    a82a:	d1f8      	bne.n	a81e <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a82c:	4ba0      	ldr	r3, [pc, #640]	; (aab0 <usb_init+0x31c>)
    a82e:	78da      	ldrb	r2, [r3, #3]
    a830:	2103      	movs	r1, #3
    a832:	438a      	bics	r2, r1
    a834:	2102      	movs	r1, #2
    a836:	430a      	orrs	r2, r1
    a838:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a83a:	4b9d      	ldr	r3, [pc, #628]	; (aab0 <usb_init+0x31c>)
    a83c:	78da      	ldrb	r2, [r3, #3]
    a83e:	210c      	movs	r1, #12
    a840:	438a      	bics	r2, r1
    a842:	2108      	movs	r1, #8
    a844:	430a      	orrs	r2, r1
    a846:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a848:	4b9a      	ldr	r3, [pc, #616]	; (aab4 <usb_init+0x320>)
    a84a:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    a84c:	0b5a      	lsrs	r2, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a84e:	231f      	movs	r3, #31
    a850:	4013      	ands	r3, r2
    a852:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a856:	2b1f      	cmp	r3, #31
    a858:	d101      	bne.n	a85e <usb_init+0xca>
		pad_transn = 5;
    a85a:	2305      	movs	r3, #5
    a85c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a860:	b2db      	uxtb	r3, r3
    a862:	1c1a      	adds	r2, r3, #0
    a864:	231f      	movs	r3, #31
    a866:	4013      	ands	r3, r2
    a868:	b2d9      	uxtb	r1, r3
    a86a:	68bb      	ldr	r3, [r7, #8]
    a86c:	221f      	movs	r2, #31
    a86e:	400a      	ands	r2, r1
    a870:	0192      	lsls	r2, r2, #6
    a872:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a874:	4990      	ldr	r1, [pc, #576]	; (aab8 <usb_init+0x324>)
    a876:	4001      	ands	r1, r0
    a878:	430a      	orrs	r2, r1
    a87a:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a87c:	4b8d      	ldr	r3, [pc, #564]	; (aab4 <usb_init+0x320>)
    a87e:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    a880:	0c9a      	lsrs	r2, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a882:	231f      	movs	r3, #31
    a884:	4013      	ands	r3, r2
    a886:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    a888:	6a3b      	ldr	r3, [r7, #32]
    a88a:	2b1f      	cmp	r3, #31
    a88c:	d101      	bne.n	a892 <usb_init+0xfe>
		pad_transp = 29;
    a88e:	231d      	movs	r3, #29
    a890:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    a892:	6a3b      	ldr	r3, [r7, #32]
    a894:	b2db      	uxtb	r3, r3
    a896:	1c1a      	adds	r2, r3, #0
    a898:	231f      	movs	r3, #31
    a89a:	4013      	ands	r3, r2
    a89c:	b2d9      	uxtb	r1, r3
    a89e:	68bb      	ldr	r3, [r7, #8]
    a8a0:	221f      	movs	r2, #31
    a8a2:	400a      	ands	r2, r1
    a8a4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    a8a6:	201f      	movs	r0, #31
    a8a8:	4381      	bics	r1, r0
    a8aa:	430a      	orrs	r2, r1
    a8ac:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a8ae:	4b81      	ldr	r3, [pc, #516]	; (aab4 <usb_init+0x320>)
    a8b0:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    a8b2:	0dda      	lsrs	r2, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a8b4:	2307      	movs	r3, #7
    a8b6:	4013      	ands	r3, r2
    a8b8:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    a8ba:	69fb      	ldr	r3, [r7, #28]
    a8bc:	2b07      	cmp	r3, #7
    a8be:	d101      	bne.n	a8c4 <usb_init+0x130>
		pad_trim = 3;
    a8c0:	2303      	movs	r3, #3
    a8c2:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    a8c4:	69fb      	ldr	r3, [r7, #28]
    a8c6:	b2db      	uxtb	r3, r3
    a8c8:	1c1a      	adds	r2, r3, #0
    a8ca:	2307      	movs	r3, #7
    a8cc:	4013      	ands	r3, r2
    a8ce:	b2d9      	uxtb	r1, r3
    a8d0:	68bb      	ldr	r3, [r7, #8]
    a8d2:	2207      	movs	r2, #7
    a8d4:	400a      	ands	r2, r1
    a8d6:	0312      	lsls	r2, r2, #12
    a8d8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a8da:	4978      	ldr	r1, [pc, #480]	; (aabc <usb_init+0x328>)
    a8dc:	4001      	ands	r1, r0
    a8de:	430a      	orrs	r2, r1
    a8e0:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	781a      	ldrb	r2, [r3, #0]
    a8e6:	68bb      	ldr	r3, [r7, #8]
    a8e8:	01d2      	lsls	r2, r2, #7
    a8ea:	7818      	ldrb	r0, [r3, #0]
    a8ec:	217f      	movs	r1, #127	; 0x7f
    a8ee:	4001      	ands	r1, r0
    a8f0:	430a      	orrs	r2, r1
    a8f2:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	7859      	ldrb	r1, [r3, #1]
    a8f8:	68bb      	ldr	r3, [r7, #8]
    a8fa:	2201      	movs	r2, #1
    a8fc:	400a      	ands	r2, r1
    a8fe:	0092      	lsls	r2, r2, #2
    a900:	7819      	ldrb	r1, [r3, #0]
    a902:	2004      	movs	r0, #4
    a904:	4381      	bics	r1, r0
    a906:	430a      	orrs	r2, r1
    a908:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    a90a:	4a6d      	ldr	r2, [pc, #436]	; (aac0 <usb_init+0x32c>)
    a90c:	68bb      	ldr	r3, [r7, #8]
    a90e:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	78db      	ldrb	r3, [r3, #3]
    a914:	2b01      	cmp	r3, #1
    a916:	d106      	bne.n	a926 <usb_init+0x192>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    a918:	68fb      	ldr	r3, [r7, #12]
    a91a:	681b      	ldr	r3, [r3, #0]
    a91c:	891a      	ldrh	r2, [r3, #8]
    a91e:	210c      	movs	r1, #12
    a920:	438a      	bics	r2, r1
    a922:	811a      	strh	r2, [r3, #8]
    a924:	e00b      	b.n	a93e <usb_init+0x1aa>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    a926:	687b      	ldr	r3, [r7, #4]
    a928:	78db      	ldrb	r3, [r3, #3]
    a92a:	2b00      	cmp	r3, #0
    a92c:	d107      	bne.n	a93e <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    a92e:	68fb      	ldr	r3, [r7, #12]
    a930:	681b      	ldr	r3, [r3, #0]
    a932:	891a      	ldrh	r2, [r3, #8]
    a934:	210c      	movs	r1, #12
    a936:	438a      	bics	r2, r1
    a938:	2104      	movs	r1, #4
    a93a:	430a      	orrs	r2, r1
    a93c:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    a93e:	4a60      	ldr	r2, [pc, #384]	; (aac0 <usb_init+0x32c>)
    a940:	2380      	movs	r3, #128	; 0x80
    a942:	005b      	lsls	r3, r3, #1
    a944:	1c10      	adds	r0, r2, #0
    a946:	2100      	movs	r1, #0
    a948:	1c1a      	adds	r2, r3, #0
    a94a:	4b5e      	ldr	r3, [pc, #376]	; (aac4 <usb_init+0x330>)
    a94c:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a94e:	2300      	movs	r3, #0
    a950:	62fb      	str	r3, [r7, #44]	; 0x2c
    a952:	e008      	b.n	a966 <usb_init+0x1d2>
		module_inst->host_callback[i] = NULL;
    a954:	68fa      	ldr	r2, [r7, #12]
    a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a958:	009b      	lsls	r3, r3, #2
    a95a:	18d3      	adds	r3, r2, r3
    a95c:	2200      	movs	r2, #0
    a95e:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a962:	3301      	adds	r3, #1
    a964:	62fb      	str	r3, [r7, #44]	; 0x2c
    a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a968:	2b07      	cmp	r3, #7
    a96a:	d9f3      	bls.n	a954 <usb_init+0x1c0>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a96c:	2300      	movs	r3, #0
    a96e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a970:	e015      	b.n	a99e <usb_init+0x20a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a972:	2300      	movs	r3, #0
    a974:	62bb      	str	r3, [r7, #40]	; 0x28
    a976:	e00c      	b.n	a992 <usb_init+0x1fe>
			module_inst->host_pipe_callback[i][j] = NULL;
    a978:	68fa      	ldr	r2, [r7, #12]
    a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a97c:	0099      	lsls	r1, r3, #2
    a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a980:	18cb      	adds	r3, r1, r3
    a982:	3308      	adds	r3, #8
    a984:	009b      	lsls	r3, r3, #2
    a986:	18d3      	adds	r3, r2, r3
    a988:	2200      	movs	r2, #0
    a98a:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a98e:	3301      	adds	r3, #1
    a990:	62bb      	str	r3, [r7, #40]	; 0x28
    a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a994:	2b03      	cmp	r3, #3
    a996:	d9ef      	bls.n	a978 <usb_init+0x1e4>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a99a:	3301      	adds	r3, #1
    a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
    a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9a0:	2b07      	cmp	r3, #7
    a9a2:	d9e6      	bls.n	a972 <usb_init+0x1de>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    a9a4:	68fa      	ldr	r2, [r7, #12]
    a9a6:	23a4      	movs	r3, #164	; 0xa4
    a9a8:	2100      	movs	r1, #0
    a9aa:	54d1      	strb	r1, [r2, r3]
	module_inst->host_enabled_callback_mask = 0;
    a9ac:	68fa      	ldr	r2, [r7, #12]
    a9ae:	23a5      	movs	r3, #165	; 0xa5
    a9b0:	2100      	movs	r1, #0
    a9b2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a9b4:	2300      	movs	r3, #0
    a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a9b8:	e010      	b.n	a9dc <usb_init+0x248>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    a9ba:	68f9      	ldr	r1, [r7, #12]
    a9bc:	23a0      	movs	r3, #160	; 0xa0
    a9be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a9c0:	188a      	adds	r2, r1, r2
    a9c2:	18d3      	adds	r3, r2, r3
    a9c4:	2200      	movs	r2, #0
    a9c6:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    a9c8:	68f9      	ldr	r1, [r7, #12]
    a9ca:	23a8      	movs	r3, #168	; 0xa8
    a9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a9ce:	188a      	adds	r2, r1, r2
    a9d0:	18d3      	adds	r3, r2, r3
    a9d2:	2200      	movs	r2, #0
    a9d4:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9d8:	3301      	adds	r3, #1
    a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
    a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9de:	2b07      	cmp	r3, #7
    a9e0:	d9eb      	bls.n	a9ba <usb_init+0x226>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a9e2:	2300      	movs	r3, #0
    a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a9e6:	e008      	b.n	a9fa <usb_init+0x266>
		module_inst->device_callback[i] = NULL;
    a9e8:	68fb      	ldr	r3, [r7, #12]
    a9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a9ec:	322e      	adds	r2, #46	; 0x2e
    a9ee:	0092      	lsls	r2, r2, #2
    a9f0:	2100      	movs	r1, #0
    a9f2:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9f6:	3301      	adds	r3, #1
    a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9fc:	2b06      	cmp	r3, #6
    a9fe:	d9f3      	bls.n	a9e8 <usb_init+0x254>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    aa00:	2300      	movs	r3, #0
    aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
    aa04:	e015      	b.n	aa32 <usb_init+0x29e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    aa06:	2300      	movs	r3, #0
    aa08:	62bb      	str	r3, [r7, #40]	; 0x28
    aa0a:	e00c      	b.n	aa26 <usb_init+0x292>
			module_inst->device_endpoint_callback[i][j] = NULL;
    aa0c:	68fa      	ldr	r2, [r7, #12]
    aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa10:	0099      	lsls	r1, r3, #2
    aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa14:	18cb      	adds	r3, r1, r3
    aa16:	3334      	adds	r3, #52	; 0x34
    aa18:	009b      	lsls	r3, r3, #2
    aa1a:	18d3      	adds	r3, r2, r3
    aa1c:	2200      	movs	r2, #0
    aa1e:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa22:	3301      	adds	r3, #1
    aa24:	62bb      	str	r3, [r7, #40]	; 0x28
    aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa28:	2b03      	cmp	r3, #3
    aa2a:	d9ef      	bls.n	aa0c <usb_init+0x278>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa2e:	3301      	adds	r3, #1
    aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
    aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa34:	2b07      	cmp	r3, #7
    aa36:	d9e6      	bls.n	aa06 <usb_init+0x272>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    aa38:	68fa      	ldr	r2, [r7, #12]
    aa3a:	23aa      	movs	r3, #170	; 0xaa
    aa3c:	005b      	lsls	r3, r3, #1
    aa3e:	2100      	movs	r1, #0
    aa40:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    aa42:	68fa      	ldr	r2, [r7, #12]
    aa44:	23ab      	movs	r3, #171	; 0xab
    aa46:	005b      	lsls	r3, r3, #1
    aa48:	2100      	movs	r1, #0
    aa4a:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    aa4c:	2300      	movs	r3, #0
    aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
    aa50:	e012      	b.n	aa78 <usb_init+0x2e4>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    aa52:	68f9      	ldr	r1, [r7, #12]
    aa54:	23ac      	movs	r3, #172	; 0xac
    aa56:	005b      	lsls	r3, r3, #1
    aa58:	6aba      	ldr	r2, [r7, #40]	; 0x28
    aa5a:	188a      	adds	r2, r1, r2
    aa5c:	18d3      	adds	r3, r2, r3
    aa5e:	2200      	movs	r2, #0
    aa60:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    aa62:	68f9      	ldr	r1, [r7, #12]
    aa64:	23b0      	movs	r3, #176	; 0xb0
    aa66:	005b      	lsls	r3, r3, #1
    aa68:	6aba      	ldr	r2, [r7, #40]	; 0x28
    aa6a:	188a      	adds	r2, r1, r2
    aa6c:	18d3      	adds	r3, r2, r3
    aa6e:	2200      	movs	r2, #0
    aa70:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa74:	3301      	adds	r3, #1
    aa76:	62bb      	str	r3, [r7, #40]	; 0x28
    aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa7a:	2b07      	cmp	r3, #7
    aa7c:	d9e9      	bls.n	aa52 <usb_init+0x2be>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    aa7e:	2007      	movs	r0, #7
    aa80:	4b11      	ldr	r3, [pc, #68]	; (aac8 <usb_init+0x334>)
    aa82:	4798      	blx	r3

	return STATUS_OK;
    aa84:	2300      	movs	r3, #0
}
    aa86:	1c18      	adds	r0, r3, #0
    aa88:	46bd      	mov	sp, r7
    aa8a:	b00c      	add	sp, #48	; 0x30
    aa8c:	bd80      	pop	{r7, pc}
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	2000418c 	.word	0x2000418c
    aa94:	20004174 	.word	0x20004174
    aa98:	00008da1 	.word	0x00008da1
    aa9c:	00008dfd 	.word	0x00008dfd
    aaa0:	000073e1 	.word	0x000073e1
    aaa4:	00008d8d 	.word	0x00008d8d
    aaa8:	000070fd 	.word	0x000070fd
    aaac:	0000713d 	.word	0x0000713d
    aab0:	41005000 	.word	0x41005000
    aab4:	00806024 	.word	0x00806024
    aab8:	fffff83f 	.word	0xfffff83f
    aabc:	ffff8fff 	.word	0xffff8fff
    aac0:	20006bf4 	.word	0x20006bf4
    aac4:	0000b8ab 	.word	0x0000b8ab
    aac8:	00008e25 	.word	0x00008e25

0000aacc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b082      	sub	sp, #8
    aad0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    aad2:	4b2d      	ldr	r3, [pc, #180]	; (ab88 <Reset_Handler+0xbc>)
    aad4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    aad6:	4b2d      	ldr	r3, [pc, #180]	; (ab8c <Reset_Handler+0xc0>)
    aad8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    aada:	687a      	ldr	r2, [r7, #4]
    aadc:	683b      	ldr	r3, [r7, #0]
    aade:	429a      	cmp	r2, r3
    aae0:	d00c      	beq.n	aafc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    aae2:	e007      	b.n	aaf4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    aae4:	683b      	ldr	r3, [r7, #0]
    aae6:	1d1a      	adds	r2, r3, #4
    aae8:	603a      	str	r2, [r7, #0]
    aaea:	687a      	ldr	r2, [r7, #4]
    aaec:	1d11      	adds	r1, r2, #4
    aaee:	6079      	str	r1, [r7, #4]
    aaf0:	6812      	ldr	r2, [r2, #0]
    aaf2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    aaf4:	683a      	ldr	r2, [r7, #0]
    aaf6:	4b26      	ldr	r3, [pc, #152]	; (ab90 <Reset_Handler+0xc4>)
    aaf8:	429a      	cmp	r2, r3
    aafa:	d3f3      	bcc.n	aae4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    aafc:	4b25      	ldr	r3, [pc, #148]	; (ab94 <Reset_Handler+0xc8>)
    aafe:	603b      	str	r3, [r7, #0]
    ab00:	e004      	b.n	ab0c <Reset_Handler+0x40>
                *pDest++ = 0;
    ab02:	683b      	ldr	r3, [r7, #0]
    ab04:	1d1a      	adds	r2, r3, #4
    ab06:	603a      	str	r2, [r7, #0]
    ab08:	2200      	movs	r2, #0
    ab0a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    ab0c:	683a      	ldr	r2, [r7, #0]
    ab0e:	4b22      	ldr	r3, [pc, #136]	; (ab98 <Reset_Handler+0xcc>)
    ab10:	429a      	cmp	r2, r3
    ab12:	d3f6      	bcc.n	ab02 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    ab14:	4b21      	ldr	r3, [pc, #132]	; (ab9c <Reset_Handler+0xd0>)
    ab16:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    ab18:	4b21      	ldr	r3, [pc, #132]	; (aba0 <Reset_Handler+0xd4>)
    ab1a:	687a      	ldr	r2, [r7, #4]
    ab1c:	21ff      	movs	r1, #255	; 0xff
    ab1e:	438a      	bics	r2, r1
    ab20:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    ab22:	4a20      	ldr	r2, [pc, #128]	; (aba4 <Reset_Handler+0xd8>)
    ab24:	2390      	movs	r3, #144	; 0x90
    ab26:	005b      	lsls	r3, r3, #1
    ab28:	2102      	movs	r1, #2
    ab2a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    ab2c:	4b1e      	ldr	r3, [pc, #120]	; (aba8 <Reset_Handler+0xdc>)
    ab2e:	78da      	ldrb	r2, [r3, #3]
    ab30:	2103      	movs	r1, #3
    ab32:	438a      	bics	r2, r1
    ab34:	2102      	movs	r1, #2
    ab36:	430a      	orrs	r2, r1
    ab38:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    ab3a:	4b1b      	ldr	r3, [pc, #108]	; (aba8 <Reset_Handler+0xdc>)
    ab3c:	78da      	ldrb	r2, [r3, #3]
    ab3e:	210c      	movs	r1, #12
    ab40:	438a      	bics	r2, r1
    ab42:	2108      	movs	r1, #8
    ab44:	430a      	orrs	r2, r1
    ab46:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    ab48:	4b18      	ldr	r3, [pc, #96]	; (abac <Reset_Handler+0xe0>)
    ab4a:	7b9a      	ldrb	r2, [r3, #14]
    ab4c:	2130      	movs	r1, #48	; 0x30
    ab4e:	438a      	bics	r2, r1
    ab50:	2120      	movs	r1, #32
    ab52:	430a      	orrs	r2, r1
    ab54:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    ab56:	4b15      	ldr	r3, [pc, #84]	; (abac <Reset_Handler+0xe0>)
    ab58:	7b9a      	ldrb	r2, [r3, #14]
    ab5a:	210c      	movs	r1, #12
    ab5c:	438a      	bics	r2, r1
    ab5e:	2108      	movs	r1, #8
    ab60:	430a      	orrs	r2, r1
    ab62:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    ab64:	4b11      	ldr	r3, [pc, #68]	; (abac <Reset_Handler+0xe0>)
    ab66:	7b9a      	ldrb	r2, [r3, #14]
    ab68:	2103      	movs	r1, #3
    ab6a:	438a      	bics	r2, r1
    ab6c:	2102      	movs	r1, #2
    ab6e:	430a      	orrs	r2, r1
    ab70:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    ab72:	4b0f      	ldr	r3, [pc, #60]	; (abb0 <Reset_Handler+0xe4>)
    ab74:	685a      	ldr	r2, [r3, #4]
    ab76:	2180      	movs	r1, #128	; 0x80
    ab78:	430a      	orrs	r2, r1
    ab7a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    ab7c:	4b0d      	ldr	r3, [pc, #52]	; (abb4 <Reset_Handler+0xe8>)
    ab7e:	4798      	blx	r3

        /* Branch to main function */
        main();
    ab80:	4b0d      	ldr	r3, [pc, #52]	; (abb8 <Reset_Handler+0xec>)
    ab82:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    ab84:	e7fe      	b.n	ab84 <Reset_Handler+0xb8>
    ab86:	46c0      	nop			; (mov r8, r8)
    ab88:	0000bb74 	.word	0x0000bb74
    ab8c:	20000000 	.word	0x20000000
    ab90:	20000334 	.word	0x20000334
    ab94:	20000334 	.word	0x20000334
    ab98:	20006d68 	.word	0x20006d68
    ab9c:	00000000 	.word	0x00000000
    aba0:	e000ed00 	.word	0xe000ed00
    aba4:	41007000 	.word	0x41007000
    aba8:	41005000 	.word	0x41005000
    abac:	41004800 	.word	0x41004800
    abb0:	41004000 	.word	0x41004000
    abb4:	0000b84d 	.word	0x0000b84d
    abb8:	0000ad65 	.word	0x0000ad65

0000abbc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    abbc:	b580      	push	{r7, lr}
    abbe:	af00      	add	r7, sp, #0
        while (1) {
        }
    abc0:	e7fe      	b.n	abc0 <Dummy_Handler+0x4>
    abc2:	46c0      	nop			; (mov r8, r8)

0000abc4 <salloc>:
#define KEY_MEMORY_SIZE  10240

static uint8_t runTimeMemory[KEY_MEMORY_SIZE];
static uint16_t timeMemoryLength = 0;//current length of memory
uint8_t * salloc(uint8_t size)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	b084      	sub	sp, #16
    abc8:	af00      	add	r7, sp, #0
    abca:	1c02      	adds	r2, r0, #0
    abcc:	1dfb      	adds	r3, r7, #7
    abce:	701a      	strb	r2, [r3, #0]
	uint8_t *memPtr;
	if(timeMemoryLength + size > KEY_MEMORY_SIZE)
    abd0:	4b0f      	ldr	r3, [pc, #60]	; (ac10 <salloc+0x4c>)
    abd2:	881b      	ldrh	r3, [r3, #0]
    abd4:	1c1a      	adds	r2, r3, #0
    abd6:	1dfb      	adds	r3, r7, #7
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	18d2      	adds	r2, r2, r3
    abdc:	23a0      	movs	r3, #160	; 0xa0
    abde:	019b      	lsls	r3, r3, #6
    abe0:	429a      	cmp	r2, r3
    abe2:	dd01      	ble.n	abe8 <salloc+0x24>
	{
		//out of memory 
		return 0;//null
    abe4:	2300      	movs	r3, #0
    abe6:	e00f      	b.n	ac08 <salloc+0x44>
	}
	memPtr = &runTimeMemory[timeMemoryLength];
    abe8:	4b09      	ldr	r3, [pc, #36]	; (ac10 <salloc+0x4c>)
    abea:	881b      	ldrh	r3, [r3, #0]
    abec:	1c1a      	adds	r2, r3, #0
    abee:	4b09      	ldr	r3, [pc, #36]	; (ac14 <salloc+0x50>)
    abf0:	18d3      	adds	r3, r2, r3
    abf2:	60fb      	str	r3, [r7, #12]
	timeMemoryLength += size;
    abf4:	1dfb      	adds	r3, r7, #7
    abf6:	781b      	ldrb	r3, [r3, #0]
    abf8:	b29a      	uxth	r2, r3
    abfa:	4b05      	ldr	r3, [pc, #20]	; (ac10 <salloc+0x4c>)
    abfc:	881b      	ldrh	r3, [r3, #0]
    abfe:	18d3      	adds	r3, r2, r3
    ac00:	b29a      	uxth	r2, r3
    ac02:	4b03      	ldr	r3, [pc, #12]	; (ac10 <salloc+0x4c>)
    ac04:	801a      	strh	r2, [r3, #0]
	return memPtr;
    ac06:	68fb      	ldr	r3, [r7, #12]
}
    ac08:	1c18      	adds	r0, r3, #0
    ac0a:	46bd      	mov	sp, r7
    ac0c:	b004      	add	sp, #16
    ac0e:	bd80      	pop	{r7, pc}
    ac10:	20006990 	.word	0x20006990
    ac14:	20004190 	.word	0x20004190

0000ac18 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    ac18:	b580      	push	{r7, lr}
    ac1a:	b082      	sub	sp, #8
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	1c02      	adds	r2, r0, #0
    ac20:	1dfb      	adds	r3, r7, #7
    ac22:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    ac24:	4b13      	ldr	r3, [pc, #76]	; (ac74 <system_set_sleepmode+0x5c>)
    ac26:	685a      	ldr	r2, [r3, #4]
    ac28:	21c0      	movs	r1, #192	; 0xc0
    ac2a:	0089      	lsls	r1, r1, #2
    ac2c:	430a      	orrs	r2, r1
    ac2e:	605a      	str	r2, [r3, #4]
#endif

	switch (sleep_mode) {
    ac30:	1dfb      	adds	r3, r7, #7
    ac32:	781b      	ldrb	r3, [r3, #0]
    ac34:	2b00      	cmp	r3, #0
    ac36:	db16      	blt.n	ac66 <system_set_sleepmode+0x4e>
    ac38:	2b02      	cmp	r3, #2
    ac3a:	dd02      	ble.n	ac42 <system_set_sleepmode+0x2a>
    ac3c:	2b03      	cmp	r3, #3
    ac3e:	d00b      	beq.n	ac58 <system_set_sleepmode+0x40>
    ac40:	e011      	b.n	ac66 <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    ac42:	4b0d      	ldr	r3, [pc, #52]	; (ac78 <system_set_sleepmode+0x60>)
    ac44:	4a0c      	ldr	r2, [pc, #48]	; (ac78 <system_set_sleepmode+0x60>)
    ac46:	6912      	ldr	r2, [r2, #16]
    ac48:	2104      	movs	r1, #4
    ac4a:	438a      	bics	r2, r1
    ac4c:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    ac4e:	4b0b      	ldr	r3, [pc, #44]	; (ac7c <system_set_sleepmode+0x64>)
    ac50:	1dfa      	adds	r2, r7, #7
    ac52:	7812      	ldrb	r2, [r2, #0]
    ac54:	705a      	strb	r2, [r3, #1]
			break;
    ac56:	e008      	b.n	ac6a <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    ac58:	4b07      	ldr	r3, [pc, #28]	; (ac78 <system_set_sleepmode+0x60>)
    ac5a:	4a07      	ldr	r2, [pc, #28]	; (ac78 <system_set_sleepmode+0x60>)
    ac5c:	6912      	ldr	r2, [r2, #16]
    ac5e:	2104      	movs	r1, #4
    ac60:	430a      	orrs	r2, r1
    ac62:	611a      	str	r2, [r3, #16]
			break;
    ac64:	e001      	b.n	ac6a <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    ac66:	2317      	movs	r3, #23
    ac68:	e000      	b.n	ac6c <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    ac6a:	2300      	movs	r3, #0
}
    ac6c:	1c18      	adds	r0, r3, #0
    ac6e:	46bd      	mov	sp, r7
    ac70:	b002      	add	sp, #8
    ac72:	bd80      	pop	{r7, pc}
    ac74:	41004000 	.word	0x41004000
    ac78:	e000ed00 	.word	0xe000ed00
    ac7c:	40000400 	.word	0x40000400

0000ac80 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    ac80:	b580      	push	{r7, lr}
    ac82:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    ac84:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    ac88:	bf30      	wfi
	__DSB();
	__WFI();
}
    ac8a:	46bd      	mov	sp, r7
    ac8c:	bd80      	pop	{r7, pc}
    ac8e:	46c0      	nop			; (mov r8, r8)

0000ac90 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    ac90:	b580      	push	{r7, lr}
    ac92:	b082      	sub	sp, #8
    ac94:	af00      	add	r7, sp, #0
    ac96:	1c02      	adds	r2, r0, #0
    ac98:	1dfb      	adds	r3, r7, #7
    ac9a:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    ac9c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    ac9e:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    aca2:	4b0a      	ldr	r3, [pc, #40]	; (accc <sleepmgr_sleep+0x3c>)
    aca4:	2200      	movs	r2, #0
    aca6:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    aca8:	1dfb      	adds	r3, r7, #7
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	3b01      	subs	r3, #1
    acae:	b2db      	uxtb	r3, r3
    acb0:	1c18      	adds	r0, r3, #0
    acb2:	4b07      	ldr	r3, [pc, #28]	; (acd0 <sleepmgr_sleep+0x40>)
    acb4:	4798      	blx	r3
	cpu_irq_enable();
    acb6:	4b05      	ldr	r3, [pc, #20]	; (accc <sleepmgr_sleep+0x3c>)
    acb8:	2201      	movs	r2, #1
    acba:	701a      	strb	r2, [r3, #0]
    acbc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    acc0:	b662      	cpsie	i
	system_sleep();
    acc2:	4b04      	ldr	r3, [pc, #16]	; (acd4 <sleepmgr_sleep+0x44>)
    acc4:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    acc6:	46bd      	mov	sp, r7
    acc8:	b002      	add	sp, #8
    acca:	bd80      	pop	{r7, pc}
    accc:	200002b4 	.word	0x200002b4
    acd0:	0000ac19 	.word	0x0000ac19
    acd4:	0000ac81 	.word	0x0000ac81

0000acd8 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    acd8:	b580      	push	{r7, lr}
    acda:	b082      	sub	sp, #8
    acdc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    acde:	1dfb      	adds	r3, r7, #7
    ace0:	2200      	movs	r2, #0
    ace2:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    ace4:	4b0a      	ldr	r3, [pc, #40]	; (ad10 <sleepmgr_get_sleep_mode+0x38>)
    ace6:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    ace8:	e007      	b.n	acfa <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    acea:	683b      	ldr	r3, [r7, #0]
    acec:	3301      	adds	r3, #1
    acee:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    acf0:	1dfb      	adds	r3, r7, #7
    acf2:	1dfa      	adds	r2, r7, #7
    acf4:	7812      	ldrb	r2, [r2, #0]
    acf6:	3201      	adds	r2, #1
    acf8:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    acfa:	683b      	ldr	r3, [r7, #0]
    acfc:	781b      	ldrb	r3, [r3, #0]
    acfe:	2b00      	cmp	r3, #0
    ad00:	d0f3      	beq.n	acea <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    ad02:	1dfb      	adds	r3, r7, #7
    ad04:	781b      	ldrb	r3, [r3, #0]
}
    ad06:	1c18      	adds	r0, r3, #0
    ad08:	46bd      	mov	sp, r7
    ad0a:	b002      	add	sp, #8
    ad0c:	bd80      	pop	{r7, pc}
    ad0e:	46c0      	nop			; (mov r8, r8)
    ad10:	2000699c 	.word	0x2000699c

0000ad14 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    ad14:	b590      	push	{r4, r7, lr}
    ad16:	b083      	sub	sp, #12
    ad18:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    ad1a:	b672      	cpsid	i
    ad1c:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    ad20:	4b0d      	ldr	r3, [pc, #52]	; (ad58 <sleepmgr_enter_sleep+0x44>)
    ad22:	2200      	movs	r2, #0
    ad24:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    ad26:	1dfc      	adds	r4, r7, #7
    ad28:	4b0c      	ldr	r3, [pc, #48]	; (ad5c <sleepmgr_enter_sleep+0x48>)
    ad2a:	4798      	blx	r3
    ad2c:	1c03      	adds	r3, r0, #0
    ad2e:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    ad30:	1dfb      	adds	r3, r7, #7
    ad32:	781b      	ldrb	r3, [r3, #0]
    ad34:	2b00      	cmp	r3, #0
    ad36:	d106      	bne.n	ad46 <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    ad38:	4b07      	ldr	r3, [pc, #28]	; (ad58 <sleepmgr_enter_sleep+0x44>)
    ad3a:	2201      	movs	r2, #1
    ad3c:	701a      	strb	r2, [r3, #0]
    ad3e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    ad42:	b662      	cpsie	i
		return;
    ad44:	e004      	b.n	ad50 <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    ad46:	1dfb      	adds	r3, r7, #7
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	1c18      	adds	r0, r3, #0
    ad4c:	4b04      	ldr	r3, [pc, #16]	; (ad60 <sleepmgr_enter_sleep+0x4c>)
    ad4e:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    ad50:	46bd      	mov	sp, r7
    ad52:	b003      	add	sp, #12
    ad54:	bd90      	pop	{r4, r7, pc}
    ad56:	46c0      	nop			; (mov r8, r8)
    ad58:	200002b4 	.word	0x200002b4
    ad5c:	0000acd9 	.word	0x0000acd9
    ad60:	0000ac91 	.word	0x0000ac91

0000ad64 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)//
{
    ad64:	b580      	push	{r7, lr}
    ad66:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    ad68:	4b21      	ldr	r3, [pc, #132]	; (adf0 <main+0x8c>)
    ad6a:	2201      	movs	r2, #1
    ad6c:	701a      	strb	r2, [r3, #0]
    ad6e:	f3bf 8f5f 	dmb	sy
    ad72:	b662      	cpsie	i
	//sleepmgr_init();
#if !SAMD21 && !SAMR21 && !SAML21
	sysclk_init();
	board_init();
#else
	system_init();
    ad74:	4b1f      	ldr	r3, [pc, #124]	; (adf4 <main+0x90>)
    ad76:	4798      	blx	r3
#endif
	ui_init();
    ad78:	4b1f      	ldr	r3, [pc, #124]	; (adf8 <main+0x94>)
    ad7a:	4798      	blx	r3
	ui_powerdown();
    ad7c:	4b1f      	ldr	r3, [pc, #124]	; (adfc <main+0x98>)
    ad7e:	4798      	blx	r3

	memories_initialization();
    ad80:	4b1f      	ldr	r3, [pc, #124]	; (ae00 <main+0x9c>)
    ad82:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    ad84:	4b1f      	ldr	r3, [pc, #124]	; (ae04 <main+0xa0>)
    ad86:	4798      	blx	r3
	while (true) {

	//this is just an attempt to
	static volatile uint16_t virtual_sof_sub = 0;
	
	if (udd_get_frame_number()/500 == virtual_sof_sub++) 
    ad88:	4b1f      	ldr	r3, [pc, #124]	; (ae08 <main+0xa4>)
    ad8a:	4798      	blx	r3
    ad8c:	1c03      	adds	r3, r0, #0
    ad8e:	1c1a      	adds	r2, r3, #0
    ad90:	4b1e      	ldr	r3, [pc, #120]	; (ae0c <main+0xa8>)
    ad92:	1c10      	adds	r0, r2, #0
    ad94:	22fa      	movs	r2, #250	; 0xfa
    ad96:	0051      	lsls	r1, r2, #1
    ad98:	4798      	blx	r3
    ad9a:	1c03      	adds	r3, r0, #0
    ad9c:	b29a      	uxth	r2, r3
    ad9e:	4b1c      	ldr	r3, [pc, #112]	; (ae10 <main+0xac>)
    ada0:	881b      	ldrh	r3, [r3, #0]
    ada2:	b29b      	uxth	r3, r3
    ada4:	1c59      	adds	r1, r3, #1
    ada6:	b288      	uxth	r0, r1
    ada8:	4919      	ldr	r1, [pc, #100]	; (ae10 <main+0xac>)
    adaa:	8008      	strh	r0, [r1, #0]
    adac:	429a      	cmp	r2, r3
    adae:	d10b      	bne.n	adc8 <main+0x64>
	{
		virtual_sof_sub = 0;
    adb0:	4b17      	ldr	r3, [pc, #92]	; (ae10 <main+0xac>)
    adb2:	2200      	movs	r2, #0
    adb4:	801a      	strh	r2, [r3, #0]
		static uint16_t virtual_sof = 0;
		ui_process(virtual_sof++);
    adb6:	4b17      	ldr	r3, [pc, #92]	; (ae14 <main+0xb0>)
    adb8:	881b      	ldrh	r3, [r3, #0]
    adba:	1c5a      	adds	r2, r3, #1
    adbc:	b291      	uxth	r1, r2
    adbe:	4a15      	ldr	r2, [pc, #84]	; (ae14 <main+0xb0>)
    adc0:	8011      	strh	r1, [r2, #0]
    adc2:	1c18      	adds	r0, r3, #0
    adc4:	4b14      	ldr	r3, [pc, #80]	; (ae18 <main+0xb4>)
    adc6:	4798      	blx	r3
	}
	
//	ui_process(udd_get_frame_number());
	
		if (main_b_msc_enable) {
    adc8:	4b14      	ldr	r3, [pc, #80]	; (ae1c <main+0xb8>)
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	b2db      	uxtb	r3, r3
    adce:	2b00      	cmp	r3, #0
    add0:	d00a      	beq.n	ade8 <main+0x84>
			if (!udi_msc_process_trans()) {
    add2:	4b13      	ldr	r3, [pc, #76]	; (ae20 <main+0xbc>)
    add4:	4798      	blx	r3
    add6:	1c03      	adds	r3, r0, #0
    add8:	2201      	movs	r2, #1
    adda:	4053      	eors	r3, r2
    addc:	b2db      	uxtb	r3, r3
    adde:	2b00      	cmp	r3, #0
    ade0:	d005      	beq.n	adee <main+0x8a>
				sleepmgr_enter_sleep();
    ade2:	4b10      	ldr	r3, [pc, #64]	; (ae24 <main+0xc0>)
    ade4:	4798      	blx	r3
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
    ade6:	e7cf      	b.n	ad88 <main+0x24>
		if (main_b_msc_enable) {
			if (!udi_msc_process_trans()) {
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
    ade8:	4b0e      	ldr	r3, [pc, #56]	; (ae24 <main+0xc0>)
    adea:	4798      	blx	r3
		}
	}
    adec:	e7cc      	b.n	ad88 <main+0x24>
    adee:	e7cb      	b.n	ad88 <main+0x24>
    adf0:	200002b4 	.word	0x200002b4
    adf4:	00007439 	.word	0x00007439
    adf8:	0000132d 	.word	0x0000132d
    adfc:	000013a5 	.word	0x000013a5
    ae00:	0000b0f9 	.word	0x0000b0f9
    ae04:	000041d1 	.word	0x000041d1
    ae08:	00007c91 	.word	0x00007c91
    ae0c:	0000b669 	.word	0x0000b669
    ae10:	20006996 	.word	0x20006996
    ae14:	20006998 	.word	0x20006998
    ae18:	00001465 	.word	0x00001465
    ae1c:	20006994 	.word	0x20006994
    ae20:	00003d21 	.word	0x00003d21
    ae24:	0000ad15 	.word	0x0000ad15

0000ae28 <main_suspend_action>:
}

void main_suspend_action(void)
{
    ae28:	b580      	push	{r7, lr}
    ae2a:	af00      	add	r7, sp, #0
	ui_powerdown();
    ae2c:	4b01      	ldr	r3, [pc, #4]	; (ae34 <main_suspend_action+0xc>)
    ae2e:	4798      	blx	r3
}
    ae30:	46bd      	mov	sp, r7
    ae32:	bd80      	pop	{r7, pc}
    ae34:	000013a5 	.word	0x000013a5

0000ae38 <main_resume_action>:

void main_resume_action(void)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	af00      	add	r7, sp, #0
	ui_wakeup();
    ae3c:	4b01      	ldr	r3, [pc, #4]	; (ae44 <main_resume_action+0xc>)
    ae3e:	4798      	blx	r3
}
    ae40:	46bd      	mov	sp, r7
    ae42:	bd80      	pop	{r7, pc}
    ae44:	000013e1 	.word	0x000013e1

0000ae48 <main_sof_action>:

void main_sof_action(void)
{
    ae48:	b580      	push	{r7, lr}
    ae4a:	af00      	add	r7, sp, #0
	if ((!main_b_mouse_enable) ||
    ae4c:	4b14      	ldr	r3, [pc, #80]	; (aea0 <main_sof_action+0x58>)
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	b2db      	uxtb	r3, r3
    ae52:	2201      	movs	r2, #1
    ae54:	4053      	eors	r3, r2
    ae56:	b2db      	uxtb	r3, r3
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d117      	bne.n	ae8c <main_sof_action+0x44>
		(!main_b_msc_enable) ||
    ae5c:	4b11      	ldr	r3, [pc, #68]	; (aea4 <main_sof_action+0x5c>)
    ae5e:	781b      	ldrb	r3, [r3, #0]
    ae60:	b2db      	uxtb	r3, r3
    ae62:	2201      	movs	r2, #1
    ae64:	4053      	eors	r3, r2
    ae66:	b2db      	uxtb	r3, r3
	ui_wakeup();
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d10f      	bne.n	ae8c <main_sof_action+0x44>
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    ae6c:	4b0e      	ldr	r3, [pc, #56]	; (aea8 <main_sof_action+0x60>)
    ae6e:	781b      	ldrb	r3, [r3, #0]
    ae70:	b2db      	uxtb	r3, r3
    ae72:	2201      	movs	r2, #1
    ae74:	4053      	eors	r3, r2
    ae76:	b2db      	uxtb	r3, r3
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d107      	bne.n	ae8c <main_sof_action+0x44>
		(!main_b_keyboard_enable) ||
		(!main_b_cdc_enable))
    ae7c:	4b0b      	ldr	r3, [pc, #44]	; (aeac <main_sof_action+0x64>)
    ae7e:	781b      	ldrb	r3, [r3, #0]
    ae80:	b2db      	uxtb	r3, r3
    ae82:	2201      	movs	r2, #1
    ae84:	4053      	eors	r3, r2
    ae86:	b2db      	uxtb	r3, r3

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    ae88:	2b00      	cmp	r3, #0
    ae8a:	d000      	beq.n	ae8e <main_sof_action+0x46>
		(!main_b_cdc_enable))
		return;
    ae8c:	e005      	b.n	ae9a <main_sof_action+0x52>
	ui_process(udd_get_frame_number());
    ae8e:	4b08      	ldr	r3, [pc, #32]	; (aeb0 <main_sof_action+0x68>)
    ae90:	4798      	blx	r3
    ae92:	1c03      	adds	r3, r0, #0
    ae94:	1c18      	adds	r0, r3, #0
    ae96:	4b07      	ldr	r3, [pc, #28]	; (aeb4 <main_sof_action+0x6c>)
    ae98:	4798      	blx	r3
}
    ae9a:	46bd      	mov	sp, r7
    ae9c:	bd80      	pop	{r7, pc}
    ae9e:	46c0      	nop			; (mov r8, r8)
    aea0:	20006993 	.word	0x20006993
    aea4:	20006994 	.word	0x20006994
    aea8:	20006992 	.word	0x20006992
    aeac:	20006995 	.word	0x20006995
    aeb0:	00007c91 	.word	0x00007c91
    aeb4:	00001465 	.word	0x00001465

0000aeb8 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    aeb8:	b580      	push	{r7, lr}
    aeba:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    aebc:	4b01      	ldr	r3, [pc, #4]	; (aec4 <main_remotewakeup_enable+0xc>)
    aebe:	4798      	blx	r3
}
    aec0:	46bd      	mov	sp, r7
    aec2:	bd80      	pop	{r7, pc}
    aec4:	000013b9 	.word	0x000013b9

0000aec8 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    aec8:	b580      	push	{r7, lr}
    aeca:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    aecc:	4b01      	ldr	r3, [pc, #4]	; (aed4 <main_remotewakeup_disable+0xc>)
    aece:	4798      	blx	r3
}
    aed0:	46bd      	mov	sp, r7
    aed2:	bd80      	pop	{r7, pc}
    aed4:	000013cd 	.word	0x000013cd

0000aed8 <main_extra_string>:
 * Manufacture, Product and serial number ID.
 *
 * return true, if the string ID requested is know and managed by this functions
 */
bool main_extra_string(void)
{
    aed8:	b580      	push	{r7, lr}
    aeda:	b084      	sub	sp, #16
    aedc:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
    aede:	1dfb      	adds	r3, r7, #7
    aee0:	2200      	movs	r2, #0
    aee2:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    aee4:	4b36      	ldr	r3, [pc, #216]	; (afc0 <main_extra_string+0xe8>)
    aee6:	885b      	ldrh	r3, [r3, #2]
    aee8:	1c1a      	adds	r2, r3, #0
    aeea:	23ff      	movs	r3, #255	; 0xff
    aeec:	4013      	ands	r3, r2
    aeee:	2b05      	cmp	r3, #5
    aef0:	d00e      	beq.n	af10 <main_extra_string+0x38>
    aef2:	dc02      	bgt.n	aefa <main_extra_string+0x22>
    aef4:	2b04      	cmp	r3, #4
    aef6:	d005      	beq.n	af04 <main_extra_string+0x2c>
    aef8:	e01c      	b.n	af34 <main_extra_string+0x5c>
    aefa:	2b06      	cmp	r3, #6
    aefc:	d00e      	beq.n	af1c <main_extra_string+0x44>
    aefe:	2b07      	cmp	r3, #7
    af00:	d012      	beq.n	af28 <main_extra_string+0x50>
    af02:	e017      	b.n	af34 <main_extra_string+0x5c>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
    af04:	1dfb      	adds	r3, r7, #7
    af06:	220d      	movs	r2, #13
    af08:	701a      	strb	r2, [r3, #0]
		str = udi_cdc_name;
    af0a:	4b2e      	ldr	r3, [pc, #184]	; (afc4 <main_extra_string+0xec>)
    af0c:	60bb      	str	r3, [r7, #8]
		break;
    af0e:	e013      	b.n	af38 <main_extra_string+0x60>
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
    af10:	1dfb      	adds	r3, r7, #7
    af12:	220d      	movs	r2, #13
    af14:	701a      	strb	r2, [r3, #0]
		str = udi_msc_name;
    af16:	4b2c      	ldr	r3, [pc, #176]	; (afc8 <main_extra_string+0xf0>)
    af18:	60bb      	str	r3, [r7, #8]
		break;
    af1a:	e00d      	b.n	af38 <main_extra_string+0x60>
	case UDI_HID_MOUSE_STRING_ID:
		str_lgt = sizeof(udi_hid_mouse_name)-1;
    af1c:	1dfb      	adds	r3, r7, #7
    af1e:	2213      	movs	r2, #19
    af20:	701a      	strb	r2, [r3, #0]
		str = udi_hid_mouse_name;
    af22:	4b2a      	ldr	r3, [pc, #168]	; (afcc <main_extra_string+0xf4>)
    af24:	60bb      	str	r3, [r7, #8]
		break;
    af26:	e007      	b.n	af38 <main_extra_string+0x60>
	case UDI_HID_KBD_STRING_ID:
		str_lgt = sizeof(udi_hid_kbd_name)-1;
    af28:	1dfb      	adds	r3, r7, #7
    af2a:	2216      	movs	r2, #22
    af2c:	701a      	strb	r2, [r3, #0]
		str = udi_hid_kbd_name;
    af2e:	4b28      	ldr	r3, [pc, #160]	; (afd0 <main_extra_string+0xf8>)
    af30:	60bb      	str	r3, [r7, #8]
		break;
    af32:	e001      	b.n	af38 <main_extra_string+0x60>
	default:
		return false;
    af34:	2300      	movs	r3, #0
    af36:	e03e      	b.n	afb6 <main_extra_string+0xde>
	}

	if (str_lgt!=0) {
    af38:	1dfb      	adds	r3, r7, #7
    af3a:	781b      	ldrb	r3, [r3, #0]
    af3c:	2b00      	cmp	r3, #0
    af3e:	d02f      	beq.n	afa0 <main_extra_string+0xc8>
		for( i=0; i<str_lgt; i++) {
    af40:	1c3b      	adds	r3, r7, #0
    af42:	330f      	adds	r3, #15
    af44:	2200      	movs	r2, #0
    af46:	701a      	strb	r2, [r3, #0]
    af48:	e013      	b.n	af72 <main_extra_string+0x9a>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    af4a:	1c3b      	adds	r3, r7, #0
    af4c:	330f      	adds	r3, #15
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	1c3a      	adds	r2, r7, #0
    af52:	320f      	adds	r2, #15
    af54:	7812      	ldrb	r2, [r2, #0]
    af56:	68b9      	ldr	r1, [r7, #8]
    af58:	188a      	adds	r2, r1, r2
    af5a:	7812      	ldrb	r2, [r2, #0]
    af5c:	491d      	ldr	r1, [pc, #116]	; (afd4 <main_extra_string+0xfc>)
    af5e:	005b      	lsls	r3, r3, #1
    af60:	18cb      	adds	r3, r1, r3
    af62:	805a      	strh	r2, [r3, #2]
	default:
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
    af64:	1c3b      	adds	r3, r7, #0
    af66:	330f      	adds	r3, #15
    af68:	781a      	ldrb	r2, [r3, #0]
    af6a:	1c3b      	adds	r3, r7, #0
    af6c:	330f      	adds	r3, #15
    af6e:	3201      	adds	r2, #1
    af70:	701a      	strb	r2, [r3, #0]
    af72:	1c3a      	adds	r2, r7, #0
    af74:	320f      	adds	r2, #15
    af76:	1dfb      	adds	r3, r7, #7
    af78:	7812      	ldrb	r2, [r2, #0]
    af7a:	781b      	ldrb	r3, [r3, #0]
    af7c:	429a      	cmp	r2, r3
    af7e:	d3e4      	bcc.n	af4a <main_extra_string+0x72>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
    af80:	1dfb      	adds	r3, r7, #7
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	3301      	adds	r3, #1
    af86:	b2db      	uxtb	r3, r3
    af88:	18db      	adds	r3, r3, r3
    af8a:	b2da      	uxtb	r2, r3
    af8c:	4b11      	ldr	r3, [pc, #68]	; (afd4 <main_extra_string+0xfc>)
    af8e:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
    af90:	4b10      	ldr	r3, [pc, #64]	; (afd4 <main_extra_string+0xfc>)
    af92:	781b      	ldrb	r3, [r3, #0]
    af94:	1c1a      	adds	r2, r3, #0
    af96:	4b0a      	ldr	r3, [pc, #40]	; (afc0 <main_extra_string+0xe8>)
    af98:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
    af9a:	4b09      	ldr	r3, [pc, #36]	; (afc0 <main_extra_string+0xe8>)
    af9c:	4a0d      	ldr	r2, [pc, #52]	; (afd4 <main_extra_string+0xfc>)
    af9e:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
    afa0:	4b07      	ldr	r3, [pc, #28]	; (afc0 <main_extra_string+0xe8>)
    afa2:	899a      	ldrh	r2, [r3, #12]
    afa4:	4b06      	ldr	r3, [pc, #24]	; (afc0 <main_extra_string+0xe8>)
    afa6:	88db      	ldrh	r3, [r3, #6]
    afa8:	429a      	cmp	r2, r3
    afaa:	d903      	bls.n	afb4 <main_extra_string+0xdc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    afac:	4b04      	ldr	r3, [pc, #16]	; (afc0 <main_extra_string+0xe8>)
    afae:	88da      	ldrh	r2, [r3, #6]
    afb0:	4b03      	ldr	r3, [pc, #12]	; (afc0 <main_extra_string+0xe8>)
    afb2:	819a      	strh	r2, [r3, #12]
	}
	return true;
    afb4:	2301      	movs	r3, #1
}
    afb6:	1c18      	adds	r0, r3, #0
    afb8:	46bd      	mov	sp, r7
    afba:	b004      	add	sp, #16
    afbc:	bd80      	pop	{r7, pc}
    afbe:	46c0      	nop			; (mov r8, r8)
    afc0:	20006b9c 	.word	0x20006b9c
    afc4:	200002b8 	.word	0x200002b8
    afc8:	200002c8 	.word	0x200002c8
    afcc:	200002d8 	.word	0x200002d8
    afd0:	200002ec 	.word	0x200002ec
    afd4:	20000304 	.word	0x20000304

0000afd8 <main_msc_enable>:

bool main_msc_enable(void)
{
    afd8:	b580      	push	{r7, lr}
    afda:	af00      	add	r7, sp, #0
	main_b_msc_enable = true;
    afdc:	4b03      	ldr	r3, [pc, #12]	; (afec <main_msc_enable+0x14>)
    afde:	2201      	movs	r2, #1
    afe0:	701a      	strb	r2, [r3, #0]
	return true;
    afe2:	2301      	movs	r3, #1
}
    afe4:	1c18      	adds	r0, r3, #0
    afe6:	46bd      	mov	sp, r7
    afe8:	bd80      	pop	{r7, pc}
    afea:	46c0      	nop			; (mov r8, r8)
    afec:	20006994 	.word	0x20006994

0000aff0 <main_msc_disable>:

void main_msc_disable(void)
{
    aff0:	b580      	push	{r7, lr}
    aff2:	af00      	add	r7, sp, #0
	main_b_msc_enable = false;
    aff4:	4b02      	ldr	r3, [pc, #8]	; (b000 <main_msc_disable+0x10>)
    aff6:	2200      	movs	r2, #0
    aff8:	701a      	strb	r2, [r3, #0]
}
    affa:	46bd      	mov	sp, r7
    affc:	bd80      	pop	{r7, pc}
    affe:	46c0      	nop			; (mov r8, r8)
    b000:	20006994 	.word	0x20006994

0000b004 <main_mouse_enable>:

bool main_mouse_enable(void)
{
    b004:	b580      	push	{r7, lr}
    b006:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    b008:	4b03      	ldr	r3, [pc, #12]	; (b018 <main_mouse_enable+0x14>)
    b00a:	2201      	movs	r2, #1
    b00c:	701a      	strb	r2, [r3, #0]
	return true;
    b00e:	2301      	movs	r3, #1
}
    b010:	1c18      	adds	r0, r3, #0
    b012:	46bd      	mov	sp, r7
    b014:	bd80      	pop	{r7, pc}
    b016:	46c0      	nop			; (mov r8, r8)
    b018:	20006993 	.word	0x20006993

0000b01c <main_mouse_disable>:

void main_mouse_disable(void)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    b020:	4b02      	ldr	r3, [pc, #8]	; (b02c <main_mouse_disable+0x10>)
    b022:	2200      	movs	r2, #0
    b024:	701a      	strb	r2, [r3, #0]
}
    b026:	46bd      	mov	sp, r7
    b028:	bd80      	pop	{r7, pc}
    b02a:	46c0      	nop			; (mov r8, r8)
    b02c:	20006993 	.word	0x20006993

0000b030 <main_keyboard_enable>:

bool main_keyboard_enable(void)
{
    b030:	b580      	push	{r7, lr}
    b032:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = true;
    b034:	4b03      	ldr	r3, [pc, #12]	; (b044 <main_keyboard_enable+0x14>)
    b036:	2201      	movs	r2, #1
    b038:	701a      	strb	r2, [r3, #0]
	return true;
    b03a:	2301      	movs	r3, #1
}
    b03c:	1c18      	adds	r0, r3, #0
    b03e:	46bd      	mov	sp, r7
    b040:	bd80      	pop	{r7, pc}
    b042:	46c0      	nop			; (mov r8, r8)
    b044:	20006992 	.word	0x20006992

0000b048 <main_keyboard_disable>:

void main_keyboard_disable(void)
{
    b048:	b580      	push	{r7, lr}
    b04a:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = false;
    b04c:	4b02      	ldr	r3, [pc, #8]	; (b058 <main_keyboard_disable+0x10>)
    b04e:	2200      	movs	r2, #0
    b050:	701a      	strb	r2, [r3, #0]
}
    b052:	46bd      	mov	sp, r7
    b054:	bd80      	pop	{r7, pc}
    b056:	46c0      	nop			; (mov r8, r8)
    b058:	20006992 	.word	0x20006992

0000b05c <main_cdc_enable>:

bool main_cdc_enable(uint8_t port)
{
    b05c:	b580      	push	{r7, lr}
    b05e:	b082      	sub	sp, #8
    b060:	af00      	add	r7, sp, #0
    b062:	1c02      	adds	r2, r0, #0
    b064:	1dfb      	adds	r3, r7, #7
    b066:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = true;
    b068:	4b06      	ldr	r3, [pc, #24]	; (b084 <main_cdc_enable+0x28>)
    b06a:	2201      	movs	r2, #1
    b06c:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    b06e:	1dfb      	adds	r3, r7, #7
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	1c18      	adds	r0, r3, #0
    b074:	4b04      	ldr	r3, [pc, #16]	; (b088 <main_cdc_enable+0x2c>)
    b076:	4798      	blx	r3
	return true;
    b078:	2301      	movs	r3, #1
}
    b07a:	1c18      	adds	r0, r3, #0
    b07c:	46bd      	mov	sp, r7
    b07e:	b002      	add	sp, #8
    b080:	bd80      	pop	{r7, pc}
    b082:	46c0      	nop			; (mov r8, r8)
    b084:	20006995 	.word	0x20006995
    b088:	0000b621 	.word	0x0000b621

0000b08c <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    b08c:	b580      	push	{r7, lr}
    b08e:	b082      	sub	sp, #8
    b090:	af00      	add	r7, sp, #0
    b092:	1c02      	adds	r2, r0, #0
    b094:	1dfb      	adds	r3, r7, #7
    b096:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = false;
    b098:	4b05      	ldr	r3, [pc, #20]	; (b0b0 <main_cdc_disable+0x24>)
    b09a:	2200      	movs	r2, #0
    b09c:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    b09e:	1dfb      	adds	r3, r7, #7
    b0a0:	781b      	ldrb	r3, [r3, #0]
    b0a2:	1c18      	adds	r0, r3, #0
    b0a4:	4b03      	ldr	r3, [pc, #12]	; (b0b4 <main_cdc_disable+0x28>)
    b0a6:	4798      	blx	r3
}
    b0a8:	46bd      	mov	sp, r7
    b0aa:	b002      	add	sp, #8
    b0ac:	bd80      	pop	{r7, pc}
    b0ae:	46c0      	nop			; (mov r8, r8)
    b0b0:	20006995 	.word	0x20006995
    b0b4:	0000b645 	.word	0x0000b645

0000b0b8 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b082      	sub	sp, #8
    b0bc:	af00      	add	r7, sp, #0
    b0be:	1c0a      	adds	r2, r1, #0
    b0c0:	1dfb      	adds	r3, r7, #7
    b0c2:	1c01      	adds	r1, r0, #0
    b0c4:	7019      	strb	r1, [r3, #0]
    b0c6:	1dbb      	adds	r3, r7, #6
    b0c8:	701a      	strb	r2, [r3, #0]
	if (b_enable) {
    b0ca:	1dbb      	adds	r3, r7, #6
    b0cc:	781b      	ldrb	r3, [r3, #0]
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d005      	beq.n	b0de <main_cdc_set_dtr+0x26>
		// Host terminal has open COM
		ui_com_open(port);
    b0d2:	1dfb      	adds	r3, r7, #7
    b0d4:	781b      	ldrb	r3, [r3, #0]
    b0d6:	1c18      	adds	r0, r3, #0
    b0d8:	4b05      	ldr	r3, [pc, #20]	; (b0f0 <main_cdc_set_dtr+0x38>)
    b0da:	4798      	blx	r3
    b0dc:	e004      	b.n	b0e8 <main_cdc_set_dtr+0x30>
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    b0de:	1dfb      	adds	r3, r7, #7
    b0e0:	781b      	ldrb	r3, [r3, #0]
    b0e2:	1c18      	adds	r0, r3, #0
    b0e4:	4b03      	ldr	r3, [pc, #12]	; (b0f4 <main_cdc_set_dtr+0x3c>)
    b0e6:	4798      	blx	r3
	}
}
    b0e8:	46bd      	mov	sp, r7
    b0ea:	b002      	add	sp, #8
    b0ec:	bd80      	pop	{r7, pc}
    b0ee:	46c0      	nop			; (mov r8, r8)
    b0f0:	000013f5 	.word	0x000013f5
    b0f4:	00001409 	.word	0x00001409

0000b0f8 <memories_initialization>:
	   No additional actions to do */
}
#endif

void memories_initialization(void)
{
    b0f8:	b580      	push	{r7, lr}
    b0fa:	af00      	add	r7, sp, #0
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    b0fc:	46bd      	mov	sp, r7
    b0fe:	bd80      	pop	{r7, pc}

0000b100 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	1c02      	adds	r2, r0, #0
    b108:	1dfb      	adds	r3, r7, #7
    b10a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b10c:	4b06      	ldr	r3, [pc, #24]	; (b128 <system_interrupt_enable+0x28>)
    b10e:	1dfa      	adds	r2, r7, #7
    b110:	7812      	ldrb	r2, [r2, #0]
    b112:	1c11      	adds	r1, r2, #0
    b114:	221f      	movs	r2, #31
    b116:	400a      	ands	r2, r1
    b118:	2101      	movs	r1, #1
    b11a:	1c08      	adds	r0, r1, #0
    b11c:	4090      	lsls	r0, r2
    b11e:	1c02      	adds	r2, r0, #0
    b120:	601a      	str	r2, [r3, #0]
}
    b122:	46bd      	mov	sp, r7
    b124:	b002      	add	sp, #8
    b126:	bd80      	pop	{r7, pc}
    b128:	e000e100 	.word	0xe000e100

0000b12c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	1c02      	adds	r2, r0, #0
    b134:	1dfb      	adds	r3, r7, #7
    b136:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b138:	4a07      	ldr	r2, [pc, #28]	; (b158 <system_interrupt_disable+0x2c>)
    b13a:	1dfb      	adds	r3, r7, #7
    b13c:	781b      	ldrb	r3, [r3, #0]
    b13e:	1c19      	adds	r1, r3, #0
    b140:	231f      	movs	r3, #31
    b142:	400b      	ands	r3, r1
    b144:	2101      	movs	r1, #1
    b146:	1c08      	adds	r0, r1, #0
    b148:	4098      	lsls	r0, r3
    b14a:	1c03      	adds	r3, r0, #0
    b14c:	1c19      	adds	r1, r3, #0
    b14e:	2380      	movs	r3, #128	; 0x80
    b150:	50d1      	str	r1, [r2, r3]
}
    b152:	46bd      	mov	sp, r7
    b154:	b002      	add	sp, #8
    b156:	bd80      	pop	{r7, pc}
    b158:	e000e100 	.word	0xe000e100

0000b15c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    b15c:	b580      	push	{r7, lr}
    b15e:	b084      	sub	sp, #16
    b160:	af00      	add	r7, sp, #0
    b162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    b164:	687b      	ldr	r3, [r7, #4]
    b166:	681b      	ldr	r3, [r3, #0]
    b168:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    b16a:	68fb      	ldr	r3, [r7, #12]
    b16c:	69db      	ldr	r3, [r3, #28]
    b16e:	1e5a      	subs	r2, r3, #1
    b170:	4193      	sbcs	r3, r2
    b172:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    b174:	1c18      	adds	r0, r3, #0
    b176:	46bd      	mov	sp, r7
    b178:	b004      	add	sp, #16
    b17a:	bd80      	pop	{r7, pc}

0000b17c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    b17c:	b580      	push	{r7, lr}
    b17e:	b082      	sub	sp, #8
    b180:	af00      	add	r7, sp, #0
    b182:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    b184:	46c0      	nop			; (mov r8, r8)
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	1c18      	adds	r0, r3, #0
    b18a:	4b04      	ldr	r3, [pc, #16]	; (b19c <_usart_wait_for_sync+0x20>)
    b18c:	4798      	blx	r3
    b18e:	1c03      	adds	r3, r0, #0
    b190:	2b00      	cmp	r3, #0
    b192:	d1f8      	bne.n	b186 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    b194:	46bd      	mov	sp, r7
    b196:	b002      	add	sp, #8
    b198:	bd80      	pop	{r7, pc}
    b19a:	46c0      	nop			; (mov r8, r8)
    b19c:	0000b15d 	.word	0x0000b15d

0000b1a0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    b1a0:	b580      	push	{r7, lr}
    b1a2:	b082      	sub	sp, #8
    b1a4:	af00      	add	r7, sp, #0
    b1a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	2280      	movs	r2, #128	; 0x80
    b1ac:	05d2      	lsls	r2, r2, #23
    b1ae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b1b0:	687b      	ldr	r3, [r7, #4]
    b1b2:	2200      	movs	r2, #0
    b1b4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    b1b6:	687b      	ldr	r3, [r7, #4]
    b1b8:	22ff      	movs	r2, #255	; 0xff
    b1ba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	2200      	movs	r2, #0
    b1c0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b1c2:	687b      	ldr	r3, [r7, #4]
    b1c4:	2200      	movs	r2, #0
    b1c6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    b1c8:	687b      	ldr	r3, [r7, #4]
    b1ca:	2296      	movs	r2, #150	; 0x96
    b1cc:	0192      	lsls	r2, r2, #6
    b1ce:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    b1d0:	687a      	ldr	r2, [r7, #4]
    b1d2:	2324      	movs	r3, #36	; 0x24
    b1d4:	2101      	movs	r1, #1
    b1d6:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    b1d8:	687a      	ldr	r2, [r7, #4]
    b1da:	2325      	movs	r3, #37	; 0x25
    b1dc:	2101      	movs	r1, #1
    b1de:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    b1e0:	687a      	ldr	r2, [r7, #4]
    b1e2:	2326      	movs	r3, #38	; 0x26
    b1e4:	2100      	movs	r1, #0
    b1e6:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    b1e8:	687a      	ldr	r2, [r7, #4]
    b1ea:	2327      	movs	r3, #39	; 0x27
    b1ec:	2100      	movs	r1, #0
    b1ee:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    b1f0:	687b      	ldr	r3, [r7, #4]
    b1f2:	2200      	movs	r2, #0
    b1f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    b1f6:	687b      	ldr	r3, [r7, #4]
    b1f8:	2288      	movs	r2, #136	; 0x88
    b1fa:	0352      	lsls	r2, r2, #13
    b1fc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    b1fe:	687a      	ldr	r2, [r7, #4]
    b200:	232c      	movs	r3, #44	; 0x2c
    b202:	2100      	movs	r1, #0
    b204:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    b206:	687a      	ldr	r2, [r7, #4]
    b208:	232d      	movs	r3, #45	; 0x2d
    b20a:	2100      	movs	r1, #0
    b20c:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    b20e:	687b      	ldr	r3, [r7, #4]
    b210:	2200      	movs	r2, #0
    b212:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	2200      	movs	r2, #0
    b218:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    b21a:	687b      	ldr	r3, [r7, #4]
    b21c:	2200      	movs	r2, #0
    b21e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    b220:	687b      	ldr	r3, [r7, #4]
    b222:	2200      	movs	r2, #0
    b224:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b226:	687b      	ldr	r3, [r7, #4]
    b228:	2200      	movs	r2, #0
    b22a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b22c:	687b      	ldr	r3, [r7, #4]
    b22e:	2200      	movs	r2, #0
    b230:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b232:	687b      	ldr	r3, [r7, #4]
    b234:	2200      	movs	r2, #0
    b236:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	2200      	movs	r2, #0
    b23c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    b23e:	687b      	ldr	r3, [r7, #4]
    b240:	2200      	movs	r2, #0
    b242:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	2200      	movs	r2, #0
    b248:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    b24a:	687b      	ldr	r3, [r7, #4]
    b24c:	2213      	movs	r2, #19
    b24e:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    b250:	687b      	ldr	r3, [r7, #4]
    b252:	2200      	movs	r2, #0
    b254:	775a      	strb	r2, [r3, #29]
#endif
}
    b256:	46bd      	mov	sp, r7
    b258:	b002      	add	sp, #8
    b25a:	bd80      	pop	{r7, pc}

0000b25c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    b25c:	b580      	push	{r7, lr}
    b25e:	b084      	sub	sp, #16
    b260:	af00      	add	r7, sp, #0
    b262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b264:	687b      	ldr	r3, [r7, #4]
    b266:	681b      	ldr	r3, [r3, #0]
    b268:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	681b      	ldr	r3, [r3, #0]
    b26e:	1c18      	adds	r0, r3, #0
    b270:	4b09      	ldr	r3, [pc, #36]	; (b298 <usart_enable+0x3c>)
    b272:	4798      	blx	r3
    b274:	1c03      	adds	r3, r0, #0
    b276:	1c18      	adds	r0, r3, #0
    b278:	4b08      	ldr	r3, [pc, #32]	; (b29c <usart_enable+0x40>)
    b27a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b27c:	687b      	ldr	r3, [r7, #4]
    b27e:	1c18      	adds	r0, r3, #0
    b280:	4b07      	ldr	r3, [pc, #28]	; (b2a0 <usart_enable+0x44>)
    b282:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b284:	68fb      	ldr	r3, [r7, #12]
    b286:	681b      	ldr	r3, [r3, #0]
    b288:	2202      	movs	r2, #2
    b28a:	431a      	orrs	r2, r3
    b28c:	68fb      	ldr	r3, [r7, #12]
    b28e:	601a      	str	r2, [r3, #0]
}
    b290:	46bd      	mov	sp, r7
    b292:	b004      	add	sp, #16
    b294:	bd80      	pop	{r7, pc}
    b296:	46c0      	nop			; (mov r8, r8)
    b298:	00005a6d 	.word	0x00005a6d
    b29c:	0000b101 	.word	0x0000b101
    b2a0:	0000b17d 	.word	0x0000b17d

0000b2a4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    b2a4:	b580      	push	{r7, lr}
    b2a6:	b084      	sub	sp, #16
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b2ac:	687b      	ldr	r3, [r7, #4]
    b2ae:	681b      	ldr	r3, [r3, #0]
    b2b0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    b2b2:	687b      	ldr	r3, [r7, #4]
    b2b4:	681b      	ldr	r3, [r3, #0]
    b2b6:	1c18      	adds	r0, r3, #0
    b2b8:	4b0a      	ldr	r3, [pc, #40]	; (b2e4 <usart_disable+0x40>)
    b2ba:	4798      	blx	r3
    b2bc:	1c03      	adds	r3, r0, #0
    b2be:	1c18      	adds	r0, r3, #0
    b2c0:	4b09      	ldr	r3, [pc, #36]	; (b2e8 <usart_disable+0x44>)
    b2c2:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b2c4:	687b      	ldr	r3, [r7, #4]
    b2c6:	1c18      	adds	r0, r3, #0
    b2c8:	4b08      	ldr	r3, [pc, #32]	; (b2ec <usart_disable+0x48>)
    b2ca:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    b2cc:	68fb      	ldr	r3, [r7, #12]
    b2ce:	681b      	ldr	r3, [r3, #0]
    b2d0:	2202      	movs	r2, #2
    b2d2:	1c19      	adds	r1, r3, #0
    b2d4:	4391      	bics	r1, r2
    b2d6:	1c0a      	adds	r2, r1, #0
    b2d8:	68fb      	ldr	r3, [r7, #12]
    b2da:	601a      	str	r2, [r3, #0]
}
    b2dc:	46bd      	mov	sp, r7
    b2de:	b004      	add	sp, #16
    b2e0:	bd80      	pop	{r7, pc}
    b2e2:	46c0      	nop			; (mov r8, r8)
    b2e4:	00005a6d 	.word	0x00005a6d
    b2e8:	0000b12d 	.word	0x0000b12d
    b2ec:	0000b17d 	.word	0x0000b17d

0000b2f0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b082      	sub	sp, #8
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	6078      	str	r0, [r7, #4]
    b2f8:	1c0a      	adds	r2, r1, #0
    b2fa:	1cfb      	adds	r3, r7, #3
    b2fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    b2fe:	687a      	ldr	r2, [r7, #4]
    b300:	2331      	movs	r3, #49	; 0x31
    b302:	5cd3      	ldrb	r3, [r2, r3]
    b304:	b2da      	uxtb	r2, r3
    b306:	1cfb      	adds	r3, r7, #3
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	2101      	movs	r1, #1
    b30c:	1c08      	adds	r0, r1, #0
    b30e:	4098      	lsls	r0, r3
    b310:	1c03      	adds	r3, r0, #0
    b312:	b2db      	uxtb	r3, r3
    b314:	4313      	orrs	r3, r2
    b316:	b2db      	uxtb	r3, r3
    b318:	b2d9      	uxtb	r1, r3
    b31a:	687a      	ldr	r2, [r7, #4]
    b31c:	2331      	movs	r3, #49	; 0x31
    b31e:	54d1      	strb	r1, [r2, r3]

}
    b320:	46bd      	mov	sp, r7
    b322:	b002      	add	sp, #8
    b324:	bd80      	pop	{r7, pc}
    b326:	46c0      	nop			; (mov r8, r8)

0000b328 <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    b328:	b580      	push	{r7, lr}
    b32a:	b082      	sub	sp, #8
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	1c0a      	adds	r2, r1, #0
    b332:	1cfb      	adds	r3, r7, #3
    b334:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    b336:	687a      	ldr	r2, [r7, #4]
    b338:	2331      	movs	r3, #49	; 0x31
    b33a:	5cd3      	ldrb	r3, [r2, r3]
    b33c:	b2db      	uxtb	r3, r3
    b33e:	1cfa      	adds	r2, r7, #3
    b340:	7812      	ldrb	r2, [r2, #0]
    b342:	2101      	movs	r1, #1
    b344:	1c08      	adds	r0, r1, #0
    b346:	4090      	lsls	r0, r2
    b348:	1c02      	adds	r2, r0, #0
    b34a:	b2d2      	uxtb	r2, r2
    b34c:	43d2      	mvns	r2, r2
    b34e:	b2d2      	uxtb	r2, r2
    b350:	4013      	ands	r3, r2
    b352:	b2db      	uxtb	r3, r3
    b354:	b2d9      	uxtb	r1, r3
    b356:	687a      	ldr	r2, [r7, #4]
    b358:	2331      	movs	r3, #49	; 0x31
    b35a:	54d1      	strb	r1, [r2, r3]
}
    b35c:	46bd      	mov	sp, r7
    b35e:	b002      	add	sp, #8
    b360:	bd80      	pop	{r7, pc}
    b362:	46c0      	nop			; (mov r8, r8)

0000b364 <usart_tx_callback>:
 * Called by USART driver when transmit is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_tx_callback(struct usart_module *const module)
{
    b364:	b580      	push	{r7, lr}
    b366:	b082      	sub	sp, #8
    b368:	af00      	add	r7, sp, #0
    b36a:	6078      	str	r0, [r7, #4]
	/* Data ready to be sent */
	if (udi_cdc_is_rx_ready()) {
    b36c:	4b0f      	ldr	r3, [pc, #60]	; (b3ac <usart_tx_callback+0x48>)
    b36e:	4798      	blx	r3
    b370:	1c03      	adds	r3, r0, #0
    b372:	2b00      	cmp	r3, #0
    b374:	d00f      	beq.n	b396 <usart_tx_callback+0x32>
		/* Transmit next data */
		ui_com_rx_start();
    b376:	4b0e      	ldr	r3, [pc, #56]	; (b3b0 <usart_tx_callback+0x4c>)
    b378:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    b37a:	4b0e      	ldr	r3, [pc, #56]	; (b3b4 <usart_tx_callback+0x50>)
    b37c:	4798      	blx	r3
    b37e:	1c03      	adds	r3, r0, #0
    b380:	b2da      	uxtb	r2, r3
    b382:	4b0d      	ldr	r3, [pc, #52]	; (b3b8 <usart_tx_callback+0x54>)
    b384:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    b386:	4a0d      	ldr	r2, [pc, #52]	; (b3bc <usart_tx_callback+0x58>)
    b388:	4b0b      	ldr	r3, [pc, #44]	; (b3b8 <usart_tx_callback+0x54>)
    b38a:	1c10      	adds	r0, r2, #0
    b38c:	1c19      	adds	r1, r3, #0
    b38e:	2201      	movs	r2, #1
    b390:	4b0b      	ldr	r3, [pc, #44]	; (b3c0 <usart_tx_callback+0x5c>)
    b392:	4798      	blx	r3
    b394:	e006      	b.n	b3a4 <usart_tx_callback+0x40>
	} else {
		/* Fifo empty then Stop UART transmission */
		usart_disable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    b396:	4b09      	ldr	r3, [pc, #36]	; (b3bc <usart_tx_callback+0x58>)
    b398:	1c18      	adds	r0, r3, #0
    b39a:	2100      	movs	r1, #0
    b39c:	4b09      	ldr	r3, [pc, #36]	; (b3c4 <usart_tx_callback+0x60>)
    b39e:	4798      	blx	r3
		ui_com_rx_stop();
    b3a0:	4b09      	ldr	r3, [pc, #36]	; (b3c8 <usart_tx_callback+0x64>)
    b3a2:	4798      	blx	r3
	}
}
    b3a4:	46bd      	mov	sp, r7
    b3a6:	b002      	add	sp, #8
    b3a8:	bd80      	pop	{r7, pc}
    b3aa:	46c0      	nop			; (mov r8, r8)
    b3ac:	00002675 	.word	0x00002675
    b3b0:	0000141d 	.word	0x0000141d
    b3b4:	000027d5 	.word	0x000027d5
    b3b8:	2000699a 	.word	0x2000699a
    b3bc:	20006d34 	.word	0x20006d34
    b3c0:	0000630d 	.word	0x0000630d
    b3c4:	0000b329 	.word	0x0000b329
    b3c8:	00001425 	.word	0x00001425

0000b3cc <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    b3cc:	b580      	push	{r7, lr}
    b3ce:	b082      	sub	sp, #8
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	6078      	str	r0, [r7, #4]
	/* Data received */
	ui_com_tx_start();
    b3d4:	4b10      	ldr	r3, [pc, #64]	; (b418 <usart_rx_callback+0x4c>)
    b3d6:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    b3d8:	4b10      	ldr	r3, [pc, #64]	; (b41c <usart_rx_callback+0x50>)
    b3da:	4798      	blx	r3
    b3dc:	1c03      	adds	r3, r0, #0
    b3de:	2201      	movs	r2, #1
    b3e0:	4053      	eors	r3, r2
    b3e2:	b2db      	uxtb	r3, r3
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	d004      	beq.n	b3f2 <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
    b3e8:	4b0d      	ldr	r3, [pc, #52]	; (b420 <usart_rx_callback+0x54>)
    b3ea:	4798      	blx	r3
		ui_com_overflow();
    b3ec:	4b0d      	ldr	r3, [pc, #52]	; (b424 <usart_rx_callback+0x58>)
    b3ee:	4798      	blx	r3
    b3f0:	e004      	b.n	b3fc <usart_rx_callback+0x30>
	} else {
		udi_cdc_putc(rx_data);
    b3f2:	4b0d      	ldr	r3, [pc, #52]	; (b428 <usart_rx_callback+0x5c>)
    b3f4:	781b      	ldrb	r3, [r3, #0]
    b3f6:	1c18      	adds	r0, r3, #0
    b3f8:	4b0c      	ldr	r3, [pc, #48]	; (b42c <usart_rx_callback+0x60>)
    b3fa:	4798      	blx	r3
	}

	ui_com_tx_stop();
    b3fc:	4b0c      	ldr	r3, [pc, #48]	; (b430 <usart_rx_callback+0x64>)
    b3fe:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    b400:	4a0c      	ldr	r2, [pc, #48]	; (b434 <usart_rx_callback+0x68>)
    b402:	4b09      	ldr	r3, [pc, #36]	; (b428 <usart_rx_callback+0x5c>)
    b404:	1c10      	adds	r0, r2, #0
    b406:	1c19      	adds	r1, r3, #0
    b408:	2201      	movs	r2, #1
    b40a:	4b0b      	ldr	r3, [pc, #44]	; (b438 <usart_rx_callback+0x6c>)
    b40c:	4798      	blx	r3

	return;
    b40e:	46c0      	nop			; (mov r8, r8)
}
    b410:	46bd      	mov	sp, r7
    b412:	b002      	add	sp, #8
    b414:	bd80      	pop	{r7, pc}
    b416:	46c0      	nop			; (mov r8, r8)
    b418:	0000142d 	.word	0x0000142d
    b41c:	00002915 	.word	0x00002915
    b420:	000025b1 	.word	0x000025b1
    b424:	0000143d 	.word	0x0000143d
    b428:	2000699b 	.word	0x2000699b
    b42c:	00002a55 	.word	0x00002a55
    b430:	00001435 	.word	0x00001435
    b434:	20006d34 	.word	0x20006d34
    b438:	00006359 	.word	0x00006359

0000b43c <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    b43c:	b580      	push	{r7, lr}
    b43e:	b082      	sub	sp, #8
    b440:	af00      	add	r7, sp, #0
    b442:	1c02      	adds	r2, r0, #0
    b444:	1dfb      	adds	r3, r7, #7
    b446:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    b448:	4b0b      	ldr	r3, [pc, #44]	; (b478 <uart_rx_notify+0x3c>)
    b44a:	4798      	blx	r3
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    b44c:	4b0b      	ldr	r3, [pc, #44]	; (b47c <uart_rx_notify+0x40>)
    b44e:	1c18      	adds	r0, r3, #0
    b450:	2100      	movs	r1, #0
    b452:	4b0b      	ldr	r3, [pc, #44]	; (b480 <uart_rx_notify+0x44>)
    b454:	4798      	blx	r3
	tx_data = udi_cdc_getc();
    b456:	4b0b      	ldr	r3, [pc, #44]	; (b484 <uart_rx_notify+0x48>)
    b458:	4798      	blx	r3
    b45a:	1c03      	adds	r3, r0, #0
    b45c:	b2da      	uxtb	r2, r3
    b45e:	4b0a      	ldr	r3, [pc, #40]	; (b488 <uart_rx_notify+0x4c>)
    b460:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    b462:	4a06      	ldr	r2, [pc, #24]	; (b47c <uart_rx_notify+0x40>)
    b464:	4b08      	ldr	r3, [pc, #32]	; (b488 <uart_rx_notify+0x4c>)
    b466:	1c10      	adds	r0, r2, #0
    b468:	1c19      	adds	r1, r3, #0
    b46a:	2201      	movs	r2, #1
    b46c:	4b07      	ldr	r3, [pc, #28]	; (b48c <uart_rx_notify+0x50>)
    b46e:	4798      	blx	r3
}
    b470:	46bd      	mov	sp, r7
    b472:	b002      	add	sp, #8
    b474:	bd80      	pop	{r7, pc}
    b476:	46c0      	nop			; (mov r8, r8)
    b478:	0000141d 	.word	0x0000141d
    b47c:	20006d34 	.word	0x20006d34
    b480:	0000b2f1 	.word	0x0000b2f1
    b484:	000027d5 	.word	0x000027d5
    b488:	2000699a 	.word	0x2000699a
    b48c:	0000630d 	.word	0x0000630d

0000b490 <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    b490:	b580      	push	{r7, lr}
    b492:	b082      	sub	sp, #8
    b494:	af00      	add	r7, sp, #0
    b496:	1c02      	adds	r2, r0, #0
    b498:	6039      	str	r1, [r7, #0]
    b49a:	1dfb      	adds	r3, r7, #7
    b49c:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    b49e:	4b51      	ldr	r3, [pc, #324]	; (b5e4 <uart_config+0x154>)
    b4a0:	1c18      	adds	r0, r3, #0
    b4a2:	4b51      	ldr	r3, [pc, #324]	; (b5e8 <uart_config+0x158>)
    b4a4:	4798      	blx	r3

	switch (cfg->bCharFormat) {
    b4a6:	683b      	ldr	r3, [r7, #0]
    b4a8:	791b      	ldrb	r3, [r3, #4]
    b4aa:	2b01      	cmp	r3, #1
    b4ac:	d005      	beq.n	b4ba <uart_config+0x2a>
    b4ae:	2b02      	cmp	r3, #2
    b4b0:	d107      	bne.n	b4c2 <uart_config+0x32>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    b4b2:	4b4c      	ldr	r3, [pc, #304]	; (b5e4 <uart_config+0x154>)
    b4b4:	2240      	movs	r2, #64	; 0x40
    b4b6:	729a      	strb	r2, [r3, #10]
		break;
    b4b8:	e007      	b.n	b4ca <uart_config+0x3a>

	case CDC_STOP_BITS_1_5:
		usart_conf.stopbits = USART_STOPBITS_1;
    b4ba:	4b4a      	ldr	r3, [pc, #296]	; (b5e4 <uart_config+0x154>)
    b4bc:	2200      	movs	r2, #0
    b4be:	729a      	strb	r2, [r3, #10]
		break;
    b4c0:	e003      	b.n	b4ca <uart_config+0x3a>

	case CDC_STOP_BITS_1:
	default:
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
    b4c2:	4b48      	ldr	r3, [pc, #288]	; (b5e4 <uart_config+0x154>)
    b4c4:	2200      	movs	r2, #0
    b4c6:	729a      	strb	r2, [r3, #10]
		break;
    b4c8:	46c0      	nop			; (mov r8, r8)
	}

	switch (cfg->bParityType) {
    b4ca:	683b      	ldr	r3, [r7, #0]
    b4cc:	795b      	ldrb	r3, [r3, #5]
    b4ce:	2b02      	cmp	r3, #2
    b4d0:	d008      	beq.n	b4e4 <uart_config+0x54>
    b4d2:	dc02      	bgt.n	b4da <uart_config+0x4a>
    b4d4:	2b01      	cmp	r3, #1
    b4d6:	d009      	beq.n	b4ec <uart_config+0x5c>
    b4d8:	e015      	b.n	b506 <uart_config+0x76>
    b4da:	2b03      	cmp	r3, #3
    b4dc:	d00b      	beq.n	b4f6 <uart_config+0x66>
    b4de:	2b04      	cmp	r3, #4
    b4e0:	d00d      	beq.n	b4fe <uart_config+0x6e>
    b4e2:	e010      	b.n	b506 <uart_config+0x76>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    b4e4:	4b3f      	ldr	r3, [pc, #252]	; (b5e4 <uart_config+0x154>)
    b4e6:	2200      	movs	r2, #0
    b4e8:	811a      	strh	r2, [r3, #8]
		break;
    b4ea:	e010      	b.n	b50e <uart_config+0x7e>

	case CDC_PAR_ODD:
		usart_conf.parity = USART_PARITY_ODD;
    b4ec:	4b3d      	ldr	r3, [pc, #244]	; (b5e4 <uart_config+0x154>)
    b4ee:	2280      	movs	r2, #128	; 0x80
    b4f0:	0192      	lsls	r2, r2, #6
    b4f2:	811a      	strh	r2, [r3, #8]
		break;
    b4f4:	e00b      	b.n	b50e <uart_config+0x7e>

	case CDC_PAR_MARK:
		usart_conf.parity = USART_PARITY_NONE;
    b4f6:	4b3b      	ldr	r3, [pc, #236]	; (b5e4 <uart_config+0x154>)
    b4f8:	22ff      	movs	r2, #255	; 0xff
    b4fa:	811a      	strh	r2, [r3, #8]
		break;
    b4fc:	e007      	b.n	b50e <uart_config+0x7e>

	case CDC_PAR_SPACE:
		usart_conf.parity = USART_PARITY_NONE;
    b4fe:	4b39      	ldr	r3, [pc, #228]	; (b5e4 <uart_config+0x154>)
    b500:	22ff      	movs	r2, #255	; 0xff
    b502:	811a      	strh	r2, [r3, #8]
		break;
    b504:	e003      	b.n	b50e <uart_config+0x7e>

	case CDC_PAR_NONE:
	default:
		usart_conf.parity = USART_PARITY_NONE;
    b506:	4b37      	ldr	r3, [pc, #220]	; (b5e4 <uart_config+0x154>)
    b508:	22ff      	movs	r2, #255	; 0xff
    b50a:	811a      	strh	r2, [r3, #8]
		break;
    b50c:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg->bDataBits) {
    b50e:	683b      	ldr	r3, [r7, #0]
    b510:	799b      	ldrb	r3, [r3, #6]
    b512:	2b06      	cmp	r3, #6
    b514:	d007      	beq.n	b526 <uart_config+0x96>
    b516:	2b07      	cmp	r3, #7
    b518:	d009      	beq.n	b52e <uart_config+0x9e>
    b51a:	2b05      	cmp	r3, #5
    b51c:	d10b      	bne.n	b536 <uart_config+0xa6>
	case 5:
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    b51e:	4b31      	ldr	r3, [pc, #196]	; (b5e4 <uart_config+0x154>)
    b520:	2205      	movs	r2, #5
    b522:	72da      	strb	r2, [r3, #11]
		break;
    b524:	e00b      	b.n	b53e <uart_config+0xae>
	case 6:
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    b526:	4b2f      	ldr	r3, [pc, #188]	; (b5e4 <uart_config+0x154>)
    b528:	2206      	movs	r2, #6
    b52a:	72da      	strb	r2, [r3, #11]
		break;
    b52c:	e007      	b.n	b53e <uart_config+0xae>
	case 7:
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    b52e:	4b2d      	ldr	r3, [pc, #180]	; (b5e4 <uart_config+0x154>)
    b530:	2207      	movs	r2, #7
    b532:	72da      	strb	r2, [r3, #11]
		break;
    b534:	e003      	b.n	b53e <uart_config+0xae>
	case 8:
	default:
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
    b536:	4b2b      	ldr	r3, [pc, #172]	; (b5e4 <uart_config+0x154>)
    b538:	2200      	movs	r2, #0
    b53a:	72da      	strb	r2, [r3, #11]
		break;
    b53c:	46c0      	nop			; (mov r8, r8)
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    b53e:	683b      	ldr	r3, [r7, #0]
    b540:	781a      	ldrb	r2, [r3, #0]
    b542:	7859      	ldrb	r1, [r3, #1]
    b544:	0209      	lsls	r1, r1, #8
    b546:	430a      	orrs	r2, r1
    b548:	7899      	ldrb	r1, [r3, #2]
    b54a:	0409      	lsls	r1, r1, #16
    b54c:	430a      	orrs	r2, r1
    b54e:	78db      	ldrb	r3, [r3, #3]
    b550:	061b      	lsls	r3, r3, #24
    b552:	4313      	orrs	r3, r2
    b554:	1c1a      	adds	r2, r3, #0
    b556:	4b23      	ldr	r3, [pc, #140]	; (b5e4 <uart_config+0x154>)
    b558:	621a      	str	r2, [r3, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    b55a:	4b22      	ldr	r3, [pc, #136]	; (b5e4 <uart_config+0x154>)
    b55c:	2280      	movs	r2, #128	; 0x80
    b55e:	0352      	lsls	r2, r2, #13
    b560:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    b562:	4b20      	ldr	r3, [pc, #128]	; (b5e4 <uart_config+0x154>)
    b564:	4a21      	ldr	r2, [pc, #132]	; (b5ec <uart_config+0x15c>)
    b566:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    b568:	4b1e      	ldr	r3, [pc, #120]	; (b5e4 <uart_config+0x154>)
    b56a:	4a21      	ldr	r2, [pc, #132]	; (b5f0 <uart_config+0x160>)
    b56c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    b56e:	4b1d      	ldr	r3, [pc, #116]	; (b5e4 <uart_config+0x154>)
    b570:	2201      	movs	r2, #1
    b572:	4252      	negs	r2, r2
    b574:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    b576:	4b1b      	ldr	r3, [pc, #108]	; (b5e4 <uart_config+0x154>)
    b578:	2201      	movs	r2, #1
    b57a:	4252      	negs	r2, r2
    b57c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_disable(&usart_module_edbg);
    b57e:	4b1d      	ldr	r3, [pc, #116]	; (b5f4 <uart_config+0x164>)
    b580:	1c18      	adds	r0, r3, #0
    b582:	4b1d      	ldr	r3, [pc, #116]	; (b5f8 <uart_config+0x168>)
    b584:	4798      	blx	r3
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    b586:	491b      	ldr	r1, [pc, #108]	; (b5f4 <uart_config+0x164>)
    b588:	4a1c      	ldr	r2, [pc, #112]	; (b5fc <uart_config+0x16c>)
    b58a:	4b16      	ldr	r3, [pc, #88]	; (b5e4 <uart_config+0x154>)
    b58c:	1c08      	adds	r0, r1, #0
    b58e:	1c11      	adds	r1, r2, #0
    b590:	1c1a      	adds	r2, r3, #0
    b592:	4b1b      	ldr	r3, [pc, #108]	; (b600 <uart_config+0x170>)
    b594:	4798      	blx	r3
	usart_enable(&usart_module_edbg);
    b596:	4b17      	ldr	r3, [pc, #92]	; (b5f4 <uart_config+0x164>)
    b598:	1c18      	adds	r0, r3, #0
    b59a:	4b1a      	ldr	r3, [pc, #104]	; (b604 <uart_config+0x174>)
    b59c:	4798      	blx	r3

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    b59e:	4a15      	ldr	r2, [pc, #84]	; (b5f4 <uart_config+0x164>)
    b5a0:	4b19      	ldr	r3, [pc, #100]	; (b608 <uart_config+0x178>)
    b5a2:	1c10      	adds	r0, r2, #0
    b5a4:	1c19      	adds	r1, r3, #0
    b5a6:	2200      	movs	r2, #0
    b5a8:	4b18      	ldr	r3, [pc, #96]	; (b60c <uart_config+0x17c>)
    b5aa:	4798      	blx	r3
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    b5ac:	4b11      	ldr	r3, [pc, #68]	; (b5f4 <uart_config+0x164>)
    b5ae:	1c18      	adds	r0, r3, #0
    b5b0:	2100      	movs	r1, #0
    b5b2:	4b17      	ldr	r3, [pc, #92]	; (b610 <uart_config+0x180>)
    b5b4:	4798      	blx	r3
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    b5b6:	4a0f      	ldr	r2, [pc, #60]	; (b5f4 <uart_config+0x164>)
    b5b8:	4b16      	ldr	r3, [pc, #88]	; (b614 <uart_config+0x184>)
    b5ba:	1c10      	adds	r0, r2, #0
    b5bc:	1c19      	adds	r1, r3, #0
    b5be:	2201      	movs	r2, #1
    b5c0:	4b12      	ldr	r3, [pc, #72]	; (b60c <uart_config+0x17c>)
    b5c2:	4798      	blx	r3
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
    b5c4:	4b0b      	ldr	r3, [pc, #44]	; (b5f4 <uart_config+0x164>)
    b5c6:	1c18      	adds	r0, r3, #0
    b5c8:	2101      	movs	r1, #1
    b5ca:	4b11      	ldr	r3, [pc, #68]	; (b610 <uart_config+0x180>)
    b5cc:	4798      	blx	r3
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    b5ce:	4a09      	ldr	r2, [pc, #36]	; (b5f4 <uart_config+0x164>)
    b5d0:	4b11      	ldr	r3, [pc, #68]	; (b618 <uart_config+0x188>)
    b5d2:	1c10      	adds	r0, r2, #0
    b5d4:	1c19      	adds	r1, r3, #0
    b5d6:	2201      	movs	r2, #1
    b5d8:	4b10      	ldr	r3, [pc, #64]	; (b61c <uart_config+0x18c>)
    b5da:	4798      	blx	r3
}
    b5dc:	46bd      	mov	sp, r7
    b5de:	b002      	add	sp, #8
    b5e0:	bd80      	pop	{r7, pc}
    b5e2:	46c0      	nop			; (mov r8, r8)
    b5e4:	20006cf4 	.word	0x20006cf4
    b5e8:	0000b1a1 	.word	0x0000b1a1
    b5ec:	00160002 	.word	0x00160002
    b5f0:	00170002 	.word	0x00170002
    b5f4:	20006d34 	.word	0x20006d34
    b5f8:	0000b2a5 	.word	0x0000b2a5
    b5fc:	42001400 	.word	0x42001400
    b600:	00005f19 	.word	0x00005f19
    b604:	0000b25d 	.word	0x0000b25d
    b608:	0000b365 	.word	0x0000b365
    b60c:	000062c5 	.word	0x000062c5
    b610:	0000b2f1 	.word	0x0000b2f1
    b614:	0000b3cd 	.word	0x0000b3cd
    b618:	2000699b 	.word	0x2000699b
    b61c:	00006359 	.word	0x00006359

0000b620 <uart_open>:

void uart_open(uint8_t port)
{
    b620:	b580      	push	{r7, lr}
    b622:	b082      	sub	sp, #8
    b624:	af00      	add	r7, sp, #0
    b626:	1c02      	adds	r2, r0, #0
    b628:	1dfb      	adds	r3, r7, #7
    b62a:	701a      	strb	r2, [r3, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
    b62c:	4b03      	ldr	r3, [pc, #12]	; (b63c <uart_open+0x1c>)
    b62e:	1c18      	adds	r0, r3, #0
    b630:	4b03      	ldr	r3, [pc, #12]	; (b640 <uart_open+0x20>)
    b632:	4798      	blx	r3
}
    b634:	46bd      	mov	sp, r7
    b636:	b002      	add	sp, #8
    b638:	bd80      	pop	{r7, pc}
    b63a:	46c0      	nop			; (mov r8, r8)
    b63c:	20006d34 	.word	0x20006d34
    b640:	0000b25d 	.word	0x0000b25d

0000b644 <uart_close>:

void uart_close(uint8_t port)
{
    b644:	b580      	push	{r7, lr}
    b646:	b082      	sub	sp, #8
    b648:	af00      	add	r7, sp, #0
    b64a:	1c02      	adds	r2, r0, #0
    b64c:	1dfb      	adds	r3, r7, #7
    b64e:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
    b650:	4b03      	ldr	r3, [pc, #12]	; (b660 <uart_close+0x1c>)
    b652:	1c18      	adds	r0, r3, #0
    b654:	4b03      	ldr	r3, [pc, #12]	; (b664 <uart_close+0x20>)
    b656:	4798      	blx	r3
}
    b658:	46bd      	mov	sp, r7
    b65a:	b002      	add	sp, #8
    b65c:	bd80      	pop	{r7, pc}
    b65e:	46c0      	nop			; (mov r8, r8)
    b660:	20006d34 	.word	0x20006d34
    b664:	0000b2a5 	.word	0x0000b2a5

0000b668 <__aeabi_uidiv>:
    b668:	2900      	cmp	r1, #0
    b66a:	d034      	beq.n	b6d6 <.udivsi3_skip_div0_test+0x6a>

0000b66c <.udivsi3_skip_div0_test>:
    b66c:	2301      	movs	r3, #1
    b66e:	2200      	movs	r2, #0
    b670:	b410      	push	{r4}
    b672:	4288      	cmp	r0, r1
    b674:	d32c      	bcc.n	b6d0 <.udivsi3_skip_div0_test+0x64>
    b676:	2401      	movs	r4, #1
    b678:	0724      	lsls	r4, r4, #28
    b67a:	42a1      	cmp	r1, r4
    b67c:	d204      	bcs.n	b688 <.udivsi3_skip_div0_test+0x1c>
    b67e:	4281      	cmp	r1, r0
    b680:	d202      	bcs.n	b688 <.udivsi3_skip_div0_test+0x1c>
    b682:	0109      	lsls	r1, r1, #4
    b684:	011b      	lsls	r3, r3, #4
    b686:	e7f8      	b.n	b67a <.udivsi3_skip_div0_test+0xe>
    b688:	00e4      	lsls	r4, r4, #3
    b68a:	42a1      	cmp	r1, r4
    b68c:	d204      	bcs.n	b698 <.udivsi3_skip_div0_test+0x2c>
    b68e:	4281      	cmp	r1, r0
    b690:	d202      	bcs.n	b698 <.udivsi3_skip_div0_test+0x2c>
    b692:	0049      	lsls	r1, r1, #1
    b694:	005b      	lsls	r3, r3, #1
    b696:	e7f8      	b.n	b68a <.udivsi3_skip_div0_test+0x1e>
    b698:	4288      	cmp	r0, r1
    b69a:	d301      	bcc.n	b6a0 <.udivsi3_skip_div0_test+0x34>
    b69c:	1a40      	subs	r0, r0, r1
    b69e:	431a      	orrs	r2, r3
    b6a0:	084c      	lsrs	r4, r1, #1
    b6a2:	42a0      	cmp	r0, r4
    b6a4:	d302      	bcc.n	b6ac <.udivsi3_skip_div0_test+0x40>
    b6a6:	1b00      	subs	r0, r0, r4
    b6a8:	085c      	lsrs	r4, r3, #1
    b6aa:	4322      	orrs	r2, r4
    b6ac:	088c      	lsrs	r4, r1, #2
    b6ae:	42a0      	cmp	r0, r4
    b6b0:	d302      	bcc.n	b6b8 <.udivsi3_skip_div0_test+0x4c>
    b6b2:	1b00      	subs	r0, r0, r4
    b6b4:	089c      	lsrs	r4, r3, #2
    b6b6:	4322      	orrs	r2, r4
    b6b8:	08cc      	lsrs	r4, r1, #3
    b6ba:	42a0      	cmp	r0, r4
    b6bc:	d302      	bcc.n	b6c4 <.udivsi3_skip_div0_test+0x58>
    b6be:	1b00      	subs	r0, r0, r4
    b6c0:	08dc      	lsrs	r4, r3, #3
    b6c2:	4322      	orrs	r2, r4
    b6c4:	2800      	cmp	r0, #0
    b6c6:	d003      	beq.n	b6d0 <.udivsi3_skip_div0_test+0x64>
    b6c8:	091b      	lsrs	r3, r3, #4
    b6ca:	d001      	beq.n	b6d0 <.udivsi3_skip_div0_test+0x64>
    b6cc:	0909      	lsrs	r1, r1, #4
    b6ce:	e7e3      	b.n	b698 <.udivsi3_skip_div0_test+0x2c>
    b6d0:	1c10      	adds	r0, r2, #0
    b6d2:	bc10      	pop	{r4}
    b6d4:	4770      	bx	lr
    b6d6:	2800      	cmp	r0, #0
    b6d8:	d001      	beq.n	b6de <.udivsi3_skip_div0_test+0x72>
    b6da:	2000      	movs	r0, #0
    b6dc:	43c0      	mvns	r0, r0
    b6de:	b407      	push	{r0, r1, r2}
    b6e0:	4802      	ldr	r0, [pc, #8]	; (b6ec <.udivsi3_skip_div0_test+0x80>)
    b6e2:	a102      	add	r1, pc, #8	; (adr r1, b6ec <.udivsi3_skip_div0_test+0x80>)
    b6e4:	1840      	adds	r0, r0, r1
    b6e6:	9002      	str	r0, [sp, #8]
    b6e8:	bd03      	pop	{r0, r1, pc}
    b6ea:	46c0      	nop			; (mov r8, r8)
    b6ec:	000000d9 	.word	0x000000d9

0000b6f0 <__aeabi_uidivmod>:
    b6f0:	2900      	cmp	r1, #0
    b6f2:	d0f0      	beq.n	b6d6 <.udivsi3_skip_div0_test+0x6a>
    b6f4:	b503      	push	{r0, r1, lr}
    b6f6:	f7ff ffb9 	bl	b66c <.udivsi3_skip_div0_test>
    b6fa:	bc0e      	pop	{r1, r2, r3}
    b6fc:	4342      	muls	r2, r0
    b6fe:	1a89      	subs	r1, r1, r2
    b700:	4718      	bx	r3
    b702:	46c0      	nop			; (mov r8, r8)

0000b704 <__aeabi_idiv>:
    b704:	2900      	cmp	r1, #0
    b706:	d041      	beq.n	b78c <.divsi3_skip_div0_test+0x84>

0000b708 <.divsi3_skip_div0_test>:
    b708:	b410      	push	{r4}
    b70a:	1c04      	adds	r4, r0, #0
    b70c:	404c      	eors	r4, r1
    b70e:	46a4      	mov	ip, r4
    b710:	2301      	movs	r3, #1
    b712:	2200      	movs	r2, #0
    b714:	2900      	cmp	r1, #0
    b716:	d500      	bpl.n	b71a <.divsi3_skip_div0_test+0x12>
    b718:	4249      	negs	r1, r1
    b71a:	2800      	cmp	r0, #0
    b71c:	d500      	bpl.n	b720 <.divsi3_skip_div0_test+0x18>
    b71e:	4240      	negs	r0, r0
    b720:	4288      	cmp	r0, r1
    b722:	d32c      	bcc.n	b77e <.divsi3_skip_div0_test+0x76>
    b724:	2401      	movs	r4, #1
    b726:	0724      	lsls	r4, r4, #28
    b728:	42a1      	cmp	r1, r4
    b72a:	d204      	bcs.n	b736 <.divsi3_skip_div0_test+0x2e>
    b72c:	4281      	cmp	r1, r0
    b72e:	d202      	bcs.n	b736 <.divsi3_skip_div0_test+0x2e>
    b730:	0109      	lsls	r1, r1, #4
    b732:	011b      	lsls	r3, r3, #4
    b734:	e7f8      	b.n	b728 <.divsi3_skip_div0_test+0x20>
    b736:	00e4      	lsls	r4, r4, #3
    b738:	42a1      	cmp	r1, r4
    b73a:	d204      	bcs.n	b746 <.divsi3_skip_div0_test+0x3e>
    b73c:	4281      	cmp	r1, r0
    b73e:	d202      	bcs.n	b746 <.divsi3_skip_div0_test+0x3e>
    b740:	0049      	lsls	r1, r1, #1
    b742:	005b      	lsls	r3, r3, #1
    b744:	e7f8      	b.n	b738 <.divsi3_skip_div0_test+0x30>
    b746:	4288      	cmp	r0, r1
    b748:	d301      	bcc.n	b74e <.divsi3_skip_div0_test+0x46>
    b74a:	1a40      	subs	r0, r0, r1
    b74c:	431a      	orrs	r2, r3
    b74e:	084c      	lsrs	r4, r1, #1
    b750:	42a0      	cmp	r0, r4
    b752:	d302      	bcc.n	b75a <.divsi3_skip_div0_test+0x52>
    b754:	1b00      	subs	r0, r0, r4
    b756:	085c      	lsrs	r4, r3, #1
    b758:	4322      	orrs	r2, r4
    b75a:	088c      	lsrs	r4, r1, #2
    b75c:	42a0      	cmp	r0, r4
    b75e:	d302      	bcc.n	b766 <.divsi3_skip_div0_test+0x5e>
    b760:	1b00      	subs	r0, r0, r4
    b762:	089c      	lsrs	r4, r3, #2
    b764:	4322      	orrs	r2, r4
    b766:	08cc      	lsrs	r4, r1, #3
    b768:	42a0      	cmp	r0, r4
    b76a:	d302      	bcc.n	b772 <.divsi3_skip_div0_test+0x6a>
    b76c:	1b00      	subs	r0, r0, r4
    b76e:	08dc      	lsrs	r4, r3, #3
    b770:	4322      	orrs	r2, r4
    b772:	2800      	cmp	r0, #0
    b774:	d003      	beq.n	b77e <.divsi3_skip_div0_test+0x76>
    b776:	091b      	lsrs	r3, r3, #4
    b778:	d001      	beq.n	b77e <.divsi3_skip_div0_test+0x76>
    b77a:	0909      	lsrs	r1, r1, #4
    b77c:	e7e3      	b.n	b746 <.divsi3_skip_div0_test+0x3e>
    b77e:	1c10      	adds	r0, r2, #0
    b780:	4664      	mov	r4, ip
    b782:	2c00      	cmp	r4, #0
    b784:	d500      	bpl.n	b788 <.divsi3_skip_div0_test+0x80>
    b786:	4240      	negs	r0, r0
    b788:	bc10      	pop	{r4}
    b78a:	4770      	bx	lr
    b78c:	2800      	cmp	r0, #0
    b78e:	d006      	beq.n	b79e <.divsi3_skip_div0_test+0x96>
    b790:	db03      	blt.n	b79a <.divsi3_skip_div0_test+0x92>
    b792:	2000      	movs	r0, #0
    b794:	43c0      	mvns	r0, r0
    b796:	0840      	lsrs	r0, r0, #1
    b798:	e001      	b.n	b79e <.divsi3_skip_div0_test+0x96>
    b79a:	2080      	movs	r0, #128	; 0x80
    b79c:	0600      	lsls	r0, r0, #24
    b79e:	b407      	push	{r0, r1, r2}
    b7a0:	4802      	ldr	r0, [pc, #8]	; (b7ac <.divsi3_skip_div0_test+0xa4>)
    b7a2:	a102      	add	r1, pc, #8	; (adr r1, b7ac <.divsi3_skip_div0_test+0xa4>)
    b7a4:	1840      	adds	r0, r0, r1
    b7a6:	9002      	str	r0, [sp, #8]
    b7a8:	bd03      	pop	{r0, r1, pc}
    b7aa:	46c0      	nop			; (mov r8, r8)
    b7ac:	00000019 	.word	0x00000019

0000b7b0 <__aeabi_idivmod>:
    b7b0:	2900      	cmp	r1, #0
    b7b2:	d0eb      	beq.n	b78c <.divsi3_skip_div0_test+0x84>
    b7b4:	b503      	push	{r0, r1, lr}
    b7b6:	f7ff ffa7 	bl	b708 <.divsi3_skip_div0_test>
    b7ba:	bc0e      	pop	{r1, r2, r3}
    b7bc:	4342      	muls	r2, r0
    b7be:	1a89      	subs	r1, r1, r2
    b7c0:	4718      	bx	r3
    b7c2:	46c0      	nop			; (mov r8, r8)

0000b7c4 <__aeabi_idiv0>:
    b7c4:	4770      	bx	lr
    b7c6:	46c0      	nop			; (mov r8, r8)

0000b7c8 <__ctzsi2>:
    b7c8:	4241      	negs	r1, r0
    b7ca:	4008      	ands	r0, r1
    b7cc:	211c      	movs	r1, #28
    b7ce:	2301      	movs	r3, #1
    b7d0:	041b      	lsls	r3, r3, #16
    b7d2:	4298      	cmp	r0, r3
    b7d4:	d301      	bcc.n	b7da <__ctzsi2+0x12>
    b7d6:	0c00      	lsrs	r0, r0, #16
    b7d8:	3910      	subs	r1, #16
    b7da:	0a1b      	lsrs	r3, r3, #8
    b7dc:	4298      	cmp	r0, r3
    b7de:	d301      	bcc.n	b7e4 <__ctzsi2+0x1c>
    b7e0:	0a00      	lsrs	r0, r0, #8
    b7e2:	3908      	subs	r1, #8
    b7e4:	091b      	lsrs	r3, r3, #4
    b7e6:	4298      	cmp	r0, r3
    b7e8:	d301      	bcc.n	b7ee <__ctzsi2+0x26>
    b7ea:	0900      	lsrs	r0, r0, #4
    b7ec:	3904      	subs	r1, #4
    b7ee:	a202      	add	r2, pc, #8	; (adr r2, b7f8 <__ctzsi2+0x30>)
    b7f0:	5c10      	ldrb	r0, [r2, r0]
    b7f2:	1a40      	subs	r0, r0, r1
    b7f4:	4770      	bx	lr
    b7f6:	46c0      	nop			; (mov r8, r8)
    b7f8:	1d1d1c1b 	.word	0x1d1d1c1b
    b7fc:	1e1e1e1e 	.word	0x1e1e1e1e
    b800:	1f1f1f1f 	.word	0x1f1f1f1f
    b804:	1f1f1f1f 	.word	0x1f1f1f1f

0000b808 <__aeabi_lmul>:
    b808:	469c      	mov	ip, r3
    b80a:	0403      	lsls	r3, r0, #16
    b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b80e:	0c1b      	lsrs	r3, r3, #16
    b810:	0417      	lsls	r7, r2, #16
    b812:	0c3f      	lsrs	r7, r7, #16
    b814:	0c15      	lsrs	r5, r2, #16
    b816:	1c1e      	adds	r6, r3, #0
    b818:	1c04      	adds	r4, r0, #0
    b81a:	0c00      	lsrs	r0, r0, #16
    b81c:	437e      	muls	r6, r7
    b81e:	436b      	muls	r3, r5
    b820:	4347      	muls	r7, r0
    b822:	4345      	muls	r5, r0
    b824:	18fb      	adds	r3, r7, r3
    b826:	0c30      	lsrs	r0, r6, #16
    b828:	1818      	adds	r0, r3, r0
    b82a:	4287      	cmp	r7, r0
    b82c:	d902      	bls.n	b834 <__aeabi_lmul+0x2c>
    b82e:	2380      	movs	r3, #128	; 0x80
    b830:	025b      	lsls	r3, r3, #9
    b832:	18ed      	adds	r5, r5, r3
    b834:	0c03      	lsrs	r3, r0, #16
    b836:	18ed      	adds	r5, r5, r3
    b838:	4663      	mov	r3, ip
    b83a:	435c      	muls	r4, r3
    b83c:	434a      	muls	r2, r1
    b83e:	0436      	lsls	r6, r6, #16
    b840:	0c36      	lsrs	r6, r6, #16
    b842:	18a1      	adds	r1, r4, r2
    b844:	0400      	lsls	r0, r0, #16
    b846:	1980      	adds	r0, r0, r6
    b848:	1949      	adds	r1, r1, r5
    b84a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b84c <__libc_init_array>:
    b84c:	b570      	push	{r4, r5, r6, lr}
    b84e:	4b0e      	ldr	r3, [pc, #56]	; (b888 <__libc_init_array+0x3c>)
    b850:	4d0e      	ldr	r5, [pc, #56]	; (b88c <__libc_init_array+0x40>)
    b852:	2400      	movs	r4, #0
    b854:	1aed      	subs	r5, r5, r3
    b856:	10ad      	asrs	r5, r5, #2
    b858:	1c1e      	adds	r6, r3, #0
    b85a:	42ac      	cmp	r4, r5
    b85c:	d004      	beq.n	b868 <__libc_init_array+0x1c>
    b85e:	00a3      	lsls	r3, r4, #2
    b860:	58f3      	ldr	r3, [r6, r3]
    b862:	4798      	blx	r3
    b864:	3401      	adds	r4, #1
    b866:	e7f8      	b.n	b85a <__libc_init_array+0xe>
    b868:	f000 f974 	bl	bb54 <_init>
    b86c:	4b08      	ldr	r3, [pc, #32]	; (b890 <__libc_init_array+0x44>)
    b86e:	4d09      	ldr	r5, [pc, #36]	; (b894 <__libc_init_array+0x48>)
    b870:	2400      	movs	r4, #0
    b872:	1aed      	subs	r5, r5, r3
    b874:	10ad      	asrs	r5, r5, #2
    b876:	1c1e      	adds	r6, r3, #0
    b878:	42ac      	cmp	r4, r5
    b87a:	d004      	beq.n	b886 <__libc_init_array+0x3a>
    b87c:	00a3      	lsls	r3, r4, #2
    b87e:	58f3      	ldr	r3, [r6, r3]
    b880:	4798      	blx	r3
    b882:	3401      	adds	r4, #1
    b884:	e7f8      	b.n	b878 <__libc_init_array+0x2c>
    b886:	bd70      	pop	{r4, r5, r6, pc}
    b888:	0000bb60 	.word	0x0000bb60
    b88c:	0000bb60 	.word	0x0000bb60
    b890:	0000bb60 	.word	0x0000bb60
    b894:	0000bb64 	.word	0x0000bb64

0000b898 <memcpy>:
    b898:	b510      	push	{r4, lr}
    b89a:	2300      	movs	r3, #0
    b89c:	4293      	cmp	r3, r2
    b89e:	d003      	beq.n	b8a8 <memcpy+0x10>
    b8a0:	5ccc      	ldrb	r4, [r1, r3]
    b8a2:	54c4      	strb	r4, [r0, r3]
    b8a4:	3301      	adds	r3, #1
    b8a6:	e7f9      	b.n	b89c <memcpy+0x4>
    b8a8:	bd10      	pop	{r4, pc}

0000b8aa <memset>:
    b8aa:	1c03      	adds	r3, r0, #0
    b8ac:	1882      	adds	r2, r0, r2
    b8ae:	4293      	cmp	r3, r2
    b8b0:	d002      	beq.n	b8b8 <memset+0xe>
    b8b2:	7019      	strb	r1, [r3, #0]
    b8b4:	3301      	adds	r3, #1
    b8b6:	e7fa      	b.n	b8ae <memset+0x4>
    b8b8:	4770      	bx	lr
    b8ba:	0000      	movs	r0, r0
    b8bc:	2d6e4f22 	.word	0x2d6e4f22
    b8c0:	70696843 	.word	0x70696843
    b8c4:	72695620 	.word	0x72695620
    b8c8:	6c617574 	.word	0x6c617574
    b8cc:	6d654d20 	.word	0x6d654d20
    b8d0:	2279726f 	.word	0x2279726f
    b8d4:	00000000 	.word	0x00000000

0000b8d8 <lun_desc>:
    b8d8:	0000155d 00001579 00000000 000015a1     ]...y...........
    b8e8:	000015ad 0000165d 00001689 0000b8bc     ....]...........
    b8f8:	00003402 00003434 00003434 000033e6     .4..44..44...3..
    b908:	00003434 00003434 00003434 00003434     44..44..44..44..
    b918:	00003434 00003434 00003434 00003434     44..44..44..44..
    b928:	00003434 00003434 00003434 00003434     44..44..44..44..
    b938:	00003434 00003434 000033ec 00003434     44..44...3..44..
    b948:	00003434 00003434 00003434 00003434     44..44..44..44..
    b958:	00003434 00003434 000033f2 0000340e     44..44...3...4..
    b968:	00003434 00003434 00003414 00003434     44..44...4..44..
    b978:	00003434 00003434 00003434 00003434     44..44..44..44..
    b988:	00003434 00003408 00003434 00003434     44...4..44..44..
    b998:	00003424 00003434 0000342c 00003434     $4..44..,4..44..
    b9a8:	00003434 00003434 00003434 0000341a     44..44..44...4..
    b9b8:	00003434 00003434 00003434 00003434     44..44..44..44..
    b9c8:	00003434 00003434 00003434 00003434     44..44..44..44..
    b9d8:	00003434 00003434 00003434 00003434     44..44..44..44..
    b9e8:	00003434 00003434 00003434 00003434     44..44..44..44..
    b9f8:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba08:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba18:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba28:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba38:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba48:	00003434 00003434 00003434 00003434     44..44..44..44..
    ba58:	00003434 00003434 000033fa 31333231     44..44...3..1231
    ba68:	32313332 33323133 00000000 0000496e     23123123....nI..
    ba78:	00004956 0000496e 0000495e 0000496e     VI..nI..^I..nI..
    ba88:	0000494e 0000496e 0000496e 0000496e     NI..nI..nI..nI..
    ba98:	00004966 42000800 42000c00 42001000     fI.....B...B...B
    baa8:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    bab8:	00000e0d 000068d6 00006954 00006954     .....h..Ti..Ti..
    bac8:	000068fa 000068f4 00006900 000068dc     .h...h...i...h..
    bad8:	00006906 0000693a 00006ad0 00006b20     .i..:i...j.. k..
    bae8:	00006b20 00006b1c 00006ac2 00006ae2      k...k...j...j..
    baf8:	00006ab2 00006af4 00006b06 00006b6e     .j...j...k..nk..
    bb08:	00006b9c 00006b9c 00006b98 00006b68     .k...k...k..hk..
    bb18:	00006b74 00006b62 00006b7a 00006b80     tk..bk..zk...k..
    bb28:	01020300                                ....

0000bb2c <_usb_device_irq_bits>:
    bb2c:	00080004 00800070 01000001 00000200     ....p...........

0000bb3c <_usb_endpoint_irq_bits>:
    bb3c:	60100c03 00009894 000098aa 00009a0a     ...`............
    bb4c:	00009ad2 00009b9a                       ........

0000bb54 <_init>:
    bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb56:	46c0      	nop			; (mov r8, r8)
    bb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bb5a:	bc08      	pop	{r3}
    bb5c:	469e      	mov	lr, r3
    bb5e:	4770      	bx	lr

0000bb60 <__init_array_start>:
    bb60:	000000d9 	.word	0x000000d9

0000bb64 <_fini>:
    bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb66:	46c0      	nop			; (mov r8, r8)
    bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bb6a:	bc08      	pop	{r3}
    bb6c:	469e      	mov	lr, r3
    bb6e:	4770      	bx	lr

0000bb70 <__fini_array_start>:
    bb70:	000000b1 	.word	0x000000b1
