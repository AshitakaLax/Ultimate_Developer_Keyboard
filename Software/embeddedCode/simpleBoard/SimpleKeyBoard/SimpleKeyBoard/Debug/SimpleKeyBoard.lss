
SimpleKeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b600  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000308  20000000  0000b600  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000071f4  20000308  0000b908  00018308  2**2
                  ALLOC
  3 .stack        00000b04  200074fc  00012afc  00018308  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018308  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018330  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c954  00000000  00000000  0001838b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004738  00000000  00000000  00044cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006383  00000000  00000000  00049417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001218  00000000  00000000  0004f79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001038  00000000  00000000  000509b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021a4e  00000000  00000000  000519ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019f41  00000000  00000000  00073438  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009716f  00000000  00000000  0008d379  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003d3c  00000000  00000000  001244e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	0000a5ad 	.word	0x0000a5ad
       8:	0000a69d 	.word	0x0000a69d
       c:	0000a69d 	.word	0x0000a69d
	...
      2c:	0000a69d 	.word	0x0000a69d
	...
      38:	0000a69d 	.word	0x0000a69d
      3c:	0000a69d 	.word	0x0000a69d
      40:	0000a69d 	.word	0x0000a69d
      44:	0000a69d 	.word	0x0000a69d
      48:	0000a69d 	.word	0x0000a69d
      4c:	0000a69d 	.word	0x0000a69d
      50:	00004a39 	.word	0x00004a39
      54:	0000a69d 	.word	0x0000a69d
      58:	0000a69d 	.word	0x0000a69d
      5c:	0000a21d 	.word	0x0000a21d
      60:	0000a69d 	.word	0x0000a69d
      64:	000055a1 	.word	0x000055a1
      68:	000055b5 	.word	0x000055b5
      6c:	000055c9 	.word	0x000055c9
      70:	000055dd 	.word	0x000055dd
      74:	000055f1 	.word	0x000055f1
      78:	00005605 	.word	0x00005605
      7c:	0000a69d 	.word	0x0000a69d
      80:	0000a69d 	.word	0x0000a69d
      84:	0000a69d 	.word	0x0000a69d
      88:	0000a69d 	.word	0x0000a69d
      8c:	0000a69d 	.word	0x0000a69d
      90:	0000a69d 	.word	0x0000a69d
      94:	0000a69d 	.word	0x0000a69d
      98:	0000a69d 	.word	0x0000a69d
      9c:	0000a69d 	.word	0x0000a69d
      a0:	0000a69d 	.word	0x0000a69d
      a4:	0000a69d 	.word	0x0000a69d
      a8:	0000a69d 	.word	0x0000a69d
      ac:	0000a69d 	.word	0x0000a69d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000308 	.word	0x20000308
      d0:	00000000 	.word	0x00000000
      d4:	0000b600 	.word	0x0000b600

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000b600 	.word	0x0000b600
     104:	2000030c 	.word	0x2000030c
     108:	0000b600 	.word	0x0000b600
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b580      	push	{r7, lr}
     112:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     114:	2000      	movs	r0, #0
     116:	4b10      	ldr	r3, [pc, #64]	; (158 <delay_init+0x48>)
     118:	4798      	blx	r3
     11a:	1c02      	adds	r2, r0, #0
     11c:	4b0f      	ldr	r3, [pc, #60]	; (15c <delay_init+0x4c>)
     11e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     120:	4b0e      	ldr	r3, [pc, #56]	; (15c <delay_init+0x4c>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	4b0e      	ldr	r3, [pc, #56]	; (160 <delay_init+0x50>)
     126:	1c10      	adds	r0, r2, #0
     128:	22fa      	movs	r2, #250	; 0xfa
     12a:	0091      	lsls	r1, r2, #2
     12c:	4798      	blx	r3
     12e:	1c03      	adds	r3, r0, #0
     130:	1c1a      	adds	r2, r3, #0
     132:	4b0a      	ldr	r3, [pc, #40]	; (15c <delay_init+0x4c>)
     134:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <delay_init+0x4c>)
     138:	681a      	ldr	r2, [r3, #0]
     13a:	4b09      	ldr	r3, [pc, #36]	; (160 <delay_init+0x50>)
     13c:	1c10      	adds	r0, r2, #0
     13e:	22fa      	movs	r2, #250	; 0xfa
     140:	0091      	lsls	r1, r2, #2
     142:	4798      	blx	r3
     144:	1c03      	adds	r3, r0, #0
     146:	1c1a      	adds	r2, r3, #0
     148:	4b06      	ldr	r3, [pc, #24]	; (164 <delay_init+0x54>)
     14a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     14c:	4b06      	ldr	r3, [pc, #24]	; (168 <delay_init+0x58>)
     14e:	2205      	movs	r2, #5
     150:	601a      	str	r2, [r3, #0]
}
     152:	46bd      	mov	sp, r7
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00006af1 	.word	0x00006af1
     15c:	20000000 	.word	0x20000000
     160:	0000b0f5 	.word	0x0000b0f5
     164:	20000004 	.word	0x20000004
     168:	e000e010 	.word	0xe000e010

0000016c <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
     16c:	b580      	push	{r7, lr}
     16e:	b082      	sub	sp, #8
     170:	af00      	add	r7, sp, #0
     172:	6078      	str	r0, [r7, #4]
	return pin >> 5;
     174:	687b      	ldr	r3, [r7, #4]
     176:	095b      	lsrs	r3, r3, #5
}
     178:	1c18      	adds	r0, r3, #0
     17a:	46bd      	mov	sp, r7
     17c:	b002      	add	sp, #8
     17e:	bd80      	pop	{r7, pc}

00000180 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
     180:	b580      	push	{r7, lr}
     182:	b082      	sub	sp, #8
     184:	af00      	add	r7, sp, #0
     186:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
     188:	687b      	ldr	r3, [r7, #4]
     18a:	01db      	lsls	r3, r3, #7
     18c:	4a02      	ldr	r2, [pc, #8]	; (198 <arch_ioport_port_to_base+0x18>)
     18e:	189b      	adds	r3, r3, r2
}
     190:	1c18      	adds	r0, r3, #0
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	41004400 	.word	0x41004400

0000019c <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	1c18      	adds	r0, r3, #0
     1a8:	4b05      	ldr	r3, [pc, #20]	; (1c0 <arch_ioport_pin_to_base+0x24>)
     1aa:	4798      	blx	r3
     1ac:	1c03      	adds	r3, r0, #0
     1ae:	1c18      	adds	r0, r3, #0
     1b0:	4b04      	ldr	r3, [pc, #16]	; (1c4 <arch_ioport_pin_to_base+0x28>)
     1b2:	4798      	blx	r3
     1b4:	1c03      	adds	r3, r0, #0
}
     1b6:	1c18      	adds	r0, r3, #0
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	0000016d 	.word	0x0000016d
     1c4:	00000181 	.word	0x00000181

000001c8 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b082      	sub	sp, #8
     1cc:	af00      	add	r7, sp, #0
     1ce:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
     1d0:	687a      	ldr	r2, [r7, #4]
     1d2:	231f      	movs	r3, #31
     1d4:	4013      	ands	r3, r2
     1d6:	2201      	movs	r2, #1
     1d8:	1c11      	adds	r1, r2, #0
     1da:	4099      	lsls	r1, r3
     1dc:	1c0b      	adds	r3, r1, #0
}
     1de:	1c18      	adds	r0, r3, #0
     1e0:	46bd      	mov	sp, r7
     1e2:	b002      	add	sp, #8
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)

000001e8 <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
     1ec:	46bd      	mov	sp, r7
     1ee:	bd80      	pop	{r7, pc}

000001f0 <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b08a      	sub	sp, #40	; 0x28
     1f4:	af00      	add	r7, sp, #0
     1f6:	60f8      	str	r0, [r7, #12]
     1f8:	60b9      	str	r1, [r7, #8]
     1fa:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	1c18      	adds	r0, r3, #0
     200:	4b2d      	ldr	r3, [pc, #180]	; (2b8 <arch_ioport_set_port_mode+0xc8>)
     202:	4798      	blx	r3
     204:	1c03      	adds	r3, r0, #0
     206:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
     208:	2300      	movs	r3, #0
     20a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
     20c:	2300      	movs	r3, #0
     20e:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
     210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     212:	2280      	movs	r2, #128	; 0x80
     214:	0292      	lsls	r2, r2, #10
     216:	4313      	orrs	r3, r2
     218:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
     21a:	687a      	ldr	r2, [r7, #4]
     21c:	2320      	movs	r3, #32
     21e:	4013      	ands	r3, r2
     220:	d103      	bne.n	22a <arch_ioport_set_port_mode+0x3a>
     222:	687a      	ldr	r2, [r7, #4]
     224:	2310      	movs	r3, #16
     226:	4013      	ands	r3, r2
     228:	d004      	beq.n	234 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
     22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     22c:	2280      	movs	r2, #128	; 0x80
     22e:	02d2      	lsls	r2, r2, #11
     230:	4313      	orrs	r3, r2
     232:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
     234:	687a      	ldr	r2, [r7, #4]
     236:	2380      	movs	r3, #128	; 0x80
     238:	4013      	ands	r3, r2
     23a:	d004      	beq.n	246 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
     23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     23e:	2280      	movs	r2, #128	; 0x80
     240:	03d2      	lsls	r2, r2, #15
     242:	4313      	orrs	r3, r2
     244:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
     246:	687a      	ldr	r2, [r7, #4]
     248:	230f      	movs	r3, #15
     24a:	4013      	ands	r3, r2
     24c:	061b      	lsls	r3, r3, #24
     24e:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
     250:	68bb      	ldr	r3, [r7, #8]
     252:	041b      	lsls	r3, r3, #16
     254:	0c1b      	lsrs	r3, r3, #16
     256:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
     258:	68bb      	ldr	r3, [r7, #8]
     25a:	0c1b      	lsrs	r3, r3, #16
     25c:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     25e:	69ba      	ldr	r2, [r7, #24]
     260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     262:	431a      	orrs	r2, r3
			config_mask | config_mux |
     264:	69fb      	ldr	r3, [r7, #28]
     266:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	05d2      	lsls	r2, r2, #23
     26c:	431a      	orrs	r2, r3
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;

	uint32_t lower_pin_mask = (mask & 0xFFFF);
	uint32_t upper_pin_mask = (mask >> 16);

	base->WRCONFIG.reg =
     26e:	6a3b      	ldr	r3, [r7, #32]
     270:	629a      	str	r2, [r3, #40]	; 0x28
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     272:	697a      	ldr	r2, [r7, #20]
     274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     276:	431a      	orrs	r2, r3
			config_mask | config_mux |
     278:	69fb      	ldr	r3, [r7, #28]
     27a:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     27c:	22d0      	movs	r2, #208	; 0xd0
     27e:	0612      	lsls	r2, r2, #24
     280:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
     282:	6a3b      	ldr	r3, [r7, #32]
     284:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
     286:	687a      	ldr	r2, [r7, #4]
     288:	2320      	movs	r3, #32
     28a:	4013      	ands	r3, r2
     28c:	d006      	beq.n	29c <arch_ioport_set_port_mode+0xac>
		base->OUTCLR.reg |= mask;
     28e:	6a3b      	ldr	r3, [r7, #32]
     290:	695a      	ldr	r2, [r3, #20]
     292:	68bb      	ldr	r3, [r7, #8]
     294:	431a      	orrs	r2, r3
     296:	6a3b      	ldr	r3, [r7, #32]
     298:	615a      	str	r2, [r3, #20]
     29a:	e009      	b.n	2b0 <arch_ioport_set_port_mode+0xc0>
	}
	else if (mode & IOPORT_MODE_PULLUP) {
     29c:	687a      	ldr	r2, [r7, #4]
     29e:	2310      	movs	r3, #16
     2a0:	4013      	ands	r3, r2
     2a2:	d005      	beq.n	2b0 <arch_ioport_set_port_mode+0xc0>
		base->OUTSET.reg |= mask;
     2a4:	6a3b      	ldr	r3, [r7, #32]
     2a6:	699a      	ldr	r2, [r3, #24]
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	431a      	orrs	r2, r3
     2ac:	6a3b      	ldr	r3, [r7, #32]
     2ae:	619a      	str	r2, [r3, #24]
	}
}
     2b0:	46bd      	mov	sp, r7
     2b2:	b00a      	add	sp, #40	; 0x28
     2b4:	bd80      	pop	{r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00000181 	.word	0x00000181

000002bc <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
     2bc:	b590      	push	{r4, r7, lr}
     2be:	b083      	sub	sp, #12
     2c0:	af00      	add	r7, sp, #0
     2c2:	6078      	str	r0, [r7, #4]
     2c4:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	1c18      	adds	r0, r3, #0
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <arch_ioport_set_pin_mode+0x30>)
     2cc:	4798      	blx	r3
     2ce:	1c04      	adds	r4, r0, #0
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	1c18      	adds	r0, r3, #0
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <arch_ioport_set_pin_mode+0x34>)
     2d6:	4798      	blx	r3
     2d8:	1c02      	adds	r2, r0, #0
     2da:	683b      	ldr	r3, [r7, #0]
     2dc:	1c20      	adds	r0, r4, #0
     2de:	1c11      	adds	r1, r2, #0
     2e0:	1c1a      	adds	r2, r3, #0
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <arch_ioport_set_pin_mode+0x38>)
     2e4:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
     2e6:	46bd      	mov	sp, r7
     2e8:	b003      	add	sp, #12
     2ea:	bd90      	pop	{r4, r7, pc}
     2ec:	0000016d 	.word	0x0000016d
     2f0:	000001c9 	.word	0x000001c9
     2f4:	000001f1 	.word	0x000001f1

000002f8 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b084      	sub	sp, #16
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	1c0a      	adds	r2, r1, #0
     302:	1cfb      	adds	r3, r7, #3
     304:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
     306:	687b      	ldr	r3, [r7, #4]
     308:	1c18      	adds	r0, r3, #0
     30a:	4b18      	ldr	r3, [pc, #96]	; (36c <arch_ioport_set_pin_dir+0x74>)
     30c:	4798      	blx	r3
     30e:	1c03      	adds	r3, r0, #0
     310:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
     312:	1cfb      	adds	r3, r7, #3
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b01      	cmp	r3, #1
     318:	d107      	bne.n	32a <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	1c18      	adds	r0, r3, #0
     31e:	4b14      	ldr	r3, [pc, #80]	; (370 <arch_ioport_set_pin_dir+0x78>)
     320:	4798      	blx	r3
     322:	1c02      	adds	r2, r0, #0
     324:	68fb      	ldr	r3, [r7, #12]
     326:	609a      	str	r2, [r3, #8]
     328:	e00a      	b.n	340 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
     32a:	1cfb      	adds	r3, r7, #3
     32c:	781b      	ldrb	r3, [r3, #0]
     32e:	2b00      	cmp	r3, #0
     330:	d106      	bne.n	340 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
     332:	687b      	ldr	r3, [r7, #4]
     334:	1c18      	adds	r0, r3, #0
     336:	4b0e      	ldr	r3, [pc, #56]	; (370 <arch_ioport_set_pin_dir+0x78>)
     338:	4798      	blx	r3
     33a:	1c02      	adds	r2, r0, #0
     33c:	68fb      	ldr	r3, [r7, #12]
     33e:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
     340:	687b      	ldr	r3, [r7, #4]
     342:	1c18      	adds	r0, r3, #0
     344:	4b0b      	ldr	r3, [pc, #44]	; (374 <arch_ioport_set_pin_dir+0x7c>)
     346:	4798      	blx	r3
     348:	1c03      	adds	r3, r0, #0
     34a:	68f9      	ldr	r1, [r7, #12]
     34c:	2240      	movs	r2, #64	; 0x40
     34e:	18c9      	adds	r1, r1, r3
     350:	188a      	adds	r2, r1, r2
     352:	7812      	ldrb	r2, [r2, #0]
     354:	b2d2      	uxtb	r2, r2
     356:	2102      	movs	r1, #2
     358:	430a      	orrs	r2, r1
     35a:	b2d2      	uxtb	r2, r2
     35c:	68f8      	ldr	r0, [r7, #12]
     35e:	2140      	movs	r1, #64	; 0x40
     360:	18c3      	adds	r3, r0, r3
     362:	185b      	adds	r3, r3, r1
     364:	701a      	strb	r2, [r3, #0]
}
     366:	46bd      	mov	sp, r7
     368:	b004      	add	sp, #16
     36a:	bd80      	pop	{r7, pc}
     36c:	0000019d 	.word	0x0000019d
     370:	000001c9 	.word	0x000001c9
     374:	0000016d 	.word	0x0000016d

00000378 <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
     378:	b590      	push	{r4, r7, lr}
     37a:	b083      	sub	sp, #12
     37c:	af00      	add	r7, sp, #0
     37e:	6078      	str	r0, [r7, #4]
     380:	1c0a      	adds	r2, r1, #0
     382:	1cfb      	adds	r3, r7, #3
     384:	701a      	strb	r2, [r3, #0]
	if (level) {
     386:	1cfb      	adds	r3, r7, #3
     388:	781b      	ldrb	r3, [r3, #0]
     38a:	2b00      	cmp	r3, #0
     38c:	d00b      	beq.n	3a6 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     38e:	687b      	ldr	r3, [r7, #4]
     390:	1c18      	adds	r0, r3, #0
     392:	4b0c      	ldr	r3, [pc, #48]	; (3c4 <arch_ioport_set_pin_level+0x4c>)
     394:	4798      	blx	r3
     396:	1c04      	adds	r4, r0, #0
     398:	687b      	ldr	r3, [r7, #4]
     39a:	1c18      	adds	r0, r3, #0
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <arch_ioport_set_pin_level+0x50>)
     39e:	4798      	blx	r3
     3a0:	1c03      	adds	r3, r0, #0
     3a2:	61a3      	str	r3, [r4, #24]
     3a4:	e00a      	b.n	3bc <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	1c18      	adds	r0, r3, #0
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <arch_ioport_set_pin_level+0x4c>)
     3ac:	4798      	blx	r3
     3ae:	1c04      	adds	r4, r0, #0
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	1c18      	adds	r0, r3, #0
     3b4:	4b04      	ldr	r3, [pc, #16]	; (3c8 <arch_ioport_set_pin_level+0x50>)
     3b6:	4798      	blx	r3
     3b8:	1c03      	adds	r3, r0, #0
     3ba:	6163      	str	r3, [r4, #20]
	}
}
     3bc:	46bd      	mov	sp, r7
     3be:	b003      	add	sp, #12
     3c0:	bd90      	pop	{r4, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	0000019d 	.word	0x0000019d
     3c8:	000001c9 	.word	0x000001c9

000003cc <arch_ioport_get_pin_level>:
	base->OUTSET.reg = mask & level;
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
     3cc:	b590      	push	{r4, r7, lr}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	1c18      	adds	r0, r3, #0
     3d8:	4b08      	ldr	r3, [pc, #32]	; (3fc <arch_ioport_get_pin_level+0x30>)
     3da:	4798      	blx	r3
     3dc:	1c03      	adds	r3, r0, #0
     3de:	6a1c      	ldr	r4, [r3, #32]
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	1c18      	adds	r0, r3, #0
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <arch_ioport_get_pin_level+0x34>)
     3e6:	4798      	blx	r3
     3e8:	1c03      	adds	r3, r0, #0
     3ea:	4023      	ands	r3, r4
     3ec:	1e5a      	subs	r2, r3, #1
     3ee:	4193      	sbcs	r3, r2
     3f0:	b2db      	uxtb	r3, r3
}
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	46bd      	mov	sp, r7
     3f6:	b003      	add	sp, #12
     3f8:	bd90      	pop	{r4, r7, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	0000019d 	.word	0x0000019d
     400:	000001c9 	.word	0x000001c9

00000404 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
     404:	b580      	push	{r7, lr}
     406:	af00      	add	r7, sp, #0
	arch_ioport_init();
     408:	4b01      	ldr	r3, [pc, #4]	; (410 <ioport_init+0xc>)
     40a:	4798      	blx	r3
}
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	000001e9 	.word	0x000001e9

00000414 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     414:	b580      	push	{r7, lr}
     416:	b082      	sub	sp, #8
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
     41c:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
     41e:	687a      	ldr	r2, [r7, #4]
     420:	683b      	ldr	r3, [r7, #0]
     422:	1c10      	adds	r0, r2, #0
     424:	1c19      	adds	r1, r3, #0
     426:	4b02      	ldr	r3, [pc, #8]	; (430 <ioport_set_pin_mode+0x1c>)
     428:	4798      	blx	r3
}
     42a:	46bd      	mov	sp, r7
     42c:	b002      	add	sp, #8
     42e:	bd80      	pop	{r7, pc}
     430:	000002bd 	.word	0x000002bd

00000434 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
     43a:	6078      	str	r0, [r7, #4]
     43c:	1c0a      	adds	r2, r1, #0
     43e:	1cfb      	adds	r3, r7, #3
     440:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
     442:	687a      	ldr	r2, [r7, #4]
     444:	1cfb      	adds	r3, r7, #3
     446:	781b      	ldrb	r3, [r3, #0]
     448:	1c10      	adds	r0, r2, #0
     44a:	1c19      	adds	r1, r3, #0
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <ioport_set_pin_dir+0x24>)
     44e:	4798      	blx	r3
}
     450:	46bd      	mov	sp, r7
     452:	b002      	add	sp, #8
     454:	bd80      	pop	{r7, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	000002f9 	.word	0x000002f9

0000045c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     45c:	b580      	push	{r7, lr}
     45e:	b082      	sub	sp, #8
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
     464:	1c0a      	adds	r2, r1, #0
     466:	1cfb      	adds	r3, r7, #3
     468:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
     46a:	687a      	ldr	r2, [r7, #4]
     46c:	1cfb      	adds	r3, r7, #3
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	1c10      	adds	r0, r2, #0
     472:	1c19      	adds	r1, r3, #0
     474:	4b02      	ldr	r3, [pc, #8]	; (480 <ioport_set_pin_level+0x24>)
     476:	4798      	blx	r3
}
     478:	46bd      	mov	sp, r7
     47a:	b002      	add	sp, #8
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000379 	.word	0x00000379

00000484 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     484:	b580      	push	{r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	1c18      	adds	r0, r3, #0
     490:	4b03      	ldr	r3, [pc, #12]	; (4a0 <ioport_get_pin_level+0x1c>)
     492:	4798      	blx	r3
     494:	1c03      	adds	r3, r0, #0
}
     496:	1c18      	adds	r0, r3, #0
     498:	46bd      	mov	sp, r7
     49a:	b002      	add	sp, #8
     49c:	bd80      	pop	{r7, pc}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	000003cd 	.word	0x000003cd

000004a4 <initKeyBoard>:
		//KEY_DeleteBackspace,	KEY_DeleteForward,	KEY_End,



void initKeyBoard(void)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b086      	sub	sp, #24
     4a8:	af00      	add	r7, sp, #0
	//configure pin PB10 as output High
	bool tempPinValue = false;	
     4aa:	1c3b      	adds	r3, r7, #0
     4ac:	3315      	adds	r3, #21
     4ae:	2200      	movs	r2, #0
     4b0:	701a      	strb	r2, [r3, #0]
	//configure pin PB06 as input
	uint8_t i = 0;
     4b2:	1c3b      	adds	r3, r7, #0
     4b4:	3317      	adds	r3, #23
     4b6:	2200      	movs	r2, #0
     4b8:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     4ba:	1c3b      	adds	r3, r7, #0
     4bc:	3316      	adds	r3, #22
     4be:	2200      	movs	r2, #0
     4c0:	701a      	strb	r2, [r3, #0]
	//setup data structure
	
//outputs
	keyboardObj.rowIOArr[0] = ROW_0;
     4c2:	4b9f      	ldr	r3, [pc, #636]	; (740 <initKeyBoard+0x29c>)
     4c4:	222f      	movs	r2, #47	; 0x2f
     4c6:	601a      	str	r2, [r3, #0]
	keyboardObj.rowIOArr[1] = ROW_1;
     4c8:	4b9d      	ldr	r3, [pc, #628]	; (740 <initKeyBoard+0x29c>)
     4ca:	222e      	movs	r2, #46	; 0x2e
     4cc:	605a      	str	r2, [r3, #4]
	keyboardObj.rowIOArr[2] = ROW_2;
     4ce:	4b9c      	ldr	r3, [pc, #624]	; (740 <initKeyBoard+0x29c>)
     4d0:	222d      	movs	r2, #45	; 0x2d
     4d2:	609a      	str	r2, [r3, #8]
	keyboardObj.rowIOArr[3] = ROW_3;
     4d4:	4b9a      	ldr	r3, [pc, #616]	; (740 <initKeyBoard+0x29c>)
     4d6:	222c      	movs	r2, #44	; 0x2c
     4d8:	60da      	str	r2, [r3, #12]
	keyboardObj.rowIOArr[4] = ROW_4;
     4da:	4b99      	ldr	r3, [pc, #612]	; (740 <initKeyBoard+0x29c>)
     4dc:	222b      	movs	r2, #43	; 0x2b
     4de:	611a      	str	r2, [r3, #16]
	keyboardObj.rowIOArr[5] = ROW_5;
     4e0:	4b97      	ldr	r3, [pc, #604]	; (740 <initKeyBoard+0x29c>)
     4e2:	222a      	movs	r2, #42	; 0x2a
     4e4:	615a      	str	r2, [r3, #20]
	

//input
	keyboardObj.columnIOArr[0] = COLUMN_0;
     4e6:	4b96      	ldr	r3, [pc, #600]	; (740 <initKeyBoard+0x29c>)
     4e8:	2226      	movs	r2, #38	; 0x26
     4ea:	619a      	str	r2, [r3, #24]
	keyboardObj.columnIOArr[1] = COLUMN_1;
     4ec:	4b94      	ldr	r3, [pc, #592]	; (740 <initKeyBoard+0x29c>)
     4ee:	2225      	movs	r2, #37	; 0x25
     4f0:	61da      	str	r2, [r3, #28]
	keyboardObj.columnIOArr[2] = COLUMN_2;
     4f2:	4b93      	ldr	r3, [pc, #588]	; (740 <initKeyBoard+0x29c>)
     4f4:	2224      	movs	r2, #36	; 0x24
     4f6:	621a      	str	r2, [r3, #32]
	keyboardObj.columnIOArr[3] = COLUMN_3;
     4f8:	4b91      	ldr	r3, [pc, #580]	; (740 <initKeyBoard+0x29c>)
     4fa:	2223      	movs	r2, #35	; 0x23
     4fc:	625a      	str	r2, [r3, #36]	; 0x24
	keyboardObj.columnIOArr[4] = COLUMN_4;
     4fe:	4b90      	ldr	r3, [pc, #576]	; (740 <initKeyBoard+0x29c>)
     500:	2222      	movs	r2, #34	; 0x22
     502:	629a      	str	r2, [r3, #40]	; 0x28
	keyboardObj.columnIOArr[5] = COLUMN_5;
     504:	4b8e      	ldr	r3, [pc, #568]	; (740 <initKeyBoard+0x29c>)
     506:	2221      	movs	r2, #33	; 0x21
     508:	62da      	str	r2, [r3, #44]	; 0x2c
	keyboardObj.columnIOArr[6] = COLUMN_6;
     50a:	4b8d      	ldr	r3, [pc, #564]	; (740 <initKeyBoard+0x29c>)
     50c:	2220      	movs	r2, #32
     50e:	631a      	str	r2, [r3, #48]	; 0x30

	// Right Hand
	//outputs
	rightKeyboardObj.rowIOArr[0] = R_ROW_0;
     510:	4b8c      	ldr	r3, [pc, #560]	; (744 <initKeyBoard+0x2a0>)
     512:	2214      	movs	r2, #20
     514:	601a      	str	r2, [r3, #0]
	rightKeyboardObj.rowIOArr[1] = R_ROW_1;
     516:	4b8b      	ldr	r3, [pc, #556]	; (744 <initKeyBoard+0x2a0>)
     518:	2213      	movs	r2, #19
     51a:	605a      	str	r2, [r3, #4]
	rightKeyboardObj.rowIOArr[2] = R_ROW_2;
     51c:	4b89      	ldr	r3, [pc, #548]	; (744 <initKeyBoard+0x2a0>)
     51e:	2212      	movs	r2, #18
     520:	609a      	str	r2, [r3, #8]
	rightKeyboardObj.rowIOArr[3] = R_ROW_3;
     522:	4b88      	ldr	r3, [pc, #544]	; (744 <initKeyBoard+0x2a0>)
     524:	2211      	movs	r2, #17
     526:	60da      	str	r2, [r3, #12]
	rightKeyboardObj.rowIOArr[4] = R_ROW_4;
     528:	4b86      	ldr	r3, [pc, #536]	; (744 <initKeyBoard+0x2a0>)
     52a:	2210      	movs	r2, #16
     52c:	611a      	str	r2, [r3, #16]
	rightKeyboardObj.rowIOArr[5] = R_ROW_5;
     52e:	4b85      	ldr	r3, [pc, #532]	; (744 <initKeyBoard+0x2a0>)
     530:	220b      	movs	r2, #11
     532:	615a      	str	r2, [r3, #20]

	//input
	rightKeyboardObj.columnIOArr[0] = R_COLUMN_0;
     534:	4b83      	ldr	r3, [pc, #524]	; (744 <initKeyBoard+0x2a0>)
     536:	220a      	movs	r2, #10
     538:	619a      	str	r2, [r3, #24]
	rightKeyboardObj.columnIOArr[1] = R_COLUMN_1;
     53a:	4b82      	ldr	r3, [pc, #520]	; (744 <initKeyBoard+0x2a0>)
     53c:	2209      	movs	r2, #9
     53e:	61da      	str	r2, [r3, #28]
	rightKeyboardObj.columnIOArr[2] = R_COLUMN_2;
     540:	4b80      	ldr	r3, [pc, #512]	; (744 <initKeyBoard+0x2a0>)
     542:	2208      	movs	r2, #8
     544:	621a      	str	r2, [r3, #32]
	rightKeyboardObj.columnIOArr[3] = R_COLUMN_3;
     546:	4b7f      	ldr	r3, [pc, #508]	; (744 <initKeyBoard+0x2a0>)
     548:	2207      	movs	r2, #7
     54a:	625a      	str	r2, [r3, #36]	; 0x24
	rightKeyboardObj.columnIOArr[4] = R_COLUMN_4;
     54c:	4b7d      	ldr	r3, [pc, #500]	; (744 <initKeyBoard+0x2a0>)
     54e:	2206      	movs	r2, #6
     550:	629a      	str	r2, [r3, #40]	; 0x28
	rightKeyboardObj.columnIOArr[5] = R_COLUMN_5;
     552:	4b7c      	ldr	r3, [pc, #496]	; (744 <initKeyBoard+0x2a0>)
     554:	2205      	movs	r2, #5
     556:	62da      	str	r2, [r3, #44]	; 0x2c
	rightKeyboardObj.columnIOArr[6] = R_COLUMN_6;
     558:	4b7a      	ldr	r3, [pc, #488]	; (744 <initKeyBoard+0x2a0>)
     55a:	2204      	movs	r2, #4
     55c:	631a      	str	r2, [r3, #48]	; 0x30
// Set all of the output pins high, and
// set the interrupt to trigger when the pin goes high.

	
	struct extint_chan_conf *config_extint_chan;
	uint8_t eicLine = 0;
     55e:	1c3b      	adds	r3, r7, #0
     560:	3314      	adds	r3, #20
     562:	2200      	movs	r2, #0
     564:	701a      	strb	r2, [r3, #0]


//Currently we have disabled all interrupts
	for(i = 0; i < 0; i++)
     566:	1c3b      	adds	r3, r7, #0
     568:	3317      	adds	r3, #23
     56a:	2200      	movs	r2, #0
     56c:	701a      	strb	r2, [r3, #0]
     56e:	46c0      	nop			; (mov r8, r8)
	}


//setup all of the pins

	ioport_init();
     570:	4b75      	ldr	r3, [pc, #468]	; (748 <initKeyBoard+0x2a4>)
     572:	4798      	blx	r3
	delay_init();
     574:	4b75      	ldr	r3, [pc, #468]	; (74c <initKeyBoard+0x2a8>)
     576:	4798      	blx	r3
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     578:	1c3b      	adds	r3, r7, #0
     57a:	3317      	adds	r3, #23
     57c:	2200      	movs	r2, #0
     57e:	701a      	strb	r2, [r3, #0]
     580:	e0d4      	b.n	72c <initKeyBoard+0x288>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     582:	1c3b      	adds	r3, r7, #0
     584:	3317      	adds	r3, #23
     586:	781b      	ldrb	r3, [r3, #0]
     588:	2274      	movs	r2, #116	; 0x74
     58a:	4353      	muls	r3, r2
     58c:	1c1a      	adds	r2, r3, #0
     58e:	3288      	adds	r2, #136	; 0x88
     590:	4b6b      	ldr	r3, [pc, #428]	; (740 <initKeyBoard+0x29c>)
     592:	18d3      	adds	r3, r2, r3
     594:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     596:	1c3b      	adds	r3, r7, #0
     598:	3317      	adds	r3, #23
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2274      	movs	r2, #116	; 0x74
     59e:	4353      	muls	r3, r2
     5a0:	1c1a      	adds	r2, r3, #0
     5a2:	3288      	adds	r2, #136	; 0x88
     5a4:	4b67      	ldr	r3, [pc, #412]	; (744 <initKeyBoard+0x2a0>)
     5a6:	18d3      	adds	r3, r2, r3
     5a8:	60fb      	str	r3, [r7, #12]
		row->rowIO = keyboardObj.rowIOArr[i];
     5aa:	1c3b      	adds	r3, r7, #0
     5ac:	3317      	adds	r3, #23
     5ae:	781a      	ldrb	r2, [r3, #0]
     5b0:	4b63      	ldr	r3, [pc, #396]	; (740 <initKeyBoard+0x29c>)
     5b2:	0092      	lsls	r2, r2, #2
     5b4:	58d2      	ldr	r2, [r2, r3]
     5b6:	693b      	ldr	r3, [r7, #16]
     5b8:	601a      	str	r2, [r3, #0]
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
     5ba:	1c3b      	adds	r3, r7, #0
     5bc:	3317      	adds	r3, #23
     5be:	781a      	ldrb	r2, [r3, #0]
     5c0:	4b60      	ldr	r3, [pc, #384]	; (744 <initKeyBoard+0x2a0>)
     5c2:	0092      	lsls	r2, r2, #2
     5c4:	58d2      	ldr	r2, [r2, r3]
     5c6:	68fb      	ldr	r3, [r7, #12]
     5c8:	601a      	str	r2, [r3, #0]
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     5ca:	1c3b      	adds	r3, r7, #0
     5cc:	3316      	adds	r3, #22
     5ce:	2200      	movs	r2, #0
     5d0:	701a      	strb	r2, [r3, #0]
     5d2:	e086      	b.n	6e2 <initKeyBoard+0x23e>
		{
			KEY_OBJ *key = &row->keys[j];
     5d4:	1c3b      	adds	r3, r7, #0
     5d6:	3316      	adds	r3, #22
     5d8:	781b      	ldrb	r3, [r3, #0]
     5da:	011b      	lsls	r3, r3, #4
     5dc:	693a      	ldr	r2, [r7, #16]
     5de:	18d3      	adds	r3, r2, r3
     5e0:	3304      	adds	r3, #4
     5e2:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
     5e4:	1c3b      	adds	r3, r7, #0
     5e6:	3316      	adds	r3, #22
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	011b      	lsls	r3, r3, #4
     5ec:	68fa      	ldr	r2, [r7, #12]
     5ee:	18d3      	adds	r3, r2, r3
     5f0:	3304      	adds	r3, #4
     5f2:	607b      	str	r3, [r7, #4]
			key->columnIO = keyboardObj.columnIOArr[j];
     5f4:	1c3b      	adds	r3, r7, #0
     5f6:	3316      	adds	r3, #22
     5f8:	781a      	ldrb	r2, [r3, #0]
     5fa:	4b51      	ldr	r3, [pc, #324]	; (740 <initKeyBoard+0x29c>)
     5fc:	3206      	adds	r2, #6
     5fe:	0092      	lsls	r2, r2, #2
     600:	58d2      	ldr	r2, [r2, r3]
     602:	68bb      	ldr	r3, [r7, #8]
     604:	601a      	str	r2, [r3, #0]
			key->currentState = false;
     606:	68bb      	ldr	r3, [r7, #8]
     608:	2200      	movs	r2, #0
     60a:	715a      	strb	r2, [r3, #5]
			key->previousState = false;
     60c:	68bb      	ldr	r3, [r7, #8]
     60e:	2200      	movs	r2, #0
     610:	711a      	strb	r2, [r3, #4]
			key->hidKeyMod = 0;
     612:	68bb      	ldr	r3, [r7, #8]
     614:	2200      	movs	r2, #0
     616:	735a      	strb	r2, [r3, #13]
			key->hidKey = keyArray[i][j];//   HID_A+j+i;//no HID Key
     618:	1c3b      	adds	r3, r7, #0
     61a:	3317      	adds	r3, #23
     61c:	781a      	ldrb	r2, [r3, #0]
     61e:	1c3b      	adds	r3, r7, #0
     620:	3316      	adds	r3, #22
     622:	7818      	ldrb	r0, [r3, #0]
     624:	494a      	ldr	r1, [pc, #296]	; (750 <initKeyBoard+0x2ac>)
     626:	1c13      	adds	r3, r2, #0
     628:	00db      	lsls	r3, r3, #3
     62a:	1a9b      	subs	r3, r3, r2
     62c:	181b      	adds	r3, r3, r0
     62e:	5c5a      	ldrb	r2, [r3, r1]
     630:	68bb      	ldr	r3, [r7, #8]
     632:	731a      	strb	r2, [r3, #12]
			key->keyJustDown = false;
     634:	68bb      	ldr	r3, [r7, #8]
     636:	2200      	movs	r2, #0
     638:	719a      	strb	r2, [r3, #6]
			key->keyJustRelease = false;
     63a:	68bb      	ldr	r3, [r7, #8]
     63c:	2200      	movs	r2, #0
     63e:	71da      	strb	r2, [r3, #7]
			key->specialKey = 0;//for later use
     640:	68bb      	ldr	r3, [r7, #8]
     642:	2200      	movs	r2, #0
     644:	739a      	strb	r2, [r3, #14]
			key->keyHoldCount = 0;
     646:	68bb      	ldr	r3, [r7, #8]
     648:	2200      	movs	r2, #0
     64a:	609a      	str	r2, [r3, #8]

			//right key
			rightKey->columnIO = rightKeyboardObj.columnIOArr[j];
     64c:	1c3b      	adds	r3, r7, #0
     64e:	3316      	adds	r3, #22
     650:	781a      	ldrb	r2, [r3, #0]
     652:	4b3c      	ldr	r3, [pc, #240]	; (744 <initKeyBoard+0x2a0>)
     654:	3206      	adds	r2, #6
     656:	0092      	lsls	r2, r2, #2
     658:	58d2      	ldr	r2, [r2, r3]
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	601a      	str	r2, [r3, #0]
			rightKey->currentState = false;
     65e:	687b      	ldr	r3, [r7, #4]
     660:	2200      	movs	r2, #0
     662:	715a      	strb	r2, [r3, #5]
			rightKey->previousState = false;
     664:	687b      	ldr	r3, [r7, #4]
     666:	2200      	movs	r2, #0
     668:	711a      	strb	r2, [r3, #4]
			rightKey->hidKeyMod = 0;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2200      	movs	r2, #0
     66e:	735a      	strb	r2, [r3, #13]
			rightKey->hidKey = keyArray[i][j];//   HID_A+j+i;//no HID Key
     670:	1c3b      	adds	r3, r7, #0
     672:	3317      	adds	r3, #23
     674:	781a      	ldrb	r2, [r3, #0]
     676:	1c3b      	adds	r3, r7, #0
     678:	3316      	adds	r3, #22
     67a:	7818      	ldrb	r0, [r3, #0]
     67c:	4934      	ldr	r1, [pc, #208]	; (750 <initKeyBoard+0x2ac>)
     67e:	1c13      	adds	r3, r2, #0
     680:	00db      	lsls	r3, r3, #3
     682:	1a9b      	subs	r3, r3, r2
     684:	181b      	adds	r3, r3, r0
     686:	5c5a      	ldrb	r2, [r3, r1]
     688:	687b      	ldr	r3, [r7, #4]
     68a:	731a      	strb	r2, [r3, #12]
			rightKey->keyJustDown = false;
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	2200      	movs	r2, #0
     690:	719a      	strb	r2, [r3, #6]
			rightKey->keyJustRelease = false;
     692:	687b      	ldr	r3, [r7, #4]
     694:	2200      	movs	r2, #0
     696:	71da      	strb	r2, [r3, #7]
			rightKey->specialKey = 0;//for later use
     698:	687b      	ldr	r3, [r7, #4]
     69a:	2200      	movs	r2, #0
     69c:	739a      	strb	r2, [r3, #14]
			rightKey->keyHoldCount = 0;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2200      	movs	r2, #0
     6a2:	609a      	str	r2, [r3, #8]
			
			ioport_set_pin_dir(key->columnIO, IOPORT_DIR_INPUT);
     6a4:	68bb      	ldr	r3, [r7, #8]
     6a6:	681b      	ldr	r3, [r3, #0]
     6a8:	1c18      	adds	r0, r3, #0
     6aa:	2100      	movs	r1, #0
     6ac:	4b29      	ldr	r3, [pc, #164]	; (754 <initKeyBoard+0x2b0>)
     6ae:	4798      	blx	r3
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
     6b0:	68bb      	ldr	r3, [r7, #8]
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	1c18      	adds	r0, r3, #0
     6b6:	2120      	movs	r1, #32
     6b8:	4b27      	ldr	r3, [pc, #156]	; (758 <initKeyBoard+0x2b4>)
     6ba:	4798      	blx	r3
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	1c18      	adds	r0, r3, #0
     6c2:	2100      	movs	r1, #0
     6c4:	4b23      	ldr	r3, [pc, #140]	; (754 <initKeyBoard+0x2b0>)
     6c6:	4798      	blx	r3
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	681b      	ldr	r3, [r3, #0]
     6cc:	1c18      	adds	r0, r3, #0
     6ce:	2120      	movs	r1, #32
     6d0:	4b21      	ldr	r3, [pc, #132]	; (758 <initKeyBoard+0x2b4>)
     6d2:	4798      	blx	r3
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		row->rowIO = keyboardObj.rowIOArr[i];
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     6d4:	1c3b      	adds	r3, r7, #0
     6d6:	3316      	adds	r3, #22
     6d8:	781a      	ldrb	r2, [r3, #0]
     6da:	1c3b      	adds	r3, r7, #0
     6dc:	3316      	adds	r3, #22
     6de:	3201      	adds	r2, #1
     6e0:	701a      	strb	r2, [r3, #0]
     6e2:	1c3b      	adds	r3, r7, #0
     6e4:	3316      	adds	r3, #22
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	2b06      	cmp	r3, #6
     6ea:	d800      	bhi.n	6ee <initKeyBoard+0x24a>
     6ec:	e772      	b.n	5d4 <initKeyBoard+0x130>
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
	}
	ioport_set_pin_dir(row->rowIO, IOPORT_DIR_OUTPUT);
     6ee:	693b      	ldr	r3, [r7, #16]
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	1c18      	adds	r0, r3, #0
     6f4:	2101      	movs	r1, #1
     6f6:	4b17      	ldr	r3, [pc, #92]	; (754 <initKeyBoard+0x2b0>)
     6f8:	4798      	blx	r3
	ioport_set_pin_level(row->rowIO, false);//set the pin low
     6fa:	693b      	ldr	r3, [r7, #16]
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	1c18      	adds	r0, r3, #0
     700:	2100      	movs	r1, #0
     702:	4b16      	ldr	r3, [pc, #88]	; (75c <initKeyBoard+0x2b8>)
     704:	4798      	blx	r3
	
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
     706:	68fb      	ldr	r3, [r7, #12]
     708:	681b      	ldr	r3, [r3, #0]
     70a:	1c18      	adds	r0, r3, #0
     70c:	2101      	movs	r1, #1
     70e:	4b11      	ldr	r3, [pc, #68]	; (754 <initKeyBoard+0x2b0>)
     710:	4798      	blx	r3
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
     712:	68fb      	ldr	r3, [r7, #12]
     714:	681b      	ldr	r3, [r3, #0]
     716:	1c18      	adds	r0, r3, #0
     718:	2100      	movs	r1, #0
     71a:	4b10      	ldr	r3, [pc, #64]	; (75c <initKeyBoard+0x2b8>)
     71c:	4798      	blx	r3

//setup all of the pins

	ioport_init();
	delay_init();
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     71e:	1c3b      	adds	r3, r7, #0
     720:	3317      	adds	r3, #23
     722:	781a      	ldrb	r2, [r3, #0]
     724:	1c3b      	adds	r3, r7, #0
     726:	3317      	adds	r3, #23
     728:	3201      	adds	r2, #1
     72a:	701a      	strb	r2, [r3, #0]
     72c:	1c3b      	adds	r3, r7, #0
     72e:	3317      	adds	r3, #23
     730:	781b      	ldrb	r3, [r3, #0]
     732:	2b05      	cmp	r3, #5
     734:	d800      	bhi.n	738 <initKeyBoard+0x294>
     736:	e724      	b.n	582 <initKeyBoard+0xde>
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
		
	}
	
}
     738:	46bd      	mov	sp, r7
     73a:	b006      	add	sp, #24
     73c:	bd80      	pop	{r7, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	20000324 	.word	0x20000324
     744:	20000664 	.word	0x20000664
     748:	00000405 	.word	0x00000405
     74c:	00000111 	.word	0x00000111
     750:	20000008 	.word	0x20000008
     754:	00000435 	.word	0x00000435
     758:	00000415 	.word	0x00000415
     75c:	0000045d 	.word	0x0000045d

00000760 <checkKeys>:

uint8_t checkKeys(void)
{
     760:	b580      	push	{r7, lr}
     762:	b086      	sub	sp, #24
     764:	af00      	add	r7, sp, #0
	uint8_t i = 0;
     766:	1c3b      	adds	r3, r7, #0
     768:	3317      	adds	r3, #23
     76a:	2200      	movs	r2, #0
     76c:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     76e:	1c3b      	adds	r3, r7, #0
     770:	3316      	adds	r3, #22
     772:	2200      	movs	r2, #0
     774:	701a      	strb	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     776:	1c3b      	adds	r3, r7, #0
     778:	3317      	adds	r3, #23
     77a:	2200      	movs	r2, #0
     77c:	701a      	strb	r2, [r3, #0]
     77e:	e0e7      	b.n	950 <checkKeys+0x1f0>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     780:	1c3b      	adds	r3, r7, #0
     782:	3317      	adds	r3, #23
     784:	781b      	ldrb	r3, [r3, #0]
     786:	2274      	movs	r2, #116	; 0x74
     788:	4353      	muls	r3, r2
     78a:	1c1a      	adds	r2, r3, #0
     78c:	3288      	adds	r2, #136	; 0x88
     78e:	4b76      	ldr	r3, [pc, #472]	; (968 <checkKeys+0x208>)
     790:	18d3      	adds	r3, r2, r3
     792:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     794:	1c3b      	adds	r3, r7, #0
     796:	3317      	adds	r3, #23
     798:	781b      	ldrb	r3, [r3, #0]
     79a:	2274      	movs	r2, #116	; 0x74
     79c:	4353      	muls	r3, r2
     79e:	1c1a      	adds	r2, r3, #0
     7a0:	3288      	adds	r2, #136	; 0x88
     7a2:	4b72      	ldr	r3, [pc, #456]	; (96c <checkKeys+0x20c>)
     7a4:	18d3      	adds	r3, r2, r3
     7a6:	60fb      	str	r3, [r7, #12]
		
		ioport_set_pin_level(row->rowIO, true);
     7a8:	693b      	ldr	r3, [r7, #16]
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	1c18      	adds	r0, r3, #0
     7ae:	2101      	movs	r1, #1
     7b0:	4b6f      	ldr	r3, [pc, #444]	; (970 <checkKeys+0x210>)
     7b2:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, true);
     7b4:	68fb      	ldr	r3, [r7, #12]
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	1c18      	adds	r0, r3, #0
     7ba:	2101      	movs	r1, #1
     7bc:	4b6c      	ldr	r3, [pc, #432]	; (970 <checkKeys+0x210>)
     7be:	4798      	blx	r3
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     7c0:	1c3b      	adds	r3, r7, #0
     7c2:	3316      	adds	r3, #22
     7c4:	2200      	movs	r2, #0
     7c6:	701a      	strb	r2, [r3, #0]
     7c8:	e0a9      	b.n	91e <checkKeys+0x1be>
		{
			KEY_OBJ *key = &row->keys[j];
     7ca:	1c3b      	adds	r3, r7, #0
     7cc:	3316      	adds	r3, #22
     7ce:	781b      	ldrb	r3, [r3, #0]
     7d0:	011b      	lsls	r3, r3, #4
     7d2:	693a      	ldr	r2, [r7, #16]
     7d4:	18d3      	adds	r3, r2, r3
     7d6:	3304      	adds	r3, #4
     7d8:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
     7da:	1c3b      	adds	r3, r7, #0
     7dc:	3316      	adds	r3, #22
     7de:	781b      	ldrb	r3, [r3, #0]
     7e0:	011b      	lsls	r3, r3, #4
     7e2:	68fa      	ldr	r2, [r7, #12]
     7e4:	18d3      	adds	r3, r2, r3
     7e6:	3304      	adds	r3, #4
     7e8:	607b      	str	r3, [r7, #4]
				
			key->previousState = key->currentState;
     7ea:	68bb      	ldr	r3, [r7, #8]
     7ec:	795a      	ldrb	r2, [r3, #5]
     7ee:	68bb      	ldr	r3, [r7, #8]
     7f0:	711a      	strb	r2, [r3, #4]
			key->currentState = ioport_get_pin_level(key->columnIO);
     7f2:	68bb      	ldr	r3, [r7, #8]
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	1c18      	adds	r0, r3, #0
     7f8:	4b5e      	ldr	r3, [pc, #376]	; (974 <checkKeys+0x214>)
     7fa:	4798      	blx	r3
     7fc:	1c03      	adds	r3, r0, #0
     7fe:	1c1a      	adds	r2, r3, #0
     800:	68bb      	ldr	r3, [r7, #8]
     802:	715a      	strb	r2, [r3, #5]
			//delay_ms(KEY_DELAY_MS);
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
     804:	68bb      	ldr	r3, [r7, #8]
     806:	795b      	ldrb	r3, [r3, #5]
     808:	2b00      	cmp	r3, #0
     80a:	d014      	beq.n	836 <checkKeys+0xd6>
     80c:	68bb      	ldr	r3, [r7, #8]
     80e:	791b      	ldrb	r3, [r3, #4]
     810:	2b00      	cmp	r3, #0
     812:	d010      	beq.n	836 <checkKeys+0xd6>
			{
				key->keyHoldCount++;
     814:	68bb      	ldr	r3, [r7, #8]
     816:	689b      	ldr	r3, [r3, #8]
     818:	1c5a      	adds	r2, r3, #1
     81a:	68bb      	ldr	r3, [r7, #8]
     81c:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     81e:	68bb      	ldr	r3, [r7, #8]
     820:	689b      	ldr	r3, [r3, #8]
     822:	2b01      	cmp	r3, #1
     824:	d103      	bne.n	82e <checkKeys+0xce>
				{
					key->keyJustDown = true;
     826:	68bb      	ldr	r3, [r7, #8]
     828:	2201      	movs	r2, #1
     82a:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     82c:	e02d      	b.n	88a <checkKeys+0x12a>
				{
					key->keyJustDown = true;
				}
				else
				{
					key->keyJustDown = false;
     82e:	68bb      	ldr	r3, [r7, #8]
     830:	2200      	movs	r2, #0
     832:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     834:	e029      	b.n	88a <checkKeys+0x12a>
				{
					key->keyJustDown = false;
					
				}
			}
			else if(key->currentState == false && key->previousState == false)
     836:	68bb      	ldr	r3, [r7, #8]
     838:	795b      	ldrb	r3, [r3, #5]
     83a:	2201      	movs	r2, #1
     83c:	4053      	eors	r3, r2
     83e:	b2db      	uxtb	r3, r3
     840:	2b00      	cmp	r3, #0
     842:	d01c      	beq.n	87e <checkKeys+0x11e>
     844:	68bb      	ldr	r3, [r7, #8]
     846:	791b      	ldrb	r3, [r3, #4]
     848:	2201      	movs	r2, #1
     84a:	4053      	eors	r3, r2
     84c:	b2db      	uxtb	r3, r3
     84e:	2b00      	cmp	r3, #0
     850:	d015      	beq.n	87e <checkKeys+0x11e>
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     852:	68bb      	ldr	r3, [r7, #8]
     854:	689b      	ldr	r3, [r3, #8]
     856:	2b00      	cmp	r3, #0
     858:	d00a      	beq.n	870 <checkKeys+0x110>
     85a:	68bb      	ldr	r3, [r7, #8]
     85c:	79db      	ldrb	r3, [r3, #7]
     85e:	2201      	movs	r2, #1
     860:	4053      	eors	r3, r2
     862:	b2db      	uxtb	r3, r3
     864:	2b00      	cmp	r3, #0
     866:	d003      	beq.n	870 <checkKeys+0x110>
				{
					key->keyJustRelease = true;
     868:	68bb      	ldr	r3, [r7, #8]
     86a:	2201      	movs	r2, #1
     86c:	71da      	strb	r2, [r3, #7]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     86e:	e00c      	b.n	88a <checkKeys+0x12a>
					key->keyJustRelease = true;
					
				}
				else
				{
					key->keyJustRelease = false;
     870:	68bb      	ldr	r3, [r7, #8]
     872:	2200      	movs	r2, #0
     874:	71da      	strb	r2, [r3, #7]
					key->keyHoldCount = 0;
     876:	68bb      	ldr	r3, [r7, #8]
     878:	2200      	movs	r2, #0
     87a:	609a      	str	r2, [r3, #8]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     87c:	e005      	b.n	88a <checkKeys+0x12a>
					key->keyHoldCount = 0;
				}
			}
			else
			{
				key->keyJustRelease = false;
     87e:	68bb      	ldr	r3, [r7, #8]
     880:	2200      	movs	r2, #0
     882:	71da      	strb	r2, [r3, #7]
				key->keyJustDown = false;
     884:	68bb      	ldr	r3, [r7, #8]
     886:	2200      	movs	r2, #0
     888:	719a      	strb	r2, [r3, #6]
			}
			
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	795b      	ldrb	r3, [r3, #5]
     88e:	2b00      	cmp	r3, #0
     890:	d014      	beq.n	8bc <checkKeys+0x15c>
     892:	687b      	ldr	r3, [r7, #4]
     894:	791b      	ldrb	r3, [r3, #4]
     896:	2b00      	cmp	r3, #0
     898:	d010      	beq.n	8bc <checkKeys+0x15c>
			{
				rightKey->keyHoldCount++;
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	689b      	ldr	r3, [r3, #8]
     89e:	1c5a      	adds	r2, r3, #1
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	689b      	ldr	r3, [r3, #8]
     8a8:	2b01      	cmp	r3, #1
     8aa:	d103      	bne.n	8b4 <checkKeys+0x154>
				{
					rightKey->keyJustDown = true;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	2201      	movs	r2, #1
     8b0:	719a      	strb	r2, [r3, #6]
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
     8b2:	e02d      	b.n	910 <checkKeys+0x1b0>
				{
					rightKey->keyJustDown = true;
				}
				else
				{
					rightKey->keyJustDown = false;
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	2200      	movs	r2, #0
     8b8:	719a      	strb	r2, [r3, #6]
			//Right Hand check
			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
     8ba:	e029      	b.n	910 <checkKeys+0x1b0>
				{
					rightKey->keyJustDown = false;
								
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	795b      	ldrb	r3, [r3, #5]
     8c0:	2201      	movs	r2, #1
     8c2:	4053      	eors	r3, r2
     8c4:	b2db      	uxtb	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d01c      	beq.n	904 <checkKeys+0x1a4>
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	791b      	ldrb	r3, [r3, #4]
     8ce:	2201      	movs	r2, #1
     8d0:	4053      	eors	r3, r2
     8d2:	b2db      	uxtb	r3, r3
     8d4:	2b00      	cmp	r3, #0
     8d6:	d015      	beq.n	904 <checkKeys+0x1a4>
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	689b      	ldr	r3, [r3, #8]
     8dc:	2b00      	cmp	r3, #0
     8de:	d00a      	beq.n	8f6 <checkKeys+0x196>
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	79db      	ldrb	r3, [r3, #7]
     8e4:	2201      	movs	r2, #1
     8e6:	4053      	eors	r3, r2
     8e8:	b2db      	uxtb	r3, r3
     8ea:	2b00      	cmp	r3, #0
     8ec:	d003      	beq.n	8f6 <checkKeys+0x196>
				{
					rightKey->keyJustRelease = true;
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	2201      	movs	r2, #1
     8f2:	71da      	strb	r2, [r3, #7]
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
     8f4:	e00c      	b.n	910 <checkKeys+0x1b0>
					rightKey->keyJustRelease = true;
								
				}
				else
				{
					rightKey->keyJustRelease = false;
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	2200      	movs	r2, #0
     8fa:	71da      	strb	r2, [r3, #7]
					rightKey->keyHoldCount = 0;
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	2200      	movs	r2, #0
     900:	609a      	str	r2, [r3, #8]
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
     902:	e005      	b.n	910 <checkKeys+0x1b0>
					rightKey->keyHoldCount = 0;
				}
			}
			else
			{
				rightKey->keyJustRelease = false;
     904:	687b      	ldr	r3, [r7, #4]
     906:	2200      	movs	r2, #0
     908:	71da      	strb	r2, [r3, #7]
				rightKey->keyJustDown = false;
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	2200      	movs	r2, #0
     90e:	719a      	strb	r2, [r3, #6]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		
		ioport_set_pin_level(row->rowIO, true);
		ioport_set_pin_level(rightRow->rowIO, true);
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     910:	1c3b      	adds	r3, r7, #0
     912:	3316      	adds	r3, #22
     914:	781a      	ldrb	r2, [r3, #0]
     916:	1c3b      	adds	r3, r7, #0
     918:	3316      	adds	r3, #22
     91a:	3201      	adds	r2, #1
     91c:	701a      	strb	r2, [r3, #0]
     91e:	1c3b      	adds	r3, r7, #0
     920:	3316      	adds	r3, #22
     922:	781b      	ldrb	r3, [r3, #0]
     924:	2b06      	cmp	r3, #6
     926:	d800      	bhi.n	92a <checkKeys+0x1ca>
     928:	e74f      	b.n	7ca <checkKeys+0x6a>
				rightKey->keyJustRelease = false;
				rightKey->keyJustDown = false;
			}
		}
		
		ioport_set_pin_level(row->rowIO, false);//set the pin low
     92a:	693b      	ldr	r3, [r7, #16]
     92c:	681b      	ldr	r3, [r3, #0]
     92e:	1c18      	adds	r0, r3, #0
     930:	2100      	movs	r1, #0
     932:	4b0f      	ldr	r3, [pc, #60]	; (970 <checkKeys+0x210>)
     934:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
     936:	68fb      	ldr	r3, [r7, #12]
     938:	681b      	ldr	r3, [r3, #0]
     93a:	1c18      	adds	r0, r3, #0
     93c:	2100      	movs	r1, #0
     93e:	4b0c      	ldr	r3, [pc, #48]	; (970 <checkKeys+0x210>)
     940:	4798      	blx	r3

uint8_t checkKeys(void)
{
	uint8_t i = 0;
	uint8_t j = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     942:	1c3b      	adds	r3, r7, #0
     944:	3317      	adds	r3, #23
     946:	781a      	ldrb	r2, [r3, #0]
     948:	1c3b      	adds	r3, r7, #0
     94a:	3317      	adds	r3, #23
     94c:	3201      	adds	r2, #1
     94e:	701a      	strb	r2, [r3, #0]
     950:	1c3b      	adds	r3, r7, #0
     952:	3317      	adds	r3, #23
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b05      	cmp	r3, #5
     958:	d800      	bhi.n	95c <checkKeys+0x1fc>
     95a:	e711      	b.n	780 <checkKeys+0x20>
		}
		
		ioport_set_pin_level(row->rowIO, false);//set the pin low
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
	}
	return 0;
     95c:	2300      	movs	r3, #0
}
     95e:	1c18      	adds	r0, r3, #0
     960:	46bd      	mov	sp, r7
     962:	b006      	add	sp, #24
     964:	bd80      	pop	{r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	20000324 	.word	0x20000324
     96c:	20000664 	.word	0x20000664
     970:	0000045d 	.word	0x0000045d
     974:	00000485 	.word	0x00000485

00000978 <getJustPressedKeys>:


uint8_t getJustPressedKeys(KEY_OBJ **keyArr)
{
     978:	b580      	push	{r7, lr}
     97a:	b088      	sub	sp, #32
     97c:	af00      	add	r7, sp, #0
     97e:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
     980:	1c3b      	adds	r3, r7, #0
     982:	331f      	adds	r3, #31
     984:	2200      	movs	r2, #0
     986:	701a      	strb	r2, [r3, #0]
		uint8_t j = 0;
     988:	1c3b      	adds	r3, r7, #0
     98a:	331e      	adds	r3, #30
     98c:	2200      	movs	r2, #0
     98e:	701a      	strb	r2, [r3, #0]
		uint8_t numOfKeyPressed = 0;
     990:	1c3b      	adds	r3, r7, #0
     992:	331d      	adds	r3, #29
     994:	2200      	movs	r2, #0
     996:	701a      	strb	r2, [r3, #0]
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
     998:	1c3b      	adds	r3, r7, #0
     99a:	331f      	adds	r3, #31
     99c:	2200      	movs	r2, #0
     99e:	701a      	strb	r2, [r3, #0]
     9a0:	e05b      	b.n	a5a <getJustPressedKeys+0xe2>
		{
			KEY_ROW *row = &keyboardObj.keyRows[i];
     9a2:	1c3b      	adds	r3, r7, #0
     9a4:	331f      	adds	r3, #31
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	2274      	movs	r2, #116	; 0x74
     9aa:	4353      	muls	r3, r2
     9ac:	1c1a      	adds	r2, r3, #0
     9ae:	3288      	adds	r2, #136	; 0x88
     9b0:	4b30      	ldr	r3, [pc, #192]	; (a74 <getJustPressedKeys+0xfc>)
     9b2:	18d3      	adds	r3, r2, r3
     9b4:	61bb      	str	r3, [r7, #24]
			KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     9b6:	1c3b      	adds	r3, r7, #0
     9b8:	331f      	adds	r3, #31
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	2274      	movs	r2, #116	; 0x74
     9be:	4353      	muls	r3, r2
     9c0:	1c1a      	adds	r2, r3, #0
     9c2:	3288      	adds	r2, #136	; 0x88
     9c4:	4b2c      	ldr	r3, [pc, #176]	; (a78 <getJustPressedKeys+0x100>)
     9c6:	18d3      	adds	r3, r2, r3
     9c8:	617b      	str	r3, [r7, #20]
			
			for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     9ca:	1c3b      	adds	r3, r7, #0
     9cc:	331e      	adds	r3, #30
     9ce:	2200      	movs	r2, #0
     9d0:	701a      	strb	r2, [r3, #0]
     9d2:	e036      	b.n	a42 <getJustPressedKeys+0xca>
			{
				KEY_OBJ *key = &row->keys[j];
     9d4:	1c3b      	adds	r3, r7, #0
     9d6:	331e      	adds	r3, #30
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	011b      	lsls	r3, r3, #4
     9dc:	69ba      	ldr	r2, [r7, #24]
     9de:	18d3      	adds	r3, r2, r3
     9e0:	3304      	adds	r3, #4
     9e2:	613b      	str	r3, [r7, #16]
				KEY_OBJ *rightKey = &rightRow->keys[j];
     9e4:	1c3b      	adds	r3, r7, #0
     9e6:	331e      	adds	r3, #30
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	011b      	lsls	r3, r3, #4
     9ec:	697a      	ldr	r2, [r7, #20]
     9ee:	18d3      	adds	r3, r2, r3
     9f0:	3304      	adds	r3, #4
     9f2:	60fb      	str	r3, [r7, #12]
				//check if key is just pressed
				if(key->keyJustDown)
     9f4:	693b      	ldr	r3, [r7, #16]
     9f6:	799b      	ldrb	r3, [r3, #6]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d00b      	beq.n	a14 <getJustPressedKeys+0x9c>
				{
					//returns an array of pointers to the key
					keyArr[numOfKeyPressed++] = key;
     9fc:	1c3b      	adds	r3, r7, #0
     9fe:	331d      	adds	r3, #29
     a00:	781b      	ldrb	r3, [r3, #0]
     a02:	1c3a      	adds	r2, r7, #0
     a04:	321d      	adds	r2, #29
     a06:	1c59      	adds	r1, r3, #1
     a08:	7011      	strb	r1, [r2, #0]
     a0a:	009b      	lsls	r3, r3, #2
     a0c:	687a      	ldr	r2, [r7, #4]
     a0e:	18d3      	adds	r3, r2, r3
     a10:	693a      	ldr	r2, [r7, #16]
     a12:	601a      	str	r2, [r3, #0]
				}
				
				if(rightKey->keyJustDown)
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	799b      	ldrb	r3, [r3, #6]
     a18:	2b00      	cmp	r3, #0
     a1a:	d00b      	beq.n	a34 <getJustPressedKeys+0xbc>
				{
					//returns an array of pointers to the key
					keyArr[numOfKeyPressed++] = rightKey;
     a1c:	1c3b      	adds	r3, r7, #0
     a1e:	331d      	adds	r3, #29
     a20:	781b      	ldrb	r3, [r3, #0]
     a22:	1c3a      	adds	r2, r7, #0
     a24:	321d      	adds	r2, #29
     a26:	1c59      	adds	r1, r3, #1
     a28:	7011      	strb	r1, [r2, #0]
     a2a:	009b      	lsls	r3, r3, #2
     a2c:	687a      	ldr	r2, [r7, #4]
     a2e:	18d3      	adds	r3, r2, r3
     a30:	68fa      	ldr	r2, [r7, #12]
     a32:	601a      	str	r2, [r3, #0]
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
		{
			KEY_ROW *row = &keyboardObj.keyRows[i];
			KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
			
			for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     a34:	1c3b      	adds	r3, r7, #0
     a36:	331e      	adds	r3, #30
     a38:	781a      	ldrb	r2, [r3, #0]
     a3a:	1c3b      	adds	r3, r7, #0
     a3c:	331e      	adds	r3, #30
     a3e:	3201      	adds	r2, #1
     a40:	701a      	strb	r2, [r3, #0]
     a42:	1c3b      	adds	r3, r7, #0
     a44:	331e      	adds	r3, #30
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	2b06      	cmp	r3, #6
     a4a:	d9c3      	bls.n	9d4 <getJustPressedKeys+0x5c>
uint8_t getJustPressedKeys(KEY_OBJ **keyArr)
{
		uint8_t i = 0;
		uint8_t j = 0;
		uint8_t numOfKeyPressed = 0;
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
     a4c:	1c3b      	adds	r3, r7, #0
     a4e:	331f      	adds	r3, #31
     a50:	781a      	ldrb	r2, [r3, #0]
     a52:	1c3b      	adds	r3, r7, #0
     a54:	331f      	adds	r3, #31
     a56:	3201      	adds	r2, #1
     a58:	701a      	strb	r2, [r3, #0]
     a5a:	1c3b      	adds	r3, r7, #0
     a5c:	331f      	adds	r3, #31
     a5e:	781b      	ldrb	r3, [r3, #0]
     a60:	2b05      	cmp	r3, #5
     a62:	d99e      	bls.n	9a2 <getJustPressedKeys+0x2a>
					keyArr[numOfKeyPressed++] = rightKey;
				}
				
			}
		}
	return numOfKeyPressed;
     a64:	1c3b      	adds	r3, r7, #0
     a66:	331d      	adds	r3, #29
     a68:	781b      	ldrb	r3, [r3, #0]
}
     a6a:	1c18      	adds	r0, r3, #0
     a6c:	46bd      	mov	sp, r7
     a6e:	b008      	add	sp, #32
     a70:	bd80      	pop	{r7, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	20000324 	.word	0x20000324
     a78:	20000664 	.word	0x20000664

00000a7c <getJustReleaseKeys>:

uint8_t getJustReleaseKeys(KEY_OBJ **keyArr)
{
     a7c:	b580      	push	{r7, lr}
     a7e:	b088      	sub	sp, #32
     a80:	af00      	add	r7, sp, #0
     a82:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
     a84:	1c3b      	adds	r3, r7, #0
     a86:	331f      	adds	r3, #31
     a88:	2200      	movs	r2, #0
     a8a:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     a8c:	1c3b      	adds	r3, r7, #0
     a8e:	331e      	adds	r3, #30
     a90:	2200      	movs	r2, #0
     a92:	701a      	strb	r2, [r3, #0]
	uint8_t numOfKeyReleased = 0;
     a94:	1c3b      	adds	r3, r7, #0
     a96:	331d      	adds	r3, #29
     a98:	2200      	movs	r2, #0
     a9a:	701a      	strb	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     a9c:	1c3b      	adds	r3, r7, #0
     a9e:	331f      	adds	r3, #31
     aa0:	2200      	movs	r2, #0
     aa2:	701a      	strb	r2, [r3, #0]
     aa4:	e05b      	b.n	b5e <STACK_SIZE+0x5e>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     aa6:	1c3b      	adds	r3, r7, #0
     aa8:	331f      	adds	r3, #31
     aaa:	781b      	ldrb	r3, [r3, #0]
     aac:	2274      	movs	r2, #116	; 0x74
     aae:	4353      	muls	r3, r2
     ab0:	1c1a      	adds	r2, r3, #0
     ab2:	3288      	adds	r2, #136	; 0x88
     ab4:	4b30      	ldr	r3, [pc, #192]	; (b78 <STACK_SIZE+0x78>)
     ab6:	18d3      	adds	r3, r2, r3
     ab8:	61bb      	str	r3, [r7, #24]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
     aba:	1c3b      	adds	r3, r7, #0
     abc:	331f      	adds	r3, #31
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	2274      	movs	r2, #116	; 0x74
     ac2:	4353      	muls	r3, r2
     ac4:	1c1a      	adds	r2, r3, #0
     ac6:	3288      	adds	r2, #136	; 0x88
     ac8:	4b2c      	ldr	r3, [pc, #176]	; (b7c <STACK_SIZE+0x7c>)
     aca:	18d3      	adds	r3, r2, r3
     acc:	617b      	str	r3, [r7, #20]
	
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     ace:	1c3b      	adds	r3, r7, #0
     ad0:	331e      	adds	r3, #30
     ad2:	2200      	movs	r2, #0
     ad4:	701a      	strb	r2, [r3, #0]
     ad6:	e036      	b.n	b46 <STACK_SIZE+0x46>
		{
			KEY_OBJ *key = &row->keys[j];
     ad8:	1c3b      	adds	r3, r7, #0
     ada:	331e      	adds	r3, #30
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	011b      	lsls	r3, r3, #4
     ae0:	69ba      	ldr	r2, [r7, #24]
     ae2:	18d3      	adds	r3, r2, r3
     ae4:	3304      	adds	r3, #4
     ae6:	613b      	str	r3, [r7, #16]
			KEY_OBJ *rightKey = &rightRow->keys[j];
     ae8:	1c3b      	adds	r3, r7, #0
     aea:	331e      	adds	r3, #30
     aec:	781b      	ldrb	r3, [r3, #0]
     aee:	011b      	lsls	r3, r3, #4
     af0:	697a      	ldr	r2, [r7, #20]
     af2:	18d3      	adds	r3, r2, r3
     af4:	3304      	adds	r3, #4
     af6:	60fb      	str	r3, [r7, #12]
			//check if key is just pressed
			if(key->keyJustRelease)
     af8:	693b      	ldr	r3, [r7, #16]
     afa:	79db      	ldrb	r3, [r3, #7]
     afc:	2b00      	cmp	r3, #0
     afe:	d00b      	beq.n	b18 <STACK_SIZE+0x18>
			{
				//returns an array of pointers to the key
				keyArr[numOfKeyReleased++] = key;
     b00:	1c3b      	adds	r3, r7, #0
     b02:	331d      	adds	r3, #29
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	1c3a      	adds	r2, r7, #0
     b08:	321d      	adds	r2, #29
     b0a:	1c59      	adds	r1, r3, #1
     b0c:	7011      	strb	r1, [r2, #0]
     b0e:	009b      	lsls	r3, r3, #2
     b10:	687a      	ldr	r2, [r7, #4]
     b12:	18d3      	adds	r3, r2, r3
     b14:	693a      	ldr	r2, [r7, #16]
     b16:	601a      	str	r2, [r3, #0]
			}
			
			if(rightKey->keyJustRelease)
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	79db      	ldrb	r3, [r3, #7]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d00b      	beq.n	b38 <STACK_SIZE+0x38>
			{
				//returns an array of pointers to the key
				keyArr[numOfKeyReleased++] = rightKey;
     b20:	1c3b      	adds	r3, r7, #0
     b22:	331d      	adds	r3, #29
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	1c3a      	adds	r2, r7, #0
     b28:	321d      	adds	r2, #29
     b2a:	1c59      	adds	r1, r3, #1
     b2c:	7011      	strb	r1, [r2, #0]
     b2e:	009b      	lsls	r3, r3, #2
     b30:	687a      	ldr	r2, [r7, #4]
     b32:	18d3      	adds	r3, r2, r3
     b34:	68fa      	ldr	r2, [r7, #12]
     b36:	601a      	str	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
	
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     b38:	1c3b      	adds	r3, r7, #0
     b3a:	331e      	adds	r3, #30
     b3c:	781a      	ldrb	r2, [r3, #0]
     b3e:	1c3b      	adds	r3, r7, #0
     b40:	331e      	adds	r3, #30
     b42:	3201      	adds	r2, #1
     b44:	701a      	strb	r2, [r3, #0]
     b46:	1c3b      	adds	r3, r7, #0
     b48:	331e      	adds	r3, #30
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	2b06      	cmp	r3, #6
     b4e:	d9c3      	bls.n	ad8 <getJustReleaseKeys+0x5c>
{

	uint8_t i = 0;
	uint8_t j = 0;
	uint8_t numOfKeyReleased = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     b50:	1c3b      	adds	r3, r7, #0
     b52:	331f      	adds	r3, #31
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	1c3b      	adds	r3, r7, #0
     b58:	331f      	adds	r3, #31
     b5a:	3201      	adds	r2, #1
     b5c:	701a      	strb	r2, [r3, #0]
     b5e:	1c3b      	adds	r3, r7, #0
     b60:	331f      	adds	r3, #31
     b62:	781b      	ldrb	r3, [r3, #0]
     b64:	2b05      	cmp	r3, #5
     b66:	d99e      	bls.n	aa6 <getJustReleaseKeys+0x2a>
				//returns an array of pointers to the key
				keyArr[numOfKeyReleased++] = rightKey;
			}
		}
	}
	return numOfKeyReleased;
     b68:	1c3b      	adds	r3, r7, #0
     b6a:	331d      	adds	r3, #29
     b6c:	781b      	ldrb	r3, [r3, #0]
}
     b6e:	1c18      	adds	r0, r3, #0
     b70:	46bd      	mov	sp, r7
     b72:	b008      	add	sp, #32
     b74:	bd80      	pop	{r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	20000324 	.word	0x20000324
     b7c:	20000664 	.word	0x20000664

00000b80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     b80:	b580      	push	{r7, lr}
     b82:	b084      	sub	sp, #16
     b84:	af00      	add	r7, sp, #0
     b86:	1c02      	adds	r2, r0, #0
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     b8c:	1c3b      	adds	r3, r7, #0
     b8e:	330f      	adds	r3, #15
     b90:	1dfa      	adds	r2, r7, #7
     b92:	7812      	ldrb	r2, [r2, #0]
     b94:	09d2      	lsrs	r2, r2, #7
     b96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     b98:	1c3b      	adds	r3, r7, #0
     b9a:	330e      	adds	r3, #14
     b9c:	1dfa      	adds	r2, r7, #7
     b9e:	7812      	ldrb	r2, [r2, #0]
     ba0:	0952      	lsrs	r2, r2, #5
     ba2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     ba4:	4b0d      	ldr	r3, [pc, #52]	; (bdc <system_pinmux_get_group_from_gpio_pin+0x5c>)
     ba6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     ba8:	1c3b      	adds	r3, r7, #0
     baa:	330f      	adds	r3, #15
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d10e      	bne.n	bd0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     bb2:	1c3b      	adds	r3, r7, #0
     bb4:	330f      	adds	r3, #15
     bb6:	781b      	ldrb	r3, [r3, #0]
     bb8:	009b      	lsls	r3, r3, #2
     bba:	2210      	movs	r2, #16
     bbc:	19d2      	adds	r2, r2, r7
     bbe:	18d3      	adds	r3, r2, r3
     bc0:	3b08      	subs	r3, #8
     bc2:	681a      	ldr	r2, [r3, #0]
     bc4:	1c3b      	adds	r3, r7, #0
     bc6:	330e      	adds	r3, #14
     bc8:	781b      	ldrb	r3, [r3, #0]
     bca:	01db      	lsls	r3, r3, #7
     bcc:	18d3      	adds	r3, r2, r3
     bce:	e000      	b.n	bd2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
     bd0:	2300      	movs	r3, #0
	}
}
     bd2:	1c18      	adds	r0, r3, #0
     bd4:	46bd      	mov	sp, r7
     bd6:	b004      	add	sp, #16
     bd8:	bd80      	pop	{r7, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	41004400 	.word	0x41004400

00000be0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     be0:	b580      	push	{r7, lr}
     be2:	b082      	sub	sp, #8
     be4:	af00      	add	r7, sp, #0
     be6:	1c02      	adds	r2, r0, #0
     be8:	1dfb      	adds	r3, r7, #7
     bea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     bec:	1dfb      	adds	r3, r7, #7
     bee:	781b      	ldrb	r3, [r3, #0]
     bf0:	1c18      	adds	r0, r3, #0
     bf2:	4b03      	ldr	r3, [pc, #12]	; (c00 <port_get_group_from_gpio_pin+0x20>)
     bf4:	4798      	blx	r3
     bf6:	1c03      	adds	r3, r0, #0
}
     bf8:	1c18      	adds	r0, r3, #0
     bfa:	46bd      	mov	sp, r7
     bfc:	b002      	add	sp, #8
     bfe:	bd80      	pop	{r7, pc}
     c00:	00000b81 	.word	0x00000b81

00000c04 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     c04:	b580      	push	{r7, lr}
     c06:	b084      	sub	sp, #16
     c08:	af00      	add	r7, sp, #0
     c0a:	1c0a      	adds	r2, r1, #0
     c0c:	1dfb      	adds	r3, r7, #7
     c0e:	1c01      	adds	r1, r0, #0
     c10:	7019      	strb	r1, [r3, #0]
     c12:	1dbb      	adds	r3, r7, #6
     c14:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     c16:	1dfb      	adds	r3, r7, #7
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	1c18      	adds	r0, r3, #0
     c1c:	4b0d      	ldr	r3, [pc, #52]	; (c54 <port_pin_set_output_level+0x50>)
     c1e:	4798      	blx	r3
     c20:	1c03      	adds	r3, r0, #0
     c22:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c24:	1dfb      	adds	r3, r7, #7
     c26:	781a      	ldrb	r2, [r3, #0]
     c28:	231f      	movs	r3, #31
     c2a:	4013      	ands	r3, r2
     c2c:	2201      	movs	r2, #1
     c2e:	1c11      	adds	r1, r2, #0
     c30:	4099      	lsls	r1, r3
     c32:	1c0b      	adds	r3, r1, #0
     c34:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     c36:	1dbb      	adds	r3, r7, #6
     c38:	781b      	ldrb	r3, [r3, #0]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d003      	beq.n	c46 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	68ba      	ldr	r2, [r7, #8]
     c42:	619a      	str	r2, [r3, #24]
     c44:	e002      	b.n	c4c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	68ba      	ldr	r2, [r7, #8]
     c4a:	615a      	str	r2, [r3, #20]
	}
}
     c4c:	46bd      	mov	sp, r7
     c4e:	b004      	add	sp, #16
     c50:	bd80      	pop	{r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00000be1 	.word	0x00000be1

00000c58 <udc_remotewakeup>:

/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
     c58:	b580      	push	{r7, lr}
     c5a:	af00      	add	r7, sp, #0
	udd_send_remotewakeup();
     c5c:	4b01      	ldr	r3, [pc, #4]	; (c64 <udc_remotewakeup+0xc>)
     c5e:	4798      	blx	r3
}
     c60:	46bd      	mov	sp, r7
     c62:	bd80      	pop	{r7, pc}
     c64:	00007ed9 	.word	0x00007ed9

00000c68 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     c68:	b580      	push	{r7, lr}
     c6a:	af00      	add	r7, sp, #0
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
     c6c:	4b03      	ldr	r3, [pc, #12]	; (c7c <ui_wakeup_handler+0x14>)
     c6e:	4798      	blx	r3
	LED_On(LED_0_PIN);
     c70:	203e      	movs	r0, #62	; 0x3e
     c72:	2100      	movs	r1, #0
     c74:	4b02      	ldr	r3, [pc, #8]	; (c80 <ui_wakeup_handler+0x18>)
     c76:	4798      	blx	r3
}
     c78:	46bd      	mov	sp, r7
     c7a:	bd80      	pop	{r7, pc}
     c7c:	00000c59 	.word	0x00000c59
     c80:	00000c05 	.word	0x00000c05

00000c84 <ui_init>:

void ui_init(void)
{
     c84:	b580      	push	{r7, lr}
     c86:	b084      	sub	sp, #16
     c88:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     c8a:	1d3b      	adds	r3, r7, #4
     c8c:	1c18      	adds	r0, r3, #0
     c8e:	4b14      	ldr	r3, [pc, #80]	; (ce0 <ui_init+0x5c>)
     c90:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     c92:	1d3b      	adds	r3, r7, #4
     c94:	220f      	movs	r2, #15
     c96:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     c98:	1d3b      	adds	r3, r7, #4
     c9a:	2200      	movs	r2, #0
     c9c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     c9e:	1d3b      	adds	r3, r7, #4
     ca0:	2201      	movs	r2, #1
     ca2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.filter_input_signal = true;
     ca4:	1d3b      	adds	r3, r7, #4
     ca6:	2201      	movs	r2, #1
     ca8:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     caa:	1d3b      	adds	r3, r7, #4
     cac:	2202      	movs	r2, #2
     cae:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     cb0:	1d3b      	adds	r3, r7, #4
     cb2:	200f      	movs	r0, #15
     cb4:	1c19      	adds	r1, r3, #0
     cb6:	4b0b      	ldr	r3, [pc, #44]	; (ce4 <ui_init+0x60>)
     cb8:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     cba:	4b0b      	ldr	r3, [pc, #44]	; (ce8 <ui_init+0x64>)
     cbc:	1c18      	adds	r0, r3, #0
     cbe:	210f      	movs	r1, #15
     cc0:	2200      	movs	r2, #0
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <ui_init+0x68>)
     cc4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     cc6:	200f      	movs	r0, #15
     cc8:	2100      	movs	r1, #0
     cca:	4b09      	ldr	r3, [pc, #36]	; (cf0 <ui_init+0x6c>)
     ccc:	4798      	blx	r3

	/* Initialize LEDs */
	initKeyBoard();
     cce:	4b09      	ldr	r3, [pc, #36]	; (cf4 <ui_init+0x70>)
     cd0:	4798      	blx	r3
	LED_On(LED_0_PIN);
     cd2:	203e      	movs	r0, #62	; 0x3e
     cd4:	2100      	movs	r1, #0
     cd6:	4b08      	ldr	r3, [pc, #32]	; (cf8 <ui_init+0x74>)
     cd8:	4798      	blx	r3
}
     cda:	46bd      	mov	sp, r7
     cdc:	b004      	add	sp, #16
     cde:	bd80      	pop	{r7, pc}
     ce0:	00004d35 	.word	0x00004d35
     ce4:	00004d69 	.word	0x00004d69
     ce8:	00000c69 	.word	0x00000c69
     cec:	0000494d 	.word	0x0000494d
     cf0:	000049a9 	.word	0x000049a9
     cf4:	000004a5 	.word	0x000004a5
     cf8:	00000c05 	.word	0x00000c05

00000cfc <ui_powerdown>:

void ui_powerdown(void)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
     d00:	203e      	movs	r0, #62	; 0x3e
     d02:	2101      	movs	r1, #1
     d04:	4b01      	ldr	r3, [pc, #4]	; (d0c <ui_powerdown+0x10>)
     d06:	4798      	blx	r3
}
     d08:	46bd      	mov	sp, r7
     d0a:	bd80      	pop	{r7, pc}
     d0c:	00000c05 	.word	0x00000c05

00000d10 <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
     d10:	b580      	push	{r7, lr}
     d12:	af00      	add	r7, sp, #0
	//enable the external interrupts here
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     d14:	200f      	movs	r0, #15
     d16:	2100      	movs	r1, #0
     d18:	4b01      	ldr	r3, [pc, #4]	; (d20 <ui_wakeup_enable+0x10>)
     d1a:	4798      	blx	r3
}
     d1c:	46bd      	mov	sp, r7
     d1e:	bd80      	pop	{r7, pc}
     d20:	000049a9 	.word	0x000049a9

00000d24 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     d24:	b580      	push	{r7, lr}
     d26:	af00      	add	r7, sp, #0
	//disable the external interrupts here
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     d28:	200f      	movs	r0, #15
     d2a:	2100      	movs	r1, #0
     d2c:	4b01      	ldr	r3, [pc, #4]	; (d34 <ui_wakeup_disable+0x10>)
     d2e:	4798      	blx	r3
}
     d30:	46bd      	mov	sp, r7
     d32:	bd80      	pop	{r7, pc}
     d34:	000049f1 	.word	0x000049f1

00000d38 <ui_wakeup>:

void ui_wakeup(void)
{
     d38:	b580      	push	{r7, lr}
     d3a:	af00      	add	r7, sp, #0
	//when we wake up we need to turn all of the pins low, instead of driving them high
	LED_On(LED_0_PIN);
     d3c:	203e      	movs	r0, #62	; 0x3e
     d3e:	2100      	movs	r1, #0
     d40:	4b01      	ldr	r3, [pc, #4]	; (d48 <ui_wakeup+0x10>)
     d42:	4798      	blx	r3
}
     d44:	46bd      	mov	sp, r7
     d46:	bd80      	pop	{r7, pc}
     d48:	00000c05 	.word	0x00000c05

00000d4c <ui_com_open>:

void ui_com_open(uint8_t port)
{
     d4c:	b580      	push	{r7, lr}
     d4e:	b082      	sub	sp, #8
     d50:	af00      	add	r7, sp, #0
     d52:	1c02      	adds	r2, r0, #0
     d54:	1dfb      	adds	r3, r7, #7
     d56:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)

00000d60 <ui_com_close>:


void ui_com_close(uint8_t port)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
     d66:	1c02      	adds	r2, r0, #0
     d68:	1dfb      	adds	r3, r7, #7
     d6a:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     d6c:	46bd      	mov	sp, r7
     d6e:	b002      	add	sp, #8
     d70:	bd80      	pop	{r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)

00000d74 <ui_com_rx_start>:


void ui_com_rx_start(void)
{
     d74:	b580      	push	{r7, lr}
     d76:	af00      	add	r7, sp, #0

}
     d78:	46bd      	mov	sp, r7
     d7a:	bd80      	pop	{r7, pc}

00000d7c <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	af00      	add	r7, sp, #0

}
     d80:	46bd      	mov	sp, r7
     d82:	bd80      	pop	{r7, pc}

00000d84 <ui_com_tx_start>:


void ui_com_tx_start(void)
{
     d84:	b580      	push	{r7, lr}
     d86:	af00      	add	r7, sp, #0

}
     d88:	46bd      	mov	sp, r7
     d8a:	bd80      	pop	{r7, pc}

00000d8c <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	af00      	add	r7, sp, #0

}
     d90:	46bd      	mov	sp, r7
     d92:	bd80      	pop	{r7, pc}

00000d94 <ui_com_overflow>:

}


void ui_com_overflow(void)
{
     d94:	b580      	push	{r7, lr}
     d96:	af00      	add	r7, sp, #0

}
     d98:	46bd      	mov	sp, r7
     d9a:	bd80      	pop	{r7, pc}

00000d9c <ui_start_read>:

void ui_start_read(void)
{
     d9c:	b580      	push	{r7, lr}
     d9e:	af00      	add	r7, sp, #0
}
     da0:	46bd      	mov	sp, r7
     da2:	bd80      	pop	{r7, pc}

00000da4 <ui_stop_read>:

void ui_stop_read(void)
{
     da4:	b580      	push	{r7, lr}
     da6:	af00      	add	r7, sp, #0
}
     da8:	46bd      	mov	sp, r7
     daa:	bd80      	pop	{r7, pc}

00000dac <ui_start_write>:

void ui_start_write(void)
{
     dac:	b580      	push	{r7, lr}
     dae:	af00      	add	r7, sp, #0
}
     db0:	46bd      	mov	sp, r7
     db2:	bd80      	pop	{r7, pc}

00000db4 <ui_stop_write>:

void ui_stop_write(void)
{
     db4:	b580      	push	{r7, lr}
     db6:	af00      	add	r7, sp, #0
}
     db8:	46bd      	mov	sp, r7
     dba:	bd80      	pop	{r7, pc}

00000dbc <ui_process>:

void ui_process(uint16_t framenumber)
{
     dbc:	b590      	push	{r4, r7, lr}
     dbe:	b0af      	sub	sp, #188	; 0xbc
     dc0:	af00      	add	r7, sp, #0
     dc2:	1c02      	adds	r2, r0, #0
     dc4:	1dbb      	adds	r3, r7, #6
     dc6:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	uint8_t value;
	uint8_t numberOfKeys = 0;
     dc8:	1c3b      	adds	r3, r7, #0
     dca:	33b5      	adds	r3, #181	; 0xb5
     dcc:	2200      	movs	r2, #0
     dce:	701a      	strb	r2, [r3, #0]
	uint8_t i= 0;
     dd0:	1c3b      	adds	r3, r7, #0
     dd2:	33b7      	adds	r3, #183	; 0xb7
     dd4:	2200      	movs	r2, #0
     dd6:	701a      	strb	r2, [r3, #0]
	uint8_t hidOnlyCount = 0;
     dd8:	1c3b      	adds	r3, r7, #0
     dda:	33b6      	adds	r3, #182	; 0xb6
     ddc:	2200      	movs	r2, #0
     dde:	701a      	strb	r2, [r3, #0]
	uint8_t keyValue = 0;
     de0:	1c3b      	adds	r3, r7, #0
     de2:	33b4      	adds	r3, #180	; 0xb4
     de4:	2200      	movs	r2, #0
     de6:	701a      	strb	r2, [r3, #0]

	//use the cpt_sof to handle the debounce
	cpt_sof++;
     de8:	4b83      	ldr	r3, [pc, #524]	; (ff8 <ui_process+0x23c>)
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	3301      	adds	r3, #1
     dee:	b2da      	uxtb	r2, r3
     df0:	4b81      	ldr	r3, [pc, #516]	; (ff8 <ui_process+0x23c>)
     df2:	701a      	strb	r2, [r3, #0]
	if(cpt_sof < 15)
     df4:	4b80      	ldr	r3, [pc, #512]	; (ff8 <ui_process+0x23c>)
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	2b0e      	cmp	r3, #14
     dfa:	d800      	bhi.n	dfe <ui_process+0x42>
     dfc:	e0f8      	b.n	ff0 <ui_process+0x234>
	{
		return;
	}
	cpt_sof = 0;
     dfe:	4b7e      	ldr	r3, [pc, #504]	; (ff8 <ui_process+0x23c>)
     e00:	2200      	movs	r2, #0
     e02:	701a      	strb	r2, [r3, #0]

	//array of pointers to an array
	//Yes this Way more that is needed
	KEY_OBJ *keyArr[NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS];
	//clear out all of the in the array
	memset(keyArr, 0, (sizeof(KEY_OBJ*)*NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS));
     e04:	1c3b      	adds	r3, r7, #0
     e06:	330c      	adds	r3, #12
     e08:	1c18      	adds	r0, r3, #0
     e0a:	2100      	movs	r1, #0
     e0c:	22a8      	movs	r2, #168	; 0xa8
     e0e:	4b7b      	ldr	r3, [pc, #492]	; (ffc <ui_process+0x240>)
     e10:	4798      	blx	r3

	if ((framenumber % 1000) == 0) {
     e12:	1dbb      	adds	r3, r7, #6
     e14:	881a      	ldrh	r2, [r3, #0]
     e16:	4b7a      	ldr	r3, [pc, #488]	; (1000 <ui_process+0x244>)
     e18:	1c10      	adds	r0, r2, #0
     e1a:	22fa      	movs	r2, #250	; 0xfa
     e1c:	0091      	lsls	r1, r2, #2
     e1e:	4798      	blx	r3
     e20:	1c0b      	adds	r3, r1, #0
     e22:	b29b      	uxth	r3, r3
     e24:	2b00      	cmp	r3, #0
     e26:	d103      	bne.n	e30 <ui_process+0x74>
		LED_On(LED_0_PIN);
     e28:	203e      	movs	r0, #62	; 0x3e
     e2a:	2100      	movs	r1, #0
     e2c:	4b75      	ldr	r3, [pc, #468]	; (1004 <ui_process+0x248>)
     e2e:	4798      	blx	r3
	}
	
	
	
	if ((framenumber % 1000) == 500) {
     e30:	1dbb      	adds	r3, r7, #6
     e32:	881a      	ldrh	r2, [r3, #0]
     e34:	4b72      	ldr	r3, [pc, #456]	; (1000 <ui_process+0x244>)
     e36:	1c10      	adds	r0, r2, #0
     e38:	22fa      	movs	r2, #250	; 0xfa
     e3a:	0091      	lsls	r1, r2, #2
     e3c:	4798      	blx	r3
     e3e:	1c0b      	adds	r3, r1, #0
     e40:	b29a      	uxth	r2, r3
     e42:	23fa      	movs	r3, #250	; 0xfa
     e44:	005b      	lsls	r3, r3, #1
     e46:	429a      	cmp	r2, r3
     e48:	d103      	bne.n	e52 <ui_process+0x96>
		LED_Off(LED_0_PIN);
     e4a:	203e      	movs	r0, #62	; 0x3e
     e4c:	2101      	movs	r1, #1
     e4e:	4b6d      	ldr	r3, [pc, #436]	; (1004 <ui_process+0x248>)
     e50:	4798      	blx	r3
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     e52:	1c3b      	adds	r3, r7, #0
     e54:	33b7      	adds	r3, #183	; 0xb7
     e56:	2200      	movs	r2, #0
     e58:	701a      	strb	r2, [r3, #0]
     e5a:	e00e      	b.n	e7a <ui_process+0xbe>
	{
		keyArr[i] = 0;
     e5c:	1c3b      	adds	r3, r7, #0
     e5e:	33b7      	adds	r3, #183	; 0xb7
     e60:	781a      	ldrb	r2, [r3, #0]
     e62:	1c3b      	adds	r3, r7, #0
     e64:	330c      	adds	r3, #12
     e66:	0092      	lsls	r2, r2, #2
     e68:	2100      	movs	r1, #0
     e6a:	50d1      	str	r1, [r2, r3]
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     e6c:	1c3b      	adds	r3, r7, #0
     e6e:	33b7      	adds	r3, #183	; 0xb7
     e70:	781a      	ldrb	r2, [r3, #0]
     e72:	1c3b      	adds	r3, r7, #0
     e74:	33b7      	adds	r3, #183	; 0xb7
     e76:	3201      	adds	r2, #1
     e78:	701a      	strb	r2, [r3, #0]
     e7a:	1c3b      	adds	r3, r7, #0
     e7c:	33b7      	adds	r3, #183	; 0xb7
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2b29      	cmp	r3, #41	; 0x29
     e82:	d9eb      	bls.n	e5c <ui_process+0xa0>
	{
		keyArr[i] = 0;
	}	
	checkKeys();
     e84:	4b60      	ldr	r3, [pc, #384]	; (1008 <ui_process+0x24c>)
     e86:	4798      	blx	r3
	numberOfKeys = getJustPressedKeys(keyArr);
     e88:	1c3c      	adds	r4, r7, #0
     e8a:	34b5      	adds	r4, #181	; 0xb5
     e8c:	1c3b      	adds	r3, r7, #0
     e8e:	330c      	adds	r3, #12
     e90:	1c18      	adds	r0, r3, #0
     e92:	4b5e      	ldr	r3, [pc, #376]	; (100c <ui_process+0x250>)
     e94:	4798      	blx	r3
     e96:	1c03      	adds	r3, r0, #0
     e98:	7023      	strb	r3, [r4, #0]
	
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     e9a:	1c3b      	adds	r3, r7, #0
     e9c:	33b7      	adds	r3, #183	; 0xb7
     e9e:	2200      	movs	r2, #0
     ea0:	701a      	strb	r2, [r3, #0]
     ea2:	e046      	b.n	f32 <ui_process+0x176>
	{
		if(keyArr[i]->hidKey != 0 && hidOnlyCount < 6)
     ea4:	1c3b      	adds	r3, r7, #0
     ea6:	33b7      	adds	r3, #183	; 0xb7
     ea8:	781a      	ldrb	r2, [r3, #0]
     eaa:	1c3b      	adds	r3, r7, #0
     eac:	330c      	adds	r3, #12
     eae:	0092      	lsls	r2, r2, #2
     eb0:	58d3      	ldr	r3, [r2, r3]
     eb2:	7b1b      	ldrb	r3, [r3, #12]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d020      	beq.n	efa <ui_process+0x13e>
     eb8:	1c3b      	adds	r3, r7, #0
     eba:	33b6      	adds	r3, #182	; 0xb6
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	2b05      	cmp	r3, #5
     ec0:	d81b      	bhi.n	efa <ui_process+0x13e>
		{
			keyValue = keyArr[i]->hidKey;
     ec2:	1c3b      	adds	r3, r7, #0
     ec4:	33b7      	adds	r3, #183	; 0xb7
     ec6:	781a      	ldrb	r2, [r3, #0]
     ec8:	1c3b      	adds	r3, r7, #0
     eca:	330c      	adds	r3, #12
     ecc:	0092      	lsls	r2, r2, #2
     ece:	58d2      	ldr	r2, [r2, r3]
     ed0:	1c3b      	adds	r3, r7, #0
     ed2:	33b4      	adds	r3, #180	; 0xb4
     ed4:	7b12      	ldrb	r2, [r2, #12]
     ed6:	701a      	strb	r2, [r3, #0]
			udi_hid_kbd_down(keyValue);
     ed8:	1c3b      	adds	r3, r7, #0
     eda:	33b4      	adds	r3, #180	; 0xb4
     edc:	781b      	ldrb	r3, [r3, #0]
     ede:	1c18      	adds	r0, r3, #0
     ee0:	4b4b      	ldr	r3, [pc, #300]	; (1010 <ui_process+0x254>)
     ee2:	4798      	blx	r3
			hidOnlyCount++;
     ee4:	1c3b      	adds	r3, r7, #0
     ee6:	33b6      	adds	r3, #182	; 0xb6
     ee8:	781a      	ldrb	r2, [r3, #0]
     eea:	1c3b      	adds	r3, r7, #0
     eec:	33b6      	adds	r3, #182	; 0xb6
     eee:	3201      	adds	r2, #1
     ef0:	701a      	strb	r2, [r3, #0]
			
			LED_On(LED_0_PIN);
     ef2:	203e      	movs	r0, #62	; 0x3e
     ef4:	2100      	movs	r1, #0
     ef6:	4b43      	ldr	r3, [pc, #268]	; (1004 <ui_process+0x248>)
     ef8:	4798      	blx	r3
		}
		//check the modifier keys
		if(keyArr[i]->hidKeyMod != HID_MODIFIER_NONE)
     efa:	1c3b      	adds	r3, r7, #0
     efc:	33b7      	adds	r3, #183	; 0xb7
     efe:	781a      	ldrb	r2, [r3, #0]
     f00:	1c3b      	adds	r3, r7, #0
     f02:	330c      	adds	r3, #12
     f04:	0092      	lsls	r2, r2, #2
     f06:	58d3      	ldr	r3, [r2, r3]
     f08:	7b5b      	ldrb	r3, [r3, #13]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d00a      	beq.n	f24 <ui_process+0x168>
		{
			udi_hid_kbd_modifier_down(keyArr[i]->hidKeyMod);
     f0e:	1c3b      	adds	r3, r7, #0
     f10:	33b7      	adds	r3, #183	; 0xb7
     f12:	781a      	ldrb	r2, [r3, #0]
     f14:	1c3b      	adds	r3, r7, #0
     f16:	330c      	adds	r3, #12
     f18:	0092      	lsls	r2, r2, #2
     f1a:	58d3      	ldr	r3, [r2, r3]
     f1c:	7b5b      	ldrb	r3, [r3, #13]
     f1e:	1c18      	adds	r0, r3, #0
     f20:	4b3c      	ldr	r3, [pc, #240]	; (1014 <ui_process+0x258>)
     f22:	4798      	blx	r3
	}	
	checkKeys();
	numberOfKeys = getJustPressedKeys(keyArr);
	
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     f24:	1c3b      	adds	r3, r7, #0
     f26:	33b7      	adds	r3, #183	; 0xb7
     f28:	781a      	ldrb	r2, [r3, #0]
     f2a:	1c3b      	adds	r3, r7, #0
     f2c:	33b7      	adds	r3, #183	; 0xb7
     f2e:	3201      	adds	r2, #1
     f30:	701a      	strb	r2, [r3, #0]
     f32:	1c3a      	adds	r2, r7, #0
     f34:	32b7      	adds	r2, #183	; 0xb7
     f36:	1c3b      	adds	r3, r7, #0
     f38:	33b5      	adds	r3, #181	; 0xb5
     f3a:	7812      	ldrb	r2, [r2, #0]
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	429a      	cmp	r2, r3
     f40:	d3b0      	bcc.n	ea4 <ui_process+0xe8>
		{
			udi_hid_kbd_modifier_down(keyArr[i]->hidKeyMod);
		}
	}
	
	numberOfKeys = getJustReleaseKeys(keyArr);
     f42:	1c3c      	adds	r4, r7, #0
     f44:	34b5      	adds	r4, #181	; 0xb5
     f46:	1c3b      	adds	r3, r7, #0
     f48:	330c      	adds	r3, #12
     f4a:	1c18      	adds	r0, r3, #0
     f4c:	4b32      	ldr	r3, [pc, #200]	; (1018 <ui_process+0x25c>)
     f4e:	4798      	blx	r3
     f50:	1c03      	adds	r3, r0, #0
     f52:	7023      	strb	r3, [r4, #0]
		
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     f54:	1c3b      	adds	r3, r7, #0
     f56:	33b7      	adds	r3, #183	; 0xb7
     f58:	2200      	movs	r2, #0
     f5a:	701a      	strb	r2, [r3, #0]
     f5c:	e040      	b.n	fe0 <ui_process+0x224>
	{
		if(keyArr[i]->hidKey != 0 && hidOnlyCount < 6)
     f5e:	1c3b      	adds	r3, r7, #0
     f60:	33b7      	adds	r3, #183	; 0xb7
     f62:	781a      	ldrb	r2, [r3, #0]
     f64:	1c3b      	adds	r3, r7, #0
     f66:	330c      	adds	r3, #12
     f68:	0092      	lsls	r2, r2, #2
     f6a:	58d3      	ldr	r3, [r2, r3]
     f6c:	7b1b      	ldrb	r3, [r3, #12]
     f6e:	2b00      	cmp	r3, #0
     f70:	d01a      	beq.n	fa8 <ui_process+0x1ec>
     f72:	1c3b      	adds	r3, r7, #0
     f74:	33b6      	adds	r3, #182	; 0xb6
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	2b05      	cmp	r3, #5
     f7a:	d815      	bhi.n	fa8 <ui_process+0x1ec>
		{
			udi_hid_kbd_up(keyArr[i]->hidKey);
     f7c:	1c3b      	adds	r3, r7, #0
     f7e:	33b7      	adds	r3, #183	; 0xb7
     f80:	781a      	ldrb	r2, [r3, #0]
     f82:	1c3b      	adds	r3, r7, #0
     f84:	330c      	adds	r3, #12
     f86:	0092      	lsls	r2, r2, #2
     f88:	58d3      	ldr	r3, [r2, r3]
     f8a:	7b1b      	ldrb	r3, [r3, #12]
     f8c:	1c18      	adds	r0, r3, #0
     f8e:	4b23      	ldr	r3, [pc, #140]	; (101c <ui_process+0x260>)
     f90:	4798      	blx	r3
			hidOnlyCount++;
     f92:	1c3b      	adds	r3, r7, #0
     f94:	33b6      	adds	r3, #182	; 0xb6
     f96:	781a      	ldrb	r2, [r3, #0]
     f98:	1c3b      	adds	r3, r7, #0
     f9a:	33b6      	adds	r3, #182	; 0xb6
     f9c:	3201      	adds	r2, #1
     f9e:	701a      	strb	r2, [r3, #0]
			
			LED_Off(LED_0_PIN);
     fa0:	203e      	movs	r0, #62	; 0x3e
     fa2:	2101      	movs	r1, #1
     fa4:	4b17      	ldr	r3, [pc, #92]	; (1004 <ui_process+0x248>)
     fa6:	4798      	blx	r3
		}
		//check the modifier keys
		if(keyArr[i]->hidKeyMod != HID_MODIFIER_NONE)
     fa8:	1c3b      	adds	r3, r7, #0
     faa:	33b7      	adds	r3, #183	; 0xb7
     fac:	781a      	ldrb	r2, [r3, #0]
     fae:	1c3b      	adds	r3, r7, #0
     fb0:	330c      	adds	r3, #12
     fb2:	0092      	lsls	r2, r2, #2
     fb4:	58d3      	ldr	r3, [r2, r3]
     fb6:	7b5b      	ldrb	r3, [r3, #13]
     fb8:	2b00      	cmp	r3, #0
     fba:	d00a      	beq.n	fd2 <ui_process+0x216>
		{
			udi_hid_kbd_modifier_up(keyArr[i]->hidKeyMod);
     fbc:	1c3b      	adds	r3, r7, #0
     fbe:	33b7      	adds	r3, #183	; 0xb7
     fc0:	781a      	ldrb	r2, [r3, #0]
     fc2:	1c3b      	adds	r3, r7, #0
     fc4:	330c      	adds	r3, #12
     fc6:	0092      	lsls	r2, r2, #2
     fc8:	58d3      	ldr	r3, [r2, r3]
     fca:	7b5b      	ldrb	r3, [r3, #13]
     fcc:	1c18      	adds	r0, r3, #0
     fce:	4b14      	ldr	r3, [pc, #80]	; (1020 <ui_process+0x264>)
     fd0:	4798      	blx	r3
	}
	
	numberOfKeys = getJustReleaseKeys(keyArr);
		
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     fd2:	1c3b      	adds	r3, r7, #0
     fd4:	33b7      	adds	r3, #183	; 0xb7
     fd6:	781a      	ldrb	r2, [r3, #0]
     fd8:	1c3b      	adds	r3, r7, #0
     fda:	33b7      	adds	r3, #183	; 0xb7
     fdc:	3201      	adds	r2, #1
     fde:	701a      	strb	r2, [r3, #0]
     fe0:	1c3a      	adds	r2, r7, #0
     fe2:	32b7      	adds	r2, #183	; 0xb7
     fe4:	1c3b      	adds	r3, r7, #0
     fe6:	33b5      	adds	r3, #181	; 0xb5
     fe8:	7812      	ldrb	r2, [r2, #0]
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	429a      	cmp	r2, r3
     fee:	d3b6      	bcc.n	f5e <ui_process+0x1a2>
				//sequence_running = false;
				//button_function  = 1;
			//}
		//}
	//}
}
     ff0:	46bd      	mov	sp, r7
     ff2:	b02f      	add	sp, #188	; 0xbc
     ff4:	bd90      	pop	{r4, r7, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	200009a4 	.word	0x200009a4
     ffc:	0000b337 	.word	0x0000b337
    1000:	0000b17d 	.word	0x0000b17d
    1004:	00000c05 	.word	0x00000c05
    1008:	00000761 	.word	0x00000761
    100c:	00000979 	.word	0x00000979
    1010:	0000283d 	.word	0x0000283d
    1014:	00002709 	.word	0x00002709
    1018:	00000a7d 	.word	0x00000a7d
    101c:	0000275d 	.word	0x0000275d
    1020:	000026b1 	.word	0x000026b1

00001024 <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
    1024:	b580      	push	{r7, lr}
    1026:	b082      	sub	sp, #8
    1028:	af00      	add	r7, sp, #0
    102a:	1c02      	adds	r2, r0, #0
    102c:	1dfb      	adds	r3, r7, #7
    102e:	701a      	strb	r2, [r3, #0]
	UNUSED(value);
}
    1030:	46bd      	mov	sp, r7
    1032:	b002      	add	sp, #8
    1034:	bd80      	pop	{r7, pc}
    1036:	46c0      	nop			; (mov r8, r8)

00001038 <virtual_test_unit_ready>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_test_unit_ready(void)
{
    1038:	b580      	push	{r7, lr}
    103a:	af00      	add	r7, sp, #0
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
    103c:	4b04      	ldr	r3, [pc, #16]	; (1050 <virtual_test_unit_ready+0x18>)
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	2b00      	cmp	r3, #0
    1042:	d001      	beq.n	1048 <virtual_test_unit_ready+0x10>
    1044:	2302      	movs	r3, #2
    1046:	e000      	b.n	104a <virtual_test_unit_ready+0x12>
    1048:	2300      	movs	r3, #0
}
    104a:	1c18      	adds	r0, r3, #0
    104c:	46bd      	mov	sp, r7
    104e:	bd80      	pop	{r7, pc}
    1050:	200069a8 	.word	0x200069a8

00001054 <virtual_read_capacity>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_read_capacity(uint32_t *uint32_t_nb_sector)
{
    1054:	b580      	push	{r7, lr}
    1056:	b082      	sub	sp, #8
    1058:	af00      	add	r7, sp, #0
    105a:	6078      	str	r0, [r7, #4]
	if (b_vmem_unloaded) {
    105c:	4b06      	ldr	r3, [pc, #24]	; (1078 <virtual_read_capacity+0x24>)
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	2b00      	cmp	r3, #0
    1062:	d001      	beq.n	1068 <virtual_read_capacity+0x14>
		return CTRL_NO_PRESENT;
    1064:	2302      	movs	r3, #2
    1066:	e003      	b.n	1070 <virtual_read_capacity+0x1c>
	}

	if (VMEM_NB_SECTOR<8) {
		*uint32_t_nb_sector = 8-1;
	} else {
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	222f      	movs	r2, #47	; 0x2f
    106c:	601a      	str	r2, [r3, #0]
	}
	return CTRL_GOOD;
    106e:	2300      	movs	r3, #0
}
    1070:	1c18      	adds	r0, r3, #0
    1072:	46bd      	mov	sp, r7
    1074:	b002      	add	sp, #8
    1076:	bd80      	pop	{r7, pc}
    1078:	200069a8 	.word	0x200069a8

0000107c <virtual_wr_protect>:
//! This function returns the write-protected mode
//!
//! @return true if the memory is protected
//!
bool virtual_wr_protect(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0
	return false;
    1080:	2300      	movs	r3, #0
}
    1082:	1c18      	adds	r0, r3, #0
    1084:	46bd      	mov	sp, r7
    1086:	bd80      	pop	{r7, pc}

00001088 <virtual_removal>:
//! This function informs about the memory type
//!
//! @return true if the memory is removable
//!
bool virtual_removal(void)
{
    1088:	b580      	push	{r7, lr}
    108a:	af00      	add	r7, sp, #0
	return true;
    108c:	2301      	movs	r3, #1
}
    108e:	1c18      	adds	r0, r3, #0
    1090:	46bd      	mov	sp, r7
    1092:	bd80      	pop	{r7, pc}

00001094 <virtual_usb_trans>:
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
static Ctrl_status virtual_usb_trans(uint32_t addr, uint16_t nb_sector,
		bool b_read)
{
    1094:	b590      	push	{r4, r7, lr}
    1096:	b085      	sub	sp, #20
    1098:	af00      	add	r7, sp, #0
    109a:	6078      	str	r0, [r7, #4]
    109c:	1cbb      	adds	r3, r7, #2
    109e:	8019      	strh	r1, [r3, #0]
    10a0:	1c7b      	adds	r3, r7, #1
    10a2:	701a      	strb	r2, [r3, #0]
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2b30      	cmp	r3, #48	; 0x30
    10a8:	d805      	bhi.n	10b6 <virtual_usb_trans+0x22>
    10aa:	1cbb      	adds	r3, r7, #2
    10ac:	881a      	ldrh	r2, [r3, #0]
    10ae:	687b      	ldr	r3, [r7, #4]
    10b0:	18d3      	adds	r3, r2, r3
    10b2:	2b30      	cmp	r3, #48	; 0x30
    10b4:	d901      	bls.n	10ba <virtual_usb_trans+0x26>
		return CTRL_FAIL;
    10b6:	2301      	movs	r3, #1
    10b8:	e036      	b.n	1128 <virtual_usb_trans+0x94>
	}

	while (nb_sector) {
    10ba:	e030      	b.n	111e <virtual_usb_trans+0x8a>
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
    10bc:	1cbb      	adds	r3, r7, #2
    10be:	881b      	ldrh	r3, [r3, #0]
    10c0:	2b7f      	cmp	r3, #127	; 0x7f
    10c2:	d803      	bhi.n	10cc <virtual_usb_trans+0x38>
    10c4:	1cbb      	adds	r3, r7, #2
    10c6:	881b      	ldrh	r3, [r3, #0]
    10c8:	b2db      	uxtb	r3, r3
    10ca:	e000      	b.n	10ce <virtual_usb_trans+0x3a>
    10cc:	2380      	movs	r3, #128	; 0x80
    10ce:	1c3a      	adds	r2, r7, #0
    10d0:	320f      	adds	r2, #15
    10d2:	7013      	strb	r3, [r2, #0]
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	1c5a      	adds	r2, r3, #1
    10d8:	607a      	str	r2, [r7, #4]
    10da:	025a      	lsls	r2, r3, #9
    10dc:	4b14      	ldr	r3, [pc, #80]	; (1130 <virtual_usb_trans+0x9c>)
    10de:	18d3      	adds	r3, r2, r3
    10e0:	60bb      	str	r3, [r7, #8]
		if (!udi_msc_trans_block( b_read, ptr_cram,
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
    10e2:	1c3b      	adds	r3, r7, #0
    10e4:	330f      	adds	r3, #15
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	025b      	lsls	r3, r3, #9

	while (nb_sector) {
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
		if (!udi_msc_trans_block( b_read, ptr_cram,
    10ea:	1c7a      	adds	r2, r7, #1
    10ec:	7811      	ldrb	r1, [r2, #0]
    10ee:	68ba      	ldr	r2, [r7, #8]
    10f0:	1c08      	adds	r0, r1, #0
    10f2:	1c11      	adds	r1, r2, #0
    10f4:	1c1a      	adds	r2, r3, #0
    10f6:	2300      	movs	r3, #0
    10f8:	4c0e      	ldr	r4, [pc, #56]	; (1134 <virtual_usb_trans+0xa0>)
    10fa:	47a0      	blx	r4
    10fc:	1c03      	adds	r3, r0, #0
    10fe:	2201      	movs	r2, #1
    1100:	4053      	eors	r3, r2
    1102:	b2db      	uxtb	r3, r3
    1104:	2b00      	cmp	r3, #0
    1106:	d001      	beq.n	110c <virtual_usb_trans+0x78>
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
			return CTRL_FAIL; // transfer aborted
    1108:	2301      	movs	r3, #1
    110a:	e00d      	b.n	1128 <virtual_usb_trans+0x94>
		}
		nb_sector -= nb_sector_trans;
    110c:	1c3b      	adds	r3, r7, #0
    110e:	330f      	adds	r3, #15
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	b29a      	uxth	r2, r3
    1114:	1cbb      	adds	r3, r7, #2
    1116:	1cb9      	adds	r1, r7, #2
    1118:	8809      	ldrh	r1, [r1, #0]
    111a:	1a8a      	subs	r2, r1, r2
    111c:	801a      	strh	r2, [r3, #0]

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
		return CTRL_FAIL;
	}

	while (nb_sector) {
    111e:	1cbb      	adds	r3, r7, #2
    1120:	881b      	ldrh	r3, [r3, #0]
    1122:	2b00      	cmp	r3, #0
    1124:	d1ca      	bne.n	10bc <virtual_usb_trans+0x28>
		}
		nb_sector -= nb_sector_trans;
	}
#endif

	return CTRL_GOOD;
    1126:	2300      	movs	r3, #0
}
    1128:	1c18      	adds	r0, r3, #0
    112a:	46bd      	mov	sp, r7
    112c:	b005      	add	sp, #20
    112e:	bd90      	pop	{r4, r7, pc}
    1130:	200009a8 	.word	0x200009a8
    1134:	00003915 	.word	0x00003915

00001138 <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
    1138:	b580      	push	{r7, lr}
    113a:	b082      	sub	sp, #8
    113c:	af00      	add	r7, sp, #0
    113e:	6078      	str	r0, [r7, #4]
    1140:	1c0a      	adds	r2, r1, #0
    1142:	1cbb      	adds	r3, r7, #2
    1144:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, true);
    1146:	687a      	ldr	r2, [r7, #4]
    1148:	1cbb      	adds	r3, r7, #2
    114a:	881b      	ldrh	r3, [r3, #0]
    114c:	1c10      	adds	r0, r2, #0
    114e:	1c19      	adds	r1, r3, #0
    1150:	2201      	movs	r2, #1
    1152:	4b03      	ldr	r3, [pc, #12]	; (1160 <virtual_usb_read_10+0x28>)
    1154:	4798      	blx	r3
    1156:	1c03      	adds	r3, r0, #0
}
    1158:	1c18      	adds	r0, r3, #0
    115a:	46bd      	mov	sp, r7
    115c:	b002      	add	sp, #8
    115e:	bd80      	pop	{r7, pc}
    1160:	00001095 	.word	0x00001095

00001164 <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
    1164:	b580      	push	{r7, lr}
    1166:	b082      	sub	sp, #8
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
    116c:	1c0a      	adds	r2, r1, #0
    116e:	1cbb      	adds	r3, r7, #2
    1170:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, false);
    1172:	687a      	ldr	r2, [r7, #4]
    1174:	1cbb      	adds	r3, r7, #2
    1176:	881b      	ldrh	r3, [r3, #0]
    1178:	1c10      	adds	r0, r2, #0
    117a:	1c19      	adds	r1, r3, #0
    117c:	2200      	movs	r2, #0
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <virtual_usb_write_10+0x28>)
    1180:	4798      	blx	r3
    1182:	1c03      	adds	r3, r0, #0
}
    1184:	1c18      	adds	r0, r3, #0
    1186:	46bd      	mov	sp, r7
    1188:	b002      	add	sp, #8
    118a:	bd80      	pop	{r7, pc}
    118c:	00001095 	.word	0x00001095

00001190 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
    1190:	b580      	push	{r7, lr}
    1192:	af00      	add	r7, sp, #0

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
    1194:	2301      	movs	r3, #1
#endif
}
    1196:	1c18      	adds	r0, r3, #0
    1198:	46bd      	mov	sp, r7
    119a:	bd80      	pop	{r7, pc}

0000119c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    119c:	b580      	push	{r7, lr}
    119e:	b084      	sub	sp, #16
    11a0:	af00      	add	r7, sp, #0
    11a2:	1c02      	adds	r2, r0, #0
    11a4:	1dfb      	adds	r3, r7, #7
    11a6:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    11a8:	1dfb      	adds	r3, r7, #7
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	2b00      	cmp	r3, #0
    11ae:	d107      	bne.n	11c0 <mem_test_unit_ready+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    11b0:	1dfb      	adds	r3, r7, #7
    11b2:	781a      	ldrb	r2, [r3, #0]
    11b4:	4b08      	ldr	r3, [pc, #32]	; (11d8 <mem_test_unit_ready+0x3c>)
    11b6:	0152      	lsls	r2, r2, #5
    11b8:	58d3      	ldr	r3, [r2, r3]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    11ba:	4798      	blx	r3
    11bc:	1c03      	adds	r3, r0, #0
    11be:	e000      	b.n	11c2 <mem_test_unit_ready+0x26>
    11c0:	2301      	movs	r3, #1
    11c2:	1c3a      	adds	r2, r7, #0
    11c4:	320f      	adds	r2, #15
    11c6:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    11c8:	1c3b      	adds	r3, r7, #0
    11ca:	330f      	adds	r3, #15
    11cc:	781b      	ldrb	r3, [r3, #0]
}
    11ce:	1c18      	adds	r0, r3, #0
    11d0:	46bd      	mov	sp, r7
    11d2:	b004      	add	sp, #16
    11d4:	bd80      	pop	{r7, pc}
    11d6:	46c0      	nop			; (mov r8, r8)
    11d8:	0000b364 	.word	0x0000b364

000011dc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    11dc:	b580      	push	{r7, lr}
    11de:	b084      	sub	sp, #16
    11e0:	af00      	add	r7, sp, #0
    11e2:	1c02      	adds	r2, r0, #0
    11e4:	6039      	str	r1, [r7, #0]
    11e6:	1dfb      	adds	r3, r7, #7
    11e8:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    11ea:	1dfb      	adds	r3, r7, #7
    11ec:	781b      	ldrb	r3, [r3, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d10a      	bne.n	1208 <mem_read_capacity+0x2c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    11f2:	1dfb      	adds	r3, r7, #7
    11f4:	781b      	ldrb	r3, [r3, #0]
    11f6:	4a0a      	ldr	r2, [pc, #40]	; (1220 <mem_read_capacity+0x44>)
    11f8:	015b      	lsls	r3, r3, #5
    11fa:	18d3      	adds	r3, r2, r3
    11fc:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    11fe:	683a      	ldr	r2, [r7, #0]
    1200:	1c10      	adds	r0, r2, #0
    1202:	4798      	blx	r3
    1204:	1c03      	adds	r3, r0, #0
    1206:	e000      	b.n	120a <mem_read_capacity+0x2e>
    1208:	2301      	movs	r3, #1
    120a:	1c3a      	adds	r2, r7, #0
    120c:	320f      	adds	r2, #15
    120e:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    1210:	1c3b      	adds	r3, r7, #0
    1212:	330f      	adds	r3, #15
    1214:	781b      	ldrb	r3, [r3, #0]
}
    1216:	1c18      	adds	r0, r3, #0
    1218:	46bd      	mov	sp, r7
    121a:	b004      	add	sp, #16
    121c:	bd80      	pop	{r7, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	0000b364 	.word	0x0000b364

00001224 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    1224:	b580      	push	{r7, lr}
    1226:	b084      	sub	sp, #16
    1228:	af00      	add	r7, sp, #0
    122a:	1c0a      	adds	r2, r1, #0
    122c:	1dfb      	adds	r3, r7, #7
    122e:	1c01      	adds	r1, r0, #0
    1230:	7019      	strb	r1, [r3, #0]
    1232:	1dbb      	adds	r3, r7, #6
    1234:	701a      	strb	r2, [r3, #0]

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    1236:	1dfb      	adds	r3, r7, #7
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	2b00      	cmp	r3, #0
    123c:	d125      	bne.n	128a <mem_unload+0x66>
  if (!Ctrl_access_lock()) return false;

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
    123e:	1dfb      	adds	r3, r7, #7
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	4a17      	ldr	r2, [pc, #92]	; (12a0 <mem_unload+0x7c>)
    1244:	015b      	lsls	r3, r3, #5
    1246:	18d3      	adds	r3, r2, r3
    1248:	3308      	adds	r3, #8
    124a:	681b      	ldr	r3, [r3, #0]
                  lun_desc[lun].unload(unload) : !unload) :
    124c:	2b00      	cmp	r3, #0
    124e:	d00f      	beq.n	1270 <mem_unload+0x4c>
    1250:	1dfb      	adds	r3, r7, #7
    1252:	781b      	ldrb	r3, [r3, #0]
    1254:	4a12      	ldr	r2, [pc, #72]	; (12a0 <mem_unload+0x7c>)
    1256:	015b      	lsls	r3, r3, #5
    1258:	18d3      	adds	r3, r2, r3
    125a:	3308      	adds	r3, #8
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	1dba      	adds	r2, r7, #6
    1260:	7812      	ldrb	r2, [r2, #0]
    1262:	1c10      	adds	r0, r2, #0
    1264:	4798      	blx	r3
    1266:	1c03      	adds	r3, r0, #0
    1268:	1e5a      	subs	r2, r3, #1
    126a:	4193      	sbcs	r3, r2
    126c:	b2db      	uxtb	r3, r3
    126e:	e00d      	b.n	128c <mem_unload+0x68>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    1270:	1dbb      	adds	r3, r7, #6
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	1e5a      	subs	r2, r3, #1
    1276:	4193      	sbcs	r3, r2
    1278:	b2db      	uxtb	r3, r3
    127a:	2201      	movs	r2, #1
    127c:	4053      	eors	r3, r2
    127e:	b2db      	uxtb	r3, r3

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    1280:	1c1a      	adds	r2, r3, #0
    1282:	2301      	movs	r3, #1
    1284:	4013      	ands	r3, r2
    1286:	b2db      	uxtb	r3, r3
    1288:	e000      	b.n	128c <mem_unload+0x68>
    128a:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return false;

  unloaded =
    128c:	1c3a      	adds	r2, r7, #0
    128e:	320f      	adds	r2, #15
    1290:	7013      	strb	r3, [r2, #0]
              false; /* No mem, unload/load fail */
#endif

  Ctrl_access_unlock();

  return unloaded;
    1292:	1c3b      	adds	r3, r7, #0
    1294:	330f      	adds	r3, #15
    1296:	781b      	ldrb	r3, [r3, #0]
}
    1298:	1c18      	adds	r0, r3, #0
    129a:	46bd      	mov	sp, r7
    129c:	b004      	add	sp, #16
    129e:	bd80      	pop	{r7, pc}
    12a0:	0000b364 	.word	0x0000b364

000012a4 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    12a4:	b580      	push	{r7, lr}
    12a6:	b084      	sub	sp, #16
    12a8:	af00      	add	r7, sp, #0
    12aa:	1c02      	adds	r2, r0, #0
    12ac:	1dfb      	adds	r3, r7, #7
    12ae:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    12b0:	1dfb      	adds	r3, r7, #7
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d10a      	bne.n	12ce <mem_wr_protect+0x2a>
    12b8:	1dfb      	adds	r3, r7, #7
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	4a0a      	ldr	r2, [pc, #40]	; (12e8 <mem_wr_protect+0x44>)
    12be:	015b      	lsls	r3, r3, #5
    12c0:	18d3      	adds	r3, r2, r3
    12c2:	3308      	adds	r3, #8
    12c4:	685b      	ldr	r3, [r3, #4]
    12c6:	4798      	blx	r3
    12c8:	1c03      	adds	r3, r0, #0
    12ca:	2b00      	cmp	r3, #0
    12cc:	d001      	beq.n	12d2 <mem_wr_protect+0x2e>
    12ce:	2301      	movs	r3, #1
    12d0:	e000      	b.n	12d4 <mem_wr_protect+0x30>
    12d2:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
    12d4:	1c3a      	adds	r2, r7, #0
    12d6:	320f      	adds	r2, #15
    12d8:	7013      	strb	r3, [r2, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    12da:	1c3b      	adds	r3, r7, #0
    12dc:	330f      	adds	r3, #15
    12de:	781b      	ldrb	r3, [r3, #0]
}
    12e0:	1c18      	adds	r0, r3, #0
    12e2:	46bd      	mov	sp, r7
    12e4:	b004      	add	sp, #16
    12e6:	bd80      	pop	{r7, pc}
    12e8:	0000b364 	.word	0x0000b364

000012ec <mem_removal>:


bool mem_removal(U8 lun)
{
    12ec:	b580      	push	{r7, lr}
    12ee:	b084      	sub	sp, #16
    12f0:	af00      	add	r7, sp, #0
    12f2:	1c02      	adds	r2, r0, #0
    12f4:	1dfb      	adds	r3, r7, #7
    12f6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    12f8:	1dfb      	adds	r3, r7, #7
    12fa:	781b      	ldrb	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d10a      	bne.n	1316 <mem_removal+0x2a>
    1300:	1dfb      	adds	r3, r7, #7
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	4a0a      	ldr	r2, [pc, #40]	; (1330 <mem_removal+0x44>)
    1306:	015b      	lsls	r3, r3, #5
    1308:	18d3      	adds	r3, r2, r3
    130a:	3310      	adds	r3, #16
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	4798      	blx	r3
    1310:	1c03      	adds	r3, r0, #0
    1312:	2b00      	cmp	r3, #0
    1314:	d001      	beq.n	131a <mem_removal+0x2e>
    1316:	2301      	movs	r3, #1
    1318:	e000      	b.n	131c <mem_removal+0x30>
    131a:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return true;

  removal =
    131c:	1c3a      	adds	r2, r7, #0
    131e:	320f      	adds	r2, #15
    1320:	7013      	strb	r3, [r2, #0]
                              true;
#endif

  Ctrl_access_unlock();

  return removal;
    1322:	1c3b      	adds	r3, r7, #0
    1324:	330f      	adds	r3, #15
    1326:	781b      	ldrb	r3, [r3, #0]
}
    1328:	1c18      	adds	r0, r3, #0
    132a:	46bd      	mov	sp, r7
    132c:	b004      	add	sp, #16
    132e:	bd80      	pop	{r7, pc}
    1330:	0000b364 	.word	0x0000b364

00001334 <mem_name>:


const char *mem_name(U8 lun)
{
    1334:	b580      	push	{r7, lr}
    1336:	b082      	sub	sp, #8
    1338:	af00      	add	r7, sp, #0
    133a:	1c02      	adds	r2, r0, #0
    133c:	1dfb      	adds	r3, r7, #7
    133e:	701a      	strb	r2, [r3, #0]
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    1340:	1dfb      	adds	r3, r7, #7
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	2b00      	cmp	r3, #0
    1346:	d101      	bne.n	134c <mem_name+0x18>
    1348:	4b03      	ldr	r3, [pc, #12]	; (1358 <mem_name+0x24>)
    134a:	e000      	b.n	134e <mem_name+0x1a>
    134c:	2300      	movs	r3, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    134e:	1c18      	adds	r0, r3, #0
    1350:	46bd      	mov	sp, r7
    1352:	b002      	add	sp, #8
    1354:	bd80      	pop	{r7, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	0000b348 	.word	0x0000b348

0000135c <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    135c:	b580      	push	{r7, lr}
    135e:	b084      	sub	sp, #16
    1360:	af00      	add	r7, sp, #0
    1362:	6039      	str	r1, [r7, #0]
    1364:	1dfb      	adds	r3, r7, #7
    1366:	1c01      	adds	r1, r0, #0
    1368:	7019      	strb	r1, [r3, #0]
    136a:	1d3b      	adds	r3, r7, #4
    136c:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    136e:	4b11      	ldr	r3, [pc, #68]	; (13b4 <memory_2_usb+0x58>)
    1370:	4798      	blx	r3
  status =
    1372:	1dfb      	adds	r3, r7, #7
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	2b00      	cmp	r3, #0
    1378:	d10e      	bne.n	1398 <memory_2_usb+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    137a:	1dfb      	adds	r3, r7, #7
    137c:	781b      	ldrb	r3, [r3, #0]
    137e:	4a0e      	ldr	r2, [pc, #56]	; (13b8 <memory_2_usb+0x5c>)
    1380:	015b      	lsls	r3, r3, #5
    1382:	18d3      	adds	r3, r2, r3
    1384:	3310      	adds	r3, #16
    1386:	685b      	ldr	r3, [r3, #4]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
    1388:	6839      	ldr	r1, [r7, #0]
    138a:	1d3a      	adds	r2, r7, #4
    138c:	8812      	ldrh	r2, [r2, #0]
    138e:	1c08      	adds	r0, r1, #0
    1390:	1c11      	adds	r1, r2, #0
    1392:	4798      	blx	r3
    1394:	1c03      	adds	r3, r0, #0
    1396:	e000      	b.n	139a <memory_2_usb+0x3e>
    1398:	2301      	movs	r3, #1
    139a:	1c3a      	adds	r2, r7, #0
    139c:	320f      	adds	r2, #15
    139e:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    13a0:	4b06      	ldr	r3, [pc, #24]	; (13bc <memory_2_usb+0x60>)
    13a2:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    13a4:	1c3b      	adds	r3, r7, #0
    13a6:	330f      	adds	r3, #15
    13a8:	781b      	ldrb	r3, [r3, #0]
}
    13aa:	1c18      	adds	r0, r3, #0
    13ac:	46bd      	mov	sp, r7
    13ae:	b004      	add	sp, #16
    13b0:	bd80      	pop	{r7, pc}
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	00000d9d 	.word	0x00000d9d
    13b8:	0000b364 	.word	0x0000b364
    13bc:	00000da5 	.word	0x00000da5

000013c0 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    13c0:	b580      	push	{r7, lr}
    13c2:	b084      	sub	sp, #16
    13c4:	af00      	add	r7, sp, #0
    13c6:	6039      	str	r1, [r7, #0]
    13c8:	1dfb      	adds	r3, r7, #7
    13ca:	1c01      	adds	r1, r0, #0
    13cc:	7019      	strb	r1, [r3, #0]
    13ce:	1d3b      	adds	r3, r7, #4
    13d0:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    13d2:	4b11      	ldr	r3, [pc, #68]	; (1418 <usb_2_memory+0x58>)
    13d4:	4798      	blx	r3
  status =
    13d6:	1dfb      	adds	r3, r7, #7
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	2b00      	cmp	r3, #0
    13dc:	d10e      	bne.n	13fc <usb_2_memory+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    13de:	1dfb      	adds	r3, r7, #7
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	4a0e      	ldr	r2, [pc, #56]	; (141c <usb_2_memory+0x5c>)
    13e4:	015b      	lsls	r3, r3, #5
    13e6:	18d3      	adds	r3, r2, r3
    13e8:	3318      	adds	r3, #24
    13ea:	681b      	ldr	r3, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
    13ec:	6839      	ldr	r1, [r7, #0]
    13ee:	1d3a      	adds	r2, r7, #4
    13f0:	8812      	ldrh	r2, [r2, #0]
    13f2:	1c08      	adds	r0, r1, #0
    13f4:	1c11      	adds	r1, r2, #0
    13f6:	4798      	blx	r3
    13f8:	1c03      	adds	r3, r0, #0
    13fa:	e000      	b.n	13fe <usb_2_memory+0x3e>
    13fc:	2301      	movs	r3, #1
    13fe:	1c3a      	adds	r2, r7, #0
    1400:	320f      	adds	r2, #15
    1402:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <usb_2_memory+0x60>)
    1406:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    1408:	1c3b      	adds	r3, r7, #0
    140a:	330f      	adds	r3, #15
    140c:	781b      	ldrb	r3, [r3, #0]
}
    140e:	1c18      	adds	r0, r3, #0
    1410:	46bd      	mov	sp, r7
    1412:	b004      	add	sp, #16
    1414:	bd80      	pop	{r7, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	00000dad 	.word	0x00000dad
    141c:	0000b364 	.word	0x0000b364
    1420:	00000db5 	.word	0x00000db5

00001424 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    1424:	b580      	push	{r7, lr}
    1426:	b082      	sub	sp, #8
    1428:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    142a:	f3ef 8310 	mrs	r3, PRIMASK
    142e:	603b      	str	r3, [r7, #0]
  return(result);
    1430:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    1432:	425a      	negs	r2, r3
    1434:	4153      	adcs	r3, r2
    1436:	b2db      	uxtb	r3, r3
    1438:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    143a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    143c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <cpu_irq_save+0x2c>)
    1442:	2200      	movs	r2, #0
    1444:	701a      	strb	r2, [r3, #0]
	return flags;
    1446:	687b      	ldr	r3, [r7, #4]
}
    1448:	1c18      	adds	r0, r3, #0
    144a:	46bd      	mov	sp, r7
    144c:	b002      	add	sp, #8
    144e:	bd80      	pop	{r7, pc}
    1450:	20000288 	.word	0x20000288

00001454 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    1454:	b580      	push	{r7, lr}
    1456:	b082      	sub	sp, #8
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
	return (flags);
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	1e5a      	subs	r2, r3, #1
    1460:	4193      	sbcs	r3, r2
    1462:	b2db      	uxtb	r3, r3
}
    1464:	1c18      	adds	r0, r3, #0
    1466:	46bd      	mov	sp, r7
    1468:	b002      	add	sp, #8
    146a:	bd80      	pop	{r7, pc}

0000146c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    146c:	b580      	push	{r7, lr}
    146e:	b082      	sub	sp, #8
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	1c18      	adds	r0, r3, #0
    1478:	4b06      	ldr	r3, [pc, #24]	; (1494 <cpu_irq_restore+0x28>)
    147a:	4798      	blx	r3
    147c:	1c03      	adds	r3, r0, #0
    147e:	2b00      	cmp	r3, #0
    1480:	d005      	beq.n	148e <cpu_irq_restore+0x22>
		cpu_irq_enable();
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <cpu_irq_restore+0x2c>)
    1484:	2201      	movs	r2, #1
    1486:	701a      	strb	r2, [r3, #0]
    1488:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    148c:	b662      	cpsie	i
}
    148e:	46bd      	mov	sp, r7
    1490:	b002      	add	sp, #8
    1492:	bd80      	pop	{r7, pc}
    1494:	00001455 	.word	0x00001455
    1498:	20000288 	.word	0x20000288

0000149c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    149c:	b590      	push	{r4, r7, lr}
    149e:	b083      	sub	sp, #12
    14a0:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    14a2:	1dbb      	adds	r3, r7, #6
    14a4:	2200      	movs	r2, #0
    14a6:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    14a8:	4b59      	ldr	r3, [pc, #356]	; (1610 <udi_cdc_comm_enable+0x174>)
    14aa:	2200      	movs	r2, #0
    14ac:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    14ae:	1dbb      	adds	r3, r7, #6
    14b0:	781a      	ldrb	r2, [r3, #0]
    14b2:	4b58      	ldr	r3, [pc, #352]	; (1614 <udi_cdc_comm_enable+0x178>)
    14b4:	0052      	lsls	r2, r2, #1
    14b6:	2100      	movs	r1, #0
    14b8:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    14ba:	1dbb      	adds	r3, r7, #6
    14bc:	781a      	ldrb	r2, [r3, #0]
    14be:	4956      	ldr	r1, [pc, #344]	; (1618 <udi_cdc_comm_enable+0x17c>)
    14c0:	1c13      	adds	r3, r2, #0
    14c2:	009b      	lsls	r3, r3, #2
    14c4:	189b      	adds	r3, r3, r2
    14c6:	005b      	lsls	r3, r3, #1
    14c8:	22a1      	movs	r2, #161	; 0xa1
    14ca:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    14cc:	1dbb      	adds	r3, r7, #6
    14ce:	781a      	ldrb	r2, [r3, #0]
    14d0:	4951      	ldr	r1, [pc, #324]	; (1618 <udi_cdc_comm_enable+0x17c>)
    14d2:	1c13      	adds	r3, r2, #0
    14d4:	009b      	lsls	r3, r3, #2
    14d6:	189b      	adds	r3, r3, r2
    14d8:	005b      	lsls	r3, r3, #1
    14da:	18cb      	adds	r3, r1, r3
    14dc:	2220      	movs	r2, #32
    14de:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    14e0:	1dbb      	adds	r3, r7, #6
    14e2:	781a      	ldrb	r2, [r3, #0]
    14e4:	494c      	ldr	r1, [pc, #304]	; (1618 <udi_cdc_comm_enable+0x17c>)
    14e6:	1c13      	adds	r3, r2, #0
    14e8:	009b      	lsls	r3, r3, #2
    14ea:	189b      	adds	r3, r3, r2
    14ec:	005b      	lsls	r3, r3, #1
    14ee:	18cb      	adds	r3, r1, r3
    14f0:	2200      	movs	r2, #0
    14f2:	805a      	strh	r2, [r3, #2]

	switch (port) {
    14f4:	1dbb      	adds	r3, r7, #6
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d103      	bne.n	1504 <udi_cdc_comm_enable+0x68>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	2200      	movs	r2, #0
    1500:	701a      	strb	r2, [r3, #0]
    1502:	e003      	b.n	150c <udi_cdc_comm_enable+0x70>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    1504:	1dfb      	adds	r3, r7, #7
    1506:	2200      	movs	r2, #0
    1508:	701a      	strb	r2, [r3, #0]
		break;
    150a:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    150c:	1dbb      	adds	r3, r7, #6
    150e:	781a      	ldrb	r2, [r3, #0]
    1510:	1dfb      	adds	r3, r7, #7
    1512:	781b      	ldrb	r3, [r3, #0]
    1514:	b299      	uxth	r1, r3
    1516:	4840      	ldr	r0, [pc, #256]	; (1618 <udi_cdc_comm_enable+0x17c>)
    1518:	1c13      	adds	r3, r2, #0
    151a:	009b      	lsls	r3, r3, #2
    151c:	189b      	adds	r3, r3, r2
    151e:	005b      	lsls	r3, r3, #1
    1520:	18c3      	adds	r3, r0, r3
    1522:	1c0a      	adds	r2, r1, #0
    1524:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    1526:	1dbb      	adds	r3, r7, #6
    1528:	781a      	ldrb	r2, [r3, #0]
    152a:	493b      	ldr	r1, [pc, #236]	; (1618 <udi_cdc_comm_enable+0x17c>)
    152c:	1c13      	adds	r3, r2, #0
    152e:	009b      	lsls	r3, r3, #2
    1530:	189b      	adds	r3, r3, r2
    1532:	005b      	lsls	r3, r3, #1
    1534:	18cb      	adds	r3, r1, r3
    1536:	2202      	movs	r2, #2
    1538:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    153a:	1dbb      	adds	r3, r7, #6
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	4936      	ldr	r1, [pc, #216]	; (1618 <udi_cdc_comm_enable+0x17c>)
    1540:	1c13      	adds	r3, r2, #0
    1542:	009b      	lsls	r3, r3, #2
    1544:	189b      	adds	r3, r3, r2
    1546:	005b      	lsls	r3, r3, #1
    1548:	18cb      	adds	r3, r1, r3
    154a:	3308      	adds	r3, #8
    154c:	2200      	movs	r2, #0
    154e:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    1550:	1dbb      	adds	r3, r7, #6
    1552:	7819      	ldrb	r1, [r3, #0]
    1554:	4a31      	ldr	r2, [pc, #196]	; (161c <udi_cdc_comm_enable+0x180>)
    1556:	1c0b      	adds	r3, r1, #0
    1558:	00db      	lsls	r3, r3, #3
    155a:	1a5b      	subs	r3, r3, r1
    155c:	5c98      	ldrb	r0, [r3, r2]
    155e:	2100      	movs	r1, #0
    1560:	4001      	ands	r1, r0
    1562:	5499      	strb	r1, [r3, r2]
    1564:	18d1      	adds	r1, r2, r3
    1566:	784c      	ldrb	r4, [r1, #1]
    1568:	2000      	movs	r0, #0
    156a:	4020      	ands	r0, r4
    156c:	243e      	movs	r4, #62	; 0x3e
    156e:	4264      	negs	r4, r4
    1570:	4320      	orrs	r0, r4
    1572:	7048      	strb	r0, [r1, #1]
    1574:	18d1      	adds	r1, r2, r3
    1576:	788c      	ldrb	r4, [r1, #2]
    1578:	2000      	movs	r0, #0
    157a:	4020      	ands	r0, r4
    157c:	2401      	movs	r4, #1
    157e:	4320      	orrs	r0, r4
    1580:	7088      	strb	r0, [r1, #2]
    1582:	18d3      	adds	r3, r2, r3
    1584:	78d9      	ldrb	r1, [r3, #3]
    1586:	2200      	movs	r2, #0
    1588:	400a      	ands	r2, r1
    158a:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    158c:	1dbb      	adds	r3, r7, #6
    158e:	781a      	ldrb	r2, [r3, #0]
    1590:	4922      	ldr	r1, [pc, #136]	; (161c <udi_cdc_comm_enable+0x180>)
    1592:	1c13      	adds	r3, r2, #0
    1594:	00db      	lsls	r3, r3, #3
    1596:	1a9b      	subs	r3, r3, r2
    1598:	18cb      	adds	r3, r1, r3
    159a:	2200      	movs	r2, #0
    159c:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    159e:	1dbb      	adds	r3, r7, #6
    15a0:	781a      	ldrb	r2, [r3, #0]
    15a2:	491e      	ldr	r1, [pc, #120]	; (161c <udi_cdc_comm_enable+0x180>)
    15a4:	1c13      	adds	r3, r2, #0
    15a6:	00db      	lsls	r3, r3, #3
    15a8:	1a9b      	subs	r3, r3, r2
    15aa:	18cb      	adds	r3, r1, r3
    15ac:	2200      	movs	r2, #0
    15ae:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    15b0:	1dbb      	adds	r3, r7, #6
    15b2:	781a      	ldrb	r2, [r3, #0]
    15b4:	4919      	ldr	r1, [pc, #100]	; (161c <udi_cdc_comm_enable+0x180>)
    15b6:	1c13      	adds	r3, r2, #0
    15b8:	00db      	lsls	r3, r3, #3
    15ba:	1a9b      	subs	r3, r3, r2
    15bc:	18cb      	adds	r3, r1, r3
    15be:	2208      	movs	r2, #8
    15c0:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    15c2:	1dbb      	adds	r3, r7, #6
    15c4:	781a      	ldrb	r2, [r3, #0]
    15c6:	1c13      	adds	r3, r2, #0
    15c8:	00db      	lsls	r3, r3, #3
    15ca:	1a9b      	subs	r3, r3, r2
    15cc:	4a13      	ldr	r2, [pc, #76]	; (161c <udi_cdc_comm_enable+0x180>)
    15ce:	189b      	adds	r3, r3, r2
    15d0:	1dba      	adds	r2, r7, #6
    15d2:	7812      	ldrb	r2, [r2, #0]
    15d4:	1c10      	adds	r0, r2, #0
    15d6:	1c19      	adds	r1, r3, #0
    15d8:	4b11      	ldr	r3, [pc, #68]	; (1620 <udi_cdc_comm_enable+0x184>)
    15da:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
    15dc:	1dbb      	adds	r3, r7, #6
    15de:	781b      	ldrb	r3, [r3, #0]
    15e0:	1c18      	adds	r0, r3, #0
    15e2:	4b10      	ldr	r3, [pc, #64]	; (1624 <udi_cdc_comm_enable+0x188>)
    15e4:	4798      	blx	r3
    15e6:	1c03      	adds	r3, r0, #0
    15e8:	2201      	movs	r2, #1
    15ea:	4053      	eors	r3, r2
    15ec:	b2db      	uxtb	r3, r3
    15ee:	2b00      	cmp	r3, #0
    15f0:	d001      	beq.n	15f6 <udi_cdc_comm_enable+0x15a>
		return false;
    15f2:	2300      	movs	r3, #0
    15f4:	e007      	b.n	1606 <udi_cdc_comm_enable+0x16a>
	}
	udi_cdc_nb_comm_enabled++;
    15f6:	4b06      	ldr	r3, [pc, #24]	; (1610 <udi_cdc_comm_enable+0x174>)
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	b2db      	uxtb	r3, r3
    15fc:	3301      	adds	r3, #1
    15fe:	b2da      	uxtb	r2, r3
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <udi_cdc_comm_enable+0x174>)
    1602:	701a      	strb	r2, [r3, #0]
	return true;
    1604:	2301      	movs	r3, #1
}
    1606:	1c18      	adds	r0, r3, #0
    1608:	46bd      	mov	sp, r7
    160a:	b003      	add	sp, #12
    160c:	bd90      	pop	{r4, r7, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	200069c8 	.word	0x200069c8
    1614:	200069b8 	.word	0x200069b8
    1618:	200069bc 	.word	0x200069bc
    161c:	200069ac 	.word	0x200069ac
    1620:	0000af1d 	.word	0x0000af1d
    1624:	0000aae9 	.word	0x0000aae9

00001628 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    1628:	b580      	push	{r7, lr}
    162a:	b082      	sub	sp, #8
    162c:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    162e:	1dfb      	adds	r3, r7, #7
    1630:	2200      	movs	r2, #0
    1632:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    1634:	4b30      	ldr	r3, [pc, #192]	; (16f8 <udi_cdc_data_enable+0xd0>)
    1636:	2200      	movs	r2, #0
    1638:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    163a:	1dfb      	adds	r3, r7, #7
    163c:	781b      	ldrb	r3, [r3, #0]
    163e:	4a2f      	ldr	r2, [pc, #188]	; (16fc <udi_cdc_data_enable+0xd4>)
    1640:	2100      	movs	r1, #0
    1642:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    1644:	1dfb      	adds	r3, r7, #7
    1646:	781b      	ldrb	r3, [r3, #0]
    1648:	4a2d      	ldr	r2, [pc, #180]	; (1700 <udi_cdc_data_enable+0xd8>)
    164a:	2100      	movs	r1, #0
    164c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    164e:	1dfb      	adds	r3, r7, #7
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	4a2c      	ldr	r2, [pc, #176]	; (1704 <udi_cdc_data_enable+0xdc>)
    1654:	2100      	movs	r1, #0
    1656:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    1658:	1dfb      	adds	r3, r7, #7
    165a:	781a      	ldrb	r2, [r3, #0]
    165c:	4b2a      	ldr	r3, [pc, #168]	; (1708 <udi_cdc_data_enable+0xe0>)
    165e:	0092      	lsls	r2, r2, #2
    1660:	2100      	movs	r1, #0
    1662:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    1664:	1dfb      	adds	r3, r7, #7
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	4a27      	ldr	r2, [pc, #156]	; (1708 <udi_cdc_data_enable+0xe0>)
    166a:	009b      	lsls	r3, r3, #2
    166c:	18d3      	adds	r3, r2, r3
    166e:	3302      	adds	r3, #2
    1670:	2200      	movs	r2, #0
    1672:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    1674:	1dfb      	adds	r3, r7, #7
    1676:	781a      	ldrb	r2, [r3, #0]
    1678:	4b24      	ldr	r3, [pc, #144]	; (170c <udi_cdc_data_enable+0xe4>)
    167a:	0052      	lsls	r2, r2, #1
    167c:	2100      	movs	r1, #0
    167e:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    1680:	1dfb      	adds	r3, r7, #7
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	1c18      	adds	r0, r3, #0
    1686:	4b22      	ldr	r3, [pc, #136]	; (1710 <udi_cdc_data_enable+0xe8>)
    1688:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    168a:	1dfb      	adds	r3, r7, #7
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	4a21      	ldr	r2, [pc, #132]	; (1714 <udi_cdc_data_enable+0xec>)
    1690:	2100      	movs	r1, #0
    1692:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    1694:	1dfb      	adds	r3, r7, #7
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	4a1f      	ldr	r2, [pc, #124]	; (1718 <udi_cdc_data_enable+0xf0>)
    169a:	2100      	movs	r1, #0
    169c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    169e:	1dfb      	adds	r3, r7, #7
    16a0:	781a      	ldrb	r2, [r3, #0]
    16a2:	4b1e      	ldr	r3, [pc, #120]	; (171c <udi_cdc_data_enable+0xf4>)
    16a4:	0092      	lsls	r2, r2, #2
    16a6:	2100      	movs	r1, #0
    16a8:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_pos[port] = 0;
    16aa:	1dfb      	adds	r3, r7, #7
    16ac:	781a      	ldrb	r2, [r3, #0]
    16ae:	4b1c      	ldr	r3, [pc, #112]	; (1720 <udi_cdc_data_enable+0xf8>)
    16b0:	0052      	lsls	r2, r2, #1
    16b2:	2100      	movs	r1, #0
    16b4:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    16b6:	1dfb      	adds	r3, r7, #7
    16b8:	781b      	ldrb	r3, [r3, #0]
    16ba:	1c18      	adds	r0, r3, #0
    16bc:	4b19      	ldr	r3, [pc, #100]	; (1724 <udi_cdc_data_enable+0xfc>)
    16be:	4798      	blx	r3
    16c0:	1c03      	adds	r3, r0, #0
    16c2:	2201      	movs	r2, #1
    16c4:	4053      	eors	r3, r2
    16c6:	b2db      	uxtb	r3, r3
    16c8:	2b00      	cmp	r3, #0
    16ca:	d001      	beq.n	16d0 <udi_cdc_data_enable+0xa8>
		return false;
    16cc:	2300      	movs	r3, #0
    16ce:	e00f      	b.n	16f0 <udi_cdc_data_enable+0xc8>
	}
	udi_cdc_nb_data_enabled++;
    16d0:	4b09      	ldr	r3, [pc, #36]	; (16f8 <udi_cdc_data_enable+0xd0>)
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	b2db      	uxtb	r3, r3
    16d6:	3301      	adds	r3, #1
    16d8:	b2da      	uxtb	r2, r3
    16da:	4b07      	ldr	r3, [pc, #28]	; (16f8 <udi_cdc_data_enable+0xd0>)
    16dc:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <udi_cdc_data_enable+0xd0>)
    16e0:	781b      	ldrb	r3, [r3, #0]
    16e2:	b2db      	uxtb	r3, r3
    16e4:	2b01      	cmp	r3, #1
    16e6:	d102      	bne.n	16ee <udi_cdc_data_enable+0xc6>
		udi_cdc_data_running = true;
    16e8:	4b0f      	ldr	r3, [pc, #60]	; (1728 <udi_cdc_data_enable+0x100>)
    16ea:	2201      	movs	r2, #1
    16ec:	701a      	strb	r2, [r3, #0]
	}
	return true;
    16ee:	2301      	movs	r3, #1
}
    16f0:	1c18      	adds	r0, r3, #0
    16f2:	46bd      	mov	sp, r7
    16f4:	b002      	add	sp, #8
    16f6:	bd80      	pop	{r7, pc}
    16f8:	200069c9 	.word	0x200069c9
    16fc:	20006ee8 	.word	0x20006ee8
    1700:	20006eec 	.word	0x20006eec
    1704:	20006ee0 	.word	0x20006ee0
    1708:	20006edc 	.word	0x20006edc
    170c:	20006ee4 	.word	0x20006ee4
    1710:	00001e3d 	.word	0x00001e3d
    1714:	20006c58 	.word	0x20006c58
    1718:	20006c50 	.word	0x20006c50
    171c:	20006c4c 	.word	0x20006c4c
    1720:	20006c54 	.word	0x20006c54
    1724:	00001b65 	.word	0x00001b65
    1728:	200069ca 	.word	0x200069ca

0000172c <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    172c:	b580      	push	{r7, lr}
    172e:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <udi_cdc_comm_disable+0x18>)
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	b2db      	uxtb	r3, r3
    1736:	3b01      	subs	r3, #1
    1738:	b2da      	uxtb	r2, r3
    173a:	4b02      	ldr	r3, [pc, #8]	; (1744 <udi_cdc_comm_disable+0x18>)
    173c:	701a      	strb	r2, [r3, #0]
}
    173e:	46bd      	mov	sp, r7
    1740:	bd80      	pop	{r7, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	200069c8 	.word	0x200069c8

00001748 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    1748:	b580      	push	{r7, lr}
    174a:	b082      	sub	sp, #8
    174c:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    174e:	4b0b      	ldr	r3, [pc, #44]	; (177c <udi_cdc_data_disable+0x34>)
    1750:	781b      	ldrb	r3, [r3, #0]
    1752:	b2db      	uxtb	r3, r3
    1754:	3b01      	subs	r3, #1
    1756:	b2da      	uxtb	r2, r3
    1758:	4b08      	ldr	r3, [pc, #32]	; (177c <udi_cdc_data_disable+0x34>)
    175a:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    175c:	1dfb      	adds	r3, r7, #7
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <udi_cdc_data_disable+0x34>)
    1760:	7812      	ldrb	r2, [r2, #0]
    1762:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
    1764:	1dfb      	adds	r3, r7, #7
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	1c18      	adds	r0, r3, #0
    176a:	4b05      	ldr	r3, [pc, #20]	; (1780 <udi_cdc_data_disable+0x38>)
    176c:	4798      	blx	r3
	udi_cdc_data_running = false;
    176e:	4b05      	ldr	r3, [pc, #20]	; (1784 <udi_cdc_data_disable+0x3c>)
    1770:	2200      	movs	r2, #0
    1772:	701a      	strb	r2, [r3, #0]
}
    1774:	46bd      	mov	sp, r7
    1776:	b002      	add	sp, #8
    1778:	bd80      	pop	{r7, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	200069c9 	.word	0x200069c9
    1780:	0000ab19 	.word	0x0000ab19
    1784:	200069ca 	.word	0x200069ca

00001788 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    1788:	b590      	push	{r4, r7, lr}
    178a:	b083      	sub	sp, #12
    178c:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    178e:	1dfc      	adds	r4, r7, #7
    1790:	4b34      	ldr	r3, [pc, #208]	; (1864 <udi_cdc_comm_setup+0xdc>)
    1792:	4798      	blx	r3
    1794:	1c03      	adds	r3, r0, #0
    1796:	7023      	strb	r3, [r4, #0]

	if (Udd_setup_is_in()) {
    1798:	4b33      	ldr	r3, [pc, #204]	; (1868 <udi_cdc_comm_setup+0xe0>)
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	b2db      	uxtb	r3, r3
    179e:	b25b      	sxtb	r3, r3
    17a0:	2b00      	cmp	r3, #0
    17a2:	da1e      	bge.n	17e2 <udi_cdc_comm_setup+0x5a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17a4:	4b30      	ldr	r3, [pc, #192]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17a6:	781b      	ldrb	r3, [r3, #0]
    17a8:	1c1a      	adds	r2, r3, #0
    17aa:	2360      	movs	r3, #96	; 0x60
    17ac:	4013      	ands	r3, r2
    17ae:	2b20      	cmp	r3, #32
    17b0:	d117      	bne.n	17e2 <udi_cdc_comm_setup+0x5a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    17b2:	4b2d      	ldr	r3, [pc, #180]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17b4:	785b      	ldrb	r3, [r3, #1]
    17b6:	2b21      	cmp	r3, #33	; 0x21
    17b8:	d113      	bne.n	17e2 <udi_cdc_comm_setup+0x5a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    17ba:	4b2b      	ldr	r3, [pc, #172]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17bc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    17be:	2b07      	cmp	r3, #7
    17c0:	d001      	beq.n	17c6 <udi_cdc_comm_setup+0x3e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    17c2:	2300      	movs	r3, #0
    17c4:	e049      	b.n	185a <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    17c6:	1dfb      	adds	r3, r7, #7
    17c8:	781a      	ldrb	r2, [r3, #0]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    17ca:	1c13      	adds	r3, r2, #0
    17cc:	00db      	lsls	r3, r3, #3
    17ce:	1a9b      	subs	r3, r3, r2
    17d0:	4a26      	ldr	r2, [pc, #152]	; (186c <udi_cdc_comm_setup+0xe4>)
    17d2:	189a      	adds	r2, r3, r2
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    17d4:	4b24      	ldr	r3, [pc, #144]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17d6:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    17d8:	4b23      	ldr	r3, [pc, #140]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17da:	2207      	movs	r2, #7
    17dc:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    17de:	2301      	movs	r3, #1
    17e0:	e03b      	b.n	185a <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	if (Udd_setup_is_out()) {
    17e2:	4b21      	ldr	r3, [pc, #132]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17e4:	781b      	ldrb	r3, [r3, #0]
    17e6:	b2db      	uxtb	r3, r3
    17e8:	b25b      	sxtb	r3, r3
    17ea:	2b00      	cmp	r3, #0
    17ec:	db34      	blt.n	1858 <udi_cdc_comm_setup+0xd0>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17ee:	4b1e      	ldr	r3, [pc, #120]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	1c1a      	adds	r2, r3, #0
    17f4:	2360      	movs	r3, #96	; 0x60
    17f6:	4013      	ands	r3, r2
    17f8:	2b20      	cmp	r3, #32
    17fa:	d12d      	bne.n	1858 <udi_cdc_comm_setup+0xd0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    17fc:	4b1a      	ldr	r3, [pc, #104]	; (1868 <udi_cdc_comm_setup+0xe0>)
    17fe:	785b      	ldrb	r3, [r3, #1]
    1800:	2b20      	cmp	r3, #32
    1802:	d002      	beq.n	180a <udi_cdc_comm_setup+0x82>
    1804:	2b22      	cmp	r3, #34	; 0x22
    1806:	d017      	beq.n	1838 <udi_cdc_comm_setup+0xb0>
    1808:	e026      	b.n	1858 <udi_cdc_comm_setup+0xd0>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    180a:	4b17      	ldr	r3, [pc, #92]	; (1868 <udi_cdc_comm_setup+0xe0>)
    180c:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    180e:	2b07      	cmp	r3, #7
    1810:	d001      	beq.n	1816 <udi_cdc_comm_setup+0x8e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    1812:	2300      	movs	r3, #0
    1814:	e021      	b.n	185a <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.callback =
    1816:	4b14      	ldr	r3, [pc, #80]	; (1868 <udi_cdc_comm_setup+0xe0>)
    1818:	4a15      	ldr	r2, [pc, #84]	; (1870 <udi_cdc_comm_setup+0xe8>)
    181a:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    181c:	1dfb      	adds	r3, r7, #7
    181e:	781a      	ldrb	r2, [r3, #0]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1820:	1c13      	adds	r3, r2, #0
    1822:	00db      	lsls	r3, r3, #3
    1824:	1a9b      	subs	r3, r3, r2
    1826:	4a11      	ldr	r2, [pc, #68]	; (186c <udi_cdc_comm_setup+0xe4>)
    1828:	189a      	adds	r2, r3, r2
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    182a:	4b0f      	ldr	r3, [pc, #60]	; (1868 <udi_cdc_comm_setup+0xe0>)
    182c:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    182e:	4b0e      	ldr	r3, [pc, #56]	; (1868 <udi_cdc_comm_setup+0xe0>)
    1830:	2207      	movs	r2, #7
    1832:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    1834:	2301      	movs	r3, #1
    1836:	e010      	b.n	185a <udi_cdc_comm_setup+0xd2>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
    1838:	4b0b      	ldr	r3, [pc, #44]	; (1868 <udi_cdc_comm_setup+0xe0>)
    183a:	885b      	ldrh	r3, [r3, #2]
    183c:	1c1a      	adds	r2, r3, #0
    183e:	2301      	movs	r3, #1
    1840:	4013      	ands	r3, r2
    1842:	1e5a      	subs	r2, r3, #1
    1844:	4193      	sbcs	r3, r2
    1846:	b2db      	uxtb	r3, r3
    1848:	1dfa      	adds	r2, r7, #7
    184a:	7812      	ldrb	r2, [r2, #0]
    184c:	1c10      	adds	r0, r2, #0
    184e:	1c19      	adds	r1, r3, #0
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <udi_cdc_comm_setup+0xec>)
    1852:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    1854:	2301      	movs	r3, #1
    1856:	e000      	b.n	185a <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	return false;  // request Not supported
    1858:	2300      	movs	r3, #0
}
    185a:	1c18      	adds	r0, r3, #0
    185c:	46bd      	mov	sp, r7
    185e:	b003      	add	sp, #12
    1860:	bd90      	pop	{r4, r7, pc}
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	000018ad 	.word	0x000018ad
    1868:	20007330 	.word	0x20007330
    186c:	200069ac 	.word	0x200069ac
    1870:	000018e1 	.word	0x000018e1
    1874:	0000ab45 	.word	0x0000ab45

00001878 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    1878:	b580      	push	{r7, lr}
    187a:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    187c:	2300      	movs	r3, #0
}
    187e:	1c18      	adds	r0, r3, #0
    1880:	46bd      	mov	sp, r7
    1882:	bd80      	pop	{r7, pc}

00001884 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    1884:	b580      	push	{r7, lr}
    1886:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    1888:	2300      	movs	r3, #0
}
    188a:	1c18      	adds	r0, r3, #0
    188c:	46bd      	mov	sp, r7
    188e:	bd80      	pop	{r7, pc}

00001890 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    1890:	b580      	push	{r7, lr}
    1892:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    1894:	4b03      	ldr	r3, [pc, #12]	; (18a4 <udi_cdc_data_sof_notify+0x14>)
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	1c18      	adds	r0, r3, #0
    189a:	4b03      	ldr	r3, [pc, #12]	; (18a8 <udi_cdc_data_sof_notify+0x18>)
    189c:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    189e:	46bd      	mov	sp, r7
    18a0:	bd80      	pop	{r7, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	20006ef0 	.word	0x20006ef0
    18a8:	00001e3d 	.word	0x00001e3d

000018ac <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <udi_cdc_setup_to_port+0x30>)
    18b4:	889b      	ldrh	r3, [r3, #4]
    18b6:	1c1a      	adds	r2, r3, #0
    18b8:	23ff      	movs	r3, #255	; 0xff
    18ba:	4013      	ands	r3, r2
    18bc:	d103      	bne.n	18c6 <udi_cdc_setup_to_port+0x1a>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    18be:	1dfb      	adds	r3, r7, #7
    18c0:	2200      	movs	r2, #0
    18c2:	701a      	strb	r2, [r3, #0]
    18c4:	e003      	b.n	18ce <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    18c6:	1dfb      	adds	r3, r7, #7
    18c8:	2200      	movs	r2, #0
    18ca:	701a      	strb	r2, [r3, #0]
		break;
    18cc:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    18ce:	1dfb      	adds	r3, r7, #7
    18d0:	781b      	ldrb	r3, [r3, #0]
}
    18d2:	1c18      	adds	r0, r3, #0
    18d4:	46bd      	mov	sp, r7
    18d6:	b002      	add	sp, #8
    18d8:	bd80      	pop	{r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	20007330 	.word	0x20007330

000018e0 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    18e0:	b590      	push	{r4, r7, lr}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    18e6:	1dfc      	adds	r4, r7, #7
    18e8:	4b09      	ldr	r3, [pc, #36]	; (1910 <udi_cdc_line_coding_received+0x30>)
    18ea:	4798      	blx	r3
    18ec:	1c03      	adds	r3, r0, #0
    18ee:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
    18f0:	1dfb      	adds	r3, r7, #7
    18f2:	781a      	ldrb	r2, [r3, #0]
    18f4:	1c13      	adds	r3, r2, #0
    18f6:	00db      	lsls	r3, r3, #3
    18f8:	1a9b      	subs	r3, r3, r2
    18fa:	4a06      	ldr	r2, [pc, #24]	; (1914 <udi_cdc_line_coding_received+0x34>)
    18fc:	189b      	adds	r3, r3, r2
    18fe:	1dfa      	adds	r2, r7, #7
    1900:	7812      	ldrb	r2, [r2, #0]
    1902:	1c10      	adds	r0, r2, #0
    1904:	1c19      	adds	r1, r3, #0
    1906:	4b04      	ldr	r3, [pc, #16]	; (1918 <udi_cdc_line_coding_received+0x38>)
    1908:	4798      	blx	r3
}
    190a:	46bd      	mov	sp, r7
    190c:	b003      	add	sp, #12
    190e:	bd90      	pop	{r4, r7, pc}
    1910:	000018ad 	.word	0x000018ad
    1914:	200069ac 	.word	0x200069ac
    1918:	0000af1d 	.word	0x0000af1d

0000191c <udi_cdc_ctrl_state_change>:

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    191c:	b580      	push	{r7, lr}
    191e:	b084      	sub	sp, #16
    1920:	af00      	add	r7, sp, #0
    1922:	1dfb      	adds	r3, r7, #7
    1924:	7018      	strb	r0, [r3, #0]
    1926:	1dbb      	adds	r3, r7, #6
    1928:	7019      	strb	r1, [r3, #0]
    192a:	1d3b      	adds	r3, r7, #4
    192c:	801a      	strh	r2, [r3, #0]
	irqflags_t flags;
	udd_ep_id_t ep_comm;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    192e:	1c3b      	adds	r3, r7, #0
    1930:	330e      	adds	r3, #14
    1932:	2200      	movs	r2, #0
    1934:	701a      	strb	r2, [r3, #0]
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
    1936:	4b26      	ldr	r3, [pc, #152]	; (19d0 <udi_cdc_ctrl_state_change+0xb4>)
    1938:	4798      	blx	r3
    193a:	1c03      	adds	r3, r0, #0
    193c:	60bb      	str	r3, [r7, #8]
	if (b_set) {
    193e:	1dbb      	adds	r3, r7, #6
    1940:	781b      	ldrb	r3, [r3, #0]
    1942:	2b00      	cmp	r3, #0
    1944:	d011      	beq.n	196a <udi_cdc_ctrl_state_change+0x4e>
		udi_cdc_state[port] |= bit_mask;
    1946:	1c3b      	adds	r3, r7, #0
    1948:	330e      	adds	r3, #14
    194a:	781a      	ldrb	r2, [r3, #0]
    194c:	1c3b      	adds	r3, r7, #0
    194e:	330e      	adds	r3, #14
    1950:	7819      	ldrb	r1, [r3, #0]
    1952:	4b20      	ldr	r3, [pc, #128]	; (19d4 <udi_cdc_ctrl_state_change+0xb8>)
    1954:	0049      	lsls	r1, r1, #1
    1956:	5acb      	ldrh	r3, [r1, r3]
    1958:	b299      	uxth	r1, r3
    195a:	1d3b      	adds	r3, r7, #4
    195c:	881b      	ldrh	r3, [r3, #0]
    195e:	430b      	orrs	r3, r1
    1960:	b299      	uxth	r1, r3
    1962:	4b1c      	ldr	r3, [pc, #112]	; (19d4 <udi_cdc_ctrl_state_change+0xb8>)
    1964:	0052      	lsls	r2, r2, #1
    1966:	52d1      	strh	r1, [r2, r3]
    1968:	e012      	b.n	1990 <udi_cdc_ctrl_state_change+0x74>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    196a:	1c3b      	adds	r3, r7, #0
    196c:	330e      	adds	r3, #14
    196e:	781a      	ldrb	r2, [r3, #0]
    1970:	1c3b      	adds	r3, r7, #0
    1972:	330e      	adds	r3, #14
    1974:	7819      	ldrb	r1, [r3, #0]
    1976:	4b17      	ldr	r3, [pc, #92]	; (19d4 <udi_cdc_ctrl_state_change+0xb8>)
    1978:	0049      	lsls	r1, r1, #1
    197a:	5acb      	ldrh	r3, [r1, r3]
    197c:	b29b      	uxth	r3, r3
    197e:	1d39      	adds	r1, r7, #4
    1980:	8809      	ldrh	r1, [r1, #0]
    1982:	43c9      	mvns	r1, r1
    1984:	b289      	uxth	r1, r1
    1986:	400b      	ands	r3, r1
    1988:	b299      	uxth	r1, r3
    198a:	4b12      	ldr	r3, [pc, #72]	; (19d4 <udi_cdc_ctrl_state_change+0xb8>)
    198c:	0052      	lsls	r2, r2, #1
    198e:	52d1      	strh	r1, [r2, r3]
	}
	cpu_irq_restore(flags);
    1990:	68bb      	ldr	r3, [r7, #8]
    1992:	1c18      	adds	r0, r3, #0
    1994:	4b10      	ldr	r3, [pc, #64]	; (19d8 <udi_cdc_ctrl_state_change+0xbc>)
    1996:	4798      	blx	r3

	// Send it if possible and state changed
	switch (port) {
    1998:	1c3b      	adds	r3, r7, #0
    199a:	330e      	adds	r3, #14
    199c:	781b      	ldrb	r3, [r3, #0]
    199e:	2b00      	cmp	r3, #0
    19a0:	d104      	bne.n	19ac <udi_cdc_ctrl_state_change+0x90>
#define UDI_CDC_PORT_TO_COMM_EP(index, unused) \
	case index: \
		ep_comm = UDI_CDC_COMM_EP_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_COMM_EP, ~)
    19a2:	1c3b      	adds	r3, r7, #0
    19a4:	330f      	adds	r3, #15
    19a6:	2287      	movs	r2, #135	; 0x87
    19a8:	701a      	strb	r2, [r3, #0]
    19aa:	e004      	b.n	19b6 <udi_cdc_ctrl_state_change+0x9a>
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
    19ac:	1c3b      	adds	r3, r7, #0
    19ae:	330f      	adds	r3, #15
    19b0:	2287      	movs	r2, #135	; 0x87
    19b2:	701a      	strb	r2, [r3, #0]
		break;
    19b4:	46c0      	nop			; (mov r8, r8)
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    19b6:	1c3b      	adds	r3, r7, #0
    19b8:	330e      	adds	r3, #14
    19ba:	781a      	ldrb	r2, [r3, #0]
    19bc:	1c3b      	adds	r3, r7, #0
    19be:	330f      	adds	r3, #15
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	1c10      	adds	r0, r2, #0
    19c4:	1c19      	adds	r1, r3, #0
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <udi_cdc_ctrl_state_change+0xc0>)
    19c8:	4798      	blx	r3
}
    19ca:	46bd      	mov	sp, r7
    19cc:	b004      	add	sp, #16
    19ce:	bd80      	pop	{r7, pc}
    19d0:	00001425 	.word	0x00001425
    19d4:	200069b8 	.word	0x200069b8
    19d8:	0000146d 	.word	0x0000146d
    19dc:	000019e1 	.word	0x000019e1

000019e0 <udi_cdc_ctrl_state_notify>:


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    19e0:	b5b0      	push	{r4, r5, r7, lr}
    19e2:	b086      	sub	sp, #24
    19e4:	af02      	add	r7, sp, #8
    19e6:	1c0a      	adds	r2, r1, #0
    19e8:	1dfb      	adds	r3, r7, #7
    19ea:	1c01      	adds	r1, r0, #0
    19ec:	7019      	strb	r1, [r3, #0]
    19ee:	1dbb      	adds	r3, r7, #6
    19f0:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    19f2:	1c3b      	adds	r3, r7, #0
    19f4:	330f      	adds	r3, #15
    19f6:	2200      	movs	r2, #0
    19f8:	701a      	strb	r2, [r3, #0]
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    19fa:	1c3b      	adds	r3, r7, #0
    19fc:	330f      	adds	r3, #15
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	4a25      	ldr	r2, [pc, #148]	; (1a98 <udi_cdc_ctrl_state_notify+0xb8>)
    1a02:	5cd3      	ldrb	r3, [r2, r3]
    1a04:	2201      	movs	r2, #1
    1a06:	4053      	eors	r3, r2
    1a08:	b2db      	uxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d040      	beq.n	1a90 <udi_cdc_ctrl_state_notify+0xb0>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    1a0e:	1c3b      	adds	r3, r7, #0
    1a10:	330f      	adds	r3, #15
    1a12:	781a      	ldrb	r2, [r3, #0]
    1a14:	4b21      	ldr	r3, [pc, #132]	; (1a9c <udi_cdc_ctrl_state_notify+0xbc>)
    1a16:	0052      	lsls	r2, r2, #1
    1a18:	5ad3      	ldrh	r3, [r2, r3]
    1a1a:	b299      	uxth	r1, r3
    1a1c:	1c3b      	adds	r3, r7, #0
    1a1e:	330f      	adds	r3, #15
    1a20:	781a      	ldrb	r2, [r3, #0]
    1a22:	481f      	ldr	r0, [pc, #124]	; (1aa0 <udi_cdc_ctrl_state_notify+0xc0>)
    1a24:	1c13      	adds	r3, r2, #0
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	189b      	adds	r3, r3, r2
    1a2a:	005b      	lsls	r3, r3, #1
    1a2c:	18c3      	adds	r3, r0, r3
    1a2e:	3308      	adds	r3, #8
    1a30:	881b      	ldrh	r3, [r3, #0]
    1a32:	4299      	cmp	r1, r3
    1a34:	d02c      	beq.n	1a90 <udi_cdc_ctrl_state_notify+0xb0>
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    1a36:	1c3b      	adds	r3, r7, #0
    1a38:	330f      	adds	r3, #15
    1a3a:	781a      	ldrb	r2, [r3, #0]
    1a3c:	1c3b      	adds	r3, r7, #0
    1a3e:	330f      	adds	r3, #15
    1a40:	7819      	ldrb	r1, [r3, #0]
    1a42:	4b16      	ldr	r3, [pc, #88]	; (1a9c <udi_cdc_ctrl_state_notify+0xbc>)
    1a44:	0049      	lsls	r1, r1, #1
    1a46:	5acb      	ldrh	r3, [r1, r3]
    1a48:	b299      	uxth	r1, r3
    1a4a:	4815      	ldr	r0, [pc, #84]	; (1aa0 <udi_cdc_ctrl_state_notify+0xc0>)
    1a4c:	1c13      	adds	r3, r2, #0
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	189b      	adds	r3, r3, r2
    1a52:	005b      	lsls	r3, r3, #1
    1a54:	18c3      	adds	r3, r0, r3
    1a56:	3308      	adds	r3, #8
    1a58:	1c0a      	adds	r2, r1, #0
    1a5a:	801a      	strh	r2, [r3, #0]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    1a5c:	1c3b      	adds	r3, r7, #0
    1a5e:	330f      	adds	r3, #15
    1a60:	781c      	ldrb	r4, [r3, #0]
				udd_ep_run(ep,
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
    1a62:	1c3b      	adds	r3, r7, #0
    1a64:	330f      	adds	r3, #15
    1a66:	781a      	ldrb	r2, [r3, #0]
    1a68:	1c13      	adds	r3, r2, #0
    1a6a:	009b      	lsls	r3, r3, #2
    1a6c:	189b      	adds	r3, r3, r2
    1a6e:	005b      	lsls	r3, r3, #1
    1a70:	4a0b      	ldr	r2, [pc, #44]	; (1aa0 <udi_cdc_ctrl_state_notify+0xc0>)
    1a72:	189b      	adds	r3, r3, r2
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    1a74:	1dba      	adds	r2, r7, #6
    1a76:	7812      	ldrb	r2, [r2, #0]
    1a78:	490a      	ldr	r1, [pc, #40]	; (1aa4 <udi_cdc_ctrl_state_notify+0xc4>)
    1a7a:	9100      	str	r1, [sp, #0]
    1a7c:	1c10      	adds	r0, r2, #0
    1a7e:	2100      	movs	r1, #0
    1a80:	1c1a      	adds	r2, r3, #0
    1a82:	230a      	movs	r3, #10
    1a84:	4d08      	ldr	r5, [pc, #32]	; (1aa8 <udi_cdc_ctrl_state_notify+0xc8>)
    1a86:	47a8      	blx	r5
    1a88:	1c03      	adds	r3, r0, #0
    1a8a:	1c1a      	adds	r2, r3, #0
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    1a8c:	4b02      	ldr	r3, [pc, #8]	; (1a98 <udi_cdc_ctrl_state_notify+0xb8>)
    1a8e:	551a      	strb	r2, [r3, r4]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    1a90:	46bd      	mov	sp, r7
    1a92:	b004      	add	sp, #16
    1a94:	bdb0      	pop	{r4, r5, r7, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	200069b4 	.word	0x200069b4
    1a9c:	200069b8 	.word	0x200069b8
    1aa0:	200069bc 	.word	0x200069bc
    1aa4:	00001aad 	.word	0x00001aad
    1aa8:	00007bb5 	.word	0x00007bb5

00001aac <udi_cdc_serial_state_msg_sent>:


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1aac:	b580      	push	{r7, lr}
    1aae:	b084      	sub	sp, #16
    1ab0:	af00      	add	r7, sp, #0
    1ab2:	6039      	str	r1, [r7, #0]
    1ab4:	1dfb      	adds	r3, r7, #7
    1ab6:	1c01      	adds	r1, r0, #0
    1ab8:	7019      	strb	r1, [r3, #0]
    1aba:	1dbb      	adds	r3, r7, #6
    1abc:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);
	UNUSED(status);

	switch (ep) {
    1abe:	1dbb      	adds	r3, r7, #6
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b87      	cmp	r3, #135	; 0x87
    1ac4:	d104      	bne.n	1ad0 <udi_cdc_serial_state_msg_sent+0x24>
#define UDI_CDC_GET_PORT_FROM_COMM_EP(iface, unused) \
	case UDI_CDC_COMM_EP_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
    1ac6:	1c3b      	adds	r3, r7, #0
    1ac8:	330f      	adds	r3, #15
    1aca:	2200      	movs	r2, #0
    1acc:	701a      	strb	r2, [r3, #0]
    1ace:	e004      	b.n	1ada <udi_cdc_serial_state_msg_sent+0x2e>
#undef UDI_CDC_GET_PORT_FROM_COMM_EP
	default:
		port = 0;
    1ad0:	1c3b      	adds	r3, r7, #0
    1ad2:	330f      	adds	r3, #15
    1ad4:	2200      	movs	r2, #0
    1ad6:	701a      	strb	r2, [r3, #0]
		break;
    1ad8:	46c0      	nop			; (mov r8, r8)
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    1ada:	1c3b      	adds	r3, r7, #0
    1adc:	330f      	adds	r3, #15
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	4a1c      	ldr	r2, [pc, #112]	; (1b54 <udi_cdc_serial_state_msg_sent+0xa8>)
    1ae2:	2100      	movs	r1, #0
    1ae4:	54d1      	strb	r1, [r2, r3]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    1ae6:	1c3b      	adds	r3, r7, #0
    1ae8:	330f      	adds	r3, #15
    1aea:	781a      	ldrb	r2, [r3, #0]
    1aec:	1c3b      	adds	r3, r7, #0
    1aee:	330f      	adds	r3, #15
    1af0:	7819      	ldrb	r1, [r3, #0]
    1af2:	4b19      	ldr	r3, [pc, #100]	; (1b58 <udi_cdc_serial_state_msg_sent+0xac>)
    1af4:	0049      	lsls	r1, r1, #1
    1af6:	5acb      	ldrh	r3, [r1, r3]
    1af8:	b29b      	uxth	r3, r3
    1afa:	217c      	movs	r1, #124	; 0x7c
    1afc:	438b      	bics	r3, r1
    1afe:	b299      	uxth	r1, r3
    1b00:	4b15      	ldr	r3, [pc, #84]	; (1b58 <udi_cdc_serial_state_msg_sent+0xac>)
    1b02:	0052      	lsls	r2, r2, #1
    1b04:	52d1      	strh	r1, [r2, r3]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    1b06:	1c3b      	adds	r3, r7, #0
    1b08:	330f      	adds	r3, #15
    1b0a:	781a      	ldrb	r2, [r3, #0]
    1b0c:	1c3b      	adds	r3, r7, #0
    1b0e:	330f      	adds	r3, #15
    1b10:	7819      	ldrb	r1, [r3, #0]
    1b12:	4812      	ldr	r0, [pc, #72]	; (1b5c <udi_cdc_serial_state_msg_sent+0xb0>)
    1b14:	1c0b      	adds	r3, r1, #0
    1b16:	009b      	lsls	r3, r3, #2
    1b18:	185b      	adds	r3, r3, r1
    1b1a:	005b      	lsls	r3, r3, #1
    1b1c:	18c3      	adds	r3, r0, r3
    1b1e:	3308      	adds	r3, #8
    1b20:	881b      	ldrh	r3, [r3, #0]
    1b22:	217c      	movs	r1, #124	; 0x7c
    1b24:	438b      	bics	r3, r1
    1b26:	b299      	uxth	r1, r3
    1b28:	480c      	ldr	r0, [pc, #48]	; (1b5c <udi_cdc_serial_state_msg_sent+0xb0>)
    1b2a:	1c13      	adds	r3, r2, #0
    1b2c:	009b      	lsls	r3, r3, #2
    1b2e:	189b      	adds	r3, r3, r2
    1b30:	005b      	lsls	r3, r3, #1
    1b32:	18c3      	adds	r3, r0, r3
    1b34:	3308      	adds	r3, #8
    1b36:	1c0a      	adds	r2, r1, #0
    1b38:	801a      	strh	r2, [r3, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    1b3a:	1c3b      	adds	r3, r7, #0
    1b3c:	330f      	adds	r3, #15
    1b3e:	781a      	ldrb	r2, [r3, #0]
    1b40:	1dbb      	adds	r3, r7, #6
    1b42:	781b      	ldrb	r3, [r3, #0]
    1b44:	1c10      	adds	r0, r2, #0
    1b46:	1c19      	adds	r1, r3, #0
    1b48:	4b05      	ldr	r3, [pc, #20]	; (1b60 <udi_cdc_serial_state_msg_sent+0xb4>)
    1b4a:	4798      	blx	r3
}
    1b4c:	46bd      	mov	sp, r7
    1b4e:	b004      	add	sp, #16
    1b50:	bd80      	pop	{r7, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	200069b4 	.word	0x200069b4
    1b58:	200069b8 	.word	0x200069b8
    1b5c:	200069bc 	.word	0x200069bc
    1b60:	000019e1 	.word	0x000019e1

00001b64 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    1b64:	b590      	push	{r4, r7, lr}
    1b66:	b089      	sub	sp, #36	; 0x24
    1b68:	af02      	add	r7, sp, #8
    1b6a:	1c02      	adds	r2, r0, #0
    1b6c:	1dfb      	adds	r3, r7, #7
    1b6e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1b70:	1c3b      	adds	r3, r7, #0
    1b72:	3316      	adds	r3, #22
    1b74:	2200      	movs	r2, #0
    1b76:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    1b78:	4b45      	ldr	r3, [pc, #276]	; (1c90 <udi_cdc_rx_start+0x12c>)
    1b7a:	4798      	blx	r3
    1b7c:	1c03      	adds	r3, r0, #0
    1b7e:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    1b80:	1c3b      	adds	r3, r7, #0
    1b82:	3316      	adds	r3, #22
    1b84:	781a      	ldrb	r2, [r3, #0]
    1b86:	1c3b      	adds	r3, r7, #0
    1b88:	330f      	adds	r3, #15
    1b8a:	4942      	ldr	r1, [pc, #264]	; (1c94 <udi_cdc_rx_start+0x130>)
    1b8c:	5c8a      	ldrb	r2, [r1, r2]
    1b8e:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    1b90:	1c3b      	adds	r3, r7, #0
    1b92:	3316      	adds	r3, #22
    1b94:	781b      	ldrb	r3, [r3, #0]
    1b96:	4a40      	ldr	r2, [pc, #256]	; (1c98 <udi_cdc_rx_start+0x134>)
    1b98:	5cd3      	ldrb	r3, [r2, r3]
    1b9a:	b2db      	uxtb	r3, r3
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d113      	bne.n	1bc8 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    1ba0:	1c3b      	adds	r3, r7, #0
    1ba2:	3316      	adds	r3, #22
    1ba4:	781a      	ldrb	r2, [r3, #0]
    1ba6:	4b3d      	ldr	r3, [pc, #244]	; (1c9c <udi_cdc_rx_start+0x138>)
    1ba8:	0052      	lsls	r2, r2, #1
    1baa:	5ad3      	ldrh	r3, [r2, r3]
    1bac:	b29a      	uxth	r2, r3
    1bae:	1c3b      	adds	r3, r7, #0
    1bb0:	3316      	adds	r3, #22
    1bb2:	7818      	ldrb	r0, [r3, #0]
    1bb4:	1c3b      	adds	r3, r7, #0
    1bb6:	330f      	adds	r3, #15
    1bb8:	7819      	ldrb	r1, [r3, #0]
    1bba:	4b39      	ldr	r3, [pc, #228]	; (1ca0 <udi_cdc_rx_start+0x13c>)
    1bbc:	0040      	lsls	r0, r0, #1
    1bbe:	1841      	adds	r1, r0, r1
    1bc0:	0049      	lsls	r1, r1, #1
    1bc2:	5acb      	ldrh	r3, [r1, r3]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    1bc4:	429a      	cmp	r2, r3
    1bc6:	d205      	bcs.n	1bd4 <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    1bc8:	693b      	ldr	r3, [r7, #16]
    1bca:	1c18      	adds	r0, r3, #0
    1bcc:	4b35      	ldr	r3, [pc, #212]	; (1ca4 <udi_cdc_rx_start+0x140>)
    1bce:	4798      	blx	r3
		return false;
    1bd0:	2300      	movs	r3, #0
    1bd2:	e058      	b.n	1c86 <udi_cdc_rx_start+0x122>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    1bd4:	1c3b      	adds	r3, r7, #0
    1bd6:	3316      	adds	r3, #22
    1bd8:	781a      	ldrb	r2, [r3, #0]
    1bda:	4b30      	ldr	r3, [pc, #192]	; (1c9c <udi_cdc_rx_start+0x138>)
    1bdc:	0052      	lsls	r2, r2, #1
    1bde:	2100      	movs	r1, #0
    1be0:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    1be2:	1c3b      	adds	r3, r7, #0
    1be4:	3316      	adds	r3, #22
    1be6:	781b      	ldrb	r3, [r3, #0]
    1be8:	1c3a      	adds	r2, r7, #0
    1bea:	320f      	adds	r2, #15
    1bec:	7812      	ldrb	r2, [r2, #0]
    1bee:	4251      	negs	r1, r2
    1bf0:	414a      	adcs	r2, r1
    1bf2:	b2d2      	uxtb	r2, r2
    1bf4:	1c11      	adds	r1, r2, #0
    1bf6:	4a27      	ldr	r2, [pc, #156]	; (1c94 <udi_cdc_rx_start+0x130>)
    1bf8:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    1bfa:	1c3b      	adds	r3, r7, #0
    1bfc:	3316      	adds	r3, #22
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	4a25      	ldr	r2, [pc, #148]	; (1c98 <udi_cdc_rx_start+0x134>)
    1c02:	2101      	movs	r1, #1
    1c04:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    1c06:	693b      	ldr	r3, [r7, #16]
    1c08:	1c18      	adds	r0, r3, #0
    1c0a:	4b26      	ldr	r3, [pc, #152]	; (1ca4 <udi_cdc_rx_start+0x140>)
    1c0c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    1c0e:	1c3b      	adds	r3, r7, #0
    1c10:	3316      	adds	r3, #22
    1c12:	781b      	ldrb	r3, [r3, #0]
    1c14:	1c18      	adds	r0, r3, #0
    1c16:	4b24      	ldr	r3, [pc, #144]	; (1ca8 <udi_cdc_rx_start+0x144>)
    1c18:	4798      	blx	r3
    1c1a:	1c03      	adds	r3, r0, #0
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d005      	beq.n	1c2c <udi_cdc_rx_start+0xc8>
		UDI_CDC_RX_NOTIFY(port);
    1c20:	1c3b      	adds	r3, r7, #0
    1c22:	3316      	adds	r3, #22
    1c24:	781b      	ldrb	r3, [r3, #0]
    1c26:	1c18      	adds	r0, r3, #0
    1c28:	4b20      	ldr	r3, [pc, #128]	; (1cac <udi_cdc_rx_start+0x148>)
    1c2a:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
    1c2c:	1c3b      	adds	r3, r7, #0
    1c2e:	3316      	adds	r3, #22
    1c30:	781b      	ldrb	r3, [r3, #0]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d104      	bne.n	1c40 <udi_cdc_rx_start+0xdc>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    1c36:	1c3b      	adds	r3, r7, #0
    1c38:	3317      	adds	r3, #23
    1c3a:	2205      	movs	r2, #5
    1c3c:	701a      	strb	r2, [r3, #0]
    1c3e:	e004      	b.n	1c4a <udi_cdc_rx_start+0xe6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    1c40:	1c3b      	adds	r3, r7, #0
    1c42:	3317      	adds	r3, #23
    1c44:	2205      	movs	r2, #5
    1c46:	701a      	strb	r2, [r3, #0]
		break;
    1c48:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    1c4a:	1c3b      	adds	r3, r7, #0
    1c4c:	3316      	adds	r3, #22
    1c4e:	7819      	ldrb	r1, [r3, #0]
    1c50:	1c3b      	adds	r3, r7, #0
    1c52:	330f      	adds	r3, #15
    1c54:	781b      	ldrb	r3, [r3, #0]
    1c56:	1c1a      	adds	r2, r3, #0
    1c58:	0092      	lsls	r2, r2, #2
    1c5a:	18d2      	adds	r2, r2, r3
    1c5c:	0193      	lsls	r3, r2, #6
    1c5e:	1c1a      	adds	r2, r3, #0
    1c60:	1c0b      	adds	r3, r1, #0
    1c62:	009b      	lsls	r3, r3, #2
    1c64:	185b      	adds	r3, r3, r1
    1c66:	01db      	lsls	r3, r3, #7
    1c68:	18d2      	adds	r2, r2, r3
    1c6a:	4b11      	ldr	r3, [pc, #68]	; (1cb0 <udi_cdc_rx_start+0x14c>)
    1c6c:	18d2      	adds	r2, r2, r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    1c6e:	1c3b      	adds	r3, r7, #0
    1c70:	3317      	adds	r3, #23
    1c72:	7819      	ldrb	r1, [r3, #0]
    1c74:	23a0      	movs	r3, #160	; 0xa0
    1c76:	005b      	lsls	r3, r3, #1
    1c78:	480e      	ldr	r0, [pc, #56]	; (1cb4 <udi_cdc_rx_start+0x150>)
    1c7a:	9000      	str	r0, [sp, #0]
    1c7c:	1c08      	adds	r0, r1, #0
    1c7e:	2101      	movs	r1, #1
    1c80:	4c0d      	ldr	r4, [pc, #52]	; (1cb8 <udi_cdc_rx_start+0x154>)
    1c82:	47a0      	blx	r4
    1c84:	1c03      	adds	r3, r0, #0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    1c86:	1c18      	adds	r0, r3, #0
    1c88:	46bd      	mov	sp, r7
    1c8a:	b007      	add	sp, #28
    1c8c:	bd90      	pop	{r4, r7, pc}
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	00001425 	.word	0x00001425
    1c94:	20006c50 	.word	0x20006c50
    1c98:	20006c58 	.word	0x20006c58
    1c9c:	20006c54 	.word	0x20006c54
    1ca0:	20006c4c 	.word	0x20006c4c
    1ca4:	0000146d 	.word	0x0000146d
    1ca8:	00002125 	.word	0x00002125
    1cac:	0000aec9 	.word	0x0000aec9
    1cb0:	200069cc 	.word	0x200069cc
    1cb4:	00001cbd 	.word	0x00001cbd
    1cb8:	00007bb5 	.word	0x00007bb5

00001cbc <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1cbc:	b590      	push	{r4, r7, lr}
    1cbe:	b087      	sub	sp, #28
    1cc0:	af02      	add	r7, sp, #8
    1cc2:	6039      	str	r1, [r7, #0]
    1cc4:	1dfb      	adds	r3, r7, #7
    1cc6:	1c01      	adds	r1, r0, #0
    1cc8:	7019      	strb	r1, [r3, #0]
    1cca:	1dbb      	adds	r3, r7, #6
    1ccc:	701a      	strb	r2, [r3, #0]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    1cce:	1dbb      	adds	r3, r7, #6
    1cd0:	781b      	ldrb	r3, [r3, #0]
    1cd2:	2b05      	cmp	r3, #5
    1cd4:	d104      	bne.n	1ce0 <udi_cdc_data_received+0x24>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    1cd6:	1c3b      	adds	r3, r7, #0
    1cd8:	330f      	adds	r3, #15
    1cda:	2200      	movs	r2, #0
    1cdc:	701a      	strb	r2, [r3, #0]
    1cde:	e004      	b.n	1cea <udi_cdc_data_received+0x2e>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    1ce0:	1c3b      	adds	r3, r7, #0
    1ce2:	330f      	adds	r3, #15
    1ce4:	2200      	movs	r2, #0
    1ce6:	701a      	strb	r2, [r3, #0]
		break;
    1ce8:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1cea:	1dfb      	adds	r3, r7, #7
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d000      	beq.n	1cf4 <udi_cdc_data_received+0x38>
		// Abort reception
		return;
    1cf2:	e044      	b.n	1d7e <udi_cdc_data_received+0xc2>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    1cf4:	1c3b      	adds	r3, r7, #0
    1cf6:	330f      	adds	r3, #15
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	4a22      	ldr	r2, [pc, #136]	; (1d84 <udi_cdc_data_received+0xc8>)
    1cfc:	5cd3      	ldrb	r3, [r2, r3]
    1cfe:	b2db      	uxtb	r3, r3
    1d00:	425a      	negs	r2, r3
    1d02:	4153      	adcs	r3, r2
    1d04:	b2da      	uxtb	r2, r3
    1d06:	1c3b      	adds	r3, r7, #0
    1d08:	330e      	adds	r3, #14
    1d0a:	701a      	strb	r2, [r3, #0]
	if (!n) {
    1d0c:	683b      	ldr	r3, [r7, #0]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d11c      	bne.n	1d4c <udi_cdc_data_received+0x90>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    1d12:	1c3b      	adds	r3, r7, #0
    1d14:	330f      	adds	r3, #15
    1d16:	7819      	ldrb	r1, [r3, #0]
    1d18:	1c3b      	adds	r3, r7, #0
    1d1a:	330e      	adds	r3, #14
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	1c1a      	adds	r2, r3, #0
    1d20:	0092      	lsls	r2, r2, #2
    1d22:	18d2      	adds	r2, r2, r3
    1d24:	0193      	lsls	r3, r2, #6
    1d26:	1c1a      	adds	r2, r3, #0
    1d28:	1c0b      	adds	r3, r1, #0
    1d2a:	009b      	lsls	r3, r3, #2
    1d2c:	185b      	adds	r3, r3, r1
    1d2e:	01db      	lsls	r3, r3, #7
    1d30:	18d2      	adds	r2, r2, r3
    1d32:	4b15      	ldr	r3, [pc, #84]	; (1d88 <udi_cdc_data_received+0xcc>)
    1d34:	18d2      	adds	r2, r2, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    1d36:	1dbb      	adds	r3, r7, #6
    1d38:	7819      	ldrb	r1, [r3, #0]
    1d3a:	23a0      	movs	r3, #160	; 0xa0
    1d3c:	005b      	lsls	r3, r3, #1
    1d3e:	4813      	ldr	r0, [pc, #76]	; (1d8c <udi_cdc_data_received+0xd0>)
    1d40:	9000      	str	r0, [sp, #0]
    1d42:	1c08      	adds	r0, r1, #0
    1d44:	2101      	movs	r1, #1
    1d46:	4c12      	ldr	r4, [pc, #72]	; (1d90 <udi_cdc_data_received+0xd4>)
    1d48:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    1d4a:	e018      	b.n	1d7e <udi_cdc_data_received+0xc2>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    1d4c:	1c3b      	adds	r3, r7, #0
    1d4e:	330f      	adds	r3, #15
    1d50:	7818      	ldrb	r0, [r3, #0]
    1d52:	1c3b      	adds	r3, r7, #0
    1d54:	330e      	adds	r3, #14
    1d56:	781a      	ldrb	r2, [r3, #0]
    1d58:	683b      	ldr	r3, [r7, #0]
    1d5a:	b299      	uxth	r1, r3
    1d5c:	4b0d      	ldr	r3, [pc, #52]	; (1d94 <udi_cdc_data_received+0xd8>)
    1d5e:	0040      	lsls	r0, r0, #1
    1d60:	1882      	adds	r2, r0, r2
    1d62:	0052      	lsls	r2, r2, #1
    1d64:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    1d66:	1c3b      	adds	r3, r7, #0
    1d68:	330f      	adds	r3, #15
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	4a0a      	ldr	r2, [pc, #40]	; (1d98 <udi_cdc_data_received+0xdc>)
    1d6e:	2100      	movs	r1, #0
    1d70:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    1d72:	1c3b      	adds	r3, r7, #0
    1d74:	330f      	adds	r3, #15
    1d76:	781b      	ldrb	r3, [r3, #0]
    1d78:	1c18      	adds	r0, r3, #0
    1d7a:	4b08      	ldr	r3, [pc, #32]	; (1d9c <udi_cdc_data_received+0xe0>)
    1d7c:	4798      	blx	r3
}
    1d7e:	46bd      	mov	sp, r7
    1d80:	b005      	add	sp, #20
    1d82:	bd90      	pop	{r4, r7, pc}
    1d84:	20006c50 	.word	0x20006c50
    1d88:	200069cc 	.word	0x200069cc
    1d8c:	00001cbd 	.word	0x00001cbd
    1d90:	00007bb5 	.word	0x00007bb5
    1d94:	20006c4c 	.word	0x20006c4c
    1d98:	20006c58 	.word	0x20006c58
    1d9c:	00001b65 	.word	0x00001b65

00001da0 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1da0:	b580      	push	{r7, lr}
    1da2:	b084      	sub	sp, #16
    1da4:	af00      	add	r7, sp, #0
    1da6:	6039      	str	r1, [r7, #0]
    1da8:	1dfb      	adds	r3, r7, #7
    1daa:	1c01      	adds	r1, r0, #0
    1dac:	7019      	strb	r1, [r3, #0]
    1dae:	1dbb      	adds	r3, r7, #6
    1db0:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    1db2:	1dbb      	adds	r3, r7, #6
    1db4:	781b      	ldrb	r3, [r3, #0]
    1db6:	2b86      	cmp	r3, #134	; 0x86
    1db8:	d104      	bne.n	1dc4 <udi_cdc_data_sent+0x24>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    1dba:	1c3b      	adds	r3, r7, #0
    1dbc:	330f      	adds	r3, #15
    1dbe:	2200      	movs	r2, #0
    1dc0:	701a      	strb	r2, [r3, #0]
    1dc2:	e004      	b.n	1dce <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    1dc4:	1c3b      	adds	r3, r7, #0
    1dc6:	330f      	adds	r3, #15
    1dc8:	2200      	movs	r2, #0
    1dca:	701a      	strb	r2, [r3, #0]
		break;
    1dcc:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1dce:	1dfb      	adds	r3, r7, #7
    1dd0:	781b      	ldrb	r3, [r3, #0]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d000      	beq.n	1dd8 <udi_cdc_data_sent+0x38>
		// Abort transfer
		return;
    1dd6:	e024      	b.n	1e22 <udi_cdc_data_sent+0x82>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    1dd8:	1c3b      	adds	r3, r7, #0
    1dda:	330f      	adds	r3, #15
    1ddc:	7819      	ldrb	r1, [r3, #0]
    1dde:	1c3b      	adds	r3, r7, #0
    1de0:	330f      	adds	r3, #15
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	4a10      	ldr	r2, [pc, #64]	; (1e28 <udi_cdc_data_sent+0x88>)
    1de6:	5cd3      	ldrb	r3, [r2, r3]
    1de8:	b2db      	uxtb	r3, r3
    1dea:	425a      	negs	r2, r3
    1dec:	4153      	adcs	r3, r2
    1dee:	b2db      	uxtb	r3, r3
    1df0:	1c1a      	adds	r2, r3, #0
    1df2:	4b0e      	ldr	r3, [pc, #56]	; (1e2c <udi_cdc_data_sent+0x8c>)
    1df4:	0049      	lsls	r1, r1, #1
    1df6:	188a      	adds	r2, r1, r2
    1df8:	0052      	lsls	r2, r2, #1
    1dfa:	2100      	movs	r1, #0
    1dfc:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    1dfe:	1c3b      	adds	r3, r7, #0
    1e00:	330f      	adds	r3, #15
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	4a0a      	ldr	r2, [pc, #40]	; (1e30 <udi_cdc_data_sent+0x90>)
    1e06:	2100      	movs	r1, #0
    1e08:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    1e0a:	1c3b      	adds	r3, r7, #0
    1e0c:	330f      	adds	r3, #15
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	4a08      	ldr	r2, [pc, #32]	; (1e34 <udi_cdc_data_sent+0x94>)
    1e12:	2100      	movs	r1, #0
    1e14:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    1e16:	1c3b      	adds	r3, r7, #0
    1e18:	330f      	adds	r3, #15
    1e1a:	781b      	ldrb	r3, [r3, #0]
    1e1c:	1c18      	adds	r0, r3, #0
    1e1e:	4b06      	ldr	r3, [pc, #24]	; (1e38 <udi_cdc_data_sent+0x98>)
    1e20:	4798      	blx	r3
}
    1e22:	46bd      	mov	sp, r7
    1e24:	b004      	add	sp, #16
    1e26:	bd80      	pop	{r7, pc}
    1e28:	20006ee0 	.word	0x20006ee0
    1e2c:	20006edc 	.word	0x20006edc
    1e30:	20006eec 	.word	0x20006eec
    1e34:	20006ee8 	.word	0x20006ee8
    1e38:	00001e3d 	.word	0x00001e3d

00001e3c <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    1e3c:	b590      	push	{r4, r7, lr}
    1e3e:	b089      	sub	sp, #36	; 0x24
    1e40:	af02      	add	r7, sp, #8
    1e42:	1c02      	adds	r2, r0, #0
    1e44:	1dfb      	adds	r3, r7, #7
    1e46:	701a      	strb	r2, [r3, #0]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1e48:	1c3b      	adds	r3, r7, #0
    1e4a:	3315      	adds	r3, #21
    1e4c:	2200      	movs	r2, #0
    1e4e:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    1e50:	1c3b      	adds	r3, r7, #0
    1e52:	3315      	adds	r3, #21
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	4a7e      	ldr	r2, [pc, #504]	; (2050 <udi_cdc_tx_send+0x214>)
    1e58:	5cd3      	ldrb	r3, [r2, r3]
    1e5a:	b2db      	uxtb	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d000      	beq.n	1e62 <udi_cdc_tx_send+0x26>
		return; // Already on going or wait next SOF to send next data
    1e60:	e0f3      	b.n	204a <udi_cdc_tx_send+0x20e>
	}
	if (udd_is_high_speed()) {
    1e62:	4b7c      	ldr	r3, [pc, #496]	; (2054 <udi_cdc_tx_send+0x218>)
    1e64:	4798      	blx	r3
    1e66:	1c03      	adds	r3, r0, #0
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d00b      	beq.n	1e84 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    1e6c:	1c3b      	adds	r3, r7, #0
    1e6e:	3315      	adds	r3, #21
    1e70:	781a      	ldrb	r2, [r3, #0]
    1e72:	4b79      	ldr	r3, [pc, #484]	; (2058 <udi_cdc_tx_send+0x21c>)
    1e74:	0052      	lsls	r2, r2, #1
    1e76:	5ad4      	ldrh	r4, [r2, r3]
    1e78:	4b78      	ldr	r3, [pc, #480]	; (205c <udi_cdc_tx_send+0x220>)
    1e7a:	4798      	blx	r3
    1e7c:	1c03      	adds	r3, r0, #0
    1e7e:	429c      	cmp	r4, r3
    1e80:	d10c      	bne.n	1e9c <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    1e82:	e0e2      	b.n	204a <udi_cdc_tx_send+0x20e>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    1e84:	1c3b      	adds	r3, r7, #0
    1e86:	3315      	adds	r3, #21
    1e88:	781a      	ldrb	r2, [r3, #0]
    1e8a:	4b73      	ldr	r3, [pc, #460]	; (2058 <udi_cdc_tx_send+0x21c>)
    1e8c:	0052      	lsls	r2, r2, #1
    1e8e:	5ad4      	ldrh	r4, [r2, r3]
    1e90:	4b73      	ldr	r3, [pc, #460]	; (2060 <udi_cdc_tx_send+0x224>)
    1e92:	4798      	blx	r3
    1e94:	1c03      	adds	r3, r0, #0
    1e96:	429c      	cmp	r4, r3
    1e98:	d100      	bne.n	1e9c <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    1e9a:	e0d6      	b.n	204a <udi_cdc_tx_send+0x20e>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    1e9c:	4b71      	ldr	r3, [pc, #452]	; (2064 <udi_cdc_tx_send+0x228>)
    1e9e:	4798      	blx	r3
    1ea0:	1c03      	adds	r3, r0, #0
    1ea2:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    1ea4:	1c3b      	adds	r3, r7, #0
    1ea6:	3315      	adds	r3, #21
    1ea8:	781a      	ldrb	r2, [r3, #0]
    1eaa:	1c3b      	adds	r3, r7, #0
    1eac:	3317      	adds	r3, #23
    1eae:	496e      	ldr	r1, [pc, #440]	; (2068 <udi_cdc_tx_send+0x22c>)
    1eb0:	5c8a      	ldrb	r2, [r1, r2]
    1eb2:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    1eb4:	1c3b      	adds	r3, r7, #0
    1eb6:	3315      	adds	r3, #21
    1eb8:	7819      	ldrb	r1, [r3, #0]
    1eba:	1c3b      	adds	r3, r7, #0
    1ebc:	3317      	adds	r3, #23
    1ebe:	781a      	ldrb	r2, [r3, #0]
    1ec0:	4b6a      	ldr	r3, [pc, #424]	; (206c <udi_cdc_tx_send+0x230>)
    1ec2:	0049      	lsls	r1, r1, #1
    1ec4:	188a      	adds	r2, r1, r2
    1ec6:	0052      	lsls	r2, r2, #1
    1ec8:	5ad3      	ldrh	r3, [r2, r3]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d120      	bne.n	1f10 <udi_cdc_tx_send+0xd4>
		sof_zlp_counter++;
    1ece:	4b68      	ldr	r3, [pc, #416]	; (2070 <udi_cdc_tx_send+0x234>)
    1ed0:	881b      	ldrh	r3, [r3, #0]
    1ed2:	3301      	adds	r3, #1
    1ed4:	b29a      	uxth	r2, r3
    1ed6:	4b66      	ldr	r3, [pc, #408]	; (2070 <udi_cdc_tx_send+0x234>)
    1ed8:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    1eda:	4b5e      	ldr	r3, [pc, #376]	; (2054 <udi_cdc_tx_send+0x218>)
    1edc:	4798      	blx	r3
    1ede:	1c03      	adds	r3, r0, #0
    1ee0:	2201      	movs	r2, #1
    1ee2:	4053      	eors	r3, r2
    1ee4:	b2db      	uxtb	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d003      	beq.n	1ef2 <udi_cdc_tx_send+0xb6>
    1eea:	4b61      	ldr	r3, [pc, #388]	; (2070 <udi_cdc_tx_send+0x234>)
    1eec:	881b      	ldrh	r3, [r3, #0]
    1eee:	2b63      	cmp	r3, #99	; 0x63
    1ef0:	d909      	bls.n	1f06 <udi_cdc_tx_send+0xca>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    1ef2:	4b58      	ldr	r3, [pc, #352]	; (2054 <udi_cdc_tx_send+0x218>)
    1ef4:	4798      	blx	r3
    1ef6:	1c03      	adds	r3, r0, #0
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d009      	beq.n	1f10 <udi_cdc_tx_send+0xd4>
    1efc:	4b5c      	ldr	r3, [pc, #368]	; (2070 <udi_cdc_tx_send+0x234>)
    1efe:	881a      	ldrh	r2, [r3, #0]
    1f00:	4b5c      	ldr	r3, [pc, #368]	; (2074 <udi_cdc_tx_send+0x238>)
    1f02:	429a      	cmp	r2, r3
    1f04:	d804      	bhi.n	1f10 <udi_cdc_tx_send+0xd4>
			cpu_irq_restore(flags);
    1f06:	693b      	ldr	r3, [r7, #16]
    1f08:	1c18      	adds	r0, r3, #0
    1f0a:	4b5b      	ldr	r3, [pc, #364]	; (2078 <udi_cdc_tx_send+0x23c>)
    1f0c:	4798      	blx	r3
			return;
    1f0e:	e09c      	b.n	204a <udi_cdc_tx_send+0x20e>
		}
	}
	sof_zlp_counter = 0;
    1f10:	4b57      	ldr	r3, [pc, #348]	; (2070 <udi_cdc_tx_send+0x234>)
    1f12:	2200      	movs	r2, #0
    1f14:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    1f16:	1c3b      	adds	r3, r7, #0
    1f18:	3315      	adds	r3, #21
    1f1a:	781b      	ldrb	r3, [r3, #0]
    1f1c:	4a57      	ldr	r2, [pc, #348]	; (207c <udi_cdc_tx_send+0x240>)
    1f1e:	5cd3      	ldrb	r3, [r2, r3]
    1f20:	b2db      	uxtb	r3, r3
    1f22:	2201      	movs	r2, #1
    1f24:	4053      	eors	r3, r2
    1f26:	b2db      	uxtb	r3, r3
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d00c      	beq.n	1f46 <udi_cdc_tx_send+0x10a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    1f2c:	1c3b      	adds	r3, r7, #0
    1f2e:	3315      	adds	r3, #21
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	1c3a      	adds	r2, r7, #0
    1f34:	3217      	adds	r2, #23
    1f36:	7812      	ldrb	r2, [r2, #0]
    1f38:	4251      	negs	r1, r2
    1f3a:	414a      	adcs	r2, r1
    1f3c:	b2d2      	uxtb	r2, r2
    1f3e:	1c11      	adds	r1, r2, #0
    1f40:	4a49      	ldr	r2, [pc, #292]	; (2068 <udi_cdc_tx_send+0x22c>)
    1f42:	54d1      	strb	r1, [r2, r3]
    1f44:	e008      	b.n	1f58 <udi_cdc_tx_send+0x11c>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    1f46:	1c3b      	adds	r3, r7, #0
    1f48:	3317      	adds	r3, #23
    1f4a:	781b      	ldrb	r3, [r3, #0]
    1f4c:	425a      	negs	r2, r3
    1f4e:	4153      	adcs	r3, r2
    1f50:	b2da      	uxtb	r2, r3
    1f52:	1c3b      	adds	r3, r7, #0
    1f54:	3317      	adds	r3, #23
    1f56:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    1f58:	1c3b      	adds	r3, r7, #0
    1f5a:	3315      	adds	r3, #21
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	4a3c      	ldr	r2, [pc, #240]	; (2050 <udi_cdc_tx_send+0x214>)
    1f60:	2101      	movs	r1, #1
    1f62:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    1f64:	693b      	ldr	r3, [r7, #16]
    1f66:	1c18      	adds	r0, r3, #0
    1f68:	4b43      	ldr	r3, [pc, #268]	; (2078 <udi_cdc_tx_send+0x23c>)
    1f6a:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    1f6c:	1c3b      	adds	r3, r7, #0
    1f6e:	3315      	adds	r3, #21
    1f70:	7819      	ldrb	r1, [r3, #0]
    1f72:	1c3b      	adds	r3, r7, #0
    1f74:	3317      	adds	r3, #23
    1f76:	781a      	ldrb	r2, [r3, #0]
    1f78:	4b3c      	ldr	r3, [pc, #240]	; (206c <udi_cdc_tx_send+0x230>)
    1f7a:	0049      	lsls	r1, r1, #1
    1f7c:	188a      	adds	r2, r1, r2
    1f7e:	0052      	lsls	r2, r2, #1
    1f80:	5ad2      	ldrh	r2, [r2, r3]
    1f82:	1c3b      	adds	r3, r7, #0
    1f84:	330f      	adds	r3, #15
    1f86:	3a41      	subs	r2, #65	; 0x41
    1f88:	3aff      	subs	r2, #255	; 0xff
    1f8a:	1e51      	subs	r1, r2, #1
    1f8c:	418a      	sbcs	r2, r1
    1f8e:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    1f90:	1c3b      	adds	r3, r7, #0
    1f92:	330f      	adds	r3, #15
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d01a      	beq.n	1fd0 <udi_cdc_tx_send+0x194>
		if (udd_is_high_speed()) {
    1f9a:	4b2e      	ldr	r3, [pc, #184]	; (2054 <udi_cdc_tx_send+0x218>)
    1f9c:	4798      	blx	r3
    1f9e:	1c03      	adds	r3, r0, #0
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d00a      	beq.n	1fba <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    1fa4:	1c3b      	adds	r3, r7, #0
    1fa6:	3315      	adds	r3, #21
    1fa8:	781c      	ldrb	r4, [r3, #0]
    1faa:	4b2c      	ldr	r3, [pc, #176]	; (205c <udi_cdc_tx_send+0x220>)
    1fac:	4798      	blx	r3
    1fae:	1c03      	adds	r3, r0, #0
    1fb0:	1c19      	adds	r1, r3, #0
    1fb2:	4b29      	ldr	r3, [pc, #164]	; (2058 <udi_cdc_tx_send+0x21c>)
    1fb4:	0062      	lsls	r2, r4, #1
    1fb6:	52d1      	strh	r1, [r2, r3]
    1fb8:	e011      	b.n	1fde <udi_cdc_tx_send+0x1a2>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    1fba:	1c3b      	adds	r3, r7, #0
    1fbc:	3315      	adds	r3, #21
    1fbe:	781c      	ldrb	r4, [r3, #0]
    1fc0:	4b27      	ldr	r3, [pc, #156]	; (2060 <udi_cdc_tx_send+0x224>)
    1fc2:	4798      	blx	r3
    1fc4:	1c03      	adds	r3, r0, #0
    1fc6:	1c19      	adds	r1, r3, #0
    1fc8:	4b23      	ldr	r3, [pc, #140]	; (2058 <udi_cdc_tx_send+0x21c>)
    1fca:	0062      	lsls	r2, r4, #1
    1fcc:	52d1      	strh	r1, [r2, r3]
    1fce:	e006      	b.n	1fde <udi_cdc_tx_send+0x1a2>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    1fd0:	1c3b      	adds	r3, r7, #0
    1fd2:	3315      	adds	r3, #21
    1fd4:	781a      	ldrb	r2, [r3, #0]
    1fd6:	4b20      	ldr	r3, [pc, #128]	; (2058 <udi_cdc_tx_send+0x21c>)
    1fd8:	0052      	lsls	r2, r2, #1
    1fda:	2100      	movs	r1, #0
    1fdc:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    1fde:	1c3b      	adds	r3, r7, #0
    1fe0:	3315      	adds	r3, #21
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d104      	bne.n	1ff2 <udi_cdc_tx_send+0x1b6>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    1fe8:	1c3b      	adds	r3, r7, #0
    1fea:	3316      	adds	r3, #22
    1fec:	2286      	movs	r2, #134	; 0x86
    1fee:	701a      	strb	r2, [r3, #0]
    1ff0:	e004      	b.n	1ffc <udi_cdc_tx_send+0x1c0>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    1ff2:	1c3b      	adds	r3, r7, #0
    1ff4:	3316      	adds	r3, #22
    1ff6:	2286      	movs	r2, #134	; 0x86
    1ff8:	701a      	strb	r2, [r3, #0]
		break;
    1ffa:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    1ffc:	1c3b      	adds	r3, r7, #0
    1ffe:	3315      	adds	r3, #21
    2000:	7819      	ldrb	r1, [r3, #0]
    2002:	1c3b      	adds	r3, r7, #0
    2004:	3317      	adds	r3, #23
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	1c1a      	adds	r2, r3, #0
    200a:	0092      	lsls	r2, r2, #2
    200c:	18d2      	adds	r2, r2, r3
    200e:	0193      	lsls	r3, r2, #6
    2010:	1c1a      	adds	r2, r3, #0
    2012:	1c0b      	adds	r3, r1, #0
    2014:	009b      	lsls	r3, r3, #2
    2016:	185b      	adds	r3, r3, r1
    2018:	01db      	lsls	r3, r3, #7
    201a:	18d2      	adds	r2, r2, r3
    201c:	4b18      	ldr	r3, [pc, #96]	; (2080 <udi_cdc_tx_send+0x244>)
    201e:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    2020:	1c3b      	adds	r3, r7, #0
    2022:	3315      	adds	r3, #21
    2024:	7818      	ldrb	r0, [r3, #0]
    2026:	1c3b      	adds	r3, r7, #0
    2028:	3317      	adds	r3, #23
    202a:	7819      	ldrb	r1, [r3, #0]
    202c:	4b0f      	ldr	r3, [pc, #60]	; (206c <udi_cdc_tx_send+0x230>)
    202e:	0040      	lsls	r0, r0, #1
    2030:	1841      	adds	r1, r0, r1
    2032:	0049      	lsls	r1, r1, #1
    2034:	5acb      	ldrh	r3, [r1, r3]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    2036:	1c39      	adds	r1, r7, #0
    2038:	3116      	adds	r1, #22
    203a:	7808      	ldrb	r0, [r1, #0]
    203c:	1c39      	adds	r1, r7, #0
    203e:	310f      	adds	r1, #15
    2040:	7809      	ldrb	r1, [r1, #0]
    2042:	4c10      	ldr	r4, [pc, #64]	; (2084 <udi_cdc_tx_send+0x248>)
    2044:	9400      	str	r4, [sp, #0]
    2046:	4c10      	ldr	r4, [pc, #64]	; (2088 <udi_cdc_tx_send+0x24c>)
    2048:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    204a:	46bd      	mov	sp, r7
    204c:	b007      	add	sp, #28
    204e:	bd90      	pop	{r4, r7, pc}
    2050:	20006ee8 	.word	0x20006ee8
    2054:	00007765 	.word	0x00007765
    2058:	20006ee4 	.word	0x20006ee4
    205c:	0000778d 	.word	0x0000778d
    2060:	00007771 	.word	0x00007771
    2064:	00001425 	.word	0x00001425
    2068:	20006ee0 	.word	0x20006ee0
    206c:	20006edc 	.word	0x20006edc
    2070:	20006ef2 	.word	0x20006ef2
    2074:	0000031f 	.word	0x0000031f
    2078:	0000146d 	.word	0x0000146d
    207c:	20006eec 	.word	0x20006eec
    2080:	20006c5c 	.word	0x20006c5c
    2084:	00001da1 	.word	0x00001da1
    2088:	00007bb5 	.word	0x00007bb5

0000208c <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
    208c:	b580      	push	{r7, lr}
    208e:	af00      	add	r7, sp, #0
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    2090:	2000      	movs	r0, #0
    2092:	2101      	movs	r1, #1
    2094:	2240      	movs	r2, #64	; 0x40
    2096:	4b02      	ldr	r3, [pc, #8]	; (20a0 <udi_cdc_signal_overrun+0x14>)
    2098:	4798      	blx	r3
}
    209a:	46bd      	mov	sp, r7
    209c:	bd80      	pop	{r7, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	0000191d 	.word	0x0000191d

000020a4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	b086      	sub	sp, #24
    20a8:	af00      	add	r7, sp, #0
    20aa:	1c02      	adds	r2, r0, #0
    20ac:	1dfb      	adds	r3, r7, #7
    20ae:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    20b0:	1c3b      	adds	r3, r7, #0
    20b2:	3317      	adds	r3, #23
    20b4:	2200      	movs	r2, #0
    20b6:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    20b8:	4b15      	ldr	r3, [pc, #84]	; (2110 <udi_cdc_multi_get_nb_received_data+0x6c>)
    20ba:	4798      	blx	r3
    20bc:	1c03      	adds	r3, r0, #0
    20be:	613b      	str	r3, [r7, #16]
	pos = udi_cdc_rx_pos[port];
    20c0:	1c3b      	adds	r3, r7, #0
    20c2:	3317      	adds	r3, #23
    20c4:	7819      	ldrb	r1, [r3, #0]
    20c6:	1c3b      	adds	r3, r7, #0
    20c8:	330e      	adds	r3, #14
    20ca:	4a12      	ldr	r2, [pc, #72]	; (2114 <udi_cdc_multi_get_nb_received_data+0x70>)
    20cc:	0049      	lsls	r1, r1, #1
    20ce:	5a8a      	ldrh	r2, [r1, r2]
    20d0:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    20d2:	1c3b      	adds	r3, r7, #0
    20d4:	3317      	adds	r3, #23
    20d6:	7819      	ldrb	r1, [r3, #0]
    20d8:	1c3b      	adds	r3, r7, #0
    20da:	3317      	adds	r3, #23
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	4a0e      	ldr	r2, [pc, #56]	; (2118 <udi_cdc_multi_get_nb_received_data+0x74>)
    20e0:	5cd3      	ldrb	r3, [r2, r3]
    20e2:	b2db      	uxtb	r3, r3
    20e4:	1c1a      	adds	r2, r3, #0
    20e6:	4b0d      	ldr	r3, [pc, #52]	; (211c <udi_cdc_multi_get_nb_received_data+0x78>)
    20e8:	0049      	lsls	r1, r1, #1
    20ea:	188a      	adds	r2, r1, r2
    20ec:	0052      	lsls	r2, r2, #1
    20ee:	5ad3      	ldrh	r3, [r2, r3]
    20f0:	1c1a      	adds	r2, r3, #0
    20f2:	1c3b      	adds	r3, r7, #0
    20f4:	330e      	adds	r3, #14
    20f6:	881b      	ldrh	r3, [r3, #0]
    20f8:	1ad3      	subs	r3, r2, r3
    20fa:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    20fc:	693b      	ldr	r3, [r7, #16]
    20fe:	1c18      	adds	r0, r3, #0
    2100:	4b07      	ldr	r3, [pc, #28]	; (2120 <udi_cdc_multi_get_nb_received_data+0x7c>)
    2102:	4798      	blx	r3
	return nb_received;
    2104:	68bb      	ldr	r3, [r7, #8]
}
    2106:	1c18      	adds	r0, r3, #0
    2108:	46bd      	mov	sp, r7
    210a:	b006      	add	sp, #24
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00001425 	.word	0x00001425
    2114:	20006c54 	.word	0x20006c54
    2118:	20006c50 	.word	0x20006c50
    211c:	20006c4c 	.word	0x20006c4c
    2120:	0000146d 	.word	0x0000146d

00002124 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    2124:	b580      	push	{r7, lr}
    2126:	b082      	sub	sp, #8
    2128:	af00      	add	r7, sp, #0
    212a:	1c02      	adds	r2, r0, #0
    212c:	1dfb      	adds	r3, r7, #7
    212e:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    2130:	1dfb      	adds	r3, r7, #7
    2132:	781b      	ldrb	r3, [r3, #0]
    2134:	1c18      	adds	r0, r3, #0
    2136:	4b05      	ldr	r3, [pc, #20]	; (214c <udi_cdc_multi_is_rx_ready+0x28>)
    2138:	4798      	blx	r3
    213a:	1c03      	adds	r3, r0, #0
    213c:	1e5a      	subs	r2, r3, #1
    213e:	4193      	sbcs	r3, r2
    2140:	b2db      	uxtb	r3, r3
}
    2142:	1c18      	adds	r0, r3, #0
    2144:	46bd      	mov	sp, r7
    2146:	b002      	add	sp, #8
    2148:	bd80      	pop	{r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	000020a5 	.word	0x000020a5

00002150 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
    2150:	b580      	push	{r7, lr}
    2152:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
    2154:	2000      	movs	r0, #0
    2156:	4b03      	ldr	r3, [pc, #12]	; (2164 <udi_cdc_is_rx_ready+0x14>)
    2158:	4798      	blx	r3
    215a:	1c03      	adds	r3, r0, #0
}
    215c:	1c18      	adds	r0, r3, #0
    215e:	46bd      	mov	sp, r7
    2160:	bd80      	pop	{r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	00002125 	.word	0x00002125

00002168 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    2168:	b590      	push	{r4, r7, lr}
    216a:	b087      	sub	sp, #28
    216c:	af00      	add	r7, sp, #0
    216e:	1c02      	adds	r2, r0, #0
    2170:	1dfb      	adds	r3, r7, #7
    2172:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    2174:	2300      	movs	r3, #0
    2176:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2178:	1c3b      	adds	r3, r7, #0
    217a:	3312      	adds	r3, #18
    217c:	2200      	movs	r2, #0
    217e:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2180:	1c3b      	adds	r3, r7, #0
    2182:	3312      	adds	r3, #18
    2184:	781a      	ldrb	r2, [r3, #0]
    2186:	4941      	ldr	r1, [pc, #260]	; (228c <udi_cdc_multi_getc+0x124>)
    2188:	1c13      	adds	r3, r2, #0
    218a:	00db      	lsls	r3, r3, #3
    218c:	1a9b      	subs	r3, r3, r2
    218e:	18cb      	adds	r3, r1, r3
    2190:	799a      	ldrb	r2, [r3, #6]
    2192:	1c3b      	adds	r3, r7, #0
    2194:	3313      	adds	r3, #19
    2196:	3a09      	subs	r2, #9
    2198:	4251      	negs	r1, r2
    219a:	414a      	adcs	r2, r1
    219c:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    219e:	4b3c      	ldr	r3, [pc, #240]	; (2290 <udi_cdc_multi_getc+0x128>)
    21a0:	4798      	blx	r3
    21a2:	1c03      	adds	r3, r0, #0
    21a4:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    21a6:	1c3b      	adds	r3, r7, #0
    21a8:	3312      	adds	r3, #18
    21aa:	7819      	ldrb	r1, [r3, #0]
    21ac:	1c3b      	adds	r3, r7, #0
    21ae:	330a      	adds	r3, #10
    21b0:	4a38      	ldr	r2, [pc, #224]	; (2294 <udi_cdc_multi_getc+0x12c>)
    21b2:	0049      	lsls	r1, r1, #1
    21b4:	5a8a      	ldrh	r2, [r1, r2]
    21b6:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    21b8:	1c3b      	adds	r3, r7, #0
    21ba:	3312      	adds	r3, #18
    21bc:	781a      	ldrb	r2, [r3, #0]
    21be:	1c3b      	adds	r3, r7, #0
    21c0:	3309      	adds	r3, #9
    21c2:	4935      	ldr	r1, [pc, #212]	; (2298 <udi_cdc_multi_getc+0x130>)
    21c4:	5c8a      	ldrb	r2, [r1, r2]
    21c6:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
    21c8:	68fb      	ldr	r3, [r7, #12]
    21ca:	1c18      	adds	r0, r3, #0
    21cc:	4b33      	ldr	r3, [pc, #204]	; (229c <udi_cdc_multi_getc+0x134>)
    21ce:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
    21d0:	46c0      	nop			; (mov r8, r8)
    21d2:	1c3b      	adds	r3, r7, #0
    21d4:	3312      	adds	r3, #18
    21d6:	7819      	ldrb	r1, [r3, #0]
    21d8:	1c3b      	adds	r3, r7, #0
    21da:	3309      	adds	r3, #9
    21dc:	781a      	ldrb	r2, [r3, #0]
    21de:	4b30      	ldr	r3, [pc, #192]	; (22a0 <udi_cdc_multi_getc+0x138>)
    21e0:	0049      	lsls	r1, r1, #1
    21e2:	188a      	adds	r2, r1, r2
    21e4:	0052      	lsls	r2, r2, #1
    21e6:	5ad3      	ldrh	r3, [r2, r3]
    21e8:	1c3a      	adds	r2, r7, #0
    21ea:	320a      	adds	r2, #10
    21ec:	8812      	ldrh	r2, [r2, #0]
    21ee:	429a      	cmp	r2, r3
    21f0:	d310      	bcc.n	2214 <udi_cdc_multi_getc+0xac>
		if (!udi_cdc_data_running) {
    21f2:	4b2c      	ldr	r3, [pc, #176]	; (22a4 <udi_cdc_multi_getc+0x13c>)
    21f4:	781b      	ldrb	r3, [r3, #0]
    21f6:	b2db      	uxtb	r3, r3
    21f8:	2201      	movs	r2, #1
    21fa:	4053      	eors	r3, r2
    21fc:	b2db      	uxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	d001      	beq.n	2206 <udi_cdc_multi_getc+0x9e>
			return 0;
    2202:	2300      	movs	r3, #0
    2204:	e03e      	b.n	2284 <udi_cdc_multi_getc+0x11c>
    2206:	1c3b      	adds	r3, r7, #0
    2208:	3313      	adds	r3, #19
    220a:	1c3a      	adds	r2, r7, #0
    220c:	3213      	adds	r2, #19
    220e:	7812      	ldrb	r2, [r2, #0]
    2210:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    2212:	e7c4      	b.n	219e <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    2214:	1c3b      	adds	r3, r7, #0
    2216:	3312      	adds	r3, #18
    2218:	7819      	ldrb	r1, [r3, #0]
    221a:	1c3b      	adds	r3, r7, #0
    221c:	3309      	adds	r3, #9
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	1c3a      	adds	r2, r7, #0
    2222:	320a      	adds	r2, #10
    2224:	8810      	ldrh	r0, [r2, #0]
    2226:	4c20      	ldr	r4, [pc, #128]	; (22a8 <udi_cdc_multi_getc+0x140>)
    2228:	1c1a      	adds	r2, r3, #0
    222a:	0092      	lsls	r2, r2, #2
    222c:	18d2      	adds	r2, r2, r3
    222e:	0193      	lsls	r3, r2, #6
    2230:	1c1a      	adds	r2, r3, #0
    2232:	1c0b      	adds	r3, r1, #0
    2234:	009b      	lsls	r3, r3, #2
    2236:	185b      	adds	r3, r3, r1
    2238:	01db      	lsls	r3, r3, #7
    223a:	18d3      	adds	r3, r2, r3
    223c:	18e3      	adds	r3, r4, r3
    223e:	5c1b      	ldrb	r3, [r3, r0]
    2240:	697a      	ldr	r2, [r7, #20]
    2242:	4313      	orrs	r3, r2
    2244:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    2246:	1c3b      	adds	r3, r7, #0
    2248:	3312      	adds	r3, #18
    224a:	781a      	ldrb	r2, [r3, #0]
    224c:	1c3b      	adds	r3, r7, #0
    224e:	330a      	adds	r3, #10
    2250:	881b      	ldrh	r3, [r3, #0]
    2252:	3301      	adds	r3, #1
    2254:	b299      	uxth	r1, r3
    2256:	4b0f      	ldr	r3, [pc, #60]	; (2294 <udi_cdc_multi_getc+0x12c>)
    2258:	0052      	lsls	r2, r2, #1
    225a:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    225c:	1c3b      	adds	r3, r7, #0
    225e:	3312      	adds	r3, #18
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	1c18      	adds	r0, r3, #0
    2264:	4b11      	ldr	r3, [pc, #68]	; (22ac <udi_cdc_multi_getc+0x144>)
    2266:	4798      	blx	r3

	if (b_databit_9) {
    2268:	1c3b      	adds	r3, r7, #0
    226a:	3313      	adds	r3, #19
    226c:	781b      	ldrb	r3, [r3, #0]
    226e:	2b00      	cmp	r3, #0
    2270:	d007      	beq.n	2282 <udi_cdc_multi_getc+0x11a>
		// Receive MSB
		b_databit_9 = false;
    2272:	1c3b      	adds	r3, r7, #0
    2274:	3313      	adds	r3, #19
    2276:	2200      	movs	r2, #0
    2278:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    227a:	697b      	ldr	r3, [r7, #20]
    227c:	021b      	lsls	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    2280:	e78d      	b.n	219e <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    2282:	697b      	ldr	r3, [r7, #20]
}
    2284:	1c18      	adds	r0, r3, #0
    2286:	46bd      	mov	sp, r7
    2288:	b007      	add	sp, #28
    228a:	bd90      	pop	{r4, r7, pc}
    228c:	200069ac 	.word	0x200069ac
    2290:	00001425 	.word	0x00001425
    2294:	20006c54 	.word	0x20006c54
    2298:	20006c50 	.word	0x20006c50
    229c:	0000146d 	.word	0x0000146d
    22a0:	20006c4c 	.word	0x20006c4c
    22a4:	200069ca 	.word	0x200069ca
    22a8:	200069cc 	.word	0x200069cc
    22ac:	00001b65 	.word	0x00001b65

000022b0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    22b0:	b580      	push	{r7, lr}
    22b2:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
    22b4:	2000      	movs	r0, #0
    22b6:	4b03      	ldr	r3, [pc, #12]	; (22c4 <udi_cdc_getc+0x14>)
    22b8:	4798      	blx	r3
    22ba:	1c03      	adds	r3, r0, #0
}
    22bc:	1c18      	adds	r0, r3, #0
    22be:	46bd      	mov	sp, r7
    22c0:	bd80      	pop	{r7, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	00002169 	.word	0x00002169

000022c8 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b088      	sub	sp, #32
    22cc:	af00      	add	r7, sp, #0
    22ce:	1c02      	adds	r2, r0, #0
    22d0:	1dfb      	adds	r3, r7, #7
    22d2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    22d4:	1c3b      	adds	r3, r7, #0
    22d6:	331b      	adds	r3, #27
    22d8:	2200      	movs	r2, #0
    22da:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    22dc:	4b33      	ldr	r3, [pc, #204]	; (23ac <udi_cdc_multi_get_free_tx_buffer+0xe4>)
    22de:	4798      	blx	r3
    22e0:	1c03      	adds	r3, r0, #0
    22e2:	617b      	str	r3, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
    22e4:	1c3b      	adds	r3, r7, #0
    22e6:	331b      	adds	r3, #27
    22e8:	781a      	ldrb	r2, [r3, #0]
    22ea:	1c3b      	adds	r3, r7, #0
    22ec:	3313      	adds	r3, #19
    22ee:	4930      	ldr	r1, [pc, #192]	; (23b0 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    22f0:	5c8a      	ldrb	r2, [r1, r2]
    22f2:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    22f4:	1c3b      	adds	r3, r7, #0
    22f6:	331b      	adds	r3, #27
    22f8:	7819      	ldrb	r1, [r3, #0]
    22fa:	1c3b      	adds	r3, r7, #0
    22fc:	3313      	adds	r3, #19
    22fe:	781a      	ldrb	r2, [r3, #0]
    2300:	4b2c      	ldr	r3, [pc, #176]	; (23b4 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2302:	0049      	lsls	r1, r1, #1
    2304:	188a      	adds	r2, r1, r2
    2306:	0052      	lsls	r2, r2, #1
    2308:	5ad3      	ldrh	r3, [r2, r3]
    230a:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
    230c:	1c3b      	adds	r3, r7, #0
    230e:	331b      	adds	r3, #27
    2310:	7819      	ldrb	r1, [r3, #0]
    2312:	1c3b      	adds	r3, r7, #0
    2314:	3313      	adds	r3, #19
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	425a      	negs	r2, r3
    231a:	4153      	adcs	r3, r2
    231c:	b2db      	uxtb	r3, r3
    231e:	1c1a      	adds	r2, r3, #0
    2320:	4b24      	ldr	r3, [pc, #144]	; (23b4 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2322:	0049      	lsls	r1, r1, #1
    2324:	188a      	adds	r2, r1, r2
    2326:	0052      	lsls	r2, r2, #1
    2328:	5ad3      	ldrh	r3, [r2, r3]
    232a:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    232c:	69fa      	ldr	r2, [r7, #28]
    232e:	23a0      	movs	r3, #160	; 0xa0
    2330:	005b      	lsls	r3, r3, #1
    2332:	429a      	cmp	r2, r3
    2334:	d12c      	bne.n	2390 <udi_cdc_multi_get_free_tx_buffer+0xc8>
		if ((!udi_cdc_tx_trans_ongoing[port])
    2336:	1c3b      	adds	r3, r7, #0
    2338:	331b      	adds	r3, #27
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	4a1e      	ldr	r2, [pc, #120]	; (23b8 <udi_cdc_multi_get_free_tx_buffer+0xf0>)
    233e:	5cd3      	ldrb	r3, [r2, r3]
    2340:	b2db      	uxtb	r3, r3
    2342:	2201      	movs	r2, #1
    2344:	4053      	eors	r3, r2
    2346:	b2db      	uxtb	r3, r3
    2348:	2b00      	cmp	r3, #0
    234a:	d021      	beq.n	2390 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    234c:	1c3b      	adds	r3, r7, #0
    234e:	331b      	adds	r3, #27
    2350:	781b      	ldrb	r3, [r3, #0]
    2352:	4a1a      	ldr	r2, [pc, #104]	; (23bc <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    2354:	5cd3      	ldrb	r3, [r2, r3]
    2356:	b2db      	uxtb	r3, r3
    2358:	2201      	movs	r2, #1
    235a:	4053      	eors	r3, r2
    235c:	b2db      	uxtb	r3, r3
    235e:	2b00      	cmp	r3, #0
    2360:	d016      	beq.n	2390 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    2362:	1c3b      	adds	r3, r7, #0
    2364:	331b      	adds	r3, #27
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	4a14      	ldr	r2, [pc, #80]	; (23bc <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    236a:	2101      	movs	r1, #1
    236c:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    236e:	1c3b      	adds	r3, r7, #0
    2370:	331b      	adds	r3, #27
    2372:	781b      	ldrb	r3, [r3, #0]
    2374:	1c3a      	adds	r2, r7, #0
    2376:	3213      	adds	r2, #19
    2378:	7812      	ldrb	r2, [r2, #0]
    237a:	4251      	negs	r1, r2
    237c:	414a      	adcs	r2, r1
    237e:	b2d2      	uxtb	r2, r2
    2380:	1c11      	adds	r1, r2, #0
    2382:	4a0b      	ldr	r2, [pc, #44]	; (23b0 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    2384:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    2386:	2300      	movs	r3, #0
    2388:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
    238a:	23a0      	movs	r3, #160	; 0xa0
    238c:	005b      	lsls	r3, r3, #1
    238e:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    2390:	69fb      	ldr	r3, [r7, #28]
    2392:	22a0      	movs	r2, #160	; 0xa0
    2394:	0052      	lsls	r2, r2, #1
    2396:	1ad3      	subs	r3, r2, r3
    2398:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    239a:	697b      	ldr	r3, [r7, #20]
    239c:	1c18      	adds	r0, r3, #0
    239e:	4b08      	ldr	r3, [pc, #32]	; (23c0 <udi_cdc_multi_get_free_tx_buffer+0xf8>)
    23a0:	4798      	blx	r3
	return retval;
    23a2:	68bb      	ldr	r3, [r7, #8]
}
    23a4:	1c18      	adds	r0, r3, #0
    23a6:	46bd      	mov	sp, r7
    23a8:	b008      	add	sp, #32
    23aa:	bd80      	pop	{r7, pc}
    23ac:	00001425 	.word	0x00001425
    23b0:	20006ee0 	.word	0x20006ee0
    23b4:	20006edc 	.word	0x20006edc
    23b8:	20006ee8 	.word	0x20006ee8
    23bc:	20006eec 	.word	0x20006eec
    23c0:	0000146d 	.word	0x0000146d

000023c4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	1c02      	adds	r2, r0, #0
    23cc:	1dfb      	adds	r3, r7, #7
    23ce:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    23d0:	1dfb      	adds	r3, r7, #7
    23d2:	781b      	ldrb	r3, [r3, #0]
    23d4:	1c18      	adds	r0, r3, #0
    23d6:	4b05      	ldr	r3, [pc, #20]	; (23ec <udi_cdc_multi_is_tx_ready+0x28>)
    23d8:	4798      	blx	r3
    23da:	1c03      	adds	r3, r0, #0
    23dc:	1e5a      	subs	r2, r3, #1
    23de:	4193      	sbcs	r3, r2
    23e0:	b2db      	uxtb	r3, r3
}
    23e2:	1c18      	adds	r0, r3, #0
    23e4:	46bd      	mov	sp, r7
    23e6:	b002      	add	sp, #8
    23e8:	bd80      	pop	{r7, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	000022c9 	.word	0x000022c9

000023f0 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
    23f4:	2000      	movs	r0, #0
    23f6:	4b03      	ldr	r3, [pc, #12]	; (2404 <udi_cdc_is_tx_ready+0x14>)
    23f8:	4798      	blx	r3
    23fa:	1c03      	adds	r3, r0, #0
}
    23fc:	1c18      	adds	r0, r3, #0
    23fe:	46bd      	mov	sp, r7
    2400:	bd80      	pop	{r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	000023c5 	.word	0x000023c5

00002408 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    2408:	b5f0      	push	{r4, r5, r6, r7, lr}
    240a:	b087      	sub	sp, #28
    240c:	af00      	add	r7, sp, #0
    240e:	1c02      	adds	r2, r0, #0
    2410:	6039      	str	r1, [r7, #0]
    2412:	1dfb      	adds	r3, r7, #7
    2414:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2416:	1c3b      	adds	r3, r7, #0
    2418:	3316      	adds	r3, #22
    241a:	2200      	movs	r2, #0
    241c:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    241e:	1c3b      	adds	r3, r7, #0
    2420:	3316      	adds	r3, #22
    2422:	781a      	ldrb	r2, [r3, #0]
    2424:	493a      	ldr	r1, [pc, #232]	; (2510 <udi_cdc_multi_putc+0x108>)
    2426:	1c13      	adds	r3, r2, #0
    2428:	00db      	lsls	r3, r3, #3
    242a:	1a9b      	subs	r3, r3, r2
    242c:	18cb      	adds	r3, r1, r3
    242e:	799a      	ldrb	r2, [r3, #6]
    2430:	1c3b      	adds	r3, r7, #0
    2432:	3317      	adds	r3, #23
    2434:	3a09      	subs	r2, #9
    2436:	4251      	negs	r1, r2
    2438:	414a      	adcs	r2, r1
    243a:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    243c:	1c3b      	adds	r3, r7, #0
    243e:	3316      	adds	r3, #22
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	1c18      	adds	r0, r3, #0
    2444:	4b33      	ldr	r3, [pc, #204]	; (2514 <udi_cdc_multi_putc+0x10c>)
    2446:	4798      	blx	r3
    2448:	1c03      	adds	r3, r0, #0
    244a:	2201      	movs	r2, #1
    244c:	4053      	eors	r3, r2
    244e:	b2db      	uxtb	r3, r3
    2450:	2b00      	cmp	r3, #0
    2452:	d010      	beq.n	2476 <udi_cdc_multi_putc+0x6e>
		if (!udi_cdc_data_running) {
    2454:	4b30      	ldr	r3, [pc, #192]	; (2518 <udi_cdc_multi_putc+0x110>)
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	b2db      	uxtb	r3, r3
    245a:	2201      	movs	r2, #1
    245c:	4053      	eors	r3, r2
    245e:	b2db      	uxtb	r3, r3
    2460:	2b00      	cmp	r3, #0
    2462:	d001      	beq.n	2468 <udi_cdc_multi_putc+0x60>
			return false;
    2464:	2300      	movs	r3, #0
    2466:	e04e      	b.n	2506 <udi_cdc_multi_putc+0xfe>
    2468:	1c3b      	adds	r3, r7, #0
    246a:	3317      	adds	r3, #23
    246c:	1c3a      	adds	r2, r7, #0
    246e:	3217      	adds	r2, #23
    2470:	7812      	ldrb	r2, [r2, #0]
    2472:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    2474:	e7e2      	b.n	243c <udi_cdc_multi_putc+0x34>
	}

	// Write value
	flags = cpu_irq_save();
    2476:	4b29      	ldr	r3, [pc, #164]	; (251c <udi_cdc_multi_putc+0x114>)
    2478:	4798      	blx	r3
    247a:	1c03      	adds	r3, r0, #0
    247c:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    247e:	1c3b      	adds	r3, r7, #0
    2480:	3316      	adds	r3, #22
    2482:	781a      	ldrb	r2, [r3, #0]
    2484:	1c3b      	adds	r3, r7, #0
    2486:	330f      	adds	r3, #15
    2488:	4925      	ldr	r1, [pc, #148]	; (2520 <udi_cdc_multi_putc+0x118>)
    248a:	5c8a      	ldrb	r2, [r1, r2]
    248c:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    248e:	1c3b      	adds	r3, r7, #0
    2490:	3316      	adds	r3, #22
    2492:	7819      	ldrb	r1, [r3, #0]
    2494:	1c3b      	adds	r3, r7, #0
    2496:	330f      	adds	r3, #15
    2498:	781b      	ldrb	r3, [r3, #0]
    249a:	1c3a      	adds	r2, r7, #0
    249c:	3216      	adds	r2, #22
    249e:	7814      	ldrb	r4, [r2, #0]
    24a0:	1c3a      	adds	r2, r7, #0
    24a2:	320f      	adds	r2, #15
    24a4:	7810      	ldrb	r0, [r2, #0]
    24a6:	4a1f      	ldr	r2, [pc, #124]	; (2524 <udi_cdc_multi_putc+0x11c>)
    24a8:	0065      	lsls	r5, r4, #1
    24aa:	182d      	adds	r5, r5, r0
    24ac:	006d      	lsls	r5, r5, #1
    24ae:	5aaa      	ldrh	r2, [r5, r2]
    24b0:	1c55      	adds	r5, r2, #1
    24b2:	b2ae      	uxth	r6, r5
    24b4:	4d1b      	ldr	r5, [pc, #108]	; (2524 <udi_cdc_multi_putc+0x11c>)
    24b6:	0064      	lsls	r4, r4, #1
    24b8:	1820      	adds	r0, r4, r0
    24ba:	0040      	lsls	r0, r0, #1
    24bc:	1c34      	adds	r4, r6, #0
    24be:	5344      	strh	r4, [r0, r5]
    24c0:	1c10      	adds	r0, r2, #0
    24c2:	683a      	ldr	r2, [r7, #0]
    24c4:	b2d4      	uxtb	r4, r2
    24c6:	4d18      	ldr	r5, [pc, #96]	; (2528 <udi_cdc_multi_putc+0x120>)
    24c8:	1c1a      	adds	r2, r3, #0
    24ca:	0092      	lsls	r2, r2, #2
    24cc:	18d2      	adds	r2, r2, r3
    24ce:	0193      	lsls	r3, r2, #6
    24d0:	1c1a      	adds	r2, r3, #0
    24d2:	1c0b      	adds	r3, r1, #0
    24d4:	009b      	lsls	r3, r3, #2
    24d6:	185b      	adds	r3, r3, r1
    24d8:	01db      	lsls	r3, r3, #7
    24da:	18d3      	adds	r3, r2, r3
    24dc:	18eb      	adds	r3, r5, r3
    24de:	1c22      	adds	r2, r4, #0
    24e0:	541a      	strb	r2, [r3, r0]
	cpu_irq_restore(flags);
    24e2:	693b      	ldr	r3, [r7, #16]
    24e4:	1c18      	adds	r0, r3, #0
    24e6:	4b11      	ldr	r3, [pc, #68]	; (252c <udi_cdc_multi_putc+0x124>)
    24e8:	4798      	blx	r3

	if (b_databit_9) {
    24ea:	1c3b      	adds	r3, r7, #0
    24ec:	3317      	adds	r3, #23
    24ee:	781b      	ldrb	r3, [r3, #0]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d007      	beq.n	2504 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    24f4:	1c3b      	adds	r3, r7, #0
    24f6:	3317      	adds	r3, #23
    24f8:	2200      	movs	r2, #0
    24fa:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    24fc:	683b      	ldr	r3, [r7, #0]
    24fe:	121b      	asrs	r3, r3, #8
    2500:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    2502:	e79b      	b.n	243c <udi_cdc_multi_putc+0x34>
	}
	return true;
    2504:	2301      	movs	r3, #1
}
    2506:	1c18      	adds	r0, r3, #0
    2508:	46bd      	mov	sp, r7
    250a:	b007      	add	sp, #28
    250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	200069ac 	.word	0x200069ac
    2514:	000023c5 	.word	0x000023c5
    2518:	200069ca 	.word	0x200069ca
    251c:	00001425 	.word	0x00001425
    2520:	20006ee0 	.word	0x20006ee0
    2524:	20006edc 	.word	0x20006edc
    2528:	20006c5c 	.word	0x20006c5c
    252c:	0000146d 	.word	0x0000146d

00002530 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    2530:	b580      	push	{r7, lr}
    2532:	b082      	sub	sp, #8
    2534:	af00      	add	r7, sp, #0
    2536:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	2000      	movs	r0, #0
    253c:	1c19      	adds	r1, r3, #0
    253e:	4b03      	ldr	r3, [pc, #12]	; (254c <udi_cdc_putc+0x1c>)
    2540:	4798      	blx	r3
    2542:	1c03      	adds	r3, r0, #0
}
    2544:	1c18      	adds	r0, r3, #0
    2546:	46bd      	mov	sp, r7
    2548:	b002      	add	sp, #8
    254a:	bd80      	pop	{r7, pc}
    254c:	00002409 	.word	0x00002409

00002550 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2550:	b580      	push	{r7, lr}
    2552:	b082      	sub	sp, #8
    2554:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2556:	f3ef 8310 	mrs	r3, PRIMASK
    255a:	603b      	str	r3, [r7, #0]
  return(result);
    255c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    255e:	425a      	negs	r2, r3
    2560:	4153      	adcs	r3, r2
    2562:	b2db      	uxtb	r3, r3
    2564:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2566:	b672      	cpsid	i
    2568:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    256c:	4b03      	ldr	r3, [pc, #12]	; (257c <cpu_irq_save+0x2c>)
    256e:	2200      	movs	r2, #0
    2570:	701a      	strb	r2, [r3, #0]
	return flags;
    2572:	687b      	ldr	r3, [r7, #4]
}
    2574:	1c18      	adds	r0, r3, #0
    2576:	46bd      	mov	sp, r7
    2578:	b002      	add	sp, #8
    257a:	bd80      	pop	{r7, pc}
    257c:	20000288 	.word	0x20000288

00002580 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2580:	b580      	push	{r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	af00      	add	r7, sp, #0
    2586:	6078      	str	r0, [r7, #4]
	return (flags);
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	1e5a      	subs	r2, r3, #1
    258c:	4193      	sbcs	r3, r2
    258e:	b2db      	uxtb	r3, r3
}
    2590:	1c18      	adds	r0, r3, #0
    2592:	46bd      	mov	sp, r7
    2594:	b002      	add	sp, #8
    2596:	bd80      	pop	{r7, pc}

00002598 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2598:	b580      	push	{r7, lr}
    259a:	b082      	sub	sp, #8
    259c:	af00      	add	r7, sp, #0
    259e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	1c18      	adds	r0, r3, #0
    25a4:	4b06      	ldr	r3, [pc, #24]	; (25c0 <cpu_irq_restore+0x28>)
    25a6:	4798      	blx	r3
    25a8:	1c03      	adds	r3, r0, #0
    25aa:	2b00      	cmp	r3, #0
    25ac:	d005      	beq.n	25ba <cpu_irq_restore+0x22>
		cpu_irq_enable();
    25ae:	4b05      	ldr	r3, [pc, #20]	; (25c4 <cpu_irq_restore+0x2c>)
    25b0:	2201      	movs	r2, #1
    25b2:	701a      	strb	r2, [r3, #0]
    25b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    25b8:	b662      	cpsie	i
}
    25ba:	46bd      	mov	sp, r7
    25bc:	b002      	add	sp, #8
    25be:	bd80      	pop	{r7, pc}
    25c0:	00002581 	.word	0x00002581
    25c4:	20000288 	.word	0x20000288

000025c8 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
    25cc:	4b0b      	ldr	r3, [pc, #44]	; (25fc <udi_hid_kbd_enable+0x34>)
    25ce:	2200      	movs	r2, #0
    25d0:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
    25d2:	4b0b      	ldr	r3, [pc, #44]	; (2600 <udi_hid_kbd_enable+0x38>)
    25d4:	2200      	movs	r2, #0
    25d6:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    25d8:	4b0a      	ldr	r3, [pc, #40]	; (2604 <udi_hid_kbd_enable+0x3c>)
    25da:	2200      	movs	r2, #0
    25dc:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    25de:	4b0a      	ldr	r3, [pc, #40]	; (2608 <udi_hid_kbd_enable+0x40>)
    25e0:	1c18      	adds	r0, r3, #0
    25e2:	2100      	movs	r1, #0
    25e4:	2208      	movs	r2, #8
    25e6:	4b09      	ldr	r3, [pc, #36]	; (260c <udi_hid_kbd_enable+0x44>)
    25e8:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    25ea:	4b09      	ldr	r3, [pc, #36]	; (2610 <udi_hid_kbd_enable+0x48>)
    25ec:	2200      	movs	r2, #0
    25ee:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    25f0:	4b08      	ldr	r3, [pc, #32]	; (2614 <udi_hid_kbd_enable+0x4c>)
    25f2:	4798      	blx	r3
    25f4:	1c03      	adds	r3, r0, #0
}
    25f6:	1c18      	adds	r0, r3, #0
    25f8:	46bd      	mov	sp, r7
    25fa:	bd80      	pop	{r7, pc}
    25fc:	20006ef4 	.word	0x20006ef4
    2600:	20006ef8 	.word	0x20006ef8
    2604:	20006f0c 	.word	0x20006f0c
    2608:	20006f04 	.word	0x20006f04
    260c:	0000b337 	.word	0x0000b337
    2610:	20006f00 	.word	0x20006f00
    2614:	0000aabd 	.word	0x0000aabd

00002618 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
    2618:	b580      	push	{r7, lr}
    261a:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
    261c:	4b01      	ldr	r3, [pc, #4]	; (2624 <udi_hid_kbd_disable+0xc>)
    261e:	4798      	blx	r3
}
    2620:	46bd      	mov	sp, r7
    2622:	bd80      	pop	{r7, pc}
    2624:	0000aad5 	.word	0x0000aad5

00002628 <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
    2628:	b598      	push	{r3, r4, r7, lr}
    262a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
    262c:	4804      	ldr	r0, [pc, #16]	; (2640 <udi_hid_kbd_setup+0x18>)
    262e:	4905      	ldr	r1, [pc, #20]	; (2644 <udi_hid_kbd_setup+0x1c>)
    2630:	4a05      	ldr	r2, [pc, #20]	; (2648 <udi_hid_kbd_setup+0x20>)
    2632:	4b06      	ldr	r3, [pc, #24]	; (264c <udi_hid_kbd_setup+0x24>)
    2634:	4c06      	ldr	r4, [pc, #24]	; (2650 <udi_hid_kbd_setup+0x28>)
    2636:	47a0      	blx	r4
    2638:	1c03      	adds	r3, r0, #0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
    263a:	1c18      	adds	r0, r3, #0
    263c:	46bd      	mov	sp, r7
    263e:	bd98      	pop	{r3, r4, r7, pc}
    2640:	20006ef4 	.word	0x20006ef4
    2644:	20006ef8 	.word	0x20006ef8
    2648:	20000140 	.word	0x20000140
    264c:	00002661 	.word	0x00002661
    2650:	00002a4d 	.word	0x00002a4d

00002654 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
    2654:	b580      	push	{r7, lr}
    2656:	af00      	add	r7, sp, #0
	return 0;
    2658:	2300      	movs	r3, #0
}
    265a:	1c18      	adds	r0, r3, #0
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}

00002660 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    2664:	4b0f      	ldr	r3, [pc, #60]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    2666:	885b      	ldrh	r3, [r3, #2]
    2668:	0a1b      	lsrs	r3, r3, #8
    266a:	b29b      	uxth	r3, r3
    266c:	2b02      	cmp	r3, #2
    266e:	d115      	bne.n	269c <udi_hid_kbd_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2670:	4b0c      	ldr	r3, [pc, #48]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    2672:	885a      	ldrh	r2, [r3, #2]
    2674:	23ff      	movs	r3, #255	; 0xff
    2676:	4013      	ands	r3, r2
    2678:	b29b      	uxth	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	d10e      	bne.n	269c <udi_hid_kbd_setreport+0x3c>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    267e:	4b09      	ldr	r3, [pc, #36]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    2680:	88db      	ldrh	r3, [r3, #6]
    2682:	2b01      	cmp	r3, #1
    2684:	d10a      	bne.n	269c <udi_hid_kbd_setreport+0x3c>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    2686:	4b07      	ldr	r3, [pc, #28]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    2688:	4a07      	ldr	r2, [pc, #28]	; (26a8 <udi_hid_kbd_setreport+0x48>)
    268a:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    268c:	4b05      	ldr	r3, [pc, #20]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    268e:	4a07      	ldr	r2, [pc, #28]	; (26ac <udi_hid_kbd_setreport+0x4c>)
    2690:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    2692:	4b04      	ldr	r3, [pc, #16]	; (26a4 <udi_hid_kbd_setreport+0x44>)
    2694:	2201      	movs	r2, #1
    2696:	819a      	strh	r2, [r3, #12]
		return true;
    2698:	2301      	movs	r3, #1
    269a:	e000      	b.n	269e <udi_hid_kbd_setreport+0x3e>
	}
	return false;
    269c:	2300      	movs	r3, #0
}
    269e:	1c18      	adds	r0, r3, #0
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}
    26a4:	20007330 	.word	0x20007330
    26a8:	20006efc 	.word	0x20006efc
    26ac:	0000298d 	.word	0x0000298d

000026b0 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
    26b0:	b580      	push	{r7, lr}
    26b2:	b084      	sub	sp, #16
    26b4:	af00      	add	r7, sp, #0
    26b6:	1c02      	adds	r2, r0, #0
    26b8:	1dfb      	adds	r3, r7, #7
    26ba:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <udi_hid_kbd_modifier_up+0x44>)
    26be:	4798      	blx	r3
    26c0:	1c03      	adds	r3, r0, #0
    26c2:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    26c4:	4b0c      	ldr	r3, [pc, #48]	; (26f8 <udi_hid_kbd_modifier_up+0x48>)
    26c6:	781b      	ldrb	r3, [r3, #0]
    26c8:	1dfa      	adds	r2, r7, #7
    26ca:	7812      	ldrb	r2, [r2, #0]
    26cc:	43d2      	mvns	r2, r2
    26ce:	b2d2      	uxtb	r2, r2
    26d0:	4013      	ands	r3, r2
    26d2:	b2da      	uxtb	r2, r3
    26d4:	4b08      	ldr	r3, [pc, #32]	; (26f8 <udi_hid_kbd_modifier_up+0x48>)
    26d6:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    26d8:	4b08      	ldr	r3, [pc, #32]	; (26fc <udi_hid_kbd_modifier_up+0x4c>)
    26da:	2201      	movs	r2, #1
    26dc:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    26de:	4b08      	ldr	r3, [pc, #32]	; (2700 <udi_hid_kbd_modifier_up+0x50>)
    26e0:	4798      	blx	r3

	cpu_irq_restore(flags);
    26e2:	68fb      	ldr	r3, [r7, #12]
    26e4:	1c18      	adds	r0, r3, #0
    26e6:	4b07      	ldr	r3, [pc, #28]	; (2704 <udi_hid_kbd_modifier_up+0x54>)
    26e8:	4798      	blx	r3
	return true;
    26ea:	2301      	movs	r3, #1
}
    26ec:	1c18      	adds	r0, r3, #0
    26ee:	46bd      	mov	sp, r7
    26f0:	b004      	add	sp, #16
    26f2:	bd80      	pop	{r7, pc}
    26f4:	00002551 	.word	0x00002551
    26f8:	20006f04 	.word	0x20006f04
    26fc:	20006f00 	.word	0x20006f00
    2700:	000028f5 	.word	0x000028f5
    2704:	00002599 	.word	0x00002599

00002708 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
    2708:	b580      	push	{r7, lr}
    270a:	b084      	sub	sp, #16
    270c:	af00      	add	r7, sp, #0
    270e:	1c02      	adds	r2, r0, #0
    2710:	1dfb      	adds	r3, r7, #7
    2712:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2714:	4b0c      	ldr	r3, [pc, #48]	; (2748 <udi_hid_kbd_modifier_down+0x40>)
    2716:	4798      	blx	r3
    2718:	1c03      	adds	r3, r0, #0
    271a:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
    271c:	4b0b      	ldr	r3, [pc, #44]	; (274c <udi_hid_kbd_modifier_down+0x44>)
    271e:	781a      	ldrb	r2, [r3, #0]
    2720:	1dfb      	adds	r3, r7, #7
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	4313      	orrs	r3, r2
    2726:	b2da      	uxtb	r2, r3
    2728:	4b08      	ldr	r3, [pc, #32]	; (274c <udi_hid_kbd_modifier_down+0x44>)
    272a:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    272c:	4b08      	ldr	r3, [pc, #32]	; (2750 <udi_hid_kbd_modifier_down+0x48>)
    272e:	2201      	movs	r2, #1
    2730:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2732:	4b08      	ldr	r3, [pc, #32]	; (2754 <udi_hid_kbd_modifier_down+0x4c>)
    2734:	4798      	blx	r3

	cpu_irq_restore(flags);
    2736:	68fb      	ldr	r3, [r7, #12]
    2738:	1c18      	adds	r0, r3, #0
    273a:	4b07      	ldr	r3, [pc, #28]	; (2758 <udi_hid_kbd_modifier_down+0x50>)
    273c:	4798      	blx	r3
	return true;
    273e:	2301      	movs	r3, #1
}
    2740:	1c18      	adds	r0, r3, #0
    2742:	46bd      	mov	sp, r7
    2744:	b004      	add	sp, #16
    2746:	bd80      	pop	{r7, pc}
    2748:	00002551 	.word	0x00002551
    274c:	20006f04 	.word	0x20006f04
    2750:	20006f00 	.word	0x20006f00
    2754:	000028f5 	.word	0x000028f5
    2758:	00002599 	.word	0x00002599

0000275c <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    275c:	b580      	push	{r7, lr}
    275e:	b084      	sub	sp, #16
    2760:	af00      	add	r7, sp, #0
    2762:	1c02      	adds	r2, r0, #0
    2764:	1dfb      	adds	r3, r7, #7
    2766:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2768:	4b2f      	ldr	r3, [pc, #188]	; (2828 <udi_hid_kbd_up+0xcc>)
    276a:	4798      	blx	r3
    276c:	1c03      	adds	r3, r0, #0
    276e:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2770:	1c3b      	adds	r3, r7, #0
    2772:	330f      	adds	r3, #15
    2774:	2202      	movs	r2, #2
    2776:	701a      	strb	r2, [r3, #0]
    2778:	e01d      	b.n	27b6 <udi_hid_kbd_up+0x5a>
		if (0 == udi_hid_kbd_report[i]) {
    277a:	1c3b      	adds	r3, r7, #0
    277c:	330f      	adds	r3, #15
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	4a2a      	ldr	r2, [pc, #168]	; (282c <udi_hid_kbd_up+0xd0>)
    2782:	5cd3      	ldrb	r3, [r2, r3]
    2784:	2b00      	cmp	r3, #0
    2786:	d105      	bne.n	2794 <udi_hid_kbd_up+0x38>
			// Already removed
			cpu_irq_restore(flags);
    2788:	68bb      	ldr	r3, [r7, #8]
    278a:	1c18      	adds	r0, r3, #0
    278c:	4b28      	ldr	r3, [pc, #160]	; (2830 <udi_hid_kbd_up+0xd4>)
    278e:	4798      	blx	r3
			return true;
    2790:	2301      	movs	r3, #1
    2792:	e045      	b.n	2820 <udi_hid_kbd_up+0xc4>
		}
		if (key_id == udi_hid_kbd_report[i])
    2794:	1c3b      	adds	r3, r7, #0
    2796:	330f      	adds	r3, #15
    2798:	781b      	ldrb	r3, [r3, #0]
    279a:	4a24      	ldr	r2, [pc, #144]	; (282c <udi_hid_kbd_up+0xd0>)
    279c:	5cd3      	ldrb	r3, [r2, r3]
    279e:	1dfa      	adds	r2, r7, #7
    27a0:	7812      	ldrb	r2, [r2, #0]
    27a2:	429a      	cmp	r2, r3
    27a4:	d100      	bne.n	27a8 <udi_hid_kbd_up+0x4c>
			break;
    27a6:	e00b      	b.n	27c0 <udi_hid_kbd_up+0x64>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    27a8:	1c3b      	adds	r3, r7, #0
    27aa:	330f      	adds	r3, #15
    27ac:	781a      	ldrb	r2, [r3, #0]
    27ae:	1c3b      	adds	r3, r7, #0
    27b0:	330f      	adds	r3, #15
    27b2:	3201      	adds	r2, #1
    27b4:	701a      	strb	r2, [r3, #0]
    27b6:	1c3b      	adds	r3, r7, #0
    27b8:	330f      	adds	r3, #15
    27ba:	781b      	ldrb	r3, [r3, #0]
    27bc:	2b07      	cmp	r3, #7
    27be:	d9dc      	bls.n	277a <udi_hid_kbd_up+0x1e>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    27c0:	1c3b      	adds	r3, r7, #0
    27c2:	330f      	adds	r3, #15
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	2b08      	cmp	r3, #8
    27c8:	d105      	bne.n	27d6 <udi_hid_kbd_up+0x7a>
		// Already removed
		cpu_irq_restore(flags);
    27ca:	68bb      	ldr	r3, [r7, #8]
    27cc:	1c18      	adds	r0, r3, #0
    27ce:	4b18      	ldr	r3, [pc, #96]	; (2830 <udi_hid_kbd_up+0xd4>)
    27d0:	4798      	blx	r3
		return true;
    27d2:	2301      	movs	r3, #1
    27d4:	e024      	b.n	2820 <udi_hid_kbd_up+0xc4>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    27d6:	e011      	b.n	27fc <udi_hid_kbd_up+0xa0>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    27d8:	1c3b      	adds	r3, r7, #0
    27da:	330f      	adds	r3, #15
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	1c3a      	adds	r2, r7, #0
    27e0:	320f      	adds	r2, #15
    27e2:	7812      	ldrb	r2, [r2, #0]
    27e4:	3201      	adds	r2, #1
    27e6:	4911      	ldr	r1, [pc, #68]	; (282c <udi_hid_kbd_up+0xd0>)
    27e8:	5c89      	ldrb	r1, [r1, r2]
    27ea:	4a10      	ldr	r2, [pc, #64]	; (282c <udi_hid_kbd_up+0xd0>)
    27ec:	54d1      	strb	r1, [r2, r3]
		i++;
    27ee:	1c3b      	adds	r3, r7, #0
    27f0:	330f      	adds	r3, #15
    27f2:	781a      	ldrb	r2, [r3, #0]
    27f4:	1c3b      	adds	r3, r7, #0
    27f6:	330f      	adds	r3, #15
    27f8:	3201      	adds	r2, #1
    27fa:	701a      	strb	r2, [r3, #0]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    27fc:	1c3b      	adds	r3, r7, #0
    27fe:	330f      	adds	r3, #15
    2800:	781b      	ldrb	r3, [r3, #0]
    2802:	2b06      	cmp	r3, #6
    2804:	d9e8      	bls.n	27d8 <udi_hid_kbd_up+0x7c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    2806:	4b09      	ldr	r3, [pc, #36]	; (282c <udi_hid_kbd_up+0xd0>)
    2808:	2200      	movs	r2, #0
    280a:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    280c:	4b09      	ldr	r3, [pc, #36]	; (2834 <udi_hid_kbd_up+0xd8>)
    280e:	2201      	movs	r2, #1
    2810:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2812:	4b09      	ldr	r3, [pc, #36]	; (2838 <udi_hid_kbd_up+0xdc>)
    2814:	4798      	blx	r3

	cpu_irq_restore(flags);
    2816:	68bb      	ldr	r3, [r7, #8]
    2818:	1c18      	adds	r0, r3, #0
    281a:	4b05      	ldr	r3, [pc, #20]	; (2830 <udi_hid_kbd_up+0xd4>)
    281c:	4798      	blx	r3
	return true;
    281e:	2301      	movs	r3, #1
}
    2820:	1c18      	adds	r0, r3, #0
    2822:	46bd      	mov	sp, r7
    2824:	b004      	add	sp, #16
    2826:	bd80      	pop	{r7, pc}
    2828:	00002551 	.word	0x00002551
    282c:	20006f04 	.word	0x20006f04
    2830:	00002599 	.word	0x00002599
    2834:	20006f00 	.word	0x20006f00
    2838:	000028f5 	.word	0x000028f5

0000283c <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    283c:	b580      	push	{r7, lr}
    283e:	b084      	sub	sp, #16
    2840:	af00      	add	r7, sp, #0
    2842:	1c02      	adds	r2, r0, #0
    2844:	1dfb      	adds	r3, r7, #7
    2846:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2848:	4b25      	ldr	r3, [pc, #148]	; (28e0 <udi_hid_kbd_down+0xa4>)
    284a:	4798      	blx	r3
    284c:	1c03      	adds	r3, r0, #0
    284e:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2850:	1c3b      	adds	r3, r7, #0
    2852:	330f      	adds	r3, #15
    2854:	2202      	movs	r2, #2
    2856:	701a      	strb	r2, [r3, #0]
    2858:	e01d      	b.n	2896 <udi_hid_kbd_down+0x5a>
		if (0 == udi_hid_kbd_report[i])
    285a:	1c3b      	adds	r3, r7, #0
    285c:	330f      	adds	r3, #15
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	4a20      	ldr	r2, [pc, #128]	; (28e4 <udi_hid_kbd_down+0xa8>)
    2862:	5cd3      	ldrb	r3, [r2, r3]
    2864:	2b00      	cmp	r3, #0
    2866:	d100      	bne.n	286a <udi_hid_kbd_down+0x2e>
			break;
    2868:	e01a      	b.n	28a0 <udi_hid_kbd_down+0x64>
		if (key_id == udi_hid_kbd_report[i]) {
    286a:	1c3b      	adds	r3, r7, #0
    286c:	330f      	adds	r3, #15
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	4a1c      	ldr	r2, [pc, #112]	; (28e4 <udi_hid_kbd_down+0xa8>)
    2872:	5cd3      	ldrb	r3, [r2, r3]
    2874:	1dfa      	adds	r2, r7, #7
    2876:	7812      	ldrb	r2, [r2, #0]
    2878:	429a      	cmp	r2, r3
    287a:	d105      	bne.n	2888 <udi_hid_kbd_down+0x4c>
			// Already in array
			cpu_irq_restore(flags);
    287c:	68bb      	ldr	r3, [r7, #8]
    287e:	1c18      	adds	r0, r3, #0
    2880:	4b19      	ldr	r3, [pc, #100]	; (28e8 <udi_hid_kbd_down+0xac>)
    2882:	4798      	blx	r3
			return true;
    2884:	2301      	movs	r3, #1
    2886:	e027      	b.n	28d8 <udi_hid_kbd_down+0x9c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2888:	1c3b      	adds	r3, r7, #0
    288a:	330f      	adds	r3, #15
    288c:	781a      	ldrb	r2, [r3, #0]
    288e:	1c3b      	adds	r3, r7, #0
    2890:	330f      	adds	r3, #15
    2892:	3201      	adds	r2, #1
    2894:	701a      	strb	r2, [r3, #0]
    2896:	1c3b      	adds	r3, r7, #0
    2898:	330f      	adds	r3, #15
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	2b07      	cmp	r3, #7
    289e:	d9dc      	bls.n	285a <udi_hid_kbd_down+0x1e>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    28a0:	1c3b      	adds	r3, r7, #0
    28a2:	330f      	adds	r3, #15
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	2b08      	cmp	r3, #8
    28a8:	d105      	bne.n	28b6 <udi_hid_kbd_down+0x7a>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
    28aa:	68bb      	ldr	r3, [r7, #8]
    28ac:	1c18      	adds	r0, r3, #0
    28ae:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <udi_hid_kbd_down+0xac>)
    28b0:	4798      	blx	r3
		return false;
    28b2:	2300      	movs	r3, #0
    28b4:	e010      	b.n	28d8 <udi_hid_kbd_down+0x9c>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    28b6:	1c3b      	adds	r3, r7, #0
    28b8:	330f      	adds	r3, #15
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	4a09      	ldr	r2, [pc, #36]	; (28e4 <udi_hid_kbd_down+0xa8>)
    28be:	1df9      	adds	r1, r7, #7
    28c0:	7809      	ldrb	r1, [r1, #0]
    28c2:	54d1      	strb	r1, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    28c4:	4b09      	ldr	r3, [pc, #36]	; (28ec <udi_hid_kbd_down+0xb0>)
    28c6:	2201      	movs	r2, #1
    28c8:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    28ca:	4b09      	ldr	r3, [pc, #36]	; (28f0 <udi_hid_kbd_down+0xb4>)
    28cc:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	1c18      	adds	r0, r3, #0
    28d2:	4b05      	ldr	r3, [pc, #20]	; (28e8 <udi_hid_kbd_down+0xac>)
    28d4:	4798      	blx	r3
	return true;
    28d6:	2301      	movs	r3, #1
}
    28d8:	1c18      	adds	r0, r3, #0
    28da:	46bd      	mov	sp, r7
    28dc:	b004      	add	sp, #16
    28de:	bd80      	pop	{r7, pc}
    28e0:	00002551 	.word	0x00002551
    28e4:	20006f04 	.word	0x20006f04
    28e8:	00002599 	.word	0x00002599
    28ec:	20006f00 	.word	0x20006f00
    28f0:	000028f5 	.word	0x000028f5

000028f4 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
    28f4:	b590      	push	{r4, r7, lr}
    28f6:	b083      	sub	sp, #12
    28f8:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    28fa:	4b10      	ldr	r3, [pc, #64]	; (293c <udi_hid_kbd_send_report+0x48>)
    28fc:	781b      	ldrb	r3, [r3, #0]
    28fe:	2b00      	cmp	r3, #0
    2900:	d001      	beq.n	2906 <udi_hid_kbd_send_report+0x12>
		return false;
    2902:	2300      	movs	r3, #0
    2904:	e015      	b.n	2932 <udi_hid_kbd_send_report+0x3e>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    2906:	4b0e      	ldr	r3, [pc, #56]	; (2940 <udi_hid_kbd_send_report+0x4c>)
    2908:	4a0e      	ldr	r2, [pc, #56]	; (2944 <udi_hid_kbd_send_report+0x50>)
    290a:	ca03      	ldmia	r2!, {r0, r1}
    290c:	c303      	stmia	r3!, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
    290e:	4b0e      	ldr	r3, [pc, #56]	; (2948 <udi_hid_kbd_send_report+0x54>)
    2910:	2200      	movs	r2, #0
    2912:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    2914:	4b0a      	ldr	r3, [pc, #40]	; (2940 <udi_hid_kbd_send_report+0x4c>)
    2916:	4a0d      	ldr	r2, [pc, #52]	; (294c <udi_hid_kbd_send_report+0x58>)
    2918:	9200      	str	r2, [sp, #0]
    291a:	2084      	movs	r0, #132	; 0x84
    291c:	2100      	movs	r1, #0
    291e:	1c1a      	adds	r2, r3, #0
    2920:	2308      	movs	r3, #8
    2922:	4c0b      	ldr	r4, [pc, #44]	; (2950 <udi_hid_kbd_send_report+0x5c>)
    2924:	47a0      	blx	r4
    2926:	1c03      	adds	r3, r0, #0
    2928:	1c1a      	adds	r2, r3, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
    292a:	4b04      	ldr	r3, [pc, #16]	; (293c <udi_hid_kbd_send_report+0x48>)
    292c:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
    292e:	4b03      	ldr	r3, [pc, #12]	; (293c <udi_hid_kbd_send_report+0x48>)
    2930:	781b      	ldrb	r3, [r3, #0]
}
    2932:	1c18      	adds	r0, r3, #0
    2934:	46bd      	mov	sp, r7
    2936:	b001      	add	sp, #4
    2938:	bd90      	pop	{r4, r7, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	20006f0c 	.word	0x20006f0c
    2940:	20006f10 	.word	0x20006f10
    2944:	20006f04 	.word	0x20006f04
    2948:	20006f00 	.word	0x20006f00
    294c:	00002955 	.word	0x00002955
    2950:	00007bb5 	.word	0x00007bb5

00002954 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    2954:	b580      	push	{r7, lr}
    2956:	b082      	sub	sp, #8
    2958:	af00      	add	r7, sp, #0
    295a:	6039      	str	r1, [r7, #0]
    295c:	1dfb      	adds	r3, r7, #7
    295e:	1c01      	adds	r1, r0, #0
    2960:	7019      	strb	r1, [r3, #0]
    2962:	1dbb      	adds	r3, r7, #6
    2964:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
    2966:	4b06      	ldr	r3, [pc, #24]	; (2980 <udi_hid_kbd_report_sent+0x2c>)
    2968:	2200      	movs	r2, #0
    296a:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    296c:	4b05      	ldr	r3, [pc, #20]	; (2984 <udi_hid_kbd_report_sent+0x30>)
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d001      	beq.n	2978 <udi_hid_kbd_report_sent+0x24>
		udi_hid_kbd_send_report();
    2974:	4b04      	ldr	r3, [pc, #16]	; (2988 <udi_hid_kbd_report_sent+0x34>)
    2976:	4798      	blx	r3
	}
}
    2978:	46bd      	mov	sp, r7
    297a:	b002      	add	sp, #8
    297c:	bd80      	pop	{r7, pc}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	20006f0c 	.word	0x20006f0c
    2984:	20006f00 	.word	0x20006f00
    2988:	000028f5 	.word	0x000028f5

0000298c <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
    298c:	b580      	push	{r7, lr}
    298e:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
    2990:	4b03      	ldr	r3, [pc, #12]	; (29a0 <udi_hid_kbd_setreport_valid+0x14>)
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	1c18      	adds	r0, r3, #0
    2996:	4b03      	ldr	r3, [pc, #12]	; (29a4 <udi_hid_kbd_setreport_valid+0x18>)
    2998:	4798      	blx	r3
}
    299a:	46bd      	mov	sp, r7
    299c:	bd80      	pop	{r7, pc}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	20006efc 	.word	0x20006efc
    29a4:	00001025 	.word	0x00001025

000029a8 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    29ac:	4b0b      	ldr	r3, [pc, #44]	; (29dc <udi_hid_mouse_enable+0x34>)
    29ae:	2200      	movs	r2, #0
    29b0:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    29b2:	4b0b      	ldr	r3, [pc, #44]	; (29e0 <udi_hid_mouse_enable+0x38>)
    29b4:	2200      	movs	r2, #0
    29b6:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    29b8:	4b0a      	ldr	r3, [pc, #40]	; (29e4 <udi_hid_mouse_enable+0x3c>)
    29ba:	2200      	movs	r2, #0
    29bc:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    29be:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <udi_hid_mouse_enable+0x40>)
    29c0:	1c18      	adds	r0, r3, #0
    29c2:	2100      	movs	r1, #0
    29c4:	2204      	movs	r2, #4
    29c6:	4b09      	ldr	r3, [pc, #36]	; (29ec <udi_hid_mouse_enable+0x44>)
    29c8:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    29ca:	4b09      	ldr	r3, [pc, #36]	; (29f0 <udi_hid_mouse_enable+0x48>)
    29cc:	2200      	movs	r2, #0
    29ce:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    29d0:	4b08      	ldr	r3, [pc, #32]	; (29f4 <udi_hid_mouse_enable+0x4c>)
    29d2:	4798      	blx	r3
    29d4:	1c03      	adds	r3, r0, #0
}
    29d6:	1c18      	adds	r0, r3, #0
    29d8:	46bd      	mov	sp, r7
    29da:	bd80      	pop	{r7, pc}
    29dc:	20006f18 	.word	0x20006f18
    29e0:	20006f1c 	.word	0x20006f1c
    29e4:	20006f28 	.word	0x20006f28
    29e8:	20006f24 	.word	0x20006f24
    29ec:	0000b337 	.word	0x0000b337
    29f0:	20006f20 	.word	0x20006f20
    29f4:	0000aa91 	.word	0x0000aa91

000029f8 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    29fc:	4b01      	ldr	r3, [pc, #4]	; (2a04 <udi_hid_mouse_disable+0xc>)
    29fe:	4798      	blx	r3
}
    2a00:	46bd      	mov	sp, r7
    2a02:	bd80      	pop	{r7, pc}
    2a04:	0000aaa9 	.word	0x0000aaa9

00002a08 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2a08:	b598      	push	{r3, r4, r7, lr}
    2a0a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2a0c:	4804      	ldr	r0, [pc, #16]	; (2a20 <udi_hid_mouse_setup+0x18>)
    2a0e:	4905      	ldr	r1, [pc, #20]	; (2a24 <udi_hid_mouse_setup+0x1c>)
    2a10:	4a05      	ldr	r2, [pc, #20]	; (2a28 <udi_hid_mouse_setup+0x20>)
    2a12:	4b06      	ldr	r3, [pc, #24]	; (2a2c <udi_hid_mouse_setup+0x24>)
    2a14:	4c06      	ldr	r4, [pc, #24]	; (2a30 <udi_hid_mouse_setup+0x28>)
    2a16:	47a0      	blx	r4
    2a18:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    2a1a:	1c18      	adds	r0, r3, #0
    2a1c:	46bd      	mov	sp, r7
    2a1e:	bd98      	pop	{r3, r4, r7, pc}
    2a20:	20006f18 	.word	0x20006f18
    2a24:	20006f1c 	.word	0x20006f1c
    2a28:	20000190 	.word	0x20000190
    2a2c:	00002a41 	.word	0x00002a41
    2a30:	00002a4d 	.word	0x00002a4d

00002a34 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    2a34:	b580      	push	{r7, lr}
    2a36:	af00      	add	r7, sp, #0
	return 0;
    2a38:	2300      	movs	r3, #0
}
    2a3a:	1c18      	adds	r0, r3, #0
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}

00002a40 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	af00      	add	r7, sp, #0
	return false;
    2a44:	2300      	movs	r3, #0
}
    2a46:	1c18      	adds	r0, r3, #0
    2a48:	46bd      	mov	sp, r7
    2a4a:	bd80      	pop	{r7, pc}

00002a4c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b084      	sub	sp, #16
    2a50:	af00      	add	r7, sp, #0
    2a52:	60f8      	str	r0, [r7, #12]
    2a54:	60b9      	str	r1, [r7, #8]
    2a56:	607a      	str	r2, [r7, #4]
    2a58:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    2a5a:	4b36      	ldr	r3, [pc, #216]	; (2b34 <udi_hid_setup+0xe8>)
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	b2db      	uxtb	r3, r3
    2a60:	b25b      	sxtb	r3, r3
    2a62:	2b00      	cmp	r3, #0
    2a64:	da32      	bge.n	2acc <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2a66:	4b33      	ldr	r3, [pc, #204]	; (2b34 <udi_hid_setup+0xe8>)
    2a68:	781b      	ldrb	r3, [r3, #0]
    2a6a:	1c1a      	adds	r2, r3, #0
    2a6c:	2360      	movs	r3, #96	; 0x60
    2a6e:	4013      	ands	r3, r2
    2a70:	d109      	bne.n	2a86 <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2a72:	4b30      	ldr	r3, [pc, #192]	; (2b34 <udi_hid_setup+0xe8>)
    2a74:	785b      	ldrb	r3, [r3, #1]
    2a76:	2b06      	cmp	r3, #6
    2a78:	d105      	bne.n	2a86 <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	1c18      	adds	r0, r3, #0
    2a7e:	4b2e      	ldr	r3, [pc, #184]	; (2b38 <udi_hid_setup+0xec>)
    2a80:	4798      	blx	r3
    2a82:	1c03      	adds	r3, r0, #0
    2a84:	e052      	b.n	2b2c <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2a86:	4b2b      	ldr	r3, [pc, #172]	; (2b34 <udi_hid_setup+0xe8>)
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	1c1a      	adds	r2, r3, #0
    2a8c:	2360      	movs	r3, #96	; 0x60
    2a8e:	4013      	ands	r3, r2
    2a90:	2b20      	cmp	r3, #32
    2a92:	d11b      	bne.n	2acc <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2a94:	4b27      	ldr	r3, [pc, #156]	; (2b34 <udi_hid_setup+0xe8>)
    2a96:	785b      	ldrb	r3, [r3, #1]
    2a98:	2b02      	cmp	r3, #2
    2a9a:	d007      	beq.n	2aac <udi_hid_setup+0x60>
    2a9c:	2b03      	cmp	r3, #3
    2a9e:	d00d      	beq.n	2abc <udi_hid_setup+0x70>
    2aa0:	2b01      	cmp	r3, #1
    2aa2:	d113      	bne.n	2acc <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    2aa4:	683b      	ldr	r3, [r7, #0]
    2aa6:	4798      	blx	r3
    2aa8:	1c03      	adds	r3, r0, #0
    2aaa:	e03f      	b.n	2b2c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    2aac:	4b21      	ldr	r3, [pc, #132]	; (2b34 <udi_hid_setup+0xe8>)
    2aae:	68fa      	ldr	r2, [r7, #12]
    2ab0:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2ab2:	4b20      	ldr	r3, [pc, #128]	; (2b34 <udi_hid_setup+0xe8>)
    2ab4:	2201      	movs	r2, #1
    2ab6:	819a      	strh	r2, [r3, #12]
				return true;
    2ab8:	2301      	movs	r3, #1
    2aba:	e037      	b.n	2b2c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    2abc:	4b1d      	ldr	r3, [pc, #116]	; (2b34 <udi_hid_setup+0xe8>)
    2abe:	68ba      	ldr	r2, [r7, #8]
    2ac0:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2ac2:	4b1c      	ldr	r3, [pc, #112]	; (2b34 <udi_hid_setup+0xe8>)
    2ac4:	2201      	movs	r2, #1
    2ac6:	819a      	strh	r2, [r3, #12]
				return true;
    2ac8:	2301      	movs	r3, #1
    2aca:	e02f      	b.n	2b2c <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2acc:	4b19      	ldr	r3, [pc, #100]	; (2b34 <udi_hid_setup+0xe8>)
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	b2db      	uxtb	r3, r3
    2ad2:	b25b      	sxtb	r3, r3
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	db28      	blt.n	2b2a <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2ad8:	4b16      	ldr	r3, [pc, #88]	; (2b34 <udi_hid_setup+0xe8>)
    2ada:	781b      	ldrb	r3, [r3, #0]
    2adc:	1c1a      	adds	r2, r3, #0
    2ade:	2360      	movs	r3, #96	; 0x60
    2ae0:	4013      	ands	r3, r2
    2ae2:	2b20      	cmp	r3, #32
    2ae4:	d121      	bne.n	2b2a <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2ae6:	4b13      	ldr	r3, [pc, #76]	; (2b34 <udi_hid_setup+0xe8>)
    2ae8:	785b      	ldrb	r3, [r3, #1]
    2aea:	2b0a      	cmp	r3, #10
    2aec:	d007      	beq.n	2afe <udi_hid_setup+0xb2>
    2aee:	2b0b      	cmp	r3, #11
    2af0:	d00e      	beq.n	2b10 <udi_hid_setup+0xc4>
    2af2:	2b09      	cmp	r3, #9
    2af4:	d119      	bne.n	2b2a <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    2af6:	683b      	ldr	r3, [r7, #0]
    2af8:	4798      	blx	r3
    2afa:	1c03      	adds	r3, r0, #0
    2afc:	e016      	b.n	2b2c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    2afe:	4b0d      	ldr	r3, [pc, #52]	; (2b34 <udi_hid_setup+0xe8>)
    2b00:	885b      	ldrh	r3, [r3, #2]
    2b02:	0a1b      	lsrs	r3, r3, #8
    2b04:	b29b      	uxth	r3, r3
    2b06:	b2da      	uxtb	r2, r3
    2b08:	68fb      	ldr	r3, [r7, #12]
    2b0a:	701a      	strb	r2, [r3, #0]
				return true;
    2b0c:	2301      	movs	r3, #1
    2b0e:	e00d      	b.n	2b2c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    2b10:	4b08      	ldr	r3, [pc, #32]	; (2b34 <udi_hid_setup+0xe8>)
    2b12:	88db      	ldrh	r3, [r3, #6]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d001      	beq.n	2b1c <udi_hid_setup+0xd0>
					return false;
    2b18:	2300      	movs	r3, #0
    2b1a:	e007      	b.n	2b2c <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    2b1c:	4b05      	ldr	r3, [pc, #20]	; (2b34 <udi_hid_setup+0xe8>)
    2b1e:	885b      	ldrh	r3, [r3, #2]
    2b20:	b2da      	uxtb	r2, r3
    2b22:	68bb      	ldr	r3, [r7, #8]
    2b24:	701a      	strb	r2, [r3, #0]
				return true;
    2b26:	2301      	movs	r3, #1
    2b28:	e000      	b.n	2b2c <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    2b2a:	2300      	movs	r3, #0
}
    2b2c:	1c18      	adds	r0, r3, #0
    2b2e:	46bd      	mov	sp, r7
    2b30:	b004      	add	sp, #16
    2b32:	bd80      	pop	{r7, pc}
    2b34:	20007330 	.word	0x20007330
    2b38:	00002b3d 	.word	0x00002b3d

00002b3c <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b084      	sub	sp, #16
    2b40:	af00      	add	r7, sp, #0
    2b42:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    2b44:	4b22      	ldr	r3, [pc, #136]	; (2bd0 <udi_hid_reqstdifaceget_descriptor+0x94>)
    2b46:	4798      	blx	r3
    2b48:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    2b4a:	3309      	adds	r3, #9
    2b4c:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	785b      	ldrb	r3, [r3, #1]
    2b52:	2b21      	cmp	r3, #33	; 0x21
    2b54:	d001      	beq.n	2b5a <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    2b56:	2300      	movs	r3, #0
    2b58:	e036      	b.n	2bc8 <udi_hid_reqstdifaceget_descriptor+0x8c>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2b5a:	4b1e      	ldr	r3, [pc, #120]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b5c:	885b      	ldrh	r3, [r3, #2]
    2b5e:	0a1b      	lsrs	r3, r3, #8
    2b60:	b29b      	uxth	r3, r3
    2b62:	b2db      	uxtb	r3, r3
    2b64:	2b21      	cmp	r3, #33	; 0x21
    2b66:	d110      	bne.n	2b8a <udi_hid_reqstdifaceget_descriptor+0x4e>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2b68:	4b1a      	ldr	r3, [pc, #104]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b6a:	68fa      	ldr	r2, [r7, #12]
    2b6c:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	781b      	ldrb	r3, [r3, #0]
    2b72:	4a18      	ldr	r2, [pc, #96]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b74:	88d2      	ldrh	r2, [r2, #6]
    2b76:	b298      	uxth	r0, r3
    2b78:	b291      	uxth	r1, r2
    2b7a:	4288      	cmp	r0, r1
    2b7c:	d900      	bls.n	2b80 <udi_hid_reqstdifaceget_descriptor+0x44>
    2b7e:	1c13      	adds	r3, r2, #0
    2b80:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    2b82:	4b14      	ldr	r3, [pc, #80]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b84:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    2b86:	2301      	movs	r3, #1
    2b88:	e01e      	b.n	2bc8 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2b8a:	68fb      	ldr	r3, [r7, #12]
    2b8c:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2b8e:	4b11      	ldr	r3, [pc, #68]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b90:	885b      	ldrh	r3, [r3, #2]
    2b92:	0a1b      	lsrs	r3, r3, #8
    2b94:	b29b      	uxth	r3, r3
    2b96:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2b98:	429a      	cmp	r2, r3
    2b9a:	d114      	bne.n	2bc6 <udi_hid_reqstdifaceget_descriptor+0x8a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    2b9c:	4b0d      	ldr	r3, [pc, #52]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2b9e:	687a      	ldr	r2, [r7, #4]
    2ba0:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    2ba2:	68fb      	ldr	r3, [r7, #12]
    2ba4:	79da      	ldrb	r2, [r3, #7]
    2ba6:	7a1b      	ldrb	r3, [r3, #8]
    2ba8:	021b      	lsls	r3, r3, #8
    2baa:	4313      	orrs	r3, r2
    2bac:	b29b      	uxth	r3, r3
    2bae:	4a09      	ldr	r2, [pc, #36]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2bb0:	88d2      	ldrh	r2, [r2, #6]
    2bb2:	b298      	uxth	r0, r3
    2bb4:	b291      	uxth	r1, r2
    2bb6:	4288      	cmp	r0, r1
    2bb8:	d900      	bls.n	2bbc <udi_hid_reqstdifaceget_descriptor+0x80>
    2bba:	1c13      	adds	r3, r2, #0
    2bbc:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    2bbe:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2bc0:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    2bc2:	2301      	movs	r3, #1
    2bc4:	e000      	b.n	2bc8 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	return false;
    2bc6:	2300      	movs	r3, #0
}
    2bc8:	1c18      	adds	r0, r3, #0
    2bca:	46bd      	mov	sp, r7
    2bcc:	b004      	add	sp, #16
    2bce:	bd80      	pop	{r7, pc}
    2bd0:	00003a11 	.word	0x00003a11
    2bd4:	20007330 	.word	0x20007330

00002bd8 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	b082      	sub	sp, #8
    2bdc:	af00      	add	r7, sp, #0
	uint8_t lun;
	udi_msc_b_trans_req = false;
    2bde:	4b22      	ldr	r3, [pc, #136]	; (2c68 <udi_msc_enable+0x90>)
    2be0:	2200      	movs	r2, #0
    2be2:	701a      	strb	r2, [r3, #0]
	udi_msc_b_cbw_invalid = false;
    2be4:	4b21      	ldr	r3, [pc, #132]	; (2c6c <udi_msc_enable+0x94>)
    2be6:	2200      	movs	r2, #0
    2be8:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    2bea:	4b21      	ldr	r3, [pc, #132]	; (2c70 <udi_msc_enable+0x98>)
    2bec:	2201      	movs	r2, #1
    2bee:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    2bf0:	4b20      	ldr	r3, [pc, #128]	; (2c74 <udi_msc_enable+0x9c>)
    2bf2:	2201      	movs	r2, #1
    2bf4:	701a      	strb	r2, [r3, #0]
	udi_msc_nb_lun = get_nb_lun();
    2bf6:	4b20      	ldr	r3, [pc, #128]	; (2c78 <udi_msc_enable+0xa0>)
    2bf8:	4798      	blx	r3
    2bfa:	1c03      	adds	r3, r0, #0
    2bfc:	1c1a      	adds	r2, r3, #0
    2bfe:	4b1f      	ldr	r3, [pc, #124]	; (2c7c <udi_msc_enable+0xa4>)
    2c00:	701a      	strb	r2, [r3, #0]
	if (0 == udi_msc_nb_lun)
    2c02:	4b1e      	ldr	r3, [pc, #120]	; (2c7c <udi_msc_enable+0xa4>)
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	2b00      	cmp	r3, #0
    2c08:	d101      	bne.n	2c0e <udi_msc_enable+0x36>
		return false; // No lun available, then not authorize to enable interface
    2c0a:	2300      	movs	r3, #0
    2c0c:	e027      	b.n	2c5e <udi_msc_enable+0x86>
	udi_msc_nb_lun--;
    2c0e:	4b1b      	ldr	r3, [pc, #108]	; (2c7c <udi_msc_enable+0xa4>)
    2c10:	781b      	ldrb	r3, [r3, #0]
    2c12:	3b01      	subs	r3, #1
    2c14:	b2da      	uxtb	r2, r3
    2c16:	4b19      	ldr	r3, [pc, #100]	; (2c7c <udi_msc_enable+0xa4>)
    2c18:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
    2c1a:	4b19      	ldr	r3, [pc, #100]	; (2c80 <udi_msc_enable+0xa8>)
    2c1c:	4798      	blx	r3
    2c1e:	1c03      	adds	r3, r0, #0
    2c20:	2201      	movs	r2, #1
    2c22:	4053      	eors	r3, r2
    2c24:	b2db      	uxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	d001      	beq.n	2c2e <udi_msc_enable+0x56>
		return false;
    2c2a:	2300      	movs	r3, #0
    2c2c:	e017      	b.n	2c5e <udi_msc_enable+0x86>
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    2c2e:	1dfb      	adds	r3, r7, #7
    2c30:	2200      	movs	r2, #0
    2c32:	701a      	strb	r2, [r3, #0]
    2c34:	e00a      	b.n	2c4c <udi_msc_enable+0x74>
		mem_unload(lun, false);
    2c36:	1dfb      	adds	r3, r7, #7
    2c38:	781b      	ldrb	r3, [r3, #0]
    2c3a:	1c18      	adds	r0, r3, #0
    2c3c:	2100      	movs	r1, #0
    2c3e:	4b11      	ldr	r3, [pc, #68]	; (2c84 <udi_msc_enable+0xac>)
    2c40:	4798      	blx	r3
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    2c42:	1dfb      	adds	r3, r7, #7
    2c44:	781a      	ldrb	r2, [r3, #0]
    2c46:	1dfb      	adds	r3, r7, #7
    2c48:	3201      	adds	r2, #1
    2c4a:	701a      	strb	r2, [r3, #0]
    2c4c:	4b0b      	ldr	r3, [pc, #44]	; (2c7c <udi_msc_enable+0xa4>)
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	1dfa      	adds	r2, r7, #7
    2c52:	7812      	ldrb	r2, [r2, #0]
    2c54:	429a      	cmp	r2, r3
    2c56:	d9ee      	bls.n	2c36 <udi_msc_enable+0x5e>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
    2c58:	4b0b      	ldr	r3, [pc, #44]	; (2c88 <udi_msc_enable+0xb0>)
    2c5a:	4798      	blx	r3
	return true;
    2c5c:	2301      	movs	r3, #1
}
    2c5e:	1c18      	adds	r0, r3, #0
    2c60:	46bd      	mov	sp, r7
    2c62:	b002      	add	sp, #8
    2c64:	bd80      	pop	{r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	20006f65 	.word	0x20006f65
    2c6c:	20006f64 	.word	0x20006f64
    2c70:	200001e8 	.word	0x200001e8
    2c74:	200001e9 	.word	0x200001e9
    2c78:	00001191 	.word	0x00001191
    2c7c:	20006f4c 	.word	0x20006f4c
    2c80:	0000aa65 	.word	0x0000aa65
    2c84:	00001225 	.word	0x00001225
    2c88:	00002e01 	.word	0x00002e01

00002c8c <udi_msc_disable>:


void udi_msc_disable(void)
{
    2c8c:	b580      	push	{r7, lr}
    2c8e:	af00      	add	r7, sp, #0
	udi_msc_b_trans_req = false;
    2c90:	4b06      	ldr	r3, [pc, #24]	; (2cac <udi_msc_disable+0x20>)
    2c92:	2200      	movs	r2, #0
    2c94:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    2c96:	4b06      	ldr	r3, [pc, #24]	; (2cb0 <udi_msc_disable+0x24>)
    2c98:	2201      	movs	r2, #1
    2c9a:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    2c9c:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <udi_msc_disable+0x28>)
    2c9e:	2201      	movs	r2, #1
    2ca0:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
    2ca2:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <udi_msc_disable+0x2c>)
    2ca4:	4798      	blx	r3
}
    2ca6:	46bd      	mov	sp, r7
    2ca8:	bd80      	pop	{r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	20006f65 	.word	0x20006f65
    2cb0:	200001e8 	.word	0x200001e8
    2cb4:	200001e9 	.word	0x200001e9
    2cb8:	0000aa7d 	.word	0x0000aa7d

00002cbc <udi_msc_setup>:


bool udi_msc_setup(void)
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    2cc0:	4b2a      	ldr	r3, [pc, #168]	; (2d6c <udi_msc_setup+0xb0>)
    2cc2:	781b      	ldrb	r3, [r3, #0]
    2cc4:	b2db      	uxtb	r3, r3
    2cc6:	b25b      	sxtb	r3, r3
    2cc8:	2b00      	cmp	r3, #0
    2cca:	da1e      	bge.n	2d0a <udi_msc_setup+0x4e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2ccc:	4b27      	ldr	r3, [pc, #156]	; (2d6c <udi_msc_setup+0xb0>)
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	1c1a      	adds	r2, r3, #0
    2cd2:	2360      	movs	r3, #96	; 0x60
    2cd4:	4013      	ands	r3, r2
    2cd6:	2b20      	cmp	r3, #32
    2cd8:	d117      	bne.n	2d0a <udi_msc_setup+0x4e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2cda:	4b24      	ldr	r3, [pc, #144]	; (2d6c <udi_msc_setup+0xb0>)
    2cdc:	785b      	ldrb	r3, [r3, #1]
    2cde:	2bfe      	cmp	r3, #254	; 0xfe
    2ce0:	d113      	bne.n	2d0a <udi_msc_setup+0x4e>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
    2ce2:	4b22      	ldr	r3, [pc, #136]	; (2d6c <udi_msc_setup+0xb0>)
    2ce4:	88db      	ldrh	r3, [r3, #6]
    2ce6:	2b01      	cmp	r3, #1
    2ce8:	d001      	beq.n	2cee <udi_msc_setup+0x32>
					return false;	// Error for USB host
    2cea:	2300      	movs	r3, #0
    2cec:	e03b      	b.n	2d66 <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    2cee:	4b1f      	ldr	r3, [pc, #124]	; (2d6c <udi_msc_setup+0xb0>)
    2cf0:	885b      	ldrh	r3, [r3, #2]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d001      	beq.n	2cfa <udi_msc_setup+0x3e>
					return false;
    2cf6:	2300      	movs	r3, #0
    2cf8:	e035      	b.n	2d66 <udi_msc_setup+0xaa>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    2cfa:	4b1c      	ldr	r3, [pc, #112]	; (2d6c <udi_msc_setup+0xb0>)
    2cfc:	4a1c      	ldr	r2, [pc, #112]	; (2d70 <udi_msc_setup+0xb4>)
    2cfe:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2d00:	4b1a      	ldr	r3, [pc, #104]	; (2d6c <udi_msc_setup+0xb0>)
    2d02:	2201      	movs	r2, #1
    2d04:	819a      	strh	r2, [r3, #12]
				return true;
    2d06:	2301      	movs	r3, #1
    2d08:	e02d      	b.n	2d66 <udi_msc_setup+0xaa>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2d0a:	4b18      	ldr	r3, [pc, #96]	; (2d6c <udi_msc_setup+0xb0>)
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	b2db      	uxtb	r3, r3
    2d10:	b25b      	sxtb	r3, r3
    2d12:	2b00      	cmp	r3, #0
    2d14:	db26      	blt.n	2d64 <udi_msc_setup+0xa8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2d16:	4b15      	ldr	r3, [pc, #84]	; (2d6c <udi_msc_setup+0xb0>)
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	1c1a      	adds	r2, r3, #0
    2d1c:	2360      	movs	r3, #96	; 0x60
    2d1e:	4013      	ands	r3, r2
    2d20:	2b20      	cmp	r3, #32
    2d22:	d11f      	bne.n	2d64 <udi_msc_setup+0xa8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2d24:	4b11      	ldr	r3, [pc, #68]	; (2d6c <udi_msc_setup+0xb0>)
    2d26:	785b      	ldrb	r3, [r3, #1]
    2d28:	2bff      	cmp	r3, #255	; 0xff
    2d2a:	d11b      	bne.n	2d64 <udi_msc_setup+0xa8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
    2d2c:	4b0f      	ldr	r3, [pc, #60]	; (2d6c <udi_msc_setup+0xb0>)
    2d2e:	88db      	ldrh	r3, [r3, #6]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d001      	beq.n	2d38 <udi_msc_setup+0x7c>
					return false;
    2d34:	2300      	movs	r3, #0
    2d36:	e016      	b.n	2d66 <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    2d38:	4b0c      	ldr	r3, [pc, #48]	; (2d6c <udi_msc_setup+0xb0>)
    2d3a:	885b      	ldrh	r3, [r3, #2]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d001      	beq.n	2d44 <udi_msc_setup+0x88>
					return false;
    2d40:	2300      	movs	r3, #0
    2d42:	e010      	b.n	2d66 <udi_msc_setup+0xaa>
				udi_msc_b_cbw_invalid = false;
    2d44:	4b0b      	ldr	r3, [pc, #44]	; (2d74 <udi_msc_setup+0xb8>)
    2d46:	2200      	movs	r2, #0
    2d48:	701a      	strb	r2, [r3, #0]
				udi_msc_b_trans_req = false;
    2d4a:	4b0b      	ldr	r3, [pc, #44]	; (2d78 <udi_msc_setup+0xbc>)
    2d4c:	2200      	movs	r2, #0
    2d4e:	701a      	strb	r2, [r3, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
    2d50:	2002      	movs	r0, #2
    2d52:	4b0a      	ldr	r3, [pc, #40]	; (2d7c <udi_msc_setup+0xc0>)
    2d54:	4798      	blx	r3
				udd_ep_abort(UDI_MSC_EP_IN);
    2d56:	2081      	movs	r0, #129	; 0x81
    2d58:	4b08      	ldr	r3, [pc, #32]	; (2d7c <udi_msc_setup+0xc0>)
    2d5a:	4798      	blx	r3
				// Restart by CBW wait
				udi_msc_cbw_wait();
    2d5c:	4b08      	ldr	r3, [pc, #32]	; (2d80 <udi_msc_setup+0xc4>)
    2d5e:	4798      	blx	r3
				return true;
    2d60:	2301      	movs	r3, #1
    2d62:	e000      	b.n	2d66 <udi_msc_setup+0xaa>
			}
		}
	}
	return false;	// Not supported request
    2d64:	2300      	movs	r3, #0
}
    2d66:	1c18      	adds	r0, r3, #0
    2d68:	46bd      	mov	sp, r7
    2d6a:	bd80      	pop	{r7, pc}
    2d6c:	20007330 	.word	0x20007330
    2d70:	20006f4c 	.word	0x20006f4c
    2d74:	20006f64 	.word	0x20006f64
    2d78:	20006f65 	.word	0x20006f65
    2d7c:	000076f5 	.word	0x000076f5
    2d80:	00002e01 	.word	0x00002e01

00002d84 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
    2d84:	b580      	push	{r7, lr}
    2d86:	af00      	add	r7, sp, #0
	return 0;	// MSC don't have multiple alternate setting
    2d88:	2300      	movs	r3, #0
}
    2d8a:	1c18      	adds	r0, r3, #0
    2d8c:	46bd      	mov	sp, r7
    2d8e:	bd80      	pop	{r7, pc}

00002d90 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    2d94:	4b08      	ldr	r3, [pc, #32]	; (2db8 <udi_msc_cbw_invalid+0x28>)
    2d96:	781b      	ldrb	r3, [r3, #0]
    2d98:	2201      	movs	r2, #1
    2d9a:	4053      	eors	r3, r2
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d000      	beq.n	2da4 <udi_msc_cbw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    2da2:	e007      	b.n	2db4 <udi_msc_cbw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    2da4:	2002      	movs	r0, #2
    2da6:	4b05      	ldr	r3, [pc, #20]	; (2dbc <udi_msc_cbw_invalid+0x2c>)
    2da8:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    2daa:	4b05      	ldr	r3, [pc, #20]	; (2dc0 <udi_msc_cbw_invalid+0x30>)
    2dac:	2002      	movs	r0, #2
    2dae:	1c19      	adds	r1, r3, #0
    2db0:	4b04      	ldr	r3, [pc, #16]	; (2dc4 <udi_msc_cbw_invalid+0x34>)
    2db2:	4798      	blx	r3
}
    2db4:	46bd      	mov	sp, r7
    2db6:	bd80      	pop	{r7, pc}
    2db8:	20006f64 	.word	0x20006f64
    2dbc:	00007a09 	.word	0x00007a09
    2dc0:	00002d91 	.word	0x00002d91
    2dc4:	00007ad9 	.word	0x00007ad9

00002dc8 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <udi_msc_csw_invalid+0x28>)
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	2201      	movs	r2, #1
    2dd2:	4053      	eors	r3, r2
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d000      	beq.n	2ddc <udi_msc_csw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    2dda:	e007      	b.n	2dec <udi_msc_csw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_IN);
    2ddc:	2081      	movs	r0, #129	; 0x81
    2dde:	4b05      	ldr	r3, [pc, #20]	; (2df4 <udi_msc_csw_invalid+0x2c>)
    2de0:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    2de2:	4b05      	ldr	r3, [pc, #20]	; (2df8 <udi_msc_csw_invalid+0x30>)
    2de4:	2081      	movs	r0, #129	; 0x81
    2de6:	1c19      	adds	r1, r3, #0
    2de8:	4b04      	ldr	r3, [pc, #16]	; (2dfc <udi_msc_csw_invalid+0x34>)
    2dea:	4798      	blx	r3
}
    2dec:	46bd      	mov	sp, r7
    2dee:	bd80      	pop	{r7, pc}
    2df0:	20006f64 	.word	0x20006f64
    2df4:	00007a09 	.word	0x00007a09
    2df8:	00002dc9 	.word	0x00002dc9
    2dfc:	00007ad9 	.word	0x00007ad9

00002e00 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
    2e00:	b590      	push	{r4, r7, lr}
    2e02:	b083      	sub	sp, #12
    2e04:	af02      	add	r7, sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    2e06:	4b0b      	ldr	r3, [pc, #44]	; (2e34 <udi_msc_cbw_wait+0x34>)
    2e08:	4a0b      	ldr	r2, [pc, #44]	; (2e38 <udi_msc_cbw_wait+0x38>)
    2e0a:	9200      	str	r2, [sp, #0]
    2e0c:	2002      	movs	r0, #2
    2e0e:	2101      	movs	r1, #1
    2e10:	1c1a      	adds	r2, r3, #0
    2e12:	231f      	movs	r3, #31
    2e14:	4c09      	ldr	r4, [pc, #36]	; (2e3c <udi_msc_cbw_wait+0x3c>)
    2e16:	47a0      	blx	r4
    2e18:	1c03      	adds	r3, r0, #0
    2e1a:	2201      	movs	r2, #1
    2e1c:	4053      	eors	r3, r2
    2e1e:	b2db      	uxtb	r3, r3
    2e20:	2b00      	cmp	r3, #0
    2e22:	d004      	beq.n	2e2e <udi_msc_cbw_wait+0x2e>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    2e24:	4b06      	ldr	r3, [pc, #24]	; (2e40 <udi_msc_cbw_wait+0x40>)
    2e26:	2002      	movs	r0, #2
    2e28:	1c19      	adds	r1, r3, #0
    2e2a:	4b06      	ldr	r3, [pc, #24]	; (2e44 <udi_msc_cbw_wait+0x44>)
    2e2c:	4798      	blx	r3
	}
}
    2e2e:	46bd      	mov	sp, r7
    2e30:	b001      	add	sp, #4
    2e32:	bd90      	pop	{r4, r7, pc}
    2e34:	20006f2c 	.word	0x20006f2c
    2e38:	00002e49 	.word	0x00002e49
    2e3c:	00007bb5 	.word	0x00007bb5
    2e40:	00002e01 	.word	0x00002e01
    2e44:	00007ad9 	.word	0x00007ad9

00002e48 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b082      	sub	sp, #8
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	6039      	str	r1, [r7, #0]
    2e50:	1dfb      	adds	r3, r7, #7
    2e52:	1c01      	adds	r1, r0, #0
    2e54:	7019      	strb	r1, [r3, #0]
    2e56:	1dbb      	adds	r3, r7, #6
    2e58:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
    2e5a:	1dfb      	adds	r3, r7, #7
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d000      	beq.n	2e64 <udi_msc_cbw_received+0x1c>
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    2e62:	e05a      	b.n	2f1a <udi_msc_cbw_received+0xd2>
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
    2e64:	683b      	ldr	r3, [r7, #0]
    2e66:	2b1f      	cmp	r3, #31
    2e68:	d104      	bne.n	2e74 <udi_msc_cbw_received+0x2c>
			|| (udi_msc_cbw.dCBWSignature !=
    2e6a:	4b2d      	ldr	r3, [pc, #180]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2e6c:	681a      	ldr	r2, [r3, #0]
    2e6e:	4b2d      	ldr	r3, [pc, #180]	; (2f24 <udi_msc_cbw_received+0xdc>)
    2e70:	429a      	cmp	r2, r3
    2e72:	d007      	beq.n	2e84 <udi_msc_cbw_received+0x3c>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
    2e74:	4b2c      	ldr	r3, [pc, #176]	; (2f28 <udi_msc_cbw_received+0xe0>)
    2e76:	2201      	movs	r2, #1
    2e78:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    2e7a:	4b2c      	ldr	r3, [pc, #176]	; (2f2c <udi_msc_cbw_received+0xe4>)
    2e7c:	4798      	blx	r3
		udi_msc_csw_invalid();
    2e7e:	4b2c      	ldr	r3, [pc, #176]	; (2f30 <udi_msc_cbw_received+0xe8>)
    2e80:	4798      	blx	r3
		return;
    2e82:	e04a      	b.n	2f1a <udi_msc_cbw_received+0xd2>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    2e84:	4b26      	ldr	r3, [pc, #152]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2e86:	7b5a      	ldrb	r2, [r3, #13]
    2e88:	230f      	movs	r3, #15
    2e8a:	4013      	ands	r3, r2
    2e8c:	b2da      	uxtb	r2, r3
    2e8e:	4b24      	ldr	r3, [pc, #144]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2e90:	735a      	strb	r2, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    2e92:	4b23      	ldr	r3, [pc, #140]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2e94:	7b5a      	ldrb	r2, [r3, #13]
    2e96:	4b27      	ldr	r3, [pc, #156]	; (2f34 <udi_msc_cbw_received+0xec>)
    2e98:	781b      	ldrb	r3, [r3, #0]
    2e9a:	429a      	cmp	r2, r3
    2e9c:	d904      	bls.n	2ea8 <udi_msc_cbw_received+0x60>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
    2e9e:	4b26      	ldr	r3, [pc, #152]	; (2f38 <udi_msc_cbw_received+0xf0>)
    2ea0:	4798      	blx	r3
		udi_msc_csw_process();
    2ea2:	4b26      	ldr	r3, [pc, #152]	; (2f3c <udi_msc_cbw_received+0xf4>)
    2ea4:	4798      	blx	r3
		return;
    2ea6:	e038      	b.n	2f1a <udi_msc_cbw_received+0xd2>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    2ea8:	4b1d      	ldr	r3, [pc, #116]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2eaa:	689a      	ldr	r2, [r3, #8]
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
    2eac:	4b24      	ldr	r3, [pc, #144]	; (2f40 <udi_msc_cbw_received+0xf8>)
    2eae:	609a      	str	r2, [r3, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
    2eb0:	4b1b      	ldr	r3, [pc, #108]	; (2f20 <udi_msc_cbw_received+0xd8>)
    2eb2:	7bdb      	ldrb	r3, [r3, #15]
    2eb4:	2b5a      	cmp	r3, #90	; 0x5a
    2eb6:	d82b      	bhi.n	2f10 <udi_msc_cbw_received+0xc8>
    2eb8:	009a      	lsls	r2, r3, #2
    2eba:	4b22      	ldr	r3, [pc, #136]	; (2f44 <udi_msc_cbw_received+0xfc>)
    2ebc:	18d3      	adds	r3, r2, r3
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	469f      	mov	pc, r3
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
    2ec2:	4b21      	ldr	r3, [pc, #132]	; (2f48 <udi_msc_cbw_received+0x100>)
    2ec4:	4798      	blx	r3
		break;
    2ec6:	e028      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
    2ec8:	4b20      	ldr	r3, [pc, #128]	; (2f4c <udi_msc_cbw_received+0x104>)
    2eca:	4798      	blx	r3
		break;
    2ecc:	e025      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
    2ece:	2000      	movs	r0, #0
    2ed0:	4b1f      	ldr	r3, [pc, #124]	; (2f50 <udi_msc_cbw_received+0x108>)
    2ed2:	4798      	blx	r3
		break;
    2ed4:	e021      	b.n	2f1a <udi_msc_cbw_received+0xd2>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
    2ed6:	2001      	movs	r0, #1
    2ed8:	4b1d      	ldr	r3, [pc, #116]	; (2f50 <udi_msc_cbw_received+0x108>)
    2eda:	4798      	blx	r3
		break;
    2edc:	e01d      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
    2ede:	4b1d      	ldr	r3, [pc, #116]	; (2f54 <udi_msc_cbw_received+0x10c>)
    2ee0:	4798      	blx	r3
		break;
    2ee2:	e01a      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
    2ee4:	4b1c      	ldr	r3, [pc, #112]	; (2f58 <udi_msc_cbw_received+0x110>)
    2ee6:	4798      	blx	r3
		break;
    2ee8:	e017      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SBC_START_STOP_UNIT:
		udi_msc_sbc_start_stop();
    2eea:	4b1c      	ldr	r3, [pc, #112]	; (2f5c <udi_msc_cbw_received+0x114>)
    2eec:	4798      	blx	r3
		break;
    2eee:	e014      	b.n	2f1a <udi_msc_cbw_received+0xd2>

		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		udi_msc_spc_prevent_allow_medium_removal();
    2ef0:	4b1b      	ldr	r3, [pc, #108]	; (2f60 <udi_msc_cbw_received+0x118>)
    2ef2:	4798      	blx	r3
		break;
    2ef4:	e011      	b.n	2f1a <udi_msc_cbw_received+0xd2>

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
    2ef6:	4b1b      	ldr	r3, [pc, #108]	; (2f64 <udi_msc_cbw_received+0x11c>)
    2ef8:	4798      	blx	r3
		udi_msc_csw_process();
    2efa:	4b10      	ldr	r3, [pc, #64]	; (2f3c <udi_msc_cbw_received+0xf4>)
    2efc:	4798      	blx	r3
		break;
    2efe:	e00c      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
    2f00:	2001      	movs	r0, #1
    2f02:	4b19      	ldr	r3, [pc, #100]	; (2f68 <udi_msc_cbw_received+0x120>)
    2f04:	4798      	blx	r3
		break;
    2f06:	e008      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
    2f08:	2000      	movs	r0, #0
    2f0a:	4b17      	ldr	r3, [pc, #92]	; (2f68 <udi_msc_cbw_received+0x120>)
    2f0c:	4798      	blx	r3
		break;
    2f0e:	e004      	b.n	2f1a <udi_msc_cbw_received+0xd2>

	default:
		udi_msc_sense_command_invalid();
    2f10:	4b16      	ldr	r3, [pc, #88]	; (2f6c <udi_msc_cbw_received+0x124>)
    2f12:	4798      	blx	r3
		udi_msc_csw_process();
    2f14:	4b09      	ldr	r3, [pc, #36]	; (2f3c <udi_msc_cbw_received+0xf4>)
    2f16:	4798      	blx	r3
		break;
    2f18:	46c0      	nop			; (mov r8, r8)
	}
}
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b002      	add	sp, #8
    2f1e:	bd80      	pop	{r7, pc}
    2f20:	20006f2c 	.word	0x20006f2c
    2f24:	43425355 	.word	0x43425355
    2f28:	20006f64 	.word	0x20006f64
    2f2c:	00002d91 	.word	0x00002d91
    2f30:	00002dc9 	.word	0x00002dc9
    2f34:	20006f4c 	.word	0x20006f4c
    2f38:	00003235 	.word	0x00003235
    2f3c:	00003055 	.word	0x00003055
    2f40:	200001d8 	.word	0x200001d8
    2f44:	0000b384 	.word	0x0000b384
    2f48:	0000326d 	.word	0x0000326d
    2f4c:	000032c9 	.word	0x000032c9
    2f50:	00003461 	.word	0x00003461
    2f54:	00003439 	.word	0x00003439
    2f58:	00003685 	.word	0x00003685
    2f5c:	00003611 	.word	0x00003611
    2f60:	000035d5 	.word	0x000035d5
    2f64:	000031ad 	.word	0x000031ad
    2f68:	00003721 	.word	0x00003721
    2f6c:	00003251 	.word	0x00003251

00002f70 <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b082      	sub	sp, #8
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
    2f78:	1c0a      	adds	r2, r1, #0
    2f7a:	1cfb      	adds	r3, r7, #3
    2f7c:	701a      	strb	r2, [r3, #0]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    2f7e:	4b0d      	ldr	r3, [pc, #52]	; (2fb4 <udi_msc_cbw_validate+0x44>)
    2f80:	7b1a      	ldrb	r2, [r3, #12]
    2f82:	1cfb      	adds	r3, r7, #3
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	4053      	eors	r3, r2
    2f88:	b2db      	uxtb	r3, r3
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	b25b      	sxtb	r3, r3
    2f8e:	2b00      	cmp	r3, #0
    2f90:	db04      	blt.n	2f9c <udi_msc_cbw_validate+0x2c>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    2f92:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <udi_msc_cbw_validate+0x48>)
    2f94:	689a      	ldr	r2, [r3, #8]
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	429a      	cmp	r2, r3
    2f9a:	d205      	bcs.n	2fa8 <udi_msc_cbw_validate+0x38>
		udi_msc_sense_fail_cdb_invalid();
    2f9c:	4b07      	ldr	r3, [pc, #28]	; (2fbc <udi_msc_cbw_validate+0x4c>)
    2f9e:	4798      	blx	r3
		udi_msc_csw_process();
    2fa0:	4b07      	ldr	r3, [pc, #28]	; (2fc0 <udi_msc_cbw_validate+0x50>)
    2fa2:	4798      	blx	r3
		return false;
    2fa4:	2300      	movs	r3, #0
    2fa6:	e000      	b.n	2faa <udi_msc_cbw_validate+0x3a>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
    2fa8:	2301      	movs	r3, #1
}
    2faa:	1c18      	adds	r0, r3, #0
    2fac:	46bd      	mov	sp, r7
    2fae:	b002      	add	sp, #8
    2fb0:	bd80      	pop	{r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	20006f2c 	.word	0x20006f2c
    2fb8:	200001d8 	.word	0x200001d8
    2fbc:	00003235 	.word	0x00003235
    2fc0:	00003055 	.word	0x00003055

00002fc4 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
    2fc4:	b590      	push	{r4, r7, lr}
    2fc6:	b085      	sub	sp, #20
    2fc8:	af02      	add	r7, sp, #8
    2fca:	6078      	str	r0, [r7, #4]
    2fcc:	1c0a      	adds	r2, r1, #0
    2fce:	1cfb      	adds	r3, r7, #3
    2fd0:	701a      	strb	r2, [r3, #0]
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    2fd2:	1cfb      	adds	r3, r7, #3
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	687a      	ldr	r2, [r7, #4]
    2fd8:	4909      	ldr	r1, [pc, #36]	; (3000 <udi_msc_data_send+0x3c>)
    2fda:	9100      	str	r1, [sp, #0]
    2fdc:	2081      	movs	r0, #129	; 0x81
    2fde:	2101      	movs	r1, #1
    2fe0:	4c08      	ldr	r4, [pc, #32]	; (3004 <udi_msc_data_send+0x40>)
    2fe2:	47a0      	blx	r4
    2fe4:	1c03      	adds	r3, r0, #0
    2fe6:	2201      	movs	r2, #1
    2fe8:	4053      	eors	r3, r2
    2fea:	b2db      	uxtb	r3, r3
    2fec:	2b00      	cmp	r3, #0
    2fee:	d003      	beq.n	2ff8 <udi_msc_data_send+0x34>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
    2ff0:	4b05      	ldr	r3, [pc, #20]	; (3008 <udi_msc_data_send+0x44>)
    2ff2:	4798      	blx	r3
		udi_msc_csw_process();
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <udi_msc_data_send+0x48>)
    2ff6:	4798      	blx	r3
	}
}
    2ff8:	46bd      	mov	sp, r7
    2ffa:	b003      	add	sp, #12
    2ffc:	bd90      	pop	{r4, r7, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00003011 	.word	0x00003011
    3004:	00007bb5 	.word	0x00007bb5
    3008:	00003201 	.word	0x00003201
    300c:	00003055 	.word	0x00003055

00003010 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    3010:	b580      	push	{r7, lr}
    3012:	b082      	sub	sp, #8
    3014:	af00      	add	r7, sp, #0
    3016:	6039      	str	r1, [r7, #0]
    3018:	1dfb      	adds	r3, r7, #7
    301a:	1c01      	adds	r1, r0, #0
    301c:	7019      	strb	r1, [r3, #0]
    301e:	1dbb      	adds	r3, r7, #6
    3020:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
    3022:	1dfb      	adds	r3, r7, #7
    3024:	781b      	ldrb	r3, [r3, #0]
    3026:	2b00      	cmp	r3, #0
    3028:	d000      	beq.n	302c <udi_msc_data_sent+0x1c>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    302a:	e009      	b.n	3040 <udi_msc_data_sent+0x30>
	}
	// Update sense data
	udi_msc_sense_pass();
    302c:	4b06      	ldr	r3, [pc, #24]	; (3048 <udi_msc_data_sent+0x38>)
    302e:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    3030:	4b06      	ldr	r3, [pc, #24]	; (304c <udi_msc_data_sent+0x3c>)
    3032:	689a      	ldr	r2, [r3, #8]
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	1ad2      	subs	r2, r2, r3
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <udi_msc_data_sent+0x3c>)
    303a:	609a      	str	r2, [r3, #8]
	udi_msc_csw_process();
    303c:	4b04      	ldr	r3, [pc, #16]	; (3050 <udi_msc_data_sent+0x40>)
    303e:	4798      	blx	r3
}
    3040:	46bd      	mov	sp, r7
    3042:	b002      	add	sp, #8
    3044:	bd80      	pop	{r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	000031ad 	.word	0x000031ad
    304c:	200001d8 	.word	0x200001d8
    3050:	00003055 	.word	0x00003055

00003054 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
    3054:	b580      	push	{r7, lr}
    3056:	af00      	add	r7, sp, #0
	if (0 != udi_msc_csw.dCSWDataResidue) {
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <udi_msc_csw_process+0x40>)
    305a:	689b      	ldr	r3, [r3, #8]
    305c:	2b00      	cmp	r3, #0
    305e:	d00c      	beq.n	307a <udi_msc_csw_process+0x26>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    3060:	4b0d      	ldr	r3, [pc, #52]	; (3098 <udi_msc_csw_process+0x44>)
    3062:	7b1b      	ldrb	r3, [r3, #12]
    3064:	b2db      	uxtb	r3, r3
    3066:	b25b      	sxtb	r3, r3
    3068:	2b00      	cmp	r3, #0
    306a:	da03      	bge.n	3074 <udi_msc_csw_process+0x20>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    306c:	2081      	movs	r0, #129	; 0x81
    306e:	4b0b      	ldr	r3, [pc, #44]	; (309c <udi_msc_csw_process+0x48>)
    3070:	4798      	blx	r3
    3072:	e002      	b.n	307a <udi_msc_csw_process+0x26>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    3074:	2002      	movs	r0, #2
    3076:	4b09      	ldr	r3, [pc, #36]	; (309c <udi_msc_csw_process+0x48>)
    3078:	4798      	blx	r3
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    307a:	4b07      	ldr	r3, [pc, #28]	; (3098 <udi_msc_csw_process+0x44>)
    307c:	685a      	ldr	r2, [r3, #4]
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <udi_msc_csw_process+0x40>)
    3080:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
    3082:	4b04      	ldr	r3, [pc, #16]	; (3094 <udi_msc_csw_process+0x40>)
    3084:	689a      	ldr	r2, [r3, #8]
    3086:	4b03      	ldr	r3, [pc, #12]	; (3094 <udi_msc_csw_process+0x40>)
    3088:	609a      	str	r2, [r3, #8]
	udi_msc_csw_send();
    308a:	4b05      	ldr	r3, [pc, #20]	; (30a0 <udi_msc_csw_process+0x4c>)
    308c:	4798      	blx	r3
}
    308e:	46bd      	mov	sp, r7
    3090:	bd80      	pop	{r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	200001d8 	.word	0x200001d8
    3098:	20006f2c 	.word	0x20006f2c
    309c:	00007a09 	.word	0x00007a09
    30a0:	000030a5 	.word	0x000030a5

000030a4 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
    30a4:	b590      	push	{r4, r7, lr}
    30a6:	b083      	sub	sp, #12
    30a8:	af02      	add	r7, sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    30aa:	4b0b      	ldr	r3, [pc, #44]	; (30d8 <udi_msc_csw_send+0x34>)
    30ac:	4a0b      	ldr	r2, [pc, #44]	; (30dc <udi_msc_csw_send+0x38>)
    30ae:	9200      	str	r2, [sp, #0]
    30b0:	2081      	movs	r0, #129	; 0x81
    30b2:	2100      	movs	r1, #0
    30b4:	1c1a      	adds	r2, r3, #0
    30b6:	230d      	movs	r3, #13
    30b8:	4c09      	ldr	r4, [pc, #36]	; (30e0 <udi_msc_csw_send+0x3c>)
    30ba:	47a0      	blx	r4
    30bc:	1c03      	adds	r3, r0, #0
    30be:	2201      	movs	r2, #1
    30c0:	4053      	eors	r3, r2
    30c2:	b2db      	uxtb	r3, r3
    30c4:	2b00      	cmp	r3, #0
    30c6:	d004      	beq.n	30d2 <udi_msc_csw_send+0x2e>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    30c8:	4b06      	ldr	r3, [pc, #24]	; (30e4 <udi_msc_csw_send+0x40>)
    30ca:	2081      	movs	r0, #129	; 0x81
    30cc:	1c19      	adds	r1, r3, #0
    30ce:	4b06      	ldr	r3, [pc, #24]	; (30e8 <udi_msc_csw_send+0x44>)
    30d0:	4798      	blx	r3
	}
}
    30d2:	46bd      	mov	sp, r7
    30d4:	b001      	add	sp, #4
    30d6:	bd90      	pop	{r4, r7, pc}
    30d8:	200001d8 	.word	0x200001d8
    30dc:	000030ed 	.word	0x000030ed
    30e0:	00007bb5 	.word	0x00007bb5
    30e4:	000030a5 	.word	0x000030a5
    30e8:	00007ad9 	.word	0x00007ad9

000030ec <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b082      	sub	sp, #8
    30f0:	af00      	add	r7, sp, #0
    30f2:	6039      	str	r1, [r7, #0]
    30f4:	1dfb      	adds	r3, r7, #7
    30f6:	1c01      	adds	r1, r0, #0
    30f8:	7019      	strb	r1, [r3, #0]
    30fa:	1dbb      	adds	r3, r7, #6
    30fc:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    30fe:	4b02      	ldr	r3, [pc, #8]	; (3108 <udi_msc_csw_sent+0x1c>)
    3100:	4798      	blx	r3
}
    3102:	46bd      	mov	sp, r7
    3104:	b002      	add	sp, #8
    3106:	bd80      	pop	{r7, pc}
    3108:	00002e01 	.word	0x00002e01

0000310c <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    310c:	b580      	push	{r7, lr}
    310e:	af00      	add	r7, sp, #0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    3110:	4b06      	ldr	r3, [pc, #24]	; (312c <udi_msc_clear_sense+0x20>)
    3112:	1c18      	adds	r0, r3, #0
    3114:	2100      	movs	r1, #0
    3116:	2212      	movs	r2, #18
    3118:	4b05      	ldr	r3, [pc, #20]	; (3130 <udi_msc_clear_sense+0x24>)
    311a:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    311c:	4b03      	ldr	r3, [pc, #12]	; (312c <udi_msc_clear_sense+0x20>)
    311e:	22f0      	movs	r2, #240	; 0xf0
    3120:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    3122:	4b02      	ldr	r3, [pc, #8]	; (312c <udi_msc_clear_sense+0x20>)
    3124:	220a      	movs	r2, #10
    3126:	71da      	strb	r2, [r3, #7]
}
    3128:	46bd      	mov	sp, r7
    312a:	bd80      	pop	{r7, pc}
    312c:	20006f50 	.word	0x20006f50
    3130:	0000b337 	.word	0x0000b337

00003134 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    3134:	b580      	push	{r7, lr}
    3136:	b082      	sub	sp, #8
    3138:	af00      	add	r7, sp, #0
    313a:	603a      	str	r2, [r7, #0]
    313c:	1dfb      	adds	r3, r7, #7
    313e:	1c02      	adds	r2, r0, #0
    3140:	701a      	strb	r2, [r3, #0]
    3142:	1d3b      	adds	r3, r7, #4
    3144:	1c0a      	adds	r2, r1, #0
    3146:	801a      	strh	r2, [r3, #0]
	udi_msc_clear_sense();
    3148:	4b15      	ldr	r3, [pc, #84]	; (31a0 <udi_msc_sense_fail+0x6c>)
    314a:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    314c:	4b15      	ldr	r3, [pc, #84]	; (31a4 <udi_msc_sense_fail+0x70>)
    314e:	2201      	movs	r2, #1
    3150:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    3152:	4b15      	ldr	r3, [pc, #84]	; (31a8 <udi_msc_sense_fail+0x74>)
    3154:	1dfa      	adds	r2, r7, #7
    3156:	7812      	ldrb	r2, [r2, #0]
    3158:	709a      	strb	r2, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    315a:	683b      	ldr	r3, [r7, #0]
    315c:	0e1b      	lsrs	r3, r3, #24
    315e:	b2da      	uxtb	r2, r3
    3160:	4b11      	ldr	r3, [pc, #68]	; (31a8 <udi_msc_sense_fail+0x74>)
    3162:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    3164:	683b      	ldr	r3, [r7, #0]
    3166:	0c1b      	lsrs	r3, r3, #16
    3168:	b2da      	uxtb	r2, r3
    316a:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <udi_msc_sense_fail+0x74>)
    316c:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    316e:	683b      	ldr	r3, [r7, #0]
    3170:	0a1b      	lsrs	r3, r3, #8
    3172:	b2da      	uxtb	r2, r3
    3174:	4b0c      	ldr	r3, [pc, #48]	; (31a8 <udi_msc_sense_fail+0x74>)
    3176:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    3178:	683b      	ldr	r3, [r7, #0]
    317a:	b2da      	uxtb	r2, r3
    317c:	4b0a      	ldr	r3, [pc, #40]	; (31a8 <udi_msc_sense_fail+0x74>)
    317e:	719a      	strb	r2, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    3180:	1d3b      	adds	r3, r7, #4
    3182:	881b      	ldrh	r3, [r3, #0]
    3184:	0a1b      	lsrs	r3, r3, #8
    3186:	b29b      	uxth	r3, r3
    3188:	b2da      	uxtb	r2, r3
    318a:	4b07      	ldr	r3, [pc, #28]	; (31a8 <udi_msc_sense_fail+0x74>)
    318c:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    318e:	1d3b      	adds	r3, r7, #4
    3190:	881b      	ldrh	r3, [r3, #0]
    3192:	b2da      	uxtb	r2, r3
    3194:	4b04      	ldr	r3, [pc, #16]	; (31a8 <udi_msc_sense_fail+0x74>)
    3196:	735a      	strb	r2, [r3, #13]
}
    3198:	46bd      	mov	sp, r7
    319a:	b002      	add	sp, #8
    319c:	bd80      	pop	{r7, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	0000310d 	.word	0x0000310d
    31a4:	200001d8 	.word	0x200001d8
    31a8:	20006f50 	.word	0x20006f50

000031ac <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
    31ac:	b580      	push	{r7, lr}
    31ae:	af00      	add	r7, sp, #0
	udi_msc_clear_sense();
    31b0:	4b03      	ldr	r3, [pc, #12]	; (31c0 <udi_msc_sense_pass+0x14>)
    31b2:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <udi_msc_sense_pass+0x18>)
    31b6:	2200      	movs	r2, #0
    31b8:	731a      	strb	r2, [r3, #12]
}
    31ba:	46bd      	mov	sp, r7
    31bc:	bd80      	pop	{r7, pc}
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	0000310d 	.word	0x0000310d
    31c4:	200001d8 	.word	0x200001d8

000031c8 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
    31c8:	b580      	push	{r7, lr}
    31ca:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    31cc:	23e8      	movs	r3, #232	; 0xe8
    31ce:	019b      	lsls	r3, r3, #6
    31d0:	2002      	movs	r0, #2
    31d2:	1c19      	adds	r1, r3, #0
    31d4:	2200      	movs	r2, #0
    31d6:	4b02      	ldr	r3, [pc, #8]	; (31e0 <udi_msc_sense_fail_not_present+0x18>)
    31d8:	4798      	blx	r3
}
    31da:	46bd      	mov	sp, r7
    31dc:	bd80      	pop	{r7, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	00003135 	.word	0x00003135

000031e4 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    31e8:	23a0      	movs	r3, #160	; 0xa0
    31ea:	019b      	lsls	r3, r3, #6
    31ec:	2006      	movs	r0, #6
    31ee:	1c19      	adds	r1, r3, #0
    31f0:	2200      	movs	r2, #0
    31f2:	4b02      	ldr	r3, [pc, #8]	; (31fc <udi_msc_sense_fail_busy_or_change+0x18>)
    31f4:	4798      	blx	r3
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
    31f6:	46bd      	mov	sp, r7
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00003135 	.word	0x00003135

00003200 <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
    3200:	b580      	push	{r7, lr}
    3202:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    3204:	2004      	movs	r0, #4
    3206:	2100      	movs	r1, #0
    3208:	2200      	movs	r2, #0
    320a:	4b02      	ldr	r3, [pc, #8]	; (3214 <udi_msc_sense_fail_hardware+0x14>)
    320c:	4798      	blx	r3
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
    320e:	46bd      	mov	sp, r7
    3210:	bd80      	pop	{r7, pc}
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	00003135 	.word	0x00003135

00003218 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
    3218:	b580      	push	{r7, lr}
    321a:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    321c:	239c      	movs	r3, #156	; 0x9c
    321e:	019b      	lsls	r3, r3, #6
    3220:	2007      	movs	r0, #7
    3222:	1c19      	adds	r1, r3, #0
    3224:	2200      	movs	r2, #0
    3226:	4b02      	ldr	r3, [pc, #8]	; (3230 <udi_msc_sense_fail_protected+0x18>)
    3228:	4798      	blx	r3
}
    322a:	46bd      	mov	sp, r7
    322c:	bd80      	pop	{r7, pc}
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	00003135 	.word	0x00003135

00003234 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
    3234:	b580      	push	{r7, lr}
    3236:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    3238:	2390      	movs	r3, #144	; 0x90
    323a:	019b      	lsls	r3, r3, #6
    323c:	2005      	movs	r0, #5
    323e:	1c19      	adds	r1, r3, #0
    3240:	2200      	movs	r2, #0
    3242:	4b02      	ldr	r3, [pc, #8]	; (324c <udi_msc_sense_fail_cdb_invalid+0x18>)
    3244:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    3246:	46bd      	mov	sp, r7
    3248:	bd80      	pop	{r7, pc}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	00003135 	.word	0x00003135

00003250 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
    3250:	b580      	push	{r7, lr}
    3252:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    3254:	2380      	movs	r3, #128	; 0x80
    3256:	019b      	lsls	r3, r3, #6
    3258:	2005      	movs	r0, #5
    325a:	1c19      	adds	r1, r3, #0
    325c:	2200      	movs	r2, #0
    325e:	4b02      	ldr	r3, [pc, #8]	; (3268 <udi_msc_sense_command_invalid+0x18>)
    3260:	4798      	blx	r3
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
    3262:	46bd      	mov	sp, r7
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	00003135 	.word	0x00003135

0000326c <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
    326c:	b580      	push	{r7, lr}
    326e:	b082      	sub	sp, #8
    3270:	af00      	add	r7, sp, #0
	uint8_t length = udi_msc_cbw.CDB[4];
    3272:	1dfb      	adds	r3, r7, #7
    3274:	4a10      	ldr	r2, [pc, #64]	; (32b8 <udi_msc_spc_requestsense+0x4c>)
    3276:	7cd2      	ldrb	r2, [r2, #19]
    3278:	701a      	strb	r2, [r3, #0]

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
    327a:	1dfb      	adds	r3, r7, #7
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	2b12      	cmp	r3, #18
    3280:	d902      	bls.n	3288 <udi_msc_spc_requestsense+0x1c>
		length = sizeof(udi_msc_sense);
    3282:	1dfb      	adds	r3, r7, #7
    3284:	2212      	movs	r2, #18
    3286:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    3288:	1dfb      	adds	r3, r7, #7
    328a:	781b      	ldrb	r3, [r3, #0]
    328c:	1c18      	adds	r0, r3, #0
    328e:	2180      	movs	r1, #128	; 0x80
    3290:	4b0a      	ldr	r3, [pc, #40]	; (32bc <udi_msc_spc_requestsense+0x50>)
    3292:	4798      	blx	r3
    3294:	1c03      	adds	r3, r0, #0
    3296:	2201      	movs	r2, #1
    3298:	4053      	eors	r3, r2
    329a:	b2db      	uxtb	r3, r3
    329c:	2b00      	cmp	r3, #0
    329e:	d000      	beq.n	32a2 <udi_msc_spc_requestsense+0x36>
		return;
    32a0:	e006      	b.n	32b0 <udi_msc_spc_requestsense+0x44>
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    32a2:	4a07      	ldr	r2, [pc, #28]	; (32c0 <udi_msc_spc_requestsense+0x54>)
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	781b      	ldrb	r3, [r3, #0]
    32a8:	1c10      	adds	r0, r2, #0
    32aa:	1c19      	adds	r1, r3, #0
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <udi_msc_spc_requestsense+0x58>)
    32ae:	4798      	blx	r3
}
    32b0:	46bd      	mov	sp, r7
    32b2:	b002      	add	sp, #8
    32b4:	bd80      	pop	{r7, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	20006f2c 	.word	0x20006f2c
    32bc:	00002f71 	.word	0x00002f71
    32c0:	20006f50 	.word	0x20006f50
    32c4:	00002fc5 	.word	0x00002fc5

000032c8 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b082      	sub	sp, #8
    32cc:	af00      	add	r7, sp, #0
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
    32ce:	1dfb      	adds	r3, r7, #7
    32d0:	4a3c      	ldr	r2, [pc, #240]	; (33c4 <udi_msc_spc_inquiry+0xfc>)
    32d2:	7cd2      	ldrb	r2, [r2, #19]
    32d4:	701a      	strb	r2, [r3, #0]

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
    32d6:	1dfb      	adds	r3, r7, #7
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	2b24      	cmp	r3, #36	; 0x24
    32dc:	d902      	bls.n	32e4 <udi_msc_spc_inquiry+0x1c>
		length = sizeof(udi_msc_inquiry_data);
    32de:	1dfb      	adds	r3, r7, #7
    32e0:	2224      	movs	r2, #36	; 0x24
    32e2:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    32e4:	1dfb      	adds	r3, r7, #7
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	1c18      	adds	r0, r3, #0
    32ea:	2180      	movs	r1, #128	; 0x80
    32ec:	4b36      	ldr	r3, [pc, #216]	; (33c8 <udi_msc_spc_inquiry+0x100>)
    32ee:	4798      	blx	r3
    32f0:	1c03      	adds	r3, r0, #0
    32f2:	2201      	movs	r2, #1
    32f4:	4053      	eors	r3, r2
    32f6:	b2db      	uxtb	r3, r3
    32f8:	2b00      	cmp	r3, #0
    32fa:	d000      	beq.n	32fe <udi_msc_spc_inquiry+0x36>
		return;
    32fc:	e05e      	b.n	33bc <udi_msc_spc_inquiry+0xf4>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    32fe:	4b31      	ldr	r3, [pc, #196]	; (33c4 <udi_msc_spc_inquiry+0xfc>)
    3300:	7c1b      	ldrb	r3, [r3, #16]
    3302:	1c1a      	adds	r2, r3, #0
    3304:	2303      	movs	r3, #3
    3306:	4013      	ands	r3, r2
    3308:	d103      	bne.n	3312 <udi_msc_spc_inquiry+0x4a>
			|| (0 != udi_msc_cbw.CDB[2])) {
    330a:	4b2e      	ldr	r3, [pc, #184]	; (33c4 <udi_msc_spc_inquiry+0xfc>)
    330c:	7c5b      	ldrb	r3, [r3, #17]
    330e:	2b00      	cmp	r3, #0
    3310:	d004      	beq.n	331c <udi_msc_spc_inquiry+0x54>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    3312:	4b2e      	ldr	r3, [pc, #184]	; (33cc <udi_msc_spc_inquiry+0x104>)
    3314:	4798      	blx	r3
		udi_msc_csw_process();
    3316:	4b2e      	ldr	r3, [pc, #184]	; (33d0 <udi_msc_spc_inquiry+0x108>)
    3318:	4798      	blx	r3
		return;
    331a:	e04f      	b.n	33bc <udi_msc_spc_inquiry+0xf4>
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    331c:	4b29      	ldr	r3, [pc, #164]	; (33c4 <udi_msc_spc_inquiry+0xfc>)
    331e:	7b5b      	ldrb	r3, [r3, #13]
    3320:	1c18      	adds	r0, r3, #0
    3322:	4b2c      	ldr	r3, [pc, #176]	; (33d4 <udi_msc_spc_inquiry+0x10c>)
    3324:	4798      	blx	r3
    3326:	1c03      	adds	r3, r0, #0
    3328:	2b00      	cmp	r3, #0
    332a:	d001      	beq.n	3330 <udi_msc_spc_inquiry+0x68>
    332c:	2380      	movs	r3, #128	; 0x80
    332e:	e000      	b.n	3332 <udi_msc_spc_inquiry+0x6a>
    3330:	2300      	movs	r3, #0
    3332:	4a29      	ldr	r2, [pc, #164]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    3334:	7053      	strb	r3, [r2, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    3336:	4b23      	ldr	r3, [pc, #140]	; (33c4 <udi_msc_spc_inquiry+0xfc>)
    3338:	7b5b      	ldrb	r3, [r3, #13]
    333a:	1c18      	adds	r0, r3, #0
    333c:	4b27      	ldr	r3, [pc, #156]	; (33dc <udi_msc_spc_inquiry+0x114>)
    333e:	4798      	blx	r3
    3340:	1c03      	adds	r3, r0, #0
    3342:	3301      	adds	r3, #1
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
    3344:	4a24      	ldr	r2, [pc, #144]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    3346:	1c11      	adds	r1, r2, #0
    3348:	3110      	adds	r1, #16
    334a:	1c1a      	adds	r2, r3, #0
    334c:	2310      	movs	r3, #16
    334e:	1c08      	adds	r0, r1, #0
    3350:	1c11      	adds	r1, r2, #0
    3352:	1c1a      	adds	r2, r3, #0
    3354:	4b22      	ldr	r3, [pc, #136]	; (33e0 <udi_msc_spc_inquiry+0x118>)
    3356:	4798      	blx	r3
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
    3358:	1dbb      	adds	r3, r7, #6
    335a:	2200      	movs	r2, #0
    335c:	701a      	strb	r2, [r3, #0]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    335e:	e012      	b.n	3386 <udi_msc_spc_inquiry+0xbe>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    3360:	1dbb      	adds	r3, r7, #6
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	4a1c      	ldr	r2, [pc, #112]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    3366:	18d3      	adds	r3, r2, r3
    3368:	7c1b      	ldrb	r3, [r3, #16]
    336a:	2b00      	cmp	r3, #0
    336c:	d00f      	beq.n	338e <udi_msc_spc_inquiry+0xc6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    336e:	1dbb      	adds	r3, r7, #6
    3370:	781b      	ldrb	r3, [r3, #0]
    3372:	4a19      	ldr	r2, [pc, #100]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    3374:	18d3      	adds	r3, r2, r3
    3376:	7c1b      	ldrb	r3, [r3, #16]
    3378:	2b22      	cmp	r3, #34	; 0x22
    337a:	d008      	beq.n	338e <udi_msc_spc_inquiry+0xc6>
			break;
		}
		i++;
    337c:	1dbb      	adds	r3, r7, #6
    337e:	781a      	ldrb	r2, [r3, #0]
    3380:	1dbb      	adds	r3, r7, #6
    3382:	3201      	adds	r2, #1
    3384:	701a      	strb	r2, [r3, #0]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    3386:	1dbb      	adds	r3, r7, #6
    3388:	781b      	ldrb	r3, [r3, #0]
    338a:	2b10      	cmp	r3, #16
    338c:	d1e8      	bne.n	3360 <udi_msc_spc_inquiry+0x98>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    338e:	e00a      	b.n	33a6 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
    3390:	1dbb      	adds	r3, r7, #6
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	4a10      	ldr	r2, [pc, #64]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    3396:	18d3      	adds	r3, r2, r3
    3398:	2220      	movs	r2, #32
    339a:	741a      	strb	r2, [r3, #16]
		i++;
    339c:	1dbb      	adds	r3, r7, #6
    339e:	781a      	ldrb	r2, [r3, #0]
    33a0:	1dbb      	adds	r3, r7, #6
    33a2:	3201      	adds	r2, #1
    33a4:	701a      	strb	r2, [r3, #0]
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    33a6:	1dbb      	adds	r3, r7, #6
    33a8:	781b      	ldrb	r3, [r3, #0]
    33aa:	2b10      	cmp	r3, #16
    33ac:	d1f0      	bne.n	3390 <udi_msc_spc_inquiry+0xc8>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    33ae:	4a0a      	ldr	r2, [pc, #40]	; (33d8 <udi_msc_spc_inquiry+0x110>)
    33b0:	1dfb      	adds	r3, r7, #7
    33b2:	781b      	ldrb	r3, [r3, #0]
    33b4:	1c10      	adds	r0, r2, #0
    33b6:	1c19      	adds	r1, r3, #0
    33b8:	4b0a      	ldr	r3, [pc, #40]	; (33e4 <udi_msc_spc_inquiry+0x11c>)
    33ba:	4798      	blx	r3
}
    33bc:	46bd      	mov	sp, r7
    33be:	b002      	add	sp, #8
    33c0:	bd80      	pop	{r7, pc}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	20006f2c 	.word	0x20006f2c
    33c8:	00002f71 	.word	0x00002f71
    33cc:	00003235 	.word	0x00003235
    33d0:	00003055 	.word	0x00003055
    33d4:	000012ed 	.word	0x000012ed
    33d8:	200001ec 	.word	0x200001ec
    33dc:	00001335 	.word	0x00001335
    33e0:	0000b325 	.word	0x0000b325
    33e4:	00002fc5 	.word	0x00002fc5

000033e8 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	af00      	add	r7, sp, #0
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    33ec:	4b0d      	ldr	r3, [pc, #52]	; (3424 <udi_msc_spc_testunitready_global+0x3c>)
    33ee:	7b5b      	ldrb	r3, [r3, #13]
    33f0:	1c18      	adds	r0, r3, #0
    33f2:	4b0d      	ldr	r3, [pc, #52]	; (3428 <udi_msc_spc_testunitready_global+0x40>)
    33f4:	4798      	blx	r3
    33f6:	1c03      	adds	r3, r0, #0
    33f8:	2b02      	cmp	r3, #2
    33fa:	d008      	beq.n	340e <udi_msc_spc_testunitready_global+0x26>
    33fc:	2b03      	cmp	r3, #3
    33fe:	d003      	beq.n	3408 <udi_msc_spc_testunitready_global+0x20>
    3400:	2b00      	cmp	r3, #0
    3402:	d107      	bne.n	3414 <udi_msc_spc_testunitready_global+0x2c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
    3404:	2301      	movs	r3, #1
    3406:	e009      	b.n	341c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3408:	4b08      	ldr	r3, [pc, #32]	; (342c <udi_msc_spc_testunitready_global+0x44>)
    340a:	4798      	blx	r3
		break;
    340c:	e005      	b.n	341a <udi_msc_spc_testunitready_global+0x32>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    340e:	4b08      	ldr	r3, [pc, #32]	; (3430 <udi_msc_spc_testunitready_global+0x48>)
    3410:	4798      	blx	r3
		break;
    3412:	e002      	b.n	341a <udi_msc_spc_testunitready_global+0x32>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
    3414:	4b07      	ldr	r3, [pc, #28]	; (3434 <udi_msc_spc_testunitready_global+0x4c>)
    3416:	4798      	blx	r3
		break;
    3418:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    341a:	2300      	movs	r3, #0
}
    341c:	1c18      	adds	r0, r3, #0
    341e:	46bd      	mov	sp, r7
    3420:	bd80      	pop	{r7, pc}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	20006f2c 	.word	0x20006f2c
    3428:	0000119d 	.word	0x0000119d
    342c:	000031e5 	.word	0x000031e5
    3430:	000031c9 	.word	0x000031c9
    3434:	00003201 	.word	0x00003201

00003438 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
	if (udi_msc_spc_testunitready_global()) {
    343c:	4b05      	ldr	r3, [pc, #20]	; (3454 <udi_msc_spc_testunitready+0x1c>)
    343e:	4798      	blx	r3
    3440:	1c03      	adds	r3, r0, #0
    3442:	2b00      	cmp	r3, #0
    3444:	d001      	beq.n	344a <udi_msc_spc_testunitready+0x12>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
    3446:	4b04      	ldr	r3, [pc, #16]	; (3458 <udi_msc_spc_testunitready+0x20>)
    3448:	4798      	blx	r3
	}
	// Send status in CSW packet
	udi_msc_csw_process();
    344a:	4b04      	ldr	r3, [pc, #16]	; (345c <udi_msc_spc_testunitready+0x24>)
    344c:	4798      	blx	r3
}
    344e:	46bd      	mov	sp, r7
    3450:	bd80      	pop	{r7, pc}
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	000033e9 	.word	0x000033e9
    3458:	000031ad 	.word	0x000031ad
    345c:	00003055 	.word	0x00003055

00003460 <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    3460:	b580      	push	{r7, lr}
    3462:	b086      	sub	sp, #24
    3464:	af00      	add	r7, sp, #0
    3466:	1c02      	adds	r2, r0, #0
    3468:	1dfb      	adds	r3, r7, #7
    346a:	701a      	strb	r2, [r3, #0]
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    346c:	4b51      	ldr	r3, [pc, #324]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    346e:	1c18      	adds	r0, r3, #0
    3470:	2100      	movs	r1, #0
    3472:	2214      	movs	r2, #20
    3474:	4b50      	ldr	r3, [pc, #320]	; (35b8 <udi_msc_spc_mode_sense+0x158>)
    3476:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    3478:	1dfb      	adds	r3, r7, #7
    347a:	781b      	ldrb	r3, [r3, #0]
    347c:	2b00      	cmp	r3, #0
    347e:	d00b      	beq.n	3498 <udi_msc_spc_mode_sense+0x38>
		request_lgt = udi_msc_cbw.CDB[8];
    3480:	1c3b      	adds	r3, r7, #0
    3482:	3316      	adds	r3, #22
    3484:	4a4d      	ldr	r2, [pc, #308]	; (35bc <udi_msc_spc_mode_sense+0x15c>)
    3486:	7dd2      	ldrb	r2, [r2, #23]
    3488:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s10.sense_data;
    348a:	4b4d      	ldr	r3, [pc, #308]	; (35c0 <udi_msc_spc_mode_sense+0x160>)
    348c:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    348e:	1c3b      	adds	r3, r7, #0
    3490:	3317      	adds	r3, #23
    3492:	2208      	movs	r2, #8
    3494:	701a      	strb	r2, [r3, #0]
    3496:	e00a      	b.n	34ae <udi_msc_spc_mode_sense+0x4e>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
    3498:	1c3b      	adds	r3, r7, #0
    349a:	3316      	adds	r3, #22
    349c:	4a47      	ldr	r2, [pc, #284]	; (35bc <udi_msc_spc_mode_sense+0x15c>)
    349e:	7cd2      	ldrb	r2, [r2, #19]
    34a0:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s6.sense_data;
    34a2:	4b48      	ldr	r3, [pc, #288]	; (35c4 <udi_msc_spc_mode_sense+0x164>)
    34a4:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    34a6:	1c3b      	adds	r3, r7, #0
    34a8:	3317      	adds	r3, #23
    34aa:	2204      	movs	r2, #4
    34ac:	701a      	strb	r2, [r3, #0]
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    34ae:	4b43      	ldr	r3, [pc, #268]	; (35bc <udi_msc_spc_mode_sense+0x15c>)
    34b0:	7c59      	ldrb	r1, [r3, #17]
    34b2:	1c3b      	adds	r3, r7, #0
    34b4:	330f      	adds	r3, #15
    34b6:	223f      	movs	r2, #63	; 0x3f
    34b8:	400a      	ands	r2, r1
    34ba:	701a      	strb	r2, [r3, #0]
	if ((SCSI_MS_MODE_INFEXP == mode)
    34bc:	1c3b      	adds	r3, r7, #0
    34be:	330f      	adds	r3, #15
    34c0:	781b      	ldrb	r3, [r3, #0]
    34c2:	2b1c      	cmp	r3, #28
    34c4:	d004      	beq.n	34d0 <udi_msc_spc_mode_sense+0x70>
			|| (SCSI_MS_MODE_ALL == mode)) {
    34c6:	1c3b      	adds	r3, r7, #0
    34c8:	330f      	adds	r3, #15
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	2b3f      	cmp	r3, #63	; 0x3f
    34ce:	d10f      	bne.n	34f0 <udi_msc_spc_mode_sense+0x90>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
    34d0:	693b      	ldr	r3, [r7, #16]
    34d2:	221c      	movs	r2, #28
    34d4:	701a      	strb	r2, [r3, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
    34d6:	693b      	ldr	r3, [r7, #16]
    34d8:	220a      	movs	r2, #10
    34da:	705a      	strb	r2, [r3, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
    34dc:	693b      	ldr	r3, [r7, #16]
    34de:	2205      	movs	r2, #5
    34e0:	70da      	strb	r2, [r3, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    34e2:	1c3b      	adds	r3, r7, #0
    34e4:	3317      	adds	r3, #23
    34e6:	1c3a      	adds	r2, r7, #0
    34e8:	3217      	adds	r2, #23
    34ea:	7812      	ldrb	r2, [r2, #0]
    34ec:	320c      	adds	r2, #12
    34ee:	701a      	strb	r2, [r3, #0]
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
    34f0:	1c3a      	adds	r2, r7, #0
    34f2:	3216      	adds	r2, #22
    34f4:	1c3b      	adds	r3, r7, #0
    34f6:	3317      	adds	r3, #23
    34f8:	7812      	ldrb	r2, [r2, #0]
    34fa:	781b      	ldrb	r3, [r3, #0]
    34fc:	429a      	cmp	r2, r3
    34fe:	d905      	bls.n	350c <udi_msc_spc_mode_sense+0xac>
		request_lgt = data_sense_lgt;
    3500:	1c3b      	adds	r3, r7, #0
    3502:	3316      	adds	r3, #22
    3504:	1c3a      	adds	r2, r7, #0
    3506:	3217      	adds	r2, #23
    3508:	7812      	ldrb	r2, [r2, #0]
    350a:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    350c:	1c3b      	adds	r3, r7, #0
    350e:	3316      	adds	r3, #22
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	1c18      	adds	r0, r3, #0
    3514:	2180      	movs	r1, #128	; 0x80
    3516:	4b2c      	ldr	r3, [pc, #176]	; (35c8 <udi_msc_spc_mode_sense+0x168>)
    3518:	4798      	blx	r3
    351a:	1c03      	adds	r3, r0, #0
    351c:	2201      	movs	r2, #1
    351e:	4053      	eors	r3, r2
    3520:	b2db      	uxtb	r3, r3
    3522:	2b00      	cmp	r3, #0
    3524:	d000      	beq.n	3528 <udi_msc_spc_mode_sense+0xc8>
		return;
    3526:	e041      	b.n	35ac <udi_msc_spc_mode_sense+0x14c>

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    3528:	4b24      	ldr	r3, [pc, #144]	; (35bc <udi_msc_spc_mode_sense+0x15c>)
    352a:	7b5b      	ldrb	r3, [r3, #13]
    352c:	1c18      	adds	r0, r3, #0
    352e:	4b27      	ldr	r3, [pc, #156]	; (35cc <udi_msc_spc_mode_sense+0x16c>)
    3530:	4798      	blx	r3
    3532:	1c03      	adds	r3, r0, #0
    3534:	2b00      	cmp	r3, #0
    3536:	d001      	beq.n	353c <udi_msc_spc_mode_sense+0xdc>
    3538:	2380      	movs	r3, #128	; 0x80
    353a:	e000      	b.n	353e <udi_msc_spc_mode_sense+0xde>
    353c:	2300      	movs	r3, #0
    353e:	1c3a      	adds	r2, r7, #0
    3540:	320e      	adds	r2, #14
    3542:	7013      	strb	r3, [r2, #0]

	if (b_sense10) {
    3544:	1dfb      	adds	r3, r7, #7
    3546:	781b      	ldrb	r3, [r3, #0]
    3548:	2b00      	cmp	r3, #0
    354a:	d01b      	beq.n	3584 <udi_msc_spc_mode_sense+0x124>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
    354c:	1c3b      	adds	r3, r7, #0
    354e:	3317      	adds	r3, #23
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	b29b      	uxth	r3, r3
    3554:	3b02      	subs	r3, #2
    3556:	b29b      	uxth	r3, r3
    3558:	0a1b      	lsrs	r3, r3, #8
    355a:	b29b      	uxth	r3, r3
    355c:	b29a      	uxth	r2, r3
    355e:	1c3b      	adds	r3, r7, #0
    3560:	3317      	adds	r3, #23
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	b29b      	uxth	r3, r3
    3566:	3b02      	subs	r3, #2
    3568:	b29b      	uxth	r3, r3
    356a:	021b      	lsls	r3, r3, #8
    356c:	b29b      	uxth	r3, r3
    356e:	4313      	orrs	r3, r2
    3570:	b29b      	uxth	r3, r3
    3572:	b29a      	uxth	r2, r3

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
    3574:	4b0f      	ldr	r3, [pc, #60]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    3576:	801a      	strh	r2, [r3, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
    3578:	4b0e      	ldr	r3, [pc, #56]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    357a:	1c3a      	adds	r2, r7, #0
    357c:	320e      	adds	r2, #14
    357e:	7812      	ldrb	r2, [r2, #0]
    3580:	70da      	strb	r2, [r3, #3]
    3582:	e00b      	b.n	359c <udi_msc_spc_mode_sense+0x13c>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    3584:	1c3b      	adds	r3, r7, #0
    3586:	3317      	adds	r3, #23
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	3b01      	subs	r3, #1
    358c:	b2da      	uxtb	r2, r3
    358e:	4b09      	ldr	r3, [pc, #36]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    3590:	701a      	strb	r2, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
    3592:	4b08      	ldr	r3, [pc, #32]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    3594:	1c3a      	adds	r2, r7, #0
    3596:	320e      	adds	r2, #14
    3598:	7812      	ldrb	r2, [r2, #0]
    359a:	709a      	strb	r2, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    359c:	4a05      	ldr	r2, [pc, #20]	; (35b4 <udi_msc_spc_mode_sense+0x154>)
    359e:	1c3b      	adds	r3, r7, #0
    35a0:	3316      	adds	r3, #22
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	1c10      	adds	r0, r2, #0
    35a6:	1c19      	adds	r1, r3, #0
    35a8:	4b09      	ldr	r3, [pc, #36]	; (35d0 <udi_msc_spc_mode_sense+0x170>)
    35aa:	4798      	blx	r3
}
    35ac:	46bd      	mov	sp, r7
    35ae:	b006      	add	sp, #24
    35b0:	bd80      	pop	{r7, pc}
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	20006f70 	.word	0x20006f70
    35b8:	0000b337 	.word	0x0000b337
    35bc:	20006f2c 	.word	0x20006f2c
    35c0:	20006f78 	.word	0x20006f78
    35c4:	20006f74 	.word	0x20006f74
    35c8:	00002f71 	.word	0x00002f71
    35cc:	000012a5 	.word	0x000012a5
    35d0:	00002fc5 	.word	0x00002fc5

000035d4 <udi_msc_spc_prevent_allow_medium_removal>:


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b082      	sub	sp, #8
    35d8:	af00      	add	r7, sp, #0
	uint8_t prevent = udi_msc_cbw.CDB[4];
    35da:	1dfb      	adds	r3, r7, #7
    35dc:	4a08      	ldr	r2, [pc, #32]	; (3600 <udi_msc_spc_prevent_allow_medium_removal+0x2c>)
    35de:	7cd2      	ldrb	r2, [r2, #19]
    35e0:	701a      	strb	r2, [r3, #0]
	if (0 == prevent) {
    35e2:	1dfb      	adds	r3, r7, #7
    35e4:	781b      	ldrb	r3, [r3, #0]
    35e6:	2b00      	cmp	r3, #0
    35e8:	d102      	bne.n	35f0 <udi_msc_spc_prevent_allow_medium_removal+0x1c>
		udi_msc_sense_pass();
    35ea:	4b06      	ldr	r3, [pc, #24]	; (3604 <udi_msc_spc_prevent_allow_medium_removal+0x30>)
    35ec:	4798      	blx	r3
    35ee:	e001      	b.n	35f4 <udi_msc_spc_prevent_allow_medium_removal+0x20>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    35f0:	4b05      	ldr	r3, [pc, #20]	; (3608 <udi_msc_spc_prevent_allow_medium_removal+0x34>)
    35f2:	4798      	blx	r3
	}
	udi_msc_csw_process();
    35f4:	4b05      	ldr	r3, [pc, #20]	; (360c <udi_msc_spc_prevent_allow_medium_removal+0x38>)
    35f6:	4798      	blx	r3
}
    35f8:	46bd      	mov	sp, r7
    35fa:	b002      	add	sp, #8
    35fc:	bd80      	pop	{r7, pc}
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	20006f2c 	.word	0x20006f2c
    3604:	000031ad 	.word	0x000031ad
    3608:	00003235 	.word	0x00003235
    360c:	00003055 	.word	0x00003055

00003610 <udi_msc_sbc_start_stop>:


static void udi_msc_sbc_start_stop(void)
{
    3610:	b580      	push	{r7, lr}
    3612:	b082      	sub	sp, #8
    3614:	af00      	add	r7, sp, #0
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    3616:	4b17      	ldr	r3, [pc, #92]	; (3674 <udi_msc_sbc_start_stop+0x64>)
    3618:	7cdb      	ldrb	r3, [r3, #19]
    361a:	1c1a      	adds	r2, r3, #0
    361c:	2301      	movs	r3, #1
    361e:	401a      	ands	r2, r3
    3620:	1dfb      	adds	r3, r7, #7
    3622:	1e51      	subs	r1, r2, #1
    3624:	418a      	sbcs	r2, r1
    3626:	701a      	strb	r2, [r3, #0]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
    3628:	4b12      	ldr	r3, [pc, #72]	; (3674 <udi_msc_sbc_start_stop+0x64>)
    362a:	7cdb      	ldrb	r3, [r3, #19]
    362c:	1c1a      	adds	r2, r3, #0
    362e:	2302      	movs	r3, #2
    3630:	401a      	ands	r2, r3
    3632:	1dbb      	adds	r3, r7, #6
    3634:	1e51      	subs	r1, r2, #1
    3636:	418a      	sbcs	r2, r1
    3638:	701a      	strb	r2, [r3, #0]
	if (loej) {
    363a:	1dbb      	adds	r3, r7, #6
    363c:	781b      	ldrb	r3, [r3, #0]
    363e:	2b00      	cmp	r3, #0
    3640:	d011      	beq.n	3666 <udi_msc_sbc_start_stop+0x56>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    3642:	4b0c      	ldr	r3, [pc, #48]	; (3674 <udi_msc_sbc_start_stop+0x64>)
    3644:	7b5a      	ldrb	r2, [r3, #13]
    3646:	1dfb      	adds	r3, r7, #7
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	1e59      	subs	r1, r3, #1
    364c:	418b      	sbcs	r3, r1
    364e:	b2db      	uxtb	r3, r3
    3650:	2101      	movs	r1, #1
    3652:	404b      	eors	r3, r1
    3654:	b2db      	uxtb	r3, r3
    3656:	1c19      	adds	r1, r3, #0
    3658:	2301      	movs	r3, #1
    365a:	400b      	ands	r3, r1
    365c:	b2db      	uxtb	r3, r3
    365e:	1c10      	adds	r0, r2, #0
    3660:	1c19      	adds	r1, r3, #0
    3662:	4b05      	ldr	r3, [pc, #20]	; (3678 <udi_msc_sbc_start_stop+0x68>)
    3664:	4798      	blx	r3
	}
	udi_msc_sense_pass();
    3666:	4b05      	ldr	r3, [pc, #20]	; (367c <udi_msc_sbc_start_stop+0x6c>)
    3668:	4798      	blx	r3
	udi_msc_csw_process();
    366a:	4b05      	ldr	r3, [pc, #20]	; (3680 <udi_msc_sbc_start_stop+0x70>)
    366c:	4798      	blx	r3
}
    366e:	46bd      	mov	sp, r7
    3670:	b002      	add	sp, #8
    3672:	bd80      	pop	{r7, pc}
    3674:	20006f2c 	.word	0x20006f2c
    3678:	00001225 	.word	0x00001225
    367c:	000031ad 	.word	0x000031ad
    3680:	00003055 	.word	0x00003055

00003684 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
    3684:	b580      	push	{r7, lr}
    3686:	af00      	add	r7, sp, #0
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    3688:	2008      	movs	r0, #8
    368a:	2180      	movs	r1, #128	; 0x80
    368c:	4b1b      	ldr	r3, [pc, #108]	; (36fc <udi_msc_sbc_read_capacity+0x78>)
    368e:	4798      	blx	r3
    3690:	1c03      	adds	r3, r0, #0
    3692:	2201      	movs	r2, #1
    3694:	4053      	eors	r3, r2
    3696:	b2db      	uxtb	r3, r3
    3698:	2b00      	cmp	r3, #0
    369a:	d000      	beq.n	369e <udi_msc_sbc_read_capacity+0x1a>
					USB_CBW_DIRECTION_IN))
		return;
    369c:	e02c      	b.n	36f8 <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    369e:	4b18      	ldr	r3, [pc, #96]	; (3700 <udi_msc_sbc_read_capacity+0x7c>)
    36a0:	7b5a      	ldrb	r2, [r3, #13]
    36a2:	4b18      	ldr	r3, [pc, #96]	; (3704 <udi_msc_sbc_read_capacity+0x80>)
    36a4:	1c10      	adds	r0, r2, #0
    36a6:	1c19      	adds	r1, r3, #0
    36a8:	4b17      	ldr	r3, [pc, #92]	; (3708 <udi_msc_sbc_read_capacity+0x84>)
    36aa:	4798      	blx	r3
    36ac:	1c03      	adds	r3, r0, #0
    36ae:	2b02      	cmp	r3, #2
    36b0:	d009      	beq.n	36c6 <udi_msc_sbc_read_capacity+0x42>
    36b2:	2b03      	cmp	r3, #3
    36b4:	d002      	beq.n	36bc <udi_msc_sbc_read_capacity+0x38>
    36b6:	2b00      	cmp	r3, #0
    36b8:	d00f      	beq.n	36da <udi_msc_sbc_read_capacity+0x56>
    36ba:	e009      	b.n	36d0 <udi_msc_sbc_read_capacity+0x4c>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    36bc:	4b13      	ldr	r3, [pc, #76]	; (370c <udi_msc_sbc_read_capacity+0x88>)
    36be:	4798      	blx	r3
		udi_msc_csw_process();
    36c0:	4b13      	ldr	r3, [pc, #76]	; (3710 <udi_msc_sbc_read_capacity+0x8c>)
    36c2:	4798      	blx	r3
		return;
    36c4:	e018      	b.n	36f8 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    36c6:	4b13      	ldr	r3, [pc, #76]	; (3714 <udi_msc_sbc_read_capacity+0x90>)
    36c8:	4798      	blx	r3
		udi_msc_csw_process();
    36ca:	4b11      	ldr	r3, [pc, #68]	; (3710 <udi_msc_sbc_read_capacity+0x8c>)
    36cc:	4798      	blx	r3
		return;
    36ce:	e013      	b.n	36f8 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
    36d0:	4b11      	ldr	r3, [pc, #68]	; (3718 <udi_msc_sbc_read_capacity+0x94>)
    36d2:	4798      	blx	r3
		udi_msc_csw_process();
    36d4:	4b0e      	ldr	r3, [pc, #56]	; (3710 <udi_msc_sbc_read_capacity+0x8c>)
    36d6:	4798      	blx	r3
		return;
    36d8:	e00e      	b.n	36f8 <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
    36da:	46c0      	nop			; (mov r8, r8)
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    36dc:	4b09      	ldr	r3, [pc, #36]	; (3704 <udi_msc_sbc_read_capacity+0x80>)
    36de:	2280      	movs	r2, #128	; 0x80
    36e0:	0292      	lsls	r2, r2, #10
    36e2:	605a      	str	r2, [r3, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    36e4:	4b07      	ldr	r3, [pc, #28]	; (3704 <udi_msc_sbc_read_capacity+0x80>)
    36e6:	681b      	ldr	r3, [r3, #0]
    36e8:	ba1a      	rev	r2, r3
    36ea:	4b06      	ldr	r3, [pc, #24]	; (3704 <udi_msc_sbc_read_capacity+0x80>)
    36ec:	601a      	str	r2, [r3, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    36ee:	4b05      	ldr	r3, [pc, #20]	; (3704 <udi_msc_sbc_read_capacity+0x80>)
    36f0:	1c18      	adds	r0, r3, #0
    36f2:	2108      	movs	r1, #8
    36f4:	4b09      	ldr	r3, [pc, #36]	; (371c <udi_msc_sbc_read_capacity+0x98>)
    36f6:	4798      	blx	r3
			sizeof(udi_msc_capacity));
}
    36f8:	46bd      	mov	sp, r7
    36fa:	bd80      	pop	{r7, pc}
    36fc:	00002f71 	.word	0x00002f71
    3700:	20006f2c 	.word	0x20006f2c
    3704:	20006f84 	.word	0x20006f84
    3708:	000011dd 	.word	0x000011dd
    370c:	000031e5 	.word	0x000031e5
    3710:	00003055 	.word	0x00003055
    3714:	000031c9 	.word	0x000031c9
    3718:	00003201 	.word	0x00003201
    371c:	00002fc5 	.word	0x00002fc5

00003720 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
    3720:	b580      	push	{r7, lr}
    3722:	b084      	sub	sp, #16
    3724:	af00      	add	r7, sp, #0
    3726:	1c02      	adds	r2, r0, #0
    3728:	1dfb      	adds	r3, r7, #7
    372a:	701a      	strb	r2, [r3, #0]
	uint32_t trans_size;

	if (!b_read) {
    372c:	1dfb      	adds	r3, r7, #7
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	2201      	movs	r2, #1
    3732:	4053      	eors	r3, r2
    3734:	b2db      	uxtb	r3, r3
    3736:	2b00      	cmp	r3, #0
    3738:	d00c      	beq.n	3754 <udi_msc_sbc_trans+0x34>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    373a:	4b23      	ldr	r3, [pc, #140]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    373c:	7b5b      	ldrb	r3, [r3, #13]
    373e:	1c18      	adds	r0, r3, #0
    3740:	4b22      	ldr	r3, [pc, #136]	; (37cc <udi_msc_sbc_trans+0xac>)
    3742:	4798      	blx	r3
    3744:	1c03      	adds	r3, r0, #0
    3746:	2b00      	cmp	r3, #0
    3748:	d004      	beq.n	3754 <udi_msc_sbc_trans+0x34>
			// Write not authorized
			udi_msc_sense_fail_protected();
    374a:	4b21      	ldr	r3, [pc, #132]	; (37d0 <udi_msc_sbc_trans+0xb0>)
    374c:	4798      	blx	r3
			udi_msc_csw_process();
    374e:	4b21      	ldr	r3, [pc, #132]	; (37d4 <udi_msc_sbc_trans+0xb4>)
    3750:	4798      	blx	r3
			return;
    3752:	e035      	b.n	37c0 <udi_msc_sbc_trans+0xa0>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    3754:	4b20      	ldr	r3, [pc, #128]	; (37d8 <udi_msc_sbc_trans+0xb8>)
    3756:	4a1c      	ldr	r2, [pc, #112]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3758:	7c52      	ldrb	r2, [r2, #17]
    375a:	701a      	strb	r2, [r3, #0]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    375c:	4b1f      	ldr	r3, [pc, #124]	; (37dc <udi_msc_sbc_trans+0xbc>)
    375e:	4a1a      	ldr	r2, [pc, #104]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3760:	7c92      	ldrb	r2, [r2, #18]
    3762:	701a      	strb	r2, [r3, #0]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    3764:	4b1e      	ldr	r3, [pc, #120]	; (37e0 <udi_msc_sbc_trans+0xc0>)
    3766:	4a18      	ldr	r2, [pc, #96]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3768:	7cd2      	ldrb	r2, [r2, #19]
    376a:	701a      	strb	r2, [r3, #0]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    376c:	4b1d      	ldr	r3, [pc, #116]	; (37e4 <udi_msc_sbc_trans+0xc4>)
    376e:	4a16      	ldr	r2, [pc, #88]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3770:	7d12      	ldrb	r2, [r2, #20]
    3772:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    3774:	4b1c      	ldr	r3, [pc, #112]	; (37e8 <udi_msc_sbc_trans+0xc8>)
    3776:	4a14      	ldr	r2, [pc, #80]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3778:	7d92      	ldrb	r2, [r2, #22]
    377a:	701a      	strb	r2, [r3, #0]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    377c:	4b1b      	ldr	r3, [pc, #108]	; (37ec <udi_msc_sbc_trans+0xcc>)
    377e:	4a12      	ldr	r2, [pc, #72]	; (37c8 <udi_msc_sbc_trans+0xa8>)
    3780:	7dd2      	ldrb	r2, [r2, #23]
    3782:	701a      	strb	r2, [r3, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    3784:	4b19      	ldr	r3, [pc, #100]	; (37ec <udi_msc_sbc_trans+0xcc>)
    3786:	881b      	ldrh	r3, [r3, #0]
    3788:	025b      	lsls	r3, r3, #9
    378a:	60fb      	str	r3, [r7, #12]
	if (!udi_msc_cbw_validate(trans_size,
    378c:	1dfb      	adds	r3, r7, #7
    378e:	781b      	ldrb	r3, [r3, #0]
    3790:	2b00      	cmp	r3, #0
    3792:	d001      	beq.n	3798 <udi_msc_sbc_trans+0x78>
    3794:	2380      	movs	r3, #128	; 0x80
    3796:	e000      	b.n	379a <udi_msc_sbc_trans+0x7a>
    3798:	2300      	movs	r3, #0
    379a:	68fa      	ldr	r2, [r7, #12]
    379c:	1c10      	adds	r0, r2, #0
    379e:	1c19      	adds	r1, r3, #0
    37a0:	4b13      	ldr	r3, [pc, #76]	; (37f0 <udi_msc_sbc_trans+0xd0>)
    37a2:	4798      	blx	r3
    37a4:	1c03      	adds	r3, r0, #0
    37a6:	2201      	movs	r2, #1
    37a8:	4053      	eors	r3, r2
    37aa:	b2db      	uxtb	r3, r3
    37ac:	2b00      	cmp	r3, #0
    37ae:	d000      	beq.n	37b2 <udi_msc_sbc_trans+0x92>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
    37b0:	e006      	b.n	37c0 <udi_msc_sbc_trans+0xa0>

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    37b2:	4b10      	ldr	r3, [pc, #64]	; (37f4 <udi_msc_sbc_trans+0xd4>)
    37b4:	1dfa      	adds	r2, r7, #7
    37b6:	7812      	ldrb	r2, [r2, #0]
    37b8:	701a      	strb	r2, [r3, #0]
	udi_msc_b_trans_req = true;
    37ba:	4b0f      	ldr	r3, [pc, #60]	; (37f8 <udi_msc_sbc_trans+0xd8>)
    37bc:	2201      	movs	r2, #1
    37be:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    37c0:	46bd      	mov	sp, r7
    37c2:	b004      	add	sp, #16
    37c4:	bd80      	pop	{r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	20006f2c 	.word	0x20006f2c
    37cc:	000012a5 	.word	0x000012a5
    37d0:	00003219 	.word	0x00003219
    37d4:	00003055 	.word	0x00003055
    37d8:	20006f6b 	.word	0x20006f6b
    37dc:	20006f6a 	.word	0x20006f6a
    37e0:	20006f69 	.word	0x20006f69
    37e4:	20006f68 	.word	0x20006f68
    37e8:	20006f6d 	.word	0x20006f6d
    37ec:	20006f6c 	.word	0x20006f6c
    37f0:	00002f71 	.word	0x00002f71
    37f4:	20006f66 	.word	0x20006f66
    37f8:	20006f65 	.word	0x20006f65

000037fc <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
    37fc:	b590      	push	{r4, r7, lr}
    37fe:	b083      	sub	sp, #12
    3800:	af00      	add	r7, sp, #0
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
    3802:	4b2a      	ldr	r3, [pc, #168]	; (38ac <udi_msc_process_trans+0xb0>)
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	2201      	movs	r2, #1
    3808:	4053      	eors	r3, r2
    380a:	b2db      	uxtb	r3, r3
    380c:	2b00      	cmp	r3, #0
    380e:	d001      	beq.n	3814 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
    3810:	2300      	movs	r3, #0
    3812:	e047      	b.n	38a4 <udi_msc_process_trans+0xa8>
	udi_msc_b_trans_req = false;
    3814:	4b25      	ldr	r3, [pc, #148]	; (38ac <udi_msc_process_trans+0xb0>)
    3816:	2200      	movs	r2, #0
    3818:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = false;
    381a:	4b25      	ldr	r3, [pc, #148]	; (38b0 <udi_msc_process_trans+0xb4>)
    381c:	2200      	movs	r2, #0
    381e:	701a      	strb	r2, [r3, #0]

	// Start transfer
	if (udi_msc_b_read) {
    3820:	4b24      	ldr	r3, [pc, #144]	; (38b4 <udi_msc_process_trans+0xb8>)
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	2b00      	cmp	r3, #0
    3826:	d00e      	beq.n	3846 <udi_msc_process_trans+0x4a>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    3828:	4b23      	ldr	r3, [pc, #140]	; (38b8 <udi_msc_process_trans+0xbc>)
    382a:	7b59      	ldrb	r1, [r3, #13]
    382c:	4b23      	ldr	r3, [pc, #140]	; (38bc <udi_msc_process_trans+0xc0>)
    382e:	681a      	ldr	r2, [r3, #0]
    3830:	4b23      	ldr	r3, [pc, #140]	; (38c0 <udi_msc_process_trans+0xc4>)
    3832:	881b      	ldrh	r3, [r3, #0]
    3834:	1dfc      	adds	r4, r7, #7
    3836:	1c08      	adds	r0, r1, #0
    3838:	1c11      	adds	r1, r2, #0
    383a:	1c1a      	adds	r2, r3, #0
    383c:	4b21      	ldr	r3, [pc, #132]	; (38c4 <udi_msc_process_trans+0xc8>)
    383e:	4798      	blx	r3
    3840:	1c03      	adds	r3, r0, #0
    3842:	7023      	strb	r3, [r4, #0]
    3844:	e00d      	b.n	3862 <udi_msc_process_trans+0x66>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    3846:	4b1c      	ldr	r3, [pc, #112]	; (38b8 <udi_msc_process_trans+0xbc>)
    3848:	7b59      	ldrb	r1, [r3, #13]
    384a:	4b1c      	ldr	r3, [pc, #112]	; (38bc <udi_msc_process_trans+0xc0>)
    384c:	681a      	ldr	r2, [r3, #0]
    384e:	4b1c      	ldr	r3, [pc, #112]	; (38c0 <udi_msc_process_trans+0xc4>)
    3850:	881b      	ldrh	r3, [r3, #0]
    3852:	1dfc      	adds	r4, r7, #7
    3854:	1c08      	adds	r0, r1, #0
    3856:	1c11      	adds	r1, r2, #0
    3858:	1c1a      	adds	r2, r3, #0
    385a:	4b1b      	ldr	r3, [pc, #108]	; (38c8 <udi_msc_process_trans+0xcc>)
    385c:	4798      	blx	r3
    385e:	1c03      	adds	r3, r0, #0
    3860:	7023      	strb	r3, [r4, #0]
				udi_msc_nb_block);
	}

	// Check if transfer is aborted by reset
	if (udi_msc_b_reset_trans) {
    3862:	4b13      	ldr	r3, [pc, #76]	; (38b0 <udi_msc_process_trans+0xb4>)
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	b2db      	uxtb	r3, r3
    3868:	2b00      	cmp	r3, #0
    386a:	d004      	beq.n	3876 <udi_msc_process_trans+0x7a>
		udi_msc_b_reset_trans = false;
    386c:	4b10      	ldr	r3, [pc, #64]	; (38b0 <udi_msc_process_trans+0xb4>)
    386e:	2200      	movs	r2, #0
    3870:	701a      	strb	r2, [r3, #0]
		return true;
    3872:	2301      	movs	r3, #1
    3874:	e016      	b.n	38a4 <udi_msc_process_trans+0xa8>
	}

	// Check status of transfer
	switch (status) {
    3876:	1dfb      	adds	r3, r7, #7
    3878:	781b      	ldrb	r3, [r3, #0]
    387a:	2b02      	cmp	r3, #2
    387c:	d009      	beq.n	3892 <udi_msc_process_trans+0x96>
    387e:	2b03      	cmp	r3, #3
    3880:	d004      	beq.n	388c <udi_msc_process_trans+0x90>
    3882:	2b00      	cmp	r3, #0
    3884:	d108      	bne.n	3898 <udi_msc_process_trans+0x9c>
	case CTRL_GOOD:
		udi_msc_sense_pass();
    3886:	4b11      	ldr	r3, [pc, #68]	; (38cc <udi_msc_process_trans+0xd0>)
    3888:	4798      	blx	r3
		break;
    388a:	e008      	b.n	389e <udi_msc_process_trans+0xa2>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    388c:	4b10      	ldr	r3, [pc, #64]	; (38d0 <udi_msc_process_trans+0xd4>)
    388e:	4798      	blx	r3
		break;
    3890:	e005      	b.n	389e <udi_msc_process_trans+0xa2>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    3892:	4b10      	ldr	r3, [pc, #64]	; (38d4 <udi_msc_process_trans+0xd8>)
    3894:	4798      	blx	r3
		break;
    3896:	e002      	b.n	389e <udi_msc_process_trans+0xa2>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
    3898:	4b0f      	ldr	r3, [pc, #60]	; (38d8 <udi_msc_process_trans+0xdc>)
    389a:	4798      	blx	r3
		break;
    389c:	46c0      	nop			; (mov r8, r8)
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
    389e:	4b0f      	ldr	r3, [pc, #60]	; (38dc <udi_msc_process_trans+0xe0>)
    38a0:	4798      	blx	r3
	return true;
    38a2:	2301      	movs	r3, #1
}
    38a4:	1c18      	adds	r0, r3, #0
    38a6:	46bd      	mov	sp, r7
    38a8:	b003      	add	sp, #12
    38aa:	bd90      	pop	{r4, r7, pc}
    38ac:	20006f65 	.word	0x20006f65
    38b0:	200001e9 	.word	0x200001e9
    38b4:	20006f66 	.word	0x20006f66
    38b8:	20006f2c 	.word	0x20006f2c
    38bc:	20006f68 	.word	0x20006f68
    38c0:	20006f6c 	.word	0x20006f6c
    38c4:	0000135d 	.word	0x0000135d
    38c8:	000013c1 	.word	0x000013c1
    38cc:	000031ad 	.word	0x000031ad
    38d0:	000031e5 	.word	0x000031e5
    38d4:	000031c9 	.word	0x000031c9
    38d8:	00003201 	.word	0x00003201
    38dc:	00003055 	.word	0x00003055

000038e0 <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	af00      	add	r7, sp, #0
    38e6:	6039      	str	r1, [r7, #0]
    38e8:	1dfb      	adds	r3, r7, #7
    38ea:	1c01      	adds	r1, r0, #0
    38ec:	7019      	strb	r1, [r3, #0]
    38ee:	1dbb      	adds	r3, r7, #6
    38f0:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    38f2:	1dfb      	adds	r3, r7, #7
    38f4:	781b      	ldrb	r3, [r3, #0]
    38f6:	1e5a      	subs	r2, r3, #1
    38f8:	4193      	sbcs	r3, r2
    38fa:	b2da      	uxtb	r2, r3
    38fc:	4b03      	ldr	r3, [pc, #12]	; (390c <udi_msc_trans_ack+0x2c>)
    38fe:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    3900:	4b03      	ldr	r3, [pc, #12]	; (3910 <udi_msc_trans_ack+0x30>)
    3902:	2201      	movs	r2, #1
    3904:	701a      	strb	r2, [r3, #0]
}
    3906:	46bd      	mov	sp, r7
    3908:	b002      	add	sp, #8
    390a:	bd80      	pop	{r7, pc}
    390c:	20007135 	.word	0x20007135
    3910:	200001e8 	.word	0x200001e8

00003914 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    3914:	b5b0      	push	{r4, r5, r7, lr}
    3916:	b086      	sub	sp, #24
    3918:	af02      	add	r7, sp, #8
    391a:	60b9      	str	r1, [r7, #8]
    391c:	607a      	str	r2, [r7, #4]
    391e:	603b      	str	r3, [r7, #0]
    3920:	1c3b      	adds	r3, r7, #0
    3922:	330f      	adds	r3, #15
    3924:	1c02      	adds	r2, r0, #0
    3926:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_b_ack_trans)
    3928:	4b30      	ldr	r3, [pc, #192]	; (39ec <udi_msc_trans_block+0xd8>)
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	b2db      	uxtb	r3, r3
    392e:	2201      	movs	r2, #1
    3930:	4053      	eors	r3, r2
    3932:	b2db      	uxtb	r3, r3
    3934:	2b00      	cmp	r3, #0
    3936:	d001      	beq.n	393c <udi_msc_trans_block+0x28>
		return false;	// No possible, transfer on going
    3938:	2300      	movs	r3, #0
    393a:	e052      	b.n	39e2 <udi_msc_trans_block+0xce>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    393c:	4b2b      	ldr	r3, [pc, #172]	; (39ec <udi_msc_trans_block+0xd8>)
    393e:	2200      	movs	r2, #0
    3940:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    3942:	1c3b      	adds	r3, r7, #0
    3944:	330f      	adds	r3, #15
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	d001      	beq.n	3950 <udi_msc_trans_block+0x3c>
    394c:	2381      	movs	r3, #129	; 0x81
    394e:	e000      	b.n	3952 <udi_msc_trans_block+0x3e>
    3950:	2302      	movs	r3, #2
    3952:	683a      	ldr	r2, [r7, #0]
    3954:	2a00      	cmp	r2, #0
    3956:	d001      	beq.n	395c <udi_msc_trans_block+0x48>
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	e000      	b.n	395e <udi_msc_trans_block+0x4a>
    395c:	4a24      	ldr	r2, [pc, #144]	; (39f0 <udi_msc_trans_block+0xdc>)
    395e:	68bd      	ldr	r5, [r7, #8]
    3960:	687c      	ldr	r4, [r7, #4]
    3962:	9200      	str	r2, [sp, #0]
    3964:	1c18      	adds	r0, r3, #0
    3966:	2100      	movs	r1, #0
    3968:	1c2a      	adds	r2, r5, #0
    396a:	1c23      	adds	r3, r4, #0
    396c:	4c21      	ldr	r4, [pc, #132]	; (39f4 <udi_msc_trans_block+0xe0>)
    396e:	47a0      	blx	r4
    3970:	1c03      	adds	r3, r0, #0
    3972:	2201      	movs	r2, #1
    3974:	4053      	eors	r3, r2
    3976:	b2db      	uxtb	r3, r3
    3978:	2b00      	cmp	r3, #0
    397a:	d004      	beq.n	3986 <udi_msc_trans_block+0x72>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
    397c:	4b1b      	ldr	r3, [pc, #108]	; (39ec <udi_msc_trans_block+0xd8>)
    397e:	2201      	movs	r2, #1
    3980:	701a      	strb	r2, [r3, #0]
		return false;
    3982:	2300      	movs	r3, #0
    3984:	e02d      	b.n	39e2 <udi_msc_trans_block+0xce>
	}
	if (NULL == callback) {
    3986:	683b      	ldr	r3, [r7, #0]
    3988:	2b00      	cmp	r3, #0
    398a:	d123      	bne.n	39d4 <udi_msc_trans_block+0xc0>
		while (!udi_msc_b_ack_trans);
    398c:	46c0      	nop			; (mov r8, r8)
    398e:	4b17      	ldr	r3, [pc, #92]	; (39ec <udi_msc_trans_block+0xd8>)
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	b2db      	uxtb	r3, r3
    3994:	2201      	movs	r2, #1
    3996:	4053      	eors	r3, r2
    3998:	b2db      	uxtb	r3, r3
    399a:	2b00      	cmp	r3, #0
    399c:	d1f7      	bne.n	398e <udi_msc_trans_block+0x7a>
		if (udi_msc_b_abort_trans) {
    399e:	4b16      	ldr	r3, [pc, #88]	; (39f8 <udi_msc_trans_block+0xe4>)
    39a0:	781b      	ldrb	r3, [r3, #0]
    39a2:	b2db      	uxtb	r3, r3
    39a4:	2b00      	cmp	r3, #0
    39a6:	d001      	beq.n	39ac <udi_msc_trans_block+0x98>
			return false;
    39a8:	2300      	movs	r3, #0
    39aa:	e01a      	b.n	39e2 <udi_msc_trans_block+0xce>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
    39ac:	4b13      	ldr	r3, [pc, #76]	; (39fc <udi_msc_trans_block+0xe8>)
    39ae:	689a      	ldr	r2, [r3, #8]
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	1ad2      	subs	r2, r2, r3
    39b4:	4b11      	ldr	r3, [pc, #68]	; (39fc <udi_msc_trans_block+0xe8>)
    39b6:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
    39b8:	4b0f      	ldr	r3, [pc, #60]	; (39f8 <udi_msc_trans_block+0xe4>)
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	b2db      	uxtb	r3, r3
    39be:	1e5a      	subs	r2, r3, #1
    39c0:	4193      	sbcs	r3, r2
    39c2:	b2db      	uxtb	r3, r3
    39c4:	2201      	movs	r2, #1
    39c6:	4053      	eors	r3, r2
    39c8:	b2db      	uxtb	r3, r3
    39ca:	1c1a      	adds	r2, r3, #0
    39cc:	2301      	movs	r3, #1
    39ce:	4013      	ands	r3, r2
    39d0:	b2db      	uxtb	r3, r3
    39d2:	e006      	b.n	39e2 <udi_msc_trans_block+0xce>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    39d4:	4b09      	ldr	r3, [pc, #36]	; (39fc <udi_msc_trans_block+0xe8>)
    39d6:	689a      	ldr	r2, [r3, #8]
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	1ad2      	subs	r2, r2, r3
    39dc:	4b07      	ldr	r3, [pc, #28]	; (39fc <udi_msc_trans_block+0xe8>)
    39de:	609a      	str	r2, [r3, #8]
	return true;
    39e0:	2301      	movs	r3, #1
}
    39e2:	1c18      	adds	r0, r3, #0
    39e4:	46bd      	mov	sp, r7
    39e6:	b004      	add	sp, #16
    39e8:	bdb0      	pop	{r4, r5, r7, pc}
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	200001e8 	.word	0x200001e8
    39f0:	000038e1 	.word	0x000038e1
    39f4:	00007bb5 	.word	0x00007bb5
    39f8:	20007135 	.word	0x20007135
    39fc:	200001d8 	.word	0x200001d8

00003a00 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    3a00:	b580      	push	{r7, lr}
    3a02:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    3a04:	4b01      	ldr	r3, [pc, #4]	; (3a0c <udc_get_string_serial_name+0xc>)
	}
    3a06:	1c18      	adds	r0, r3, #0
    3a08:	46bd      	mov	sp, r7
    3a0a:	bd80      	pop	{r7, pc}
    3a0c:	0000b4f0 	.word	0x0000b4f0

00003a10 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    3a10:	b580      	push	{r7, lr}
    3a12:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    3a14:	4b02      	ldr	r3, [pc, #8]	; (3a20 <udc_get_interface_desc+0x10>)
    3a16:	681b      	ldr	r3, [r3, #0]
}
    3a18:	1c18      	adds	r0, r3, #0
    3a1a:	46bd      	mov	sp, r7
    3a1c:	bd80      	pop	{r7, pc}
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	20006f9c 	.word	0x20006f9c

00003a24 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    3a24:	b580      	push	{r7, lr}
    3a26:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3a28:	4b07      	ldr	r3, [pc, #28]	; (3a48 <udc_get_eof_conf+0x24>)
    3a2a:	681b      	ldr	r3, [r3, #0]
    3a2c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3a2e:	4b06      	ldr	r3, [pc, #24]	; (3a48 <udc_get_eof_conf+0x24>)
    3a30:	681b      	ldr	r3, [r3, #0]
    3a32:	681b      	ldr	r3, [r3, #0]
    3a34:	7899      	ldrb	r1, [r3, #2]
    3a36:	78db      	ldrb	r3, [r3, #3]
    3a38:	021b      	lsls	r3, r3, #8
    3a3a:	430b      	orrs	r3, r1
    3a3c:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3a3e:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    3a40:	1c18      	adds	r0, r3, #0
    3a42:	46bd      	mov	sp, r7
    3a44:	bd80      	pop	{r7, pc}
    3a46:	46c0      	nop			; (mov r8, r8)
    3a48:	20006f98 	.word	0x20006f98

00003a4c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b084      	sub	sp, #16
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	1c0a      	adds	r2, r1, #0
    3a56:	1cfb      	adds	r3, r7, #3
    3a58:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3a5a:	4b12      	ldr	r3, [pc, #72]	; (3aa4 <udc_next_desc_in_iface+0x58>)
    3a5c:	4798      	blx	r3
    3a5e:	1c03      	adds	r3, r0, #0
    3a60:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3a66:	687a      	ldr	r2, [r7, #4]
    3a68:	18d3      	adds	r3, r2, r3
    3a6a:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3a6c:	e011      	b.n	3a92 <udc_next_desc_in_iface+0x46>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	785b      	ldrb	r3, [r3, #1]
    3a72:	2b04      	cmp	r3, #4
    3a74:	d100      	bne.n	3a78 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
    3a76:	e010      	b.n	3a9a <udc_next_desc_in_iface+0x4e>
		}
		if (desc_id == desc->bDescriptorType) {
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	785b      	ldrb	r3, [r3, #1]
    3a7c:	1cfa      	adds	r2, r7, #3
    3a7e:	7812      	ldrb	r2, [r2, #0]
    3a80:	429a      	cmp	r2, r3
    3a82:	d101      	bne.n	3a88 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	e009      	b.n	3a9c <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3a8c:	687a      	ldr	r2, [r7, #4]
    3a8e:	18d3      	adds	r3, r2, r3
    3a90:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3a92:	68fa      	ldr	r2, [r7, #12]
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	429a      	cmp	r2, r3
    3a98:	d8e9      	bhi.n	3a6e <udc_next_desc_in_iface+0x22>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3a9a:	2300      	movs	r3, #0
}
    3a9c:	1c18      	adds	r0, r3, #0
    3a9e:	46bd      	mov	sp, r7
    3aa0:	b004      	add	sp, #16
    3aa2:	bd80      	pop	{r7, pc}
    3aa4:	00003a25 	.word	0x00003a25

00003aa8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b084      	sub	sp, #16
    3aac:	af00      	add	r7, sp, #0
    3aae:	1c0a      	adds	r2, r1, #0
    3ab0:	1dfb      	adds	r3, r7, #7
    3ab2:	1c01      	adds	r1, r0, #0
    3ab4:	7019      	strb	r1, [r3, #0]
    3ab6:	1dbb      	adds	r3, r7, #6
    3ab8:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3aba:	4b20      	ldr	r3, [pc, #128]	; (3b3c <udc_update_iface_desc+0x94>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d101      	bne.n	3ac6 <udc_update_iface_desc+0x1e>
		return false;
    3ac2:	2300      	movs	r3, #0
    3ac4:	e036      	b.n	3b34 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3ac6:	4b1e      	ldr	r3, [pc, #120]	; (3b40 <udc_update_iface_desc+0x98>)
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	681b      	ldr	r3, [r3, #0]
    3acc:	791b      	ldrb	r3, [r3, #4]
    3ace:	1dfa      	adds	r2, r7, #7
    3ad0:	7812      	ldrb	r2, [r2, #0]
    3ad2:	429a      	cmp	r2, r3
    3ad4:	d301      	bcc.n	3ada <udc_update_iface_desc+0x32>
		return false;
    3ad6:	2300      	movs	r3, #0
    3ad8:	e02c      	b.n	3b34 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    3ada:	4b19      	ldr	r3, [pc, #100]	; (3b40 <udc_update_iface_desc+0x98>)
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3ae0:	4b18      	ldr	r3, [pc, #96]	; (3b44 <udc_update_iface_desc+0x9c>)
    3ae2:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3ae4:	4b18      	ldr	r3, [pc, #96]	; (3b48 <udc_update_iface_desc+0xa0>)
    3ae6:	4798      	blx	r3
    3ae8:	1c03      	adds	r3, r0, #0
    3aea:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3aec:	e01c      	b.n	3b28 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3aee:	4b15      	ldr	r3, [pc, #84]	; (3b44 <udc_update_iface_desc+0x9c>)
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	785b      	ldrb	r3, [r3, #1]
    3af4:	2b04      	cmp	r3, #4
    3af6:	d10f      	bne.n	3b18 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3af8:	4b12      	ldr	r3, [pc, #72]	; (3b44 <udc_update_iface_desc+0x9c>)
    3afa:	681b      	ldr	r3, [r3, #0]
    3afc:	789b      	ldrb	r3, [r3, #2]
    3afe:	1dfa      	adds	r2, r7, #7
    3b00:	7812      	ldrb	r2, [r2, #0]
    3b02:	429a      	cmp	r2, r3
    3b04:	d108      	bne.n	3b18 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    3b06:	4b0f      	ldr	r3, [pc, #60]	; (3b44 <udc_update_iface_desc+0x9c>)
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3b0c:	1dba      	adds	r2, r7, #6
    3b0e:	7812      	ldrb	r2, [r2, #0]
    3b10:	429a      	cmp	r2, r3
    3b12:	d101      	bne.n	3b18 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3b14:	2301      	movs	r3, #1
    3b16:	e00d      	b.n	3b34 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3b18:	4b0a      	ldr	r3, [pc, #40]	; (3b44 <udc_update_iface_desc+0x9c>)
    3b1a:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3b1c:	4b09      	ldr	r3, [pc, #36]	; (3b44 <udc_update_iface_desc+0x9c>)
    3b1e:	681b      	ldr	r3, [r3, #0]
    3b20:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3b22:	18d2      	adds	r2, r2, r3
    3b24:	4b07      	ldr	r3, [pc, #28]	; (3b44 <udc_update_iface_desc+0x9c>)
    3b26:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    3b28:	4b06      	ldr	r3, [pc, #24]	; (3b44 <udc_update_iface_desc+0x9c>)
    3b2a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3b2c:	68fa      	ldr	r2, [r7, #12]
    3b2e:	429a      	cmp	r2, r3
    3b30:	d8dd      	bhi.n	3aee <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3b32:	2300      	movs	r3, #0
}
    3b34:	1c18      	adds	r0, r3, #0
    3b36:	46bd      	mov	sp, r7
    3b38:	b004      	add	sp, #16
    3b3a:	bd80      	pop	{r7, pc}
    3b3c:	20006f94 	.word	0x20006f94
    3b40:	20006f98 	.word	0x20006f98
    3b44:	20006f9c 	.word	0x20006f9c
    3b48:	00003a25 	.word	0x00003a25

00003b4c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b084      	sub	sp, #16
    3b50:	af00      	add	r7, sp, #0
    3b52:	1c02      	adds	r2, r0, #0
    3b54:	1dfb      	adds	r3, r7, #7
    3b56:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3b58:	1dfb      	adds	r3, r7, #7
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	1c18      	adds	r0, r3, #0
    3b5e:	2100      	movs	r1, #0
    3b60:	4b20      	ldr	r3, [pc, #128]	; (3be4 <udc_iface_disable+0x98>)
    3b62:	4798      	blx	r3
    3b64:	1c03      	adds	r3, r0, #0
    3b66:	2201      	movs	r2, #1
    3b68:	4053      	eors	r3, r2
    3b6a:	b2db      	uxtb	r3, r3
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d001      	beq.n	3b74 <udc_iface_disable+0x28>
		return false;
    3b70:	2300      	movs	r3, #0
    3b72:	e033      	b.n	3bdc <udc_iface_disable+0x90>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3b74:	4b1c      	ldr	r3, [pc, #112]	; (3be8 <udc_iface_disable+0x9c>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	685a      	ldr	r2, [r3, #4]
    3b7a:	1dfb      	adds	r3, r7, #7
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	009b      	lsls	r3, r3, #2
    3b80:	18d3      	adds	r3, r2, r3
    3b82:	681b      	ldr	r3, [r3, #0]
    3b84:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3b86:	68bb      	ldr	r3, [r7, #8]
    3b88:	68db      	ldr	r3, [r3, #12]
    3b8a:	4798      	blx	r3
    3b8c:	1c03      	adds	r3, r0, #0
    3b8e:	1dfa      	adds	r2, r7, #7
    3b90:	7812      	ldrb	r2, [r2, #0]
    3b92:	1c10      	adds	r0, r2, #0
    3b94:	1c19      	adds	r1, r3, #0
    3b96:	4b13      	ldr	r3, [pc, #76]	; (3be4 <udc_iface_disable+0x98>)
    3b98:	4798      	blx	r3
    3b9a:	1c03      	adds	r3, r0, #0
    3b9c:	2201      	movs	r2, #1
    3b9e:	4053      	eors	r3, r2
    3ba0:	b2db      	uxtb	r3, r3
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d001      	beq.n	3baa <udc_iface_disable+0x5e>
		return false;
    3ba6:	2300      	movs	r3, #0
    3ba8:	e018      	b.n	3bdc <udc_iface_disable+0x90>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3baa:	4b10      	ldr	r3, [pc, #64]	; (3bec <udc_iface_disable+0xa0>)
    3bac:	681b      	ldr	r3, [r3, #0]
    3bae:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	1c18      	adds	r0, r3, #0
    3bb4:	2105      	movs	r1, #5
    3bb6:	4b0e      	ldr	r3, [pc, #56]	; (3bf0 <udc_iface_disable+0xa4>)
    3bb8:	4798      	blx	r3
    3bba:	1c03      	adds	r3, r0, #0
    3bbc:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d105      	bne.n	3bd0 <udc_iface_disable+0x84>
				break;
    3bc4:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    3bc6:	68bb      	ldr	r3, [r7, #8]
    3bc8:	685b      	ldr	r3, [r3, #4]
    3bca:	4798      	blx	r3
	return true;
    3bcc:	2301      	movs	r3, #1
    3bce:	e005      	b.n	3bdc <udc_iface_disable+0x90>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	789b      	ldrb	r3, [r3, #2]
    3bd4:	1c18      	adds	r0, r3, #0
    3bd6:	4b07      	ldr	r3, [pc, #28]	; (3bf4 <udc_iface_disable+0xa8>)
    3bd8:	4798      	blx	r3
		}
    3bda:	e7e9      	b.n	3bb0 <udc_iface_disable+0x64>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    3bdc:	1c18      	adds	r0, r3, #0
    3bde:	46bd      	mov	sp, r7
    3be0:	b004      	add	sp, #16
    3be2:	bd80      	pop	{r7, pc}
    3be4:	00003aa9 	.word	0x00003aa9
    3be8:	20006f98 	.word	0x20006f98
    3bec:	20006f9c 	.word	0x20006f9c
    3bf0:	00003a4d 	.word	0x00003a4d
    3bf4:	000077a9 	.word	0x000077a9

00003bf8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b084      	sub	sp, #16
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	1c0a      	adds	r2, r1, #0
    3c00:	1dfb      	adds	r3, r7, #7
    3c02:	1c01      	adds	r1, r0, #0
    3c04:	7019      	strb	r1, [r3, #0]
    3c06:	1dbb      	adds	r3, r7, #6
    3c08:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3c0a:	1dfb      	adds	r3, r7, #7
    3c0c:	781a      	ldrb	r2, [r3, #0]
    3c0e:	1dbb      	adds	r3, r7, #6
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	1c10      	adds	r0, r2, #0
    3c14:	1c19      	adds	r1, r3, #0
    3c16:	4b20      	ldr	r3, [pc, #128]	; (3c98 <udc_iface_enable+0xa0>)
    3c18:	4798      	blx	r3
    3c1a:	1c03      	adds	r3, r0, #0
    3c1c:	2201      	movs	r2, #1
    3c1e:	4053      	eors	r3, r2
    3c20:	b2db      	uxtb	r3, r3
    3c22:	2b00      	cmp	r3, #0
    3c24:	d001      	beq.n	3c2a <udc_iface_enable+0x32>
		return false;
    3c26:	2300      	movs	r3, #0
    3c28:	e031      	b.n	3c8e <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3c2a:	4b1c      	ldr	r3, [pc, #112]	; (3c9c <udc_iface_enable+0xa4>)
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	1c18      	adds	r0, r3, #0
    3c34:	2105      	movs	r1, #5
    3c36:	4b1a      	ldr	r3, [pc, #104]	; (3ca0 <udc_iface_enable+0xa8>)
    3c38:	4798      	blx	r3
    3c3a:	1c03      	adds	r3, r0, #0
    3c3c:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3c3e:	68fb      	ldr	r3, [r7, #12]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d10c      	bne.n	3c5e <udc_iface_enable+0x66>
			break;
    3c44:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3c46:	4b17      	ldr	r3, [pc, #92]	; (3ca4 <udc_iface_enable+0xac>)
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	685a      	ldr	r2, [r3, #4]
    3c4c:	1dfb      	adds	r3, r7, #7
    3c4e:	781b      	ldrb	r3, [r3, #0]
    3c50:	009b      	lsls	r3, r3, #2
    3c52:	18d3      	adds	r3, r2, r3
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	4798      	blx	r3
    3c5a:	1c03      	adds	r3, r0, #0
    3c5c:	e017      	b.n	3c8e <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3c5e:	68fb      	ldr	r3, [r7, #12]
    3c60:	7899      	ldrb	r1, [r3, #2]
    3c62:	68fb      	ldr	r3, [r7, #12]
    3c64:	78da      	ldrb	r2, [r3, #3]
    3c66:	68fb      	ldr	r3, [r7, #12]
    3c68:	7918      	ldrb	r0, [r3, #4]
    3c6a:	795b      	ldrb	r3, [r3, #5]
    3c6c:	021b      	lsls	r3, r3, #8
    3c6e:	4303      	orrs	r3, r0
    3c70:	b29b      	uxth	r3, r3
    3c72:	1c08      	adds	r0, r1, #0
    3c74:	1c11      	adds	r1, r2, #0
    3c76:	1c1a      	adds	r2, r3, #0
    3c78:	4b0b      	ldr	r3, [pc, #44]	; (3ca8 <udc_iface_enable+0xb0>)
    3c7a:	4798      	blx	r3
    3c7c:	1c03      	adds	r3, r0, #0
    3c7e:	2201      	movs	r2, #1
    3c80:	4053      	eors	r3, r2
    3c82:	b2db      	uxtb	r3, r3
    3c84:	2b00      	cmp	r3, #0
    3c86:	d001      	beq.n	3c8c <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    3c88:	2300      	movs	r3, #0
    3c8a:	e000      	b.n	3c8e <udc_iface_enable+0x96>
		}
	}
    3c8c:	e7d0      	b.n	3c30 <udc_iface_enable+0x38>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    3c8e:	1c18      	adds	r0, r3, #0
    3c90:	46bd      	mov	sp, r7
    3c92:	b004      	add	sp, #16
    3c94:	bd80      	pop	{r7, pc}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	00003aa9 	.word	0x00003aa9
    3c9c:	20006f9c 	.word	0x20006f9c
    3ca0:	00003a4d 	.word	0x00003a4d
    3ca4:	20006f98 	.word	0x20006f98
    3ca8:	00007839 	.word	0x00007839

00003cac <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    3cac:	b580      	push	{r7, lr}
    3cae:	af00      	add	r7, sp, #0
	udd_enable();
    3cb0:	4b01      	ldr	r3, [pc, #4]	; (3cb8 <udc_start+0xc>)
    3cb2:	4798      	blx	r3
}
    3cb4:	46bd      	mov	sp, r7
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	000087dd 	.word	0x000087dd

00003cbc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3cc2:	4b16      	ldr	r3, [pc, #88]	; (3d1c <udc_reset+0x60>)
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d015      	beq.n	3cf6 <udc_reset+0x3a>
		for (iface_num = 0;
    3cca:	1dfb      	adds	r3, r7, #7
    3ccc:	2200      	movs	r2, #0
    3cce:	701a      	strb	r2, [r3, #0]
    3cd0:	e009      	b.n	3ce6 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3cd2:	1dfb      	adds	r3, r7, #7
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	1c18      	adds	r0, r3, #0
    3cd8:	4b11      	ldr	r3, [pc, #68]	; (3d20 <udc_reset+0x64>)
    3cda:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3cdc:	1dfb      	adds	r3, r7, #7
    3cde:	781a      	ldrb	r2, [r3, #0]
    3ce0:	1dfb      	adds	r3, r7, #7
    3ce2:	3201      	adds	r2, #1
    3ce4:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3ce6:	4b0f      	ldr	r3, [pc, #60]	; (3d24 <udc_reset+0x68>)
    3ce8:	681b      	ldr	r3, [r3, #0]
    3cea:	681b      	ldr	r3, [r3, #0]
    3cec:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3cee:	1dfa      	adds	r2, r7, #7
    3cf0:	7812      	ldrb	r2, [r2, #0]
    3cf2:	429a      	cmp	r2, r3
    3cf4:	d3ed      	bcc.n	3cd2 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3cf6:	4b09      	ldr	r3, [pc, #36]	; (3d1c <udc_reset+0x60>)
    3cf8:	2200      	movs	r2, #0
    3cfa:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    3cfc:	4b0a      	ldr	r3, [pc, #40]	; (3d28 <udc_reset+0x6c>)
    3cfe:	881a      	ldrh	r2, [r3, #0]
    3d00:	2302      	movs	r3, #2
    3d02:	4013      	ands	r3, r2
    3d04:	b29b      	uxth	r3, r3
    3d06:	2b00      	cmp	r3, #0
    3d08:	d001      	beq.n	3d0e <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    3d0a:	4b08      	ldr	r3, [pc, #32]	; (3d2c <udc_reset+0x70>)
    3d0c:	4798      	blx	r3
	}
#endif
	udc_device_status =
    3d0e:	4b06      	ldr	r3, [pc, #24]	; (3d28 <udc_reset+0x6c>)
    3d10:	2201      	movs	r2, #1
    3d12:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3d14:	46bd      	mov	sp, r7
    3d16:	b002      	add	sp, #8
    3d18:	bd80      	pop	{r7, pc}
    3d1a:	46c0      	nop			; (mov r8, r8)
    3d1c:	20006f94 	.word	0x20006f94
    3d20:	00003b4d 	.word	0x00003b4d
    3d24:	20006f98 	.word	0x20006f98
    3d28:	20006f8c 	.word	0x20006f8c
    3d2c:	0000a955 	.word	0x0000a955

00003d30 <udc_sof_notify>:

void udc_sof_notify(void)
{
    3d30:	b580      	push	{r7, lr}
    3d32:	b082      	sub	sp, #8
    3d34:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3d36:	4b16      	ldr	r3, [pc, #88]	; (3d90 <udc_sof_notify+0x60>)
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d025      	beq.n	3d8a <udc_sof_notify+0x5a>
		for (iface_num = 0;
    3d3e:	1dfb      	adds	r3, r7, #7
    3d40:	2200      	movs	r2, #0
    3d42:	701a      	strb	r2, [r3, #0]
    3d44:	e019      	b.n	3d7a <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3d46:	4b13      	ldr	r3, [pc, #76]	; (3d94 <udc_sof_notify+0x64>)
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	685a      	ldr	r2, [r3, #4]
    3d4c:	1dfb      	adds	r3, r7, #7
    3d4e:	781b      	ldrb	r3, [r3, #0]
    3d50:	009b      	lsls	r3, r3, #2
    3d52:	18d3      	adds	r3, r2, r3
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	691b      	ldr	r3, [r3, #16]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d009      	beq.n	3d70 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3d5c:	4b0d      	ldr	r3, [pc, #52]	; (3d94 <udc_sof_notify+0x64>)
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	685a      	ldr	r2, [r3, #4]
    3d62:	1dfb      	adds	r3, r7, #7
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	009b      	lsls	r3, r3, #2
    3d68:	18d3      	adds	r3, r2, r3
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	691b      	ldr	r3, [r3, #16]
    3d6e:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3d70:	1dfb      	adds	r3, r7, #7
    3d72:	781a      	ldrb	r2, [r3, #0]
    3d74:	1dfb      	adds	r3, r7, #7
    3d76:	3201      	adds	r2, #1
    3d78:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3d7a:	4b06      	ldr	r3, [pc, #24]	; (3d94 <udc_sof_notify+0x64>)
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3d82:	1dfa      	adds	r2, r7, #7
    3d84:	7812      	ldrb	r2, [r2, #0]
    3d86:	429a      	cmp	r2, r3
    3d88:	d3dd      	bcc.n	3d46 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3d8a:	46bd      	mov	sp, r7
    3d8c:	b002      	add	sp, #8
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	20006f94 	.word	0x20006f94
    3d94:	20006f98 	.word	0x20006f98

00003d98 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3d9c:	4b07      	ldr	r3, [pc, #28]	; (3dbc <udc_req_std_dev_get_status+0x24>)
    3d9e:	88db      	ldrh	r3, [r3, #6]
    3da0:	2b02      	cmp	r3, #2
    3da2:	d001      	beq.n	3da8 <udc_req_std_dev_get_status+0x10>
		return false;
    3da4:	2300      	movs	r3, #0
    3da6:	e005      	b.n	3db4 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3da8:	4b05      	ldr	r3, [pc, #20]	; (3dc0 <udc_req_std_dev_get_status+0x28>)
    3daa:	1c18      	adds	r0, r3, #0
    3dac:	2102      	movs	r1, #2
    3dae:	4b05      	ldr	r3, [pc, #20]	; (3dc4 <udc_req_std_dev_get_status+0x2c>)
    3db0:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    3db2:	2301      	movs	r3, #1
}
    3db4:	1c18      	adds	r0, r3, #0
    3db6:	46bd      	mov	sp, r7
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	20007330 	.word	0x20007330
    3dc0:	20006f8c 	.word	0x20006f8c
    3dc4:	00007f29 	.word	0x00007f29

00003dc8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3dcc:	4b0c      	ldr	r3, [pc, #48]	; (3e00 <udc_req_std_ep_get_status+0x38>)
    3dce:	88db      	ldrh	r3, [r3, #6]
    3dd0:	2b02      	cmp	r3, #2
    3dd2:	d001      	beq.n	3dd8 <udc_req_std_ep_get_status+0x10>
		return false;
    3dd4:	2300      	movs	r3, #0
    3dd6:	e00f      	b.n	3df8 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3dd8:	4b09      	ldr	r3, [pc, #36]	; (3e00 <udc_req_std_ep_get_status+0x38>)
    3dda:	889b      	ldrh	r3, [r3, #4]
    3ddc:	b2db      	uxtb	r3, r3
    3dde:	1c18      	adds	r0, r3, #0
    3de0:	4b08      	ldr	r3, [pc, #32]	; (3e04 <udc_req_std_ep_get_status+0x3c>)
    3de2:	4798      	blx	r3
    3de4:	1c03      	adds	r3, r0, #0
    3de6:	1c1a      	adds	r2, r3, #0
    3de8:	4b07      	ldr	r3, [pc, #28]	; (3e08 <udc_req_std_ep_get_status+0x40>)
    3dea:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3dec:	4b06      	ldr	r3, [pc, #24]	; (3e08 <udc_req_std_ep_get_status+0x40>)
    3dee:	1c18      	adds	r0, r3, #0
    3df0:	2102      	movs	r1, #2
    3df2:	4b06      	ldr	r3, [pc, #24]	; (3e0c <udc_req_std_ep_get_status+0x44>)
    3df4:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    3df6:	2301      	movs	r3, #1
}
    3df8:	1c18      	adds	r0, r3, #0
    3dfa:	46bd      	mov	sp, r7
    3dfc:	bd80      	pop	{r7, pc}
    3dfe:	46c0      	nop			; (mov r8, r8)
    3e00:	20007330 	.word	0x20007330
    3e04:	000079dd 	.word	0x000079dd
    3e08:	20006fa0 	.word	0x20006fa0
    3e0c:	00007f29 	.word	0x00007f29

00003e10 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3e14:	4b0c      	ldr	r3, [pc, #48]	; (3e48 <udc_req_std_dev_clear_feature+0x38>)
    3e16:	88db      	ldrh	r3, [r3, #6]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d001      	beq.n	3e20 <udc_req_std_dev_clear_feature+0x10>
		return false;
    3e1c:	2300      	movs	r3, #0
    3e1e:	e00f      	b.n	3e40 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3e20:	4b09      	ldr	r3, [pc, #36]	; (3e48 <udc_req_std_dev_clear_feature+0x38>)
    3e22:	885b      	ldrh	r3, [r3, #2]
    3e24:	2b01      	cmp	r3, #1
    3e26:	d10a      	bne.n	3e3e <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3e28:	4b08      	ldr	r3, [pc, #32]	; (3e4c <udc_req_std_dev_clear_feature+0x3c>)
    3e2a:	881b      	ldrh	r3, [r3, #0]
    3e2c:	2202      	movs	r2, #2
    3e2e:	4393      	bics	r3, r2
    3e30:	b29a      	uxth	r2, r3
    3e32:	4b06      	ldr	r3, [pc, #24]	; (3e4c <udc_req_std_dev_clear_feature+0x3c>)
    3e34:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3e36:	4b06      	ldr	r3, [pc, #24]	; (3e50 <udc_req_std_dev_clear_feature+0x40>)
    3e38:	4798      	blx	r3
#endif
		return true;
    3e3a:	2301      	movs	r3, #1
    3e3c:	e000      	b.n	3e40 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    3e3e:	2300      	movs	r3, #0
}
    3e40:	1c18      	adds	r0, r3, #0
    3e42:	46bd      	mov	sp, r7
    3e44:	bd80      	pop	{r7, pc}
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	20007330 	.word	0x20007330
    3e4c:	20006f8c 	.word	0x20006f8c
    3e50:	0000a955 	.word	0x0000a955

00003e54 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    3e54:	b580      	push	{r7, lr}
    3e56:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3e58:	4b0a      	ldr	r3, [pc, #40]	; (3e84 <udc_req_std_ep_clear_feature+0x30>)
    3e5a:	88db      	ldrh	r3, [r3, #6]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d001      	beq.n	3e64 <udc_req_std_ep_clear_feature+0x10>
		return false;
    3e60:	2300      	movs	r3, #0
    3e62:	e00c      	b.n	3e7e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3e64:	4b07      	ldr	r3, [pc, #28]	; (3e84 <udc_req_std_ep_clear_feature+0x30>)
    3e66:	885b      	ldrh	r3, [r3, #2]
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d107      	bne.n	3e7c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3e6c:	4b05      	ldr	r3, [pc, #20]	; (3e84 <udc_req_std_ep_clear_feature+0x30>)
    3e6e:	889b      	ldrh	r3, [r3, #4]
    3e70:	b2db      	uxtb	r3, r3
    3e72:	1c18      	adds	r0, r3, #0
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <udc_req_std_ep_clear_feature+0x34>)
    3e76:	4798      	blx	r3
    3e78:	1c03      	adds	r3, r0, #0
    3e7a:	e000      	b.n	3e7e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    3e7c:	2300      	movs	r3, #0
}
    3e7e:	1c18      	adds	r0, r3, #0
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	20007330 	.word	0x20007330
    3e88:	00007a61 	.word	0x00007a61

00003e8c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3e90:	4b0c      	ldr	r3, [pc, #48]	; (3ec4 <udc_req_std_dev_set_feature+0x38>)
    3e92:	88db      	ldrh	r3, [r3, #6]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d001      	beq.n	3e9c <udc_req_std_dev_set_feature+0x10>
		return false;
    3e98:	2300      	movs	r3, #0
    3e9a:	e010      	b.n	3ebe <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3e9c:	4b09      	ldr	r3, [pc, #36]	; (3ec4 <udc_req_std_dev_set_feature+0x38>)
    3e9e:	885b      	ldrh	r3, [r3, #2]
    3ea0:	2b01      	cmp	r3, #1
    3ea2:	d002      	beq.n	3eaa <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    3ea4:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    3ea6:	2300      	movs	r3, #0
    3ea8:	e009      	b.n	3ebe <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    3eaa:	4b07      	ldr	r3, [pc, #28]	; (3ec8 <udc_req_std_dev_set_feature+0x3c>)
    3eac:	881b      	ldrh	r3, [r3, #0]
    3eae:	2202      	movs	r2, #2
    3eb0:	4313      	orrs	r3, r2
    3eb2:	b29a      	uxth	r2, r3
    3eb4:	4b04      	ldr	r3, [pc, #16]	; (3ec8 <udc_req_std_dev_set_feature+0x3c>)
    3eb6:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    3eb8:	4b04      	ldr	r3, [pc, #16]	; (3ecc <udc_req_std_dev_set_feature+0x40>)
    3eba:	4798      	blx	r3
		return true;
    3ebc:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    3ebe:	1c18      	adds	r0, r3, #0
    3ec0:	46bd      	mov	sp, r7
    3ec2:	bd80      	pop	{r7, pc}
    3ec4:	20007330 	.word	0x20007330
    3ec8:	20006f8c 	.word	0x20006f8c
    3ecc:	0000a945 	.word	0x0000a945

00003ed0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3ed4:	4b0d      	ldr	r3, [pc, #52]	; (3f0c <udc_req_std_ep_set_feature+0x3c>)
    3ed6:	88db      	ldrh	r3, [r3, #6]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d001      	beq.n	3ee0 <udc_req_std_ep_set_feature+0x10>
		return false;
    3edc:	2300      	movs	r3, #0
    3ede:	e012      	b.n	3f06 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3ee0:	4b0a      	ldr	r3, [pc, #40]	; (3f0c <udc_req_std_ep_set_feature+0x3c>)
    3ee2:	885b      	ldrh	r3, [r3, #2]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d10d      	bne.n	3f04 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3ee8:	4b08      	ldr	r3, [pc, #32]	; (3f0c <udc_req_std_ep_set_feature+0x3c>)
    3eea:	889b      	ldrh	r3, [r3, #4]
    3eec:	b2db      	uxtb	r3, r3
    3eee:	1c18      	adds	r0, r3, #0
    3ef0:	4b07      	ldr	r3, [pc, #28]	; (3f10 <udc_req_std_ep_set_feature+0x40>)
    3ef2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3ef4:	4b05      	ldr	r3, [pc, #20]	; (3f0c <udc_req_std_ep_set_feature+0x3c>)
    3ef6:	889b      	ldrh	r3, [r3, #4]
    3ef8:	b2db      	uxtb	r3, r3
    3efa:	1c18      	adds	r0, r3, #0
    3efc:	4b05      	ldr	r3, [pc, #20]	; (3f14 <udc_req_std_ep_set_feature+0x44>)
    3efe:	4798      	blx	r3
    3f00:	1c03      	adds	r3, r0, #0
    3f02:	e000      	b.n	3f06 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3f04:	2300      	movs	r3, #0
}
    3f06:	1c18      	adds	r0, r3, #0
    3f08:	46bd      	mov	sp, r7
    3f0a:	bd80      	pop	{r7, pc}
    3f0c:	20007330 	.word	0x20007330
    3f10:	000076f5 	.word	0x000076f5
    3f14:	00007a09 	.word	0x00007a09

00003f18 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3f1c:	4b05      	ldr	r3, [pc, #20]	; (3f34 <udc_valid_address+0x1c>)
    3f1e:	885b      	ldrh	r3, [r3, #2]
    3f20:	b2da      	uxtb	r2, r3
    3f22:	237f      	movs	r3, #127	; 0x7f
    3f24:	4013      	ands	r3, r2
    3f26:	b2db      	uxtb	r3, r3
    3f28:	1c18      	adds	r0, r3, #0
    3f2a:	4b03      	ldr	r3, [pc, #12]	; (3f38 <udc_valid_address+0x20>)
    3f2c:	4798      	blx	r3
}
    3f2e:	46bd      	mov	sp, r7
    3f30:	bd80      	pop	{r7, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	20007330 	.word	0x20007330
    3f38:	00007e95 	.word	0x00007e95

00003f3c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3f40:	4b06      	ldr	r3, [pc, #24]	; (3f5c <udc_req_std_dev_set_address+0x20>)
    3f42:	88db      	ldrh	r3, [r3, #6]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d001      	beq.n	3f4c <udc_req_std_dev_set_address+0x10>
		return false;
    3f48:	2300      	movs	r3, #0
    3f4a:	e003      	b.n	3f54 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3f4c:	4b03      	ldr	r3, [pc, #12]	; (3f5c <udc_req_std_dev_set_address+0x20>)
    3f4e:	4a04      	ldr	r2, [pc, #16]	; (3f60 <udc_req_std_dev_set_address+0x24>)
    3f50:	611a      	str	r2, [r3, #16]
	return true;
    3f52:	2301      	movs	r3, #1
}
    3f54:	1c18      	adds	r0, r3, #0
    3f56:	46bd      	mov	sp, r7
    3f58:	bd80      	pop	{r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	20007330 	.word	0x20007330
    3f60:	00003f19 	.word	0x00003f19

00003f64 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b084      	sub	sp, #16
    3f68:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    3f6a:	1dfb      	adds	r3, r7, #7
    3f6c:	2200      	movs	r2, #0
    3f6e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3f70:	4b34      	ldr	r3, [pc, #208]	; (4044 <udc_req_std_dev_get_str_desc+0xe0>)
    3f72:	885b      	ldrh	r3, [r3, #2]
    3f74:	1c1a      	adds	r2, r3, #0
    3f76:	23ff      	movs	r3, #255	; 0xff
    3f78:	4013      	ands	r3, r2
    3f7a:	2b01      	cmp	r3, #1
    3f7c:	d00e      	beq.n	3f9c <udc_req_std_dev_get_str_desc+0x38>
    3f7e:	dc02      	bgt.n	3f86 <udc_req_std_dev_get_str_desc+0x22>
    3f80:	2b00      	cmp	r3, #0
    3f82:	d005      	beq.n	3f90 <udc_req_std_dev_get_str_desc+0x2c>
    3f84:	e01e      	b.n	3fc4 <udc_req_std_dev_get_str_desc+0x60>
    3f86:	2b02      	cmp	r3, #2
    3f88:	d00e      	beq.n	3fa8 <udc_req_std_dev_get_str_desc+0x44>
    3f8a:	2b03      	cmp	r3, #3
    3f8c:	d012      	beq.n	3fb4 <udc_req_std_dev_get_str_desc+0x50>
    3f8e:	e019      	b.n	3fc4 <udc_req_std_dev_get_str_desc+0x60>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3f90:	4b2d      	ldr	r3, [pc, #180]	; (4048 <udc_req_std_dev_get_str_desc+0xe4>)
    3f92:	1c18      	adds	r0, r3, #0
    3f94:	2104      	movs	r1, #4
    3f96:	4b2d      	ldr	r3, [pc, #180]	; (404c <udc_req_std_dev_get_str_desc+0xe8>)
    3f98:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    3f9a:	e01b      	b.n	3fd4 <udc_req_std_dev_get_str_desc+0x70>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3f9c:	1dfb      	adds	r3, r7, #7
    3f9e:	220a      	movs	r2, #10
    3fa0:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    3fa2:	4b2b      	ldr	r3, [pc, #172]	; (4050 <udc_req_std_dev_get_str_desc+0xec>)
    3fa4:	60bb      	str	r3, [r7, #8]
		break;
    3fa6:	e015      	b.n	3fd4 <udc_req_std_dev_get_str_desc+0x70>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3fa8:	1dfb      	adds	r3, r7, #7
    3faa:	2220      	movs	r2, #32
    3fac:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    3fae:	4b29      	ldr	r3, [pc, #164]	; (4054 <udc_req_std_dev_get_str_desc+0xf0>)
    3fb0:	60bb      	str	r3, [r7, #8]
		break;
    3fb2:	e00f      	b.n	3fd4 <udc_req_std_dev_get_str_desc+0x70>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    3fb4:	1dfb      	adds	r3, r7, #7
    3fb6:	220c      	movs	r2, #12
    3fb8:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    3fba:	4b27      	ldr	r3, [pc, #156]	; (4058 <udc_req_std_dev_get_str_desc+0xf4>)
    3fbc:	4798      	blx	r3
    3fbe:	1c03      	adds	r3, r0, #0
    3fc0:	60bb      	str	r3, [r7, #8]
		break;
    3fc2:	e007      	b.n	3fd4 <udc_req_std_dev_get_str_desc+0x70>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
    3fc4:	4b25      	ldr	r3, [pc, #148]	; (405c <udc_req_std_dev_get_str_desc+0xf8>)
    3fc6:	4798      	blx	r3
    3fc8:	1c03      	adds	r3, r0, #0
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d000      	beq.n	3fd0 <udc_req_std_dev_get_str_desc+0x6c>
			break;
    3fce:	e001      	b.n	3fd4 <udc_req_std_dev_get_str_desc+0x70>
		}
#endif
		return false;
    3fd0:	2300      	movs	r3, #0
    3fd2:	e033      	b.n	403c <udc_req_std_dev_get_str_desc+0xd8>
	}

	if (str_length) {
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	781b      	ldrb	r3, [r3, #0]
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d02e      	beq.n	403a <udc_req_std_dev_get_str_desc+0xd6>
		for(i = 0; i < str_length; i++) {
    3fdc:	1c3b      	adds	r3, r7, #0
    3fde:	330f      	adds	r3, #15
    3fe0:	2200      	movs	r2, #0
    3fe2:	701a      	strb	r2, [r3, #0]
    3fe4:	e013      	b.n	400e <udc_req_std_dev_get_str_desc+0xaa>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3fe6:	1c3b      	adds	r3, r7, #0
    3fe8:	330f      	adds	r3, #15
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	1c3a      	adds	r2, r7, #0
    3fee:	320f      	adds	r2, #15
    3ff0:	7812      	ldrb	r2, [r2, #0]
    3ff2:	68b9      	ldr	r1, [r7, #8]
    3ff4:	188a      	adds	r2, r1, r2
    3ff6:	7812      	ldrb	r2, [r2, #0]
    3ff8:	4919      	ldr	r1, [pc, #100]	; (4060 <udc_req_std_dev_get_str_desc+0xfc>)
    3ffa:	005b      	lsls	r3, r3, #1
    3ffc:	18cb      	adds	r3, r1, r3
    3ffe:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4000:	1c3b      	adds	r3, r7, #0
    4002:	330f      	adds	r3, #15
    4004:	781a      	ldrb	r2, [r3, #0]
    4006:	1c3b      	adds	r3, r7, #0
    4008:	330f      	adds	r3, #15
    400a:	3201      	adds	r2, #1
    400c:	701a      	strb	r2, [r3, #0]
    400e:	1c3a      	adds	r2, r7, #0
    4010:	320f      	adds	r2, #15
    4012:	1dfb      	adds	r3, r7, #7
    4014:	7812      	ldrb	r2, [r2, #0]
    4016:	781b      	ldrb	r3, [r3, #0]
    4018:	429a      	cmp	r2, r3
    401a:	d3e4      	bcc.n	3fe6 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    401c:	1dfb      	adds	r3, r7, #7
    401e:	781b      	ldrb	r3, [r3, #0]
    4020:	3301      	adds	r3, #1
    4022:	b2db      	uxtb	r3, r3
    4024:	18db      	adds	r3, r3, r3
    4026:	b2da      	uxtb	r2, r3
    4028:	4b0d      	ldr	r3, [pc, #52]	; (4060 <udc_req_std_dev_get_str_desc+0xfc>)
    402a:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    402c:	4b0c      	ldr	r3, [pc, #48]	; (4060 <udc_req_std_dev_get_str_desc+0xfc>)
    402e:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    4030:	4a0b      	ldr	r2, [pc, #44]	; (4060 <udc_req_std_dev_get_str_desc+0xfc>)
    4032:	1c10      	adds	r0, r2, #0
    4034:	1c19      	adds	r1, r3, #0
    4036:	4b05      	ldr	r3, [pc, #20]	; (404c <udc_req_std_dev_get_str_desc+0xe8>)
    4038:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    403a:	2301      	movs	r3, #1
}
    403c:	1c18      	adds	r0, r3, #0
    403e:	46bd      	mov	sp, r7
    4040:	b004      	add	sp, #16
    4042:	bd80      	pop	{r7, pc}
    4044:	20007330 	.word	0x20007330
    4048:	20000210 	.word	0x20000210
    404c:	00007f29 	.word	0x00007f29
    4050:	20000214 	.word	0x20000214
    4054:	20000220 	.word	0x20000220
    4058:	00003a01 	.word	0x00003a01
    405c:	0000a965 	.word	0x0000a965
    4060:	20000244 	.word	0x20000244

00004064 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    406a:	4b39      	ldr	r3, [pc, #228]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    406c:	885a      	ldrh	r2, [r3, #2]
    406e:	1dfb      	adds	r3, r7, #7
    4070:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4072:	4b37      	ldr	r3, [pc, #220]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    4074:	885b      	ldrh	r3, [r3, #2]
    4076:	0a1b      	lsrs	r3, r3, #8
    4078:	b29b      	uxth	r3, r3
    407a:	b2db      	uxtb	r3, r3
    407c:	2b02      	cmp	r3, #2
    407e:	d012      	beq.n	40a6 <udc_req_std_dev_get_descriptor+0x42>
    4080:	dc02      	bgt.n	4088 <udc_req_std_dev_get_descriptor+0x24>
    4082:	2b01      	cmp	r3, #1
    4084:	d005      	beq.n	4092 <udc_req_std_dev_get_descriptor+0x2e>
    4086:	e052      	b.n	412e <udc_req_std_dev_get_descriptor+0xca>
    4088:	2b03      	cmp	r3, #3
    408a:	d045      	beq.n	4118 <udc_req_std_dev_get_descriptor+0xb4>
    408c:	2b0f      	cmp	r3, #15
    408e:	d02f      	beq.n	40f0 <udc_req_std_dev_get_descriptor+0x8c>
    4090:	e04d      	b.n	412e <udc_req_std_dev_get_descriptor+0xca>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    4092:	4b30      	ldr	r3, [pc, #192]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    4094:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    4096:	4b2f      	ldr	r3, [pc, #188]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    409c:	1c10      	adds	r0, r2, #0
    409e:	1c19      	adds	r1, r3, #0
    40a0:	4b2d      	ldr	r3, [pc, #180]	; (4158 <udc_req_std_dev_get_descriptor+0xf4>)
    40a2:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    40a4:	e045      	b.n	4132 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    40a6:	4b2b      	ldr	r3, [pc, #172]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	7c5b      	ldrb	r3, [r3, #17]
    40ac:	1dfa      	adds	r2, r7, #7
    40ae:	7812      	ldrb	r2, [r2, #0]
    40b0:	429a      	cmp	r2, r3
    40b2:	d301      	bcc.n	40b8 <udc_req_std_dev_get_descriptor+0x54>
					bNumConfigurations) {
				return false;
    40b4:	2300      	movs	r3, #0
    40b6:	e047      	b.n	4148 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    40b8:	4b26      	ldr	r3, [pc, #152]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    40ba:	685a      	ldr	r2, [r3, #4]
    40bc:	1dfb      	adds	r3, r7, #7
    40be:	781b      	ldrb	r3, [r3, #0]
    40c0:	00db      	lsls	r3, r3, #3
    40c2:	18d3      	adds	r3, r2, r3
    40c4:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    40c6:	4b23      	ldr	r3, [pc, #140]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    40c8:	6859      	ldr	r1, [r3, #4]
    40ca:	1dfb      	adds	r3, r7, #7
    40cc:	781b      	ldrb	r3, [r3, #0]
    40ce:	00db      	lsls	r3, r3, #3
    40d0:	18cb      	adds	r3, r1, r3
    40d2:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    40d4:	7899      	ldrb	r1, [r3, #2]
    40d6:	78db      	ldrb	r3, [r3, #3]
    40d8:	021b      	lsls	r3, r3, #8
    40da:	430b      	orrs	r3, r1
    40dc:	b29b      	uxth	r3, r3
    40de:	1c10      	adds	r0, r2, #0
    40e0:	1c19      	adds	r1, r3, #0
    40e2:	4b1d      	ldr	r3, [pc, #116]	; (4158 <udc_req_std_dev_get_descriptor+0xf4>)
    40e4:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    40e6:	4b1a      	ldr	r3, [pc, #104]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    40e8:	689b      	ldr	r3, [r3, #8]
    40ea:	2202      	movs	r2, #2
    40ec:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    40ee:	e020      	b.n	4132 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    40f0:	4b18      	ldr	r3, [pc, #96]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    40f2:	689b      	ldr	r3, [r3, #8]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d101      	bne.n	40fc <udc_req_std_dev_get_descriptor+0x98>
			return false;
    40f8:	2300      	movs	r3, #0
    40fa:	e025      	b.n	4148 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    40fc:	4b15      	ldr	r3, [pc, #84]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    40fe:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    4100:	4b14      	ldr	r3, [pc, #80]	; (4154 <udc_req_std_dev_get_descriptor+0xf0>)
    4102:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4104:	7899      	ldrb	r1, [r3, #2]
    4106:	78db      	ldrb	r3, [r3, #3]
    4108:	021b      	lsls	r3, r3, #8
    410a:	430b      	orrs	r3, r1
    410c:	b29b      	uxth	r3, r3
    410e:	1c10      	adds	r0, r2, #0
    4110:	1c19      	adds	r1, r3, #0
    4112:	4b11      	ldr	r3, [pc, #68]	; (4158 <udc_req_std_dev_get_descriptor+0xf4>)
    4114:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    4116:	e00c      	b.n	4132 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    4118:	4b10      	ldr	r3, [pc, #64]	; (415c <udc_req_std_dev_get_descriptor+0xf8>)
    411a:	4798      	blx	r3
    411c:	1c03      	adds	r3, r0, #0
    411e:	2201      	movs	r2, #1
    4120:	4053      	eors	r3, r2
    4122:	b2db      	uxtb	r3, r3
    4124:	2b00      	cmp	r3, #0
    4126:	d001      	beq.n	412c <udc_req_std_dev_get_descriptor+0xc8>
			return false;
    4128:	2300      	movs	r3, #0
    412a:	e00d      	b.n	4148 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;
    412c:	e001      	b.n	4132 <udc_req_std_dev_get_descriptor+0xce>

	default:
		// Unknown descriptor requested
		return false;
    412e:	2300      	movs	r3, #0
    4130:	e00a      	b.n	4148 <udc_req_std_dev_get_descriptor+0xe4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4132:	4b07      	ldr	r3, [pc, #28]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    4134:	88da      	ldrh	r2, [r3, #6]
    4136:	4b06      	ldr	r3, [pc, #24]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    4138:	899b      	ldrh	r3, [r3, #12]
    413a:	429a      	cmp	r2, r3
    413c:	d203      	bcs.n	4146 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    413e:	4b04      	ldr	r3, [pc, #16]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    4140:	88da      	ldrh	r2, [r3, #6]
    4142:	4b03      	ldr	r3, [pc, #12]	; (4150 <udc_req_std_dev_get_descriptor+0xec>)
    4144:	819a      	strh	r2, [r3, #12]
	}
	return true;
    4146:	2301      	movs	r3, #1
}
    4148:	1c18      	adds	r0, r3, #0
    414a:	46bd      	mov	sp, r7
    414c:	b002      	add	sp, #8
    414e:	bd80      	pop	{r7, pc}
    4150:	20007330 	.word	0x20007330
    4154:	20000120 	.word	0x20000120
    4158:	00007f29 	.word	0x00007f29
    415c:	00003f65 	.word	0x00003f65

00004160 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    4160:	b580      	push	{r7, lr}
    4162:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <udc_req_std_dev_get_configuration+0x24>)
    4166:	88db      	ldrh	r3, [r3, #6]
    4168:	2b01      	cmp	r3, #1
    416a:	d001      	beq.n	4170 <udc_req_std_dev_get_configuration+0x10>
		return false;
    416c:	2300      	movs	r3, #0
    416e:	e005      	b.n	417c <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4170:	4b05      	ldr	r3, [pc, #20]	; (4188 <udc_req_std_dev_get_configuration+0x28>)
    4172:	1c18      	adds	r0, r3, #0
    4174:	2101      	movs	r1, #1
    4176:	4b05      	ldr	r3, [pc, #20]	; (418c <udc_req_std_dev_get_configuration+0x2c>)
    4178:	4798      	blx	r3
	return true;
    417a:	2301      	movs	r3, #1
}
    417c:	1c18      	adds	r0, r3, #0
    417e:	46bd      	mov	sp, r7
    4180:	bd80      	pop	{r7, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	20007330 	.word	0x20007330
    4188:	20006f94 	.word	0x20006f94
    418c:	00007f29 	.word	0x00007f29

00004190 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    4190:	b580      	push	{r7, lr}
    4192:	b082      	sub	sp, #8
    4194:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4196:	4b2a      	ldr	r3, [pc, #168]	; (4240 <udc_req_std_dev_set_configuration+0xb0>)
    4198:	88db      	ldrh	r3, [r3, #6]
    419a:	2b00      	cmp	r3, #0
    419c:	d001      	beq.n	41a2 <udc_req_std_dev_set_configuration+0x12>
		return false;
    419e:	2300      	movs	r3, #0
    41a0:	e049      	b.n	4236 <udc_req_std_dev_set_configuration+0xa6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    41a2:	4b28      	ldr	r3, [pc, #160]	; (4244 <udc_req_std_dev_set_configuration+0xb4>)
    41a4:	4798      	blx	r3
    41a6:	1c03      	adds	r3, r0, #0
    41a8:	2b00      	cmp	r3, #0
    41aa:	d101      	bne.n	41b0 <udc_req_std_dev_set_configuration+0x20>
		return false;
    41ac:	2300      	movs	r3, #0
    41ae:	e042      	b.n	4236 <udc_req_std_dev_set_configuration+0xa6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    41b0:	4b23      	ldr	r3, [pc, #140]	; (4240 <udc_req_std_dev_set_configuration+0xb0>)
    41b2:	885b      	ldrh	r3, [r3, #2]
    41b4:	1c1a      	adds	r2, r3, #0
    41b6:	23ff      	movs	r3, #255	; 0xff
    41b8:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    41ba:	4b23      	ldr	r3, [pc, #140]	; (4248 <udc_req_std_dev_set_configuration+0xb8>)
    41bc:	681b      	ldr	r3, [r3, #0]
    41be:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    41c0:	429a      	cmp	r2, r3
    41c2:	dd01      	ble.n	41c8 <udc_req_std_dev_set_configuration+0x38>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    41c4:	2300      	movs	r3, #0
    41c6:	e036      	b.n	4236 <udc_req_std_dev_set_configuration+0xa6>
		}
	}

	// Reset current configuration
	udc_reset();
    41c8:	4b20      	ldr	r3, [pc, #128]	; (424c <udc_req_std_dev_set_configuration+0xbc>)
    41ca:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    41cc:	4b1c      	ldr	r3, [pc, #112]	; (4240 <udc_req_std_dev_set_configuration+0xb0>)
    41ce:	885b      	ldrh	r3, [r3, #2]
    41d0:	b2da      	uxtb	r2, r3
    41d2:	4b1f      	ldr	r3, [pc, #124]	; (4250 <udc_req_std_dev_set_configuration+0xc0>)
    41d4:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    41d6:	4b1e      	ldr	r3, [pc, #120]	; (4250 <udc_req_std_dev_set_configuration+0xc0>)
    41d8:	781b      	ldrb	r3, [r3, #0]
    41da:	2b00      	cmp	r3, #0
    41dc:	d101      	bne.n	41e2 <udc_req_std_dev_set_configuration+0x52>
		return true; // Default empty configuration requested
    41de:	2301      	movs	r3, #1
    41e0:	e029      	b.n	4236 <udc_req_std_dev_set_configuration+0xa6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    41e2:	4b19      	ldr	r3, [pc, #100]	; (4248 <udc_req_std_dev_set_configuration+0xb8>)
    41e4:	685a      	ldr	r2, [r3, #4]
    41e6:	4b1a      	ldr	r3, [pc, #104]	; (4250 <udc_req_std_dev_set_configuration+0xc0>)
    41e8:	781b      	ldrb	r3, [r3, #0]
    41ea:	491a      	ldr	r1, [pc, #104]	; (4254 <udc_req_std_dev_set_configuration+0xc4>)
    41ec:	185b      	adds	r3, r3, r1
    41ee:	00db      	lsls	r3, r3, #3
    41f0:	18d2      	adds	r2, r2, r3
    41f2:	4b19      	ldr	r3, [pc, #100]	; (4258 <udc_req_std_dev_set_configuration+0xc8>)
    41f4:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    41f6:	1dfb      	adds	r3, r7, #7
    41f8:	2200      	movs	r2, #0
    41fa:	701a      	strb	r2, [r3, #0]
    41fc:	e012      	b.n	4224 <udc_req_std_dev_set_configuration+0x94>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    41fe:	1dfb      	adds	r3, r7, #7
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	1c18      	adds	r0, r3, #0
    4204:	2100      	movs	r1, #0
    4206:	4b15      	ldr	r3, [pc, #84]	; (425c <udc_req_std_dev_set_configuration+0xcc>)
    4208:	4798      	blx	r3
    420a:	1c03      	adds	r3, r0, #0
    420c:	2201      	movs	r2, #1
    420e:	4053      	eors	r3, r2
    4210:	b2db      	uxtb	r3, r3
    4212:	2b00      	cmp	r3, #0
    4214:	d001      	beq.n	421a <udc_req_std_dev_set_configuration+0x8a>
			return false;
    4216:	2300      	movs	r3, #0
    4218:	e00d      	b.n	4236 <udc_req_std_dev_set_configuration+0xa6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    421a:	1dfb      	adds	r3, r7, #7
    421c:	781a      	ldrb	r2, [r3, #0]
    421e:	1dfb      	adds	r3, r7, #7
    4220:	3201      	adds	r2, #1
    4222:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4224:	4b0c      	ldr	r3, [pc, #48]	; (4258 <udc_req_std_dev_set_configuration+0xc8>)
    4226:	681b      	ldr	r3, [r3, #0]
    4228:	681b      	ldr	r3, [r3, #0]
    422a:	791b      	ldrb	r3, [r3, #4]
    422c:	1dfa      	adds	r2, r7, #7
    422e:	7812      	ldrb	r2, [r2, #0]
    4230:	429a      	cmp	r2, r3
    4232:	d3e4      	bcc.n	41fe <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    4234:	2301      	movs	r3, #1
}
    4236:	1c18      	adds	r0, r3, #0
    4238:	46bd      	mov	sp, r7
    423a:	b002      	add	sp, #8
    423c:	bd80      	pop	{r7, pc}
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20007330 	.word	0x20007330
    4244:	00007ebd 	.word	0x00007ebd
    4248:	20000120 	.word	0x20000120
    424c:	00003cbd 	.word	0x00003cbd
    4250:	20006f94 	.word	0x20006f94
    4254:	1fffffff 	.word	0x1fffffff
    4258:	20006f98 	.word	0x20006f98
    425c:	00003bf9 	.word	0x00003bf9

00004260 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    4260:	b580      	push	{r7, lr}
    4262:	b082      	sub	sp, #8
    4264:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4266:	4b21      	ldr	r3, [pc, #132]	; (42ec <udc_req_std_iface_get_setting+0x8c>)
    4268:	88db      	ldrh	r3, [r3, #6]
    426a:	2b01      	cmp	r3, #1
    426c:	d001      	beq.n	4272 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    426e:	2300      	movs	r3, #0
    4270:	e037      	b.n	42e2 <udc_req_std_iface_get_setting+0x82>
	}
	if (!udc_num_configuration) {
    4272:	4b1f      	ldr	r3, [pc, #124]	; (42f0 <udc_req_std_iface_get_setting+0x90>)
    4274:	781b      	ldrb	r3, [r3, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d101      	bne.n	427e <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    427a:	2300      	movs	r3, #0
    427c:	e031      	b.n	42e2 <udc_req_std_iface_get_setting+0x82>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    427e:	4b1b      	ldr	r3, [pc, #108]	; (42ec <udc_req_std_iface_get_setting+0x8c>)
    4280:	889a      	ldrh	r2, [r3, #4]
    4282:	1dfb      	adds	r3, r7, #7
    4284:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4286:	4b1b      	ldr	r3, [pc, #108]	; (42f4 <udc_req_std_iface_get_setting+0x94>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	681b      	ldr	r3, [r3, #0]
    428c:	791b      	ldrb	r3, [r3, #4]
    428e:	1dfa      	adds	r2, r7, #7
    4290:	7812      	ldrb	r2, [r2, #0]
    4292:	429a      	cmp	r2, r3
    4294:	d301      	bcc.n	429a <udc_req_std_iface_get_setting+0x3a>
		return false;
    4296:	2300      	movs	r3, #0
    4298:	e023      	b.n	42e2 <udc_req_std_iface_get_setting+0x82>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    429a:	1dfb      	adds	r3, r7, #7
    429c:	781b      	ldrb	r3, [r3, #0]
    429e:	1c18      	adds	r0, r3, #0
    42a0:	2100      	movs	r1, #0
    42a2:	4b15      	ldr	r3, [pc, #84]	; (42f8 <udc_req_std_iface_get_setting+0x98>)
    42a4:	4798      	blx	r3
    42a6:	1c03      	adds	r3, r0, #0
    42a8:	2201      	movs	r2, #1
    42aa:	4053      	eors	r3, r2
    42ac:	b2db      	uxtb	r3, r3
    42ae:	2b00      	cmp	r3, #0
    42b0:	d001      	beq.n	42b6 <udc_req_std_iface_get_setting+0x56>
		return false;
    42b2:	2300      	movs	r3, #0
    42b4:	e015      	b.n	42e2 <udc_req_std_iface_get_setting+0x82>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    42b6:	4b0f      	ldr	r3, [pc, #60]	; (42f4 <udc_req_std_iface_get_setting+0x94>)
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	685a      	ldr	r2, [r3, #4]
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	009b      	lsls	r3, r3, #2
    42c2:	18d3      	adds	r3, r2, r3
    42c4:	681b      	ldr	r3, [r3, #0]
    42c6:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    42c8:	683b      	ldr	r3, [r7, #0]
    42ca:	68db      	ldr	r3, [r3, #12]
    42cc:	4798      	blx	r3
    42ce:	1c03      	adds	r3, r0, #0
    42d0:	1c1a      	adds	r2, r3, #0
    42d2:	4b0a      	ldr	r3, [pc, #40]	; (42fc <udc_req_std_iface_get_setting+0x9c>)
    42d4:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    42d6:	4b09      	ldr	r3, [pc, #36]	; (42fc <udc_req_std_iface_get_setting+0x9c>)
    42d8:	1c18      	adds	r0, r3, #0
    42da:	2101      	movs	r1, #1
    42dc:	4b08      	ldr	r3, [pc, #32]	; (4300 <udc_req_std_iface_get_setting+0xa0>)
    42de:	4798      	blx	r3
	return true;
    42e0:	2301      	movs	r3, #1
}
    42e2:	1c18      	adds	r0, r3, #0
    42e4:	46bd      	mov	sp, r7
    42e6:	b002      	add	sp, #8
    42e8:	bd80      	pop	{r7, pc}
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	20007330 	.word	0x20007330
    42f0:	20006f94 	.word	0x20006f94
    42f4:	20006f98 	.word	0x20006f98
    42f8:	00003aa9 	.word	0x00003aa9
    42fc:	20006f90 	.word	0x20006f90
    4300:	00007f29 	.word	0x00007f29

00004304 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    4304:	b580      	push	{r7, lr}
    4306:	b082      	sub	sp, #8
    4308:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    430a:	4b17      	ldr	r3, [pc, #92]	; (4368 <udc_req_std_iface_set_setting+0x64>)
    430c:	88db      	ldrh	r3, [r3, #6]
    430e:	2b00      	cmp	r3, #0
    4310:	d001      	beq.n	4316 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    4312:	2300      	movs	r3, #0
    4314:	e023      	b.n	435e <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
    4316:	4b15      	ldr	r3, [pc, #84]	; (436c <udc_req_std_iface_set_setting+0x68>)
    4318:	781b      	ldrb	r3, [r3, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d101      	bne.n	4322 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    431e:	2300      	movs	r3, #0
    4320:	e01d      	b.n	435e <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4322:	4b11      	ldr	r3, [pc, #68]	; (4368 <udc_req_std_iface_set_setting+0x64>)
    4324:	889a      	ldrh	r2, [r3, #4]
    4326:	1dfb      	adds	r3, r7, #7
    4328:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    432a:	4b0f      	ldr	r3, [pc, #60]	; (4368 <udc_req_std_iface_set_setting+0x64>)
    432c:	885a      	ldrh	r2, [r3, #2]
    432e:	1dbb      	adds	r3, r7, #6
    4330:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4332:	1dfb      	adds	r3, r7, #7
    4334:	781b      	ldrb	r3, [r3, #0]
    4336:	1c18      	adds	r0, r3, #0
    4338:	4b0d      	ldr	r3, [pc, #52]	; (4370 <udc_req_std_iface_set_setting+0x6c>)
    433a:	4798      	blx	r3
    433c:	1c03      	adds	r3, r0, #0
    433e:	2201      	movs	r2, #1
    4340:	4053      	eors	r3, r2
    4342:	b2db      	uxtb	r3, r3
    4344:	2b00      	cmp	r3, #0
    4346:	d001      	beq.n	434c <udc_req_std_iface_set_setting+0x48>
		return false;
    4348:	2300      	movs	r3, #0
    434a:	e008      	b.n	435e <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    434c:	1dfb      	adds	r3, r7, #7
    434e:	781a      	ldrb	r2, [r3, #0]
    4350:	1dbb      	adds	r3, r7, #6
    4352:	781b      	ldrb	r3, [r3, #0]
    4354:	1c10      	adds	r0, r2, #0
    4356:	1c19      	adds	r1, r3, #0
    4358:	4b06      	ldr	r3, [pc, #24]	; (4374 <udc_req_std_iface_set_setting+0x70>)
    435a:	4798      	blx	r3
    435c:	1c03      	adds	r3, r0, #0
}
    435e:	1c18      	adds	r0, r3, #0
    4360:	46bd      	mov	sp, r7
    4362:	b002      	add	sp, #8
    4364:	bd80      	pop	{r7, pc}
    4366:	46c0      	nop			; (mov r8, r8)
    4368:	20007330 	.word	0x20007330
    436c:	20006f94 	.word	0x20006f94
    4370:	00003b4d 	.word	0x00003b4d
    4374:	00003bf9 	.word	0x00003bf9

00004378 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    4378:	b580      	push	{r7, lr}
    437a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    437c:	4b48      	ldr	r3, [pc, #288]	; (44a0 <udc_reqstd+0x128>)
    437e:	781b      	ldrb	r3, [r3, #0]
    4380:	b2db      	uxtb	r3, r3
    4382:	b25b      	sxtb	r3, r3
    4384:	2b00      	cmp	r3, #0
    4386:	da41      	bge.n	440c <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    4388:	4b45      	ldr	r3, [pc, #276]	; (44a0 <udc_reqstd+0x128>)
    438a:	88db      	ldrh	r3, [r3, #6]
    438c:	2b00      	cmp	r3, #0
    438e:	d101      	bne.n	4394 <udc_reqstd+0x1c>
			return false; // Error for USB host
    4390:	2300      	movs	r3, #0
    4392:	e082      	b.n	449a <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4394:	4b42      	ldr	r3, [pc, #264]	; (44a0 <udc_reqstd+0x128>)
    4396:	781b      	ldrb	r3, [r3, #0]
    4398:	1c1a      	adds	r2, r3, #0
    439a:	231f      	movs	r3, #31
    439c:	4013      	ands	r3, r2
    439e:	d114      	bne.n	43ca <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    43a0:	4b3f      	ldr	r3, [pc, #252]	; (44a0 <udc_reqstd+0x128>)
    43a2:	785b      	ldrb	r3, [r3, #1]
    43a4:	2b06      	cmp	r3, #6
    43a6:	d008      	beq.n	43ba <udc_reqstd+0x42>
    43a8:	2b08      	cmp	r3, #8
    43aa:	d00a      	beq.n	43c2 <udc_reqstd+0x4a>
    43ac:	2b00      	cmp	r3, #0
    43ae:	d000      	beq.n	43b2 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    43b0:	e00b      	b.n	43ca <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    43b2:	4b3c      	ldr	r3, [pc, #240]	; (44a4 <udc_reqstd+0x12c>)
    43b4:	4798      	blx	r3
    43b6:	1c03      	adds	r3, r0, #0
    43b8:	e06f      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    43ba:	4b3b      	ldr	r3, [pc, #236]	; (44a8 <udc_reqstd+0x130>)
    43bc:	4798      	blx	r3
    43be:	1c03      	adds	r3, r0, #0
    43c0:	e06b      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    43c2:	4b3a      	ldr	r3, [pc, #232]	; (44ac <udc_reqstd+0x134>)
    43c4:	4798      	blx	r3
    43c6:	1c03      	adds	r3, r0, #0
    43c8:	e067      	b.n	449a <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    43ca:	4b35      	ldr	r3, [pc, #212]	; (44a0 <udc_reqstd+0x128>)
    43cc:	781b      	ldrb	r3, [r3, #0]
    43ce:	1c1a      	adds	r2, r3, #0
    43d0:	231f      	movs	r3, #31
    43d2:	4013      	ands	r3, r2
    43d4:	2b01      	cmp	r3, #1
    43d6:	d108      	bne.n	43ea <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    43d8:	4b31      	ldr	r3, [pc, #196]	; (44a0 <udc_reqstd+0x128>)
    43da:	785b      	ldrb	r3, [r3, #1]
    43dc:	2b0a      	cmp	r3, #10
    43de:	d000      	beq.n	43e2 <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    43e0:	e003      	b.n	43ea <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    43e2:	4b33      	ldr	r3, [pc, #204]	; (44b0 <udc_reqstd+0x138>)
    43e4:	4798      	blx	r3
    43e6:	1c03      	adds	r3, r0, #0
    43e8:	e057      	b.n	449a <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    43ea:	4b2d      	ldr	r3, [pc, #180]	; (44a0 <udc_reqstd+0x128>)
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	1c1a      	adds	r2, r3, #0
    43f0:	231f      	movs	r3, #31
    43f2:	4013      	ands	r3, r2
    43f4:	2b02      	cmp	r3, #2
    43f6:	d14f      	bne.n	4498 <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    43f8:	4b29      	ldr	r3, [pc, #164]	; (44a0 <udc_reqstd+0x128>)
    43fa:	785b      	ldrb	r3, [r3, #1]
    43fc:	2b00      	cmp	r3, #0
    43fe:	d001      	beq.n	4404 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    4400:	46c0      	nop			; (mov r8, r8)
    4402:	e049      	b.n	4498 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    4404:	4b2b      	ldr	r3, [pc, #172]	; (44b4 <udc_reqstd+0x13c>)
    4406:	4798      	blx	r3
    4408:	1c03      	adds	r3, r0, #0
    440a:	e046      	b.n	449a <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    440c:	4b24      	ldr	r3, [pc, #144]	; (44a0 <udc_reqstd+0x128>)
    440e:	781b      	ldrb	r3, [r3, #0]
    4410:	1c1a      	adds	r2, r3, #0
    4412:	231f      	movs	r3, #31
    4414:	4013      	ands	r3, r2
    4416:	d119      	bne.n	444c <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4418:	4b21      	ldr	r3, [pc, #132]	; (44a0 <udc_reqstd+0x128>)
    441a:	785b      	ldrb	r3, [r3, #1]
    441c:	2b09      	cmp	r3, #9
    441e:	d814      	bhi.n	444a <udc_reqstd+0xd2>
    4420:	009a      	lsls	r2, r3, #2
    4422:	4b25      	ldr	r3, [pc, #148]	; (44b8 <udc_reqstd+0x140>)
    4424:	18d3      	adds	r3, r2, r3
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    442a:	4b24      	ldr	r3, [pc, #144]	; (44bc <udc_reqstd+0x144>)
    442c:	4798      	blx	r3
    442e:	1c03      	adds	r3, r0, #0
    4430:	e033      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    4432:	4b23      	ldr	r3, [pc, #140]	; (44c0 <udc_reqstd+0x148>)
    4434:	4798      	blx	r3
    4436:	1c03      	adds	r3, r0, #0
    4438:	e02f      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    443a:	4b22      	ldr	r3, [pc, #136]	; (44c4 <udc_reqstd+0x14c>)
    443c:	4798      	blx	r3
    443e:	1c03      	adds	r3, r0, #0
    4440:	e02b      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    4442:	4b21      	ldr	r3, [pc, #132]	; (44c8 <udc_reqstd+0x150>)
    4444:	4798      	blx	r3
    4446:	1c03      	adds	r3, r0, #0
    4448:	e027      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    444a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    444c:	4b14      	ldr	r3, [pc, #80]	; (44a0 <udc_reqstd+0x128>)
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	1c1a      	adds	r2, r3, #0
    4452:	231f      	movs	r3, #31
    4454:	4013      	ands	r3, r2
    4456:	2b01      	cmp	r3, #1
    4458:	d108      	bne.n	446c <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    445a:	4b11      	ldr	r3, [pc, #68]	; (44a0 <udc_reqstd+0x128>)
    445c:	785b      	ldrb	r3, [r3, #1]
    445e:	2b0b      	cmp	r3, #11
    4460:	d000      	beq.n	4464 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    4462:	e003      	b.n	446c <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    4464:	4b19      	ldr	r3, [pc, #100]	; (44cc <udc_reqstd+0x154>)
    4466:	4798      	blx	r3
    4468:	1c03      	adds	r3, r0, #0
    446a:	e016      	b.n	449a <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    446c:	4b0c      	ldr	r3, [pc, #48]	; (44a0 <udc_reqstd+0x128>)
    446e:	781b      	ldrb	r3, [r3, #0]
    4470:	1c1a      	adds	r2, r3, #0
    4472:	231f      	movs	r3, #31
    4474:	4013      	ands	r3, r2
    4476:	2b02      	cmp	r3, #2
    4478:	d10e      	bne.n	4498 <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    447a:	4b09      	ldr	r3, [pc, #36]	; (44a0 <udc_reqstd+0x128>)
    447c:	785b      	ldrb	r3, [r3, #1]
    447e:	2b01      	cmp	r3, #1
    4480:	d002      	beq.n	4488 <udc_reqstd+0x110>
    4482:	2b03      	cmp	r3, #3
    4484:	d004      	beq.n	4490 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    4486:	e007      	b.n	4498 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    4488:	4b11      	ldr	r3, [pc, #68]	; (44d0 <udc_reqstd+0x158>)
    448a:	4798      	blx	r3
    448c:	1c03      	adds	r3, r0, #0
    448e:	e004      	b.n	449a <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    4490:	4b10      	ldr	r3, [pc, #64]	; (44d4 <udc_reqstd+0x15c>)
    4492:	4798      	blx	r3
    4494:	1c03      	adds	r3, r0, #0
    4496:	e000      	b.n	449a <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    4498:	2300      	movs	r3, #0
}
    449a:	1c18      	adds	r0, r3, #0
    449c:	46bd      	mov	sp, r7
    449e:	bd80      	pop	{r7, pc}
    44a0:	20007330 	.word	0x20007330
    44a4:	00003d99 	.word	0x00003d99
    44a8:	00004065 	.word	0x00004065
    44ac:	00004161 	.word	0x00004161
    44b0:	00004261 	.word	0x00004261
    44b4:	00003dc9 	.word	0x00003dc9
    44b8:	0000b500 	.word	0x0000b500
    44bc:	00003f3d 	.word	0x00003f3d
    44c0:	00003e11 	.word	0x00003e11
    44c4:	00003e8d 	.word	0x00003e8d
    44c8:	00004191 	.word	0x00004191
    44cc:	00004305 	.word	0x00004305
    44d0:	00003e55 	.word	0x00003e55
    44d4:	00003ed1 	.word	0x00003ed1

000044d8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    44d8:	b580      	push	{r7, lr}
    44da:	b082      	sub	sp, #8
    44dc:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    44de:	4b22      	ldr	r3, [pc, #136]	; (4568 <udc_req_iface+0x90>)
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d101      	bne.n	44ea <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    44e6:	2300      	movs	r3, #0
    44e8:	e03a      	b.n	4560 <udc_req_iface+0x88>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    44ea:	4b20      	ldr	r3, [pc, #128]	; (456c <udc_req_iface+0x94>)
    44ec:	889a      	ldrh	r2, [r3, #4]
    44ee:	1dfb      	adds	r3, r7, #7
    44f0:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    44f2:	4b1f      	ldr	r3, [pc, #124]	; (4570 <udc_req_iface+0x98>)
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	791b      	ldrb	r3, [r3, #4]
    44fa:	1dfa      	adds	r2, r7, #7
    44fc:	7812      	ldrb	r2, [r2, #0]
    44fe:	429a      	cmp	r2, r3
    4500:	d301      	bcc.n	4506 <udc_req_iface+0x2e>
		return false;
    4502:	2300      	movs	r3, #0
    4504:	e02c      	b.n	4560 <udc_req_iface+0x88>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4506:	1dfb      	adds	r3, r7, #7
    4508:	781b      	ldrb	r3, [r3, #0]
    450a:	1c18      	adds	r0, r3, #0
    450c:	2100      	movs	r1, #0
    450e:	4b19      	ldr	r3, [pc, #100]	; (4574 <udc_req_iface+0x9c>)
    4510:	4798      	blx	r3
    4512:	1c03      	adds	r3, r0, #0
    4514:	2201      	movs	r2, #1
    4516:	4053      	eors	r3, r2
    4518:	b2db      	uxtb	r3, r3
    451a:	2b00      	cmp	r3, #0
    451c:	d001      	beq.n	4522 <udc_req_iface+0x4a>
		return false;
    451e:	2300      	movs	r3, #0
    4520:	e01e      	b.n	4560 <udc_req_iface+0x88>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4522:	4b13      	ldr	r3, [pc, #76]	; (4570 <udc_req_iface+0x98>)
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	685a      	ldr	r2, [r3, #4]
    4528:	1dfb      	adds	r3, r7, #7
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	009b      	lsls	r3, r3, #2
    452e:	18d3      	adds	r3, r2, r3
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4534:	683b      	ldr	r3, [r7, #0]
    4536:	68db      	ldr	r3, [r3, #12]
    4538:	4798      	blx	r3
    453a:	1c03      	adds	r3, r0, #0
    453c:	1dfa      	adds	r2, r7, #7
    453e:	7812      	ldrb	r2, [r2, #0]
    4540:	1c10      	adds	r0, r2, #0
    4542:	1c19      	adds	r1, r3, #0
    4544:	4b0b      	ldr	r3, [pc, #44]	; (4574 <udc_req_iface+0x9c>)
    4546:	4798      	blx	r3
    4548:	1c03      	adds	r3, r0, #0
    454a:	2201      	movs	r2, #1
    454c:	4053      	eors	r3, r2
    454e:	b2db      	uxtb	r3, r3
    4550:	2b00      	cmp	r3, #0
    4552:	d001      	beq.n	4558 <udc_req_iface+0x80>
		return false;
    4554:	2300      	movs	r3, #0
    4556:	e003      	b.n	4560 <udc_req_iface+0x88>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4558:	683b      	ldr	r3, [r7, #0]
    455a:	689b      	ldr	r3, [r3, #8]
    455c:	4798      	blx	r3
    455e:	1c03      	adds	r3, r0, #0
}
    4560:	1c18      	adds	r0, r3, #0
    4562:	46bd      	mov	sp, r7
    4564:	b002      	add	sp, #8
    4566:	bd80      	pop	{r7, pc}
    4568:	20006f94 	.word	0x20006f94
    456c:	20007330 	.word	0x20007330
    4570:	20006f98 	.word	0x20006f98
    4574:	00003aa9 	.word	0x00003aa9

00004578 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    4578:	b580      	push	{r7, lr}
    457a:	b082      	sub	sp, #8
    457c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    457e:	4b21      	ldr	r3, [pc, #132]	; (4604 <udc_req_ep+0x8c>)
    4580:	781b      	ldrb	r3, [r3, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	d101      	bne.n	458a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    4586:	2300      	movs	r3, #0
    4588:	e038      	b.n	45fc <udc_req_ep+0x84>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    458a:	4b1f      	ldr	r3, [pc, #124]	; (4608 <udc_req_ep+0x90>)
    458c:	889a      	ldrh	r2, [r3, #4]
    458e:	1dfb      	adds	r3, r7, #7
    4590:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4592:	1dfb      	adds	r3, r7, #7
    4594:	2200      	movs	r2, #0
    4596:	701a      	strb	r2, [r3, #0]
    4598:	e027      	b.n	45ea <udc_req_ep+0x72>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    459a:	4b1c      	ldr	r3, [pc, #112]	; (460c <udc_req_ep+0x94>)
    459c:	681b      	ldr	r3, [r3, #0]
    459e:	685a      	ldr	r2, [r3, #4]
    45a0:	1dfb      	adds	r3, r7, #7
    45a2:	781b      	ldrb	r3, [r3, #0]
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	18d3      	adds	r3, r2, r3
    45a8:	681b      	ldr	r3, [r3, #0]
    45aa:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    45ac:	683b      	ldr	r3, [r7, #0]
    45ae:	68db      	ldr	r3, [r3, #12]
    45b0:	4798      	blx	r3
    45b2:	1c03      	adds	r3, r0, #0
    45b4:	1dfa      	adds	r2, r7, #7
    45b6:	7812      	ldrb	r2, [r2, #0]
    45b8:	1c10      	adds	r0, r2, #0
    45ba:	1c19      	adds	r1, r3, #0
    45bc:	4b14      	ldr	r3, [pc, #80]	; (4610 <udc_req_ep+0x98>)
    45be:	4798      	blx	r3
    45c0:	1c03      	adds	r3, r0, #0
    45c2:	2201      	movs	r2, #1
    45c4:	4053      	eors	r3, r2
    45c6:	b2db      	uxtb	r3, r3
    45c8:	2b00      	cmp	r3, #0
    45ca:	d001      	beq.n	45d0 <udc_req_ep+0x58>
			return false;
    45cc:	2300      	movs	r3, #0
    45ce:	e015      	b.n	45fc <udc_req_ep+0x84>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    45d0:	683b      	ldr	r3, [r7, #0]
    45d2:	689b      	ldr	r3, [r3, #8]
    45d4:	4798      	blx	r3
    45d6:	1c03      	adds	r3, r0, #0
    45d8:	2b00      	cmp	r3, #0
    45da:	d001      	beq.n	45e0 <udc_req_ep+0x68>
			return true;
    45dc:	2301      	movs	r3, #1
    45de:	e00d      	b.n	45fc <udc_req_ep+0x84>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    45e0:	1dfb      	adds	r3, r7, #7
    45e2:	781a      	ldrb	r2, [r3, #0]
    45e4:	1dfb      	adds	r3, r7, #7
    45e6:	3201      	adds	r2, #1
    45e8:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    45ea:	4b08      	ldr	r3, [pc, #32]	; (460c <udc_req_ep+0x94>)
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	681b      	ldr	r3, [r3, #0]
    45f0:	791b      	ldrb	r3, [r3, #4]
    45f2:	1dfa      	adds	r2, r7, #7
    45f4:	7812      	ldrb	r2, [r2, #0]
    45f6:	429a      	cmp	r2, r3
    45f8:	d3cf      	bcc.n	459a <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45fa:	2300      	movs	r3, #0
}
    45fc:	1c18      	adds	r0, r3, #0
    45fe:	46bd      	mov	sp, r7
    4600:	b002      	add	sp, #8
    4602:	bd80      	pop	{r7, pc}
    4604:	20006f94 	.word	0x20006f94
    4608:	20007330 	.word	0x20007330
    460c:	20006f98 	.word	0x20006f98
    4610:	00003aa9 	.word	0x00003aa9

00004614 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4614:	b580      	push	{r7, lr}
    4616:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4618:	4b20      	ldr	r3, [pc, #128]	; (469c <udc_process_setup+0x88>)
    461a:	2200      	movs	r2, #0
    461c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    461e:	4b1f      	ldr	r3, [pc, #124]	; (469c <udc_process_setup+0x88>)
    4620:	2200      	movs	r2, #0
    4622:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    4624:	4b1d      	ldr	r3, [pc, #116]	; (469c <udc_process_setup+0x88>)
    4626:	2200      	movs	r2, #0
    4628:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    462a:	4b1c      	ldr	r3, [pc, #112]	; (469c <udc_process_setup+0x88>)
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	b2db      	uxtb	r3, r3
    4630:	b25b      	sxtb	r3, r3
    4632:	2b00      	cmp	r3, #0
    4634:	da05      	bge.n	4642 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4636:	4b19      	ldr	r3, [pc, #100]	; (469c <udc_process_setup+0x88>)
    4638:	88db      	ldrh	r3, [r3, #6]
    463a:	2b00      	cmp	r3, #0
    463c:	d101      	bne.n	4642 <udc_process_setup+0x2e>
			return false; // Error from USB host
    463e:	2300      	movs	r3, #0
    4640:	e029      	b.n	4696 <udc_process_setup+0x82>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4642:	4b16      	ldr	r3, [pc, #88]	; (469c <udc_process_setup+0x88>)
    4644:	781b      	ldrb	r3, [r3, #0]
    4646:	1c1a      	adds	r2, r3, #0
    4648:	2360      	movs	r3, #96	; 0x60
    464a:	4013      	ands	r3, r2
    464c:	d106      	bne.n	465c <udc_process_setup+0x48>
		if (udc_reqstd()) {
    464e:	4b14      	ldr	r3, [pc, #80]	; (46a0 <udc_process_setup+0x8c>)
    4650:	4798      	blx	r3
    4652:	1c03      	adds	r3, r0, #0
    4654:	2b00      	cmp	r3, #0
    4656:	d001      	beq.n	465c <udc_process_setup+0x48>
			return true;
    4658:	2301      	movs	r3, #1
    465a:	e01c      	b.n	4696 <udc_process_setup+0x82>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    465c:	4b0f      	ldr	r3, [pc, #60]	; (469c <udc_process_setup+0x88>)
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	1c1a      	adds	r2, r3, #0
    4662:	231f      	movs	r3, #31
    4664:	4013      	ands	r3, r2
    4666:	2b01      	cmp	r3, #1
    4668:	d106      	bne.n	4678 <udc_process_setup+0x64>
		if (udc_req_iface()) {
    466a:	4b0e      	ldr	r3, [pc, #56]	; (46a4 <udc_process_setup+0x90>)
    466c:	4798      	blx	r3
    466e:	1c03      	adds	r3, r0, #0
    4670:	2b00      	cmp	r3, #0
    4672:	d001      	beq.n	4678 <udc_process_setup+0x64>
			return true;
    4674:	2301      	movs	r3, #1
    4676:	e00e      	b.n	4696 <udc_process_setup+0x82>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4678:	4b08      	ldr	r3, [pc, #32]	; (469c <udc_process_setup+0x88>)
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	1c1a      	adds	r2, r3, #0
    467e:	231f      	movs	r3, #31
    4680:	4013      	ands	r3, r2
    4682:	2b02      	cmp	r3, #2
    4684:	d106      	bne.n	4694 <udc_process_setup+0x80>
		if (udc_req_ep()) {
    4686:	4b08      	ldr	r3, [pc, #32]	; (46a8 <udc_process_setup+0x94>)
    4688:	4798      	blx	r3
    468a:	1c03      	adds	r3, r0, #0
    468c:	2b00      	cmp	r3, #0
    468e:	d001      	beq.n	4694 <udc_process_setup+0x80>
			return true;
    4690:	2301      	movs	r3, #1
    4692:	e000      	b.n	4696 <udc_process_setup+0x82>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4694:	2300      	movs	r3, #0
#endif
}
    4696:	1c18      	adds	r0, r3, #0
    4698:	46bd      	mov	sp, r7
    469a:	bd80      	pop	{r7, pc}
    469c:	20007330 	.word	0x20007330
    46a0:	00004379 	.word	0x00004379
    46a4:	000044d9 	.word	0x000044d9
    46a8:	00004579 	.word	0x00004579

000046ac <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    46b2:	4b0f      	ldr	r3, [pc, #60]	; (46f0 <cpu_irq_enter_critical+0x44>)
    46b4:	681b      	ldr	r3, [r3, #0]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d112      	bne.n	46e0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    46ba:	f3ef 8310 	mrs	r3, PRIMASK
    46be:	607b      	str	r3, [r7, #4]
  return(result);
    46c0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    46c2:	2b00      	cmp	r3, #0
    46c4:	d109      	bne.n	46da <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    46c6:	b672      	cpsid	i
    46c8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    46cc:	4b09      	ldr	r3, [pc, #36]	; (46f4 <cpu_irq_enter_critical+0x48>)
    46ce:	2200      	movs	r2, #0
    46d0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    46d2:	4b09      	ldr	r3, [pc, #36]	; (46f8 <cpu_irq_enter_critical+0x4c>)
    46d4:	2201      	movs	r2, #1
    46d6:	701a      	strb	r2, [r3, #0]
    46d8:	e002      	b.n	46e0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    46da:	4b07      	ldr	r3, [pc, #28]	; (46f8 <cpu_irq_enter_critical+0x4c>)
    46dc:	2200      	movs	r2, #0
    46de:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    46e0:	4b03      	ldr	r3, [pc, #12]	; (46f0 <cpu_irq_enter_critical+0x44>)
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	1c5a      	adds	r2, r3, #1
    46e6:	4b02      	ldr	r3, [pc, #8]	; (46f0 <cpu_irq_enter_critical+0x44>)
    46e8:	601a      	str	r2, [r3, #0]
}
    46ea:	46bd      	mov	sp, r7
    46ec:	b002      	add	sp, #8
    46ee:	bd80      	pop	{r7, pc}
    46f0:	20006fa4 	.word	0x20006fa4
    46f4:	20000288 	.word	0x20000288
    46f8:	20006fa8 	.word	0x20006fa8

000046fc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    46fc:	b580      	push	{r7, lr}
    46fe:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4700:	4b0a      	ldr	r3, [pc, #40]	; (472c <cpu_irq_leave_critical+0x30>)
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	1e5a      	subs	r2, r3, #1
    4706:	4b09      	ldr	r3, [pc, #36]	; (472c <cpu_irq_leave_critical+0x30>)
    4708:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    470a:	4b08      	ldr	r3, [pc, #32]	; (472c <cpu_irq_leave_critical+0x30>)
    470c:	681b      	ldr	r3, [r3, #0]
    470e:	2b00      	cmp	r3, #0
    4710:	d10a      	bne.n	4728 <cpu_irq_leave_critical+0x2c>
    4712:	4b07      	ldr	r3, [pc, #28]	; (4730 <cpu_irq_leave_critical+0x34>)
    4714:	781b      	ldrb	r3, [r3, #0]
    4716:	b2db      	uxtb	r3, r3
    4718:	2b00      	cmp	r3, #0
    471a:	d005      	beq.n	4728 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    471c:	4b05      	ldr	r3, [pc, #20]	; (4734 <cpu_irq_leave_critical+0x38>)
    471e:	2201      	movs	r2, #1
    4720:	701a      	strb	r2, [r3, #0]
    4722:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4726:	b662      	cpsie	i
	}
}
    4728:	46bd      	mov	sp, r7
    472a:	bd80      	pop	{r7, pc}
    472c:	20006fa4 	.word	0x20006fa4
    4730:	20006fa8 	.word	0x20006fa8
    4734:	20000288 	.word	0x20000288

00004738 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4738:	b580      	push	{r7, lr}
    473a:	b084      	sub	sp, #16
    473c:	af00      	add	r7, sp, #0
    473e:	1c02      	adds	r2, r0, #0
    4740:	1dfb      	adds	r3, r7, #7
    4742:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4744:	1c3b      	adds	r3, r7, #0
    4746:	330f      	adds	r3, #15
    4748:	1dfa      	adds	r2, r7, #7
    474a:	7812      	ldrb	r2, [r2, #0]
    474c:	09d2      	lsrs	r2, r2, #7
    474e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4750:	1c3b      	adds	r3, r7, #0
    4752:	330e      	adds	r3, #14
    4754:	1dfa      	adds	r2, r7, #7
    4756:	7812      	ldrb	r2, [r2, #0]
    4758:	0952      	lsrs	r2, r2, #5
    475a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    475c:	4b0d      	ldr	r3, [pc, #52]	; (4794 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    475e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4760:	1c3b      	adds	r3, r7, #0
    4762:	330f      	adds	r3, #15
    4764:	781b      	ldrb	r3, [r3, #0]
    4766:	2b00      	cmp	r3, #0
    4768:	d10e      	bne.n	4788 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    476a:	1c3b      	adds	r3, r7, #0
    476c:	330f      	adds	r3, #15
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	009b      	lsls	r3, r3, #2
    4772:	2210      	movs	r2, #16
    4774:	19d2      	adds	r2, r2, r7
    4776:	18d3      	adds	r3, r2, r3
    4778:	3b08      	subs	r3, #8
    477a:	681a      	ldr	r2, [r3, #0]
    477c:	1c3b      	adds	r3, r7, #0
    477e:	330e      	adds	r3, #14
    4780:	781b      	ldrb	r3, [r3, #0]
    4782:	01db      	lsls	r3, r3, #7
    4784:	18d3      	adds	r3, r2, r3
    4786:	e000      	b.n	478a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4788:	2300      	movs	r3, #0
	}
}
    478a:	1c18      	adds	r0, r3, #0
    478c:	46bd      	mov	sp, r7
    478e:	b004      	add	sp, #16
    4790:	bd80      	pop	{r7, pc}
    4792:	46c0      	nop			; (mov r8, r8)
    4794:	41004400 	.word	0x41004400

00004798 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4798:	b580      	push	{r7, lr}
    479a:	b082      	sub	sp, #8
    479c:	af00      	add	r7, sp, #0
    479e:	1c02      	adds	r2, r0, #0
    47a0:	1dfb      	adds	r3, r7, #7
    47a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    47a4:	1dfb      	adds	r3, r7, #7
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	1c18      	adds	r0, r3, #0
    47aa:	4b03      	ldr	r3, [pc, #12]	; (47b8 <port_get_group_from_gpio_pin+0x20>)
    47ac:	4798      	blx	r3
    47ae:	1c03      	adds	r3, r0, #0
}
    47b0:	1c18      	adds	r0, r3, #0
    47b2:	46bd      	mov	sp, r7
    47b4:	b002      	add	sp, #8
    47b6:	bd80      	pop	{r7, pc}
    47b8:	00004739 	.word	0x00004739

000047bc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    47bc:	b580      	push	{r7, lr}
    47be:	b082      	sub	sp, #8
    47c0:	af00      	add	r7, sp, #0
    47c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	2200      	movs	r2, #0
    47c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	2201      	movs	r2, #1
    47ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	2200      	movs	r2, #0
    47d4:	709a      	strb	r2, [r3, #2]
}
    47d6:	46bd      	mov	sp, r7
    47d8:	b002      	add	sp, #8
    47da:	bd80      	pop	{r7, pc}

000047dc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    47dc:	b580      	push	{r7, lr}
    47de:	b084      	sub	sp, #16
    47e0:	af00      	add	r7, sp, #0
    47e2:	1c0a      	adds	r2, r1, #0
    47e4:	1dfb      	adds	r3, r7, #7
    47e6:	1c01      	adds	r1, r0, #0
    47e8:	7019      	strb	r1, [r3, #0]
    47ea:	1dbb      	adds	r3, r7, #6
    47ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    47ee:	1dfb      	adds	r3, r7, #7
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	1c18      	adds	r0, r3, #0
    47f4:	4b0d      	ldr	r3, [pc, #52]	; (482c <port_pin_set_output_level+0x50>)
    47f6:	4798      	blx	r3
    47f8:	1c03      	adds	r3, r0, #0
    47fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    47fc:	1dfb      	adds	r3, r7, #7
    47fe:	781a      	ldrb	r2, [r3, #0]
    4800:	231f      	movs	r3, #31
    4802:	4013      	ands	r3, r2
    4804:	2201      	movs	r2, #1
    4806:	1c11      	adds	r1, r2, #0
    4808:	4099      	lsls	r1, r3
    480a:	1c0b      	adds	r3, r1, #0
    480c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    480e:	1dbb      	adds	r3, r7, #6
    4810:	781b      	ldrb	r3, [r3, #0]
    4812:	2b00      	cmp	r3, #0
    4814:	d003      	beq.n	481e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	68ba      	ldr	r2, [r7, #8]
    481a:	619a      	str	r2, [r3, #24]
    481c:	e002      	b.n	4824 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    481e:	68fb      	ldr	r3, [r7, #12]
    4820:	68ba      	ldr	r2, [r7, #8]
    4822:	615a      	str	r2, [r3, #20]
	}
}
    4824:	46bd      	mov	sp, r7
    4826:	b004      	add	sp, #16
    4828:	bd80      	pop	{r7, pc}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	00004799 	.word	0x00004799

00004830 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4830:	b580      	push	{r7, lr}
    4832:	b082      	sub	sp, #8
    4834:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4836:	1d3b      	adds	r3, r7, #4
    4838:	1c18      	adds	r0, r3, #0
    483a:	4b0e      	ldr	r3, [pc, #56]	; (4874 <system_board_init+0x44>)
    483c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    483e:	1d3b      	adds	r3, r7, #4
    4840:	2201      	movs	r2, #1
    4842:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4844:	1d3b      	adds	r3, r7, #4
    4846:	203e      	movs	r0, #62	; 0x3e
    4848:	1c19      	adds	r1, r3, #0
    484a:	4b0b      	ldr	r3, [pc, #44]	; (4878 <system_board_init+0x48>)
    484c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    484e:	203e      	movs	r0, #62	; 0x3e
    4850:	2101      	movs	r1, #1
    4852:	4b0a      	ldr	r3, [pc, #40]	; (487c <system_board_init+0x4c>)
    4854:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4856:	1d3b      	adds	r3, r7, #4
    4858:	2200      	movs	r2, #0
    485a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    485c:	1d3b      	adds	r3, r7, #4
    485e:	2201      	movs	r2, #1
    4860:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4862:	1d3b      	adds	r3, r7, #4
    4864:	200f      	movs	r0, #15
    4866:	1c19      	adds	r1, r3, #0
    4868:	4b03      	ldr	r3, [pc, #12]	; (4878 <system_board_init+0x48>)
    486a:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    486c:	46bd      	mov	sp, r7
    486e:	b002      	add	sp, #8
    4870:	bd80      	pop	{r7, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	000047bd 	.word	0x000047bd
    4878:	00004e91 	.word	0x00004e91
    487c:	000047dd 	.word	0x000047dd

00004880 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4880:	b580      	push	{r7, lr}
    4882:	b084      	sub	sp, #16
    4884:	af00      	add	r7, sp, #0
    4886:	1c02      	adds	r2, r0, #0
    4888:	1dfb      	adds	r3, r7, #7
    488a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    488c:	1c3b      	adds	r3, r7, #0
    488e:	330f      	adds	r3, #15
    4890:	1dfa      	adds	r2, r7, #7
    4892:	7812      	ldrb	r2, [r2, #0]
    4894:	0952      	lsrs	r2, r2, #5
    4896:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4898:	1c3b      	adds	r3, r7, #0
    489a:	330f      	adds	r3, #15
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	2b00      	cmp	r3, #0
    48a0:	d10b      	bne.n	48ba <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    48a2:	4b08      	ldr	r3, [pc, #32]	; (48c4 <_extint_get_eic_from_channel+0x44>)
    48a4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    48a6:	1c3b      	adds	r3, r7, #0
    48a8:	330f      	adds	r3, #15
    48aa:	781b      	ldrb	r3, [r3, #0]
    48ac:	009b      	lsls	r3, r3, #2
    48ae:	2210      	movs	r2, #16
    48b0:	19d2      	adds	r2, r2, r7
    48b2:	18d3      	adds	r3, r2, r3
    48b4:	3b08      	subs	r3, #8
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	e000      	b.n	48bc <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    48ba:	2300      	movs	r3, #0
	}
}
    48bc:	1c18      	adds	r0, r3, #0
    48be:	46bd      	mov	sp, r7
    48c0:	b004      	add	sp, #16
    48c2:	bd80      	pop	{r7, pc}
    48c4:	40001800 	.word	0x40001800

000048c8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b084      	sub	sp, #16
    48cc:	af00      	add	r7, sp, #0
    48ce:	1c02      	adds	r2, r0, #0
    48d0:	1dfb      	adds	r3, r7, #7
    48d2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    48d4:	1dfb      	adds	r3, r7, #7
    48d6:	781b      	ldrb	r3, [r3, #0]
    48d8:	1c18      	adds	r0, r3, #0
    48da:	4b0c      	ldr	r3, [pc, #48]	; (490c <extint_chan_is_detected+0x44>)
    48dc:	4798      	blx	r3
    48de:	1c03      	adds	r3, r0, #0
    48e0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    48e2:	1dfb      	adds	r3, r7, #7
    48e4:	781a      	ldrb	r2, [r3, #0]
    48e6:	231f      	movs	r3, #31
    48e8:	4013      	ands	r3, r2
    48ea:	2201      	movs	r2, #1
    48ec:	1c11      	adds	r1, r2, #0
    48ee:	4099      	lsls	r1, r3
    48f0:	1c0b      	adds	r3, r1, #0
    48f2:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    48f4:	68fb      	ldr	r3, [r7, #12]
    48f6:	691b      	ldr	r3, [r3, #16]
    48f8:	68ba      	ldr	r2, [r7, #8]
    48fa:	4013      	ands	r3, r2
    48fc:	1e5a      	subs	r2, r3, #1
    48fe:	4193      	sbcs	r3, r2
    4900:	b2db      	uxtb	r3, r3
}
    4902:	1c18      	adds	r0, r3, #0
    4904:	46bd      	mov	sp, r7
    4906:	b004      	add	sp, #16
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	00004881 	.word	0x00004881

00004910 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4910:	b580      	push	{r7, lr}
    4912:	b084      	sub	sp, #16
    4914:	af00      	add	r7, sp, #0
    4916:	1c02      	adds	r2, r0, #0
    4918:	1dfb      	adds	r3, r7, #7
    491a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    491c:	1dfb      	adds	r3, r7, #7
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	1c18      	adds	r0, r3, #0
    4922:	4b09      	ldr	r3, [pc, #36]	; (4948 <extint_chan_clear_detected+0x38>)
    4924:	4798      	blx	r3
    4926:	1c03      	adds	r3, r0, #0
    4928:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    492a:	1dfb      	adds	r3, r7, #7
    492c:	781a      	ldrb	r2, [r3, #0]
    492e:	231f      	movs	r3, #31
    4930:	4013      	ands	r3, r2
    4932:	2201      	movs	r2, #1
    4934:	1c11      	adds	r1, r2, #0
    4936:	4099      	lsls	r1, r3
    4938:	1c0b      	adds	r3, r1, #0
    493a:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    493c:	68fb      	ldr	r3, [r7, #12]
    493e:	68ba      	ldr	r2, [r7, #8]
    4940:	611a      	str	r2, [r3, #16]
}
    4942:	46bd      	mov	sp, r7
    4944:	b004      	add	sp, #16
    4946:	bd80      	pop	{r7, pc}
    4948:	00004881 	.word	0x00004881

0000494c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    494c:	b580      	push	{r7, lr}
    494e:	b082      	sub	sp, #8
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
    4954:	1cfb      	adds	r3, r7, #3
    4956:	7019      	strb	r1, [r3, #0]
    4958:	1cbb      	adds	r3, r7, #2
    495a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    495c:	1cbb      	adds	r3, r7, #2
    495e:	781b      	ldrb	r3, [r3, #0]
    4960:	2b00      	cmp	r3, #0
    4962:	d001      	beq.n	4968 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4964:	2317      	movs	r3, #23
    4966:	e019      	b.n	499c <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4968:	1cfb      	adds	r3, r7, #3
    496a:	781a      	ldrb	r2, [r3, #0]
    496c:	4b0d      	ldr	r3, [pc, #52]	; (49a4 <extint_register_callback+0x58>)
    496e:	0092      	lsls	r2, r2, #2
    4970:	58d3      	ldr	r3, [r2, r3]
    4972:	2b00      	cmp	r3, #0
    4974:	d107      	bne.n	4986 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4976:	1cfb      	adds	r3, r7, #3
    4978:	781a      	ldrb	r2, [r3, #0]
    497a:	4b0a      	ldr	r3, [pc, #40]	; (49a4 <extint_register_callback+0x58>)
    497c:	0092      	lsls	r2, r2, #2
    497e:	6879      	ldr	r1, [r7, #4]
    4980:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    4982:	2300      	movs	r3, #0
    4984:	e00a      	b.n	499c <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4986:	1cfb      	adds	r3, r7, #3
    4988:	781a      	ldrb	r2, [r3, #0]
    498a:	4b06      	ldr	r3, [pc, #24]	; (49a4 <extint_register_callback+0x58>)
    498c:	0092      	lsls	r2, r2, #2
    498e:	58d2      	ldr	r2, [r2, r3]
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	429a      	cmp	r2, r3
    4994:	d101      	bne.n	499a <extint_register_callback+0x4e>
		return STATUS_OK;
    4996:	2300      	movs	r3, #0
    4998:	e000      	b.n	499c <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    499a:	231d      	movs	r3, #29
}
    499c:	1c18      	adds	r0, r3, #0
    499e:	46bd      	mov	sp, r7
    49a0:	b002      	add	sp, #8
    49a2:	bd80      	pop	{r7, pc}
    49a4:	20007138 	.word	0x20007138

000049a8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b084      	sub	sp, #16
    49ac:	af00      	add	r7, sp, #0
    49ae:	1c0a      	adds	r2, r1, #0
    49b0:	1dfb      	adds	r3, r7, #7
    49b2:	1c01      	adds	r1, r0, #0
    49b4:	7019      	strb	r1, [r3, #0]
    49b6:	1dbb      	adds	r3, r7, #6
    49b8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    49ba:	1dbb      	adds	r3, r7, #6
    49bc:	781b      	ldrb	r3, [r3, #0]
    49be:	2b00      	cmp	r3, #0
    49c0:	d10e      	bne.n	49e0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    49c2:	1dfb      	adds	r3, r7, #7
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	1c18      	adds	r0, r3, #0
    49c8:	4b08      	ldr	r3, [pc, #32]	; (49ec <extint_chan_enable_callback+0x44>)
    49ca:	4798      	blx	r3
    49cc:	1c03      	adds	r3, r0, #0
    49ce:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    49d0:	1dfb      	adds	r3, r7, #7
    49d2:	781b      	ldrb	r3, [r3, #0]
    49d4:	2201      	movs	r2, #1
    49d6:	409a      	lsls	r2, r3
    49d8:	68fb      	ldr	r3, [r7, #12]
    49da:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    49dc:	2300      	movs	r3, #0
    49de:	e000      	b.n	49e2 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    49e0:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    49e2:	1c18      	adds	r0, r3, #0
    49e4:	46bd      	mov	sp, r7
    49e6:	b004      	add	sp, #16
    49e8:	bd80      	pop	{r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	00004881 	.word	0x00004881

000049f0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    49f0:	b580      	push	{r7, lr}
    49f2:	b084      	sub	sp, #16
    49f4:	af00      	add	r7, sp, #0
    49f6:	1c0a      	adds	r2, r1, #0
    49f8:	1dfb      	adds	r3, r7, #7
    49fa:	1c01      	adds	r1, r0, #0
    49fc:	7019      	strb	r1, [r3, #0]
    49fe:	1dbb      	adds	r3, r7, #6
    4a00:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4a02:	1dbb      	adds	r3, r7, #6
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	d10e      	bne.n	4a28 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4a0a:	1dfb      	adds	r3, r7, #7
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	1c18      	adds	r0, r3, #0
    4a10:	4b08      	ldr	r3, [pc, #32]	; (4a34 <extint_chan_disable_callback+0x44>)
    4a12:	4798      	blx	r3
    4a14:	1c03      	adds	r3, r0, #0
    4a16:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4a18:	1dfb      	adds	r3, r7, #7
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	2201      	movs	r2, #1
    4a1e:	409a      	lsls	r2, r3
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4a24:	2300      	movs	r3, #0
    4a26:	e000      	b.n	4a2a <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a28:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4a2a:	1c18      	adds	r0, r3, #0
    4a2c:	46bd      	mov	sp, r7
    4a2e:	b004      	add	sp, #16
    4a30:	bd80      	pop	{r7, pc}
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	00004881 	.word	0x00004881

00004a38 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4a38:	b580      	push	{r7, lr}
    4a3a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4a3c:	4b15      	ldr	r3, [pc, #84]	; (4a94 <EIC_Handler+0x5c>)
    4a3e:	2200      	movs	r2, #0
    4a40:	701a      	strb	r2, [r3, #0]
    4a42:	e021      	b.n	4a88 <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    4a44:	4b13      	ldr	r3, [pc, #76]	; (4a94 <EIC_Handler+0x5c>)
    4a46:	781b      	ldrb	r3, [r3, #0]
    4a48:	1c18      	adds	r0, r3, #0
    4a4a:	4b13      	ldr	r3, [pc, #76]	; (4a98 <EIC_Handler+0x60>)
    4a4c:	4798      	blx	r3
    4a4e:	1c03      	adds	r3, r0, #0
    4a50:	2b00      	cmp	r3, #0
    4a52:	d013      	beq.n	4a7c <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    4a54:	4b0f      	ldr	r3, [pc, #60]	; (4a94 <EIC_Handler+0x5c>)
    4a56:	781b      	ldrb	r3, [r3, #0]
    4a58:	1c18      	adds	r0, r3, #0
    4a5a:	4b10      	ldr	r3, [pc, #64]	; (4a9c <EIC_Handler+0x64>)
    4a5c:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4a5e:	4b0d      	ldr	r3, [pc, #52]	; (4a94 <EIC_Handler+0x5c>)
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	1c1a      	adds	r2, r3, #0
    4a64:	4b0e      	ldr	r3, [pc, #56]	; (4aa0 <EIC_Handler+0x68>)
    4a66:	0092      	lsls	r2, r2, #2
    4a68:	58d3      	ldr	r3, [r2, r3]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d006      	beq.n	4a7c <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4a6e:	4b09      	ldr	r3, [pc, #36]	; (4a94 <EIC_Handler+0x5c>)
    4a70:	781b      	ldrb	r3, [r3, #0]
    4a72:	1c1a      	adds	r2, r3, #0
    4a74:	4b0a      	ldr	r3, [pc, #40]	; (4aa0 <EIC_Handler+0x68>)
    4a76:	0092      	lsls	r2, r2, #2
    4a78:	58d3      	ldr	r3, [r2, r3]
    4a7a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4a7c:	4b05      	ldr	r3, [pc, #20]	; (4a94 <EIC_Handler+0x5c>)
    4a7e:	781b      	ldrb	r3, [r3, #0]
    4a80:	3301      	adds	r3, #1
    4a82:	b2da      	uxtb	r2, r3
    4a84:	4b03      	ldr	r3, [pc, #12]	; (4a94 <EIC_Handler+0x5c>)
    4a86:	701a      	strb	r2, [r3, #0]
    4a88:	4b02      	ldr	r3, [pc, #8]	; (4a94 <EIC_Handler+0x5c>)
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	2b0f      	cmp	r3, #15
    4a8e:	d9d9      	bls.n	4a44 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4a90:	46bd      	mov	sp, r7
    4a92:	bd80      	pop	{r7, pc}
    4a94:	20007136 	.word	0x20007136
    4a98:	000048c9 	.word	0x000048c9
    4a9c:	00004911 	.word	0x00004911
    4aa0:	20007138 	.word	0x20007138

00004aa4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4aa4:	b580      	push	{r7, lr}
    4aa6:	b082      	sub	sp, #8
    4aa8:	af00      	add	r7, sp, #0
    4aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	2200      	movs	r2, #0
    4ab0:	701a      	strb	r2, [r3, #0]
}
    4ab2:	46bd      	mov	sp, r7
    4ab4:	b002      	add	sp, #8
    4ab6:	bd80      	pop	{r7, pc}

00004ab8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4ab8:	b580      	push	{r7, lr}
    4aba:	b082      	sub	sp, #8
    4abc:	af00      	add	r7, sp, #0
    4abe:	1c02      	adds	r2, r0, #0
    4ac0:	6039      	str	r1, [r7, #0]
    4ac2:	1dfb      	adds	r3, r7, #7
    4ac4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4ac6:	1dfb      	adds	r3, r7, #7
    4ac8:	781b      	ldrb	r3, [r3, #0]
    4aca:	2b01      	cmp	r3, #1
    4acc:	d00a      	beq.n	4ae4 <system_apb_clock_set_mask+0x2c>
    4ace:	2b02      	cmp	r3, #2
    4ad0:	d00f      	beq.n	4af2 <system_apb_clock_set_mask+0x3a>
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d114      	bne.n	4b00 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4ad6:	4b0e      	ldr	r3, [pc, #56]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4ad8:	4a0d      	ldr	r2, [pc, #52]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4ada:	6991      	ldr	r1, [r2, #24]
    4adc:	683a      	ldr	r2, [r7, #0]
    4ade:	430a      	orrs	r2, r1
    4ae0:	619a      	str	r2, [r3, #24]
			break;
    4ae2:	e00f      	b.n	4b04 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4ae4:	4b0a      	ldr	r3, [pc, #40]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4ae6:	4a0a      	ldr	r2, [pc, #40]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4ae8:	69d1      	ldr	r1, [r2, #28]
    4aea:	683a      	ldr	r2, [r7, #0]
    4aec:	430a      	orrs	r2, r1
    4aee:	61da      	str	r2, [r3, #28]
			break;
    4af0:	e008      	b.n	4b04 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4af2:	4b07      	ldr	r3, [pc, #28]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4af4:	4a06      	ldr	r2, [pc, #24]	; (4b10 <system_apb_clock_set_mask+0x58>)
    4af6:	6a11      	ldr	r1, [r2, #32]
    4af8:	683a      	ldr	r2, [r7, #0]
    4afa:	430a      	orrs	r2, r1
    4afc:	621a      	str	r2, [r3, #32]
			break;
    4afe:	e001      	b.n	4b04 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4b00:	2317      	movs	r3, #23
    4b02:	e000      	b.n	4b06 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4b04:	2300      	movs	r3, #0
}
    4b06:	1c18      	adds	r0, r3, #0
    4b08:	46bd      	mov	sp, r7
    4b0a:	b002      	add	sp, #8
    4b0c:	bd80      	pop	{r7, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	40000400 	.word	0x40000400

00004b14 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	b082      	sub	sp, #8
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b1c:	687b      	ldr	r3, [r7, #4]
    4b1e:	2280      	movs	r2, #128	; 0x80
    4b20:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	2200      	movs	r2, #0
    4b26:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	2201      	movs	r2, #1
    4b2c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4b2e:	687b      	ldr	r3, [r7, #4]
    4b30:	2200      	movs	r2, #0
    4b32:	70da      	strb	r2, [r3, #3]
}
    4b34:	46bd      	mov	sp, r7
    4b36:	b002      	add	sp, #8
    4b38:	bd80      	pop	{r7, pc}
    4b3a:	46c0      	nop			; (mov r8, r8)

00004b3c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b082      	sub	sp, #8
    4b40:	af00      	add	r7, sp, #0
    4b42:	1c02      	adds	r2, r0, #0
    4b44:	1dfb      	adds	r3, r7, #7
    4b46:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4b48:	4b06      	ldr	r3, [pc, #24]	; (4b64 <system_interrupt_enable+0x28>)
    4b4a:	1dfa      	adds	r2, r7, #7
    4b4c:	7812      	ldrb	r2, [r2, #0]
    4b4e:	1c11      	adds	r1, r2, #0
    4b50:	221f      	movs	r2, #31
    4b52:	400a      	ands	r2, r1
    4b54:	2101      	movs	r1, #1
    4b56:	1c08      	adds	r0, r1, #0
    4b58:	4090      	lsls	r0, r2
    4b5a:	1c02      	adds	r2, r0, #0
    4b5c:	601a      	str	r2, [r3, #0]
}
    4b5e:	46bd      	mov	sp, r7
    4b60:	b002      	add	sp, #8
    4b62:	bd80      	pop	{r7, pc}
    4b64:	e000e100 	.word	0xe000e100

00004b68 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b084      	sub	sp, #16
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	1c02      	adds	r2, r0, #0
    4b70:	1dfb      	adds	r3, r7, #7
    4b72:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4b74:	1c3b      	adds	r3, r7, #0
    4b76:	330f      	adds	r3, #15
    4b78:	1dfa      	adds	r2, r7, #7
    4b7a:	7812      	ldrb	r2, [r2, #0]
    4b7c:	0952      	lsrs	r2, r2, #5
    4b7e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4b80:	1c3b      	adds	r3, r7, #0
    4b82:	330f      	adds	r3, #15
    4b84:	781b      	ldrb	r3, [r3, #0]
    4b86:	2b00      	cmp	r3, #0
    4b88:	d10b      	bne.n	4ba2 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4b8a:	4b08      	ldr	r3, [pc, #32]	; (4bac <_extint_get_eic_from_channel+0x44>)
    4b8c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4b8e:	1c3b      	adds	r3, r7, #0
    4b90:	330f      	adds	r3, #15
    4b92:	781b      	ldrb	r3, [r3, #0]
    4b94:	009b      	lsls	r3, r3, #2
    4b96:	2210      	movs	r2, #16
    4b98:	19d2      	adds	r2, r2, r7
    4b9a:	18d3      	adds	r3, r2, r3
    4b9c:	3b08      	subs	r3, #8
    4b9e:	681b      	ldr	r3, [r3, #0]
    4ba0:	e000      	b.n	4ba4 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    4ba2:	2300      	movs	r3, #0
	}
}
    4ba4:	1c18      	adds	r0, r3, #0
    4ba6:	46bd      	mov	sp, r7
    4ba8:	b004      	add	sp, #16
    4baa:	bd80      	pop	{r7, pc}
    4bac:	40001800 	.word	0x40001800

00004bb0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4bb6:	4b0f      	ldr	r3, [pc, #60]	; (4bf4 <extint_is_syncing+0x44>)
    4bb8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4bba:	2300      	movs	r3, #0
    4bbc:	607b      	str	r3, [r7, #4]
    4bbe:	e011      	b.n	4be4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	009b      	lsls	r3, r3, #2
    4bc4:	2208      	movs	r2, #8
    4bc6:	19d2      	adds	r2, r2, r7
    4bc8:	18d3      	adds	r3, r2, r3
    4bca:	3b08      	subs	r3, #8
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	785b      	ldrb	r3, [r3, #1]
    4bd0:	b2db      	uxtb	r3, r3
    4bd2:	b2db      	uxtb	r3, r3
    4bd4:	b25b      	sxtb	r3, r3
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	da01      	bge.n	4bde <extint_is_syncing+0x2e>
			return true;
    4bda:	2301      	movs	r3, #1
    4bdc:	e006      	b.n	4bec <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	3301      	adds	r3, #1
    4be2:	607b      	str	r3, [r7, #4]
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d0ea      	beq.n	4bc0 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4bea:	2300      	movs	r3, #0
}
    4bec:	1c18      	adds	r0, r3, #0
    4bee:	46bd      	mov	sp, r7
    4bf0:	b002      	add	sp, #8
    4bf2:	bd80      	pop	{r7, pc}
    4bf4:	40001800 	.word	0x40001800

00004bf8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4bf8:	b580      	push	{r7, lr}
    4bfa:	b084      	sub	sp, #16
    4bfc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4bfe:	4b2c      	ldr	r3, [pc, #176]	; (4cb0 <_system_extint_init+0xb8>)
    4c00:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4c02:	2000      	movs	r0, #0
    4c04:	2140      	movs	r1, #64	; 0x40
    4c06:	4b2b      	ldr	r3, [pc, #172]	; (4cb4 <_system_extint_init+0xbc>)
    4c08:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4c0a:	1c3b      	adds	r3, r7, #0
    4c0c:	1c18      	adds	r0, r3, #0
    4c0e:	4b2a      	ldr	r3, [pc, #168]	; (4cb8 <_system_extint_init+0xc0>)
    4c10:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4c12:	1c3b      	adds	r3, r7, #0
    4c14:	2200      	movs	r2, #0
    4c16:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4c18:	1c3b      	adds	r3, r7, #0
    4c1a:	2005      	movs	r0, #5
    4c1c:	1c19      	adds	r1, r3, #0
    4c1e:	4b27      	ldr	r3, [pc, #156]	; (4cbc <_system_extint_init+0xc4>)
    4c20:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4c22:	2005      	movs	r0, #5
    4c24:	4b26      	ldr	r3, [pc, #152]	; (4cc0 <_system_extint_init+0xc8>)
    4c26:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4c28:	2300      	movs	r3, #0
    4c2a:	60fb      	str	r3, [r7, #12]
    4c2c:	e016      	b.n	4c5c <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4c2e:	68fb      	ldr	r3, [r7, #12]
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	2110      	movs	r1, #16
    4c34:	19c9      	adds	r1, r1, r7
    4c36:	18cb      	adds	r3, r1, r3
    4c38:	3b0c      	subs	r3, #12
    4c3a:	681a      	ldr	r2, [r3, #0]
    4c3c:	68fb      	ldr	r3, [r7, #12]
    4c3e:	009b      	lsls	r3, r3, #2
    4c40:	2110      	movs	r1, #16
    4c42:	19c9      	adds	r1, r1, r7
    4c44:	18cb      	adds	r3, r1, r3
    4c46:	3b0c      	subs	r3, #12
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	781b      	ldrb	r3, [r3, #0]
    4c4c:	b2db      	uxtb	r3, r3
    4c4e:	2101      	movs	r1, #1
    4c50:	430b      	orrs	r3, r1
    4c52:	b2db      	uxtb	r3, r3
    4c54:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	3301      	adds	r3, #1
    4c5a:	60fb      	str	r3, [r7, #12]
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d0e5      	beq.n	4c2e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    4c62:	46c0      	nop			; (mov r8, r8)
    4c64:	4b17      	ldr	r3, [pc, #92]	; (4cc4 <_system_extint_init+0xcc>)
    4c66:	4798      	blx	r3
    4c68:	1c03      	adds	r3, r0, #0
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d1fa      	bne.n	4c64 <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4c6e:	1c3b      	adds	r3, r7, #0
    4c70:	330b      	adds	r3, #11
    4c72:	2200      	movs	r2, #0
    4c74:	701a      	strb	r2, [r3, #0]
    4c76:	e00d      	b.n	4c94 <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    4c78:	1c3b      	adds	r3, r7, #0
    4c7a:	330b      	adds	r3, #11
    4c7c:	781a      	ldrb	r2, [r3, #0]
    4c7e:	4b12      	ldr	r3, [pc, #72]	; (4cc8 <_system_extint_init+0xd0>)
    4c80:	0092      	lsls	r2, r2, #2
    4c82:	2100      	movs	r1, #0
    4c84:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4c86:	1c3b      	adds	r3, r7, #0
    4c88:	330b      	adds	r3, #11
    4c8a:	781a      	ldrb	r2, [r3, #0]
    4c8c:	1c3b      	adds	r3, r7, #0
    4c8e:	330b      	adds	r3, #11
    4c90:	3201      	adds	r2, #1
    4c92:	701a      	strb	r2, [r3, #0]
    4c94:	1c3b      	adds	r3, r7, #0
    4c96:	330b      	adds	r3, #11
    4c98:	781b      	ldrb	r3, [r3, #0]
    4c9a:	2b0f      	cmp	r3, #15
    4c9c:	d9ec      	bls.n	4c78 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4c9e:	2004      	movs	r0, #4
    4ca0:	4b0a      	ldr	r3, [pc, #40]	; (4ccc <_system_extint_init+0xd4>)
    4ca2:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4ca4:	4b0a      	ldr	r3, [pc, #40]	; (4cd0 <_system_extint_init+0xd8>)
    4ca6:	4798      	blx	r3
}
    4ca8:	46bd      	mov	sp, r7
    4caa:	b004      	add	sp, #16
    4cac:	bd80      	pop	{r7, pc}
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	40001800 	.word	0x40001800
    4cb4:	00004ab9 	.word	0x00004ab9
    4cb8:	00004aa5 	.word	0x00004aa5
    4cbc:	00006bdd 	.word	0x00006bdd
    4cc0:	00006c1d 	.word	0x00006c1d
    4cc4:	00004bb1 	.word	0x00004bb1
    4cc8:	20007138 	.word	0x20007138
    4ccc:	00004b3d 	.word	0x00004b3d
    4cd0:	00004cd5 	.word	0x00004cd5

00004cd4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4cda:	4b14      	ldr	r3, [pc, #80]	; (4d2c <_extint_enable+0x58>)
    4cdc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4cde:	2300      	movs	r3, #0
    4ce0:	607b      	str	r3, [r7, #4]
    4ce2:	e016      	b.n	4d12 <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	009b      	lsls	r3, r3, #2
    4ce8:	2108      	movs	r1, #8
    4cea:	19c9      	adds	r1, r1, r7
    4cec:	18cb      	adds	r3, r1, r3
    4cee:	3b08      	subs	r3, #8
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	009b      	lsls	r3, r3, #2
    4cf6:	2108      	movs	r1, #8
    4cf8:	19c9      	adds	r1, r1, r7
    4cfa:	18cb      	adds	r3, r1, r3
    4cfc:	3b08      	subs	r3, #8
    4cfe:	681b      	ldr	r3, [r3, #0]
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	b2db      	uxtb	r3, r3
    4d04:	2102      	movs	r1, #2
    4d06:	430b      	orrs	r3, r1
    4d08:	b2db      	uxtb	r3, r3
    4d0a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	3301      	adds	r3, #1
    4d10:	607b      	str	r3, [r7, #4]
    4d12:	687b      	ldr	r3, [r7, #4]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d0e5      	beq.n	4ce4 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4d18:	46c0      	nop			; (mov r8, r8)
    4d1a:	4b05      	ldr	r3, [pc, #20]	; (4d30 <_extint_enable+0x5c>)
    4d1c:	4798      	blx	r3
    4d1e:	1c03      	adds	r3, r0, #0
    4d20:	2b00      	cmp	r3, #0
    4d22:	d1fa      	bne.n	4d1a <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4d24:	46bd      	mov	sp, r7
    4d26:	b002      	add	sp, #8
    4d28:	bd80      	pop	{r7, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	40001800 	.word	0x40001800
    4d30:	00004bb1 	.word	0x00004bb1

00004d34 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4d34:	b580      	push	{r7, lr}
    4d36:	b082      	sub	sp, #8
    4d38:	af00      	add	r7, sp, #0
    4d3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4d3c:	687b      	ldr	r3, [r7, #4]
    4d3e:	2200      	movs	r2, #0
    4d40:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	2200      	movs	r2, #0
    4d46:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	2201      	movs	r2, #1
    4d4c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	2201      	movs	r2, #1
    4d52:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	2200      	movs	r2, #0
    4d58:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	2202      	movs	r2, #2
    4d5e:	72da      	strb	r2, [r3, #11]
}
    4d60:	46bd      	mov	sp, r7
    4d62:	b002      	add	sp, #8
    4d64:	bd80      	pop	{r7, pc}
    4d66:	46c0      	nop			; (mov r8, r8)

00004d68 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4d68:	b590      	push	{r4, r7, lr}
    4d6a:	b087      	sub	sp, #28
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	1c02      	adds	r2, r0, #0
    4d70:	6039      	str	r1, [r7, #0]
    4d72:	1dfb      	adds	r3, r7, #7
    4d74:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4d76:	1c3b      	adds	r3, r7, #0
    4d78:	3308      	adds	r3, #8
    4d7a:	1c18      	adds	r0, r3, #0
    4d7c:	4b37      	ldr	r3, [pc, #220]	; (4e5c <extint_chan_set_config+0xf4>)
    4d7e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	685b      	ldr	r3, [r3, #4]
    4d84:	b2da      	uxtb	r2, r3
    4d86:	1c3b      	adds	r3, r7, #0
    4d88:	3308      	adds	r3, #8
    4d8a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d8c:	1c3b      	adds	r3, r7, #0
    4d8e:	3308      	adds	r3, #8
    4d90:	2200      	movs	r2, #0
    4d92:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4d94:	683b      	ldr	r3, [r7, #0]
    4d96:	7a1a      	ldrb	r2, [r3, #8]
    4d98:	1c3b      	adds	r3, r7, #0
    4d9a:	3308      	adds	r3, #8
    4d9c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4d9e:	683b      	ldr	r3, [r7, #0]
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	b2da      	uxtb	r2, r3
    4da4:	1c3b      	adds	r3, r7, #0
    4da6:	3308      	adds	r3, #8
    4da8:	1c10      	adds	r0, r2, #0
    4daa:	1c19      	adds	r1, r3, #0
    4dac:	4b2c      	ldr	r3, [pc, #176]	; (4e60 <extint_chan_set_config+0xf8>)
    4dae:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	1c18      	adds	r0, r3, #0
    4db6:	4b2b      	ldr	r3, [pc, #172]	; (4e64 <extint_chan_set_config+0xfc>)
    4db8:	4798      	blx	r3
    4dba:	1c03      	adds	r3, r0, #0
    4dbc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    4dbe:	1dfb      	adds	r3, r7, #7
    4dc0:	781a      	ldrb	r2, [r3, #0]
    4dc2:	2307      	movs	r3, #7
    4dc4:	4013      	ands	r3, r2
    4dc6:	009b      	lsls	r3, r3, #2
    4dc8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4dca:	683b      	ldr	r3, [r7, #0]
    4dcc:	7adb      	ldrb	r3, [r3, #11]
    4dce:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4dd0:	683b      	ldr	r3, [r7, #0]
    4dd2:	7a9b      	ldrb	r3, [r3, #10]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d003      	beq.n	4de0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    4dd8:	697b      	ldr	r3, [r7, #20]
    4dda:	2208      	movs	r2, #8
    4ddc:	4313      	orrs	r3, r2
    4dde:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    4de0:	1dfb      	adds	r3, r7, #7
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	08db      	lsrs	r3, r3, #3
    4de6:	b2db      	uxtb	r3, r3
    4de8:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    4dea:	1dfb      	adds	r3, r7, #7
    4dec:	781b      	ldrb	r3, [r3, #0]
    4dee:	08db      	lsrs	r3, r3, #3
    4df0:	b2db      	uxtb	r3, r3
    4df2:	1c19      	adds	r1, r3, #0
    4df4:	693b      	ldr	r3, [r7, #16]
    4df6:	3106      	adds	r1, #6
    4df8:	0089      	lsls	r1, r1, #2
    4dfa:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4dfc:	68f9      	ldr	r1, [r7, #12]
    4dfe:	200f      	movs	r0, #15
    4e00:	1c04      	adds	r4, r0, #0
    4e02:	408c      	lsls	r4, r1
    4e04:	1c21      	adds	r1, r4, #0
    4e06:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4e08:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4e0a:	68fb      	ldr	r3, [r7, #12]
    4e0c:	6978      	ldr	r0, [r7, #20]
    4e0e:	1c04      	adds	r4, r0, #0
    4e10:	409c      	lsls	r4, r3
    4e12:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4e14:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4e16:	693b      	ldr	r3, [r7, #16]
    4e18:	3206      	adds	r2, #6
    4e1a:	0092      	lsls	r2, r2, #2
    4e1c:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4e1e:	683b      	ldr	r3, [r7, #0]
    4e20:	7a5b      	ldrb	r3, [r3, #9]
    4e22:	2b00      	cmp	r3, #0
    4e24:	d00b      	beq.n	4e3e <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4e26:	693b      	ldr	r3, [r7, #16]
    4e28:	695a      	ldr	r2, [r3, #20]
    4e2a:	1dfb      	adds	r3, r7, #7
    4e2c:	781b      	ldrb	r3, [r3, #0]
    4e2e:	2101      	movs	r1, #1
    4e30:	1c08      	adds	r0, r1, #0
    4e32:	4098      	lsls	r0, r3
    4e34:	1c03      	adds	r3, r0, #0
    4e36:	431a      	orrs	r2, r3
    4e38:	693b      	ldr	r3, [r7, #16]
    4e3a:	615a      	str	r2, [r3, #20]
    4e3c:	e00b      	b.n	4e56 <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4e3e:	693b      	ldr	r3, [r7, #16]
    4e40:	695b      	ldr	r3, [r3, #20]
    4e42:	1dfa      	adds	r2, r7, #7
    4e44:	7812      	ldrb	r2, [r2, #0]
    4e46:	2101      	movs	r1, #1
    4e48:	1c0c      	adds	r4, r1, #0
    4e4a:	4094      	lsls	r4, r2
    4e4c:	1c22      	adds	r2, r4, #0
    4e4e:	43d2      	mvns	r2, r2
    4e50:	401a      	ands	r2, r3
    4e52:	693b      	ldr	r3, [r7, #16]
    4e54:	615a      	str	r2, [r3, #20]
	}
}
    4e56:	46bd      	mov	sp, r7
    4e58:	b007      	add	sp, #28
    4e5a:	bd90      	pop	{r4, r7, pc}
    4e5c:	00004b15 	.word	0x00004b15
    4e60:	00006ec1 	.word	0x00006ec1
    4e64:	00004b69 	.word	0x00004b69

00004e68 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b082      	sub	sp, #8
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	2280      	movs	r2, #128	; 0x80
    4e74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	2200      	movs	r2, #0
    4e7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	2201      	movs	r2, #1
    4e80:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	2200      	movs	r2, #0
    4e86:	70da      	strb	r2, [r3, #3]
}
    4e88:	46bd      	mov	sp, r7
    4e8a:	b002      	add	sp, #8
    4e8c:	bd80      	pop	{r7, pc}
    4e8e:	46c0      	nop			; (mov r8, r8)

00004e90 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4e90:	b580      	push	{r7, lr}
    4e92:	b084      	sub	sp, #16
    4e94:	af00      	add	r7, sp, #0
    4e96:	1c02      	adds	r2, r0, #0
    4e98:	6039      	str	r1, [r7, #0]
    4e9a:	1dfb      	adds	r3, r7, #7
    4e9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4e9e:	1c3b      	adds	r3, r7, #0
    4ea0:	330c      	adds	r3, #12
    4ea2:	1c18      	adds	r0, r3, #0
    4ea4:	4b0f      	ldr	r3, [pc, #60]	; (4ee4 <port_pin_set_config+0x54>)
    4ea6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4ea8:	1c3b      	adds	r3, r7, #0
    4eaa:	330c      	adds	r3, #12
    4eac:	2280      	movs	r2, #128	; 0x80
    4eae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4eb0:	683b      	ldr	r3, [r7, #0]
    4eb2:	781a      	ldrb	r2, [r3, #0]
    4eb4:	1c3b      	adds	r3, r7, #0
    4eb6:	330c      	adds	r3, #12
    4eb8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4eba:	683b      	ldr	r3, [r7, #0]
    4ebc:	785a      	ldrb	r2, [r3, #1]
    4ebe:	1c3b      	adds	r3, r7, #0
    4ec0:	330c      	adds	r3, #12
    4ec2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4ec4:	683b      	ldr	r3, [r7, #0]
    4ec6:	789a      	ldrb	r2, [r3, #2]
    4ec8:	1c3b      	adds	r3, r7, #0
    4eca:	330c      	adds	r3, #12
    4ecc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4ece:	1dfb      	adds	r3, r7, #7
    4ed0:	781a      	ldrb	r2, [r3, #0]
    4ed2:	1c3b      	adds	r3, r7, #0
    4ed4:	330c      	adds	r3, #12
    4ed6:	1c10      	adds	r0, r2, #0
    4ed8:	1c19      	adds	r1, r3, #0
    4eda:	4b03      	ldr	r3, [pc, #12]	; (4ee8 <port_pin_set_config+0x58>)
    4edc:	4798      	blx	r3
}
    4ede:	46bd      	mov	sp, r7
    4ee0:	b004      	add	sp, #16
    4ee2:	bd80      	pop	{r7, pc}
    4ee4:	00004e69 	.word	0x00004e69
    4ee8:	00006ec1 	.word	0x00006ec1

00004eec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4eec:	b580      	push	{r7, lr}
    4eee:	b082      	sub	sp, #8
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	2200      	movs	r2, #0
    4ef8:	701a      	strb	r2, [r3, #0]
}
    4efa:	46bd      	mov	sp, r7
    4efc:	b002      	add	sp, #8
    4efe:	bd80      	pop	{r7, pc}

00004f00 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4f00:	b5b0      	push	{r4, r5, r7, lr}
    4f02:	b08e      	sub	sp, #56	; 0x38
    4f04:	af00      	add	r7, sp, #0
    4f06:	6138      	str	r0, [r7, #16]
    4f08:	6179      	str	r1, [r7, #20]
    4f0a:	60ba      	str	r2, [r7, #8]
    4f0c:	60fb      	str	r3, [r7, #12]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4f0e:	2200      	movs	r2, #0
    4f10:	2300      	movs	r3, #0
    4f12:	62ba      	str	r2, [r7, #40]	; 0x28
    4f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    4f16:	2200      	movs	r2, #0
    4f18:	2300      	movs	r3, #0
    4f1a:	623a      	str	r2, [r7, #32]
    4f1c:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    4f1e:	233f      	movs	r3, #63	; 0x3f
    4f20:	637b      	str	r3, [r7, #52]	; 0x34
    4f22:	e05b      	b.n	4fdc <long_division+0xdc>
		bit_shift = (uint64_t)1 << i;
    4f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f26:	3b20      	subs	r3, #32
    4f28:	2b00      	cmp	r3, #0
    4f2a:	db05      	blt.n	4f38 <long_division+0x38>
    4f2c:	2201      	movs	r2, #1
    4f2e:	1c10      	adds	r0, r2, #0
    4f30:	4098      	lsls	r0, r3
    4f32:	1c03      	adds	r3, r0, #0
    4f34:	61fb      	str	r3, [r7, #28]
    4f36:	e00d      	b.n	4f54 <long_division+0x54>
    4f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f3a:	2220      	movs	r2, #32
    4f3c:	1ad3      	subs	r3, r2, r3
    4f3e:	2201      	movs	r2, #1
    4f40:	1c11      	adds	r1, r2, #0
    4f42:	40d9      	lsrs	r1, r3
    4f44:	1c0b      	adds	r3, r1, #0
    4f46:	2100      	movs	r1, #0
    4f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4f4a:	1c08      	adds	r0, r1, #0
    4f4c:	4090      	lsls	r0, r2
    4f4e:	1c02      	adds	r2, r0, #0
    4f50:	4313      	orrs	r3, r2
    4f52:	61fb      	str	r3, [r7, #28]
    4f54:	2201      	movs	r2, #1
    4f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f58:	1c11      	adds	r1, r2, #0
    4f5a:	4099      	lsls	r1, r3
    4f5c:	1c0b      	adds	r3, r1, #0
    4f5e:	61bb      	str	r3, [r7, #24]

		r = r << 1;
    4f60:	6a3a      	ldr	r2, [r7, #32]
    4f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f64:	1892      	adds	r2, r2, r2
    4f66:	415b      	adcs	r3, r3
    4f68:	623a      	str	r2, [r7, #32]
    4f6a:	627b      	str	r3, [r7, #36]	; 0x24

		if (n & bit_shift) {
    4f6c:	693b      	ldr	r3, [r7, #16]
    4f6e:	69ba      	ldr	r2, [r7, #24]
    4f70:	1c14      	adds	r4, r2, #0
    4f72:	401c      	ands	r4, r3
    4f74:	697b      	ldr	r3, [r7, #20]
    4f76:	69fa      	ldr	r2, [r7, #28]
    4f78:	1c15      	adds	r5, r2, #0
    4f7a:	401d      	ands	r5, r3
    4f7c:	1c23      	adds	r3, r4, #0
    4f7e:	432b      	orrs	r3, r5
    4f80:	d007      	beq.n	4f92 <long_division+0x92>
			r |= 0x01;
    4f82:	6a3b      	ldr	r3, [r7, #32]
    4f84:	2201      	movs	r2, #1
    4f86:	4313      	orrs	r3, r2
    4f88:	623b      	str	r3, [r7, #32]
    4f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f8c:	2200      	movs	r2, #0
    4f8e:	4313      	orrs	r3, r2
    4f90:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (r >= d) {
    4f92:	68fa      	ldr	r2, [r7, #12]
    4f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f96:	429a      	cmp	r2, r3
    4f98:	d81d      	bhi.n	4fd6 <long_division+0xd6>
    4f9a:	68fa      	ldr	r2, [r7, #12]
    4f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f9e:	429a      	cmp	r2, r3
    4fa0:	d103      	bne.n	4faa <long_division+0xaa>
    4fa2:	68ba      	ldr	r2, [r7, #8]
    4fa4:	6a3b      	ldr	r3, [r7, #32]
    4fa6:	429a      	cmp	r2, r3
    4fa8:	d815      	bhi.n	4fd6 <long_division+0xd6>
			r = r - d;
    4faa:	6a3a      	ldr	r2, [r7, #32]
    4fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4fae:	603a      	str	r2, [r7, #0]
    4fb0:	607b      	str	r3, [r7, #4]
    4fb2:	68ba      	ldr	r2, [r7, #8]
    4fb4:	68fb      	ldr	r3, [r7, #12]
    4fb6:	6838      	ldr	r0, [r7, #0]
    4fb8:	6879      	ldr	r1, [r7, #4]
    4fba:	1a80      	subs	r0, r0, r2
    4fbc:	4199      	sbcs	r1, r3
    4fbe:	1c02      	adds	r2, r0, #0
    4fc0:	1c0b      	adds	r3, r1, #0
    4fc2:	623a      	str	r2, [r7, #32]
    4fc4:	627b      	str	r3, [r7, #36]	; 0x24
			q |= bit_shift;
    4fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4fc8:	69bb      	ldr	r3, [r7, #24]
    4fca:	4313      	orrs	r3, r2
    4fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    4fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4fd0:	69fb      	ldr	r3, [r7, #28]
    4fd2:	4313      	orrs	r3, r2
    4fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    4fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fd8:	3b01      	subs	r3, #1
    4fda:	637b      	str	r3, [r7, #52]	; 0x34
    4fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fde:	2b00      	cmp	r3, #0
    4fe0:	daa0      	bge.n	4f24 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    4fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4fe4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
    4fe6:	1c18      	adds	r0, r3, #0
    4fe8:	1c21      	adds	r1, r4, #0
    4fea:	46bd      	mov	sp, r7
    4fec:	b00e      	add	sp, #56	; 0x38
    4fee:	bdb0      	pop	{r4, r5, r7, pc}

00004ff0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4ff0:	b580      	push	{r7, lr}
    4ff2:	b086      	sub	sp, #24
    4ff4:	af00      	add	r7, sp, #0
    4ff6:	60f8      	str	r0, [r7, #12]
    4ff8:	60b9      	str	r1, [r7, #8]
    4ffa:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4ffc:	1c3b      	adds	r3, r7, #0
    4ffe:	3316      	adds	r3, #22
    5000:	2200      	movs	r2, #0
    5002:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    5004:	68bb      	ldr	r3, [r7, #8]
    5006:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    5008:	68bb      	ldr	r3, [r7, #8]
    500a:	085a      	lsrs	r2, r3, #1
    500c:	68fb      	ldr	r3, [r7, #12]
    500e:	429a      	cmp	r2, r3
    5010:	d201      	bcs.n	5016 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5012:	2340      	movs	r3, #64	; 0x40
    5014:	e026      	b.n	5064 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    5016:	68bb      	ldr	r3, [r7, #8]
    5018:	085b      	lsrs	r3, r3, #1
    501a:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    501c:	e00a      	b.n	5034 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    501e:	693a      	ldr	r2, [r7, #16]
    5020:	68fb      	ldr	r3, [r7, #12]
    5022:	1ad3      	subs	r3, r2, r3
    5024:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    5026:	1c3b      	adds	r3, r7, #0
    5028:	3316      	adds	r3, #22
    502a:	881a      	ldrh	r2, [r3, #0]
    502c:	1c3b      	adds	r3, r7, #0
    502e:	3316      	adds	r3, #22
    5030:	3201      	adds	r2, #1
    5032:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    5034:	693a      	ldr	r2, [r7, #16]
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	429a      	cmp	r2, r3
    503a:	d2f0      	bcs.n	501e <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    503c:	1c3b      	adds	r3, r7, #0
    503e:	3316      	adds	r3, #22
    5040:	1c3a      	adds	r2, r7, #0
    5042:	3216      	adds	r2, #22
    5044:	8812      	ldrh	r2, [r2, #0]
    5046:	3a01      	subs	r2, #1
    5048:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    504a:	1c3b      	adds	r3, r7, #0
    504c:	3316      	adds	r3, #22
    504e:	881b      	ldrh	r3, [r3, #0]
    5050:	2bff      	cmp	r3, #255	; 0xff
    5052:	d901      	bls.n	5058 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5054:	2340      	movs	r3, #64	; 0x40
    5056:	e005      	b.n	5064 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	1c3a      	adds	r2, r7, #0
    505c:	3216      	adds	r2, #22
    505e:	8812      	ldrh	r2, [r2, #0]
    5060:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    5062:	2300      	movs	r3, #0
	}
}
    5064:	1c18      	adds	r0, r3, #0
    5066:	46bd      	mov	sp, r7
    5068:	b006      	add	sp, #24
    506a:	bd80      	pop	{r7, pc}
    506c:	0000      	movs	r0, r0
	...

00005070 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5070:	b5f0      	push	{r4, r5, r6, r7, lr}
    5072:	b09d      	sub	sp, #116	; 0x74
    5074:	af00      	add	r7, sp, #0
    5076:	63f8      	str	r0, [r7, #60]	; 0x3c
    5078:	63b9      	str	r1, [r7, #56]	; 0x38
    507a:	637a      	str	r2, [r7, #52]	; 0x34
    507c:	1c3a      	adds	r2, r7, #0
    507e:	3233      	adds	r2, #51	; 0x33
    5080:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    5082:	2300      	movs	r3, #0
    5084:	2400      	movs	r4, #0
    5086:	65bb      	str	r3, [r7, #88]	; 0x58
    5088:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    508a:	2300      	movs	r3, #0
    508c:	2400      	movs	r4, #0
    508e:	653b      	str	r3, [r7, #80]	; 0x50
    5090:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    5092:	2300      	movs	r3, #0
    5094:	2400      	movs	r4, #0
    5096:	66bb      	str	r3, [r7, #104]	; 0x68
    5098:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    509a:	2300      	movs	r3, #0
    509c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    509e:	1c3b      	adds	r3, r7, #0
    50a0:	3388      	adds	r3, #136	; 0x88
    50a2:	781a      	ldrb	r2, [r3, #0]
    50a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50a6:	435a      	muls	r2, r3
    50a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50aa:	429a      	cmp	r2, r3
    50ac:	d901      	bls.n	50b2 <_sercom_get_async_baud_val+0x42>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    50ae:	2340      	movs	r3, #64	; 0x40
    50b0:	e0af      	b.n	5212 <_sercom_get_async_baud_val+0x1a2>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    50b2:	1c3b      	adds	r3, r7, #0
    50b4:	3333      	adds	r3, #51	; 0x33
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d143      	bne.n	5144 <_sercom_get_async_baud_val+0xd4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    50bc:	1c3b      	adds	r3, r7, #0
    50be:	3388      	adds	r3, #136	; 0x88
    50c0:	781b      	ldrb	r3, [r3, #0]
    50c2:	b2db      	uxtb	r3, r3
    50c4:	62bb      	str	r3, [r7, #40]	; 0x28
    50c6:	2300      	movs	r3, #0
    50c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    50ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50cc:	623b      	str	r3, [r7, #32]
    50ce:	2300      	movs	r3, #0
    50d0:	627b      	str	r3, [r7, #36]	; 0x24
    50d2:	4c55      	ldr	r4, [pc, #340]	; (5228 <_sercom_get_async_baud_val+0x1b8>)
    50d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    50d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    50d8:	6a3a      	ldr	r2, [r7, #32]
    50da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50dc:	47a0      	blx	r4
    50de:	1c03      	adds	r3, r0, #0
    50e0:	1c0c      	adds	r4, r1, #0
    50e2:	001b      	movs	r3, r3
    50e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    50e6:	2300      	movs	r3, #0
    50e8:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    50ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    50ec:	61bb      	str	r3, [r7, #24]
    50ee:	2300      	movs	r3, #0
    50f0:	61fb      	str	r3, [r7, #28]
    50f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    50f4:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    50f6:	1c18      	adds	r0, r3, #0
    50f8:	1c21      	adds	r1, r4, #0
    50fa:	69ba      	ldr	r2, [r7, #24]
    50fc:	69fb      	ldr	r3, [r7, #28]
    50fe:	4c4b      	ldr	r4, [pc, #300]	; (522c <_sercom_get_async_baud_val+0x1bc>)
    5100:	47a0      	blx	r4
    5102:	1c03      	adds	r3, r0, #0
    5104:	1c0c      	adds	r4, r1, #0
    5106:	65bb      	str	r3, [r7, #88]	; 0x58
    5108:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    510a:	4a46      	ldr	r2, [pc, #280]	; (5224 <_sercom_get_async_baud_val+0x1b4>)
    510c:	4944      	ldr	r1, [pc, #272]	; (5220 <_sercom_get_async_baud_val+0x1b0>)
    510e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5110:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    5112:	1c0d      	adds	r5, r1, #0
    5114:	1c16      	adds	r6, r2, #0
    5116:	1aed      	subs	r5, r5, r3
    5118:	41a6      	sbcs	r6, r4
    511a:	1c2b      	adds	r3, r5, #0
    511c:	1c34      	adds	r4, r6, #0
    511e:	653b      	str	r3, [r7, #80]	; 0x50
    5120:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    5122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5124:	0c1b      	lsrs	r3, r3, #16
    5126:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5128:	0412      	lsls	r2, r2, #16
    512a:	617a      	str	r2, [r7, #20]
    512c:	697e      	ldr	r6, [r7, #20]
    512e:	431e      	orrs	r6, r3
    5130:	617e      	str	r6, [r7, #20]
    5132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5134:	041b      	lsls	r3, r3, #16
    5136:	613b      	str	r3, [r7, #16]
    5138:	697a      	ldr	r2, [r7, #20]
    513a:	0013      	movs	r3, r2
    513c:	66bb      	str	r3, [r7, #104]	; 0x68
    513e:	2300      	movs	r3, #0
    5140:	66fb      	str	r3, [r7, #108]	; 0x6c
    5142:	e060      	b.n	5206 <_sercom_get_async_baud_val+0x196>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5144:	1c3b      	adds	r3, r7, #0
    5146:	3333      	adds	r3, #51	; 0x33
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	2b01      	cmp	r3, #1
    514c:	d15b      	bne.n	5206 <_sercom_get_async_baud_val+0x196>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    514e:	1c3b      	adds	r3, r7, #0
    5150:	3367      	adds	r3, #103	; 0x67
    5152:	2200      	movs	r2, #0
    5154:	701a      	strb	r2, [r3, #0]
    5156:	e040      	b.n	51da <_sercom_get_async_baud_val+0x16a>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    5158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    515a:	1c1d      	adds	r5, r3, #0
    515c:	2300      	movs	r3, #0
    515e:	1c1e      	adds	r6, r3, #0
    5160:	0f6b      	lsrs	r3, r5, #29
    5162:	00f2      	lsls	r2, r6, #3
    5164:	4313      	orrs	r3, r2
    5166:	64fb      	str	r3, [r7, #76]	; 0x4c
    5168:	00eb      	lsls	r3, r5, #3
    516a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    516e:	60bb      	str	r3, [r7, #8]
    5170:	2300      	movs	r3, #0
    5172:	60fb      	str	r3, [r7, #12]
    5174:	1c3b      	adds	r3, r7, #0
    5176:	3388      	adds	r3, #136	; 0x88
    5178:	781b      	ldrb	r3, [r3, #0]
    517a:	b2db      	uxtb	r3, r3
    517c:	603b      	str	r3, [r7, #0]
    517e:	2300      	movs	r3, #0
    5180:	607b      	str	r3, [r7, #4]
    5182:	4c29      	ldr	r4, [pc, #164]	; (5228 <_sercom_get_async_baud_val+0x1b8>)
    5184:	68b8      	ldr	r0, [r7, #8]
    5186:	68f9      	ldr	r1, [r7, #12]
    5188:	683a      	ldr	r2, [r7, #0]
    518a:	687b      	ldr	r3, [r7, #4]
    518c:	47a0      	blx	r4
    518e:	1c03      	adds	r3, r0, #0
    5190:	1c0c      	adds	r4, r1, #0
    5192:	643b      	str	r3, [r7, #64]	; 0x40
    5194:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    5196:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    5198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    519c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    519e:	1c08      	adds	r0, r1, #0
    51a0:	1c11      	adds	r1, r2, #0
    51a2:	1c1a      	adds	r2, r3, #0
    51a4:	1c23      	adds	r3, r4, #0
    51a6:	4c21      	ldr	r4, [pc, #132]	; (522c <_sercom_get_async_baud_val+0x1bc>)
    51a8:	47a0      	blx	r4
    51aa:	1c03      	adds	r3, r0, #0
    51ac:	1c0c      	adds	r4, r1, #0
    51ae:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    51b0:	1c3b      	adds	r3, r7, #0
    51b2:	3367      	adds	r3, #103	; 0x67
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    51b8:	1ad3      	subs	r3, r2, r3
    51ba:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    51bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    51be:	08db      	lsrs	r3, r3, #3
    51c0:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    51c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    51c4:	4b1a      	ldr	r3, [pc, #104]	; (5230 <_sercom_get_async_baud_val+0x1c0>)
    51c6:	429a      	cmp	r2, r3
    51c8:	d800      	bhi.n	51cc <_sercom_get_async_baud_val+0x15c>
				break;
    51ca:	e00b      	b.n	51e4 <_sercom_get_async_baud_val+0x174>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    51cc:	1c3b      	adds	r3, r7, #0
    51ce:	3367      	adds	r3, #103	; 0x67
    51d0:	781a      	ldrb	r2, [r3, #0]
    51d2:	1c3b      	adds	r3, r7, #0
    51d4:	3367      	adds	r3, #103	; 0x67
    51d6:	3201      	adds	r2, #1
    51d8:	701a      	strb	r2, [r3, #0]
    51da:	1c3b      	adds	r3, r7, #0
    51dc:	3367      	adds	r3, #103	; 0x67
    51de:	781b      	ldrb	r3, [r3, #0]
    51e0:	2b07      	cmp	r3, #7
    51e2:	d9b9      	bls.n	5158 <_sercom_get_async_baud_val+0xe8>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    51e4:	1c3b      	adds	r3, r7, #0
    51e6:	3367      	adds	r3, #103	; 0x67
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	2b08      	cmp	r3, #8
    51ec:	d101      	bne.n	51f2 <_sercom_get_async_baud_val+0x182>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    51ee:	2340      	movs	r3, #64	; 0x40
    51f0:	e00f      	b.n	5212 <_sercom_get_async_baud_val+0x1a2>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    51f2:	1c3b      	adds	r3, r7, #0
    51f4:	3367      	adds	r3, #103	; 0x67
    51f6:	781b      	ldrb	r3, [r3, #0]
    51f8:	035b      	lsls	r3, r3, #13
    51fa:	1c1a      	adds	r2, r3, #0
    51fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    51fe:	4313      	orrs	r3, r2
    5200:	66bb      	str	r3, [r7, #104]	; 0x68
    5202:	2300      	movs	r3, #0
    5204:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    5206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    5208:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    520a:	b29a      	uxth	r2, r3
    520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    520e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    5210:	2300      	movs	r3, #0
}
    5212:	1c18      	adds	r0, r3, #0
    5214:	46bd      	mov	sp, r7
    5216:	b01d      	add	sp, #116	; 0x74
    5218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	46c0      	nop			; (mov r8, r8)
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	00000000 	.word	0x00000000
    5224:	00000001 	.word	0x00000001
    5228:	0000b295 	.word	0x0000b295
    522c:	00004f01 	.word	0x00004f01
    5230:	00001fff 	.word	0x00001fff
    5234:	46c0      	nop			; (mov r8, r8)
    5236:	46c0      	nop			; (mov r8, r8)

00005238 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5238:	b580      	push	{r7, lr}
    523a:	b084      	sub	sp, #16
    523c:	af00      	add	r7, sp, #0
    523e:	1c0a      	adds	r2, r1, #0
    5240:	1dfb      	adds	r3, r7, #7
    5242:	1c01      	adds	r1, r0, #0
    5244:	7019      	strb	r1, [r3, #0]
    5246:	1dbb      	adds	r3, r7, #6
    5248:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    524a:	4b1a      	ldr	r3, [pc, #104]	; (52b4 <sercom_set_gclk_generator+0x7c>)
    524c:	781b      	ldrb	r3, [r3, #0]
    524e:	2201      	movs	r2, #1
    5250:	4053      	eors	r3, r2
    5252:	b2db      	uxtb	r3, r3
    5254:	2b00      	cmp	r3, #0
    5256:	d103      	bne.n	5260 <sercom_set_gclk_generator+0x28>
    5258:	1dbb      	adds	r3, r7, #6
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	2b00      	cmp	r3, #0
    525e:	d01b      	beq.n	5298 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5260:	1c3b      	adds	r3, r7, #0
    5262:	330c      	adds	r3, #12
    5264:	1c18      	adds	r0, r3, #0
    5266:	4b14      	ldr	r3, [pc, #80]	; (52b8 <sercom_set_gclk_generator+0x80>)
    5268:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    526a:	1c3b      	adds	r3, r7, #0
    526c:	330c      	adds	r3, #12
    526e:	1dfa      	adds	r2, r7, #7
    5270:	7812      	ldrb	r2, [r2, #0]
    5272:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5274:	1c3b      	adds	r3, r7, #0
    5276:	330c      	adds	r3, #12
    5278:	2013      	movs	r0, #19
    527a:	1c19      	adds	r1, r3, #0
    527c:	4b0f      	ldr	r3, [pc, #60]	; (52bc <sercom_set_gclk_generator+0x84>)
    527e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5280:	2013      	movs	r0, #19
    5282:	4b0f      	ldr	r3, [pc, #60]	; (52c0 <sercom_set_gclk_generator+0x88>)
    5284:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    5286:	4b0b      	ldr	r3, [pc, #44]	; (52b4 <sercom_set_gclk_generator+0x7c>)
    5288:	1dfa      	adds	r2, r7, #7
    528a:	7812      	ldrb	r2, [r2, #0]
    528c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    528e:	4b09      	ldr	r3, [pc, #36]	; (52b4 <sercom_set_gclk_generator+0x7c>)
    5290:	2201      	movs	r2, #1
    5292:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    5294:	2300      	movs	r3, #0
    5296:	e008      	b.n	52aa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    5298:	4b06      	ldr	r3, [pc, #24]	; (52b4 <sercom_set_gclk_generator+0x7c>)
    529a:	785b      	ldrb	r3, [r3, #1]
    529c:	1dfa      	adds	r2, r7, #7
    529e:	7812      	ldrb	r2, [r2, #0]
    52a0:	429a      	cmp	r2, r3
    52a2:	d101      	bne.n	52a8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    52a4:	2300      	movs	r3, #0
    52a6:	e000      	b.n	52aa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    52a8:	231d      	movs	r3, #29
}
    52aa:	1c18      	adds	r0, r3, #0
    52ac:	46bd      	mov	sp, r7
    52ae:	b004      	add	sp, #16
    52b0:	bd80      	pop	{r7, pc}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	20006fac 	.word	0x20006fac
    52b8:	00004eed 	.word	0x00004eed
    52bc:	00006bdd 	.word	0x00006bdd
    52c0:	00006c1d 	.word	0x00006c1d

000052c4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    52c4:	b580      	push	{r7, lr}
    52c6:	b082      	sub	sp, #8
    52c8:	af00      	add	r7, sp, #0
    52ca:	6078      	str	r0, [r7, #4]
    52cc:	1c0a      	adds	r2, r1, #0
    52ce:	1cfb      	adds	r3, r7, #3
    52d0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	4a4d      	ldr	r2, [pc, #308]	; (540c <_sercom_get_default_pad+0x148>)
    52d6:	4293      	cmp	r3, r2
    52d8:	d03f      	beq.n	535a <_sercom_get_default_pad+0x96>
    52da:	4a4c      	ldr	r2, [pc, #304]	; (540c <_sercom_get_default_pad+0x148>)
    52dc:	4293      	cmp	r3, r2
    52de:	d806      	bhi.n	52ee <_sercom_get_default_pad+0x2a>
    52e0:	4a4b      	ldr	r2, [pc, #300]	; (5410 <_sercom_get_default_pad+0x14c>)
    52e2:	4293      	cmp	r3, r2
    52e4:	d00f      	beq.n	5306 <_sercom_get_default_pad+0x42>
    52e6:	4a4b      	ldr	r2, [pc, #300]	; (5414 <_sercom_get_default_pad+0x150>)
    52e8:	4293      	cmp	r3, r2
    52ea:	d021      	beq.n	5330 <_sercom_get_default_pad+0x6c>
    52ec:	e089      	b.n	5402 <_sercom_get_default_pad+0x13e>
    52ee:	4a4a      	ldr	r2, [pc, #296]	; (5418 <_sercom_get_default_pad+0x154>)
    52f0:	4293      	cmp	r3, r2
    52f2:	d100      	bne.n	52f6 <_sercom_get_default_pad+0x32>
    52f4:	e05b      	b.n	53ae <_sercom_get_default_pad+0xea>
    52f6:	4a49      	ldr	r2, [pc, #292]	; (541c <_sercom_get_default_pad+0x158>)
    52f8:	4293      	cmp	r3, r2
    52fa:	d100      	bne.n	52fe <_sercom_get_default_pad+0x3a>
    52fc:	e06c      	b.n	53d8 <_sercom_get_default_pad+0x114>
    52fe:	4a48      	ldr	r2, [pc, #288]	; (5420 <_sercom_get_default_pad+0x15c>)
    5300:	4293      	cmp	r3, r2
    5302:	d03f      	beq.n	5384 <_sercom_get_default_pad+0xc0>
    5304:	e07d      	b.n	5402 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5306:	1cfb      	adds	r3, r7, #3
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	2b01      	cmp	r3, #1
    530c:	d00a      	beq.n	5324 <_sercom_get_default_pad+0x60>
    530e:	dc02      	bgt.n	5316 <_sercom_get_default_pad+0x52>
    5310:	2b00      	cmp	r3, #0
    5312:	d005      	beq.n	5320 <_sercom_get_default_pad+0x5c>
    5314:	e075      	b.n	5402 <_sercom_get_default_pad+0x13e>
    5316:	2b02      	cmp	r3, #2
    5318:	d006      	beq.n	5328 <_sercom_get_default_pad+0x64>
    531a:	2b03      	cmp	r3, #3
    531c:	d006      	beq.n	532c <_sercom_get_default_pad+0x68>
    531e:	e070      	b.n	5402 <_sercom_get_default_pad+0x13e>
    5320:	4b40      	ldr	r3, [pc, #256]	; (5424 <_sercom_get_default_pad+0x160>)
    5322:	e06f      	b.n	5404 <_sercom_get_default_pad+0x140>
    5324:	4b40      	ldr	r3, [pc, #256]	; (5428 <_sercom_get_default_pad+0x164>)
    5326:	e06d      	b.n	5404 <_sercom_get_default_pad+0x140>
    5328:	4b40      	ldr	r3, [pc, #256]	; (542c <_sercom_get_default_pad+0x168>)
    532a:	e06b      	b.n	5404 <_sercom_get_default_pad+0x140>
    532c:	4b40      	ldr	r3, [pc, #256]	; (5430 <_sercom_get_default_pad+0x16c>)
    532e:	e069      	b.n	5404 <_sercom_get_default_pad+0x140>
    5330:	1cfb      	adds	r3, r7, #3
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	2b01      	cmp	r3, #1
    5336:	d00a      	beq.n	534e <_sercom_get_default_pad+0x8a>
    5338:	dc02      	bgt.n	5340 <_sercom_get_default_pad+0x7c>
    533a:	2b00      	cmp	r3, #0
    533c:	d005      	beq.n	534a <_sercom_get_default_pad+0x86>
    533e:	e060      	b.n	5402 <_sercom_get_default_pad+0x13e>
    5340:	2b02      	cmp	r3, #2
    5342:	d006      	beq.n	5352 <_sercom_get_default_pad+0x8e>
    5344:	2b03      	cmp	r3, #3
    5346:	d006      	beq.n	5356 <_sercom_get_default_pad+0x92>
    5348:	e05b      	b.n	5402 <_sercom_get_default_pad+0x13e>
    534a:	2303      	movs	r3, #3
    534c:	e05a      	b.n	5404 <_sercom_get_default_pad+0x140>
    534e:	4b39      	ldr	r3, [pc, #228]	; (5434 <_sercom_get_default_pad+0x170>)
    5350:	e058      	b.n	5404 <_sercom_get_default_pad+0x140>
    5352:	4b39      	ldr	r3, [pc, #228]	; (5438 <_sercom_get_default_pad+0x174>)
    5354:	e056      	b.n	5404 <_sercom_get_default_pad+0x140>
    5356:	4b39      	ldr	r3, [pc, #228]	; (543c <_sercom_get_default_pad+0x178>)
    5358:	e054      	b.n	5404 <_sercom_get_default_pad+0x140>
    535a:	1cfb      	adds	r3, r7, #3
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	2b01      	cmp	r3, #1
    5360:	d00a      	beq.n	5378 <_sercom_get_default_pad+0xb4>
    5362:	dc02      	bgt.n	536a <_sercom_get_default_pad+0xa6>
    5364:	2b00      	cmp	r3, #0
    5366:	d005      	beq.n	5374 <_sercom_get_default_pad+0xb0>
    5368:	e04b      	b.n	5402 <_sercom_get_default_pad+0x13e>
    536a:	2b02      	cmp	r3, #2
    536c:	d006      	beq.n	537c <_sercom_get_default_pad+0xb8>
    536e:	2b03      	cmp	r3, #3
    5370:	d006      	beq.n	5380 <_sercom_get_default_pad+0xbc>
    5372:	e046      	b.n	5402 <_sercom_get_default_pad+0x13e>
    5374:	4b32      	ldr	r3, [pc, #200]	; (5440 <_sercom_get_default_pad+0x17c>)
    5376:	e045      	b.n	5404 <_sercom_get_default_pad+0x140>
    5378:	4b32      	ldr	r3, [pc, #200]	; (5444 <_sercom_get_default_pad+0x180>)
    537a:	e043      	b.n	5404 <_sercom_get_default_pad+0x140>
    537c:	4b32      	ldr	r3, [pc, #200]	; (5448 <_sercom_get_default_pad+0x184>)
    537e:	e041      	b.n	5404 <_sercom_get_default_pad+0x140>
    5380:	4b32      	ldr	r3, [pc, #200]	; (544c <_sercom_get_default_pad+0x188>)
    5382:	e03f      	b.n	5404 <_sercom_get_default_pad+0x140>
    5384:	1cfb      	adds	r3, r7, #3
    5386:	781b      	ldrb	r3, [r3, #0]
    5388:	2b01      	cmp	r3, #1
    538a:	d00a      	beq.n	53a2 <_sercom_get_default_pad+0xde>
    538c:	dc02      	bgt.n	5394 <_sercom_get_default_pad+0xd0>
    538e:	2b00      	cmp	r3, #0
    5390:	d005      	beq.n	539e <_sercom_get_default_pad+0xda>
    5392:	e036      	b.n	5402 <_sercom_get_default_pad+0x13e>
    5394:	2b02      	cmp	r3, #2
    5396:	d006      	beq.n	53a6 <_sercom_get_default_pad+0xe2>
    5398:	2b03      	cmp	r3, #3
    539a:	d006      	beq.n	53aa <_sercom_get_default_pad+0xe6>
    539c:	e031      	b.n	5402 <_sercom_get_default_pad+0x13e>
    539e:	4b2c      	ldr	r3, [pc, #176]	; (5450 <_sercom_get_default_pad+0x18c>)
    53a0:	e030      	b.n	5404 <_sercom_get_default_pad+0x140>
    53a2:	4b2c      	ldr	r3, [pc, #176]	; (5454 <_sercom_get_default_pad+0x190>)
    53a4:	e02e      	b.n	5404 <_sercom_get_default_pad+0x140>
    53a6:	4b2c      	ldr	r3, [pc, #176]	; (5458 <_sercom_get_default_pad+0x194>)
    53a8:	e02c      	b.n	5404 <_sercom_get_default_pad+0x140>
    53aa:	4b2c      	ldr	r3, [pc, #176]	; (545c <_sercom_get_default_pad+0x198>)
    53ac:	e02a      	b.n	5404 <_sercom_get_default_pad+0x140>
    53ae:	1cfb      	adds	r3, r7, #3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	2b01      	cmp	r3, #1
    53b4:	d00a      	beq.n	53cc <_sercom_get_default_pad+0x108>
    53b6:	dc02      	bgt.n	53be <_sercom_get_default_pad+0xfa>
    53b8:	2b00      	cmp	r3, #0
    53ba:	d005      	beq.n	53c8 <_sercom_get_default_pad+0x104>
    53bc:	e021      	b.n	5402 <_sercom_get_default_pad+0x13e>
    53be:	2b02      	cmp	r3, #2
    53c0:	d006      	beq.n	53d0 <_sercom_get_default_pad+0x10c>
    53c2:	2b03      	cmp	r3, #3
    53c4:	d006      	beq.n	53d4 <_sercom_get_default_pad+0x110>
    53c6:	e01c      	b.n	5402 <_sercom_get_default_pad+0x13e>
    53c8:	4b25      	ldr	r3, [pc, #148]	; (5460 <_sercom_get_default_pad+0x19c>)
    53ca:	e01b      	b.n	5404 <_sercom_get_default_pad+0x140>
    53cc:	4b25      	ldr	r3, [pc, #148]	; (5464 <_sercom_get_default_pad+0x1a0>)
    53ce:	e019      	b.n	5404 <_sercom_get_default_pad+0x140>
    53d0:	4b25      	ldr	r3, [pc, #148]	; (5468 <_sercom_get_default_pad+0x1a4>)
    53d2:	e017      	b.n	5404 <_sercom_get_default_pad+0x140>
    53d4:	4b25      	ldr	r3, [pc, #148]	; (546c <_sercom_get_default_pad+0x1a8>)
    53d6:	e015      	b.n	5404 <_sercom_get_default_pad+0x140>
    53d8:	1cfb      	adds	r3, r7, #3
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	2b01      	cmp	r3, #1
    53de:	d00a      	beq.n	53f6 <_sercom_get_default_pad+0x132>
    53e0:	dc02      	bgt.n	53e8 <_sercom_get_default_pad+0x124>
    53e2:	2b00      	cmp	r3, #0
    53e4:	d005      	beq.n	53f2 <_sercom_get_default_pad+0x12e>
    53e6:	e00c      	b.n	5402 <_sercom_get_default_pad+0x13e>
    53e8:	2b02      	cmp	r3, #2
    53ea:	d006      	beq.n	53fa <_sercom_get_default_pad+0x136>
    53ec:	2b03      	cmp	r3, #3
    53ee:	d006      	beq.n	53fe <_sercom_get_default_pad+0x13a>
    53f0:	e007      	b.n	5402 <_sercom_get_default_pad+0x13e>
    53f2:	4b1f      	ldr	r3, [pc, #124]	; (5470 <_sercom_get_default_pad+0x1ac>)
    53f4:	e006      	b.n	5404 <_sercom_get_default_pad+0x140>
    53f6:	4b1f      	ldr	r3, [pc, #124]	; (5474 <_sercom_get_default_pad+0x1b0>)
    53f8:	e004      	b.n	5404 <_sercom_get_default_pad+0x140>
    53fa:	4b1f      	ldr	r3, [pc, #124]	; (5478 <_sercom_get_default_pad+0x1b4>)
    53fc:	e002      	b.n	5404 <_sercom_get_default_pad+0x140>
    53fe:	4b1f      	ldr	r3, [pc, #124]	; (547c <_sercom_get_default_pad+0x1b8>)
    5400:	e000      	b.n	5404 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    5402:	2300      	movs	r3, #0
}
    5404:	1c18      	adds	r0, r3, #0
    5406:	46bd      	mov	sp, r7
    5408:	b002      	add	sp, #8
    540a:	bd80      	pop	{r7, pc}
    540c:	42001000 	.word	0x42001000
    5410:	42000800 	.word	0x42000800
    5414:	42000c00 	.word	0x42000c00
    5418:	42001800 	.word	0x42001800
    541c:	42001c00 	.word	0x42001c00
    5420:	42001400 	.word	0x42001400
    5424:	00040003 	.word	0x00040003
    5428:	00050003 	.word	0x00050003
    542c:	00060003 	.word	0x00060003
    5430:	00070003 	.word	0x00070003
    5434:	00010003 	.word	0x00010003
    5438:	001e0003 	.word	0x001e0003
    543c:	001f0003 	.word	0x001f0003
    5440:	00080003 	.word	0x00080003
    5444:	00090003 	.word	0x00090003
    5448:	000a0003 	.word	0x000a0003
    544c:	000b0003 	.word	0x000b0003
    5450:	00100003 	.word	0x00100003
    5454:	00110003 	.word	0x00110003
    5458:	00120003 	.word	0x00120003
    545c:	00130003 	.word	0x00130003
    5460:	000c0003 	.word	0x000c0003
    5464:	000d0003 	.word	0x000d0003
    5468:	000e0003 	.word	0x000e0003
    546c:	000f0003 	.word	0x000f0003
    5470:	00160003 	.word	0x00160003
    5474:	00170003 	.word	0x00170003
    5478:	00180003 	.word	0x00180003
    547c:	00190003 	.word	0x00190003

00005480 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5480:	b590      	push	{r4, r7, lr}
    5482:	b08b      	sub	sp, #44	; 0x2c
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5488:	1c3b      	adds	r3, r7, #0
    548a:	330c      	adds	r3, #12
    548c:	4a0e      	ldr	r2, [pc, #56]	; (54c8 <_sercom_get_sercom_inst_index+0x48>)
    548e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5490:	c313      	stmia	r3!, {r0, r1, r4}
    5492:	ca13      	ldmia	r2!, {r0, r1, r4}
    5494:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5496:	2300      	movs	r3, #0
    5498:	627b      	str	r3, [r7, #36]	; 0x24
    549a:	e00d      	b.n	54b8 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    549c:	687a      	ldr	r2, [r7, #4]
    549e:	1c3b      	adds	r3, r7, #0
    54a0:	330c      	adds	r3, #12
    54a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    54a4:	0089      	lsls	r1, r1, #2
    54a6:	58cb      	ldr	r3, [r1, r3]
    54a8:	429a      	cmp	r2, r3
    54aa:	d102      	bne.n	54b2 <_sercom_get_sercom_inst_index+0x32>
			return i;
    54ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ae:	b2db      	uxtb	r3, r3
    54b0:	e006      	b.n	54c0 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    54b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54b4:	3301      	adds	r3, #1
    54b6:	627b      	str	r3, [r7, #36]	; 0x24
    54b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ba:	2b05      	cmp	r3, #5
    54bc:	d9ee      	bls.n	549c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    54be:	2300      	movs	r3, #0
}
    54c0:	1c18      	adds	r0, r3, #0
    54c2:	46bd      	mov	sp, r7
    54c4:	b00b      	add	sp, #44	; 0x2c
    54c6:	bd90      	pop	{r4, r7, pc}
    54c8:	0000b528 	.word	0x0000b528

000054cc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b082      	sub	sp, #8
    54d0:	af00      	add	r7, sp, #0
    54d2:	1c02      	adds	r2, r0, #0
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    54d8:	46bd      	mov	sp, r7
    54da:	b002      	add	sp, #8
    54dc:	bd80      	pop	{r7, pc}
    54de:	46c0      	nop			; (mov r8, r8)

000054e0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    54e0:	b580      	push	{r7, lr}
    54e2:	b084      	sub	sp, #16
    54e4:	af00      	add	r7, sp, #0
    54e6:	1c02      	adds	r2, r0, #0
    54e8:	6039      	str	r1, [r7, #0]
    54ea:	1dfb      	adds	r3, r7, #7
    54ec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    54ee:	4b13      	ldr	r3, [pc, #76]	; (553c <_sercom_set_handler+0x5c>)
    54f0:	781b      	ldrb	r3, [r3, #0]
    54f2:	2201      	movs	r2, #1
    54f4:	4053      	eors	r3, r2
    54f6:	b2db      	uxtb	r3, r3
    54f8:	2b00      	cmp	r3, #0
    54fa:	d015      	beq.n	5528 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    54fc:	2300      	movs	r3, #0
    54fe:	60fb      	str	r3, [r7, #12]
    5500:	e00c      	b.n	551c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5502:	4b0f      	ldr	r3, [pc, #60]	; (5540 <_sercom_set_handler+0x60>)
    5504:	68fa      	ldr	r2, [r7, #12]
    5506:	0092      	lsls	r2, r2, #2
    5508:	490e      	ldr	r1, [pc, #56]	; (5544 <_sercom_set_handler+0x64>)
    550a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    550c:	4b0e      	ldr	r3, [pc, #56]	; (5548 <_sercom_set_handler+0x68>)
    550e:	68fa      	ldr	r2, [r7, #12]
    5510:	0092      	lsls	r2, r2, #2
    5512:	2100      	movs	r1, #0
    5514:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5516:	68fb      	ldr	r3, [r7, #12]
    5518:	3301      	adds	r3, #1
    551a:	60fb      	str	r3, [r7, #12]
    551c:	68fb      	ldr	r3, [r7, #12]
    551e:	2b05      	cmp	r3, #5
    5520:	d9ef      	bls.n	5502 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    5522:	4b06      	ldr	r3, [pc, #24]	; (553c <_sercom_set_handler+0x5c>)
    5524:	2201      	movs	r2, #1
    5526:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5528:	1dfb      	adds	r3, r7, #7
    552a:	781a      	ldrb	r2, [r3, #0]
    552c:	4b04      	ldr	r3, [pc, #16]	; (5540 <_sercom_set_handler+0x60>)
    552e:	0092      	lsls	r2, r2, #2
    5530:	6839      	ldr	r1, [r7, #0]
    5532:	50d1      	str	r1, [r2, r3]
}
    5534:	46bd      	mov	sp, r7
    5536:	b004      	add	sp, #16
    5538:	bd80      	pop	{r7, pc}
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	20006fb0 	.word	0x20006fb0
    5540:	20006fb4 	.word	0x20006fb4
    5544:	000054cd 	.word	0x000054cd
    5548:	20007178 	.word	0x20007178

0000554c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    554c:	b590      	push	{r4, r7, lr}
    554e:	b085      	sub	sp, #20
    5550:	af00      	add	r7, sp, #0
    5552:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5554:	1c3a      	adds	r2, r7, #0
    5556:	3208      	adds	r2, #8
    5558:	4b0e      	ldr	r3, [pc, #56]	; (5594 <_sercom_get_interrupt_vector+0x48>)
    555a:	1c11      	adds	r1, r2, #0
    555c:	1c1a      	adds	r2, r3, #0
    555e:	2306      	movs	r3, #6
    5560:	1c08      	adds	r0, r1, #0
    5562:	1c11      	adds	r1, r2, #0
    5564:	1c1a      	adds	r2, r3, #0
    5566:	4b0c      	ldr	r3, [pc, #48]	; (5598 <_sercom_get_interrupt_vector+0x4c>)
    5568:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    556a:	1c3c      	adds	r4, r7, #0
    556c:	340f      	adds	r4, #15
    556e:	687b      	ldr	r3, [r7, #4]
    5570:	1c18      	adds	r0, r3, #0
    5572:	4b0a      	ldr	r3, [pc, #40]	; (559c <_sercom_get_interrupt_vector+0x50>)
    5574:	4798      	blx	r3
    5576:	1c03      	adds	r3, r0, #0
    5578:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    557a:	1c3b      	adds	r3, r7, #0
    557c:	330f      	adds	r3, #15
    557e:	781b      	ldrb	r3, [r3, #0]
    5580:	1c3a      	adds	r2, r7, #0
    5582:	3208      	adds	r2, #8
    5584:	5cd3      	ldrb	r3, [r2, r3]
    5586:	b2db      	uxtb	r3, r3
    5588:	b25b      	sxtb	r3, r3
}
    558a:	1c18      	adds	r0, r3, #0
    558c:	46bd      	mov	sp, r7
    558e:	b005      	add	sp, #20
    5590:	bd90      	pop	{r4, r7, pc}
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	0000b540 	.word	0x0000b540
    5598:	0000b325 	.word	0x0000b325
    559c:	00005481 	.word	0x00005481

000055a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    55a0:	b580      	push	{r7, lr}
    55a2:	af00      	add	r7, sp, #0
    55a4:	4b02      	ldr	r3, [pc, #8]	; (55b0 <SERCOM0_Handler+0x10>)
    55a6:	681b      	ldr	r3, [r3, #0]
    55a8:	2000      	movs	r0, #0
    55aa:	4798      	blx	r3
    55ac:	46bd      	mov	sp, r7
    55ae:	bd80      	pop	{r7, pc}
    55b0:	20006fb4 	.word	0x20006fb4

000055b4 <SERCOM1_Handler>:
    55b4:	b580      	push	{r7, lr}
    55b6:	af00      	add	r7, sp, #0
    55b8:	4b02      	ldr	r3, [pc, #8]	; (55c4 <SERCOM1_Handler+0x10>)
    55ba:	685b      	ldr	r3, [r3, #4]
    55bc:	2001      	movs	r0, #1
    55be:	4798      	blx	r3
    55c0:	46bd      	mov	sp, r7
    55c2:	bd80      	pop	{r7, pc}
    55c4:	20006fb4 	.word	0x20006fb4

000055c8 <SERCOM2_Handler>:
    55c8:	b580      	push	{r7, lr}
    55ca:	af00      	add	r7, sp, #0
    55cc:	4b02      	ldr	r3, [pc, #8]	; (55d8 <SERCOM2_Handler+0x10>)
    55ce:	689b      	ldr	r3, [r3, #8]
    55d0:	2002      	movs	r0, #2
    55d2:	4798      	blx	r3
    55d4:	46bd      	mov	sp, r7
    55d6:	bd80      	pop	{r7, pc}
    55d8:	20006fb4 	.word	0x20006fb4

000055dc <SERCOM3_Handler>:
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
    55e0:	4b02      	ldr	r3, [pc, #8]	; (55ec <SERCOM3_Handler+0x10>)
    55e2:	68db      	ldr	r3, [r3, #12]
    55e4:	2003      	movs	r0, #3
    55e6:	4798      	blx	r3
    55e8:	46bd      	mov	sp, r7
    55ea:	bd80      	pop	{r7, pc}
    55ec:	20006fb4 	.word	0x20006fb4

000055f0 <SERCOM4_Handler>:
    55f0:	b580      	push	{r7, lr}
    55f2:	af00      	add	r7, sp, #0
    55f4:	4b02      	ldr	r3, [pc, #8]	; (5600 <SERCOM4_Handler+0x10>)
    55f6:	691b      	ldr	r3, [r3, #16]
    55f8:	2004      	movs	r0, #4
    55fa:	4798      	blx	r3
    55fc:	46bd      	mov	sp, r7
    55fe:	bd80      	pop	{r7, pc}
    5600:	20006fb4 	.word	0x20006fb4

00005604 <SERCOM5_Handler>:
    5604:	b580      	push	{r7, lr}
    5606:	af00      	add	r7, sp, #0
    5608:	4b02      	ldr	r3, [pc, #8]	; (5614 <SERCOM5_Handler+0x10>)
    560a:	695b      	ldr	r3, [r3, #20]
    560c:	2005      	movs	r0, #5
    560e:	4798      	blx	r3
    5610:	46bd      	mov	sp, r7
    5612:	bd80      	pop	{r7, pc}
    5614:	20006fb4 	.word	0x20006fb4

00005618 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5618:	b580      	push	{r7, lr}
    561a:	b082      	sub	sp, #8
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	2200      	movs	r2, #0
    5624:	701a      	strb	r2, [r3, #0]
}
    5626:	46bd      	mov	sp, r7
    5628:	b002      	add	sp, #8
    562a:	bd80      	pop	{r7, pc}

0000562c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	1c02      	adds	r2, r0, #0
    5634:	6039      	str	r1, [r7, #0]
    5636:	1dfb      	adds	r3, r7, #7
    5638:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    563a:	1dfb      	adds	r3, r7, #7
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b01      	cmp	r3, #1
    5640:	d00a      	beq.n	5658 <system_apb_clock_set_mask+0x2c>
    5642:	2b02      	cmp	r3, #2
    5644:	d00f      	beq.n	5666 <system_apb_clock_set_mask+0x3a>
    5646:	2b00      	cmp	r3, #0
    5648:	d114      	bne.n	5674 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    564a:	4b0e      	ldr	r3, [pc, #56]	; (5684 <system_apb_clock_set_mask+0x58>)
    564c:	4a0d      	ldr	r2, [pc, #52]	; (5684 <system_apb_clock_set_mask+0x58>)
    564e:	6991      	ldr	r1, [r2, #24]
    5650:	683a      	ldr	r2, [r7, #0]
    5652:	430a      	orrs	r2, r1
    5654:	619a      	str	r2, [r3, #24]
			break;
    5656:	e00f      	b.n	5678 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5658:	4b0a      	ldr	r3, [pc, #40]	; (5684 <system_apb_clock_set_mask+0x58>)
    565a:	4a0a      	ldr	r2, [pc, #40]	; (5684 <system_apb_clock_set_mask+0x58>)
    565c:	69d1      	ldr	r1, [r2, #28]
    565e:	683a      	ldr	r2, [r7, #0]
    5660:	430a      	orrs	r2, r1
    5662:	61da      	str	r2, [r3, #28]
			break;
    5664:	e008      	b.n	5678 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5666:	4b07      	ldr	r3, [pc, #28]	; (5684 <system_apb_clock_set_mask+0x58>)
    5668:	4a06      	ldr	r2, [pc, #24]	; (5684 <system_apb_clock_set_mask+0x58>)
    566a:	6a11      	ldr	r1, [r2, #32]
    566c:	683a      	ldr	r2, [r7, #0]
    566e:	430a      	orrs	r2, r1
    5670:	621a      	str	r2, [r3, #32]
			break;
    5672:	e001      	b.n	5678 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5674:	2317      	movs	r3, #23
    5676:	e000      	b.n	567a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5678:	2300      	movs	r3, #0
}
    567a:	1c18      	adds	r0, r3, #0
    567c:	46bd      	mov	sp, r7
    567e:	b002      	add	sp, #8
    5680:	bd80      	pop	{r7, pc}
    5682:	46c0      	nop			; (mov r8, r8)
    5684:	40000400 	.word	0x40000400

00005688 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5688:	b580      	push	{r7, lr}
    568a:	b082      	sub	sp, #8
    568c:	af00      	add	r7, sp, #0
    568e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	2280      	movs	r2, #128	; 0x80
    5694:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	2200      	movs	r2, #0
    569a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    569c:	687b      	ldr	r3, [r7, #4]
    569e:	2201      	movs	r2, #1
    56a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	2200      	movs	r2, #0
    56a6:	70da      	strb	r2, [r3, #3]
}
    56a8:	46bd      	mov	sp, r7
    56aa:	b002      	add	sp, #8
    56ac:	bd80      	pop	{r7, pc}
    56ae:	46c0      	nop			; (mov r8, r8)

000056b0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    56b0:	b580      	push	{r7, lr}
    56b2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    56b4:	4b05      	ldr	r3, [pc, #20]	; (56cc <system_is_debugger_present+0x1c>)
    56b6:	789b      	ldrb	r3, [r3, #2]
    56b8:	b2db      	uxtb	r3, r3
    56ba:	1c1a      	adds	r2, r3, #0
    56bc:	2302      	movs	r3, #2
    56be:	4013      	ands	r3, r2
    56c0:	1e5a      	subs	r2, r3, #1
    56c2:	4193      	sbcs	r3, r2
    56c4:	b2db      	uxtb	r3, r3
}
    56c6:	1c18      	adds	r0, r3, #0
    56c8:	46bd      	mov	sp, r7
    56ca:	bd80      	pop	{r7, pc}
    56cc:	41002000 	.word	0x41002000

000056d0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    56d0:	b580      	push	{r7, lr}
    56d2:	b084      	sub	sp, #16
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    56de:	68fb      	ldr	r3, [r7, #12]
    56e0:	69db      	ldr	r3, [r3, #28]
    56e2:	1e5a      	subs	r2, r3, #1
    56e4:	4193      	sbcs	r3, r2
    56e6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    56e8:	1c18      	adds	r0, r3, #0
    56ea:	46bd      	mov	sp, r7
    56ec:	b004      	add	sp, #16
    56ee:	bd80      	pop	{r7, pc}

000056f0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	b082      	sub	sp, #8
    56f4:	af00      	add	r7, sp, #0
    56f6:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	1c18      	adds	r0, r3, #0
    56fe:	4b04      	ldr	r3, [pc, #16]	; (5710 <_usart_wait_for_sync+0x20>)
    5700:	4798      	blx	r3
    5702:	1c03      	adds	r3, r0, #0
    5704:	2b00      	cmp	r3, #0
    5706:	d1f8      	bne.n	56fa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5708:	46bd      	mov	sp, r7
    570a:	b002      	add	sp, #8
    570c:	bd80      	pop	{r7, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	000056d1 	.word	0x000056d1

00005714 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5714:	b5b0      	push	{r4, r5, r7, lr}
    5716:	b08c      	sub	sp, #48	; 0x30
    5718:	af02      	add	r7, sp, #8
    571a:	6078      	str	r0, [r7, #4]
    571c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	1c18      	adds	r0, r3, #0
    572a:	4bad      	ldr	r3, [pc, #692]	; (59e0 <_usart_set_config+0x2cc>)
    572c:	4798      	blx	r3
    572e:	1c03      	adds	r3, r0, #0
    5730:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5732:	697b      	ldr	r3, [r7, #20]
    5734:	3314      	adds	r3, #20
    5736:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5738:	2300      	movs	r3, #0
    573a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    573c:	2300      	movs	r3, #0
    573e:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    5740:	1c3b      	adds	r3, r7, #0
    5742:	330e      	adds	r3, #14
    5744:	2200      	movs	r2, #0
    5746:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5748:	1c3b      	adds	r3, r7, #0
    574a:	331f      	adds	r3, #31
    574c:	2200      	movs	r2, #0
    574e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5750:	1c3b      	adds	r3, r7, #0
    5752:	331e      	adds	r3, #30
    5754:	2210      	movs	r2, #16
    5756:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5758:	683b      	ldr	r3, [r7, #0]
    575a:	8a1b      	ldrh	r3, [r3, #16]
    575c:	2280      	movs	r2, #128	; 0x80
    575e:	01d2      	lsls	r2, r2, #7
    5760:	4293      	cmp	r3, r2
    5762:	d01c      	beq.n	579e <_usart_set_config+0x8a>
    5764:	2280      	movs	r2, #128	; 0x80
    5766:	01d2      	lsls	r2, r2, #7
    5768:	4293      	cmp	r3, r2
    576a:	dc06      	bgt.n	577a <_usart_set_config+0x66>
    576c:	2b00      	cmp	r3, #0
    576e:	d00d      	beq.n	578c <_usart_set_config+0x78>
    5770:	2280      	movs	r2, #128	; 0x80
    5772:	0192      	lsls	r2, r2, #6
    5774:	4293      	cmp	r3, r2
    5776:	d024      	beq.n	57c2 <_usart_set_config+0xae>
    5778:	e035      	b.n	57e6 <_usart_set_config+0xd2>
    577a:	22c0      	movs	r2, #192	; 0xc0
    577c:	01d2      	lsls	r2, r2, #7
    577e:	4293      	cmp	r3, r2
    5780:	d028      	beq.n	57d4 <_usart_set_config+0xc0>
    5782:	2280      	movs	r2, #128	; 0x80
    5784:	0212      	lsls	r2, r2, #8
    5786:	4293      	cmp	r3, r2
    5788:	d012      	beq.n	57b0 <_usart_set_config+0x9c>
    578a:	e02c      	b.n	57e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    578c:	1c3b      	adds	r3, r7, #0
    578e:	331f      	adds	r3, #31
    5790:	2200      	movs	r2, #0
    5792:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5794:	1c3b      	adds	r3, r7, #0
    5796:	331e      	adds	r3, #30
    5798:	2210      	movs	r2, #16
    579a:	701a      	strb	r2, [r3, #0]
			break;
    579c:	e023      	b.n	57e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    579e:	1c3b      	adds	r3, r7, #0
    57a0:	331f      	adds	r3, #31
    57a2:	2200      	movs	r2, #0
    57a4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    57a6:	1c3b      	adds	r3, r7, #0
    57a8:	331e      	adds	r3, #30
    57aa:	2208      	movs	r2, #8
    57ac:	701a      	strb	r2, [r3, #0]
			break;
    57ae:	e01a      	b.n	57e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    57b0:	1c3b      	adds	r3, r7, #0
    57b2:	331f      	adds	r3, #31
    57b4:	2200      	movs	r2, #0
    57b6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    57b8:	1c3b      	adds	r3, r7, #0
    57ba:	331e      	adds	r3, #30
    57bc:	2203      	movs	r2, #3
    57be:	701a      	strb	r2, [r3, #0]
			break;
    57c0:	e011      	b.n	57e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    57c2:	1c3b      	adds	r3, r7, #0
    57c4:	331f      	adds	r3, #31
    57c6:	2201      	movs	r2, #1
    57c8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    57ca:	1c3b      	adds	r3, r7, #0
    57cc:	331e      	adds	r3, #30
    57ce:	2210      	movs	r2, #16
    57d0:	701a      	strb	r2, [r3, #0]
			break;
    57d2:	e008      	b.n	57e6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    57d4:	1c3b      	adds	r3, r7, #0
    57d6:	331f      	adds	r3, #31
    57d8:	2201      	movs	r2, #1
    57da:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    57dc:	1c3b      	adds	r3, r7, #0
    57de:	331e      	adds	r3, #30
    57e0:	2208      	movs	r2, #8
    57e2:	701a      	strb	r2, [r3, #0]
			break;
    57e4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    57e6:	683b      	ldr	r3, [r7, #0]
    57e8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    57ea:	683b      	ldr	r3, [r7, #0]
    57ec:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    57ee:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    57f0:	683b      	ldr	r3, [r7, #0]
    57f2:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    57f4:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    57f6:	683b      	ldr	r3, [r7, #0]
    57f8:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    57fa:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    57fc:	683b      	ldr	r3, [r7, #0]
    57fe:	7e1b      	ldrb	r3, [r3, #24]
    5800:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    5802:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5804:	6839      	ldr	r1, [r7, #0]
    5806:	2326      	movs	r3, #38	; 0x26
    5808:	5ccb      	ldrb	r3, [r1, r3]
    580a:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    580c:	4313      	orrs	r3, r2
    580e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    5810:	1c3b      	adds	r3, r7, #0
    5812:	331d      	adds	r3, #29
    5814:	2200      	movs	r2, #0
    5816:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    5818:	683b      	ldr	r3, [r7, #0]
    581a:	685b      	ldr	r3, [r3, #4]
    581c:	2b00      	cmp	r3, #0
    581e:	d020      	beq.n	5862 <_usart_set_config+0x14e>
    5820:	2280      	movs	r2, #128	; 0x80
    5822:	0552      	lsls	r2, r2, #21
    5824:	4293      	cmp	r3, r2
    5826:	d14e      	bne.n	58c6 <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5828:	683a      	ldr	r2, [r7, #0]
    582a:	2327      	movs	r3, #39	; 0x27
    582c:	5cd3      	ldrb	r3, [r2, r3]
    582e:	2201      	movs	r2, #1
    5830:	4053      	eors	r3, r2
    5832:	b2db      	uxtb	r3, r3
    5834:	2b00      	cmp	r3, #0
    5836:	d013      	beq.n	5860 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5838:	683b      	ldr	r3, [r7, #0]
    583a:	6a1d      	ldr	r5, [r3, #32]
    583c:	693b      	ldr	r3, [r7, #16]
    583e:	b2db      	uxtb	r3, r3
    5840:	1c18      	adds	r0, r3, #0
    5842:	4b68      	ldr	r3, [pc, #416]	; (59e4 <_usart_set_config+0x2d0>)
    5844:	4798      	blx	r3
    5846:	1c02      	adds	r2, r0, #0
    5848:	1c3c      	adds	r4, r7, #0
    584a:	341d      	adds	r4, #29
    584c:	1c3b      	adds	r3, r7, #0
    584e:	330e      	adds	r3, #14
    5850:	1c28      	adds	r0, r5, #0
    5852:	1c11      	adds	r1, r2, #0
    5854:	1c1a      	adds	r2, r3, #0
    5856:	4b64      	ldr	r3, [pc, #400]	; (59e8 <_usart_set_config+0x2d4>)
    5858:	4798      	blx	r3
    585a:	1c03      	adds	r3, r0, #0
    585c:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    585e:	e032      	b.n	58c6 <_usart_set_config+0x1b2>
    5860:	e031      	b.n	58c6 <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5862:	683a      	ldr	r2, [r7, #0]
    5864:	2327      	movs	r3, #39	; 0x27
    5866:	5cd3      	ldrb	r3, [r2, r3]
    5868:	2b00      	cmp	r3, #0
    586a:	d013      	beq.n	5894 <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    586c:	683b      	ldr	r3, [r7, #0]
    586e:	6a18      	ldr	r0, [r3, #32]
    5870:	683b      	ldr	r3, [r7, #0]
    5872:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    5874:	1c3c      	adds	r4, r7, #0
    5876:	341d      	adds	r4, #29
    5878:	1c3a      	adds	r2, r7, #0
    587a:	320e      	adds	r2, #14
    587c:	1c3b      	adds	r3, r7, #0
    587e:	331f      	adds	r3, #31
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	1c3d      	adds	r5, r7, #0
    5884:	351e      	adds	r5, #30
    5886:	782d      	ldrb	r5, [r5, #0]
    5888:	9500      	str	r5, [sp, #0]
    588a:	4d58      	ldr	r5, [pc, #352]	; (59ec <_usart_set_config+0x2d8>)
    588c:	47a8      	blx	r5
    588e:	1c03      	adds	r3, r0, #0
    5890:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5892:	e017      	b.n	58c4 <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5894:	683b      	ldr	r3, [r7, #0]
    5896:	6a1d      	ldr	r5, [r3, #32]
    5898:	693b      	ldr	r3, [r7, #16]
    589a:	b2db      	uxtb	r3, r3
    589c:	1c18      	adds	r0, r3, #0
    589e:	4b51      	ldr	r3, [pc, #324]	; (59e4 <_usart_set_config+0x2d0>)
    58a0:	4798      	blx	r3
    58a2:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    58a4:	1c3c      	adds	r4, r7, #0
    58a6:	341d      	adds	r4, #29
    58a8:	1c3a      	adds	r2, r7, #0
    58aa:	320e      	adds	r2, #14
    58ac:	1c3b      	adds	r3, r7, #0
    58ae:	331f      	adds	r3, #31
    58b0:	781b      	ldrb	r3, [r3, #0]
    58b2:	1c38      	adds	r0, r7, #0
    58b4:	301e      	adds	r0, #30
    58b6:	7800      	ldrb	r0, [r0, #0]
    58b8:	9000      	str	r0, [sp, #0]
    58ba:	1c28      	adds	r0, r5, #0
    58bc:	4d4b      	ldr	r5, [pc, #300]	; (59ec <_usart_set_config+0x2d8>)
    58be:	47a8      	blx	r5
    58c0:	1c03      	adds	r3, r0, #0
    58c2:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    58c4:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    58c6:	1c3b      	adds	r3, r7, #0
    58c8:	331d      	adds	r3, #29
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	2b00      	cmp	r3, #0
    58ce:	d003      	beq.n	58d8 <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    58d0:	1c3b      	adds	r3, r7, #0
    58d2:	331d      	adds	r3, #29
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	e07e      	b.n	59d6 <_usart_set_config+0x2c2>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    58d8:	683b      	ldr	r3, [r7, #0]
    58da:	7e5b      	ldrb	r3, [r3, #25]
    58dc:	2b00      	cmp	r3, #0
    58de:	d003      	beq.n	58e8 <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    58e0:	683b      	ldr	r3, [r7, #0]
    58e2:	7e9a      	ldrb	r2, [r3, #26]
    58e4:	69bb      	ldr	r3, [r7, #24]
    58e6:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	1c18      	adds	r0, r3, #0
    58ec:	4b40      	ldr	r3, [pc, #256]	; (59f0 <_usart_set_config+0x2dc>)
    58ee:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    58f0:	1c3b      	adds	r3, r7, #0
    58f2:	330e      	adds	r3, #14
    58f4:	881a      	ldrh	r2, [r3, #0]
    58f6:	69bb      	ldr	r3, [r7, #24]
    58f8:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	685b      	ldr	r3, [r3, #4]
    58fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5900:	4313      	orrs	r3, r2
    5902:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5904:	683a      	ldr	r2, [r7, #0]
    5906:	2327      	movs	r3, #39	; 0x27
    5908:	5cd3      	ldrb	r3, [r2, r3]
    590a:	2201      	movs	r2, #1
    590c:	4053      	eors	r3, r2
    590e:	b2db      	uxtb	r3, r3
    5910:	2b00      	cmp	r3, #0
    5912:	d003      	beq.n	591c <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5916:	2204      	movs	r2, #4
    5918:	4313      	orrs	r3, r2
    591a:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    591c:	683b      	ldr	r3, [r7, #0]
    591e:	7a9a      	ldrb	r2, [r3, #10]
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	7adb      	ldrb	r3, [r3, #11]
    5924:	4313      	orrs	r3, r2
    5926:	b2db      	uxtb	r3, r3
    5928:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	7e5b      	ldrb	r3, [r3, #25]
    592e:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5930:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5932:	683b      	ldr	r3, [r7, #0]
    5934:	7f1b      	ldrb	r3, [r3, #28]
    5936:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5938:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    593a:	683b      	ldr	r3, [r7, #0]
    593c:	7f5b      	ldrb	r3, [r3, #29]
    593e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5940:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5942:	6839      	ldr	r1, [r7, #0]
    5944:	2324      	movs	r3, #36	; 0x24
    5946:	5ccb      	ldrb	r3, [r1, r3]
    5948:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    594a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    594c:	6839      	ldr	r1, [r7, #0]
    594e:	2325      	movs	r3, #37	; 0x25
    5950:	5ccb      	ldrb	r3, [r1, r3]
    5952:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5954:	4313      	orrs	r3, r2
    5956:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5958:	683b      	ldr	r3, [r7, #0]
    595a:	891b      	ldrh	r3, [r3, #8]
    595c:	2bff      	cmp	r3, #255	; 0xff
    595e:	d014      	beq.n	598a <_usart_set_config+0x276>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5960:	683b      	ldr	r3, [r7, #0]
    5962:	7edb      	ldrb	r3, [r3, #27]
    5964:	2b00      	cmp	r3, #0
    5966:	d005      	beq.n	5974 <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    5968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    596a:	22a0      	movs	r2, #160	; 0xa0
    596c:	04d2      	lsls	r2, r2, #19
    596e:	4313      	orrs	r3, r2
    5970:	627b      	str	r3, [r7, #36]	; 0x24
    5972:	e004      	b.n	597e <_usart_set_config+0x26a>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5976:	2280      	movs	r2, #128	; 0x80
    5978:	0452      	lsls	r2, r2, #17
    597a:	4313      	orrs	r3, r2
    597c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	891b      	ldrh	r3, [r3, #8]
    5982:	6a3a      	ldr	r2, [r7, #32]
    5984:	4313      	orrs	r3, r2
    5986:	623b      	str	r3, [r7, #32]
    5988:	e008      	b.n	599c <_usart_set_config+0x288>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    598a:	683b      	ldr	r3, [r7, #0]
    598c:	7edb      	ldrb	r3, [r3, #27]
    598e:	2b00      	cmp	r3, #0
    5990:	d004      	beq.n	599c <_usart_set_config+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5994:	2280      	movs	r2, #128	; 0x80
    5996:	04d2      	lsls	r2, r2, #19
    5998:	4313      	orrs	r3, r2
    599a:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    599c:	683a      	ldr	r2, [r7, #0]
    599e:	232c      	movs	r3, #44	; 0x2c
    59a0:	5cd3      	ldrb	r3, [r2, r3]
    59a2:	2b00      	cmp	r3, #0
    59a4:	d104      	bne.n	59b0 <_usart_set_config+0x29c>
    59a6:	4b13      	ldr	r3, [pc, #76]	; (59f4 <_usart_set_config+0x2e0>)
    59a8:	4798      	blx	r3
    59aa:	1c03      	adds	r3, r0, #0
    59ac:	2b00      	cmp	r3, #0
    59ae:	d003      	beq.n	59b8 <_usart_set_config+0x2a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    59b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59b2:	2280      	movs	r2, #128	; 0x80
    59b4:	4313      	orrs	r3, r2
    59b6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	1c18      	adds	r0, r3, #0
    59bc:	4b0c      	ldr	r3, [pc, #48]	; (59f0 <_usart_set_config+0x2dc>)
    59be:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    59c0:	69bb      	ldr	r3, [r7, #24]
    59c2:	6a3a      	ldr	r2, [r7, #32]
    59c4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    59c6:	687b      	ldr	r3, [r7, #4]
    59c8:	1c18      	adds	r0, r3, #0
    59ca:	4b09      	ldr	r3, [pc, #36]	; (59f0 <_usart_set_config+0x2dc>)
    59cc:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    59ce:	69bb      	ldr	r3, [r7, #24]
    59d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    59d2:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    59d4:	2300      	movs	r3, #0
}
    59d6:	1c18      	adds	r0, r3, #0
    59d8:	46bd      	mov	sp, r7
    59da:	b00a      	add	sp, #40	; 0x28
    59dc:	bdb0      	pop	{r4, r5, r7, pc}
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	00005481 	.word	0x00005481
    59e4:	00006cf9 	.word	0x00006cf9
    59e8:	00004ff1 	.word	0x00004ff1
    59ec:	00005071 	.word	0x00005071
    59f0:	000056f1 	.word	0x000056f1
    59f4:	000056b1 	.word	0x000056b1

000059f8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    59f8:	b590      	push	{r4, r7, lr}
    59fa:	b093      	sub	sp, #76	; 0x4c
    59fc:	af00      	add	r7, sp, #0
    59fe:	60f8      	str	r0, [r7, #12]
    5a00:	60b9      	str	r1, [r7, #8]
    5a02:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5a04:	1c3b      	adds	r3, r7, #0
    5a06:	333b      	adds	r3, #59	; 0x3b
    5a08:	2200      	movs	r2, #0
    5a0a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5a0c:	68fb      	ldr	r3, [r7, #12]
    5a0e:	68ba      	ldr	r2, [r7, #8]
    5a10:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a12:	68fb      	ldr	r3, [r7, #12]
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5a18:	68fb      	ldr	r3, [r7, #12]
    5a1a:	681b      	ldr	r3, [r3, #0]
    5a1c:	1c18      	adds	r0, r3, #0
    5a1e:	4b86      	ldr	r3, [pc, #536]	; (5c38 <usart_init+0x240>)
    5a20:	4798      	blx	r3
    5a22:	1c03      	adds	r3, r0, #0
    5a24:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5a28:	3302      	adds	r3, #2
    5a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5a2e:	3314      	adds	r3, #20
    5a30:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a34:	681a      	ldr	r2, [r3, #0]
    5a36:	2301      	movs	r3, #1
    5a38:	4013      	ands	r3, r2
    5a3a:	d001      	beq.n	5a40 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5a3c:	2305      	movs	r3, #5
    5a3e:	e0f6      	b.n	5c2e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a42:	681a      	ldr	r2, [r3, #0]
    5a44:	2302      	movs	r3, #2
    5a46:	4013      	ands	r3, r2
    5a48:	d001      	beq.n	5a4e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5a4a:	231c      	movs	r3, #28
    5a4c:	e0ef      	b.n	5c2e <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5a50:	2201      	movs	r2, #1
    5a52:	1c11      	adds	r1, r2, #0
    5a54:	4099      	lsls	r1, r3
    5a56:	1c0b      	adds	r3, r1, #0
    5a58:	2002      	movs	r0, #2
    5a5a:	1c19      	adds	r1, r3, #0
    5a5c:	4b77      	ldr	r3, [pc, #476]	; (5c3c <usart_init+0x244>)
    5a5e:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5a60:	1c3b      	adds	r3, r7, #0
    5a62:	3324      	adds	r3, #36	; 0x24
    5a64:	1c18      	adds	r0, r3, #0
    5a66:	4b76      	ldr	r3, [pc, #472]	; (5c40 <usart_init+0x248>)
    5a68:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5a6a:	687a      	ldr	r2, [r7, #4]
    5a6c:	232d      	movs	r3, #45	; 0x2d
    5a6e:	5cd2      	ldrb	r2, [r2, r3]
    5a70:	1c3b      	adds	r3, r7, #0
    5a72:	3324      	adds	r3, #36	; 0x24
    5a74:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a78:	b2da      	uxtb	r2, r3
    5a7a:	1c3b      	adds	r3, r7, #0
    5a7c:	3324      	adds	r3, #36	; 0x24
    5a7e:	1c10      	adds	r0, r2, #0
    5a80:	1c19      	adds	r1, r3, #0
    5a82:	4b70      	ldr	r3, [pc, #448]	; (5c44 <usart_init+0x24c>)
    5a84:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a88:	b2db      	uxtb	r3, r3
    5a8a:	1c18      	adds	r0, r3, #0
    5a8c:	4b6e      	ldr	r3, [pc, #440]	; (5c48 <usart_init+0x250>)
    5a8e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5a90:	687a      	ldr	r2, [r7, #4]
    5a92:	232d      	movs	r3, #45	; 0x2d
    5a94:	5cd3      	ldrb	r3, [r2, r3]
    5a96:	1c18      	adds	r0, r3, #0
    5a98:	2100      	movs	r1, #0
    5a9a:	4b6c      	ldr	r3, [pc, #432]	; (5c4c <usart_init+0x254>)
    5a9c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	7ada      	ldrb	r2, [r3, #11]
    5aa2:	68fb      	ldr	r3, [r7, #12]
    5aa4:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5aa6:	687a      	ldr	r2, [r7, #4]
    5aa8:	2324      	movs	r3, #36	; 0x24
    5aaa:	5cd2      	ldrb	r2, [r2, r3]
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5ab0:	687a      	ldr	r2, [r7, #4]
    5ab2:	2325      	movs	r3, #37	; 0x25
    5ab4:	5cd2      	ldrb	r2, [r2, r3]
    5ab6:	68fb      	ldr	r3, [r7, #12]
    5ab8:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5aba:	687b      	ldr	r3, [r7, #4]
    5abc:	7eda      	ldrb	r2, [r3, #27]
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5ac2:	687b      	ldr	r3, [r7, #4]
    5ac4:	7f1a      	ldrb	r2, [r3, #28]
    5ac6:	68fb      	ldr	r3, [r7, #12]
    5ac8:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5aca:	1c3c      	adds	r4, r7, #0
    5acc:	343b      	adds	r4, #59	; 0x3b
    5ace:	68fa      	ldr	r2, [r7, #12]
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	1c10      	adds	r0, r2, #0
    5ad4:	1c19      	adds	r1, r3, #0
    5ad6:	4b5e      	ldr	r3, [pc, #376]	; (5c50 <usart_init+0x258>)
    5ad8:	4798      	blx	r3
    5ada:	1c03      	adds	r3, r0, #0
    5adc:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5ade:	1c3b      	adds	r3, r7, #0
    5ae0:	333b      	adds	r3, #59	; 0x3b
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d003      	beq.n	5af0 <usart_init+0xf8>
		return status_code;
    5ae8:	1c3b      	adds	r3, r7, #0
    5aea:	333b      	adds	r3, #59	; 0x3b
    5aec:	781b      	ldrb	r3, [r3, #0]
    5aee:	e09e      	b.n	5c2e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5af0:	1c3b      	adds	r3, r7, #0
    5af2:	3320      	adds	r3, #32
    5af4:	1c18      	adds	r0, r3, #0
    5af6:	4b57      	ldr	r3, [pc, #348]	; (5c54 <usart_init+0x25c>)
    5af8:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5afa:	1c3b      	adds	r3, r7, #0
    5afc:	3320      	adds	r3, #32
    5afe:	2200      	movs	r2, #0
    5b00:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5b02:	1c3b      	adds	r3, r7, #0
    5b04:	3320      	adds	r3, #32
    5b06:	2200      	movs	r2, #0
    5b08:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5b0a:	687b      	ldr	r3, [r7, #4]
    5b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5b0e:	1c3b      	adds	r3, r7, #0
    5b10:	3310      	adds	r3, #16
    5b12:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5b18:	1c3b      	adds	r3, r7, #0
    5b1a:	3310      	adds	r3, #16
    5b1c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5b22:	1c3b      	adds	r3, r7, #0
    5b24:	3310      	adds	r3, #16
    5b26:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5b2c:	1c3b      	adds	r3, r7, #0
    5b2e:	3310      	adds	r3, #16
    5b30:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5b32:	1c3b      	adds	r3, r7, #0
    5b34:	3347      	adds	r3, #71	; 0x47
    5b36:	2200      	movs	r2, #0
    5b38:	701a      	strb	r2, [r3, #0]
    5b3a:	e02c      	b.n	5b96 <usart_init+0x19e>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5b3c:	1c3b      	adds	r3, r7, #0
    5b3e:	3347      	adds	r3, #71	; 0x47
    5b40:	781a      	ldrb	r2, [r3, #0]
    5b42:	1c3b      	adds	r3, r7, #0
    5b44:	3310      	adds	r3, #16
    5b46:	0092      	lsls	r2, r2, #2
    5b48:	58d3      	ldr	r3, [r2, r3]
    5b4a:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d109      	bne.n	5b66 <usart_init+0x16e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5b52:	68ba      	ldr	r2, [r7, #8]
    5b54:	1c3b      	adds	r3, r7, #0
    5b56:	3347      	adds	r3, #71	; 0x47
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	1c10      	adds	r0, r2, #0
    5b5c:	1c19      	adds	r1, r3, #0
    5b5e:	4b3e      	ldr	r3, [pc, #248]	; (5c58 <usart_init+0x260>)
    5b60:	4798      	blx	r3
    5b62:	1c03      	adds	r3, r0, #0
    5b64:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5b68:	3301      	adds	r3, #1
    5b6a:	d00d      	beq.n	5b88 <usart_init+0x190>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5b6e:	b2da      	uxtb	r2, r3
    5b70:	1c3b      	adds	r3, r7, #0
    5b72:	3320      	adds	r3, #32
    5b74:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5b78:	0c1b      	lsrs	r3, r3, #16
    5b7a:	b2da      	uxtb	r2, r3
    5b7c:	1c3b      	adds	r3, r7, #0
    5b7e:	3320      	adds	r3, #32
    5b80:	1c10      	adds	r0, r2, #0
    5b82:	1c19      	adds	r1, r3, #0
    5b84:	4b35      	ldr	r3, [pc, #212]	; (5c5c <usart_init+0x264>)
    5b86:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5b88:	1c3b      	adds	r3, r7, #0
    5b8a:	3347      	adds	r3, #71	; 0x47
    5b8c:	781a      	ldrb	r2, [r3, #0]
    5b8e:	1c3b      	adds	r3, r7, #0
    5b90:	3347      	adds	r3, #71	; 0x47
    5b92:	3201      	adds	r2, #1
    5b94:	701a      	strb	r2, [r3, #0]
    5b96:	1c3b      	adds	r3, r7, #0
    5b98:	3347      	adds	r3, #71	; 0x47
    5b9a:	781b      	ldrb	r3, [r3, #0]
    5b9c:	2b03      	cmp	r3, #3
    5b9e:	d9cd      	bls.n	5b3c <usart_init+0x144>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5ba0:	2300      	movs	r3, #0
    5ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ba4:	e009      	b.n	5bba <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5ba6:	68fa      	ldr	r2, [r7, #12]
    5ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5baa:	3302      	adds	r3, #2
    5bac:	009b      	lsls	r3, r3, #2
    5bae:	18d3      	adds	r3, r2, r3
    5bb0:	2200      	movs	r2, #0
    5bb2:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bb6:	3301      	adds	r3, #1
    5bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    5bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bbc:	2b05      	cmp	r3, #5
    5bbe:	d9f2      	bls.n	5ba6 <usart_init+0x1ae>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    5bc0:	68fb      	ldr	r3, [r7, #12]
    5bc2:	2200      	movs	r2, #0
    5bc4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	2200      	movs	r2, #0
    5bca:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5bcc:	68fb      	ldr	r3, [r7, #12]
    5bce:	2200      	movs	r2, #0
    5bd0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5bd2:	68fb      	ldr	r3, [r7, #12]
    5bd4:	2200      	movs	r2, #0
    5bd6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5bd8:	68fa      	ldr	r2, [r7, #12]
    5bda:	2330      	movs	r3, #48	; 0x30
    5bdc:	2100      	movs	r1, #0
    5bde:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    5be0:	68fa      	ldr	r2, [r7, #12]
    5be2:	2331      	movs	r3, #49	; 0x31
    5be4:	2100      	movs	r1, #0
    5be6:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    5be8:	68fa      	ldr	r2, [r7, #12]
    5bea:	2332      	movs	r3, #50	; 0x32
    5bec:	2100      	movs	r1, #0
    5bee:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    5bf0:	68fa      	ldr	r2, [r7, #12]
    5bf2:	2333      	movs	r3, #51	; 0x33
    5bf4:	2100      	movs	r1, #0
    5bf6:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	1c3c      	adds	r4, r7, #0
    5bfe:	3427      	adds	r4, #39	; 0x27
    5c00:	1c18      	adds	r0, r3, #0
    5c02:	4b0d      	ldr	r3, [pc, #52]	; (5c38 <usart_init+0x240>)
    5c04:	4798      	blx	r3
    5c06:	1c03      	adds	r3, r0, #0
    5c08:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5c0a:	1c3b      	adds	r3, r7, #0
    5c0c:	3327      	adds	r3, #39	; 0x27
    5c0e:	781a      	ldrb	r2, [r3, #0]
    5c10:	4b13      	ldr	r3, [pc, #76]	; (5c60 <usart_init+0x268>)
    5c12:	1c10      	adds	r0, r2, #0
    5c14:	1c19      	adds	r1, r3, #0
    5c16:	4b13      	ldr	r3, [pc, #76]	; (5c64 <usart_init+0x26c>)
    5c18:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5c1a:	1c3b      	adds	r3, r7, #0
    5c1c:	3327      	adds	r3, #39	; 0x27
    5c1e:	781a      	ldrb	r2, [r3, #0]
    5c20:	4b11      	ldr	r3, [pc, #68]	; (5c68 <usart_init+0x270>)
    5c22:	0092      	lsls	r2, r2, #2
    5c24:	68f9      	ldr	r1, [r7, #12]
    5c26:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5c28:	1c3b      	adds	r3, r7, #0
    5c2a:	333b      	adds	r3, #59	; 0x3b
    5c2c:	781b      	ldrb	r3, [r3, #0]
}
    5c2e:	1c18      	adds	r0, r3, #0
    5c30:	46bd      	mov	sp, r7
    5c32:	b013      	add	sp, #76	; 0x4c
    5c34:	bd90      	pop	{r4, r7, pc}
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	00005481 	.word	0x00005481
    5c3c:	0000562d 	.word	0x0000562d
    5c40:	00005619 	.word	0x00005619
    5c44:	00006bdd 	.word	0x00006bdd
    5c48:	00006c1d 	.word	0x00006c1d
    5c4c:	00005239 	.word	0x00005239
    5c50:	00005715 	.word	0x00005715
    5c54:	00005689 	.word	0x00005689
    5c58:	000052c5 	.word	0x000052c5
    5c5c:	00006ec1 	.word	0x00006ec1
    5c60:	00005e85 	.word	0x00005e85
    5c64:	000054e1 	.word	0x000054e1
    5c68:	20007178 	.word	0x20007178

00005c6c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5c70:	4b01      	ldr	r3, [pc, #4]	; (5c78 <system_interrupt_enter_critical_section+0xc>)
    5c72:	4798      	blx	r3
}
    5c74:	46bd      	mov	sp, r7
    5c76:	bd80      	pop	{r7, pc}
    5c78:	000046ad 	.word	0x000046ad

00005c7c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5c7c:	b580      	push	{r7, lr}
    5c7e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5c80:	4b01      	ldr	r3, [pc, #4]	; (5c88 <system_interrupt_leave_critical_section+0xc>)
    5c82:	4798      	blx	r3
}
    5c84:	46bd      	mov	sp, r7
    5c86:	bd80      	pop	{r7, pc}
    5c88:	000046fd 	.word	0x000046fd

00005c8c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b084      	sub	sp, #16
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5c94:	687b      	ldr	r3, [r7, #4]
    5c96:	681b      	ldr	r3, [r3, #0]
    5c98:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	69db      	ldr	r3, [r3, #28]
    5c9e:	1e5a      	subs	r2, r3, #1
    5ca0:	4193      	sbcs	r3, r2
    5ca2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5ca4:	1c18      	adds	r0, r3, #0
    5ca6:	46bd      	mov	sp, r7
    5ca8:	b004      	add	sp, #16
    5caa:	bd80      	pop	{r7, pc}

00005cac <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5cac:	b580      	push	{r7, lr}
    5cae:	b082      	sub	sp, #8
    5cb0:	af00      	add	r7, sp, #0
    5cb2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5cb4:	46c0      	nop			; (mov r8, r8)
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	1c18      	adds	r0, r3, #0
    5cba:	4b04      	ldr	r3, [pc, #16]	; (5ccc <_usart_wait_for_sync+0x20>)
    5cbc:	4798      	blx	r3
    5cbe:	1c03      	adds	r3, r0, #0
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d1f8      	bne.n	5cb6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5cc4:	46bd      	mov	sp, r7
    5cc6:	b002      	add	sp, #8
    5cc8:	bd80      	pop	{r7, pc}
    5cca:	46c0      	nop			; (mov r8, r8)
    5ccc:	00005c8d 	.word	0x00005c8d

00005cd0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5cd0:	b580      	push	{r7, lr}
    5cd2:	b086      	sub	sp, #24
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	60f8      	str	r0, [r7, #12]
    5cd8:	60b9      	str	r1, [r7, #8]
    5cda:	1dbb      	adds	r3, r7, #6
    5cdc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	681b      	ldr	r3, [r3, #0]
    5ce2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5ce4:	4b0f      	ldr	r3, [pc, #60]	; (5d24 <_usart_write_buffer+0x54>)
    5ce6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5ce8:	68fb      	ldr	r3, [r7, #12]
    5cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5cec:	b29b      	uxth	r3, r3
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d003      	beq.n	5cfa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5cf2:	4b0d      	ldr	r3, [pc, #52]	; (5d28 <_usart_write_buffer+0x58>)
    5cf4:	4798      	blx	r3
		return STATUS_BUSY;
    5cf6:	2305      	movs	r3, #5
    5cf8:	e010      	b.n	5d1c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5cfa:	68fb      	ldr	r3, [r7, #12]
    5cfc:	1dba      	adds	r2, r7, #6
    5cfe:	8812      	ldrh	r2, [r2, #0]
    5d00:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5d02:	4b09      	ldr	r3, [pc, #36]	; (5d28 <_usart_write_buffer+0x58>)
    5d04:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5d06:	68fb      	ldr	r3, [r7, #12]
    5d08:	68ba      	ldr	r2, [r7, #8]
    5d0a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5d0c:	68fa      	ldr	r2, [r7, #12]
    5d0e:	2333      	movs	r3, #51	; 0x33
    5d10:	2105      	movs	r1, #5
    5d12:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5d14:	697b      	ldr	r3, [r7, #20]
    5d16:	2201      	movs	r2, #1
    5d18:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5d1a:	2300      	movs	r3, #0
}
    5d1c:	1c18      	adds	r0, r3, #0
    5d1e:	46bd      	mov	sp, r7
    5d20:	b006      	add	sp, #24
    5d22:	bd80      	pop	{r7, pc}
    5d24:	00005c6d 	.word	0x00005c6d
    5d28:	00005c7d 	.word	0x00005c7d

00005d2c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5d2c:	b580      	push	{r7, lr}
    5d2e:	b086      	sub	sp, #24
    5d30:	af00      	add	r7, sp, #0
    5d32:	60f8      	str	r0, [r7, #12]
    5d34:	60b9      	str	r1, [r7, #8]
    5d36:	1dbb      	adds	r3, r7, #6
    5d38:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5d40:	4b16      	ldr	r3, [pc, #88]	; (5d9c <_usart_read_buffer+0x70>)
    5d42:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5d48:	b29b      	uxth	r3, r3
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d003      	beq.n	5d56 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5d4e:	4b14      	ldr	r3, [pc, #80]	; (5da0 <_usart_read_buffer+0x74>)
    5d50:	4798      	blx	r3
		return STATUS_BUSY;
    5d52:	2305      	movs	r3, #5
    5d54:	e01e      	b.n	5d94 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5d56:	68fb      	ldr	r3, [r7, #12]
    5d58:	1dba      	adds	r2, r7, #6
    5d5a:	8812      	ldrh	r2, [r2, #0]
    5d5c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5d5e:	4b10      	ldr	r3, [pc, #64]	; (5da0 <_usart_read_buffer+0x74>)
    5d60:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5d62:	68fb      	ldr	r3, [r7, #12]
    5d64:	68ba      	ldr	r2, [r7, #8]
    5d66:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5d68:	68fa      	ldr	r2, [r7, #12]
    5d6a:	2332      	movs	r3, #50	; 0x32
    5d6c:	2105      	movs	r1, #5
    5d6e:	54d1      	strb	r1, [r2, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5d70:	697b      	ldr	r3, [r7, #20]
    5d72:	2204      	movs	r2, #4
    5d74:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5d76:	68fb      	ldr	r3, [r7, #12]
    5d78:	7a1b      	ldrb	r3, [r3, #8]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d002      	beq.n	5d84 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5d7e:	697b      	ldr	r3, [r7, #20]
    5d80:	2220      	movs	r2, #32
    5d82:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5d84:	68fb      	ldr	r3, [r7, #12]
    5d86:	7a5b      	ldrb	r3, [r3, #9]
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d002      	beq.n	5d92 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5d8c:	697b      	ldr	r3, [r7, #20]
    5d8e:	2208      	movs	r2, #8
    5d90:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5d92:	2300      	movs	r3, #0
}
    5d94:	1c18      	adds	r0, r3, #0
    5d96:	46bd      	mov	sp, r7
    5d98:	b006      	add	sp, #24
    5d9a:	bd80      	pop	{r7, pc}
    5d9c:	00005c6d 	.word	0x00005c6d
    5da0:	00005c7d 	.word	0x00005c7d

00005da4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5da4:	b580      	push	{r7, lr}
    5da6:	b084      	sub	sp, #16
    5da8:	af00      	add	r7, sp, #0
    5daa:	60f8      	str	r0, [r7, #12]
    5dac:	60b9      	str	r1, [r7, #8]
    5dae:	1dfb      	adds	r3, r7, #7
    5db0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5db2:	1dfb      	adds	r3, r7, #7
    5db4:	781b      	ldrb	r3, [r3, #0]
    5db6:	68fa      	ldr	r2, [r7, #12]
    5db8:	3302      	adds	r3, #2
    5dba:	009b      	lsls	r3, r3, #2
    5dbc:	18d3      	adds	r3, r2, r3
    5dbe:	68ba      	ldr	r2, [r7, #8]
    5dc0:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5dc2:	68fa      	ldr	r2, [r7, #12]
    5dc4:	2330      	movs	r3, #48	; 0x30
    5dc6:	5cd3      	ldrb	r3, [r2, r3]
    5dc8:	b2da      	uxtb	r2, r3
    5dca:	1dfb      	adds	r3, r7, #7
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	2101      	movs	r1, #1
    5dd0:	1c08      	adds	r0, r1, #0
    5dd2:	4098      	lsls	r0, r3
    5dd4:	1c03      	adds	r3, r0, #0
    5dd6:	b2db      	uxtb	r3, r3
    5dd8:	4313      	orrs	r3, r2
    5dda:	b2db      	uxtb	r3, r3
    5ddc:	b2d9      	uxtb	r1, r3
    5dde:	68fa      	ldr	r2, [r7, #12]
    5de0:	2330      	movs	r3, #48	; 0x30
    5de2:	54d1      	strb	r1, [r2, r3]
}
    5de4:	46bd      	mov	sp, r7
    5de6:	b004      	add	sp, #16
    5de8:	bd80      	pop	{r7, pc}
    5dea:	46c0      	nop			; (mov r8, r8)

00005dec <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	b084      	sub	sp, #16
    5df0:	af00      	add	r7, sp, #0
    5df2:	60f8      	str	r0, [r7, #12]
    5df4:	60b9      	str	r1, [r7, #8]
    5df6:	1dbb      	adds	r3, r7, #6
    5df8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5dfa:	1dbb      	adds	r3, r7, #6
    5dfc:	881b      	ldrh	r3, [r3, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d101      	bne.n	5e06 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5e02:	2317      	movs	r3, #23
    5e04:	e012      	b.n	5e2c <usart_write_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    5e06:	68fb      	ldr	r3, [r7, #12]
    5e08:	79db      	ldrb	r3, [r3, #7]
    5e0a:	2201      	movs	r2, #1
    5e0c:	4053      	eors	r3, r2
    5e0e:	b2db      	uxtb	r3, r3
    5e10:	2b00      	cmp	r3, #0
    5e12:	d001      	beq.n	5e18 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5e14:	231c      	movs	r3, #28
    5e16:	e009      	b.n	5e2c <usart_write_buffer_job+0x40>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5e18:	68f9      	ldr	r1, [r7, #12]
    5e1a:	68ba      	ldr	r2, [r7, #8]
    5e1c:	1dbb      	adds	r3, r7, #6
    5e1e:	881b      	ldrh	r3, [r3, #0]
    5e20:	1c08      	adds	r0, r1, #0
    5e22:	1c11      	adds	r1, r2, #0
    5e24:	1c1a      	adds	r2, r3, #0
    5e26:	4b03      	ldr	r3, [pc, #12]	; (5e34 <usart_write_buffer_job+0x48>)
    5e28:	4798      	blx	r3
    5e2a:	1c03      	adds	r3, r0, #0
}
    5e2c:	1c18      	adds	r0, r3, #0
    5e2e:	46bd      	mov	sp, r7
    5e30:	b004      	add	sp, #16
    5e32:	bd80      	pop	{r7, pc}
    5e34:	00005cd1 	.word	0x00005cd1

00005e38 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5e38:	b580      	push	{r7, lr}
    5e3a:	b084      	sub	sp, #16
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	60f8      	str	r0, [r7, #12]
    5e40:	60b9      	str	r1, [r7, #8]
    5e42:	1dbb      	adds	r3, r7, #6
    5e44:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5e46:	1dbb      	adds	r3, r7, #6
    5e48:	881b      	ldrh	r3, [r3, #0]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d101      	bne.n	5e52 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5e4e:	2317      	movs	r3, #23
    5e50:	e012      	b.n	5e78 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	799b      	ldrb	r3, [r3, #6]
    5e56:	2201      	movs	r2, #1
    5e58:	4053      	eors	r3, r2
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d001      	beq.n	5e64 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5e60:	231c      	movs	r3, #28
    5e62:	e009      	b.n	5e78 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5e64:	68f9      	ldr	r1, [r7, #12]
    5e66:	68ba      	ldr	r2, [r7, #8]
    5e68:	1dbb      	adds	r3, r7, #6
    5e6a:	881b      	ldrh	r3, [r3, #0]
    5e6c:	1c08      	adds	r0, r1, #0
    5e6e:	1c11      	adds	r1, r2, #0
    5e70:	1c1a      	adds	r2, r3, #0
    5e72:	4b03      	ldr	r3, [pc, #12]	; (5e80 <usart_read_buffer_job+0x48>)
    5e74:	4798      	blx	r3
    5e76:	1c03      	adds	r3, r0, #0
}
    5e78:	1c18      	adds	r0, r3, #0
    5e7a:	46bd      	mov	sp, r7
    5e7c:	b004      	add	sp, #16
    5e7e:	bd80      	pop	{r7, pc}
    5e80:	00005d2d 	.word	0x00005d2d

00005e84 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b088      	sub	sp, #32
    5e88:	af00      	add	r7, sp, #0
    5e8a:	1c02      	adds	r2, r0, #0
    5e8c:	1dfb      	adds	r3, r7, #7
    5e8e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5e90:	1dfb      	adds	r3, r7, #7
    5e92:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5e94:	4bb0      	ldr	r3, [pc, #704]	; (6158 <_usart_interrupt_handler+0x2d4>)
    5e96:	0092      	lsls	r2, r2, #2
    5e98:	58d3      	ldr	r3, [r2, r3]
    5e9a:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5e9c:	69bb      	ldr	r3, [r7, #24]
    5e9e:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    5ea0:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5ea2:	69bb      	ldr	r3, [r7, #24]
    5ea4:	1c18      	adds	r0, r3, #0
    5ea6:	4bad      	ldr	r3, [pc, #692]	; (615c <_usart_interrupt_handler+0x2d8>)
    5ea8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5eaa:	697b      	ldr	r3, [r7, #20]
    5eac:	7e1b      	ldrb	r3, [r3, #24]
    5eae:	b2da      	uxtb	r2, r3
    5eb0:	1c3b      	adds	r3, r7, #0
    5eb2:	3312      	adds	r3, #18
    5eb4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5eb6:	697b      	ldr	r3, [r7, #20]
    5eb8:	7d9b      	ldrb	r3, [r3, #22]
    5eba:	b2db      	uxtb	r3, r3
    5ebc:	1c1a      	adds	r2, r3, #0
    5ebe:	1c3b      	adds	r3, r7, #0
    5ec0:	3312      	adds	r3, #18
    5ec2:	1c39      	adds	r1, r7, #0
    5ec4:	3112      	adds	r1, #18
    5ec6:	8809      	ldrh	r1, [r1, #0]
    5ec8:	400a      	ands	r2, r1
    5eca:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5ecc:	69ba      	ldr	r2, [r7, #24]
    5ece:	2330      	movs	r3, #48	; 0x30
    5ed0:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    5ed2:	69b9      	ldr	r1, [r7, #24]
    5ed4:	2231      	movs	r2, #49	; 0x31
    5ed6:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    5ed8:	4013      	ands	r3, r2
    5eda:	b2da      	uxtb	r2, r3
    5edc:	1c3b      	adds	r3, r7, #0
    5ede:	3310      	adds	r3, #16
    5ee0:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5ee2:	1c3b      	adds	r3, r7, #0
    5ee4:	3312      	adds	r3, #18
    5ee6:	881a      	ldrh	r2, [r3, #0]
    5ee8:	2301      	movs	r3, #1
    5eea:	4013      	ands	r3, r2
    5eec:	d044      	beq.n	5f78 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5eee:	69bb      	ldr	r3, [r7, #24]
    5ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5ef2:	b29b      	uxth	r3, r3
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d03c      	beq.n	5f72 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5ef8:	69bb      	ldr	r3, [r7, #24]
    5efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5efc:	781b      	ldrb	r3, [r3, #0]
    5efe:	b2da      	uxtb	r2, r3
    5f00:	1c3b      	adds	r3, r7, #0
    5f02:	331c      	adds	r3, #28
    5f04:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5f06:	69bb      	ldr	r3, [r7, #24]
    5f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f0a:	1c5a      	adds	r2, r3, #1
    5f0c:	69bb      	ldr	r3, [r7, #24]
    5f0e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5f10:	69bb      	ldr	r3, [r7, #24]
    5f12:	795b      	ldrb	r3, [r3, #5]
    5f14:	2b01      	cmp	r3, #1
    5f16:	d112      	bne.n	5f3e <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5f18:	69bb      	ldr	r3, [r7, #24]
    5f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f1c:	781b      	ldrb	r3, [r3, #0]
    5f1e:	b2db      	uxtb	r3, r3
    5f20:	021b      	lsls	r3, r3, #8
    5f22:	b29a      	uxth	r2, r3
    5f24:	1c3b      	adds	r3, r7, #0
    5f26:	331c      	adds	r3, #28
    5f28:	881b      	ldrh	r3, [r3, #0]
    5f2a:	4313      	orrs	r3, r2
    5f2c:	b29a      	uxth	r2, r3
    5f2e:	1c3b      	adds	r3, r7, #0
    5f30:	331c      	adds	r3, #28
    5f32:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5f34:	69bb      	ldr	r3, [r7, #24]
    5f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f38:	1c5a      	adds	r2, r3, #1
    5f3a:	69bb      	ldr	r3, [r7, #24]
    5f3c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5f3e:	1c3b      	adds	r3, r7, #0
    5f40:	331c      	adds	r3, #28
    5f42:	881b      	ldrh	r3, [r3, #0]
    5f44:	05db      	lsls	r3, r3, #23
    5f46:	0ddb      	lsrs	r3, r3, #23
    5f48:	b29a      	uxth	r2, r3
    5f4a:	697b      	ldr	r3, [r7, #20]
    5f4c:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5f4e:	69bb      	ldr	r3, [r7, #24]
    5f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5f52:	b29b      	uxth	r3, r3
    5f54:	3b01      	subs	r3, #1
    5f56:	b29b      	uxth	r3, r3
    5f58:	69ba      	ldr	r2, [r7, #24]
    5f5a:	1c19      	adds	r1, r3, #0
    5f5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d106      	bne.n	5f70 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5f62:	697b      	ldr	r3, [r7, #20]
    5f64:	2201      	movs	r2, #1
    5f66:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5f68:	697b      	ldr	r3, [r7, #20]
    5f6a:	2202      	movs	r2, #2
    5f6c:	759a      	strb	r2, [r3, #22]
    5f6e:	e003      	b.n	5f78 <_usart_interrupt_handler+0xf4>
    5f70:	e002      	b.n	5f78 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5f72:	697b      	ldr	r3, [r7, #20]
    5f74:	2201      	movs	r2, #1
    5f76:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5f78:	1c3b      	adds	r3, r7, #0
    5f7a:	3312      	adds	r3, #18
    5f7c:	881a      	ldrh	r2, [r3, #0]
    5f7e:	2302      	movs	r3, #2
    5f80:	4013      	ands	r3, r2
    5f82:	d011      	beq.n	5fa8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5f84:	697b      	ldr	r3, [r7, #20]
    5f86:	2202      	movs	r2, #2
    5f88:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5f8a:	69ba      	ldr	r2, [r7, #24]
    5f8c:	2333      	movs	r3, #51	; 0x33
    5f8e:	2100      	movs	r1, #0
    5f90:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5f92:	1c3b      	adds	r3, r7, #0
    5f94:	3310      	adds	r3, #16
    5f96:	881a      	ldrh	r2, [r3, #0]
    5f98:	2301      	movs	r3, #1
    5f9a:	4013      	ands	r3, r2
    5f9c:	d004      	beq.n	5fa8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5f9e:	69bb      	ldr	r3, [r7, #24]
    5fa0:	68db      	ldr	r3, [r3, #12]
    5fa2:	69ba      	ldr	r2, [r7, #24]
    5fa4:	1c10      	adds	r0, r2, #0
    5fa6:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5fa8:	1c3b      	adds	r3, r7, #0
    5faa:	3312      	adds	r3, #18
    5fac:	881a      	ldrh	r2, [r3, #0]
    5fae:	2304      	movs	r3, #4
    5fb0:	4013      	ands	r3, r2
    5fb2:	d100      	bne.n	5fb6 <_usart_interrupt_handler+0x132>
    5fb4:	e0d7      	b.n	6166 <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    5fb6:	69bb      	ldr	r3, [r7, #24]
    5fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5fba:	b29b      	uxth	r3, r3
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d100      	bne.n	5fc2 <_usart_interrupt_handler+0x13e>
    5fc0:	e0ce      	b.n	6160 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5fc2:	697b      	ldr	r3, [r7, #20]
    5fc4:	8b5b      	ldrh	r3, [r3, #26]
    5fc6:	b29b      	uxth	r3, r3
    5fc8:	b2d9      	uxtb	r1, r3
    5fca:	1c3b      	adds	r3, r7, #0
    5fcc:	331f      	adds	r3, #31
    5fce:	223f      	movs	r2, #63	; 0x3f
    5fd0:	400a      	ands	r2, r1
    5fd2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5fd4:	1c3b      	adds	r3, r7, #0
    5fd6:	331f      	adds	r3, #31
    5fd8:	781a      	ldrb	r2, [r3, #0]
    5fda:	2308      	movs	r3, #8
    5fdc:	4013      	ands	r3, r2
    5fde:	d007      	beq.n	5ff0 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5fe0:	1c3b      	adds	r3, r7, #0
    5fe2:	331f      	adds	r3, #31
    5fe4:	1c3a      	adds	r2, r7, #0
    5fe6:	321f      	adds	r2, #31
    5fe8:	7812      	ldrb	r2, [r2, #0]
    5fea:	2108      	movs	r1, #8
    5fec:	438a      	bics	r2, r1
    5fee:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5ff0:	1c3b      	adds	r3, r7, #0
    5ff2:	331f      	adds	r3, #31
    5ff4:	781b      	ldrb	r3, [r3, #0]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d100      	bne.n	5ffc <_usart_interrupt_handler+0x178>
    5ffa:	e069      	b.n	60d0 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5ffc:	1c3b      	adds	r3, r7, #0
    5ffe:	331f      	adds	r3, #31
    6000:	781a      	ldrb	r2, [r3, #0]
    6002:	2302      	movs	r3, #2
    6004:	4013      	ands	r3, r2
    6006:	d00c      	beq.n	6022 <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6008:	69ba      	ldr	r2, [r7, #24]
    600a:	2332      	movs	r3, #50	; 0x32
    600c:	211a      	movs	r1, #26
    600e:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    6010:	697b      	ldr	r3, [r7, #20]
    6012:	8b5b      	ldrh	r3, [r3, #26]
    6014:	b29b      	uxth	r3, r3
    6016:	2202      	movs	r2, #2
    6018:	4313      	orrs	r3, r2
    601a:	b29a      	uxth	r2, r3
    601c:	697b      	ldr	r3, [r7, #20]
    601e:	835a      	strh	r2, [r3, #26]
    6020:	e04a      	b.n	60b8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6022:	1c3b      	adds	r3, r7, #0
    6024:	331f      	adds	r3, #31
    6026:	781a      	ldrb	r2, [r3, #0]
    6028:	2304      	movs	r3, #4
    602a:	4013      	ands	r3, r2
    602c:	d00c      	beq.n	6048 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    602e:	69ba      	ldr	r2, [r7, #24]
    6030:	2332      	movs	r3, #50	; 0x32
    6032:	211e      	movs	r1, #30
    6034:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    6036:	697b      	ldr	r3, [r7, #20]
    6038:	8b5b      	ldrh	r3, [r3, #26]
    603a:	b29b      	uxth	r3, r3
    603c:	2204      	movs	r2, #4
    603e:	4313      	orrs	r3, r2
    6040:	b29a      	uxth	r2, r3
    6042:	697b      	ldr	r3, [r7, #20]
    6044:	835a      	strh	r2, [r3, #26]
    6046:	e037      	b.n	60b8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6048:	1c3b      	adds	r3, r7, #0
    604a:	331f      	adds	r3, #31
    604c:	781a      	ldrb	r2, [r3, #0]
    604e:	2301      	movs	r3, #1
    6050:	4013      	ands	r3, r2
    6052:	d00c      	beq.n	606e <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6054:	69ba      	ldr	r2, [r7, #24]
    6056:	2332      	movs	r3, #50	; 0x32
    6058:	2113      	movs	r1, #19
    605a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    605c:	697b      	ldr	r3, [r7, #20]
    605e:	8b5b      	ldrh	r3, [r3, #26]
    6060:	b29b      	uxth	r3, r3
    6062:	2201      	movs	r2, #1
    6064:	4313      	orrs	r3, r2
    6066:	b29a      	uxth	r2, r3
    6068:	697b      	ldr	r3, [r7, #20]
    606a:	835a      	strh	r2, [r3, #26]
    606c:	e024      	b.n	60b8 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    606e:	1c3b      	adds	r3, r7, #0
    6070:	331f      	adds	r3, #31
    6072:	781a      	ldrb	r2, [r3, #0]
    6074:	2310      	movs	r3, #16
    6076:	4013      	ands	r3, r2
    6078:	d00c      	beq.n	6094 <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    607a:	69ba      	ldr	r2, [r7, #24]
    607c:	2332      	movs	r3, #50	; 0x32
    607e:	2142      	movs	r1, #66	; 0x42
    6080:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    6082:	697b      	ldr	r3, [r7, #20]
    6084:	8b5b      	ldrh	r3, [r3, #26]
    6086:	b29b      	uxth	r3, r3
    6088:	2210      	movs	r2, #16
    608a:	4313      	orrs	r3, r2
    608c:	b29a      	uxth	r2, r3
    608e:	697b      	ldr	r3, [r7, #20]
    6090:	835a      	strh	r2, [r3, #26]
    6092:	e011      	b.n	60b8 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6094:	1c3b      	adds	r3, r7, #0
    6096:	331f      	adds	r3, #31
    6098:	781a      	ldrb	r2, [r3, #0]
    609a:	2320      	movs	r3, #32
    609c:	4013      	ands	r3, r2
    609e:	d00b      	beq.n	60b8 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    60a0:	69ba      	ldr	r2, [r7, #24]
    60a2:	2332      	movs	r3, #50	; 0x32
    60a4:	2141      	movs	r1, #65	; 0x41
    60a6:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    60a8:	697b      	ldr	r3, [r7, #20]
    60aa:	8b5b      	ldrh	r3, [r3, #26]
    60ac:	b29b      	uxth	r3, r3
    60ae:	2220      	movs	r2, #32
    60b0:	4313      	orrs	r3, r2
    60b2:	b29a      	uxth	r2, r3
    60b4:	697b      	ldr	r3, [r7, #20]
    60b6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    60b8:	1c3b      	adds	r3, r7, #0
    60ba:	3310      	adds	r3, #16
    60bc:	881a      	ldrh	r2, [r3, #0]
    60be:	2304      	movs	r3, #4
    60c0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    60c2:	d050      	beq.n	6166 <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    60c4:	69bb      	ldr	r3, [r7, #24]
    60c6:	695b      	ldr	r3, [r3, #20]
    60c8:	69ba      	ldr	r2, [r7, #24]
    60ca:	1c10      	adds	r0, r2, #0
    60cc:	4798      	blx	r3
    60ce:	e04a      	b.n	6166 <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    60d0:	697b      	ldr	r3, [r7, #20]
    60d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    60d4:	b29a      	uxth	r2, r3
    60d6:	1c3b      	adds	r3, r7, #0
    60d8:	330e      	adds	r3, #14
    60da:	05d2      	lsls	r2, r2, #23
    60dc:	0dd2      	lsrs	r2, r2, #23
    60de:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    60e0:	69bb      	ldr	r3, [r7, #24]
    60e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    60e4:	1c3a      	adds	r2, r7, #0
    60e6:	320e      	adds	r2, #14
    60e8:	8812      	ldrh	r2, [r2, #0]
    60ea:	b2d2      	uxtb	r2, r2
    60ec:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    60ee:	69bb      	ldr	r3, [r7, #24]
    60f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    60f2:	1c5a      	adds	r2, r3, #1
    60f4:	69bb      	ldr	r3, [r7, #24]
    60f6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    60f8:	69bb      	ldr	r3, [r7, #24]
    60fa:	795b      	ldrb	r3, [r3, #5]
    60fc:	2b01      	cmp	r3, #1
    60fe:	d10d      	bne.n	611c <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6100:	69bb      	ldr	r3, [r7, #24]
    6102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6104:	1c3a      	adds	r2, r7, #0
    6106:	320e      	adds	r2, #14
    6108:	8812      	ldrh	r2, [r2, #0]
    610a:	0a12      	lsrs	r2, r2, #8
    610c:	b292      	uxth	r2, r2
    610e:	b2d2      	uxtb	r2, r2
    6110:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    6112:	69bb      	ldr	r3, [r7, #24]
    6114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6116:	1c5a      	adds	r2, r3, #1
    6118:	69bb      	ldr	r3, [r7, #24]
    611a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    611c:	69bb      	ldr	r3, [r7, #24]
    611e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6120:	b29b      	uxth	r3, r3
    6122:	3b01      	subs	r3, #1
    6124:	b29b      	uxth	r3, r3
    6126:	69ba      	ldr	r2, [r7, #24]
    6128:	1c19      	adds	r1, r3, #0
    612a:	8591      	strh	r1, [r2, #44]	; 0x2c
    612c:	2b00      	cmp	r3, #0
    612e:	d112      	bne.n	6156 <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6130:	697b      	ldr	r3, [r7, #20]
    6132:	2204      	movs	r2, #4
    6134:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6136:	69ba      	ldr	r2, [r7, #24]
    6138:	2332      	movs	r3, #50	; 0x32
    613a:	2100      	movs	r1, #0
    613c:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    613e:	1c3b      	adds	r3, r7, #0
    6140:	3310      	adds	r3, #16
    6142:	881a      	ldrh	r2, [r3, #0]
    6144:	2302      	movs	r3, #2
    6146:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    6148:	d005      	beq.n	6156 <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    614a:	69bb      	ldr	r3, [r7, #24]
    614c:	691b      	ldr	r3, [r3, #16]
    614e:	69ba      	ldr	r2, [r7, #24]
    6150:	1c10      	adds	r0, r2, #0
    6152:	4798      	blx	r3
    6154:	e007      	b.n	6166 <_usart_interrupt_handler+0x2e2>
    6156:	e006      	b.n	6166 <_usart_interrupt_handler+0x2e2>
    6158:	20007178 	.word	0x20007178
    615c:	00005cad 	.word	0x00005cad
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6160:	697b      	ldr	r3, [r7, #20]
    6162:	2204      	movs	r2, #4
    6164:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6166:	1c3b      	adds	r3, r7, #0
    6168:	3312      	adds	r3, #18
    616a:	881a      	ldrh	r2, [r3, #0]
    616c:	2310      	movs	r3, #16
    616e:	4013      	ands	r3, r2
    6170:	d010      	beq.n	6194 <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6172:	697b      	ldr	r3, [r7, #20]
    6174:	2210      	movs	r2, #16
    6176:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6178:	697b      	ldr	r3, [r7, #20]
    617a:	2210      	movs	r2, #16
    617c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    617e:	1c3b      	adds	r3, r7, #0
    6180:	3310      	adds	r3, #16
    6182:	881a      	ldrh	r2, [r3, #0]
    6184:	2310      	movs	r3, #16
    6186:	4013      	ands	r3, r2
    6188:	d004      	beq.n	6194 <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    618a:	69bb      	ldr	r3, [r7, #24]
    618c:	69db      	ldr	r3, [r3, #28]
    618e:	69ba      	ldr	r2, [r7, #24]
    6190:	1c10      	adds	r0, r2, #0
    6192:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6194:	1c3b      	adds	r3, r7, #0
    6196:	3312      	adds	r3, #18
    6198:	881a      	ldrh	r2, [r3, #0]
    619a:	2320      	movs	r3, #32
    619c:	4013      	ands	r3, r2
    619e:	d010      	beq.n	61c2 <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    61a0:	697b      	ldr	r3, [r7, #20]
    61a2:	2220      	movs	r2, #32
    61a4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    61a6:	697b      	ldr	r3, [r7, #20]
    61a8:	2220      	movs	r2, #32
    61aa:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    61ac:	1c3b      	adds	r3, r7, #0
    61ae:	3310      	adds	r3, #16
    61b0:	881a      	ldrh	r2, [r3, #0]
    61b2:	2308      	movs	r3, #8
    61b4:	4013      	ands	r3, r2
    61b6:	d004      	beq.n	61c2 <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    61b8:	69bb      	ldr	r3, [r7, #24]
    61ba:	699b      	ldr	r3, [r3, #24]
    61bc:	69ba      	ldr	r2, [r7, #24]
    61be:	1c10      	adds	r0, r2, #0
    61c0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    61c2:	1c3b      	adds	r3, r7, #0
    61c4:	3312      	adds	r3, #18
    61c6:	881a      	ldrh	r2, [r3, #0]
    61c8:	2308      	movs	r3, #8
    61ca:	4013      	ands	r3, r2
    61cc:	d010      	beq.n	61f0 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    61ce:	697b      	ldr	r3, [r7, #20]
    61d0:	2208      	movs	r2, #8
    61d2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    61d4:	697b      	ldr	r3, [r7, #20]
    61d6:	2208      	movs	r2, #8
    61d8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    61da:	1c3b      	adds	r3, r7, #0
    61dc:	3310      	adds	r3, #16
    61de:	881a      	ldrh	r2, [r3, #0]
    61e0:	2320      	movs	r3, #32
    61e2:	4013      	ands	r3, r2
    61e4:	d004      	beq.n	61f0 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    61e6:	69bb      	ldr	r3, [r7, #24]
    61e8:	6a1b      	ldr	r3, [r3, #32]
    61ea:	69ba      	ldr	r2, [r7, #24]
    61ec:	1c10      	adds	r0, r2, #0
    61ee:	4798      	blx	r3
		}
	}
#endif
}
    61f0:	46bd      	mov	sp, r7
    61f2:	b008      	add	sp, #32
    61f4:	bd80      	pop	{r7, pc}
    61f6:	46c0      	nop			; (mov r8, r8)

000061f8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b082      	sub	sp, #8
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	2201      	movs	r2, #1
    6204:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	2200      	movs	r2, #0
    620a:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	2206      	movs	r2, #6
    6210:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	2200      	movs	r2, #0
    6216:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6218:	687b      	ldr	r3, [r7, #4]
    621a:	2200      	movs	r2, #0
    621c:	725a      	strb	r2, [r3, #9]
}
    621e:	46bd      	mov	sp, r7
    6220:	b002      	add	sp, #8
    6222:	bd80      	pop	{r7, pc}

00006224 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    6224:	b580      	push	{r7, lr}
    6226:	b082      	sub	sp, #8
    6228:	af00      	add	r7, sp, #0
    622a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	2203      	movs	r2, #3
    6230:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	2200      	movs	r2, #0
    6236:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	2201      	movs	r2, #1
    623c:	709a      	strb	r2, [r3, #2]
}
    623e:	46bd      	mov	sp, r7
    6240:	b002      	add	sp, #8
    6242:	bd80      	pop	{r7, pc}

00006244 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    6244:	b580      	push	{r7, lr}
    6246:	b082      	sub	sp, #8
    6248:	af00      	add	r7, sp, #0
    624a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	2200      	movs	r2, #0
    6250:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6252:	687b      	ldr	r3, [r7, #4]
    6254:	2200      	movs	r2, #0
    6256:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	2200      	movs	r2, #0
    625c:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	2200      	movs	r2, #0
    6262:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	2200      	movs	r2, #0
    6268:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	2201      	movs	r2, #1
    626e:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	2207      	movs	r2, #7
    6274:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	223f      	movs	r2, #63	; 0x3f
    627a:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	2201      	movs	r2, #1
    6280:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	2201      	movs	r2, #1
    6286:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	2206      	movs	r2, #6
    628c:	821a      	strh	r2, [r3, #16]
}
    628e:	46bd      	mov	sp, r7
    6290:	b002      	add	sp, #8
    6292:	bd80      	pop	{r7, pc}

00006294 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    6294:	b580      	push	{r7, lr}
    6296:	b082      	sub	sp, #8
    6298:	af00      	add	r7, sp, #0
    629a:	1c02      	adds	r2, r0, #0
    629c:	1dfb      	adds	r3, r7, #7
    629e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    62a0:	4b03      	ldr	r3, [pc, #12]	; (62b0 <system_cpu_clock_set_divider+0x1c>)
    62a2:	1dfa      	adds	r2, r7, #7
    62a4:	7812      	ldrb	r2, [r2, #0]
    62a6:	721a      	strb	r2, [r3, #8]
}
    62a8:	46bd      	mov	sp, r7
    62aa:	b002      	add	sp, #8
    62ac:	bd80      	pop	{r7, pc}
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	40000400 	.word	0x40000400

000062b4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    62b4:	b580      	push	{r7, lr}
    62b6:	b082      	sub	sp, #8
    62b8:	af00      	add	r7, sp, #0
    62ba:	1c0a      	adds	r2, r1, #0
    62bc:	1dfb      	adds	r3, r7, #7
    62be:	1c01      	adds	r1, r0, #0
    62c0:	7019      	strb	r1, [r3, #0]
    62c2:	1dbb      	adds	r3, r7, #6
    62c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    62c6:	1dfb      	adds	r3, r7, #7
    62c8:	781b      	ldrb	r3, [r3, #0]
    62ca:	2b01      	cmp	r3, #1
    62cc:	d008      	beq.n	62e0 <system_apb_clock_set_divider+0x2c>
    62ce:	2b02      	cmp	r3, #2
    62d0:	d00b      	beq.n	62ea <system_apb_clock_set_divider+0x36>
    62d2:	2b00      	cmp	r3, #0
    62d4:	d10e      	bne.n	62f4 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    62d6:	4b0b      	ldr	r3, [pc, #44]	; (6304 <system_apb_clock_set_divider+0x50>)
    62d8:	1dba      	adds	r2, r7, #6
    62da:	7812      	ldrb	r2, [r2, #0]
    62dc:	725a      	strb	r2, [r3, #9]
			break;
    62de:	e00b      	b.n	62f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    62e0:	4b08      	ldr	r3, [pc, #32]	; (6304 <system_apb_clock_set_divider+0x50>)
    62e2:	1dba      	adds	r2, r7, #6
    62e4:	7812      	ldrb	r2, [r2, #0]
    62e6:	729a      	strb	r2, [r3, #10]
			break;
    62e8:	e006      	b.n	62f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    62ea:	4b06      	ldr	r3, [pc, #24]	; (6304 <system_apb_clock_set_divider+0x50>)
    62ec:	1dba      	adds	r2, r7, #6
    62ee:	7812      	ldrb	r2, [r2, #0]
    62f0:	72da      	strb	r2, [r3, #11]
			break;
    62f2:	e001      	b.n	62f8 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    62f4:	2317      	movs	r3, #23
    62f6:	e000      	b.n	62fa <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    62f8:	2300      	movs	r3, #0
}
    62fa:	1c18      	adds	r0, r3, #0
    62fc:	46bd      	mov	sp, r7
    62fe:	b002      	add	sp, #8
    6300:	bd80      	pop	{r7, pc}
    6302:	46c0      	nop			; (mov r8, r8)
    6304:	40000400 	.word	0x40000400

00006308 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6308:	b580      	push	{r7, lr}
    630a:	b082      	sub	sp, #8
    630c:	af00      	add	r7, sp, #0
    630e:	1c02      	adds	r2, r0, #0
    6310:	1dfb      	adds	r3, r7, #7
    6312:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6314:	4b08      	ldr	r3, [pc, #32]	; (6338 <system_flash_set_waitstates+0x30>)
    6316:	1dfa      	adds	r2, r7, #7
    6318:	7811      	ldrb	r1, [r2, #0]
    631a:	220f      	movs	r2, #15
    631c:	400a      	ands	r2, r1
    631e:	b2d1      	uxtb	r1, r2
    6320:	220f      	movs	r2, #15
    6322:	400a      	ands	r2, r1
    6324:	0052      	lsls	r2, r2, #1
    6326:	6859      	ldr	r1, [r3, #4]
    6328:	201e      	movs	r0, #30
    632a:	4381      	bics	r1, r0
    632c:	430a      	orrs	r2, r1
    632e:	605a      	str	r2, [r3, #4]
}
    6330:	46bd      	mov	sp, r7
    6332:	b002      	add	sp, #8
    6334:	bd80      	pop	{r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	41004000 	.word	0x41004000

0000633c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    633c:	b580      	push	{r7, lr}
    633e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6340:	46c0      	nop			; (mov r8, r8)
    6342:	4b03      	ldr	r3, [pc, #12]	; (6350 <_system_dfll_wait_for_sync+0x14>)
    6344:	68da      	ldr	r2, [r3, #12]
    6346:	2310      	movs	r3, #16
    6348:	4013      	ands	r3, r2
    634a:	d0fa      	beq.n	6342 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    634c:	46bd      	mov	sp, r7
    634e:	bd80      	pop	{r7, pc}
    6350:	40000800 	.word	0x40000800

00006354 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6354:	b580      	push	{r7, lr}
    6356:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    6358:	4a0c      	ldr	r2, [pc, #48]	; (638c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    635a:	4b0d      	ldr	r3, [pc, #52]	; (6390 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	b29b      	uxth	r3, r3
    6360:	2180      	movs	r1, #128	; 0x80
    6362:	438b      	bics	r3, r1
    6364:	b29b      	uxth	r3, r3
    6366:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6368:	4b0a      	ldr	r3, [pc, #40]	; (6394 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    636a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    636c:	4b07      	ldr	r3, [pc, #28]	; (638c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    636e:	4a08      	ldr	r2, [pc, #32]	; (6390 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6370:	6892      	ldr	r2, [r2, #8]
    6372:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6374:	4b05      	ldr	r3, [pc, #20]	; (638c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6376:	4a06      	ldr	r2, [pc, #24]	; (6390 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6378:	6852      	ldr	r2, [r2, #4]
    637a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    637c:	4a03      	ldr	r2, [pc, #12]	; (638c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    637e:	4b04      	ldr	r3, [pc, #16]	; (6390 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6380:	681b      	ldr	r3, [r3, #0]
    6382:	b29b      	uxth	r3, r3
    6384:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6386:	46bd      	mov	sp, r7
    6388:	bd80      	pop	{r7, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	40000800 	.word	0x40000800
    6390:	20006fcc 	.word	0x20006fcc
    6394:	0000633d 	.word	0x0000633d

00006398 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6398:	b580      	push	{r7, lr}
    639a:	b082      	sub	sp, #8
    639c:	af00      	add	r7, sp, #0
    639e:	1c02      	adds	r2, r0, #0
    63a0:	1dfb      	adds	r3, r7, #7
    63a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    63a4:	1dfb      	adds	r3, r7, #7
    63a6:	781b      	ldrb	r3, [r3, #0]
    63a8:	2b08      	cmp	r3, #8
    63aa:	d843      	bhi.n	6434 <system_clock_source_get_hz+0x9c>
    63ac:	009a      	lsls	r2, r3, #2
    63ae:	4b24      	ldr	r3, [pc, #144]	; (6440 <system_clock_source_get_hz+0xa8>)
    63b0:	18d3      	adds	r3, r2, r3
    63b2:	681b      	ldr	r3, [r3, #0]
    63b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    63b6:	4b23      	ldr	r3, [pc, #140]	; (6444 <system_clock_source_get_hz+0xac>)
    63b8:	691b      	ldr	r3, [r3, #16]
    63ba:	e03c      	b.n	6436 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    63bc:	4b22      	ldr	r3, [pc, #136]	; (6448 <system_clock_source_get_hz+0xb0>)
    63be:	6a1b      	ldr	r3, [r3, #32]
    63c0:	0a1b      	lsrs	r3, r3, #8
    63c2:	1c1a      	adds	r2, r3, #0
    63c4:	2303      	movs	r3, #3
    63c6:	4013      	ands	r3, r2
    63c8:	b2db      	uxtb	r3, r3
    63ca:	4a20      	ldr	r2, [pc, #128]	; (644c <system_clock_source_get_hz+0xb4>)
    63cc:	1c11      	adds	r1, r2, #0
    63ce:	40d9      	lsrs	r1, r3
    63d0:	1c0b      	adds	r3, r1, #0
    63d2:	e030      	b.n	6436 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    63d4:	2380      	movs	r3, #128	; 0x80
    63d6:	021b      	lsls	r3, r3, #8
    63d8:	e02d      	b.n	6436 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    63da:	2380      	movs	r3, #128	; 0x80
    63dc:	021b      	lsls	r3, r3, #8
    63de:	e02a      	b.n	6436 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    63e0:	4b18      	ldr	r3, [pc, #96]	; (6444 <system_clock_source_get_hz+0xac>)
    63e2:	695b      	ldr	r3, [r3, #20]
    63e4:	e027      	b.n	6436 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    63e6:	4b17      	ldr	r3, [pc, #92]	; (6444 <system_clock_source_get_hz+0xac>)
    63e8:	681a      	ldr	r2, [r3, #0]
    63ea:	2302      	movs	r3, #2
    63ec:	4013      	ands	r3, r2
    63ee:	d101      	bne.n	63f4 <system_clock_source_get_hz+0x5c>
			return 0;
    63f0:	2300      	movs	r3, #0
    63f2:	e020      	b.n	6436 <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    63f4:	4b16      	ldr	r3, [pc, #88]	; (6450 <system_clock_source_get_hz+0xb8>)
    63f6:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    63f8:	4b12      	ldr	r3, [pc, #72]	; (6444 <system_clock_source_get_hz+0xac>)
    63fa:	681a      	ldr	r2, [r3, #0]
    63fc:	2304      	movs	r3, #4
    63fe:	4013      	ands	r3, r2
    6400:	d009      	beq.n	6416 <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6402:	2000      	movs	r0, #0
    6404:	4b13      	ldr	r3, [pc, #76]	; (6454 <system_clock_source_get_hz+0xbc>)
    6406:	4798      	blx	r3
    6408:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    640a:	4b0e      	ldr	r3, [pc, #56]	; (6444 <system_clock_source_get_hz+0xac>)
    640c:	689b      	ldr	r3, [r3, #8]
    640e:	041b      	lsls	r3, r3, #16
    6410:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6412:	4353      	muls	r3, r2
    6414:	e00f      	b.n	6436 <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    6416:	4b10      	ldr	r3, [pc, #64]	; (6458 <system_clock_source_get_hz+0xc0>)
    6418:	e00d      	b.n	6436 <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    641a:	4a0b      	ldr	r2, [pc, #44]	; (6448 <system_clock_source_get_hz+0xb0>)
    641c:	2350      	movs	r3, #80	; 0x50
    641e:	5cd3      	ldrb	r3, [r2, r3]
    6420:	b2db      	uxtb	r3, r3
    6422:	1c1a      	adds	r2, r3, #0
    6424:	2304      	movs	r3, #4
    6426:	4013      	ands	r3, r2
    6428:	d101      	bne.n	642e <system_clock_source_get_hz+0x96>
			return 0;
    642a:	2300      	movs	r3, #0
    642c:	e003      	b.n	6436 <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    642e:	4b05      	ldr	r3, [pc, #20]	; (6444 <system_clock_source_get_hz+0xac>)
    6430:	68db      	ldr	r3, [r3, #12]
    6432:	e000      	b.n	6436 <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    6434:	2300      	movs	r3, #0
	}
}
    6436:	1c18      	adds	r0, r3, #0
    6438:	46bd      	mov	sp, r7
    643a:	b002      	add	sp, #8
    643c:	bd80      	pop	{r7, pc}
    643e:	46c0      	nop			; (mov r8, r8)
    6440:	0000b548 	.word	0x0000b548
    6444:	20006fcc 	.word	0x20006fcc
    6448:	40000800 	.word	0x40000800
    644c:	007a1200 	.word	0x007a1200
    6450:	0000633d 	.word	0x0000633d
    6454:	00006cf9 	.word	0x00006cf9
    6458:	02dc6c00 	.word	0x02dc6c00

0000645c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    645c:	b580      	push	{r7, lr}
    645e:	b084      	sub	sp, #16
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6464:	4b16      	ldr	r3, [pc, #88]	; (64c0 <system_clock_source_osc8m_set_config+0x64>)
    6466:	6a1b      	ldr	r3, [r3, #32]
    6468:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    646a:	687b      	ldr	r3, [r7, #4]
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	1c1a      	adds	r2, r3, #0
    6470:	2303      	movs	r3, #3
    6472:	4013      	ands	r3, r2
    6474:	b2d9      	uxtb	r1, r3
    6476:	1c3b      	adds	r3, r7, #0
    6478:	330d      	adds	r3, #13
    647a:	2203      	movs	r2, #3
    647c:	400a      	ands	r2, r1
    647e:	7819      	ldrb	r1, [r3, #0]
    6480:	2003      	movs	r0, #3
    6482:	4381      	bics	r1, r0
    6484:	430a      	orrs	r2, r1
    6486:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	789a      	ldrb	r2, [r3, #2]
    648c:	1c3b      	adds	r3, r7, #0
    648e:	330c      	adds	r3, #12
    6490:	01d2      	lsls	r2, r2, #7
    6492:	7818      	ldrb	r0, [r3, #0]
    6494:	217f      	movs	r1, #127	; 0x7f
    6496:	4001      	ands	r1, r0
    6498:	430a      	orrs	r2, r1
    649a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	7859      	ldrb	r1, [r3, #1]
    64a0:	1c3b      	adds	r3, r7, #0
    64a2:	330c      	adds	r3, #12
    64a4:	2201      	movs	r2, #1
    64a6:	400a      	ands	r2, r1
    64a8:	0192      	lsls	r2, r2, #6
    64aa:	7819      	ldrb	r1, [r3, #0]
    64ac:	2040      	movs	r0, #64	; 0x40
    64ae:	4381      	bics	r1, r0
    64b0:	430a      	orrs	r2, r1
    64b2:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    64b4:	4b02      	ldr	r3, [pc, #8]	; (64c0 <system_clock_source_osc8m_set_config+0x64>)
    64b6:	68fa      	ldr	r2, [r7, #12]
    64b8:	621a      	str	r2, [r3, #32]
}
    64ba:	46bd      	mov	sp, r7
    64bc:	b004      	add	sp, #16
    64be:	bd80      	pop	{r7, pc}
    64c0:	40000800 	.word	0x40000800

000064c4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    64c4:	b580      	push	{r7, lr}
    64c6:	b082      	sub	sp, #8
    64c8:	af00      	add	r7, sp, #0
    64ca:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	7a1b      	ldrb	r3, [r3, #8]
    64d0:	029b      	lsls	r3, r3, #10
    64d2:	041b      	lsls	r3, r3, #16
    64d4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    64d6:	687b      	ldr	r3, [r7, #4]
    64d8:	895b      	ldrh	r3, [r3, #10]
    64da:	059b      	lsls	r3, r3, #22
    64dc:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    64de:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    64e0:	4b22      	ldr	r3, [pc, #136]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    64e2:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    64ec:	4313      	orrs	r3, r2
    64ee:	b2db      	uxtb	r3, r3
    64f0:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    64f2:	687b      	ldr	r3, [r7, #4]
    64f4:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    64f6:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    64fc:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	785b      	ldrb	r3, [r3, #1]
    6502:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    6504:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    6506:	4b19      	ldr	r3, [pc, #100]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6508:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	2b04      	cmp	r3, #4
    6510:	d116      	bne.n	6540 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	7b1b      	ldrb	r3, [r3, #12]
    6516:	069b      	lsls	r3, r3, #26
    6518:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    651a:	687b      	ldr	r3, [r7, #4]
    651c:	89db      	ldrh	r3, [r3, #14]
    651e:	041b      	lsls	r3, r3, #16
    6520:	1c19      	adds	r1, r3, #0
    6522:	4b13      	ldr	r3, [pc, #76]	; (6570 <system_clock_source_dfll_set_config+0xac>)
    6524:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6526:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6528:	687b      	ldr	r3, [r7, #4]
    652a:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    652c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    652e:	4b0f      	ldr	r3, [pc, #60]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6530:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6532:	4b0e      	ldr	r3, [pc, #56]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6534:	681a      	ldr	r2, [r3, #0]
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	431a      	orrs	r2, r3
    653c:	4b0b      	ldr	r3, [pc, #44]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    653e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6540:	687b      	ldr	r3, [r7, #4]
    6542:	781b      	ldrb	r3, [r3, #0]
    6544:	2b20      	cmp	r3, #32
    6546:	d10e      	bne.n	6566 <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6548:	687b      	ldr	r3, [r7, #4]
    654a:	8a1b      	ldrh	r3, [r3, #16]
    654c:	1c1a      	adds	r2, r3, #0
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    654e:	4b07      	ldr	r3, [pc, #28]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6550:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6552:	4b06      	ldr	r3, [pc, #24]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6554:	681a      	ldr	r2, [r3, #0]
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	4313      	orrs	r3, r2
    655c:	2280      	movs	r2, #128	; 0x80
    655e:	00d2      	lsls	r2, r2, #3
    6560:	431a      	orrs	r2, r3
    6562:	4b02      	ldr	r3, [pc, #8]	; (656c <system_clock_source_dfll_set_config+0xa8>)
    6564:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6566:	46bd      	mov	sp, r7
    6568:	b002      	add	sp, #8
    656a:	bd80      	pop	{r7, pc}
    656c:	20006fcc 	.word	0x20006fcc
    6570:	03ff0000 	.word	0x03ff0000

00006574 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6574:	b580      	push	{r7, lr}
    6576:	b082      	sub	sp, #8
    6578:	af00      	add	r7, sp, #0
    657a:	1c02      	adds	r2, r0, #0
    657c:	1dfb      	adds	r3, r7, #7
    657e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6580:	1dfb      	adds	r3, r7, #7
    6582:	781b      	ldrb	r3, [r3, #0]
    6584:	2b08      	cmp	r3, #8
    6586:	d83b      	bhi.n	6600 <system_clock_source_enable+0x8c>
    6588:	009a      	lsls	r2, r3, #2
    658a:	4b21      	ldr	r3, [pc, #132]	; (6610 <system_clock_source_enable+0x9c>)
    658c:	18d3      	adds	r3, r2, r3
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6592:	4b20      	ldr	r3, [pc, #128]	; (6614 <system_clock_source_enable+0xa0>)
    6594:	4a1f      	ldr	r2, [pc, #124]	; (6614 <system_clock_source_enable+0xa0>)
    6596:	6a12      	ldr	r2, [r2, #32]
    6598:	2102      	movs	r1, #2
    659a:	430a      	orrs	r2, r1
    659c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    659e:	2300      	movs	r3, #0
    65a0:	e031      	b.n	6606 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    65a2:	4b1c      	ldr	r3, [pc, #112]	; (6614 <system_clock_source_enable+0xa0>)
    65a4:	4a1b      	ldr	r2, [pc, #108]	; (6614 <system_clock_source_enable+0xa0>)
    65a6:	6992      	ldr	r2, [r2, #24]
    65a8:	2102      	movs	r1, #2
    65aa:	430a      	orrs	r2, r1
    65ac:	619a      	str	r2, [r3, #24]
		break;
    65ae:	e029      	b.n	6604 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    65b0:	4b18      	ldr	r3, [pc, #96]	; (6614 <system_clock_source_enable+0xa0>)
    65b2:	4a18      	ldr	r2, [pc, #96]	; (6614 <system_clock_source_enable+0xa0>)
    65b4:	8a12      	ldrh	r2, [r2, #16]
    65b6:	b292      	uxth	r2, r2
    65b8:	2102      	movs	r1, #2
    65ba:	430a      	orrs	r2, r1
    65bc:	b292      	uxth	r2, r2
    65be:	821a      	strh	r2, [r3, #16]
		break;
    65c0:	e020      	b.n	6604 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    65c2:	4b14      	ldr	r3, [pc, #80]	; (6614 <system_clock_source_enable+0xa0>)
    65c4:	4a13      	ldr	r2, [pc, #76]	; (6614 <system_clock_source_enable+0xa0>)
    65c6:	8a92      	ldrh	r2, [r2, #20]
    65c8:	b292      	uxth	r2, r2
    65ca:	2102      	movs	r1, #2
    65cc:	430a      	orrs	r2, r1
    65ce:	b292      	uxth	r2, r2
    65d0:	829a      	strh	r2, [r3, #20]
		break;
    65d2:	e017      	b.n	6604 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    65d4:	4b10      	ldr	r3, [pc, #64]	; (6618 <system_clock_source_enable+0xa4>)
    65d6:	681b      	ldr	r3, [r3, #0]
    65d8:	2202      	movs	r2, #2
    65da:	431a      	orrs	r2, r3
    65dc:	4b0e      	ldr	r3, [pc, #56]	; (6618 <system_clock_source_enable+0xa4>)
    65de:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    65e0:	4b0e      	ldr	r3, [pc, #56]	; (661c <system_clock_source_enable+0xa8>)
    65e2:	4798      	blx	r3
		break;
    65e4:	e00e      	b.n	6604 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    65e6:	4a0b      	ldr	r2, [pc, #44]	; (6614 <system_clock_source_enable+0xa0>)
    65e8:	490a      	ldr	r1, [pc, #40]	; (6614 <system_clock_source_enable+0xa0>)
    65ea:	2344      	movs	r3, #68	; 0x44
    65ec:	5ccb      	ldrb	r3, [r1, r3]
    65ee:	b2db      	uxtb	r3, r3
    65f0:	2102      	movs	r1, #2
    65f2:	430b      	orrs	r3, r1
    65f4:	b2d9      	uxtb	r1, r3
    65f6:	2344      	movs	r3, #68	; 0x44
    65f8:	54d1      	strb	r1, [r2, r3]
		break;
    65fa:	e003      	b.n	6604 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    65fc:	2300      	movs	r3, #0
    65fe:	e002      	b.n	6606 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6600:	2317      	movs	r3, #23
    6602:	e000      	b.n	6606 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6604:	2300      	movs	r3, #0
}
    6606:	1c18      	adds	r0, r3, #0
    6608:	46bd      	mov	sp, r7
    660a:	b002      	add	sp, #8
    660c:	bd80      	pop	{r7, pc}
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	0000b56c 	.word	0x0000b56c
    6614:	40000800 	.word	0x40000800
    6618:	20006fcc 	.word	0x20006fcc
    661c:	00006355 	.word	0x00006355

00006620 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6620:	b580      	push	{r7, lr}
    6622:	b084      	sub	sp, #16
    6624:	af00      	add	r7, sp, #0
    6626:	1c02      	adds	r2, r0, #0
    6628:	1dfb      	adds	r3, r7, #7
    662a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    662c:	2300      	movs	r3, #0
    662e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6630:	1dfb      	adds	r3, r7, #7
    6632:	781b      	ldrb	r3, [r3, #0]
    6634:	2b08      	cmp	r3, #8
    6636:	d821      	bhi.n	667c <system_clock_source_is_ready+0x5c>
    6638:	009a      	lsls	r2, r3, #2
    663a:	4b18      	ldr	r3, [pc, #96]	; (669c <system_clock_source_is_ready+0x7c>)
    663c:	18d3      	adds	r3, r2, r3
    663e:	681b      	ldr	r3, [r3, #0]
    6640:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6642:	2308      	movs	r3, #8
    6644:	60fb      	str	r3, [r7, #12]
		break;
    6646:	e01b      	b.n	6680 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6648:	2304      	movs	r3, #4
    664a:	60fb      	str	r3, [r7, #12]
		break;
    664c:	e018      	b.n	6680 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    664e:	2301      	movs	r3, #1
    6650:	60fb      	str	r3, [r7, #12]
		break;
    6652:	e015      	b.n	6680 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6654:	2302      	movs	r3, #2
    6656:	60fb      	str	r3, [r7, #12]
		break;
    6658:	e012      	b.n	6680 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    665a:	2310      	movs	r3, #16
    665c:	60fb      	str	r3, [r7, #12]
		}
		break;
    665e:	e00f      	b.n	6680 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6660:	4a0f      	ldr	r2, [pc, #60]	; (66a0 <system_clock_source_is_ready+0x80>)
    6662:	2350      	movs	r3, #80	; 0x50
    6664:	5cd3      	ldrb	r3, [r2, r3]
    6666:	b2db      	uxtb	r3, r3
    6668:	1c1a      	adds	r2, r3, #0
    666a:	2303      	movs	r3, #3
    666c:	4013      	ands	r3, r2
    666e:	3b03      	subs	r3, #3
    6670:	425a      	negs	r2, r3
    6672:	4153      	adcs	r3, r2
    6674:	b2db      	uxtb	r3, r3
    6676:	e00c      	b.n	6692 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6678:	2301      	movs	r3, #1
    667a:	e00a      	b.n	6692 <system_clock_source_is_ready+0x72>

	default:
		return false;
    667c:	2300      	movs	r3, #0
    667e:	e008      	b.n	6692 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6680:	4b07      	ldr	r3, [pc, #28]	; (66a0 <system_clock_source_is_ready+0x80>)
    6682:	68db      	ldr	r3, [r3, #12]
    6684:	68fa      	ldr	r2, [r7, #12]
    6686:	401a      	ands	r2, r3
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	1ad3      	subs	r3, r2, r3
    668c:	425a      	negs	r2, r3
    668e:	4153      	adcs	r3, r2
    6690:	b2db      	uxtb	r3, r3
}
    6692:	1c18      	adds	r0, r3, #0
    6694:	46bd      	mov	sp, r7
    6696:	b004      	add	sp, #16
    6698:	bd80      	pop	{r7, pc}
    669a:	46c0      	nop			; (mov r8, r8)
    669c:	0000b590 	.word	0x0000b590
    66a0:	40000800 	.word	0x40000800

000066a4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    66a4:	b580      	push	{r7, lr}
    66a6:	b082      	sub	sp, #8
    66a8:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    66aa:	1c3b      	adds	r3, r7, #0
    66ac:	2201      	movs	r2, #1
    66ae:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    66b0:	2300      	movs	r3, #0
    66b2:	607b      	str	r3, [r7, #4]
    66b4:	e009      	b.n	66ca <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	b2da      	uxtb	r2, r3
    66ba:	1c3b      	adds	r3, r7, #0
    66bc:	1c10      	adds	r0, r2, #0
    66be:	1c19      	adds	r1, r3, #0
    66c0:	4b05      	ldr	r3, [pc, #20]	; (66d8 <_switch_peripheral_gclk+0x34>)
    66c2:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	3301      	adds	r3, #1
    66c8:	607b      	str	r3, [r7, #4]
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	2b24      	cmp	r3, #36	; 0x24
    66ce:	d9f2      	bls.n	66b6 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    66d0:	46bd      	mov	sp, r7
    66d2:	b002      	add	sp, #8
    66d4:	bd80      	pop	{r7, pc}
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	00006bdd 	.word	0x00006bdd

000066dc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    66dc:	b580      	push	{r7, lr}
    66de:	b0a6      	sub	sp, #152	; 0x98
    66e0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    66e2:	4b5c      	ldr	r3, [pc, #368]	; (6854 <system_clock_init+0x178>)
    66e4:	22c2      	movs	r2, #194	; 0xc2
    66e6:	00d2      	lsls	r2, r2, #3
    66e8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    66ea:	2002      	movs	r0, #2
    66ec:	4b5a      	ldr	r3, [pc, #360]	; (6858 <system_clock_init+0x17c>)
    66ee:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    66f0:	4b5a      	ldr	r3, [pc, #360]	; (685c <system_clock_init+0x180>)
    66f2:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    66f4:	1c3b      	adds	r3, r7, #0
    66f6:	3380      	adds	r3, #128	; 0x80
    66f8:	1c18      	adds	r0, r3, #0
    66fa:	4b59      	ldr	r3, [pc, #356]	; (6860 <system_clock_init+0x184>)
    66fc:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    66fe:	1c3b      	adds	r3, r7, #0
    6700:	3380      	adds	r3, #128	; 0x80
    6702:	2220      	movs	r2, #32
    6704:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6706:	1c3b      	adds	r3, r7, #0
    6708:	3380      	adds	r3, #128	; 0x80
    670a:	2200      	movs	r2, #0
    670c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE and FINE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL. COARSE and DFLL.FINE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    670e:	4b55      	ldr	r3, [pc, #340]	; (6864 <system_clock_init+0x188>)
    6710:	681b      	ldr	r3, [r3, #0]
    6712:	0e9b      	lsrs	r3, r3, #26
    6714:	2294      	movs	r2, #148	; 0x94
    6716:	19d2      	adds	r2, r2, r7
    6718:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    671a:	2294      	movs	r2, #148	; 0x94
    671c:	19d2      	adds	r2, r2, r7
    671e:	6813      	ldr	r3, [r2, #0]
    6720:	2b3f      	cmp	r3, #63	; 0x3f
    6722:	d103      	bne.n	672c <system_clock_init+0x50>
		coarse = 0x1f;
    6724:	231f      	movs	r3, #31
    6726:	2294      	movs	r2, #148	; 0x94
    6728:	19d2      	adds	r2, r2, r7
    672a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    672c:	2294      	movs	r2, #148	; 0x94
    672e:	19d2      	adds	r2, r2, r7
    6730:	6813      	ldr	r3, [r2, #0]
    6732:	b2da      	uxtb	r2, r3
    6734:	1c3b      	adds	r3, r7, #0
    6736:	3380      	adds	r3, #128	; 0x80
    6738:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    673a:	1c3b      	adds	r3, r7, #0
    673c:	3380      	adds	r3, #128	; 0x80
    673e:	2200      	movs	r2, #0
    6740:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6742:	1c3b      	adds	r3, r7, #0
    6744:	3380      	adds	r3, #128	; 0x80
    6746:	2200      	movs	r2, #0
    6748:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    674a:	1c3b      	adds	r3, r7, #0
    674c:	3380      	adds	r3, #128	; 0x80
    674e:	2200      	movs	r2, #0
    6750:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6752:	1c3b      	adds	r3, r7, #0
    6754:	3380      	adds	r3, #128	; 0x80
    6756:	2200      	movs	r2, #0
    6758:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    675a:	1c3b      	adds	r3, r7, #0
    675c:	3380      	adds	r3, #128	; 0x80
    675e:	2207      	movs	r2, #7
    6760:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6762:	1c3b      	adds	r3, r7, #0
    6764:	3380      	adds	r3, #128	; 0x80
    6766:	223f      	movs	r2, #63	; 0x3f
    6768:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_value   = 0x1ff;
    676a:	1c3b      	adds	r3, r7, #0
    676c:	3380      	adds	r3, #128	; 0x80
    676e:	4a3e      	ldr	r2, [pc, #248]	; (6868 <system_clock_init+0x18c>)
    6770:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6772:	1c3b      	adds	r3, r7, #0
    6774:	3380      	adds	r3, #128	; 0x80
    6776:	2200      	movs	r2, #0
    6778:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
    677a:	1c3b      	adds	r3, r7, #0
    677c:	3380      	adds	r3, #128	; 0x80
    677e:	2208      	movs	r2, #8
    6780:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6782:	1c3b      	adds	r3, r7, #0
    6784:	3380      	adds	r3, #128	; 0x80
    6786:	2200      	movs	r2, #0
    6788:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    678a:	1c3b      	adds	r3, r7, #0
    678c:	3380      	adds	r3, #128	; 0x80
    678e:	2280      	movs	r2, #128	; 0x80
    6790:	0052      	lsls	r2, r2, #1
    6792:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    6794:	1c3b      	adds	r3, r7, #0
    6796:	3380      	adds	r3, #128	; 0x80
    6798:	4a34      	ldr	r2, [pc, #208]	; (686c <system_clock_init+0x190>)
    679a:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    679c:	1c3b      	adds	r3, r7, #0
    679e:	3380      	adds	r3, #128	; 0x80
    67a0:	1c18      	adds	r0, r3, #0
    67a2:	4b33      	ldr	r3, [pc, #204]	; (6870 <system_clock_init+0x194>)
    67a4:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    67a6:	1c3b      	adds	r3, r7, #0
    67a8:	337c      	adds	r3, #124	; 0x7c
    67aa:	1c18      	adds	r0, r3, #0
    67ac:	4b31      	ldr	r3, [pc, #196]	; (6874 <system_clock_init+0x198>)
    67ae:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    67b0:	1c3b      	adds	r3, r7, #0
    67b2:	337c      	adds	r3, #124	; 0x7c
    67b4:	2200      	movs	r2, #0
    67b6:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    67b8:	1c3b      	adds	r3, r7, #0
    67ba:	337c      	adds	r3, #124	; 0x7c
    67bc:	2201      	movs	r2, #1
    67be:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    67c0:	1c3b      	adds	r3, r7, #0
    67c2:	337c      	adds	r3, #124	; 0x7c
    67c4:	2200      	movs	r2, #0
    67c6:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    67c8:	1c3b      	adds	r3, r7, #0
    67ca:	337c      	adds	r3, #124	; 0x7c
    67cc:	1c18      	adds	r0, r3, #0
    67ce:	4b2a      	ldr	r3, [pc, #168]	; (6878 <system_clock_init+0x19c>)
    67d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    67d2:	2006      	movs	r0, #6
    67d4:	4b29      	ldr	r3, [pc, #164]	; (687c <system_clock_init+0x1a0>)
    67d6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    67d8:	4b29      	ldr	r3, [pc, #164]	; (6880 <system_clock_init+0x1a4>)
    67da:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    67dc:	2007      	movs	r0, #7
    67de:	4b27      	ldr	r3, [pc, #156]	; (687c <system_clock_init+0x1a0>)
    67e0:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    67e2:	46c0      	nop			; (mov r8, r8)
    67e4:	2007      	movs	r0, #7
    67e6:	4b27      	ldr	r3, [pc, #156]	; (6884 <system_clock_init+0x1a8>)
    67e8:	4798      	blx	r3
    67ea:	1c03      	adds	r3, r0, #0
    67ec:	2201      	movs	r2, #1
    67ee:	4053      	eors	r3, r2
    67f0:	b2db      	uxtb	r3, r3
    67f2:	2b00      	cmp	r3, #0
    67f4:	d1f6      	bne.n	67e4 <system_clock_init+0x108>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    67f6:	4b17      	ldr	r3, [pc, #92]	; (6854 <system_clock_init+0x178>)
    67f8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    67fa:	2180      	movs	r1, #128	; 0x80
    67fc:	430a      	orrs	r2, r1
    67fe:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6800:	2000      	movs	r0, #0
    6802:	4b21      	ldr	r3, [pc, #132]	; (6888 <system_clock_init+0x1ac>)
    6804:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6806:	2000      	movs	r0, #0
    6808:	2100      	movs	r1, #0
    680a:	4b20      	ldr	r3, [pc, #128]	; (688c <system_clock_init+0x1b0>)
    680c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    680e:	2001      	movs	r0, #1
    6810:	2100      	movs	r1, #0
    6812:	4b1e      	ldr	r3, [pc, #120]	; (688c <system_clock_init+0x1b0>)
    6814:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6816:	2002      	movs	r0, #2
    6818:	2100      	movs	r1, #0
    681a:	4b1c      	ldr	r3, [pc, #112]	; (688c <system_clock_init+0x1b0>)
    681c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    681e:	1c3b      	adds	r3, r7, #0
    6820:	1c18      	adds	r0, r3, #0
    6822:	4b1b      	ldr	r3, [pc, #108]	; (6890 <system_clock_init+0x1b4>)
    6824:	4798      	blx	r3
    6826:	1c3b      	adds	r3, r7, #0
    6828:	2207      	movs	r2, #7
    682a:	701a      	strb	r2, [r3, #0]
    682c:	1c3b      	adds	r3, r7, #0
    682e:	2201      	movs	r2, #1
    6830:	605a      	str	r2, [r3, #4]
    6832:	1c3b      	adds	r3, r7, #0
    6834:	2201      	movs	r2, #1
    6836:	721a      	strb	r2, [r3, #8]
    6838:	1c3b      	adds	r3, r7, #0
    683a:	2200      	movs	r2, #0
    683c:	725a      	strb	r2, [r3, #9]
    683e:	1c3b      	adds	r3, r7, #0
    6840:	2000      	movs	r0, #0
    6842:	1c19      	adds	r1, r3, #0
    6844:	4b13      	ldr	r3, [pc, #76]	; (6894 <system_clock_init+0x1b8>)
    6846:	4798      	blx	r3
    6848:	2000      	movs	r0, #0
    684a:	4b13      	ldr	r3, [pc, #76]	; (6898 <system_clock_init+0x1bc>)
    684c:	4798      	blx	r3
#endif
}
    684e:	46bd      	mov	sp, r7
    6850:	b026      	add	sp, #152	; 0x98
    6852:	bd80      	pop	{r7, pc}
    6854:	40000800 	.word	0x40000800
    6858:	00006309 	.word	0x00006309
    685c:	000066a5 	.word	0x000066a5
    6860:	00006245 	.word	0x00006245
    6864:	00806024 	.word	0x00806024
    6868:	000001ff 	.word	0x000001ff
    686c:	ffffbb80 	.word	0xffffbb80
    6870:	000064c5 	.word	0x000064c5
    6874:	00006225 	.word	0x00006225
    6878:	0000645d 	.word	0x0000645d
    687c:	00006575 	.word	0x00006575
    6880:	0000693d 	.word	0x0000693d
    6884:	00006621 	.word	0x00006621
    6888:	00006295 	.word	0x00006295
    688c:	000062b5 	.word	0x000062b5
    6890:	000061f9 	.word	0x000061f9
    6894:	0000696d 	.word	0x0000696d
    6898:	00006a95 	.word	0x00006a95

0000689c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    689c:	b580      	push	{r7, lr}
    689e:	b082      	sub	sp, #8
    68a0:	af00      	add	r7, sp, #0
    68a2:	1c02      	adds	r2, r0, #0
    68a4:	6039      	str	r1, [r7, #0]
    68a6:	1dfb      	adds	r3, r7, #7
    68a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    68aa:	1dfb      	adds	r3, r7, #7
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	2b01      	cmp	r3, #1
    68b0:	d00a      	beq.n	68c8 <system_apb_clock_set_mask+0x2c>
    68b2:	2b02      	cmp	r3, #2
    68b4:	d00f      	beq.n	68d6 <system_apb_clock_set_mask+0x3a>
    68b6:	2b00      	cmp	r3, #0
    68b8:	d114      	bne.n	68e4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    68ba:	4b0e      	ldr	r3, [pc, #56]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68bc:	4a0d      	ldr	r2, [pc, #52]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68be:	6991      	ldr	r1, [r2, #24]
    68c0:	683a      	ldr	r2, [r7, #0]
    68c2:	430a      	orrs	r2, r1
    68c4:	619a      	str	r2, [r3, #24]
			break;
    68c6:	e00f      	b.n	68e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    68c8:	4b0a      	ldr	r3, [pc, #40]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68ca:	4a0a      	ldr	r2, [pc, #40]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68cc:	69d1      	ldr	r1, [r2, #28]
    68ce:	683a      	ldr	r2, [r7, #0]
    68d0:	430a      	orrs	r2, r1
    68d2:	61da      	str	r2, [r3, #28]
			break;
    68d4:	e008      	b.n	68e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    68d6:	4b07      	ldr	r3, [pc, #28]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68d8:	4a06      	ldr	r2, [pc, #24]	; (68f4 <system_apb_clock_set_mask+0x58>)
    68da:	6a11      	ldr	r1, [r2, #32]
    68dc:	683a      	ldr	r2, [r7, #0]
    68de:	430a      	orrs	r2, r1
    68e0:	621a      	str	r2, [r3, #32]
			break;
    68e2:	e001      	b.n	68e8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    68e4:	2317      	movs	r3, #23
    68e6:	e000      	b.n	68ea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    68e8:	2300      	movs	r3, #0
}
    68ea:	1c18      	adds	r0, r3, #0
    68ec:	46bd      	mov	sp, r7
    68ee:	b002      	add	sp, #8
    68f0:	bd80      	pop	{r7, pc}
    68f2:	46c0      	nop			; (mov r8, r8)
    68f4:	40000400 	.word	0x40000400

000068f8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    68fc:	4b01      	ldr	r3, [pc, #4]	; (6904 <system_interrupt_enter_critical_section+0xc>)
    68fe:	4798      	blx	r3
}
    6900:	46bd      	mov	sp, r7
    6902:	bd80      	pop	{r7, pc}
    6904:	000046ad 	.word	0x000046ad

00006908 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6908:	b580      	push	{r7, lr}
    690a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    690c:	4b01      	ldr	r3, [pc, #4]	; (6914 <system_interrupt_leave_critical_section+0xc>)
    690e:	4798      	blx	r3
}
    6910:	46bd      	mov	sp, r7
    6912:	bd80      	pop	{r7, pc}
    6914:	000046fd 	.word	0x000046fd

00006918 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6918:	b580      	push	{r7, lr}
    691a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    691c:	4b06      	ldr	r3, [pc, #24]	; (6938 <system_gclk_is_syncing+0x20>)
    691e:	785b      	ldrb	r3, [r3, #1]
    6920:	b2db      	uxtb	r3, r3
    6922:	b2db      	uxtb	r3, r3
    6924:	b25b      	sxtb	r3, r3
    6926:	2b00      	cmp	r3, #0
    6928:	da01      	bge.n	692e <system_gclk_is_syncing+0x16>
		return true;
    692a:	2301      	movs	r3, #1
    692c:	e000      	b.n	6930 <system_gclk_is_syncing+0x18>
	}

	return false;
    692e:	2300      	movs	r3, #0
}
    6930:	1c18      	adds	r0, r3, #0
    6932:	46bd      	mov	sp, r7
    6934:	bd80      	pop	{r7, pc}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	40000c00 	.word	0x40000c00

0000693c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    693c:	b580      	push	{r7, lr}
    693e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6940:	2000      	movs	r0, #0
    6942:	2108      	movs	r1, #8
    6944:	4b07      	ldr	r3, [pc, #28]	; (6964 <system_gclk_init+0x28>)
    6946:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6948:	4b07      	ldr	r3, [pc, #28]	; (6968 <system_gclk_init+0x2c>)
    694a:	2201      	movs	r2, #1
    694c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    694e:	46c0      	nop			; (mov r8, r8)
    6950:	4b05      	ldr	r3, [pc, #20]	; (6968 <system_gclk_init+0x2c>)
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	b2db      	uxtb	r3, r3
    6956:	1c1a      	adds	r2, r3, #0
    6958:	2301      	movs	r3, #1
    695a:	4013      	ands	r3, r2
    695c:	d1f8      	bne.n	6950 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    695e:	46bd      	mov	sp, r7
    6960:	bd80      	pop	{r7, pc}
    6962:	46c0      	nop			; (mov r8, r8)
    6964:	0000689d 	.word	0x0000689d
    6968:	40000c00 	.word	0x40000c00

0000696c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    696c:	b580      	push	{r7, lr}
    696e:	b086      	sub	sp, #24
    6970:	af00      	add	r7, sp, #0
    6972:	1c02      	adds	r2, r0, #0
    6974:	6039      	str	r1, [r7, #0]
    6976:	1dfb      	adds	r3, r7, #7
    6978:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    697a:	1dfb      	adds	r3, r7, #7
    697c:	781b      	ldrb	r3, [r3, #0]
    697e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6980:	1dfb      	adds	r3, r7, #7
    6982:	781b      	ldrb	r3, [r3, #0]
    6984:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6986:	683b      	ldr	r3, [r7, #0]
    6988:	781b      	ldrb	r3, [r3, #0]
    698a:	021b      	lsls	r3, r3, #8
    698c:	697a      	ldr	r2, [r7, #20]
    698e:	4313      	orrs	r3, r2
    6990:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6992:	683b      	ldr	r3, [r7, #0]
    6994:	785b      	ldrb	r3, [r3, #1]
    6996:	2b00      	cmp	r3, #0
    6998:	d004      	beq.n	69a4 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    699a:	697b      	ldr	r3, [r7, #20]
    699c:	2280      	movs	r2, #128	; 0x80
    699e:	02d2      	lsls	r2, r2, #11
    69a0:	4313      	orrs	r3, r2
    69a2:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    69a4:	683b      	ldr	r3, [r7, #0]
    69a6:	7a5b      	ldrb	r3, [r3, #9]
    69a8:	2b00      	cmp	r3, #0
    69aa:	d004      	beq.n	69b6 <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    69ac:	697b      	ldr	r3, [r7, #20]
    69ae:	2280      	movs	r2, #128	; 0x80
    69b0:	0312      	lsls	r2, r2, #12
    69b2:	4313      	orrs	r3, r2
    69b4:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    69b6:	683b      	ldr	r3, [r7, #0]
    69b8:	685b      	ldr	r3, [r3, #4]
    69ba:	2b01      	cmp	r3, #1
    69bc:	d92c      	bls.n	6a18 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    69be:	683b      	ldr	r3, [r7, #0]
    69c0:	685a      	ldr	r2, [r3, #4]
    69c2:	683b      	ldr	r3, [r7, #0]
    69c4:	685b      	ldr	r3, [r3, #4]
    69c6:	3b01      	subs	r3, #1
    69c8:	4013      	ands	r3, r2
    69ca:	d11a      	bne.n	6a02 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    69cc:	2300      	movs	r3, #0
    69ce:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    69d0:	2302      	movs	r3, #2
    69d2:	60bb      	str	r3, [r7, #8]
    69d4:	e005      	b.n	69e2 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    69d6:	68fb      	ldr	r3, [r7, #12]
    69d8:	3301      	adds	r3, #1
    69da:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    69dc:	68bb      	ldr	r3, [r7, #8]
    69de:	005b      	lsls	r3, r3, #1
    69e0:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    69e2:	683b      	ldr	r3, [r7, #0]
    69e4:	685a      	ldr	r2, [r3, #4]
    69e6:	68bb      	ldr	r3, [r7, #8]
    69e8:	429a      	cmp	r2, r3
    69ea:	d8f4      	bhi.n	69d6 <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    69ec:	68fb      	ldr	r3, [r7, #12]
    69ee:	021b      	lsls	r3, r3, #8
    69f0:	693a      	ldr	r2, [r7, #16]
    69f2:	4313      	orrs	r3, r2
    69f4:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    69f6:	697b      	ldr	r3, [r7, #20]
    69f8:	2280      	movs	r2, #128	; 0x80
    69fa:	0352      	lsls	r2, r2, #13
    69fc:	4313      	orrs	r3, r2
    69fe:	617b      	str	r3, [r7, #20]
    6a00:	e00a      	b.n	6a18 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6a02:	683b      	ldr	r3, [r7, #0]
    6a04:	685b      	ldr	r3, [r3, #4]
    6a06:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6a08:	693a      	ldr	r2, [r7, #16]
    6a0a:	4313      	orrs	r3, r2
    6a0c:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6a0e:	697b      	ldr	r3, [r7, #20]
    6a10:	2280      	movs	r2, #128	; 0x80
    6a12:	0292      	lsls	r2, r2, #10
    6a14:	4313      	orrs	r3, r2
    6a16:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6a18:	683b      	ldr	r3, [r7, #0]
    6a1a:	7a1b      	ldrb	r3, [r3, #8]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	d005      	beq.n	6a2c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6a20:	697b      	ldr	r3, [r7, #20]
    6a22:	2280      	movs	r2, #128	; 0x80
    6a24:	0392      	lsls	r2, r2, #14
    6a26:	4313      	orrs	r3, r2
    6a28:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6a2a:	e7ff      	b.n	6a2c <system_gclk_gen_set_config+0xc0>
    6a2c:	46c0      	nop			; (mov r8, r8)
    6a2e:	4b14      	ldr	r3, [pc, #80]	; (6a80 <system_gclk_gen_set_config+0x114>)
    6a30:	4798      	blx	r3
    6a32:	1c03      	adds	r3, r0, #0
    6a34:	2b00      	cmp	r3, #0
    6a36:	d1fa      	bne.n	6a2e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6a38:	4b12      	ldr	r3, [pc, #72]	; (6a84 <system_gclk_gen_set_config+0x118>)
    6a3a:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6a3c:	4b12      	ldr	r3, [pc, #72]	; (6a88 <system_gclk_gen_set_config+0x11c>)
    6a3e:	1dfa      	adds	r2, r7, #7
    6a40:	7812      	ldrb	r2, [r2, #0]
    6a42:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6a44:	46c0      	nop			; (mov r8, r8)
    6a46:	4b0e      	ldr	r3, [pc, #56]	; (6a80 <system_gclk_gen_set_config+0x114>)
    6a48:	4798      	blx	r3
    6a4a:	1c03      	adds	r3, r0, #0
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d1fa      	bne.n	6a46 <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6a50:	4b0e      	ldr	r3, [pc, #56]	; (6a8c <system_gclk_gen_set_config+0x120>)
    6a52:	693a      	ldr	r2, [r7, #16]
    6a54:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	4b09      	ldr	r3, [pc, #36]	; (6a80 <system_gclk_gen_set_config+0x114>)
    6a5a:	4798      	blx	r3
    6a5c:	1c03      	adds	r3, r0, #0
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d1fa      	bne.n	6a58 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6a62:	4b0a      	ldr	r3, [pc, #40]	; (6a8c <system_gclk_gen_set_config+0x120>)
    6a64:	4a09      	ldr	r2, [pc, #36]	; (6a8c <system_gclk_gen_set_config+0x120>)
    6a66:	6851      	ldr	r1, [r2, #4]
    6a68:	2280      	movs	r2, #128	; 0x80
    6a6a:	0252      	lsls	r2, r2, #9
    6a6c:	4011      	ands	r1, r2
    6a6e:	697a      	ldr	r2, [r7, #20]
    6a70:	430a      	orrs	r2, r1
    6a72:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6a74:	4b06      	ldr	r3, [pc, #24]	; (6a90 <system_gclk_gen_set_config+0x124>)
    6a76:	4798      	blx	r3
}
    6a78:	46bd      	mov	sp, r7
    6a7a:	b006      	add	sp, #24
    6a7c:	bd80      	pop	{r7, pc}
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	00006919 	.word	0x00006919
    6a84:	000068f9 	.word	0x000068f9
    6a88:	40000c08 	.word	0x40000c08
    6a8c:	40000c00 	.word	0x40000c00
    6a90:	00006909 	.word	0x00006909

00006a94 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6a94:	b580      	push	{r7, lr}
    6a96:	b082      	sub	sp, #8
    6a98:	af00      	add	r7, sp, #0
    6a9a:	1c02      	adds	r2, r0, #0
    6a9c:	1dfb      	adds	r3, r7, #7
    6a9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6aa0:	46c0      	nop			; (mov r8, r8)
    6aa2:	4b0e      	ldr	r3, [pc, #56]	; (6adc <system_gclk_gen_enable+0x48>)
    6aa4:	4798      	blx	r3
    6aa6:	1c03      	adds	r3, r0, #0
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d1fa      	bne.n	6aa2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6aac:	4b0c      	ldr	r3, [pc, #48]	; (6ae0 <system_gclk_gen_enable+0x4c>)
    6aae:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6ab0:	4b0c      	ldr	r3, [pc, #48]	; (6ae4 <system_gclk_gen_enable+0x50>)
    6ab2:	1dfa      	adds	r2, r7, #7
    6ab4:	7812      	ldrb	r2, [r2, #0]
    6ab6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6ab8:	46c0      	nop			; (mov r8, r8)
    6aba:	4b08      	ldr	r3, [pc, #32]	; (6adc <system_gclk_gen_enable+0x48>)
    6abc:	4798      	blx	r3
    6abe:	1c03      	adds	r3, r0, #0
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	d1fa      	bne.n	6aba <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6ac4:	4b08      	ldr	r3, [pc, #32]	; (6ae8 <system_gclk_gen_enable+0x54>)
    6ac6:	4a08      	ldr	r2, [pc, #32]	; (6ae8 <system_gclk_gen_enable+0x54>)
    6ac8:	6852      	ldr	r2, [r2, #4]
    6aca:	2180      	movs	r1, #128	; 0x80
    6acc:	0249      	lsls	r1, r1, #9
    6ace:	430a      	orrs	r2, r1
    6ad0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6ad2:	4b06      	ldr	r3, [pc, #24]	; (6aec <system_gclk_gen_enable+0x58>)
    6ad4:	4798      	blx	r3
}
    6ad6:	46bd      	mov	sp, r7
    6ad8:	b002      	add	sp, #8
    6ada:	bd80      	pop	{r7, pc}
    6adc:	00006919 	.word	0x00006919
    6ae0:	000068f9 	.word	0x000068f9
    6ae4:	40000c04 	.word	0x40000c04
    6ae8:	40000c00 	.word	0x40000c00
    6aec:	00006909 	.word	0x00006909

00006af0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6af0:	b580      	push	{r7, lr}
    6af2:	b086      	sub	sp, #24
    6af4:	af00      	add	r7, sp, #0
    6af6:	1c02      	adds	r2, r0, #0
    6af8:	1dfb      	adds	r3, r7, #7
    6afa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6afc:	46c0      	nop			; (mov r8, r8)
    6afe:	4b2f      	ldr	r3, [pc, #188]	; (6bbc <system_gclk_gen_get_hz+0xcc>)
    6b00:	4798      	blx	r3
    6b02:	1c03      	adds	r3, r0, #0
    6b04:	2b00      	cmp	r3, #0
    6b06:	d1fa      	bne.n	6afe <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6b08:	4b2d      	ldr	r3, [pc, #180]	; (6bc0 <system_gclk_gen_get_hz+0xd0>)
    6b0a:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6b0c:	4b2d      	ldr	r3, [pc, #180]	; (6bc4 <system_gclk_gen_get_hz+0xd4>)
    6b0e:	1dfa      	adds	r2, r7, #7
    6b10:	7812      	ldrb	r2, [r2, #0]
    6b12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6b14:	46c0      	nop			; (mov r8, r8)
    6b16:	4b29      	ldr	r3, [pc, #164]	; (6bbc <system_gclk_gen_get_hz+0xcc>)
    6b18:	4798      	blx	r3
    6b1a:	1c03      	adds	r3, r0, #0
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d1fa      	bne.n	6b16 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6b20:	4b29      	ldr	r3, [pc, #164]	; (6bc8 <system_gclk_gen_get_hz+0xd8>)
    6b22:	685b      	ldr	r3, [r3, #4]
    6b24:	0a1b      	lsrs	r3, r3, #8
    6b26:	1c1a      	adds	r2, r3, #0
    6b28:	231f      	movs	r3, #31
    6b2a:	4013      	ands	r3, r2
    6b2c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6b2e:	1c18      	adds	r0, r3, #0
    6b30:	4b26      	ldr	r3, [pc, #152]	; (6bcc <system_gclk_gen_get_hz+0xdc>)
    6b32:	4798      	blx	r3
    6b34:	1c03      	adds	r3, r0, #0
    6b36:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6b38:	4b22      	ldr	r3, [pc, #136]	; (6bc4 <system_gclk_gen_get_hz+0xd4>)
    6b3a:	1dfa      	adds	r2, r7, #7
    6b3c:	7812      	ldrb	r2, [r2, #0]
    6b3e:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6b40:	4b21      	ldr	r3, [pc, #132]	; (6bc8 <system_gclk_gen_get_hz+0xd8>)
    6b42:	685b      	ldr	r3, [r3, #4]
    6b44:	0d1b      	lsrs	r3, r3, #20
    6b46:	1c1a      	adds	r2, r3, #0
    6b48:	2301      	movs	r3, #1
    6b4a:	4013      	ands	r3, r2
    6b4c:	b2da      	uxtb	r2, r3
    6b4e:	1c3b      	adds	r3, r7, #0
    6b50:	3313      	adds	r3, #19
    6b52:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6b54:	4b1e      	ldr	r3, [pc, #120]	; (6bd0 <system_gclk_gen_get_hz+0xe0>)
    6b56:	1dfa      	adds	r2, r7, #7
    6b58:	7812      	ldrb	r2, [r2, #0]
    6b5a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6b5c:	46c0      	nop			; (mov r8, r8)
    6b5e:	4b17      	ldr	r3, [pc, #92]	; (6bbc <system_gclk_gen_get_hz+0xcc>)
    6b60:	4798      	blx	r3
    6b62:	1c03      	adds	r3, r0, #0
    6b64:	2b00      	cmp	r3, #0
    6b66:	d1fa      	bne.n	6b5e <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6b68:	4b17      	ldr	r3, [pc, #92]	; (6bc8 <system_gclk_gen_get_hz+0xd8>)
    6b6a:	689b      	ldr	r3, [r3, #8]
    6b6c:	0a1b      	lsrs	r3, r3, #8
    6b6e:	2200      	movs	r2, #0
    6b70:	4393      	bics	r3, r2
    6b72:	b29b      	uxth	r3, r3
    6b74:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6b76:	4b17      	ldr	r3, [pc, #92]	; (6bd4 <system_gclk_gen_get_hz+0xe4>)
    6b78:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6b7a:	1c3b      	adds	r3, r7, #0
    6b7c:	3313      	adds	r3, #19
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	2b00      	cmp	r3, #0
    6b82:	d109      	bne.n	6b98 <system_gclk_gen_get_hz+0xa8>
    6b84:	68fb      	ldr	r3, [r7, #12]
    6b86:	2b01      	cmp	r3, #1
    6b88:	d906      	bls.n	6b98 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    6b8a:	4b13      	ldr	r3, [pc, #76]	; (6bd8 <system_gclk_gen_get_hz+0xe8>)
    6b8c:	6978      	ldr	r0, [r7, #20]
    6b8e:	68f9      	ldr	r1, [r7, #12]
    6b90:	4798      	blx	r3
    6b92:	1c03      	adds	r3, r0, #0
    6b94:	617b      	str	r3, [r7, #20]
    6b96:	e00b      	b.n	6bb0 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    6b98:	1c3b      	adds	r3, r7, #0
    6b9a:	3313      	adds	r3, #19
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d006      	beq.n	6bb0 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    6ba2:	68fb      	ldr	r3, [r7, #12]
    6ba4:	3301      	adds	r3, #1
    6ba6:	697a      	ldr	r2, [r7, #20]
    6ba8:	1c11      	adds	r1, r2, #0
    6baa:	40d9      	lsrs	r1, r3
    6bac:	1c0b      	adds	r3, r1, #0
    6bae:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6bb0:	697b      	ldr	r3, [r7, #20]
}
    6bb2:	1c18      	adds	r0, r3, #0
    6bb4:	46bd      	mov	sp, r7
    6bb6:	b006      	add	sp, #24
    6bb8:	bd80      	pop	{r7, pc}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	00006919 	.word	0x00006919
    6bc0:	000068f9 	.word	0x000068f9
    6bc4:	40000c04 	.word	0x40000c04
    6bc8:	40000c00 	.word	0x40000c00
    6bcc:	00006399 	.word	0x00006399
    6bd0:	40000c08 	.word	0x40000c08
    6bd4:	00006909 	.word	0x00006909
    6bd8:	0000b0f5 	.word	0x0000b0f5

00006bdc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6bdc:	b580      	push	{r7, lr}
    6bde:	b084      	sub	sp, #16
    6be0:	af00      	add	r7, sp, #0
    6be2:	1c02      	adds	r2, r0, #0
    6be4:	6039      	str	r1, [r7, #0]
    6be6:	1dfb      	adds	r3, r7, #7
    6be8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6bea:	1dfb      	adds	r3, r7, #7
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6bf0:	683b      	ldr	r3, [r7, #0]
    6bf2:	781b      	ldrb	r3, [r3, #0]
    6bf4:	021b      	lsls	r3, r3, #8
    6bf6:	68fa      	ldr	r2, [r7, #12]
    6bf8:	4313      	orrs	r3, r2
    6bfa:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6bfc:	1dfb      	adds	r3, r7, #7
    6bfe:	781b      	ldrb	r3, [r3, #0]
    6c00:	1c18      	adds	r0, r3, #0
    6c02:	4b04      	ldr	r3, [pc, #16]	; (6c14 <system_gclk_chan_set_config+0x38>)
    6c04:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6c06:	4b04      	ldr	r3, [pc, #16]	; (6c18 <system_gclk_chan_set_config+0x3c>)
    6c08:	68fa      	ldr	r2, [r7, #12]
    6c0a:	b292      	uxth	r2, r2
    6c0c:	805a      	strh	r2, [r3, #2]
}
    6c0e:	46bd      	mov	sp, r7
    6c10:	b004      	add	sp, #16
    6c12:	bd80      	pop	{r7, pc}
    6c14:	00006c61 	.word	0x00006c61
    6c18:	40000c00 	.word	0x40000c00

00006c1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6c1c:	b580      	push	{r7, lr}
    6c1e:	b082      	sub	sp, #8
    6c20:	af00      	add	r7, sp, #0
    6c22:	1c02      	adds	r2, r0, #0
    6c24:	1dfb      	adds	r3, r7, #7
    6c26:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6c28:	4b09      	ldr	r3, [pc, #36]	; (6c50 <system_gclk_chan_enable+0x34>)
    6c2a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6c2c:	4b09      	ldr	r3, [pc, #36]	; (6c54 <system_gclk_chan_enable+0x38>)
    6c2e:	1dfa      	adds	r2, r7, #7
    6c30:	7812      	ldrb	r2, [r2, #0]
    6c32:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6c34:	4b08      	ldr	r3, [pc, #32]	; (6c58 <system_gclk_chan_enable+0x3c>)
    6c36:	4a08      	ldr	r2, [pc, #32]	; (6c58 <system_gclk_chan_enable+0x3c>)
    6c38:	8852      	ldrh	r2, [r2, #2]
    6c3a:	b292      	uxth	r2, r2
    6c3c:	2180      	movs	r1, #128	; 0x80
    6c3e:	01c9      	lsls	r1, r1, #7
    6c40:	430a      	orrs	r2, r1
    6c42:	b292      	uxth	r2, r2
    6c44:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    6c46:	4b05      	ldr	r3, [pc, #20]	; (6c5c <system_gclk_chan_enable+0x40>)
    6c48:	4798      	blx	r3
}
    6c4a:	46bd      	mov	sp, r7
    6c4c:	b002      	add	sp, #8
    6c4e:	bd80      	pop	{r7, pc}
    6c50:	000068f9 	.word	0x000068f9
    6c54:	40000c02 	.word	0x40000c02
    6c58:	40000c00 	.word	0x40000c00
    6c5c:	00006909 	.word	0x00006909

00006c60 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b084      	sub	sp, #16
    6c64:	af00      	add	r7, sp, #0
    6c66:	1c02      	adds	r2, r0, #0
    6c68:	1dfb      	adds	r3, r7, #7
    6c6a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6c6c:	4b1c      	ldr	r3, [pc, #112]	; (6ce0 <system_gclk_chan_disable+0x80>)
    6c6e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6c70:	4b1c      	ldr	r3, [pc, #112]	; (6ce4 <system_gclk_chan_disable+0x84>)
    6c72:	1dfa      	adds	r2, r7, #7
    6c74:	7812      	ldrb	r2, [r2, #0]
    6c76:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6c78:	4b1b      	ldr	r3, [pc, #108]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6c7a:	885b      	ldrh	r3, [r3, #2]
    6c7c:	b29b      	uxth	r3, r3
    6c7e:	0a1b      	lsrs	r3, r3, #8
    6c80:	1c1a      	adds	r2, r3, #0
    6c82:	230f      	movs	r3, #15
    6c84:	4013      	ands	r3, r2
    6c86:	b2db      	uxtb	r3, r3
    6c88:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6c8a:	4b17      	ldr	r3, [pc, #92]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6c8c:	8859      	ldrh	r1, [r3, #2]
    6c8e:	4a17      	ldr	r2, [pc, #92]	; (6cec <system_gclk_chan_disable+0x8c>)
    6c90:	400a      	ands	r2, r1
    6c92:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6c94:	4b14      	ldr	r3, [pc, #80]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6c96:	4a14      	ldr	r2, [pc, #80]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6c98:	8852      	ldrh	r2, [r2, #2]
    6c9a:	b291      	uxth	r1, r2
    6c9c:	4a14      	ldr	r2, [pc, #80]	; (6cf0 <system_gclk_chan_disable+0x90>)
    6c9e:	400a      	ands	r2, r1
    6ca0:	b292      	uxth	r2, r2
    6ca2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6ca4:	46c0      	nop			; (mov r8, r8)
    6ca6:	4b10      	ldr	r3, [pc, #64]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6ca8:	885b      	ldrh	r3, [r3, #2]
    6caa:	b29b      	uxth	r3, r3
    6cac:	1c1a      	adds	r2, r3, #0
    6cae:	2380      	movs	r3, #128	; 0x80
    6cb0:	01db      	lsls	r3, r3, #7
    6cb2:	4013      	ands	r3, r2
    6cb4:	d1f7      	bne.n	6ca6 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6cb6:	4b0c      	ldr	r3, [pc, #48]	; (6ce8 <system_gclk_chan_disable+0x88>)
    6cb8:	68fa      	ldr	r2, [r7, #12]
    6cba:	b2d2      	uxtb	r2, r2
    6cbc:	1c11      	adds	r1, r2, #0
    6cbe:	220f      	movs	r2, #15
    6cc0:	400a      	ands	r2, r1
    6cc2:	b2d1      	uxtb	r1, r2
    6cc4:	220f      	movs	r2, #15
    6cc6:	400a      	ands	r2, r1
    6cc8:	0212      	lsls	r2, r2, #8
    6cca:	8858      	ldrh	r0, [r3, #2]
    6ccc:	4907      	ldr	r1, [pc, #28]	; (6cec <system_gclk_chan_disable+0x8c>)
    6cce:	4001      	ands	r1, r0
    6cd0:	430a      	orrs	r2, r1
    6cd2:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    6cd4:	4b07      	ldr	r3, [pc, #28]	; (6cf4 <system_gclk_chan_disable+0x94>)
    6cd6:	4798      	blx	r3
}
    6cd8:	46bd      	mov	sp, r7
    6cda:	b004      	add	sp, #16
    6cdc:	bd80      	pop	{r7, pc}
    6cde:	46c0      	nop			; (mov r8, r8)
    6ce0:	000068f9 	.word	0x000068f9
    6ce4:	40000c02 	.word	0x40000c02
    6ce8:	40000c00 	.word	0x40000c00
    6cec:	fffff0ff 	.word	0xfffff0ff
    6cf0:	ffffbfff 	.word	0xffffbfff
    6cf4:	00006909 	.word	0x00006909

00006cf8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b084      	sub	sp, #16
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	1c02      	adds	r2, r0, #0
    6d00:	1dfb      	adds	r3, r7, #7
    6d02:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6d04:	4b0e      	ldr	r3, [pc, #56]	; (6d40 <system_gclk_chan_get_hz+0x48>)
    6d06:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6d08:	4b0e      	ldr	r3, [pc, #56]	; (6d44 <system_gclk_chan_get_hz+0x4c>)
    6d0a:	1dfa      	adds	r2, r7, #7
    6d0c:	7812      	ldrb	r2, [r2, #0]
    6d0e:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6d10:	4b0d      	ldr	r3, [pc, #52]	; (6d48 <system_gclk_chan_get_hz+0x50>)
    6d12:	885b      	ldrh	r3, [r3, #2]
    6d14:	b29b      	uxth	r3, r3
    6d16:	0a1b      	lsrs	r3, r3, #8
    6d18:	1c1a      	adds	r2, r3, #0
    6d1a:	230f      	movs	r3, #15
    6d1c:	4013      	ands	r3, r2
    6d1e:	b2da      	uxtb	r2, r3
    6d20:	1c3b      	adds	r3, r7, #0
    6d22:	330f      	adds	r3, #15
    6d24:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6d26:	4b09      	ldr	r3, [pc, #36]	; (6d4c <system_gclk_chan_get_hz+0x54>)
    6d28:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6d2a:	1c3b      	adds	r3, r7, #0
    6d2c:	330f      	adds	r3, #15
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	1c18      	adds	r0, r3, #0
    6d32:	4b07      	ldr	r3, [pc, #28]	; (6d50 <system_gclk_chan_get_hz+0x58>)
    6d34:	4798      	blx	r3
    6d36:	1c03      	adds	r3, r0, #0
}
    6d38:	1c18      	adds	r0, r3, #0
    6d3a:	46bd      	mov	sp, r7
    6d3c:	b004      	add	sp, #16
    6d3e:	bd80      	pop	{r7, pc}
    6d40:	000068f9 	.word	0x000068f9
    6d44:	40000c02 	.word	0x40000c02
    6d48:	40000c00 	.word	0x40000c00
    6d4c:	00006909 	.word	0x00006909
    6d50:	00006af1 	.word	0x00006af1

00006d54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6d54:	b580      	push	{r7, lr}
    6d56:	b084      	sub	sp, #16
    6d58:	af00      	add	r7, sp, #0
    6d5a:	1c02      	adds	r2, r0, #0
    6d5c:	1dfb      	adds	r3, r7, #7
    6d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6d60:	1c3b      	adds	r3, r7, #0
    6d62:	330f      	adds	r3, #15
    6d64:	1dfa      	adds	r2, r7, #7
    6d66:	7812      	ldrb	r2, [r2, #0]
    6d68:	09d2      	lsrs	r2, r2, #7
    6d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6d6c:	1c3b      	adds	r3, r7, #0
    6d6e:	330e      	adds	r3, #14
    6d70:	1dfa      	adds	r2, r7, #7
    6d72:	7812      	ldrb	r2, [r2, #0]
    6d74:	0952      	lsrs	r2, r2, #5
    6d76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6d78:	4b0d      	ldr	r3, [pc, #52]	; (6db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6d7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6d7c:	1c3b      	adds	r3, r7, #0
    6d7e:	330f      	adds	r3, #15
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d10e      	bne.n	6da4 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6d86:	1c3b      	adds	r3, r7, #0
    6d88:	330f      	adds	r3, #15
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	009b      	lsls	r3, r3, #2
    6d8e:	2210      	movs	r2, #16
    6d90:	19d2      	adds	r2, r2, r7
    6d92:	18d3      	adds	r3, r2, r3
    6d94:	3b08      	subs	r3, #8
    6d96:	681a      	ldr	r2, [r3, #0]
    6d98:	1c3b      	adds	r3, r7, #0
    6d9a:	330e      	adds	r3, #14
    6d9c:	781b      	ldrb	r3, [r3, #0]
    6d9e:	01db      	lsls	r3, r3, #7
    6da0:	18d3      	adds	r3, r2, r3
    6da2:	e000      	b.n	6da6 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6da4:	2300      	movs	r3, #0
	}
}
    6da6:	1c18      	adds	r0, r3, #0
    6da8:	46bd      	mov	sp, r7
    6daa:	b004      	add	sp, #16
    6dac:	bd80      	pop	{r7, pc}
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	41004400 	.word	0x41004400

00006db4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	b088      	sub	sp, #32
    6db8:	af00      	add	r7, sp, #0
    6dba:	60f8      	str	r0, [r7, #12]
    6dbc:	60b9      	str	r1, [r7, #8]
    6dbe:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6dc0:	2300      	movs	r3, #0
    6dc2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	78db      	ldrb	r3, [r3, #3]
    6dc8:	2201      	movs	r2, #1
    6dca:	4053      	eors	r3, r2
    6dcc:	b2db      	uxtb	r3, r3
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d034      	beq.n	6e3c <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6dd2:	687b      	ldr	r3, [r7, #4]
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	2b80      	cmp	r3, #128	; 0x80
    6dd8:	d00a      	beq.n	6df0 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6dda:	69fb      	ldr	r3, [r7, #28]
    6ddc:	2280      	movs	r2, #128	; 0x80
    6dde:	0252      	lsls	r2, r2, #9
    6de0:	4313      	orrs	r3, r2
    6de2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	061b      	lsls	r3, r3, #24
    6dea:	69fa      	ldr	r2, [r7, #28]
    6dec:	4313      	orrs	r3, r2
    6dee:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	785b      	ldrb	r3, [r3, #1]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d003      	beq.n	6e00 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6dfc:	2b02      	cmp	r3, #2
    6dfe:	d110      	bne.n	6e22 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6e00:	69fb      	ldr	r3, [r7, #28]
    6e02:	2280      	movs	r2, #128	; 0x80
    6e04:	0292      	lsls	r2, r2, #10
    6e06:	4313      	orrs	r3, r2
    6e08:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	789b      	ldrb	r3, [r3, #2]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d004      	beq.n	6e1c <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6e12:	69fb      	ldr	r3, [r7, #28]
    6e14:	2280      	movs	r2, #128	; 0x80
    6e16:	02d2      	lsls	r2, r2, #11
    6e18:	4313      	orrs	r3, r2
    6e1a:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6e1c:	68fb      	ldr	r3, [r7, #12]
    6e1e:	68ba      	ldr	r2, [r7, #8]
    6e20:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	785b      	ldrb	r3, [r3, #1]
    6e26:	2b01      	cmp	r3, #1
    6e28:	d003      	beq.n	6e32 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e2e:	2b02      	cmp	r3, #2
    6e30:	d107      	bne.n	6e42 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6e32:	69fa      	ldr	r2, [r7, #28]
    6e34:	4b21      	ldr	r3, [pc, #132]	; (6ebc <_system_pinmux_config+0x108>)
    6e36:	4013      	ands	r3, r2
    6e38:	61fb      	str	r3, [r7, #28]
    6e3a:	e002      	b.n	6e42 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6e3c:	68fb      	ldr	r3, [r7, #12]
    6e3e:	68ba      	ldr	r2, [r7, #8]
    6e40:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6e42:	68bb      	ldr	r3, [r7, #8]
    6e44:	041b      	lsls	r3, r3, #16
    6e46:	0c1b      	lsrs	r3, r3, #16
    6e48:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6e4a:	68bb      	ldr	r3, [r7, #8]
    6e4c:	0c1b      	lsrs	r3, r3, #16
    6e4e:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e50:	69ba      	ldr	r2, [r7, #24]
    6e52:	69fb      	ldr	r3, [r7, #28]
    6e54:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6e56:	22a0      	movs	r2, #160	; 0xa0
    6e58:	05d2      	lsls	r2, r2, #23
    6e5a:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e5c:	68fb      	ldr	r3, [r7, #12]
    6e5e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e60:	697a      	ldr	r2, [r7, #20]
    6e62:	69fb      	ldr	r3, [r7, #28]
    6e64:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6e66:	22d0      	movs	r2, #208	; 0xd0
    6e68:	0612      	lsls	r2, r2, #24
    6e6a:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6e6c:	68fb      	ldr	r3, [r7, #12]
    6e6e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	78db      	ldrb	r3, [r3, #3]
    6e74:	2201      	movs	r2, #1
    6e76:	4053      	eors	r3, r2
    6e78:	b2db      	uxtb	r3, r3
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d01a      	beq.n	6eb4 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6e7e:	69fa      	ldr	r2, [r7, #28]
    6e80:	2380      	movs	r3, #128	; 0x80
    6e82:	02db      	lsls	r3, r3, #11
    6e84:	4013      	ands	r3, r2
    6e86:	d00a      	beq.n	6e9e <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	789b      	ldrb	r3, [r3, #2]
    6e8c:	2b01      	cmp	r3, #1
    6e8e:	d103      	bne.n	6e98 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    6e90:	68fb      	ldr	r3, [r7, #12]
    6e92:	68ba      	ldr	r2, [r7, #8]
    6e94:	619a      	str	r2, [r3, #24]
    6e96:	e002      	b.n	6e9e <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    6e98:	68fb      	ldr	r3, [r7, #12]
    6e9a:	68ba      	ldr	r2, [r7, #8]
    6e9c:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	785b      	ldrb	r3, [r3, #1]
    6ea2:	2b01      	cmp	r3, #1
    6ea4:	d003      	beq.n	6eae <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6eaa:	2b02      	cmp	r3, #2
    6eac:	d102      	bne.n	6eb4 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	68ba      	ldr	r2, [r7, #8]
    6eb2:	609a      	str	r2, [r3, #8]
		}
	}
}
    6eb4:	46bd      	mov	sp, r7
    6eb6:	b008      	add	sp, #32
    6eb8:	bd80      	pop	{r7, pc}
    6eba:	46c0      	nop			; (mov r8, r8)
    6ebc:	fffbffff 	.word	0xfffbffff

00006ec0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b084      	sub	sp, #16
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	1c02      	adds	r2, r0, #0
    6ec8:	6039      	str	r1, [r7, #0]
    6eca:	1dfb      	adds	r3, r7, #7
    6ecc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6ece:	1dfb      	adds	r3, r7, #7
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	1c18      	adds	r0, r3, #0
    6ed4:	4b0b      	ldr	r3, [pc, #44]	; (6f04 <system_pinmux_pin_set_config+0x44>)
    6ed6:	4798      	blx	r3
    6ed8:	1c03      	adds	r3, r0, #0
    6eda:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6edc:	1dfb      	adds	r3, r7, #7
    6ede:	781a      	ldrb	r2, [r3, #0]
    6ee0:	231f      	movs	r3, #31
    6ee2:	4013      	ands	r3, r2
    6ee4:	2201      	movs	r2, #1
    6ee6:	1c11      	adds	r1, r2, #0
    6ee8:	4099      	lsls	r1, r3
    6eea:	1c0b      	adds	r3, r1, #0
    6eec:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6eee:	68f9      	ldr	r1, [r7, #12]
    6ef0:	68ba      	ldr	r2, [r7, #8]
    6ef2:	683b      	ldr	r3, [r7, #0]
    6ef4:	1c08      	adds	r0, r1, #0
    6ef6:	1c11      	adds	r1, r2, #0
    6ef8:	1c1a      	adds	r2, r3, #0
    6efa:	4b03      	ldr	r3, [pc, #12]	; (6f08 <system_pinmux_pin_set_config+0x48>)
    6efc:	4798      	blx	r3
}
    6efe:	46bd      	mov	sp, r7
    6f00:	b004      	add	sp, #16
    6f02:	bd80      	pop	{r7, pc}
    6f04:	00006d55 	.word	0x00006d55
    6f08:	00006db5 	.word	0x00006db5

00006f0c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6f0c:	b580      	push	{r7, lr}
    6f0e:	af00      	add	r7, sp, #0
	return;
    6f10:	46c0      	nop			; (mov r8, r8)
}
    6f12:	46bd      	mov	sp, r7
    6f14:	bd80      	pop	{r7, pc}
    6f16:	46c0      	nop			; (mov r8, r8)

00006f18 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6f1c:	4b04      	ldr	r3, [pc, #16]	; (6f30 <system_init+0x18>)
    6f1e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6f20:	4b04      	ldr	r3, [pc, #16]	; (6f34 <system_init+0x1c>)
    6f22:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6f24:	4b04      	ldr	r3, [pc, #16]	; (6f38 <system_init+0x20>)
    6f26:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6f28:	4b04      	ldr	r3, [pc, #16]	; (6f3c <system_init+0x24>)
    6f2a:	4798      	blx	r3
}
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	000066dd 	.word	0x000066dd
    6f34:	00004831 	.word	0x00004831
    6f38:	00006f0d 	.word	0x00006f0d
    6f3c:	00004bf9 	.word	0x00004bf9

00006f40 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b082      	sub	sp, #8
    6f44:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6f46:	f3ef 8310 	mrs	r3, PRIMASK
    6f4a:	603b      	str	r3, [r7, #0]
  return(result);
    6f4c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    6f4e:	425a      	negs	r2, r3
    6f50:	4153      	adcs	r3, r2
    6f52:	b2db      	uxtb	r3, r3
    6f54:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    6f56:	b672      	cpsid	i
    6f58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6f5c:	4b03      	ldr	r3, [pc, #12]	; (6f6c <cpu_irq_save+0x2c>)
    6f5e:	2200      	movs	r2, #0
    6f60:	701a      	strb	r2, [r3, #0]
	return flags;
    6f62:	687b      	ldr	r3, [r7, #4]
}
    6f64:	1c18      	adds	r0, r3, #0
    6f66:	46bd      	mov	sp, r7
    6f68:	b002      	add	sp, #8
    6f6a:	bd80      	pop	{r7, pc}
    6f6c:	20000288 	.word	0x20000288

00006f70 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    6f70:	b580      	push	{r7, lr}
    6f72:	b082      	sub	sp, #8
    6f74:	af00      	add	r7, sp, #0
    6f76:	6078      	str	r0, [r7, #4]
	return (flags);
    6f78:	687b      	ldr	r3, [r7, #4]
    6f7a:	1e5a      	subs	r2, r3, #1
    6f7c:	4193      	sbcs	r3, r2
    6f7e:	b2db      	uxtb	r3, r3
}
    6f80:	1c18      	adds	r0, r3, #0
    6f82:	46bd      	mov	sp, r7
    6f84:	b002      	add	sp, #8
    6f86:	bd80      	pop	{r7, pc}

00006f88 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b082      	sub	sp, #8
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	1c18      	adds	r0, r3, #0
    6f94:	4b06      	ldr	r3, [pc, #24]	; (6fb0 <cpu_irq_restore+0x28>)
    6f96:	4798      	blx	r3
    6f98:	1c03      	adds	r3, r0, #0
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d005      	beq.n	6faa <cpu_irq_restore+0x22>
		cpu_irq_enable();
    6f9e:	4b05      	ldr	r3, [pc, #20]	; (6fb4 <cpu_irq_restore+0x2c>)
    6fa0:	2201      	movs	r2, #1
    6fa2:	701a      	strb	r2, [r3, #0]
    6fa4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6fa8:	b662      	cpsie	i
}
    6faa:	46bd      	mov	sp, r7
    6fac:	b002      	add	sp, #8
    6fae:	bd80      	pop	{r7, pc}
    6fb0:	00006f71 	.word	0x00006f71
    6fb4:	20000288 	.word	0x20000288

00006fb8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6fb8:	b580      	push	{r7, lr}
    6fba:	b084      	sub	sp, #16
    6fbc:	af00      	add	r7, sp, #0
    6fbe:	1c02      	adds	r2, r0, #0
    6fc0:	1dfb      	adds	r3, r7, #7
    6fc2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6fc4:	1c3b      	adds	r3, r7, #0
    6fc6:	330f      	adds	r3, #15
    6fc8:	1dfa      	adds	r2, r7, #7
    6fca:	7812      	ldrb	r2, [r2, #0]
    6fcc:	09d2      	lsrs	r2, r2, #7
    6fce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6fd0:	1c3b      	adds	r3, r7, #0
    6fd2:	330e      	adds	r3, #14
    6fd4:	1dfa      	adds	r2, r7, #7
    6fd6:	7812      	ldrb	r2, [r2, #0]
    6fd8:	0952      	lsrs	r2, r2, #5
    6fda:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6fdc:	4b0d      	ldr	r3, [pc, #52]	; (7014 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6fde:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6fe0:	1c3b      	adds	r3, r7, #0
    6fe2:	330f      	adds	r3, #15
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d10e      	bne.n	7008 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6fea:	1c3b      	adds	r3, r7, #0
    6fec:	330f      	adds	r3, #15
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	009b      	lsls	r3, r3, #2
    6ff2:	2210      	movs	r2, #16
    6ff4:	19d2      	adds	r2, r2, r7
    6ff6:	18d3      	adds	r3, r2, r3
    6ff8:	3b08      	subs	r3, #8
    6ffa:	681a      	ldr	r2, [r3, #0]
    6ffc:	1c3b      	adds	r3, r7, #0
    6ffe:	330e      	adds	r3, #14
    7000:	781b      	ldrb	r3, [r3, #0]
    7002:	01db      	lsls	r3, r3, #7
    7004:	18d3      	adds	r3, r2, r3
    7006:	e000      	b.n	700a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    7008:	2300      	movs	r3, #0
	}
}
    700a:	1c18      	adds	r0, r3, #0
    700c:	46bd      	mov	sp, r7
    700e:	b004      	add	sp, #16
    7010:	bd80      	pop	{r7, pc}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	41004400 	.word	0x41004400

00007018 <usb_get_state_machine_status>:
 * \brief Get the status of USB module's state machine
 *
 * \param module_inst Pointer to USB module instance
 */
static inline uint8_t usb_get_state_machine_status(struct usb_module *module_inst)
{
    7018:	b580      	push	{r7, lr}
    701a:	b082      	sub	sp, #8
    701c:	af00      	add	r7, sp, #0
    701e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    7020:	687b      	ldr	r3, [r7, #4]
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	7b5b      	ldrb	r3, [r3, #13]
    7026:	b2db      	uxtb	r3, r3
}
    7028:	1c18      	adds	r0, r3, #0
    702a:	46bd      	mov	sp, r7
    702c:	b002      	add	sp, #8
    702e:	bd80      	pop	{r7, pc}

00007030 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    7030:	b580      	push	{r7, lr}
    7032:	b082      	sub	sp, #8
    7034:	af00      	add	r7, sp, #0
    7036:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7038:	687b      	ldr	r3, [r7, #4]
    703a:	681a      	ldr	r2, [r3, #0]
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	681b      	ldr	r3, [r3, #0]
    7040:	891b      	ldrh	r3, [r3, #8]
    7042:	b29b      	uxth	r3, r3
    7044:	2101      	movs	r1, #1
    7046:	438b      	bics	r3, r1
    7048:	b29b      	uxth	r3, r3
    704a:	8113      	strh	r3, [r2, #8]
}
    704c:	46bd      	mov	sp, r7
    704e:	b002      	add	sp, #8
    7050:	bd80      	pop	{r7, pc}
    7052:	46c0      	nop			; (mov r8, r8)

00007054 <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    7054:	b580      	push	{r7, lr}
    7056:	b082      	sub	sp, #8
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	681a      	ldr	r2, [r3, #0]
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	681b      	ldr	r3, [r3, #0]
    7064:	891b      	ldrh	r3, [r3, #8]
    7066:	b29b      	uxth	r3, r3
    7068:	2101      	movs	r1, #1
    706a:	430b      	orrs	r3, r1
    706c:	b29b      	uxth	r3, r3
    706e:	8113      	strh	r3, [r2, #8]
}
    7070:	46bd      	mov	sp, r7
    7072:	b002      	add	sp, #8
    7074:	bd80      	pop	{r7, pc}
    7076:	46c0      	nop			; (mov r8, r8)

00007078 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    7078:	b580      	push	{r7, lr}
    707a:	b082      	sub	sp, #8
    707c:	af00      	add	r7, sp, #0
    707e:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	7a9a      	ldrb	r2, [r3, #10]
    7086:	237f      	movs	r3, #127	; 0x7f
    7088:	4013      	ands	r3, r2
    708a:	b2db      	uxtb	r3, r3
}
    708c:	1c18      	adds	r0, r3, #0
    708e:	46bd      	mov	sp, r7
    7090:	b002      	add	sp, #8
    7092:	bd80      	pop	{r7, pc}

00007094 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    7094:	b580      	push	{r7, lr}
    7096:	b082      	sub	sp, #8
    7098:	af00      	add	r7, sp, #0
    709a:	6078      	str	r0, [r7, #4]
    709c:	1c0a      	adds	r2, r1, #0
    709e:	1cfb      	adds	r3, r7, #3
    70a0:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	681b      	ldr	r3, [r3, #0]
    70a6:	1cfa      	adds	r2, r7, #3
    70a8:	7812      	ldrb	r2, [r2, #0]
    70aa:	2180      	movs	r1, #128	; 0x80
    70ac:	4249      	negs	r1, r1
    70ae:	430a      	orrs	r2, r1
    70b0:	b2d2      	uxtb	r2, r2
    70b2:	729a      	strb	r2, [r3, #10]
}
    70b4:	46bd      	mov	sp, r7
    70b6:	b002      	add	sp, #8
    70b8:	bd80      	pop	{r7, pc}
    70ba:	46c0      	nop			; (mov r8, r8)

000070bc <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	681b      	ldr	r3, [r3, #0]
    70c8:	8a1b      	ldrh	r3, [r3, #16]
    70ca:	b29b      	uxth	r3, r3
    70cc:	08db      	lsrs	r3, r3, #3
    70ce:	055b      	lsls	r3, r3, #21
    70d0:	0d5b      	lsrs	r3, r3, #21
    70d2:	b29b      	uxth	r3, r3
}
    70d4:	1c18      	adds	r0, r3, #0
    70d6:	46bd      	mov	sp, r7
    70d8:	b002      	add	sp, #8
    70da:	bd80      	pop	{r7, pc}

000070dc <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    70dc:	b580      	push	{r7, lr}
    70de:	b082      	sub	sp, #8
    70e0:	af00      	add	r7, sp, #0
    70e2:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	681b      	ldr	r3, [r3, #0]
    70e8:	8a1b      	ldrh	r3, [r3, #16]
    70ea:	b29b      	uxth	r3, r3
}
    70ec:	1c18      	adds	r0, r3, #0
    70ee:	46bd      	mov	sp, r7
    70f0:	b002      	add	sp, #8
    70f2:	bd80      	pop	{r7, pc}

000070f4 <usb_device_send_remote_wake_up>:
 * \brief USB device send the resume wakeup
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
    70f4:	b580      	push	{r7, lr}
    70f6:	b082      	sub	sp, #8
    70f8:	af00      	add	r7, sp, #0
    70fa:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	681a      	ldr	r2, [r3, #0]
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	891b      	ldrh	r3, [r3, #8]
    7106:	b29b      	uxth	r3, r3
    7108:	2102      	movs	r1, #2
    710a:	430b      	orrs	r3, r1
    710c:	b29b      	uxth	r3, r3
    710e:	8113      	strh	r3, [r2, #8]
}
    7110:	46bd      	mov	sp, r7
    7112:	b002      	add	sp, #8
    7114:	bd80      	pop	{r7, pc}
    7116:	46c0      	nop			; (mov r8, r8)

00007118 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    7118:	b580      	push	{r7, lr}
    711a:	b082      	sub	sp, #8
    711c:	af00      	add	r7, sp, #0
    711e:	6078      	str	r0, [r7, #4]
    7120:	1c0a      	adds	r2, r1, #0
    7122:	1cfb      	adds	r3, r7, #3
    7124:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	681b      	ldr	r3, [r3, #0]
    712a:	1cfa      	adds	r2, r7, #3
    712c:	7811      	ldrb	r1, [r2, #0]
    712e:	2203      	movs	r2, #3
    7130:	400a      	ands	r2, r1
    7132:	b2d1      	uxtb	r1, r2
    7134:	2203      	movs	r2, #3
    7136:	400a      	ands	r2, r1
    7138:	0292      	lsls	r2, r2, #10
    713a:	8918      	ldrh	r0, [r3, #8]
    713c:	4903      	ldr	r1, [pc, #12]	; (714c <usb_device_set_lpm_mode+0x34>)
    713e:	4001      	ands	r1, r0
    7140:	430a      	orrs	r2, r1
    7142:	811a      	strh	r2, [r3, #8]
}
    7144:	46bd      	mov	sp, r7
    7146:	b002      	add	sp, #8
    7148:	bd80      	pop	{r7, pc}
    714a:	46c0      	nop			; (mov r8, r8)
    714c:	fffff3ff 	.word	0xfffff3ff

00007150 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7150:	b580      	push	{r7, lr}
    7152:	b082      	sub	sp, #8
    7154:	af00      	add	r7, sp, #0
    7156:	1c02      	adds	r2, r0, #0
    7158:	1dfb      	adds	r3, r7, #7
    715a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    715c:	1dfb      	adds	r3, r7, #7
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	1c18      	adds	r0, r3, #0
    7162:	4b03      	ldr	r3, [pc, #12]	; (7170 <port_get_group_from_gpio_pin+0x20>)
    7164:	4798      	blx	r3
    7166:	1c03      	adds	r3, r0, #0
}
    7168:	1c18      	adds	r0, r3, #0
    716a:	46bd      	mov	sp, r7
    716c:	b002      	add	sp, #8
    716e:	bd80      	pop	{r7, pc}
    7170:	00006fb9 	.word	0x00006fb9

00007174 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    7174:	b580      	push	{r7, lr}
    7176:	b084      	sub	sp, #16
    7178:	af00      	add	r7, sp, #0
    717a:	1c02      	adds	r2, r0, #0
    717c:	1dfb      	adds	r3, r7, #7
    717e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    7180:	1dfb      	adds	r3, r7, #7
    7182:	781b      	ldrb	r3, [r3, #0]
    7184:	1c18      	adds	r0, r3, #0
    7186:	4b0c      	ldr	r3, [pc, #48]	; (71b8 <port_pin_get_input_level+0x44>)
    7188:	4798      	blx	r3
    718a:	1c03      	adds	r3, r0, #0
    718c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    718e:	1dfb      	adds	r3, r7, #7
    7190:	781a      	ldrb	r2, [r3, #0]
    7192:	231f      	movs	r3, #31
    7194:	4013      	ands	r3, r2
    7196:	2201      	movs	r2, #1
    7198:	1c11      	adds	r1, r2, #0
    719a:	4099      	lsls	r1, r3
    719c:	1c0b      	adds	r3, r1, #0
    719e:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    71a0:	68fb      	ldr	r3, [r7, #12]
    71a2:	6a1b      	ldr	r3, [r3, #32]
    71a4:	68ba      	ldr	r2, [r7, #8]
    71a6:	4013      	ands	r3, r2
    71a8:	1e5a      	subs	r2, r3, #1
    71aa:	4193      	sbcs	r3, r2
    71ac:	b2db      	uxtb	r3, r3
}
    71ae:	1c18      	adds	r0, r3, #0
    71b0:	46bd      	mov	sp, r7
    71b2:	b004      	add	sp, #16
    71b4:	bd80      	pop	{r7, pc}
    71b6:	46c0      	nop			; (mov r8, r8)
    71b8:	00007151 	.word	0x00007151

000071bc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    71bc:	b580      	push	{r7, lr}
    71be:	b084      	sub	sp, #16
    71c0:	af00      	add	r7, sp, #0
    71c2:	1c02      	adds	r2, r0, #0
    71c4:	1dfb      	adds	r3, r7, #7
    71c6:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    71c8:	1dfb      	adds	r3, r7, #7
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	4a0b      	ldr	r2, [pc, #44]	; (71fc <sleepmgr_lock_mode+0x40>)
    71ce:	5cd3      	ldrb	r3, [r2, r3]
    71d0:	2bff      	cmp	r3, #255	; 0xff
    71d2:	d100      	bne.n	71d6 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    71d4:	e7fe      	b.n	71d4 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    71d6:	4b0a      	ldr	r3, [pc, #40]	; (7200 <sleepmgr_lock_mode+0x44>)
    71d8:	4798      	blx	r3
    71da:	1c03      	adds	r3, r0, #0
    71dc:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    71de:	1dfb      	adds	r3, r7, #7
    71e0:	781b      	ldrb	r3, [r3, #0]
    71e2:	4a06      	ldr	r2, [pc, #24]	; (71fc <sleepmgr_lock_mode+0x40>)
    71e4:	5cd2      	ldrb	r2, [r2, r3]
    71e6:	3201      	adds	r2, #1
    71e8:	b2d1      	uxtb	r1, r2
    71ea:	4a04      	ldr	r2, [pc, #16]	; (71fc <sleepmgr_lock_mode+0x40>)
    71ec:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    71ee:	68fb      	ldr	r3, [r7, #12]
    71f0:	1c18      	adds	r0, r3, #0
    71f2:	4b04      	ldr	r3, [pc, #16]	; (7204 <sleepmgr_lock_mode+0x48>)
    71f4:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    71f6:	46bd      	mov	sp, r7
    71f8:	b004      	add	sp, #16
    71fa:	bd80      	pop	{r7, pc}
    71fc:	20007130 	.word	0x20007130
    7200:	00006f41 	.word	0x00006f41
    7204:	00006f89 	.word	0x00006f89

00007208 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    7208:	b580      	push	{r7, lr}
    720a:	b084      	sub	sp, #16
    720c:	af00      	add	r7, sp, #0
    720e:	1c02      	adds	r2, r0, #0
    7210:	1dfb      	adds	r3, r7, #7
    7212:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    7214:	1dfb      	adds	r3, r7, #7
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	4a0b      	ldr	r2, [pc, #44]	; (7248 <sleepmgr_unlock_mode+0x40>)
    721a:	5cd3      	ldrb	r3, [r2, r3]
    721c:	2b00      	cmp	r3, #0
    721e:	d100      	bne.n	7222 <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    7220:	e7fe      	b.n	7220 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    7222:	4b0a      	ldr	r3, [pc, #40]	; (724c <sleepmgr_unlock_mode+0x44>)
    7224:	4798      	blx	r3
    7226:	1c03      	adds	r3, r0, #0
    7228:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    722a:	1dfb      	adds	r3, r7, #7
    722c:	781b      	ldrb	r3, [r3, #0]
    722e:	4a06      	ldr	r2, [pc, #24]	; (7248 <sleepmgr_unlock_mode+0x40>)
    7230:	5cd2      	ldrb	r2, [r2, r3]
    7232:	3a01      	subs	r2, #1
    7234:	b2d1      	uxtb	r1, r2
    7236:	4a04      	ldr	r2, [pc, #16]	; (7248 <sleepmgr_unlock_mode+0x40>)
    7238:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	1c18      	adds	r0, r3, #0
    723e:	4b04      	ldr	r3, [pc, #16]	; (7250 <sleepmgr_unlock_mode+0x48>)
    7240:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    7242:	46bd      	mov	sp, r7
    7244:	b004      	add	sp, #16
    7246:	bd80      	pop	{r7, pc}
    7248:	20007130 	.word	0x20007130
    724c:	00006f41 	.word	0x00006f41
    7250:	00006f89 	.word	0x00006f89

00007254 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    7254:	b580      	push	{r7, lr}
    7256:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    7258:	4b0b      	ldr	r3, [pc, #44]	; (7288 <udd_wait_clock_ready+0x34>)
    725a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    725c:	b29b      	uxth	r3, r3
    725e:	1c1a      	adds	r2, r3, #0
    7260:	2320      	movs	r3, #32
    7262:	4013      	ands	r3, r2
    7264:	d107      	bne.n	7276 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    7266:	46c0      	nop			; (mov r8, r8)
    7268:	4b07      	ldr	r3, [pc, #28]	; (7288 <udd_wait_clock_ready+0x34>)
    726a:	68da      	ldr	r2, [r3, #12]
    726c:	23d0      	movs	r3, #208	; 0xd0
    726e:	4013      	ands	r3, r2
    7270:	2bd0      	cmp	r3, #208	; 0xd0
    7272:	d1f9      	bne.n	7268 <udd_wait_clock_ready+0x14>
    7274:	e005      	b.n	7282 <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    7276:	46c0      	nop			; (mov r8, r8)
    7278:	4b03      	ldr	r3, [pc, #12]	; (7288 <udd_wait_clock_ready+0x34>)
    727a:	68da      	ldr	r2, [r3, #12]
    727c:	2310      	movs	r3, #16
    727e:	4013      	ands	r3, r2
    7280:	d0fa      	beq.n	7278 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    7282:	46bd      	mov	sp, r7
    7284:	bd80      	pop	{r7, pc}
    7286:	46c0      	nop			; (mov r8, r8)
    7288:	40000800 	.word	0x40000800

0000728c <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    728c:	b580      	push	{r7, lr}
    728e:	b084      	sub	sp, #16
    7290:	af00      	add	r7, sp, #0
    7292:	1c02      	adds	r2, r0, #0
    7294:	1dfb      	adds	r3, r7, #7
    7296:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    7298:	1c3a      	adds	r2, r7, #0
    729a:	320c      	adds	r2, #12
    729c:	4b16      	ldr	r3, [pc, #88]	; (72f8 <udd_sleep_mode+0x6c>)
    729e:	1c11      	adds	r1, r2, #0
    72a0:	1c1a      	adds	r2, r3, #0
    72a2:	2304      	movs	r3, #4
    72a4:	1c08      	adds	r0, r1, #0
    72a6:	1c11      	adds	r1, r2, #0
    72a8:	1c1a      	adds	r2, r3, #0
    72aa:	4b14      	ldr	r3, [pc, #80]	; (72fc <udd_sleep_mode+0x70>)
    72ac:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    72ae:	4b14      	ldr	r3, [pc, #80]	; (7300 <udd_sleep_mode+0x74>)
    72b0:	781b      	ldrb	r3, [r3, #0]
    72b2:	1dfa      	adds	r2, r7, #7
    72b4:	7812      	ldrb	r2, [r2, #0]
    72b6:	429a      	cmp	r2, r3
    72b8:	d01b      	beq.n	72f2 <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    72ba:	1dfb      	adds	r3, r7, #7
    72bc:	781b      	ldrb	r3, [r3, #0]
    72be:	2b00      	cmp	r3, #0
    72c0:	d007      	beq.n	72d2 <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    72c2:	1dfb      	adds	r3, r7, #7
    72c4:	781b      	ldrb	r3, [r3, #0]
    72c6:	1c3a      	adds	r2, r7, #0
    72c8:	320c      	adds	r2, #12
    72ca:	5cd3      	ldrb	r3, [r2, r3]
    72cc:	1c18      	adds	r0, r3, #0
    72ce:	4b0d      	ldr	r3, [pc, #52]	; (7304 <udd_sleep_mode+0x78>)
    72d0:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    72d2:	4b0b      	ldr	r3, [pc, #44]	; (7300 <udd_sleep_mode+0x74>)
    72d4:	781b      	ldrb	r3, [r3, #0]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d007      	beq.n	72ea <udd_sleep_mode+0x5e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    72da:	4b09      	ldr	r3, [pc, #36]	; (7300 <udd_sleep_mode+0x74>)
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	1c3a      	adds	r2, r7, #0
    72e0:	320c      	adds	r2, #12
    72e2:	5cd3      	ldrb	r3, [r2, r3]
    72e4:	1c18      	adds	r0, r3, #0
    72e6:	4b08      	ldr	r3, [pc, #32]	; (7308 <udd_sleep_mode+0x7c>)
    72e8:	4798      	blx	r3
	}
	udd_state = new_state;
    72ea:	4b05      	ldr	r3, [pc, #20]	; (7300 <udd_sleep_mode+0x74>)
    72ec:	1dfa      	adds	r2, r7, #7
    72ee:	7812      	ldrb	r2, [r2, #0]
    72f0:	701a      	strb	r2, [r3, #0]
}
    72f2:	46bd      	mov	sp, r7
    72f4:	b004      	add	sp, #16
    72f6:	bd80      	pop	{r7, pc}
    72f8:	0000b5b4 	.word	0x0000b5b4
    72fc:	0000b325 	.word	0x0000b325
    7300:	20007104 	.word	0x20007104
    7304:	000071bd 	.word	0x000071bd
    7308:	00007209 	.word	0x00007209

0000730c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    730c:	b580      	push	{r7, lr}
    730e:	b082      	sub	sp, #8
    7310:	af00      	add	r7, sp, #0
    7312:	1c02      	adds	r2, r0, #0
    7314:	1dfb      	adds	r3, r7, #7
    7316:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    7318:	1dfb      	adds	r3, r7, #7
    731a:	781a      	ldrb	r2, [r3, #0]
    731c:	230f      	movs	r3, #15
    731e:	4013      	ands	r3, r2
    7320:	005a      	lsls	r2, r3, #1
    7322:	1dfb      	adds	r3, r7, #7
    7324:	781b      	ldrb	r3, [r3, #0]
    7326:	09db      	lsrs	r3, r3, #7
    7328:	b2db      	uxtb	r3, r3
    732a:	18d3      	adds	r3, r2, r3
    732c:	1e9a      	subs	r2, r3, #2
    732e:	1c13      	adds	r3, r2, #0
    7330:	009b      	lsls	r3, r3, #2
    7332:	189b      	adds	r3, r3, r2
    7334:	009b      	lsls	r3, r3, #2
    7336:	4a03      	ldr	r2, [pc, #12]	; (7344 <udd_ep_get_job+0x38>)
    7338:	189b      	adds	r3, r3, r2
}
    733a:	1c18      	adds	r0, r3, #0
    733c:	46bd      	mov	sp, r7
    733e:	b002      	add	sp, #8
    7340:	bd80      	pop	{r7, pc}
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	20006fec 	.word	0x20006fec

00007348 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    7348:	b590      	push	{r4, r7, lr}
    734a:	b089      	sub	sp, #36	; 0x24
    734c:	af00      	add	r7, sp, #0
    734e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7354:	1c3b      	adds	r3, r7, #0
    7356:	3317      	adds	r3, #23
    7358:	69ba      	ldr	r2, [r7, #24]
    735a:	7992      	ldrb	r2, [r2, #6]
    735c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    735e:	1c3b      	adds	r3, r7, #0
    7360:	3317      	adds	r3, #23
    7362:	781b      	ldrb	r3, [r3, #0]
    7364:	1c18      	adds	r0, r3, #0
    7366:	4b55      	ldr	r3, [pc, #340]	; (74bc <udd_ep_trans_in_next+0x174>)
    7368:	4798      	blx	r3
    736a:	1c03      	adds	r3, r0, #0
    736c:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    736e:	1c3b      	adds	r3, r7, #0
    7370:	330f      	adds	r3, #15
    7372:	1c3a      	adds	r2, r7, #0
    7374:	3217      	adds	r2, #23
    7376:	7811      	ldrb	r1, [r2, #0]
    7378:	220f      	movs	r2, #15
    737a:	400a      	ands	r2, r1
    737c:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    737e:	1c3b      	adds	r3, r7, #0
    7380:	330c      	adds	r3, #12
    7382:	693a      	ldr	r2, [r7, #16]
    7384:	8a12      	ldrh	r2, [r2, #16]
    7386:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    7388:	1c3b      	adds	r3, r7, #0
    738a:	330a      	adds	r3, #10
    738c:	69ba      	ldr	r2, [r7, #24]
    738e:	8852      	ldrh	r2, [r2, #2]
    7390:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    7392:	693b      	ldr	r3, [r7, #16]
    7394:	68da      	ldr	r2, [r3, #12]
    7396:	1c3b      	adds	r3, r7, #0
    7398:	330a      	adds	r3, #10
    739a:	881b      	ldrh	r3, [r3, #0]
    739c:	18d2      	adds	r2, r2, r3
    739e:	693b      	ldr	r3, [r7, #16]
    73a0:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    73a2:	693b      	ldr	r3, [r7, #16]
    73a4:	68da      	ldr	r2, [r3, #12]
    73a6:	693b      	ldr	r3, [r7, #16]
    73a8:	689b      	ldr	r3, [r3, #8]
    73aa:	429a      	cmp	r2, r3
    73ac:	d053      	beq.n	7456 <udd_ep_trans_in_next+0x10e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    73ae:	693b      	ldr	r3, [r7, #16]
    73b0:	689b      	ldr	r3, [r3, #8]
    73b2:	b299      	uxth	r1, r3
    73b4:	693b      	ldr	r3, [r7, #16]
    73b6:	68db      	ldr	r3, [r3, #12]
    73b8:	b29a      	uxth	r2, r3
    73ba:	1c3b      	adds	r3, r7, #0
    73bc:	331e      	adds	r3, #30
    73be:	1a8a      	subs	r2, r1, r2
    73c0:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    73c2:	1c3b      	adds	r3, r7, #0
    73c4:	331e      	adds	r3, #30
    73c6:	881a      	ldrh	r2, [r3, #0]
    73c8:	4b3d      	ldr	r3, [pc, #244]	; (74c0 <udd_ep_trans_in_next+0x178>)
    73ca:	429a      	cmp	r2, r3
    73cc:	d90e      	bls.n	73ec <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    73ce:	1c3b      	adds	r3, r7, #0
    73d0:	330c      	adds	r3, #12
    73d2:	881a      	ldrh	r2, [r3, #0]
    73d4:	493a      	ldr	r1, [pc, #232]	; (74c0 <udd_ep_trans_in_next+0x178>)
    73d6:	4b3b      	ldr	r3, [pc, #236]	; (74c4 <udd_ep_trans_in_next+0x17c>)
    73d8:	1c08      	adds	r0, r1, #0
    73da:	1c11      	adds	r1, r2, #0
    73dc:	4798      	blx	r3
    73de:	1c0b      	adds	r3, r1, #0
    73e0:	b29a      	uxth	r2, r3
    73e2:	1c3b      	adds	r3, r7, #0
    73e4:	331e      	adds	r3, #30
    73e6:	4936      	ldr	r1, [pc, #216]	; (74c0 <udd_ep_trans_in_next+0x178>)
    73e8:	1a8a      	subs	r2, r1, r2
    73ea:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    73ec:	693b      	ldr	r3, [r7, #16]
    73ee:	7c9b      	ldrb	r3, [r3, #18]
    73f0:	079b      	lsls	r3, r3, #30
    73f2:	0fdb      	lsrs	r3, r3, #31
    73f4:	b2db      	uxtb	r3, r3
    73f6:	2b00      	cmp	r3, #0
    73f8:	d00f      	beq.n	741a <udd_ep_trans_in_next+0xd2>
    73fa:	1c3a      	adds	r2, r7, #0
    73fc:	321e      	adds	r2, #30
    73fe:	1c3b      	adds	r3, r7, #0
    7400:	330c      	adds	r3, #12
    7402:	8811      	ldrh	r1, [r2, #0]
    7404:	881a      	ldrh	r2, [r3, #0]
    7406:	4b30      	ldr	r3, [pc, #192]	; (74c8 <udd_ep_trans_in_next+0x180>)
    7408:	1c08      	adds	r0, r1, #0
    740a:	1c11      	adds	r1, r2, #0
    740c:	4798      	blx	r3
    740e:	1c0b      	adds	r3, r1, #0
    7410:	b29b      	uxth	r3, r3
    7412:	2b00      	cmp	r3, #0
    7414:	d101      	bne.n	741a <udd_ep_trans_in_next+0xd2>
    7416:	2301      	movs	r3, #1
    7418:	e000      	b.n	741c <udd_ep_trans_in_next+0xd4>
    741a:	2300      	movs	r3, #0
    741c:	b2db      	uxtb	r3, r3
    741e:	1c1a      	adds	r2, r3, #0
    7420:	2301      	movs	r3, #1
    7422:	4013      	ands	r3, r2
    7424:	b2d9      	uxtb	r1, r3
    7426:	693b      	ldr	r3, [r7, #16]
    7428:	2201      	movs	r2, #1
    742a:	400a      	ands	r2, r1
    742c:	1892      	adds	r2, r2, r2
    742e:	7c99      	ldrb	r1, [r3, #18]
    7430:	2002      	movs	r0, #2
    7432:	4381      	bics	r1, r0
    7434:	430a      	orrs	r2, r1
    7436:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7438:	693b      	ldr	r3, [r7, #16]
    743a:	685a      	ldr	r2, [r3, #4]
    743c:	693b      	ldr	r3, [r7, #16]
    743e:	68db      	ldr	r3, [r3, #12]
    7440:	18d2      	adds	r2, r2, r3
    7442:	1c3b      	adds	r3, r7, #0
    7444:	331e      	adds	r3, #30
    7446:	881b      	ldrh	r3, [r3, #0]
    7448:	4820      	ldr	r0, [pc, #128]	; (74cc <udd_ep_trans_in_next+0x184>)
    744a:	1c39      	adds	r1, r7, #0
    744c:	310f      	adds	r1, #15
    744e:	7809      	ldrb	r1, [r1, #0]
    7450:	4c1f      	ldr	r4, [pc, #124]	; (74d0 <udd_ep_trans_in_next+0x188>)
    7452:	47a0      	blx	r4
		return;
    7454:	e02f      	b.n	74b6 <udd_ep_trans_in_next+0x16e>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    7456:	693b      	ldr	r3, [r7, #16]
    7458:	7c9b      	ldrb	r3, [r3, #18]
    745a:	079b      	lsls	r3, r3, #30
    745c:	0fdb      	lsrs	r3, r3, #31
    745e:	b2db      	uxtb	r3, r3
    7460:	2b00      	cmp	r3, #0
    7462:	d014      	beq.n	748e <udd_ep_trans_in_next+0x146>
		ptr_job->b_shortpacket = false;
    7464:	693b      	ldr	r3, [r7, #16]
    7466:	7c9a      	ldrb	r2, [r3, #18]
    7468:	2102      	movs	r1, #2
    746a:	438a      	bics	r2, r1
    746c:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    746e:	693b      	ldr	r3, [r7, #16]
    7470:	685a      	ldr	r2, [r3, #4]
    7472:	693b      	ldr	r3, [r7, #16]
    7474:	68db      	ldr	r3, [r3, #12]
    7476:	18d3      	adds	r3, r2, r3
    7478:	4914      	ldr	r1, [pc, #80]	; (74cc <udd_ep_trans_in_next+0x184>)
    747a:	1c3a      	adds	r2, r7, #0
    747c:	320f      	adds	r2, #15
    747e:	7812      	ldrb	r2, [r2, #0]
    7480:	1c08      	adds	r0, r1, #0
    7482:	1c11      	adds	r1, r2, #0
    7484:	1c1a      	adds	r2, r3, #0
    7486:	2300      	movs	r3, #0
    7488:	4c11      	ldr	r4, [pc, #68]	; (74d0 <udd_ep_trans_in_next+0x188>)
    748a:	47a0      	blx	r4
		return;
    748c:	e013      	b.n	74b6 <udd_ep_trans_in_next+0x16e>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    748e:	693b      	ldr	r3, [r7, #16]
    7490:	7c9a      	ldrb	r2, [r3, #18]
    7492:	2101      	movs	r1, #1
    7494:	438a      	bics	r2, r1
    7496:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    7498:	693b      	ldr	r3, [r7, #16]
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	2b00      	cmp	r3, #0
    749e:	d00a      	beq.n	74b6 <udd_ep_trans_in_next+0x16e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    74a0:	693b      	ldr	r3, [r7, #16]
    74a2:	681c      	ldr	r4, [r3, #0]
    74a4:	693b      	ldr	r3, [r7, #16]
    74a6:	68da      	ldr	r2, [r3, #12]
    74a8:	1c3b      	adds	r3, r7, #0
    74aa:	3317      	adds	r3, #23
    74ac:	781b      	ldrb	r3, [r3, #0]
    74ae:	2000      	movs	r0, #0
    74b0:	1c11      	adds	r1, r2, #0
    74b2:	1c1a      	adds	r2, r3, #0
    74b4:	47a0      	blx	r4
	}
}
    74b6:	46bd      	mov	sp, r7
    74b8:	b009      	add	sp, #36	; 0x24
    74ba:	bd90      	pop	{r4, r7, pc}
    74bc:	0000730d 	.word	0x0000730d
    74c0:	00001fff 	.word	0x00001fff
    74c4:	0000b23d 	.word	0x0000b23d
    74c8:	0000b17d 	.word	0x0000b17d
    74cc:	200071c8 	.word	0x200071c8
    74d0:	00009ae9 	.word	0x00009ae9

000074d4 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    74d4:	b5b0      	push	{r4, r5, r7, lr}
    74d6:	b088      	sub	sp, #32
    74d8:	af00      	add	r7, sp, #0
    74da:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    74dc:	687b      	ldr	r3, [r7, #4]
    74de:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    74e0:	1c3b      	adds	r3, r7, #0
    74e2:	3317      	adds	r3, #23
    74e4:	69ba      	ldr	r2, [r7, #24]
    74e6:	7992      	ldrb	r2, [r2, #6]
    74e8:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    74ea:	1c3b      	adds	r3, r7, #0
    74ec:	3317      	adds	r3, #23
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	1c18      	adds	r0, r3, #0
    74f2:	4b67      	ldr	r3, [pc, #412]	; (7690 <udd_ep_trans_out_next+0x1bc>)
    74f4:	4798      	blx	r3
    74f6:	1c03      	adds	r3, r0, #0
    74f8:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    74fa:	1c3b      	adds	r3, r7, #0
    74fc:	330f      	adds	r3, #15
    74fe:	1c3a      	adds	r2, r7, #0
    7500:	3217      	adds	r2, #23
    7502:	7811      	ldrb	r1, [r2, #0]
    7504:	220f      	movs	r2, #15
    7506:	400a      	ands	r2, r1
    7508:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    750a:	1c3b      	adds	r3, r7, #0
    750c:	330c      	adds	r3, #12
    750e:	693a      	ldr	r2, [r7, #16]
    7510:	8a12      	ldrh	r2, [r2, #16]
    7512:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    7514:	1c3b      	adds	r3, r7, #0
    7516:	330a      	adds	r3, #10
    7518:	69ba      	ldr	r2, [r7, #24]
    751a:	8812      	ldrh	r2, [r2, #0]
    751c:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    751e:	693b      	ldr	r3, [r7, #16]
    7520:	7c9b      	ldrb	r3, [r3, #18]
    7522:	075b      	lsls	r3, r3, #29
    7524:	0fdb      	lsrs	r3, r3, #31
    7526:	b2db      	uxtb	r3, r3
    7528:	2b00      	cmp	r3, #0
    752a:	d01a      	beq.n	7562 <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    752c:	693b      	ldr	r3, [r7, #16]
    752e:	685a      	ldr	r2, [r3, #4]
    7530:	693b      	ldr	r3, [r7, #16]
    7532:	68db      	ldr	r3, [r3, #12]
    7534:	18d5      	adds	r5, r2, r3
    7536:	1c3b      	adds	r3, r7, #0
    7538:	330f      	adds	r3, #15
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	3b01      	subs	r3, #1
    753e:	00da      	lsls	r2, r3, #3
    7540:	4b54      	ldr	r3, [pc, #336]	; (7694 <udd_ep_trans_out_next+0x1c0>)
    7542:	18d4      	adds	r4, r2, r3
    7544:	693b      	ldr	r3, [r7, #16]
    7546:	6899      	ldr	r1, [r3, #8]
    7548:	1c3b      	adds	r3, r7, #0
    754a:	330c      	adds	r3, #12
    754c:	881a      	ldrh	r2, [r3, #0]
    754e:	4b52      	ldr	r3, [pc, #328]	; (7698 <udd_ep_trans_out_next+0x1c4>)
    7550:	1c08      	adds	r0, r1, #0
    7552:	1c11      	adds	r1, r2, #0
    7554:	4798      	blx	r3
    7556:	1c0b      	adds	r3, r1, #0
    7558:	1c28      	adds	r0, r5, #0
    755a:	1c21      	adds	r1, r4, #0
    755c:	1c1a      	adds	r2, r3, #0
    755e:	4b4f      	ldr	r3, [pc, #316]	; (769c <udd_ep_trans_out_next+0x1c8>)
    7560:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    7562:	693b      	ldr	r3, [r7, #16]
    7564:	68da      	ldr	r2, [r3, #12]
    7566:	1c3b      	adds	r3, r7, #0
    7568:	330a      	adds	r3, #10
    756a:	881b      	ldrh	r3, [r3, #0]
    756c:	18d2      	adds	r2, r2, r3
    756e:	693b      	ldr	r3, [r7, #16]
    7570:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    7572:	693b      	ldr	r3, [r7, #16]
    7574:	68da      	ldr	r2, [r3, #12]
    7576:	693b      	ldr	r3, [r7, #16]
    7578:	689b      	ldr	r3, [r3, #8]
    757a:	429a      	cmp	r2, r3
    757c:	d903      	bls.n	7586 <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    757e:	693b      	ldr	r3, [r7, #16]
    7580:	689a      	ldr	r2, [r3, #8]
    7582:	693b      	ldr	r3, [r7, #16]
    7584:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    7586:	69bb      	ldr	r3, [r7, #24]
    7588:	889b      	ldrh	r3, [r3, #4]
    758a:	1c3a      	adds	r2, r7, #0
    758c:	320a      	adds	r2, #10
    758e:	8812      	ldrh	r2, [r2, #0]
    7590:	429a      	cmp	r2, r3
    7592:	d165      	bne.n	7660 <udd_ep_trans_out_next+0x18c>
    7594:	693b      	ldr	r3, [r7, #16]
    7596:	68da      	ldr	r2, [r3, #12]
    7598:	693b      	ldr	r3, [r7, #16]
    759a:	689b      	ldr	r3, [r3, #8]
    759c:	429a      	cmp	r2, r3
    759e:	d05f      	beq.n	7660 <udd_ep_trans_out_next+0x18c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    75a0:	693b      	ldr	r3, [r7, #16]
    75a2:	689b      	ldr	r3, [r3, #8]
    75a4:	b299      	uxth	r1, r3
    75a6:	693b      	ldr	r3, [r7, #16]
    75a8:	68db      	ldr	r3, [r3, #12]
    75aa:	b29a      	uxth	r2, r3
    75ac:	1c3b      	adds	r3, r7, #0
    75ae:	331e      	adds	r3, #30
    75b0:	1a8a      	subs	r2, r1, r2
    75b2:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    75b4:	1c3b      	adds	r3, r7, #0
    75b6:	331e      	adds	r3, #30
    75b8:	881a      	ldrh	r2, [r3, #0]
    75ba:	4b39      	ldr	r3, [pc, #228]	; (76a0 <udd_ep_trans_out_next+0x1cc>)
    75bc:	429a      	cmp	r2, r3
    75be:	d90f      	bls.n	75e0 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    75c0:	1c3b      	adds	r3, r7, #0
    75c2:	330c      	adds	r3, #12
    75c4:	881a      	ldrh	r2, [r3, #0]
    75c6:	4936      	ldr	r1, [pc, #216]	; (76a0 <udd_ep_trans_out_next+0x1cc>)
    75c8:	4b36      	ldr	r3, [pc, #216]	; (76a4 <udd_ep_trans_out_next+0x1d0>)
    75ca:	1c08      	adds	r0, r1, #0
    75cc:	1c11      	adds	r1, r2, #0
    75ce:	4798      	blx	r3
    75d0:	1c0b      	adds	r3, r1, #0
    75d2:	b29a      	uxth	r2, r3
    75d4:	1c3b      	adds	r3, r7, #0
    75d6:	331e      	adds	r3, #30
    75d8:	4931      	ldr	r1, [pc, #196]	; (76a0 <udd_ep_trans_out_next+0x1cc>)
    75da:	1a8a      	subs	r2, r1, r2
    75dc:	801a      	strh	r2, [r3, #0]
    75de:	e012      	b.n	7606 <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    75e0:	1c3a      	adds	r2, r7, #0
    75e2:	321e      	adds	r2, #30
    75e4:	1c3b      	adds	r3, r7, #0
    75e6:	330c      	adds	r3, #12
    75e8:	8811      	ldrh	r1, [r2, #0]
    75ea:	881a      	ldrh	r2, [r3, #0]
    75ec:	4b2a      	ldr	r3, [pc, #168]	; (7698 <udd_ep_trans_out_next+0x1c4>)
    75ee:	1c08      	adds	r0, r1, #0
    75f0:	1c11      	adds	r1, r2, #0
    75f2:	4798      	blx	r3
    75f4:	1c0b      	adds	r3, r1, #0
    75f6:	b29a      	uxth	r2, r3
    75f8:	1c3b      	adds	r3, r7, #0
    75fa:	331e      	adds	r3, #30
    75fc:	1c39      	adds	r1, r7, #0
    75fe:	311e      	adds	r1, #30
    7600:	8809      	ldrh	r1, [r1, #0]
    7602:	1a8a      	subs	r2, r1, r2
    7604:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    7606:	1c3a      	adds	r2, r7, #0
    7608:	321e      	adds	r2, #30
    760a:	1c3b      	adds	r3, r7, #0
    760c:	330c      	adds	r3, #12
    760e:	8812      	ldrh	r2, [r2, #0]
    7610:	881b      	ldrh	r3, [r3, #0]
    7612:	429a      	cmp	r2, r3
    7614:	d215      	bcs.n	7642 <udd_ep_trans_out_next+0x16e>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    7616:	693b      	ldr	r3, [r7, #16]
    7618:	7c9a      	ldrb	r2, [r3, #18]
    761a:	2104      	movs	r1, #4
    761c:	430a      	orrs	r2, r1
    761e:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    7620:	1c3b      	adds	r3, r7, #0
    7622:	330f      	adds	r3, #15
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	3b01      	subs	r3, #1
    7628:	00da      	lsls	r2, r3, #3
    762a:	4b1a      	ldr	r3, [pc, #104]	; (7694 <udd_ep_trans_out_next+0x1c0>)
    762c:	18d2      	adds	r2, r2, r3
    762e:	1c3b      	adds	r3, r7, #0
    7630:	330c      	adds	r3, #12
    7632:	881b      	ldrh	r3, [r3, #0]
    7634:	481c      	ldr	r0, [pc, #112]	; (76a8 <udd_ep_trans_out_next+0x1d4>)
    7636:	1c39      	adds	r1, r7, #0
    7638:	310f      	adds	r1, #15
    763a:	7809      	ldrb	r1, [r1, #0]
    763c:	4c1b      	ldr	r4, [pc, #108]	; (76ac <udd_ep_trans_out_next+0x1d8>)
    763e:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    7640:	e022      	b.n	7688 <udd_ep_trans_out_next+0x1b4>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    7642:	693b      	ldr	r3, [r7, #16]
    7644:	685a      	ldr	r2, [r3, #4]
    7646:	693b      	ldr	r3, [r7, #16]
    7648:	68db      	ldr	r3, [r3, #12]
    764a:	18d2      	adds	r2, r2, r3
    764c:	1c3b      	adds	r3, r7, #0
    764e:	331e      	adds	r3, #30
    7650:	881b      	ldrh	r3, [r3, #0]
    7652:	4815      	ldr	r0, [pc, #84]	; (76a8 <udd_ep_trans_out_next+0x1d4>)
    7654:	1c39      	adds	r1, r7, #0
    7656:	310f      	adds	r1, #15
    7658:	7809      	ldrb	r1, [r1, #0]
    765a:	4c14      	ldr	r4, [pc, #80]	; (76ac <udd_ep_trans_out_next+0x1d8>)
    765c:	47a0      	blx	r4
		}
		return;
    765e:	e013      	b.n	7688 <udd_ep_trans_out_next+0x1b4>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    7660:	693b      	ldr	r3, [r7, #16]
    7662:	7c9a      	ldrb	r2, [r3, #18]
    7664:	2101      	movs	r1, #1
    7666:	438a      	bics	r2, r1
    7668:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    766a:	693b      	ldr	r3, [r7, #16]
    766c:	681b      	ldr	r3, [r3, #0]
    766e:	2b00      	cmp	r3, #0
    7670:	d00a      	beq.n	7688 <udd_ep_trans_out_next+0x1b4>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    7672:	693b      	ldr	r3, [r7, #16]
    7674:	681c      	ldr	r4, [r3, #0]
    7676:	693b      	ldr	r3, [r7, #16]
    7678:	68da      	ldr	r2, [r3, #12]
    767a:	1c3b      	adds	r3, r7, #0
    767c:	3317      	adds	r3, #23
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	2000      	movs	r0, #0
    7682:	1c11      	adds	r1, r2, #0
    7684:	1c1a      	adds	r2, r3, #0
    7686:	47a0      	blx	r4
	}
}
    7688:	46bd      	mov	sp, r7
    768a:	b008      	add	sp, #32
    768c:	bdb0      	pop	{r4, r5, r7, pc}
    768e:	46c0      	nop			; (mov r8, r8)
    7690:	0000730d 	.word	0x0000730d
    7694:	20007190 	.word	0x20007190
    7698:	0000b17d 	.word	0x0000b17d
    769c:	0000b325 	.word	0x0000b325
    76a0:	00001fff 	.word	0x00001fff
    76a4:	0000b23d 	.word	0x0000b23d
    76a8:	200071c8 	.word	0x200071c8
    76ac:	00009ba1 	.word	0x00009ba1

000076b0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    76b0:	b580      	push	{r7, lr}
    76b2:	b084      	sub	sp, #16
    76b4:	af00      	add	r7, sp, #0
    76b6:	6078      	str	r0, [r7, #4]
    76b8:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    76ba:	683b      	ldr	r3, [r7, #0]
    76bc:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    76be:	1c3b      	adds	r3, r7, #0
    76c0:	330b      	adds	r3, #11
    76c2:	68fa      	ldr	r2, [r7, #12]
    76c4:	7992      	ldrb	r2, [r2, #6]
    76c6:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    76c8:	1c3b      	adds	r3, r7, #0
    76ca:	330b      	adds	r3, #11
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	b25b      	sxtb	r3, r3
    76d0:	2b00      	cmp	r3, #0
    76d2:	da04      	bge.n	76de <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    76d4:	683b      	ldr	r3, [r7, #0]
    76d6:	1c18      	adds	r0, r3, #0
    76d8:	4b04      	ldr	r3, [pc, #16]	; (76ec <udd_ep_transfer_process+0x3c>)
    76da:	4798      	blx	r3
    76dc:	e003      	b.n	76e6 <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    76de:	683b      	ldr	r3, [r7, #0]
    76e0:	1c18      	adds	r0, r3, #0
    76e2:	4b03      	ldr	r3, [pc, #12]	; (76f0 <udd_ep_transfer_process+0x40>)
    76e4:	4798      	blx	r3
	}
}
    76e6:	46bd      	mov	sp, r7
    76e8:	b004      	add	sp, #16
    76ea:	bd80      	pop	{r7, pc}
    76ec:	00007349 	.word	0x00007349
    76f0:	000074d5 	.word	0x000074d5

000076f4 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    76f4:	b590      	push	{r4, r7, lr}
    76f6:	b085      	sub	sp, #20
    76f8:	af00      	add	r7, sp, #0
    76fa:	1c02      	adds	r2, r0, #0
    76fc:	1dfb      	adds	r3, r7, #7
    76fe:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    7700:	4a15      	ldr	r2, [pc, #84]	; (7758 <udd_ep_abort+0x64>)
    7702:	1dfb      	adds	r3, r7, #7
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	1c10      	adds	r0, r2, #0
    7708:	1c19      	adds	r1, r3, #0
    770a:	4b14      	ldr	r3, [pc, #80]	; (775c <udd_ep_abort+0x68>)
    770c:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    770e:	1dfb      	adds	r3, r7, #7
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	1c18      	adds	r0, r3, #0
    7714:	4b12      	ldr	r3, [pc, #72]	; (7760 <udd_ep_abort+0x6c>)
    7716:	4798      	blx	r3
    7718:	1c03      	adds	r3, r0, #0
    771a:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    771c:	68fb      	ldr	r3, [r7, #12]
    771e:	7c9b      	ldrb	r3, [r3, #18]
    7720:	07db      	lsls	r3, r3, #31
    7722:	0fdb      	lsrs	r3, r3, #31
    7724:	b2db      	uxtb	r3, r3
    7726:	2b00      	cmp	r3, #0
    7728:	d100      	bne.n	772c <udd_ep_abort+0x38>
		return;
    772a:	e012      	b.n	7752 <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    772c:	68fb      	ldr	r3, [r7, #12]
    772e:	7c9a      	ldrb	r2, [r3, #18]
    7730:	2101      	movs	r1, #1
    7732:	438a      	bics	r2, r1
    7734:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    7736:	68fb      	ldr	r3, [r7, #12]
    7738:	681b      	ldr	r3, [r3, #0]
    773a:	2b00      	cmp	r3, #0
    773c:	d009      	beq.n	7752 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    773e:	68fb      	ldr	r3, [r7, #12]
    7740:	681c      	ldr	r4, [r3, #0]
    7742:	68fb      	ldr	r3, [r7, #12]
    7744:	68da      	ldr	r2, [r3, #12]
    7746:	1dfb      	adds	r3, r7, #7
    7748:	781b      	ldrb	r3, [r3, #0]
    774a:	2001      	movs	r0, #1
    774c:	1c11      	adds	r1, r2, #0
    774e:	1c1a      	adds	r2, r3, #0
    7750:	47a0      	blx	r4
	}
}
    7752:	46bd      	mov	sp, r7
    7754:	b005      	add	sp, #20
    7756:	bd90      	pop	{r4, r7, pc}
    7758:	200071c8 	.word	0x200071c8
    775c:	00009889 	.word	0x00009889
    7760:	0000730d 	.word	0x0000730d

00007764 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    7764:	b580      	push	{r7, lr}
    7766:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21
	return false;
    7768:	2300      	movs	r3, #0
#endif
}
    776a:	1c18      	adds	r0, r3, #0
    776c:	46bd      	mov	sp, r7
    776e:	bd80      	pop	{r7, pc}

00007770 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    7770:	b580      	push	{r7, lr}
    7772:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    7774:	4b03      	ldr	r3, [pc, #12]	; (7784 <udd_get_frame_number+0x14>)
    7776:	1c18      	adds	r0, r3, #0
    7778:	4b03      	ldr	r3, [pc, #12]	; (7788 <udd_get_frame_number+0x18>)
    777a:	4798      	blx	r3
    777c:	1c03      	adds	r3, r0, #0
}
    777e:	1c18      	adds	r0, r3, #0
    7780:	46bd      	mov	sp, r7
    7782:	bd80      	pop	{r7, pc}
    7784:	200071c8 	.word	0x200071c8
    7788:	000070bd 	.word	0x000070bd

0000778c <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    778c:	b580      	push	{r7, lr}
    778e:	af00      	add	r7, sp, #0
	return usb_device_get_micro_frame_number(&usb_device);
    7790:	4b03      	ldr	r3, [pc, #12]	; (77a0 <udd_get_micro_frame_number+0x14>)
    7792:	1c18      	adds	r0, r3, #0
    7794:	4b03      	ldr	r3, [pc, #12]	; (77a4 <udd_get_micro_frame_number+0x18>)
    7796:	4798      	blx	r3
    7798:	1c03      	adds	r3, r0, #0
}
    779a:	1c18      	adds	r0, r3, #0
    779c:	46bd      	mov	sp, r7
    779e:	bd80      	pop	{r7, pc}
    77a0:	200071c8 	.word	0x200071c8
    77a4:	000070dd 	.word	0x000070dd

000077a8 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b084      	sub	sp, #16
    77ac:	af00      	add	r7, sp, #0
    77ae:	1c02      	adds	r2, r0, #0
    77b0:	1dfb      	adds	r3, r7, #7
    77b2:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    77b4:	1c3b      	adds	r3, r7, #0
    77b6:	3308      	adds	r3, #8
    77b8:	1c18      	adds	r0, r3, #0
    77ba:	4b19      	ldr	r3, [pc, #100]	; (7820 <udd_ep_free+0x78>)
    77bc:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    77be:	1c3b      	adds	r3, r7, #0
    77c0:	330f      	adds	r3, #15
    77c2:	1dfa      	adds	r2, r7, #7
    77c4:	7811      	ldrb	r1, [r2, #0]
    77c6:	220f      	movs	r2, #15
    77c8:	400a      	ands	r2, r1
    77ca:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    77cc:	1dfb      	adds	r3, r7, #7
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	1c18      	adds	r0, r3, #0
    77d2:	4b14      	ldr	r3, [pc, #80]	; (7824 <udd_ep_free+0x7c>)
    77d4:	4798      	blx	r3

	config_ep.ep_address = ep;
    77d6:	1c3b      	adds	r3, r7, #0
    77d8:	3308      	adds	r3, #8
    77da:	1dfa      	adds	r2, r7, #7
    77dc:	7812      	ldrb	r2, [r2, #0]
    77de:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    77e0:	1c3b      	adds	r3, r7, #0
    77e2:	3308      	adds	r3, #8
    77e4:	2200      	movs	r2, #0
    77e6:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    77e8:	4a0f      	ldr	r2, [pc, #60]	; (7828 <udd_ep_free+0x80>)
    77ea:	1c3b      	adds	r3, r7, #0
    77ec:	3308      	adds	r3, #8
    77ee:	1c10      	adds	r0, r2, #0
    77f0:	1c19      	adds	r1, r3, #0
    77f2:	4b0e      	ldr	r3, [pc, #56]	; (782c <udd_ep_free+0x84>)
    77f4:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    77f6:	4a0c      	ldr	r2, [pc, #48]	; (7828 <udd_ep_free+0x80>)
    77f8:	1c3b      	adds	r3, r7, #0
    77fa:	330f      	adds	r3, #15
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	1c10      	adds	r0, r2, #0
    7800:	1c19      	adds	r1, r3, #0
    7802:	2200      	movs	r2, #0
    7804:	4b0a      	ldr	r3, [pc, #40]	; (7830 <udd_ep_free+0x88>)
    7806:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7808:	4a07      	ldr	r2, [pc, #28]	; (7828 <udd_ep_free+0x80>)
    780a:	1dfb      	adds	r3, r7, #7
    780c:	781b      	ldrb	r3, [r3, #0]
    780e:	1c10      	adds	r0, r2, #0
    7810:	1c19      	adds	r1, r3, #0
    7812:	2200      	movs	r2, #0
    7814:	4b07      	ldr	r3, [pc, #28]	; (7834 <udd_ep_free+0x8c>)
    7816:	4798      	blx	r3
}
    7818:	46bd      	mov	sp, r7
    781a:	b004      	add	sp, #16
    781c:	bd80      	pop	{r7, pc}
    781e:	46c0      	nop			; (mov r8, r8)
    7820:	00009311 	.word	0x00009311
    7824:	000076f5 	.word	0x000076f5
    7828:	200071c8 	.word	0x200071c8
    782c:	00009339 	.word	0x00009339
    7830:	00008f79 	.word	0x00008f79
    7834:	00009175 	.word	0x00009175

00007838 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    7838:	b590      	push	{r4, r7, lr}
    783a:	b087      	sub	sp, #28
    783c:	af00      	add	r7, sp, #0
    783e:	1dfb      	adds	r3, r7, #7
    7840:	7018      	strb	r0, [r3, #0]
    7842:	1dbb      	adds	r3, r7, #6
    7844:	7019      	strb	r1, [r3, #0]
    7846:	1d3b      	adds	r3, r7, #4
    7848:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    784a:	1c3b      	adds	r3, r7, #0
    784c:	330c      	adds	r3, #12
    784e:	1c18      	adds	r0, r3, #0
    7850:	4b5a      	ldr	r3, [pc, #360]	; (79bc <udd_ep_alloc+0x184>)
    7852:	4798      	blx	r3

	config_ep.ep_address = ep;
    7854:	1c3b      	adds	r3, r7, #0
    7856:	330c      	adds	r3, #12
    7858:	1dfa      	adds	r2, r7, #7
    785a:	7812      	ldrb	r2, [r2, #0]
    785c:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    785e:	1d3b      	adds	r3, r7, #4
    7860:	881b      	ldrh	r3, [r3, #0]
    7862:	2b08      	cmp	r3, #8
    7864:	d804      	bhi.n	7870 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    7866:	1c3b      	adds	r3, r7, #0
    7868:	330c      	adds	r3, #12
    786a:	2200      	movs	r2, #0
    786c:	705a      	strb	r2, [r3, #1]
    786e:	e045      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 16) {
    7870:	1d3b      	adds	r3, r7, #4
    7872:	881b      	ldrh	r3, [r3, #0]
    7874:	2b10      	cmp	r3, #16
    7876:	d804      	bhi.n	7882 <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    7878:	1c3b      	adds	r3, r7, #0
    787a:	330c      	adds	r3, #12
    787c:	2201      	movs	r2, #1
    787e:	705a      	strb	r2, [r3, #1]
    7880:	e03c      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 32) {
    7882:	1d3b      	adds	r3, r7, #4
    7884:	881b      	ldrh	r3, [r3, #0]
    7886:	2b20      	cmp	r3, #32
    7888:	d804      	bhi.n	7894 <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    788a:	1c3b      	adds	r3, r7, #0
    788c:	330c      	adds	r3, #12
    788e:	2202      	movs	r2, #2
    7890:	705a      	strb	r2, [r3, #1]
    7892:	e033      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 64) {
    7894:	1d3b      	adds	r3, r7, #4
    7896:	881b      	ldrh	r3, [r3, #0]
    7898:	2b40      	cmp	r3, #64	; 0x40
    789a:	d804      	bhi.n	78a6 <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    789c:	1c3b      	adds	r3, r7, #0
    789e:	330c      	adds	r3, #12
    78a0:	2203      	movs	r2, #3
    78a2:	705a      	strb	r2, [r3, #1]
    78a4:	e02a      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 128) {
    78a6:	1d3b      	adds	r3, r7, #4
    78a8:	881b      	ldrh	r3, [r3, #0]
    78aa:	2b80      	cmp	r3, #128	; 0x80
    78ac:	d804      	bhi.n	78b8 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    78ae:	1c3b      	adds	r3, r7, #0
    78b0:	330c      	adds	r3, #12
    78b2:	2204      	movs	r2, #4
    78b4:	705a      	strb	r2, [r3, #1]
    78b6:	e021      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 256) {
    78b8:	1d3b      	adds	r3, r7, #4
    78ba:	881a      	ldrh	r2, [r3, #0]
    78bc:	2380      	movs	r3, #128	; 0x80
    78be:	005b      	lsls	r3, r3, #1
    78c0:	429a      	cmp	r2, r3
    78c2:	d804      	bhi.n	78ce <udd_ep_alloc+0x96>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    78c4:	1c3b      	adds	r3, r7, #0
    78c6:	330c      	adds	r3, #12
    78c8:	2205      	movs	r2, #5
    78ca:	705a      	strb	r2, [r3, #1]
    78cc:	e016      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 512) {
    78ce:	1d3b      	adds	r3, r7, #4
    78d0:	881a      	ldrh	r2, [r3, #0]
    78d2:	2380      	movs	r3, #128	; 0x80
    78d4:	009b      	lsls	r3, r3, #2
    78d6:	429a      	cmp	r2, r3
    78d8:	d804      	bhi.n	78e4 <udd_ep_alloc+0xac>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    78da:	1c3b      	adds	r3, r7, #0
    78dc:	330c      	adds	r3, #12
    78de:	2206      	movs	r2, #6
    78e0:	705a      	strb	r2, [r3, #1]
    78e2:	e00b      	b.n	78fc <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 1023) {
    78e4:	1d3b      	adds	r3, r7, #4
    78e6:	881a      	ldrh	r2, [r3, #0]
    78e8:	4b35      	ldr	r3, [pc, #212]	; (79c0 <udd_ep_alloc+0x188>)
    78ea:	429a      	cmp	r2, r3
    78ec:	d804      	bhi.n	78f8 <udd_ep_alloc+0xc0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    78ee:	1c3b      	adds	r3, r7, #0
    78f0:	330c      	adds	r3, #12
    78f2:	2207      	movs	r2, #7
    78f4:	705a      	strb	r2, [r3, #1]
    78f6:	e001      	b.n	78fc <udd_ep_alloc+0xc4>
	} else {
		return false;
    78f8:	2300      	movs	r3, #0
    78fa:	e05b      	b.n	79b4 <udd_ep_alloc+0x17c>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    78fc:	1dfb      	adds	r3, r7, #7
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	1c18      	adds	r0, r3, #0
    7902:	4b30      	ldr	r3, [pc, #192]	; (79c4 <udd_ep_alloc+0x18c>)
    7904:	4798      	blx	r3
    7906:	1c03      	adds	r3, r0, #0
    7908:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    790a:	697b      	ldr	r3, [r7, #20]
    790c:	1d3a      	adds	r2, r7, #4
    790e:	8812      	ldrh	r2, [r2, #0]
    7910:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    7912:	1dbb      	adds	r3, r7, #6
    7914:	1dba      	adds	r2, r7, #6
    7916:	7811      	ldrb	r1, [r2, #0]
    7918:	2203      	movs	r2, #3
    791a:	400a      	ands	r2, r1
    791c:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    791e:	1dbb      	adds	r3, r7, #6
    7920:	781b      	ldrb	r3, [r3, #0]
    7922:	2b01      	cmp	r3, #1
    7924:	d104      	bne.n	7930 <udd_ep_alloc+0xf8>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    7926:	1c3b      	adds	r3, r7, #0
    7928:	330c      	adds	r3, #12
    792a:	2202      	movs	r2, #2
    792c:	70da      	strb	r2, [r3, #3]
    792e:	e013      	b.n	7958 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    7930:	1dbb      	adds	r3, r7, #6
    7932:	781b      	ldrb	r3, [r3, #0]
    7934:	2b02      	cmp	r3, #2
    7936:	d104      	bne.n	7942 <udd_ep_alloc+0x10a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    7938:	1c3b      	adds	r3, r7, #0
    793a:	330c      	adds	r3, #12
    793c:	2203      	movs	r2, #3
    793e:	70da      	strb	r2, [r3, #3]
    7940:	e00a      	b.n	7958 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    7942:	1dbb      	adds	r3, r7, #6
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	2b03      	cmp	r3, #3
    7948:	d104      	bne.n	7954 <udd_ep_alloc+0x11c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    794a:	1c3b      	adds	r3, r7, #0
    794c:	330c      	adds	r3, #12
    794e:	2204      	movs	r2, #4
    7950:	70da      	strb	r2, [r3, #3]
    7952:	e001      	b.n	7958 <udd_ep_alloc+0x120>
	} else {
		return false;
    7954:	2300      	movs	r3, #0
    7956:	e02d      	b.n	79b4 <udd_ep_alloc+0x17c>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7958:	1c3b      	adds	r3, r7, #0
    795a:	3313      	adds	r3, #19
    795c:	1dfa      	adds	r2, r7, #7
    795e:	7811      	ldrb	r1, [r2, #0]
    7960:	220f      	movs	r2, #15
    7962:	400a      	ands	r2, r1
    7964:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    7966:	4a18      	ldr	r2, [pc, #96]	; (79c8 <udd_ep_alloc+0x190>)
    7968:	1c3b      	adds	r3, r7, #0
    796a:	330c      	adds	r3, #12
    796c:	1c10      	adds	r0, r2, #0
    796e:	1c19      	adds	r1, r3, #0
    7970:	4b16      	ldr	r3, [pc, #88]	; (79cc <udd_ep_alloc+0x194>)
    7972:	4798      	blx	r3
    7974:	1c03      	adds	r3, r0, #0
    7976:	2b00      	cmp	r3, #0
    7978:	d001      	beq.n	797e <udd_ep_alloc+0x146>
		return false;
    797a:	2300      	movs	r3, #0
    797c:	e01a      	b.n	79b4 <udd_ep_alloc+0x17c>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    797e:	4912      	ldr	r1, [pc, #72]	; (79c8 <udd_ep_alloc+0x190>)
    7980:	1c3b      	adds	r3, r7, #0
    7982:	3313      	adds	r3, #19
    7984:	781a      	ldrb	r2, [r3, #0]
    7986:	4b12      	ldr	r3, [pc, #72]	; (79d0 <udd_ep_alloc+0x198>)
    7988:	1c08      	adds	r0, r1, #0
    798a:	1c11      	adds	r1, r2, #0
    798c:	2200      	movs	r2, #0
    798e:	4c11      	ldr	r4, [pc, #68]	; (79d4 <udd_ep_alloc+0x19c>)
    7990:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7992:	4a0d      	ldr	r2, [pc, #52]	; (79c8 <udd_ep_alloc+0x190>)
    7994:	1dfb      	adds	r3, r7, #7
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	1c10      	adds	r0, r2, #0
    799a:	1c19      	adds	r1, r3, #0
    799c:	2200      	movs	r2, #0
    799e:	4b0e      	ldr	r3, [pc, #56]	; (79d8 <udd_ep_alloc+0x1a0>)
    79a0:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    79a2:	4a09      	ldr	r2, [pc, #36]	; (79c8 <udd_ep_alloc+0x190>)
    79a4:	1dfb      	adds	r3, r7, #7
    79a6:	781b      	ldrb	r3, [r3, #0]
    79a8:	1c10      	adds	r0, r2, #0
    79aa:	1c19      	adds	r1, r3, #0
    79ac:	2201      	movs	r2, #1
    79ae:	4b0a      	ldr	r3, [pc, #40]	; (79d8 <udd_ep_alloc+0x1a0>)
    79b0:	4798      	blx	r3

	return true;
    79b2:	2301      	movs	r3, #1
}
    79b4:	1c18      	adds	r0, r3, #0
    79b6:	46bd      	mov	sp, r7
    79b8:	b007      	add	sp, #28
    79ba:	bd90      	pop	{r4, r7, pc}
    79bc:	00009311 	.word	0x00009311
    79c0:	000003ff 	.word	0x000003ff
    79c4:	0000730d 	.word	0x0000730d
    79c8:	200071c8 	.word	0x200071c8
    79cc:	00009339 	.word	0x00009339
    79d0:	000076b1 	.word	0x000076b1
    79d4:	00008f05 	.word	0x00008f05
    79d8:	00008fe5 	.word	0x00008fe5

000079dc <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    79dc:	b580      	push	{r7, lr}
    79de:	b082      	sub	sp, #8
    79e0:	af00      	add	r7, sp, #0
    79e2:	1c02      	adds	r2, r0, #0
    79e4:	1dfb      	adds	r3, r7, #7
    79e6:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    79e8:	4a05      	ldr	r2, [pc, #20]	; (7a00 <udd_ep_is_halted+0x24>)
    79ea:	1dfb      	adds	r3, r7, #7
    79ec:	781b      	ldrb	r3, [r3, #0]
    79ee:	1c10      	adds	r0, r2, #0
    79f0:	1c19      	adds	r1, r3, #0
    79f2:	4b04      	ldr	r3, [pc, #16]	; (7a04 <udd_ep_is_halted+0x28>)
    79f4:	4798      	blx	r3
    79f6:	1c03      	adds	r3, r0, #0
}
    79f8:	1c18      	adds	r0, r3, #0
    79fa:	46bd      	mov	sp, r7
    79fc:	b002      	add	sp, #8
    79fe:	bd80      	pop	{r7, pc}
    7a00:	200071c8 	.word	0x200071c8
    7a04:	00009909 	.word	0x00009909

00007a08 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    7a08:	b580      	push	{r7, lr}
    7a0a:	b084      	sub	sp, #16
    7a0c:	af00      	add	r7, sp, #0
    7a0e:	1c02      	adds	r2, r0, #0
    7a10:	1dfb      	adds	r3, r7, #7
    7a12:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7a14:	1c3b      	adds	r3, r7, #0
    7a16:	330f      	adds	r3, #15
    7a18:	1dfa      	adds	r2, r7, #7
    7a1a:	7811      	ldrb	r1, [r2, #0]
    7a1c:	220f      	movs	r2, #15
    7a1e:	400a      	ands	r2, r1
    7a20:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7a22:	1c3b      	adds	r3, r7, #0
    7a24:	330f      	adds	r3, #15
    7a26:	781b      	ldrb	r3, [r3, #0]
    7a28:	2b07      	cmp	r3, #7
    7a2a:	d901      	bls.n	7a30 <udd_ep_set_halt+0x28>
		return false;
    7a2c:	2300      	movs	r3, #0
    7a2e:	e00c      	b.n	7a4a <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    7a30:	4a08      	ldr	r2, [pc, #32]	; (7a54 <udd_ep_set_halt+0x4c>)
    7a32:	1dfb      	adds	r3, r7, #7
    7a34:	781b      	ldrb	r3, [r3, #0]
    7a36:	1c10      	adds	r0, r2, #0
    7a38:	1c19      	adds	r1, r3, #0
    7a3a:	4b07      	ldr	r3, [pc, #28]	; (7a58 <udd_ep_set_halt+0x50>)
    7a3c:	4798      	blx	r3

	udd_ep_abort(ep);
    7a3e:	1dfb      	adds	r3, r7, #7
    7a40:	781b      	ldrb	r3, [r3, #0]
    7a42:	1c18      	adds	r0, r3, #0
    7a44:	4b05      	ldr	r3, [pc, #20]	; (7a5c <udd_ep_set_halt+0x54>)
    7a46:	4798      	blx	r3
	return true;
    7a48:	2301      	movs	r3, #1
}
    7a4a:	1c18      	adds	r0, r3, #0
    7a4c:	46bd      	mov	sp, r7
    7a4e:	b004      	add	sp, #16
    7a50:	bd80      	pop	{r7, pc}
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	200071c8 	.word	0x200071c8
    7a58:	00009979 	.word	0x00009979
    7a5c:	000076f5 	.word	0x000076f5

00007a60 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    7a60:	b580      	push	{r7, lr}
    7a62:	b084      	sub	sp, #16
    7a64:	af00      	add	r7, sp, #0
    7a66:	1c02      	adds	r2, r0, #0
    7a68:	1dfb      	adds	r3, r7, #7
    7a6a:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7a6c:	1c3b      	adds	r3, r7, #0
    7a6e:	330f      	adds	r3, #15
    7a70:	1dfa      	adds	r2, r7, #7
    7a72:	7811      	ldrb	r1, [r2, #0]
    7a74:	220f      	movs	r2, #15
    7a76:	400a      	ands	r2, r1
    7a78:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7a7a:	1c3b      	adds	r3, r7, #0
    7a7c:	330f      	adds	r3, #15
    7a7e:	781b      	ldrb	r3, [r3, #0]
    7a80:	2b07      	cmp	r3, #7
    7a82:	d901      	bls.n	7a88 <udd_ep_clear_halt+0x28>
		return false;
    7a84:	2300      	movs	r3, #0
    7a86:	e01d      	b.n	7ac4 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    7a88:	1dfb      	adds	r3, r7, #7
    7a8a:	781b      	ldrb	r3, [r3, #0]
    7a8c:	1c18      	adds	r0, r3, #0
    7a8e:	4b0f      	ldr	r3, [pc, #60]	; (7acc <udd_ep_clear_halt+0x6c>)
    7a90:	4798      	blx	r3
    7a92:	1c03      	adds	r3, r0, #0
    7a94:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    7a96:	4a0e      	ldr	r2, [pc, #56]	; (7ad0 <udd_ep_clear_halt+0x70>)
    7a98:	1dfb      	adds	r3, r7, #7
    7a9a:	781b      	ldrb	r3, [r3, #0]
    7a9c:	1c10      	adds	r0, r2, #0
    7a9e:	1c19      	adds	r1, r3, #0
    7aa0:	4b0c      	ldr	r3, [pc, #48]	; (7ad4 <udd_ep_clear_halt+0x74>)
    7aa2:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    7aa4:	68bb      	ldr	r3, [r7, #8]
    7aa6:	7c9b      	ldrb	r3, [r3, #18]
    7aa8:	07db      	lsls	r3, r3, #31
    7aaa:	0fdb      	lsrs	r3, r3, #31
    7aac:	b2db      	uxtb	r3, r3
    7aae:	2b01      	cmp	r3, #1
    7ab0:	d107      	bne.n	7ac2 <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    7ab2:	68bb      	ldr	r3, [r7, #8]
    7ab4:	7c9a      	ldrb	r2, [r3, #18]
    7ab6:	2101      	movs	r1, #1
    7ab8:	438a      	bics	r2, r1
    7aba:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    7abc:	68bb      	ldr	r3, [r7, #8]
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	4798      	blx	r3
	}

	return true;
    7ac2:	2301      	movs	r3, #1
}
    7ac4:	1c18      	adds	r0, r3, #0
    7ac6:	46bd      	mov	sp, r7
    7ac8:	b004      	add	sp, #16
    7aca:	bd80      	pop	{r7, pc}
    7acc:	0000730d 	.word	0x0000730d
    7ad0:	200071c8 	.word	0x200071c8
    7ad4:	000099d1 	.word	0x000099d1

00007ad8 <udd_ep_wait_stall_clear>:

bool udd_ep_wait_stall_clear(udd_ep_id_t ep, udd_callback_halt_cleared_t callback)
{
    7ad8:	b580      	push	{r7, lr}
    7ada:	b084      	sub	sp, #16
    7adc:	af00      	add	r7, sp, #0
    7ade:	1c02      	adds	r2, r0, #0
    7ae0:	6039      	str	r1, [r7, #0]
    7ae2:	1dfb      	adds	r3, r7, #7
    7ae4:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ep_num = ep & USB_EP_ADDR_MASK;
    7ae6:	1c3b      	adds	r3, r7, #0
    7ae8:	330f      	adds	r3, #15
    7aea:	1dfa      	adds	r2, r7, #7
    7aec:	7811      	ldrb	r1, [r2, #0]
    7aee:	220f      	movs	r2, #15
    7af0:	400a      	ands	r2, r1
    7af2:	701a      	strb	r2, [r3, #0]
	if (USB_DEVICE_MAX_EP < ep_num) {
    7af4:	1c3b      	adds	r3, r7, #0
    7af6:	330f      	adds	r3, #15
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	2b07      	cmp	r3, #7
    7afc:	d901      	bls.n	7b02 <udd_ep_wait_stall_clear+0x2a>
		return false;
    7afe:	2300      	movs	r3, #0
    7b00:	e032      	b.n	7b68 <udd_ep_wait_stall_clear+0x90>
	}

	ptr_job = udd_ep_get_job(ep);
    7b02:	1dfb      	adds	r3, r7, #7
    7b04:	781b      	ldrb	r3, [r3, #0]
    7b06:	1c18      	adds	r0, r3, #0
    7b08:	4b19      	ldr	r3, [pc, #100]	; (7b70 <udd_ep_wait_stall_clear+0x98>)
    7b0a:	4798      	blx	r3
    7b0c:	1c03      	adds	r3, r0, #0
    7b0e:	60bb      	str	r3, [r7, #8]
	if (ptr_job->busy == true) {
    7b10:	68bb      	ldr	r3, [r7, #8]
    7b12:	7c9b      	ldrb	r3, [r3, #18]
    7b14:	07db      	lsls	r3, r3, #31
    7b16:	0fdb      	lsrs	r3, r3, #31
    7b18:	b2db      	uxtb	r3, r3
    7b1a:	2b01      	cmp	r3, #1
    7b1c:	d101      	bne.n	7b22 <udd_ep_wait_stall_clear+0x4a>
		return false; /* Job already on going */
    7b1e:	2300      	movs	r3, #0
    7b20:	e022      	b.n	7b68 <udd_ep_wait_stall_clear+0x90>
	}

	/* Wait clear halt endpoint */
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    7b22:	4a14      	ldr	r2, [pc, #80]	; (7b74 <udd_ep_wait_stall_clear+0x9c>)
    7b24:	1dfb      	adds	r3, r7, #7
    7b26:	781b      	ldrb	r3, [r3, #0]
    7b28:	1c10      	adds	r0, r2, #0
    7b2a:	1c19      	adds	r1, r3, #0
    7b2c:	4b12      	ldr	r3, [pc, #72]	; (7b78 <udd_ep_wait_stall_clear+0xa0>)
    7b2e:	4798      	blx	r3
    7b30:	1c03      	adds	r3, r0, #0
    7b32:	2b00      	cmp	r3, #0
    7b34:	d009      	beq.n	7b4a <udd_ep_wait_stall_clear+0x72>
		/* Endpoint halted then registers the callback */
		ptr_job->busy = true;
    7b36:	68bb      	ldr	r3, [r7, #8]
    7b38:	7c9a      	ldrb	r2, [r3, #18]
    7b3a:	2101      	movs	r1, #1
    7b3c:	430a      	orrs	r2, r1
    7b3e:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    7b40:	68bb      	ldr	r3, [r7, #8]
    7b42:	683a      	ldr	r2, [r7, #0]
    7b44:	601a      	str	r2, [r3, #0]
		return true;
    7b46:	2301      	movs	r3, #1
    7b48:	e00e      	b.n	7b68 <udd_ep_wait_stall_clear+0x90>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    7b4a:	4a0a      	ldr	r2, [pc, #40]	; (7b74 <udd_ep_wait_stall_clear+0x9c>)
    7b4c:	1dfb      	adds	r3, r7, #7
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	1c10      	adds	r0, r2, #0
    7b52:	1c19      	adds	r1, r3, #0
    7b54:	4b09      	ldr	r3, [pc, #36]	; (7b7c <udd_ep_wait_stall_clear+0xa4>)
    7b56:	4798      	blx	r3
    7b58:	1c03      	adds	r3, r0, #0
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d003      	beq.n	7b66 <udd_ep_wait_stall_clear+0x8e>
		callback(); /* Endpoint not halted then call directly callback */
    7b5e:	683b      	ldr	r3, [r7, #0]
    7b60:	4798      	blx	r3
		return true;
    7b62:	2301      	movs	r3, #1
    7b64:	e000      	b.n	7b68 <udd_ep_wait_stall_clear+0x90>
	} else {
		return false;
    7b66:	2300      	movs	r3, #0
	}
}
    7b68:	1c18      	adds	r0, r3, #0
    7b6a:	46bd      	mov	sp, r7
    7b6c:	b004      	add	sp, #16
    7b6e:	bd80      	pop	{r7, pc}
    7b70:	0000730d 	.word	0x0000730d
    7b74:	200071c8 	.word	0x200071c8
    7b78:	00009909 	.word	0x00009909
    7b7c:	0000980d 	.word	0x0000980d

00007b80 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    7b80:	b580      	push	{r7, lr}
    7b82:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7b84:	4b07      	ldr	r3, [pc, #28]	; (7ba4 <udd_ctrl_stall_data+0x24>)
    7b86:	2205      	movs	r2, #5
    7b88:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    7b8a:	4b07      	ldr	r3, [pc, #28]	; (7ba8 <udd_ctrl_stall_data+0x28>)
    7b8c:	1c18      	adds	r0, r3, #0
    7b8e:	2180      	movs	r1, #128	; 0x80
    7b90:	4b06      	ldr	r3, [pc, #24]	; (7bac <udd_ctrl_stall_data+0x2c>)
    7b92:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    7b94:	4b04      	ldr	r3, [pc, #16]	; (7ba8 <udd_ctrl_stall_data+0x28>)
    7b96:	1c18      	adds	r0, r3, #0
    7b98:	2100      	movs	r1, #0
    7b9a:	4b05      	ldr	r3, [pc, #20]	; (7bb0 <udd_ctrl_stall_data+0x30>)
    7b9c:	4798      	blx	r3
}
    7b9e:	46bd      	mov	sp, r7
    7ba0:	bd80      	pop	{r7, pc}
    7ba2:	46c0      	nop			; (mov r8, r8)
    7ba4:	20006fe4 	.word	0x20006fe4
    7ba8:	200071c8 	.word	0x200071c8
    7bac:	00009979 	.word	0x00009979
    7bb0:	000099d1 	.word	0x000099d1

00007bb4 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    7bb4:	b590      	push	{r4, r7, lr}
    7bb6:	b089      	sub	sp, #36	; 0x24
    7bb8:	af00      	add	r7, sp, #0
    7bba:	60ba      	str	r2, [r7, #8]
    7bbc:	607b      	str	r3, [r7, #4]
    7bbe:	1c3b      	adds	r3, r7, #0
    7bc0:	330f      	adds	r3, #15
    7bc2:	1c02      	adds	r2, r0, #0
    7bc4:	701a      	strb	r2, [r3, #0]
    7bc6:	1c3b      	adds	r3, r7, #0
    7bc8:	330e      	adds	r3, #14
    7bca:	1c0a      	adds	r2, r1, #0
    7bcc:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    7bce:	1c3b      	adds	r3, r7, #0
    7bd0:	331d      	adds	r3, #29
    7bd2:	1c3a      	adds	r2, r7, #0
    7bd4:	320f      	adds	r2, #15
    7bd6:	7811      	ldrb	r1, [r2, #0]
    7bd8:	220f      	movs	r2, #15
    7bda:	400a      	ands	r2, r1
    7bdc:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    7bde:	1c3b      	adds	r3, r7, #0
    7be0:	331d      	adds	r3, #29
    7be2:	781b      	ldrb	r3, [r3, #0]
    7be4:	2b07      	cmp	r3, #7
    7be6:	d808      	bhi.n	7bfa <udd_ep_run+0x46>
    7be8:	1c3b      	adds	r3, r7, #0
    7bea:	330f      	adds	r3, #15
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	1c18      	adds	r0, r3, #0
    7bf0:	4b9d      	ldr	r3, [pc, #628]	; (7e68 <udd_ep_run+0x2b4>)
    7bf2:	4798      	blx	r3
    7bf4:	1c03      	adds	r3, r0, #0
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d001      	beq.n	7bfe <udd_ep_run+0x4a>
		return false;
    7bfa:	2300      	movs	r3, #0
    7bfc:	e130      	b.n	7e60 <udd_ep_run+0x2ac>
	}

	ptr_job = udd_ep_get_job(ep);
    7bfe:	1c3b      	adds	r3, r7, #0
    7c00:	330f      	adds	r3, #15
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	1c18      	adds	r0, r3, #0
    7c06:	4b99      	ldr	r3, [pc, #612]	; (7e6c <udd_ep_run+0x2b8>)
    7c08:	4798      	blx	r3
    7c0a:	1c03      	adds	r3, r0, #0
    7c0c:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    7c0e:	4b98      	ldr	r3, [pc, #608]	; (7e70 <udd_ep_run+0x2bc>)
    7c10:	4798      	blx	r3
    7c12:	1c03      	adds	r3, r0, #0
    7c14:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    7c16:	69bb      	ldr	r3, [r7, #24]
    7c18:	7c9b      	ldrb	r3, [r3, #18]
    7c1a:	07db      	lsls	r3, r3, #31
    7c1c:	0fdb      	lsrs	r3, r3, #31
    7c1e:	b2db      	uxtb	r3, r3
    7c20:	2b01      	cmp	r3, #1
    7c22:	d105      	bne.n	7c30 <udd_ep_run+0x7c>
		cpu_irq_restore(flags);
    7c24:	697b      	ldr	r3, [r7, #20]
    7c26:	1c18      	adds	r0, r3, #0
    7c28:	4b92      	ldr	r3, [pc, #584]	; (7e74 <udd_ep_run+0x2c0>)
    7c2a:	4798      	blx	r3
		return false; /* Job already on going */
    7c2c:	2300      	movs	r3, #0
    7c2e:	e117      	b.n	7e60 <udd_ep_run+0x2ac>
	}
	ptr_job->busy = true;
    7c30:	69bb      	ldr	r3, [r7, #24]
    7c32:	7c9a      	ldrb	r2, [r3, #18]
    7c34:	2101      	movs	r1, #1
    7c36:	430a      	orrs	r2, r1
    7c38:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    7c3a:	697b      	ldr	r3, [r7, #20]
    7c3c:	1c18      	adds	r0, r3, #0
    7c3e:	4b8d      	ldr	r3, [pc, #564]	; (7e74 <udd_ep_run+0x2c0>)
    7c40:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    7c42:	69bb      	ldr	r3, [r7, #24]
    7c44:	68ba      	ldr	r2, [r7, #8]
    7c46:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    7c48:	69bb      	ldr	r3, [r7, #24]
    7c4a:	687a      	ldr	r2, [r7, #4]
    7c4c:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    7c4e:	69bb      	ldr	r3, [r7, #24]
    7c50:	2200      	movs	r2, #0
    7c52:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    7c54:	69bb      	ldr	r3, [r7, #24]
    7c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    7c58:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    7c5a:	69bb      	ldr	r3, [r7, #24]
    7c5c:	1c3a      	adds	r2, r7, #0
    7c5e:	320e      	adds	r2, #14
    7c60:	7811      	ldrb	r1, [r2, #0]
    7c62:	2201      	movs	r2, #1
    7c64:	400a      	ands	r2, r1
    7c66:	1892      	adds	r2, r2, r2
    7c68:	7c99      	ldrb	r1, [r3, #18]
    7c6a:	2002      	movs	r0, #2
    7c6c:	4381      	bics	r1, r0
    7c6e:	430a      	orrs	r2, r1
    7c70:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    7c72:	69bb      	ldr	r3, [r7, #24]
    7c74:	7c9a      	ldrb	r2, [r3, #18]
    7c76:	2104      	movs	r1, #4
    7c78:	438a      	bics	r2, r1
    7c7a:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    7c7c:	1c3b      	adds	r3, r7, #0
    7c7e:	330f      	adds	r3, #15
    7c80:	781b      	ldrb	r3, [r3, #0]
    7c82:	b25b      	sxtb	r3, r3
    7c84:	2b00      	cmp	r3, #0
    7c86:	db00      	blt.n	7c8a <udd_ep_run+0xd6>
    7c88:	e077      	b.n	7d7a <udd_ep_run+0x1c6>
		if (0 != ptr_job->buf_size) {
    7c8a:	69bb      	ldr	r3, [r7, #24]
    7c8c:	689b      	ldr	r3, [r3, #8]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d03f      	beq.n	7d12 <udd_ep_run+0x15e>
			next_trans = ptr_job->buf_size;
    7c92:	69bb      	ldr	r3, [r7, #24]
    7c94:	689a      	ldr	r2, [r3, #8]
    7c96:	1c3b      	adds	r3, r7, #0
    7c98:	331e      	adds	r3, #30
    7c9a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7c9c:	1c3b      	adds	r3, r7, #0
    7c9e:	331e      	adds	r3, #30
    7ca0:	881a      	ldrh	r2, [r3, #0]
    7ca2:	4b75      	ldr	r3, [pc, #468]	; (7e78 <udd_ep_run+0x2c4>)
    7ca4:	429a      	cmp	r2, r3
    7ca6:	d90e      	bls.n	7cc6 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7ca8:	69bb      	ldr	r3, [r7, #24]
    7caa:	8a1b      	ldrh	r3, [r3, #16]
    7cac:	1c1a      	adds	r2, r3, #0
    7cae:	4972      	ldr	r1, [pc, #456]	; (7e78 <udd_ep_run+0x2c4>)
    7cb0:	4b72      	ldr	r3, [pc, #456]	; (7e7c <udd_ep_run+0x2c8>)
    7cb2:	1c08      	adds	r0, r1, #0
    7cb4:	1c11      	adds	r1, r2, #0
    7cb6:	4798      	blx	r3
    7cb8:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    7cba:	b29a      	uxth	r2, r3
    7cbc:	1c3b      	adds	r3, r7, #0
    7cbe:	331e      	adds	r3, #30
    7cc0:	496d      	ldr	r1, [pc, #436]	; (7e78 <udd_ep_run+0x2c4>)
    7cc2:	1a8a      	subs	r2, r1, r2
    7cc4:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    7cc6:	69bb      	ldr	r3, [r7, #24]
    7cc8:	7c9b      	ldrb	r3, [r3, #18]
    7cca:	079b      	lsls	r3, r3, #30
    7ccc:	0fdb      	lsrs	r3, r3, #31
    7cce:	b2db      	uxtb	r3, r3
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	d00e      	beq.n	7cf2 <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    7cd4:	69bb      	ldr	r3, [r7, #24]
    7cd6:	8a1a      	ldrh	r2, [r3, #16]
    7cd8:	1c3b      	adds	r3, r7, #0
    7cda:	331e      	adds	r3, #30
    7cdc:	8819      	ldrh	r1, [r3, #0]
    7cde:	4b68      	ldr	r3, [pc, #416]	; (7e80 <udd_ep_run+0x2cc>)
    7ce0:	1c08      	adds	r0, r1, #0
    7ce2:	1c11      	adds	r1, r2, #0
    7ce4:	4798      	blx	r3
    7ce6:	1c0b      	adds	r3, r1, #0
    7ce8:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    7cea:	2b00      	cmp	r3, #0
    7cec:	d101      	bne.n	7cf2 <udd_ep_run+0x13e>
    7cee:	2301      	movs	r3, #1
    7cf0:	e000      	b.n	7cf4 <udd_ep_run+0x140>
    7cf2:	2300      	movs	r3, #0
    7cf4:	b2db      	uxtb	r3, r3
    7cf6:	1c1a      	adds	r2, r3, #0
    7cf8:	2301      	movs	r3, #1
    7cfa:	4013      	ands	r3, r2
    7cfc:	b2d9      	uxtb	r1, r3
    7cfe:	69bb      	ldr	r3, [r7, #24]
    7d00:	2201      	movs	r2, #1
    7d02:	400a      	ands	r2, r1
    7d04:	1892      	adds	r2, r2, r2
    7d06:	7c99      	ldrb	r1, [r3, #18]
    7d08:	2002      	movs	r0, #2
    7d0a:	4381      	bics	r1, r0
    7d0c:	430a      	orrs	r2, r1
    7d0e:	749a      	strb	r2, [r3, #18]
    7d10:	e023      	b.n	7d5a <udd_ep_run+0x1a6>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    7d12:	69bb      	ldr	r3, [r7, #24]
    7d14:	7c9b      	ldrb	r3, [r3, #18]
    7d16:	079b      	lsls	r3, r3, #30
    7d18:	0fdb      	lsrs	r3, r3, #31
    7d1a:	b2db      	uxtb	r3, r3
    7d1c:	2b01      	cmp	r3, #1
    7d1e:	d109      	bne.n	7d34 <udd_ep_run+0x180>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    7d20:	69bb      	ldr	r3, [r7, #24]
    7d22:	7c9a      	ldrb	r2, [r3, #18]
    7d24:	2102      	movs	r1, #2
    7d26:	438a      	bics	r2, r1
    7d28:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    7d2a:	1c3b      	adds	r3, r7, #0
    7d2c:	331e      	adds	r3, #30
    7d2e:	2200      	movs	r2, #0
    7d30:	801a      	strh	r2, [r3, #0]
    7d32:	e012      	b.n	7d5a <udd_ep_run+0x1a6>
		} else {
			ptr_job->busy = false;
    7d34:	69bb      	ldr	r3, [r7, #24]
    7d36:	7c9a      	ldrb	r2, [r3, #18]
    7d38:	2101      	movs	r1, #1
    7d3a:	438a      	bics	r2, r1
    7d3c:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    7d3e:	69bb      	ldr	r3, [r7, #24]
    7d40:	681b      	ldr	r3, [r3, #0]
    7d42:	2b00      	cmp	r3, #0
    7d44:	d007      	beq.n	7d56 <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    7d46:	69bb      	ldr	r3, [r7, #24]
    7d48:	681b      	ldr	r3, [r3, #0]
    7d4a:	1c3a      	adds	r2, r7, #0
    7d4c:	320f      	adds	r2, #15
    7d4e:	7812      	ldrb	r2, [r2, #0]
    7d50:	2000      	movs	r0, #0
    7d52:	2100      	movs	r1, #0
    7d54:	4798      	blx	r3
			}
			return true;
    7d56:	2301      	movs	r3, #1
    7d58:	e082      	b.n	7e60 <udd_ep_run+0x2ac>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    7d5a:	69bb      	ldr	r3, [r7, #24]
    7d5c:	685a      	ldr	r2, [r3, #4]
    7d5e:	1c3b      	adds	r3, r7, #0
    7d60:	331e      	adds	r3, #30
    7d62:	881b      	ldrh	r3, [r3, #0]
    7d64:	4847      	ldr	r0, [pc, #284]	; (7e84 <udd_ep_run+0x2d0>)
    7d66:	1c39      	adds	r1, r7, #0
    7d68:	311d      	adds	r1, #29
    7d6a:	7809      	ldrb	r1, [r1, #0]
    7d6c:	4c46      	ldr	r4, [pc, #280]	; (7e88 <udd_ep_run+0x2d4>)
    7d6e:	47a0      	blx	r4
    7d70:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    7d72:	425a      	negs	r2, r3
    7d74:	4153      	adcs	r3, r2
    7d76:	b2db      	uxtb	r3, r3
    7d78:	e072      	b.n	7e60 <udd_ep_run+0x2ac>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    7d7a:	69bb      	ldr	r3, [r7, #24]
    7d7c:	689b      	ldr	r3, [r3, #8]
    7d7e:	2b00      	cmp	r3, #0
    7d80:	d05c      	beq.n	7e3c <udd_ep_run+0x288>
			next_trans = ptr_job->buf_size;
    7d82:	69bb      	ldr	r3, [r7, #24]
    7d84:	689a      	ldr	r2, [r3, #8]
    7d86:	1c3b      	adds	r3, r7, #0
    7d88:	331e      	adds	r3, #30
    7d8a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7d8c:	1c3b      	adds	r3, r7, #0
    7d8e:	331e      	adds	r3, #30
    7d90:	881a      	ldrh	r2, [r3, #0]
    7d92:	4b39      	ldr	r3, [pc, #228]	; (7e78 <udd_ep_run+0x2c4>)
    7d94:	429a      	cmp	r2, r3
    7d96:	d90f      	bls.n	7db8 <udd_ep_run+0x204>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7d98:	69bb      	ldr	r3, [r7, #24]
    7d9a:	8a1b      	ldrh	r3, [r3, #16]
    7d9c:	1c1a      	adds	r2, r3, #0
    7d9e:	4936      	ldr	r1, [pc, #216]	; (7e78 <udd_ep_run+0x2c4>)
    7da0:	4b36      	ldr	r3, [pc, #216]	; (7e7c <udd_ep_run+0x2c8>)
    7da2:	1c08      	adds	r0, r1, #0
    7da4:	1c11      	adds	r1, r2, #0
    7da6:	4798      	blx	r3
    7da8:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    7daa:	b29a      	uxth	r2, r3
    7dac:	1c3b      	adds	r3, r7, #0
    7dae:	331e      	adds	r3, #30
    7db0:	4931      	ldr	r1, [pc, #196]	; (7e78 <udd_ep_run+0x2c4>)
    7db2:	1a8a      	subs	r2, r1, r2
    7db4:	801a      	strh	r2, [r3, #0]
    7db6:	e011      	b.n	7ddc <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    7db8:	69bb      	ldr	r3, [r7, #24]
    7dba:	8a1a      	ldrh	r2, [r3, #16]
    7dbc:	1c3b      	adds	r3, r7, #0
    7dbe:	331e      	adds	r3, #30
    7dc0:	8819      	ldrh	r1, [r3, #0]
    7dc2:	4b2f      	ldr	r3, [pc, #188]	; (7e80 <udd_ep_run+0x2cc>)
    7dc4:	1c08      	adds	r0, r1, #0
    7dc6:	1c11      	adds	r1, r2, #0
    7dc8:	4798      	blx	r3
    7dca:	1c0b      	adds	r3, r1, #0
    7dcc:	b29a      	uxth	r2, r3
    7dce:	1c3b      	adds	r3, r7, #0
    7dd0:	331e      	adds	r3, #30
    7dd2:	1c39      	adds	r1, r7, #0
    7dd4:	311e      	adds	r1, #30
    7dd6:	8809      	ldrh	r1, [r1, #0]
    7dd8:	1a8a      	subs	r2, r1, r2
    7dda:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    7ddc:	69bb      	ldr	r3, [r7, #24]
    7dde:	8a1b      	ldrh	r3, [r3, #16]
    7de0:	1c3a      	adds	r2, r7, #0
    7de2:	321e      	adds	r2, #30
    7de4:	8812      	ldrh	r2, [r2, #0]
    7de6:	429a      	cmp	r2, r3
    7de8:	d218      	bcs.n	7e1c <udd_ep_run+0x268>
				ptr_job->b_use_out_cache_buffer = true;
    7dea:	69bb      	ldr	r3, [r7, #24]
    7dec:	7c9a      	ldrb	r2, [r3, #18]
    7dee:	2104      	movs	r1, #4
    7df0:	430a      	orrs	r2, r1
    7df2:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    7df4:	1c3b      	adds	r3, r7, #0
    7df6:	331d      	adds	r3, #29
    7df8:	781b      	ldrb	r3, [r3, #0]
    7dfa:	3b01      	subs	r3, #1
    7dfc:	00da      	lsls	r2, r3, #3
    7dfe:	4b23      	ldr	r3, [pc, #140]	; (7e8c <udd_ep_run+0x2d8>)
    7e00:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    7e02:	69bb      	ldr	r3, [r7, #24]
    7e04:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    7e06:	481f      	ldr	r0, [pc, #124]	; (7e84 <udd_ep_run+0x2d0>)
    7e08:	1c39      	adds	r1, r7, #0
    7e0a:	311d      	adds	r1, #29
    7e0c:	7809      	ldrb	r1, [r1, #0]
    7e0e:	4c20      	ldr	r4, [pc, #128]	; (7e90 <udd_ep_run+0x2dc>)
    7e10:	47a0      	blx	r4
    7e12:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    7e14:	425a      	negs	r2, r3
    7e16:	4153      	adcs	r3, r2
    7e18:	b2db      	uxtb	r3, r3
    7e1a:	e021      	b.n	7e60 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    7e1c:	69bb      	ldr	r3, [r7, #24]
    7e1e:	685a      	ldr	r2, [r3, #4]
    7e20:	1c3b      	adds	r3, r7, #0
    7e22:	331e      	adds	r3, #30
    7e24:	881b      	ldrh	r3, [r3, #0]
    7e26:	4817      	ldr	r0, [pc, #92]	; (7e84 <udd_ep_run+0x2d0>)
    7e28:	1c39      	adds	r1, r7, #0
    7e2a:	311d      	adds	r1, #29
    7e2c:	7809      	ldrb	r1, [r1, #0]
    7e2e:	4c18      	ldr	r4, [pc, #96]	; (7e90 <udd_ep_run+0x2dc>)
    7e30:	47a0      	blx	r4
    7e32:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    7e34:	425a      	negs	r2, r3
    7e36:	4153      	adcs	r3, r2
    7e38:	b2db      	uxtb	r3, r3
    7e3a:	e011      	b.n	7e60 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    7e3c:	69bb      	ldr	r3, [r7, #24]
    7e3e:	7c9a      	ldrb	r2, [r3, #18]
    7e40:	2101      	movs	r1, #1
    7e42:	438a      	bics	r2, r1
    7e44:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    7e46:	69bb      	ldr	r3, [r7, #24]
    7e48:	681b      	ldr	r3, [r3, #0]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d007      	beq.n	7e5e <udd_ep_run+0x2aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    7e4e:	69bb      	ldr	r3, [r7, #24]
    7e50:	681b      	ldr	r3, [r3, #0]
    7e52:	1c3a      	adds	r2, r7, #0
    7e54:	320f      	adds	r2, #15
    7e56:	7812      	ldrb	r2, [r2, #0]
    7e58:	2000      	movs	r0, #0
    7e5a:	2100      	movs	r1, #0
    7e5c:	4798      	blx	r3
			}
			return true;
    7e5e:	2301      	movs	r3, #1
		}
	}
}
    7e60:	1c18      	adds	r0, r3, #0
    7e62:	46bd      	mov	sp, r7
    7e64:	b009      	add	sp, #36	; 0x24
    7e66:	bd90      	pop	{r4, r7, pc}
    7e68:	000079dd 	.word	0x000079dd
    7e6c:	0000730d 	.word	0x0000730d
    7e70:	00006f41 	.word	0x00006f41
    7e74:	00006f89 	.word	0x00006f89
    7e78:	00001fff 	.word	0x00001fff
    7e7c:	0000b23d 	.word	0x0000b23d
    7e80:	0000b17d 	.word	0x0000b17d
    7e84:	200071c8 	.word	0x200071c8
    7e88:	00009ae9 	.word	0x00009ae9
    7e8c:	20007190 	.word	0x20007190
    7e90:	00009ba1 	.word	0x00009ba1

00007e94 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b082      	sub	sp, #8
    7e98:	af00      	add	r7, sp, #0
    7e9a:	1c02      	adds	r2, r0, #0
    7e9c:	1dfb      	adds	r3, r7, #7
    7e9e:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    7ea0:	4a04      	ldr	r2, [pc, #16]	; (7eb4 <udd_set_address+0x20>)
    7ea2:	1dfb      	adds	r3, r7, #7
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	1c10      	adds	r0, r2, #0
    7ea8:	1c19      	adds	r1, r3, #0
    7eaa:	4b03      	ldr	r3, [pc, #12]	; (7eb8 <udd_set_address+0x24>)
    7eac:	4798      	blx	r3
}
    7eae:	46bd      	mov	sp, r7
    7eb0:	b002      	add	sp, #8
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	200071c8 	.word	0x200071c8
    7eb8:	00007095 	.word	0x00007095

00007ebc <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    7ebc:	b580      	push	{r7, lr}
    7ebe:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    7ec0:	4b03      	ldr	r3, [pc, #12]	; (7ed0 <udd_getaddress+0x14>)
    7ec2:	1c18      	adds	r0, r3, #0
    7ec4:	4b03      	ldr	r3, [pc, #12]	; (7ed4 <udd_getaddress+0x18>)
    7ec6:	4798      	blx	r3
    7ec8:	1c03      	adds	r3, r0, #0
}
    7eca:	1c18      	adds	r0, r3, #0
    7ecc:	46bd      	mov	sp, r7
    7ece:	bd80      	pop	{r7, pc}
    7ed0:	200071c8 	.word	0x200071c8
    7ed4:	00007079 	.word	0x00007079

00007ed8 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b082      	sub	sp, #8
    7edc:	af00      	add	r7, sp, #0
	uint32_t try = 5;
    7ede:	2305      	movs	r3, #5
    7ee0:	607b      	str	r3, [r7, #4]
	udd_wait_clock_ready();
    7ee2:	4b0c      	ldr	r3, [pc, #48]	; (7f14 <udd_send_remotewakeup+0x3c>)
    7ee4:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_IDLE);
    7ee6:	2003      	movs	r0, #3
    7ee8:	4b0b      	ldr	r3, [pc, #44]	; (7f18 <udd_send_remotewakeup+0x40>)
    7eea:	4798      	blx	r3
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    7eec:	e003      	b.n	7ef6 <udd_send_remotewakeup+0x1e>
		usb_device_send_remote_wake_up(&usb_device);
    7eee:	4b0b      	ldr	r3, [pc, #44]	; (7f1c <udd_send_remotewakeup+0x44>)
    7ef0:	1c18      	adds	r0, r3, #0
    7ef2:	4b0b      	ldr	r3, [pc, #44]	; (7f20 <udd_send_remotewakeup+0x48>)
    7ef4:	4798      	blx	r3
void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    7ef6:	4b09      	ldr	r3, [pc, #36]	; (7f1c <udd_send_remotewakeup+0x44>)
    7ef8:	1c18      	adds	r0, r3, #0
    7efa:	4b0a      	ldr	r3, [pc, #40]	; (7f24 <udd_send_remotewakeup+0x4c>)
    7efc:	4798      	blx	r3
    7efe:	1c03      	adds	r3, r0, #0
    7f00:	2b02      	cmp	r3, #2
    7f02:	d004      	beq.n	7f0e <udd_send_remotewakeup+0x36>
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	1e5a      	subs	r2, r3, #1
    7f08:	607a      	str	r2, [r7, #4]
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d1ef      	bne.n	7eee <udd_send_remotewakeup+0x16>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    7f0e:	46bd      	mov	sp, r7
    7f10:	b002      	add	sp, #8
    7f12:	bd80      	pop	{r7, pc}
    7f14:	00007255 	.word	0x00007255
    7f18:	0000728d 	.word	0x0000728d
    7f1c:	200071c8 	.word	0x200071c8
    7f20:	000070f5 	.word	0x000070f5
    7f24:	00007019 	.word	0x00007019

00007f28 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b082      	sub	sp, #8
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	6078      	str	r0, [r7, #4]
    7f30:	1c0a      	adds	r2, r1, #0
    7f32:	1cbb      	adds	r3, r7, #2
    7f34:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    7f36:	4b05      	ldr	r3, [pc, #20]	; (7f4c <udd_set_setup_payload+0x24>)
    7f38:	687a      	ldr	r2, [r7, #4]
    7f3a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    7f3c:	4b03      	ldr	r3, [pc, #12]	; (7f4c <udd_set_setup_payload+0x24>)
    7f3e:	1cba      	adds	r2, r7, #2
    7f40:	8812      	ldrh	r2, [r2, #0]
    7f42:	819a      	strh	r2, [r3, #12]
}
    7f44:	46bd      	mov	sp, r7
    7f46:	b002      	add	sp, #8
    7f48:	bd80      	pop	{r7, pc}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	20007330 	.word	0x20007330

00007f50 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    7f50:	b580      	push	{r7, lr}
    7f52:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    7f54:	4b13      	ldr	r3, [pc, #76]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f56:	781a      	ldrb	r2, [r3, #0]
    7f58:	4b13      	ldr	r3, [pc, #76]	; (7fa8 <udd_ctrl_fetch_ram+0x58>)
    7f5a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    7f5c:	4b11      	ldr	r3, [pc, #68]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f5e:	785a      	ldrb	r2, [r3, #1]
    7f60:	4b11      	ldr	r3, [pc, #68]	; (7fa8 <udd_ctrl_fetch_ram+0x58>)
    7f62:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    7f64:	4b0f      	ldr	r3, [pc, #60]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f66:	78db      	ldrb	r3, [r3, #3]
    7f68:	021b      	lsls	r3, r3, #8
    7f6a:	b29a      	uxth	r2, r3
    7f6c:	4b0d      	ldr	r3, [pc, #52]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f6e:	789b      	ldrb	r3, [r3, #2]
    7f70:	18d3      	adds	r3, r2, r3
    7f72:	b29a      	uxth	r2, r3
    7f74:	4b0c      	ldr	r3, [pc, #48]	; (7fa8 <udd_ctrl_fetch_ram+0x58>)
    7f76:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    7f78:	4b0a      	ldr	r3, [pc, #40]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f7a:	795b      	ldrb	r3, [r3, #5]
    7f7c:	021b      	lsls	r3, r3, #8
    7f7e:	b29a      	uxth	r2, r3
    7f80:	4b08      	ldr	r3, [pc, #32]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f82:	791b      	ldrb	r3, [r3, #4]
    7f84:	18d3      	adds	r3, r2, r3
    7f86:	b29a      	uxth	r2, r3
    7f88:	4b07      	ldr	r3, [pc, #28]	; (7fa8 <udd_ctrl_fetch_ram+0x58>)
    7f8a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    7f8c:	4b05      	ldr	r3, [pc, #20]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f8e:	79db      	ldrb	r3, [r3, #7]
    7f90:	021b      	lsls	r3, r3, #8
    7f92:	b29a      	uxth	r2, r3
    7f94:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <udd_ctrl_fetch_ram+0x54>)
    7f96:	799b      	ldrb	r3, [r3, #6]
    7f98:	18d3      	adds	r3, r2, r3
    7f9a:	b29a      	uxth	r2, r3
    7f9c:	4b02      	ldr	r3, [pc, #8]	; (7fa8 <udd_ctrl_fetch_ram+0x58>)
    7f9e:	80da      	strh	r2, [r3, #6]
}
    7fa0:	46bd      	mov	sp, r7
    7fa2:	bd80      	pop	{r7, pc}
    7fa4:	20007348 	.word	0x20007348
    7fa8:	20007330 	.word	0x20007330

00007fac <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    7fac:	b598      	push	{r3, r4, r7, lr}
    7fae:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    7fb0:	4b09      	ldr	r3, [pc, #36]	; (7fd8 <udd_ctrl_send_zlp_in+0x2c>)
    7fb2:	2203      	movs	r2, #3
    7fb4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7fb6:	4a09      	ldr	r2, [pc, #36]	; (7fdc <udd_ctrl_send_zlp_in+0x30>)
    7fb8:	4b09      	ldr	r3, [pc, #36]	; (7fe0 <udd_ctrl_send_zlp_in+0x34>)
    7fba:	1c10      	adds	r0, r2, #0
    7fbc:	1c19      	adds	r1, r3, #0
    7fbe:	4b09      	ldr	r3, [pc, #36]	; (7fe4 <udd_ctrl_send_zlp_in+0x38>)
    7fc0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    7fc2:	4b09      	ldr	r3, [pc, #36]	; (7fe8 <udd_ctrl_send_zlp_in+0x3c>)
    7fc4:	689b      	ldr	r3, [r3, #8]
    7fc6:	4a05      	ldr	r2, [pc, #20]	; (7fdc <udd_ctrl_send_zlp_in+0x30>)
    7fc8:	1c10      	adds	r0, r2, #0
    7fca:	2100      	movs	r1, #0
    7fcc:	1c1a      	adds	r2, r3, #0
    7fce:	2300      	movs	r3, #0
    7fd0:	4c06      	ldr	r4, [pc, #24]	; (7fec <udd_ctrl_send_zlp_in+0x40>)
    7fd2:	47a0      	blx	r4
}
    7fd4:	46bd      	mov	sp, r7
    7fd6:	bd98      	pop	{r3, r4, r7, pc}
    7fd8:	20006fe4 	.word	0x20006fe4
    7fdc:	200071c8 	.word	0x200071c8
    7fe0:	20007348 	.word	0x20007348
    7fe4:	00009c4d 	.word	0x00009c4d
    7fe8:	20007330 	.word	0x20007330
    7fec:	00009ae9 	.word	0x00009ae9

00007ff0 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    7ff0:	b590      	push	{r4, r7, lr}
    7ff2:	b083      	sub	sp, #12
    7ff4:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7ff6:	4b30      	ldr	r3, [pc, #192]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    7ff8:	8999      	ldrh	r1, [r3, #12]
    7ffa:	4b30      	ldr	r3, [pc, #192]	; (80bc <udd_ctrl_in_sent+0xcc>)
    7ffc:	881a      	ldrh	r2, [r3, #0]
    7ffe:	1dbb      	adds	r3, r7, #6
    8000:	1a8a      	subs	r2, r1, r2
    8002:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    8004:	1dbb      	adds	r3, r7, #6
    8006:	881b      	ldrh	r3, [r3, #0]
    8008:	2b00      	cmp	r3, #0
    800a:	d12f      	bne.n	806c <udd_ctrl_in_sent+0x7c>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    800c:	4b2c      	ldr	r3, [pc, #176]	; (80c0 <udd_ctrl_in_sent+0xd0>)
    800e:	881a      	ldrh	r2, [r3, #0]
    8010:	4b2a      	ldr	r3, [pc, #168]	; (80bc <udd_ctrl_in_sent+0xcc>)
    8012:	881b      	ldrh	r3, [r3, #0]
    8014:	18d3      	adds	r3, r2, r3
    8016:	b29a      	uxth	r2, r3
    8018:	4b29      	ldr	r3, [pc, #164]	; (80c0 <udd_ctrl_in_sent+0xd0>)
    801a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    801c:	4b26      	ldr	r3, [pc, #152]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    801e:	88da      	ldrh	r2, [r3, #6]
    8020:	4b27      	ldr	r3, [pc, #156]	; (80c0 <udd_ctrl_in_sent+0xd0>)
    8022:	881b      	ldrh	r3, [r3, #0]
    8024:	429a      	cmp	r2, r3
    8026:	d003      	beq.n	8030 <udd_ctrl_in_sent+0x40>
    8028:	4b26      	ldr	r3, [pc, #152]	; (80c4 <udd_ctrl_in_sent+0xd4>)
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2b00      	cmp	r3, #0
    802e:	d009      	beq.n	8044 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    8030:	4b25      	ldr	r3, [pc, #148]	; (80c8 <udd_ctrl_in_sent+0xd8>)
    8032:	2204      	movs	r2, #4
    8034:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    8036:	4a25      	ldr	r2, [pc, #148]	; (80cc <udd_ctrl_in_sent+0xdc>)
    8038:	4b25      	ldr	r3, [pc, #148]	; (80d0 <udd_ctrl_in_sent+0xe0>)
    803a:	1c10      	adds	r0, r2, #0
    803c:	1c19      	adds	r1, r3, #0
    803e:	4b25      	ldr	r3, [pc, #148]	; (80d4 <udd_ctrl_in_sent+0xe4>)
    8040:	4798      	blx	r3
			return;
    8042:	e035      	b.n	80b0 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    8044:	4b1c      	ldr	r3, [pc, #112]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    8046:	695b      	ldr	r3, [r3, #20]
    8048:	2b00      	cmp	r3, #0
    804a:	d00f      	beq.n	806c <udd_ctrl_in_sent+0x7c>
    804c:	4b1a      	ldr	r3, [pc, #104]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    804e:	695b      	ldr	r3, [r3, #20]
    8050:	4798      	blx	r3
    8052:	1c03      	adds	r3, r0, #0
    8054:	2201      	movs	r2, #1
    8056:	4053      	eors	r3, r2
    8058:	b2db      	uxtb	r3, r3
    805a:	2b00      	cmp	r3, #0
    805c:	d106      	bne.n	806c <udd_ctrl_in_sent+0x7c>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    805e:	4b17      	ldr	r3, [pc, #92]	; (80bc <udd_ctrl_in_sent+0xcc>)
    8060:	2200      	movs	r2, #0
    8062:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    8064:	1dbb      	adds	r3, r7, #6
    8066:	4a14      	ldr	r2, [pc, #80]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    8068:	8992      	ldrh	r2, [r2, #12]
    806a:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    806c:	1dbb      	adds	r3, r7, #6
    806e:	881b      	ldrh	r3, [r3, #0]
    8070:	2b3f      	cmp	r3, #63	; 0x3f
    8072:	d906      	bls.n	8082 <udd_ctrl_in_sent+0x92>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    8074:	1dbb      	adds	r3, r7, #6
    8076:	2240      	movs	r2, #64	; 0x40
    8078:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    807a:	4b12      	ldr	r3, [pc, #72]	; (80c4 <udd_ctrl_in_sent+0xd4>)
    807c:	2200      	movs	r2, #0
    807e:	701a      	strb	r2, [r3, #0]
    8080:	e002      	b.n	8088 <udd_ctrl_in_sent+0x98>
	} else {
		b_shortpacket = true;
    8082:	4b10      	ldr	r3, [pc, #64]	; (80c4 <udd_ctrl_in_sent+0xd4>)
    8084:	2201      	movs	r2, #1
    8086:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    8088:	4b0b      	ldr	r3, [pc, #44]	; (80b8 <udd_ctrl_in_sent+0xc8>)
    808a:	689a      	ldr	r2, [r3, #8]
    808c:	4b0b      	ldr	r3, [pc, #44]	; (80bc <udd_ctrl_in_sent+0xcc>)
    808e:	881b      	ldrh	r3, [r3, #0]
    8090:	18d2      	adds	r2, r2, r3
    8092:	1dbb      	adds	r3, r7, #6
    8094:	881b      	ldrh	r3, [r3, #0]
    8096:	490d      	ldr	r1, [pc, #52]	; (80cc <udd_ctrl_in_sent+0xdc>)
    8098:	1c08      	adds	r0, r1, #0
    809a:	2100      	movs	r1, #0
    809c:	4c0e      	ldr	r4, [pc, #56]	; (80d8 <udd_ctrl_in_sent+0xe8>)
    809e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    80a0:	4b06      	ldr	r3, [pc, #24]	; (80bc <udd_ctrl_in_sent+0xcc>)
    80a2:	881a      	ldrh	r2, [r3, #0]
    80a4:	1dbb      	adds	r3, r7, #6
    80a6:	881b      	ldrh	r3, [r3, #0]
    80a8:	18d3      	adds	r3, r2, r3
    80aa:	b29a      	uxth	r2, r3
    80ac:	4b03      	ldr	r3, [pc, #12]	; (80bc <udd_ctrl_in_sent+0xcc>)
    80ae:	801a      	strh	r2, [r3, #0]
}
    80b0:	46bd      	mov	sp, r7
    80b2:	b003      	add	sp, #12
    80b4:	bd90      	pop	{r4, r7, pc}
    80b6:	46c0      	nop			; (mov r8, r8)
    80b8:	20007330 	.word	0x20007330
    80bc:	20006fe8 	.word	0x20006fe8
    80c0:	20006fe6 	.word	0x20006fe6
    80c4:	20007105 	.word	0x20007105
    80c8:	20006fe4 	.word	0x20006fe4
    80cc:	200071c8 	.word	0x200071c8
    80d0:	20007348 	.word	0x20007348
    80d4:	00009c4d 	.word	0x00009c4d
    80d8:	00009ae9 	.word	0x00009ae9

000080dc <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    80dc:	b590      	push	{r4, r7, lr}
    80de:	b085      	sub	sp, #20
    80e0:	af00      	add	r7, sp, #0
    80e2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    80e8:	1c3b      	adds	r3, r7, #0
    80ea:	330e      	adds	r3, #14
    80ec:	68ba      	ldr	r2, [r7, #8]
    80ee:	8812      	ldrh	r2, [r2, #0]
    80f0:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    80f2:	4b46      	ldr	r3, [pc, #280]	; (820c <udd_ctrl_out_received+0x130>)
    80f4:	899b      	ldrh	r3, [r3, #12]
    80f6:	1c1a      	adds	r2, r3, #0
    80f8:	4b45      	ldr	r3, [pc, #276]	; (8210 <udd_ctrl_out_received+0x134>)
    80fa:	881b      	ldrh	r3, [r3, #0]
    80fc:	1c19      	adds	r1, r3, #0
    80fe:	1c3b      	adds	r3, r7, #0
    8100:	330e      	adds	r3, #14
    8102:	881b      	ldrh	r3, [r3, #0]
    8104:	18cb      	adds	r3, r1, r3
    8106:	429a      	cmp	r2, r3
    8108:	da07      	bge.n	811a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    810a:	4b40      	ldr	r3, [pc, #256]	; (820c <udd_ctrl_out_received+0x130>)
    810c:	8999      	ldrh	r1, [r3, #12]
    810e:	4b40      	ldr	r3, [pc, #256]	; (8210 <udd_ctrl_out_received+0x134>)
    8110:	881a      	ldrh	r2, [r3, #0]
    8112:	1c3b      	adds	r3, r7, #0
    8114:	330e      	adds	r3, #14
    8116:	1a8a      	subs	r2, r1, r2
    8118:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    811a:	4b3c      	ldr	r3, [pc, #240]	; (820c <udd_ctrl_out_received+0x130>)
    811c:	689a      	ldr	r2, [r3, #8]
    811e:	4b3c      	ldr	r3, [pc, #240]	; (8210 <udd_ctrl_out_received+0x134>)
    8120:	881b      	ldrh	r3, [r3, #0]
    8122:	18d1      	adds	r1, r2, r3
    8124:	1c3b      	adds	r3, r7, #0
    8126:	330e      	adds	r3, #14
    8128:	881b      	ldrh	r3, [r3, #0]
    812a:	4a3a      	ldr	r2, [pc, #232]	; (8214 <udd_ctrl_out_received+0x138>)
    812c:	1c08      	adds	r0, r1, #0
    812e:	1c11      	adds	r1, r2, #0
    8130:	1c1a      	adds	r2, r3, #0
    8132:	4b39      	ldr	r3, [pc, #228]	; (8218 <udd_ctrl_out_received+0x13c>)
    8134:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    8136:	4b36      	ldr	r3, [pc, #216]	; (8210 <udd_ctrl_out_received+0x134>)
    8138:	881a      	ldrh	r2, [r3, #0]
    813a:	1c3b      	adds	r3, r7, #0
    813c:	330e      	adds	r3, #14
    813e:	881b      	ldrh	r3, [r3, #0]
    8140:	18d3      	adds	r3, r2, r3
    8142:	b29a      	uxth	r2, r3
    8144:	4b32      	ldr	r3, [pc, #200]	; (8210 <udd_ctrl_out_received+0x134>)
    8146:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    8148:	1c3b      	adds	r3, r7, #0
    814a:	330e      	adds	r3, #14
    814c:	881b      	ldrh	r3, [r3, #0]
    814e:	2b40      	cmp	r3, #64	; 0x40
    8150:	d10a      	bne.n	8168 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    8152:	4b2e      	ldr	r3, [pc, #184]	; (820c <udd_ctrl_out_received+0x130>)
    8154:	88db      	ldrh	r3, [r3, #6]
    8156:	1c1a      	adds	r2, r3, #0
    8158:	4b30      	ldr	r3, [pc, #192]	; (821c <udd_ctrl_out_received+0x140>)
    815a:	881b      	ldrh	r3, [r3, #0]
    815c:	1c19      	adds	r1, r3, #0
    815e:	4b2c      	ldr	r3, [pc, #176]	; (8210 <udd_ctrl_out_received+0x134>)
    8160:	881b      	ldrh	r3, [r3, #0]
    8162:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    8164:	429a      	cmp	r2, r3
    8166:	dc1a      	bgt.n	819e <udd_ctrl_out_received+0xc2>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    8168:	4b29      	ldr	r3, [pc, #164]	; (8210 <udd_ctrl_out_received+0x134>)
    816a:	881a      	ldrh	r2, [r3, #0]
    816c:	4b27      	ldr	r3, [pc, #156]	; (820c <udd_ctrl_out_received+0x130>)
    816e:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    8170:	4b26      	ldr	r3, [pc, #152]	; (820c <udd_ctrl_out_received+0x130>)
    8172:	695b      	ldr	r3, [r3, #20]
    8174:	2b00      	cmp	r3, #0
    8176:	d00f      	beq.n	8198 <udd_ctrl_out_received+0xbc>
			if (!udd_g_ctrlreq.over_under_run()) {
    8178:	4b24      	ldr	r3, [pc, #144]	; (820c <udd_ctrl_out_received+0x130>)
    817a:	695b      	ldr	r3, [r3, #20]
    817c:	4798      	blx	r3
    817e:	1c03      	adds	r3, r0, #0
    8180:	2201      	movs	r2, #1
    8182:	4053      	eors	r3, r2
    8184:	b2db      	uxtb	r3, r3
    8186:	2b00      	cmp	r3, #0
    8188:	d006      	beq.n	8198 <udd_ctrl_out_received+0xbc>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    818a:	4b25      	ldr	r3, [pc, #148]	; (8220 <udd_ctrl_out_received+0x144>)
    818c:	2205      	movs	r2, #5
    818e:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    8190:	2000      	movs	r0, #0
    8192:	4b24      	ldr	r3, [pc, #144]	; (8224 <udd_ctrl_out_received+0x148>)
    8194:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    8196:	e036      	b.n	8206 <udd_ctrl_out_received+0x12a>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    8198:	4b23      	ldr	r3, [pc, #140]	; (8228 <udd_ctrl_out_received+0x14c>)
    819a:	4798      	blx	r3
		return;
    819c:	e033      	b.n	8206 <udd_ctrl_out_received+0x12a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    819e:	4b1b      	ldr	r3, [pc, #108]	; (820c <udd_ctrl_out_received+0x130>)
    81a0:	899a      	ldrh	r2, [r3, #12]
    81a2:	4b1b      	ldr	r3, [pc, #108]	; (8210 <udd_ctrl_out_received+0x134>)
    81a4:	881b      	ldrh	r3, [r3, #0]
    81a6:	429a      	cmp	r2, r3
    81a8:	d125      	bne.n	81f6 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    81aa:	4b18      	ldr	r3, [pc, #96]	; (820c <udd_ctrl_out_received+0x130>)
    81ac:	695b      	ldr	r3, [r3, #20]
    81ae:	2b00      	cmp	r3, #0
    81b0:	d106      	bne.n	81c0 <udd_ctrl_out_received+0xe4>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    81b2:	4b1b      	ldr	r3, [pc, #108]	; (8220 <udd_ctrl_out_received+0x144>)
    81b4:	2205      	movs	r2, #5
    81b6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    81b8:	2000      	movs	r0, #0
    81ba:	4b1a      	ldr	r3, [pc, #104]	; (8224 <udd_ctrl_out_received+0x148>)
    81bc:	4798      	blx	r3
			return;
    81be:	e022      	b.n	8206 <udd_ctrl_out_received+0x12a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    81c0:	4b12      	ldr	r3, [pc, #72]	; (820c <udd_ctrl_out_received+0x130>)
    81c2:	695b      	ldr	r3, [r3, #20]
    81c4:	4798      	blx	r3
    81c6:	1c03      	adds	r3, r0, #0
    81c8:	2201      	movs	r2, #1
    81ca:	4053      	eors	r3, r2
    81cc:	b2db      	uxtb	r3, r3
    81ce:	2b00      	cmp	r3, #0
    81d0:	d006      	beq.n	81e0 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    81d2:	4b13      	ldr	r3, [pc, #76]	; (8220 <udd_ctrl_out_received+0x144>)
    81d4:	2205      	movs	r2, #5
    81d6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    81d8:	2000      	movs	r0, #0
    81da:	4b12      	ldr	r3, [pc, #72]	; (8224 <udd_ctrl_out_received+0x148>)
    81dc:	4798      	blx	r3
			return;
    81de:	e012      	b.n	8206 <udd_ctrl_out_received+0x12a>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    81e0:	4b0e      	ldr	r3, [pc, #56]	; (821c <udd_ctrl_out_received+0x140>)
    81e2:	881a      	ldrh	r2, [r3, #0]
    81e4:	4b0a      	ldr	r3, [pc, #40]	; (8210 <udd_ctrl_out_received+0x134>)
    81e6:	881b      	ldrh	r3, [r3, #0]
    81e8:	18d3      	adds	r3, r2, r3
    81ea:	b29a      	uxth	r2, r3
    81ec:	4b0b      	ldr	r3, [pc, #44]	; (821c <udd_ctrl_out_received+0x140>)
    81ee:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    81f0:	4b07      	ldr	r3, [pc, #28]	; (8210 <udd_ctrl_out_received+0x134>)
    81f2:	2200      	movs	r2, #0
    81f4:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    81f6:	4a0d      	ldr	r2, [pc, #52]	; (822c <udd_ctrl_out_received+0x150>)
    81f8:	4b06      	ldr	r3, [pc, #24]	; (8214 <udd_ctrl_out_received+0x138>)
    81fa:	1c10      	adds	r0, r2, #0
    81fc:	2100      	movs	r1, #0
    81fe:	1c1a      	adds	r2, r3, #0
    8200:	2340      	movs	r3, #64	; 0x40
    8202:	4c0b      	ldr	r4, [pc, #44]	; (8230 <udd_ctrl_out_received+0x154>)
    8204:	47a0      	blx	r4
}
    8206:	46bd      	mov	sp, r7
    8208:	b005      	add	sp, #20
    820a:	bd90      	pop	{r4, r7, pc}
    820c:	20007330 	.word	0x20007330
    8210:	20006fe8 	.word	0x20006fe8
    8214:	20007348 	.word	0x20007348
    8218:	0000b325 	.word	0x0000b325
    821c:	20006fe6 	.word	0x20006fe6
    8220:	20006fe4 	.word	0x20006fe4
    8224:	00007a09 	.word	0x00007a09
    8228:	00007fad 	.word	0x00007fad
    822c:	200071c8 	.word	0x200071c8
    8230:	00009ba1 	.word	0x00009ba1

00008234 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    8234:	b590      	push	{r4, r7, lr}
    8236:	b085      	sub	sp, #20
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
    823c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    823e:	683b      	ldr	r3, [r7, #0]
    8240:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    8242:	4b2b      	ldr	r3, [pc, #172]	; (82f0 <_usb_ep0_on_setup+0xbc>)
    8244:	781b      	ldrb	r3, [r3, #0]
    8246:	2b00      	cmp	r3, #0
    8248:	d009      	beq.n	825e <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    824a:	4b2a      	ldr	r3, [pc, #168]	; (82f4 <_usb_ep0_on_setup+0xc0>)
    824c:	691b      	ldr	r3, [r3, #16]
    824e:	2b00      	cmp	r3, #0
    8250:	d002      	beq.n	8258 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    8252:	4b28      	ldr	r3, [pc, #160]	; (82f4 <_usb_ep0_on_setup+0xc0>)
    8254:	691b      	ldr	r3, [r3, #16]
    8256:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    8258:	4b25      	ldr	r3, [pc, #148]	; (82f0 <_usb_ep0_on_setup+0xbc>)
    825a:	2200      	movs	r2, #0
    825c:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    825e:	68fb      	ldr	r3, [r7, #12]
    8260:	881b      	ldrh	r3, [r3, #0]
    8262:	2b08      	cmp	r3, #8
    8264:	d002      	beq.n	826c <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    8266:	4b24      	ldr	r3, [pc, #144]	; (82f8 <_usb_ep0_on_setup+0xc4>)
    8268:	4798      	blx	r3
		return;
    826a:	e03e      	b.n	82ea <_usb_ep0_on_setup+0xb6>
	} else {
		udd_ctrl_fetch_ram();
    826c:	4b23      	ldr	r3, [pc, #140]	; (82fc <_usb_ep0_on_setup+0xc8>)
    826e:	4798      	blx	r3
		if (false == udc_process_setup()) {
    8270:	4b23      	ldr	r3, [pc, #140]	; (8300 <_usb_ep0_on_setup+0xcc>)
    8272:	4798      	blx	r3
    8274:	1c03      	adds	r3, r0, #0
    8276:	2201      	movs	r2, #1
    8278:	4053      	eors	r3, r2
    827a:	b2db      	uxtb	r3, r3
    827c:	2b00      	cmp	r3, #0
    827e:	d002      	beq.n	8286 <_usb_ep0_on_setup+0x52>
			udd_ctrl_stall_data();
    8280:	4b1d      	ldr	r3, [pc, #116]	; (82f8 <_usb_ep0_on_setup+0xc4>)
    8282:	4798      	blx	r3
			return;
    8284:	e031      	b.n	82ea <_usb_ep0_on_setup+0xb6>
		} else if (Udd_setup_is_in()) {
    8286:	4b1b      	ldr	r3, [pc, #108]	; (82f4 <_usb_ep0_on_setup+0xc0>)
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	b2db      	uxtb	r3, r3
    828c:	b25b      	sxtb	r3, r3
    828e:	2b00      	cmp	r3, #0
    8290:	da13      	bge.n	82ba <_usb_ep0_on_setup+0x86>
			udd_ctrl_prev_payload_nb_trans = 0;
    8292:	4b1c      	ldr	r3, [pc, #112]	; (8304 <_usb_ep0_on_setup+0xd0>)
    8294:	2200      	movs	r2, #0
    8296:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    8298:	4b1b      	ldr	r3, [pc, #108]	; (8308 <_usb_ep0_on_setup+0xd4>)
    829a:	2200      	movs	r2, #0
    829c:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    829e:	4b14      	ldr	r3, [pc, #80]	; (82f0 <_usb_ep0_on_setup+0xbc>)
    82a0:	2202      	movs	r2, #2
    82a2:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    82a4:	4a19      	ldr	r2, [pc, #100]	; (830c <_usb_ep0_on_setup+0xd8>)
    82a6:	4b1a      	ldr	r3, [pc, #104]	; (8310 <_usb_ep0_on_setup+0xdc>)
    82a8:	1c10      	adds	r0, r2, #0
    82aa:	2100      	movs	r1, #0
    82ac:	1c1a      	adds	r2, r3, #0
    82ae:	2340      	movs	r3, #64	; 0x40
    82b0:	4c18      	ldr	r4, [pc, #96]	; (8314 <_usb_ep0_on_setup+0xe0>)
    82b2:	47a0      	blx	r4
			udd_ctrl_in_sent();
    82b4:	4b18      	ldr	r3, [pc, #96]	; (8318 <_usb_ep0_on_setup+0xe4>)
    82b6:	4798      	blx	r3
    82b8:	e017      	b.n	82ea <_usb_ep0_on_setup+0xb6>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    82ba:	4b0e      	ldr	r3, [pc, #56]	; (82f4 <_usb_ep0_on_setup+0xc0>)
    82bc:	88db      	ldrh	r3, [r3, #6]
    82be:	2b00      	cmp	r3, #0
    82c0:	d102      	bne.n	82c8 <_usb_ep0_on_setup+0x94>
				udd_ctrl_send_zlp_in();
    82c2:	4b16      	ldr	r3, [pc, #88]	; (831c <_usb_ep0_on_setup+0xe8>)
    82c4:	4798      	blx	r3
				return;
    82c6:	e010      	b.n	82ea <_usb_ep0_on_setup+0xb6>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    82c8:	4b0e      	ldr	r3, [pc, #56]	; (8304 <_usb_ep0_on_setup+0xd0>)
    82ca:	2200      	movs	r2, #0
    82cc:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    82ce:	4b0e      	ldr	r3, [pc, #56]	; (8308 <_usb_ep0_on_setup+0xd4>)
    82d0:	2200      	movs	r2, #0
    82d2:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    82d4:	4b06      	ldr	r3, [pc, #24]	; (82f0 <_usb_ep0_on_setup+0xbc>)
    82d6:	2201      	movs	r2, #1
    82d8:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    82da:	4a0c      	ldr	r2, [pc, #48]	; (830c <_usb_ep0_on_setup+0xd8>)
    82dc:	4b0c      	ldr	r3, [pc, #48]	; (8310 <_usb_ep0_on_setup+0xdc>)
    82de:	1c10      	adds	r0, r2, #0
    82e0:	2100      	movs	r1, #0
    82e2:	1c1a      	adds	r2, r3, #0
    82e4:	2340      	movs	r3, #64	; 0x40
    82e6:	4c0b      	ldr	r4, [pc, #44]	; (8314 <_usb_ep0_on_setup+0xe0>)
    82e8:	47a0      	blx	r4
			}
		}
	}
}
    82ea:	46bd      	mov	sp, r7
    82ec:	b005      	add	sp, #20
    82ee:	bd90      	pop	{r4, r7, pc}
    82f0:	20006fe4 	.word	0x20006fe4
    82f4:	20007330 	.word	0x20007330
    82f8:	00007b81 	.word	0x00007b81
    82fc:	00007f51 	.word	0x00007f51
    8300:	00004615 	.word	0x00004615
    8304:	20006fe6 	.word	0x20006fe6
    8308:	20006fe8 	.word	0x20006fe8
    830c:	200071c8 	.word	0x200071c8
    8310:	20007348 	.word	0x20007348
    8314:	00009ba1 	.word	0x00009ba1
    8318:	00007ff1 	.word	0x00007ff1
    831c:	00007fad 	.word	0x00007fad

00008320 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    8320:	b580      	push	{r7, lr}
    8322:	b084      	sub	sp, #16
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    832c:	4b0a      	ldr	r3, [pc, #40]	; (8358 <udd_ctrl_underflow+0x38>)
    832e:	781b      	ldrb	r3, [r3, #0]
    8330:	2b01      	cmp	r3, #1
    8332:	d102      	bne.n	833a <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    8334:	4b09      	ldr	r3, [pc, #36]	; (835c <udd_ctrl_underflow+0x3c>)
    8336:	4798      	blx	r3
    8338:	e00a      	b.n	8350 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    833a:	4b07      	ldr	r3, [pc, #28]	; (8358 <udd_ctrl_underflow+0x38>)
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	2b04      	cmp	r3, #4
    8340:	d106      	bne.n	8350 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    8342:	68fb      	ldr	r3, [r7, #12]
    8344:	799b      	ldrb	r3, [r3, #6]
    8346:	4a06      	ldr	r2, [pc, #24]	; (8360 <udd_ctrl_underflow+0x40>)
    8348:	1c10      	adds	r0, r2, #0
    834a:	1c19      	adds	r1, r3, #0
    834c:	4b05      	ldr	r3, [pc, #20]	; (8364 <udd_ctrl_underflow+0x44>)
    834e:	4798      	blx	r3
	}
}
    8350:	46bd      	mov	sp, r7
    8352:	b004      	add	sp, #16
    8354:	bd80      	pop	{r7, pc}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	20006fe4 	.word	0x20006fe4
    835c:	00007fad 	.word	0x00007fad
    8360:	200071c8 	.word	0x200071c8
    8364:	00009979 	.word	0x00009979

00008368 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    8368:	b580      	push	{r7, lr}
    836a:	b084      	sub	sp, #16
    836c:	af00      	add	r7, sp, #0
    836e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    8374:	4b0a      	ldr	r3, [pc, #40]	; (83a0 <udd_ctrl_overflow+0x38>)
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	2b02      	cmp	r3, #2
    837a:	d103      	bne.n	8384 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    837c:	4b08      	ldr	r3, [pc, #32]	; (83a0 <udd_ctrl_overflow+0x38>)
    837e:	2204      	movs	r2, #4
    8380:	701a      	strb	r2, [r3, #0]
    8382:	e00a      	b.n	839a <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    8384:	4b06      	ldr	r3, [pc, #24]	; (83a0 <udd_ctrl_overflow+0x38>)
    8386:	781b      	ldrb	r3, [r3, #0]
    8388:	2b03      	cmp	r3, #3
    838a:	d106      	bne.n	839a <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    838c:	68fb      	ldr	r3, [r7, #12]
    838e:	799b      	ldrb	r3, [r3, #6]
    8390:	4a04      	ldr	r2, [pc, #16]	; (83a4 <udd_ctrl_overflow+0x3c>)
    8392:	1c10      	adds	r0, r2, #0
    8394:	1c19      	adds	r1, r3, #0
    8396:	4b04      	ldr	r3, [pc, #16]	; (83a8 <udd_ctrl_overflow+0x40>)
    8398:	4798      	blx	r3
	}
}
    839a:	46bd      	mov	sp, r7
    839c:	b004      	add	sp, #16
    839e:	bd80      	pop	{r7, pc}
    83a0:	20006fe4 	.word	0x20006fe4
    83a4:	200071c8 	.word	0x200071c8
    83a8:	00009979 	.word	0x00009979

000083ac <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    83ac:	b580      	push	{r7, lr}
    83ae:	b084      	sub	sp, #16
    83b0:	af00      	add	r7, sp, #0
    83b2:	6078      	str	r0, [r7, #4]
    83b4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    83b6:	683b      	ldr	r3, [r7, #0]
    83b8:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    83ba:	68fb      	ldr	r3, [r7, #12]
    83bc:	799b      	ldrb	r3, [r3, #6]
    83be:	b2db      	uxtb	r3, r3
    83c0:	b25b      	sxtb	r3, r3
    83c2:	2b00      	cmp	r3, #0
    83c4:	da04      	bge.n	83d0 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    83c6:	683b      	ldr	r3, [r7, #0]
    83c8:	1c18      	adds	r0, r3, #0
    83ca:	4b05      	ldr	r3, [pc, #20]	; (83e0 <_usb_ep0_on_tansfer_fail+0x34>)
    83cc:	4798      	blx	r3
    83ce:	e003      	b.n	83d8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    83d0:	683b      	ldr	r3, [r7, #0]
    83d2:	1c18      	adds	r0, r3, #0
    83d4:	4b03      	ldr	r3, [pc, #12]	; (83e4 <_usb_ep0_on_tansfer_fail+0x38>)
    83d6:	4798      	blx	r3
	}
}
    83d8:	46bd      	mov	sp, r7
    83da:	b004      	add	sp, #16
    83dc:	bd80      	pop	{r7, pc}
    83de:	46c0      	nop			; (mov r8, r8)
    83e0:	00008321 	.word	0x00008321
    83e4:	00008369 	.word	0x00008369

000083e8 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    83e8:	b580      	push	{r7, lr}
    83ea:	b082      	sub	sp, #8
    83ec:	af00      	add	r7, sp, #0
    83ee:	6078      	str	r0, [r7, #4]
    83f0:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    83f2:	4b0e      	ldr	r3, [pc, #56]	; (842c <_usb_ep0_on_tansfer_ok+0x44>)
    83f4:	781b      	ldrb	r3, [r3, #0]
    83f6:	2b01      	cmp	r3, #1
    83f8:	d104      	bne.n	8404 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    83fa:	683b      	ldr	r3, [r7, #0]
    83fc:	1c18      	adds	r0, r3, #0
    83fe:	4b0c      	ldr	r3, [pc, #48]	; (8430 <_usb_ep0_on_tansfer_ok+0x48>)
    8400:	4798      	blx	r3
    8402:	e010      	b.n	8426 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    8404:	4b09      	ldr	r3, [pc, #36]	; (842c <_usb_ep0_on_tansfer_ok+0x44>)
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	2b02      	cmp	r3, #2
    840a:	d102      	bne.n	8412 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    840c:	4b09      	ldr	r3, [pc, #36]	; (8434 <_usb_ep0_on_tansfer_ok+0x4c>)
    840e:	4798      	blx	r3
    8410:	e009      	b.n	8426 <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    8412:	4b09      	ldr	r3, [pc, #36]	; (8438 <_usb_ep0_on_tansfer_ok+0x50>)
    8414:	691b      	ldr	r3, [r3, #16]
    8416:	2b00      	cmp	r3, #0
    8418:	d002      	beq.n	8420 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    841a:	4b07      	ldr	r3, [pc, #28]	; (8438 <_usb_ep0_on_tansfer_ok+0x50>)
    841c:	691b      	ldr	r3, [r3, #16]
    841e:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    8420:	4b02      	ldr	r3, [pc, #8]	; (842c <_usb_ep0_on_tansfer_ok+0x44>)
    8422:	2200      	movs	r2, #0
    8424:	701a      	strb	r2, [r3, #0]
		}
}
    8426:	46bd      	mov	sp, r7
    8428:	b002      	add	sp, #8
    842a:	bd80      	pop	{r7, pc}
    842c:	20006fe4 	.word	0x20006fe4
    8430:	000080dd 	.word	0x000080dd
    8434:	00007ff1 	.word	0x00007ff1
    8438:	20007330 	.word	0x20007330

0000843c <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    843c:	b590      	push	{r4, r7, lr}
    843e:	b085      	sub	sp, #20
    8440:	af00      	add	r7, sp, #0
    8442:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    8444:	1c3b      	adds	r3, r7, #0
    8446:	330c      	adds	r3, #12
    8448:	1c18      	adds	r0, r3, #0
    844a:	4b22      	ldr	r3, [pc, #136]	; (84d4 <udd_ctrl_ep_enable+0x98>)
    844c:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    844e:	1c3b      	adds	r3, r7, #0
    8450:	330c      	adds	r3, #12
    8452:	2203      	movs	r2, #3
    8454:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    8456:	687a      	ldr	r2, [r7, #4]
    8458:	1c3b      	adds	r3, r7, #0
    845a:	330c      	adds	r3, #12
    845c:	1c10      	adds	r0, r2, #0
    845e:	1c19      	adds	r1, r3, #0
    8460:	4b1d      	ldr	r3, [pc, #116]	; (84d8 <udd_ctrl_ep_enable+0x9c>)
    8462:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    8464:	687a      	ldr	r2, [r7, #4]
    8466:	4b1d      	ldr	r3, [pc, #116]	; (84dc <udd_ctrl_ep_enable+0xa0>)
    8468:	1c10      	adds	r0, r2, #0
    846a:	1c19      	adds	r1, r3, #0
    846c:	4b1c      	ldr	r3, [pc, #112]	; (84e0 <udd_ctrl_ep_enable+0xa4>)
    846e:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    8470:	687a      	ldr	r2, [r7, #4]
    8472:	4b1c      	ldr	r3, [pc, #112]	; (84e4 <udd_ctrl_ep_enable+0xa8>)
    8474:	1c10      	adds	r0, r2, #0
    8476:	2100      	movs	r1, #0
    8478:	2202      	movs	r2, #2
    847a:	4c1b      	ldr	r4, [pc, #108]	; (84e8 <udd_ctrl_ep_enable+0xac>)
    847c:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    847e:	687a      	ldr	r2, [r7, #4]
    8480:	4b1a      	ldr	r3, [pc, #104]	; (84ec <udd_ctrl_ep_enable+0xb0>)
    8482:	1c10      	adds	r0, r2, #0
    8484:	2100      	movs	r1, #0
    8486:	2200      	movs	r2, #0
    8488:	4c17      	ldr	r4, [pc, #92]	; (84e8 <udd_ctrl_ep_enable+0xac>)
    848a:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    848c:	687a      	ldr	r2, [r7, #4]
    848e:	4b18      	ldr	r3, [pc, #96]	; (84f0 <udd_ctrl_ep_enable+0xb4>)
    8490:	1c10      	adds	r0, r2, #0
    8492:	2100      	movs	r1, #0
    8494:	2201      	movs	r2, #1
    8496:	4c14      	ldr	r4, [pc, #80]	; (84e8 <udd_ctrl_ep_enable+0xac>)
    8498:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	1c18      	adds	r0, r3, #0
    849e:	2100      	movs	r1, #0
    84a0:	2202      	movs	r2, #2
    84a2:	4b14      	ldr	r3, [pc, #80]	; (84f4 <udd_ctrl_ep_enable+0xb8>)
    84a4:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    84a6:	687b      	ldr	r3, [r7, #4]
    84a8:	1c18      	adds	r0, r3, #0
    84aa:	2100      	movs	r1, #0
    84ac:	2200      	movs	r2, #0
    84ae:	4b11      	ldr	r3, [pc, #68]	; (84f4 <udd_ctrl_ep_enable+0xb8>)
    84b0:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	1c18      	adds	r0, r3, #0
    84b6:	2100      	movs	r1, #0
    84b8:	2201      	movs	r2, #1
    84ba:	4b0e      	ldr	r3, [pc, #56]	; (84f4 <udd_ctrl_ep_enable+0xb8>)
    84bc:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	1c18      	adds	r0, r3, #0
    84c2:	2101      	movs	r1, #1
    84c4:	4b0c      	ldr	r3, [pc, #48]	; (84f8 <udd_ctrl_ep_enable+0xbc>)
    84c6:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    84c8:	4b0c      	ldr	r3, [pc, #48]	; (84fc <udd_ctrl_ep_enable+0xc0>)
    84ca:	2200      	movs	r2, #0
    84cc:	701a      	strb	r2, [r3, #0]
}
    84ce:	46bd      	mov	sp, r7
    84d0:	b005      	add	sp, #20
    84d2:	bd90      	pop	{r4, r7, pc}
    84d4:	00009311 	.word	0x00009311
    84d8:	00009339 	.word	0x00009339
    84dc:	20007348 	.word	0x20007348
    84e0:	00009c4d 	.word	0x00009c4d
    84e4:	00008235 	.word	0x00008235
    84e8:	00008f05 	.word	0x00008f05
    84ec:	000083e9 	.word	0x000083e9
    84f0:	000083ad 	.word	0x000083ad
    84f4:	00008fe5 	.word	0x00008fe5
    84f8:	00007119 	.word	0x00007119
    84fc:	20006fe4 	.word	0x20006fe4

00008500 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    850a:	4b09      	ldr	r3, [pc, #36]	; (8530 <_usb_on_suspend+0x30>)
    850c:	1c18      	adds	r0, r3, #0
    850e:	2104      	movs	r1, #4
    8510:	4b08      	ldr	r3, [pc, #32]	; (8534 <_usb_on_suspend+0x34>)
    8512:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8514:	4b06      	ldr	r3, [pc, #24]	; (8530 <_usb_on_suspend+0x30>)
    8516:	1c18      	adds	r0, r3, #0
    8518:	2102      	movs	r1, #2
    851a:	4b07      	ldr	r3, [pc, #28]	; (8538 <_usb_on_suspend+0x38>)
    851c:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    851e:	2001      	movs	r0, #1
    8520:	4b06      	ldr	r3, [pc, #24]	; (853c <_usb_on_suspend+0x3c>)
    8522:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    8524:	4b06      	ldr	r3, [pc, #24]	; (8540 <_usb_on_suspend+0x40>)
    8526:	4798      	blx	r3
#endif
}
    8528:	46bd      	mov	sp, r7
    852a:	b002      	add	sp, #8
    852c:	bd80      	pop	{r7, pc}
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	200071c8 	.word	0x200071c8
    8534:	00008eb1 	.word	0x00008eb1
    8538:	00008e55 	.word	0x00008e55
    853c:	0000728d 	.word	0x0000728d
    8540:	0000a8b5 	.word	0x0000a8b5

00008544 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    8544:	b580      	push	{r7, lr}
    8546:	b084      	sub	sp, #16
    8548:	af00      	add	r7, sp, #0
    854a:	6078      	str	r0, [r7, #4]
    854c:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    854e:	683b      	ldr	r3, [r7, #0]
    8550:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8552:	4b0a      	ldr	r3, [pc, #40]	; (857c <_usb_device_lpm_suspend+0x38>)
    8554:	1c18      	adds	r0, r3, #0
    8556:	2106      	movs	r1, #6
    8558:	4b09      	ldr	r3, [pc, #36]	; (8580 <_usb_device_lpm_suspend+0x3c>)
    855a:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    855c:	4b07      	ldr	r3, [pc, #28]	; (857c <_usb_device_lpm_suspend+0x38>)
    855e:	1c18      	adds	r0, r3, #0
    8560:	2104      	movs	r1, #4
    8562:	4b07      	ldr	r3, [pc, #28]	; (8580 <_usb_device_lpm_suspend+0x3c>)
    8564:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8566:	4b05      	ldr	r3, [pc, #20]	; (857c <_usb_device_lpm_suspend+0x38>)
    8568:	1c18      	adds	r0, r3, #0
    856a:	2102      	movs	r1, #2
    856c:	4b05      	ldr	r3, [pc, #20]	; (8584 <_usb_device_lpm_suspend+0x40>)
    856e:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    8570:	2002      	movs	r0, #2
    8572:	4b05      	ldr	r3, [pc, #20]	; (8588 <_usb_device_lpm_suspend+0x44>)
    8574:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    8576:	46bd      	mov	sp, r7
    8578:	b004      	add	sp, #16
    857a:	bd80      	pop	{r7, pc}
    857c:	200071c8 	.word	0x200071c8
    8580:	00008eb1 	.word	0x00008eb1
    8584:	00008e55 	.word	0x00008e55
    8588:	0000728d 	.word	0x0000728d

0000858c <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    858c:	b580      	push	{r7, lr}
    858e:	b082      	sub	sp, #8
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
    8594:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    8596:	4b03      	ldr	r3, [pc, #12]	; (85a4 <_usb_on_sof_notify+0x18>)
    8598:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    859a:	4b03      	ldr	r3, [pc, #12]	; (85a8 <_usb_on_sof_notify+0x1c>)
    859c:	4798      	blx	r3
#endif
}
    859e:	46bd      	mov	sp, r7
    85a0:	b002      	add	sp, #8
    85a2:	bd80      	pop	{r7, pc}
    85a4:	00003d31 	.word	0x00003d31
    85a8:	0000a8d5 	.word	0x0000a8d5

000085ac <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    85ac:	b580      	push	{r7, lr}
    85ae:	b082      	sub	sp, #8
    85b0:	af00      	add	r7, sp, #0
    85b2:	6078      	str	r0, [r7, #4]
    85b4:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    85b6:	4b07      	ldr	r3, [pc, #28]	; (85d4 <_usb_on_bus_reset+0x28>)
    85b8:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    85ba:	687b      	ldr	r3, [r7, #4]
    85bc:	1c18      	adds	r0, r3, #0
    85be:	2100      	movs	r1, #0
    85c0:	4b05      	ldr	r3, [pc, #20]	; (85d8 <_usb_on_bus_reset+0x2c>)
    85c2:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	1c18      	adds	r0, r3, #0
    85c8:	4b04      	ldr	r3, [pc, #16]	; (85dc <_usb_on_bus_reset+0x30>)
    85ca:	4798      	blx	r3
}
    85cc:	46bd      	mov	sp, r7
    85ce:	b002      	add	sp, #8
    85d0:	bd80      	pop	{r7, pc}
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	00003cbd 	.word	0x00003cbd
    85d8:	00007095 	.word	0x00007095
    85dc:	0000843d 	.word	0x0000843d

000085e0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b082      	sub	sp, #8
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
    85e8:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    85ea:	4b10      	ldr	r3, [pc, #64]	; (862c <_usb_on_wakeup+0x4c>)
    85ec:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    85ee:	4b10      	ldr	r3, [pc, #64]	; (8630 <_usb_on_wakeup+0x50>)
    85f0:	1c18      	adds	r0, r3, #0
    85f2:	2102      	movs	r1, #2
    85f4:	4b0f      	ldr	r3, [pc, #60]	; (8634 <_usb_on_wakeup+0x54>)
    85f6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    85f8:	4b0d      	ldr	r3, [pc, #52]	; (8630 <_usb_on_wakeup+0x50>)
    85fa:	1c18      	adds	r0, r3, #0
    85fc:	2104      	movs	r1, #4
    85fe:	4b0e      	ldr	r3, [pc, #56]	; (8638 <_usb_on_wakeup+0x58>)
    8600:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    8602:	4a0b      	ldr	r2, [pc, #44]	; (8630 <_usb_on_wakeup+0x50>)
    8604:	4b0d      	ldr	r3, [pc, #52]	; (863c <_usb_on_wakeup+0x5c>)
    8606:	1c10      	adds	r0, r2, #0
    8608:	2106      	movs	r1, #6
    860a:	1c1a      	adds	r2, r3, #0
    860c:	4b0c      	ldr	r3, [pc, #48]	; (8640 <_usb_on_wakeup+0x60>)
    860e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8610:	4b07      	ldr	r3, [pc, #28]	; (8630 <_usb_on_wakeup+0x50>)
    8612:	1c18      	adds	r0, r3, #0
    8614:	2106      	movs	r1, #6
    8616:	4b08      	ldr	r3, [pc, #32]	; (8638 <_usb_on_wakeup+0x58>)
    8618:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    861a:	2003      	movs	r0, #3
    861c:	4b09      	ldr	r3, [pc, #36]	; (8644 <_usb_on_wakeup+0x64>)
    861e:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    8620:	4b09      	ldr	r3, [pc, #36]	; (8648 <_usb_on_wakeup+0x68>)
    8622:	4798      	blx	r3
#endif
}
    8624:	46bd      	mov	sp, r7
    8626:	b002      	add	sp, #8
    8628:	bd80      	pop	{r7, pc}
    862a:	46c0      	nop			; (mov r8, r8)
    862c:	00007255 	.word	0x00007255
    8630:	200071c8 	.word	0x200071c8
    8634:	00008eb1 	.word	0x00008eb1
    8638:	00008e55 	.word	0x00008e55
    863c:	00008545 	.word	0x00008545
    8640:	00008e05 	.word	0x00008e05
    8644:	0000728d 	.word	0x0000728d
    8648:	0000a8c5 	.word	0x0000a8c5

0000864c <udd_detach>:

void udd_detach(void)
{
    864c:	b580      	push	{r7, lr}
    864e:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    8650:	4b04      	ldr	r3, [pc, #16]	; (8664 <udd_detach+0x18>)
    8652:	1c18      	adds	r0, r3, #0
    8654:	4b04      	ldr	r3, [pc, #16]	; (8668 <udd_detach+0x1c>)
    8656:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    8658:	2001      	movs	r0, #1
    865a:	4b04      	ldr	r3, [pc, #16]	; (866c <udd_detach+0x20>)
    865c:	4798      	blx	r3
}
    865e:	46bd      	mov	sp, r7
    8660:	bd80      	pop	{r7, pc}
    8662:	46c0      	nop			; (mov r8, r8)
    8664:	200071c8 	.word	0x200071c8
    8668:	00007055 	.word	0x00007055
    866c:	0000728d 	.word	0x0000728d

00008670 <udd_attach>:

void udd_attach(void)
{
    8670:	b580      	push	{r7, lr}
    8672:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    8674:	2003      	movs	r0, #3
    8676:	4b22      	ldr	r3, [pc, #136]	; (8700 <udd_attach+0x90>)
    8678:	4798      	blx	r3
	usb_device_attach(&usb_device);
    867a:	4b22      	ldr	r3, [pc, #136]	; (8704 <udd_attach+0x94>)
    867c:	1c18      	adds	r0, r3, #0
    867e:	4b22      	ldr	r3, [pc, #136]	; (8708 <udd_attach+0x98>)
    8680:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    8682:	4a20      	ldr	r2, [pc, #128]	; (8704 <udd_attach+0x94>)
    8684:	4b21      	ldr	r3, [pc, #132]	; (870c <udd_attach+0x9c>)
    8686:	1c10      	adds	r0, r2, #0
    8688:	2104      	movs	r1, #4
    868a:	1c1a      	adds	r2, r3, #0
    868c:	4b20      	ldr	r3, [pc, #128]	; (8710 <udd_attach+0xa0>)
    868e:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    8690:	4a1c      	ldr	r2, [pc, #112]	; (8704 <udd_attach+0x94>)
    8692:	4b20      	ldr	r3, [pc, #128]	; (8714 <udd_attach+0xa4>)
    8694:	1c10      	adds	r0, r2, #0
    8696:	2100      	movs	r1, #0
    8698:	1c1a      	adds	r2, r3, #0
    869a:	4b1d      	ldr	r3, [pc, #116]	; (8710 <udd_attach+0xa0>)
    869c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    869e:	4a19      	ldr	r2, [pc, #100]	; (8704 <udd_attach+0x94>)
    86a0:	4b1d      	ldr	r3, [pc, #116]	; (8718 <udd_attach+0xa8>)
    86a2:	1c10      	adds	r0, r2, #0
    86a4:	2101      	movs	r1, #1
    86a6:	1c1a      	adds	r2, r3, #0
    86a8:	4b19      	ldr	r3, [pc, #100]	; (8710 <udd_attach+0xa0>)
    86aa:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    86ac:	4a15      	ldr	r2, [pc, #84]	; (8704 <udd_attach+0x94>)
    86ae:	4b1b      	ldr	r3, [pc, #108]	; (871c <udd_attach+0xac>)
    86b0:	1c10      	adds	r0, r2, #0
    86b2:	2102      	movs	r1, #2
    86b4:	1c1a      	adds	r2, r3, #0
    86b6:	4b16      	ldr	r3, [pc, #88]	; (8710 <udd_attach+0xa0>)
    86b8:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    86ba:	4b12      	ldr	r3, [pc, #72]	; (8704 <udd_attach+0x94>)
    86bc:	1c18      	adds	r0, r3, #0
    86be:	2104      	movs	r1, #4
    86c0:	4b17      	ldr	r3, [pc, #92]	; (8720 <udd_attach+0xb0>)
    86c2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    86c4:	4b0f      	ldr	r3, [pc, #60]	; (8704 <udd_attach+0x94>)
    86c6:	1c18      	adds	r0, r3, #0
    86c8:	2100      	movs	r1, #0
    86ca:	4b15      	ldr	r3, [pc, #84]	; (8720 <udd_attach+0xb0>)
    86cc:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    86ce:	4b0d      	ldr	r3, [pc, #52]	; (8704 <udd_attach+0x94>)
    86d0:	1c18      	adds	r0, r3, #0
    86d2:	2101      	movs	r1, #1
    86d4:	4b12      	ldr	r3, [pc, #72]	; (8720 <udd_attach+0xb0>)
    86d6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    86d8:	4b0a      	ldr	r3, [pc, #40]	; (8704 <udd_attach+0x94>)
    86da:	1c18      	adds	r0, r3, #0
    86dc:	2102      	movs	r1, #2
    86de:	4b10      	ldr	r3, [pc, #64]	; (8720 <udd_attach+0xb0>)
    86e0:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    86e2:	4a08      	ldr	r2, [pc, #32]	; (8704 <udd_attach+0x94>)
    86e4:	4b0f      	ldr	r3, [pc, #60]	; (8724 <udd_attach+0xb4>)
    86e6:	1c10      	adds	r0, r2, #0
    86e8:	2106      	movs	r1, #6
    86ea:	1c1a      	adds	r2, r3, #0
    86ec:	4b08      	ldr	r3, [pc, #32]	; (8710 <udd_attach+0xa0>)
    86ee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    86f0:	4b04      	ldr	r3, [pc, #16]	; (8704 <udd_attach+0x94>)
    86f2:	1c18      	adds	r0, r3, #0
    86f4:	2106      	movs	r1, #6
    86f6:	4b0a      	ldr	r3, [pc, #40]	; (8720 <udd_attach+0xb0>)
    86f8:	4798      	blx	r3
#endif
}
    86fa:	46bd      	mov	sp, r7
    86fc:	bd80      	pop	{r7, pc}
    86fe:	46c0      	nop			; (mov r8, r8)
    8700:	0000728d 	.word	0x0000728d
    8704:	200071c8 	.word	0x200071c8
    8708:	00007031 	.word	0x00007031
    870c:	00008501 	.word	0x00008501
    8710:	00008e05 	.word	0x00008e05
    8714:	0000858d 	.word	0x0000858d
    8718:	000085ad 	.word	0x000085ad
    871c:	000085e1 	.word	0x000085e1
    8720:	00008e55 	.word	0x00008e55
    8724:	00008545 	.word	0x00008545

00008728 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    8728:	b580      	push	{r7, lr}
    872a:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    872c:	200e      	movs	r0, #14
    872e:	2100      	movs	r1, #0
    8730:	4b09      	ldr	r3, [pc, #36]	; (8758 <_uhd_vbus_handler+0x30>)
    8732:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    8734:	200e      	movs	r0, #14
    8736:	4b09      	ldr	r3, [pc, #36]	; (875c <_uhd_vbus_handler+0x34>)
    8738:	4798      	blx	r3
    873a:	1c03      	adds	r3, r0, #0
    873c:	2b00      	cmp	r3, #0
    873e:	d002      	beq.n	8746 <_uhd_vbus_handler+0x1e>
		udd_attach();
    8740:	4b07      	ldr	r3, [pc, #28]	; (8760 <_uhd_vbus_handler+0x38>)
    8742:	4798      	blx	r3
    8744:	e001      	b.n	874a <_uhd_vbus_handler+0x22>
	} else {
		udd_detach();
    8746:	4b07      	ldr	r3, [pc, #28]	; (8764 <_uhd_vbus_handler+0x3c>)
    8748:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    874a:	200e      	movs	r0, #14
    874c:	2100      	movs	r1, #0
    874e:	4b06      	ldr	r3, [pc, #24]	; (8768 <_uhd_vbus_handler+0x40>)
    8750:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8752:	46bd      	mov	sp, r7
    8754:	bd80      	pop	{r7, pc}
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	000049f1 	.word	0x000049f1
    875c:	00007175 	.word	0x00007175
    8760:	00008671 	.word	0x00008671
    8764:	0000864d 	.word	0x0000864d
    8768:	000049a9 	.word	0x000049a9

0000876c <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    876c:	b580      	push	{r7, lr}
    876e:	b084      	sub	sp, #16
    8770:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    8772:	1d3b      	adds	r3, r7, #4
    8774:	1c18      	adds	r0, r3, #0
    8776:	4b13      	ldr	r3, [pc, #76]	; (87c4 <_usb_vbus_config+0x58>)
    8778:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    877a:	1d3b      	adds	r3, r7, #4
    877c:	220e      	movs	r2, #14
    877e:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    8780:	1d3b      	adds	r3, r7, #4
    8782:	2200      	movs	r2, #0
    8784:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    8786:	1d3b      	adds	r3, r7, #4
    8788:	2200      	movs	r2, #0
    878a:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    878c:	1d3b      	adds	r3, r7, #4
    878e:	2203      	movs	r2, #3
    8790:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    8792:	1d3b      	adds	r3, r7, #4
    8794:	2201      	movs	r2, #1
    8796:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    8798:	200e      	movs	r0, #14
    879a:	2100      	movs	r1, #0
    879c:	4b0a      	ldr	r3, [pc, #40]	; (87c8 <_usb_vbus_config+0x5c>)
    879e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    87a0:	1d3b      	adds	r3, r7, #4
    87a2:	200e      	movs	r0, #14
    87a4:	1c19      	adds	r1, r3, #0
    87a6:	4b09      	ldr	r3, [pc, #36]	; (87cc <_usb_vbus_config+0x60>)
    87a8:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    87aa:	4b09      	ldr	r3, [pc, #36]	; (87d0 <_usb_vbus_config+0x64>)
    87ac:	1c18      	adds	r0, r3, #0
    87ae:	210e      	movs	r1, #14
    87b0:	2200      	movs	r2, #0
    87b2:	4b08      	ldr	r3, [pc, #32]	; (87d4 <_usb_vbus_config+0x68>)
    87b4:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    87b6:	200e      	movs	r0, #14
    87b8:	2100      	movs	r1, #0
    87ba:	4b07      	ldr	r3, [pc, #28]	; (87d8 <_usb_vbus_config+0x6c>)
    87bc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    87be:	46bd      	mov	sp, r7
    87c0:	b004      	add	sp, #16
    87c2:	bd80      	pop	{r7, pc}
    87c4:	00004d35 	.word	0x00004d35
    87c8:	000049f1 	.word	0x000049f1
    87cc:	00004d69 	.word	0x00004d69
    87d0:	00008729 	.word	0x00008729
    87d4:	0000494d 	.word	0x0000494d
    87d8:	000049a9 	.word	0x000049a9

000087dc <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    87dc:	b580      	push	{r7, lr}
    87de:	b082      	sub	sp, #8
    87e0:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    87e2:	4b16      	ldr	r3, [pc, #88]	; (883c <udd_enable+0x60>)
    87e4:	4798      	blx	r3
    87e6:	1c03      	adds	r3, r0, #0
    87e8:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    87ea:	1c3b      	adds	r3, r7, #0
    87ec:	1c18      	adds	r0, r3, #0
    87ee:	4b14      	ldr	r3, [pc, #80]	; (8840 <udd_enable+0x64>)
    87f0:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    87f2:	1c3b      	adds	r3, r7, #0
    87f4:	2200      	movs	r2, #0
    87f6:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    87f8:	4912      	ldr	r1, [pc, #72]	; (8844 <udd_enable+0x68>)
    87fa:	4a13      	ldr	r2, [pc, #76]	; (8848 <udd_enable+0x6c>)
    87fc:	1c3b      	adds	r3, r7, #0
    87fe:	1c08      	adds	r0, r1, #0
    8800:	1c11      	adds	r1, r2, #0
    8802:	1c1a      	adds	r2, r3, #0
    8804:	4b11      	ldr	r3, [pc, #68]	; (884c <udd_enable+0x70>)
    8806:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    8808:	4b0e      	ldr	r3, [pc, #56]	; (8844 <udd_enable+0x68>)
    880a:	1c18      	adds	r0, r3, #0
    880c:	4b10      	ldr	r3, [pc, #64]	; (8850 <udd_enable+0x74>)
    880e:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    8810:	4b10      	ldr	r3, [pc, #64]	; (8854 <udd_enable+0x78>)
    8812:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    8814:	2001      	movs	r0, #1
    8816:	4b10      	ldr	r3, [pc, #64]	; (8858 <udd_enable+0x7c>)
    8818:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    881a:	4b10      	ldr	r3, [pc, #64]	; (885c <udd_enable+0x80>)
    881c:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    881e:	200e      	movs	r0, #14
    8820:	4b0f      	ldr	r3, [pc, #60]	; (8860 <udd_enable+0x84>)
    8822:	4798      	blx	r3
    8824:	1c03      	adds	r3, r0, #0
    8826:	2b00      	cmp	r3, #0
    8828:	d001      	beq.n	882e <udd_enable+0x52>
		/* USB Attach */
		_uhd_vbus_handler();
    882a:	4b0e      	ldr	r3, [pc, #56]	; (8864 <udd_enable+0x88>)
    882c:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    882e:	687b      	ldr	r3, [r7, #4]
    8830:	1c18      	adds	r0, r3, #0
    8832:	4b0d      	ldr	r3, [pc, #52]	; (8868 <udd_enable+0x8c>)
    8834:	4798      	blx	r3
}
    8836:	46bd      	mov	sp, r7
    8838:	b002      	add	sp, #8
    883a:	bd80      	pop	{r7, pc}
    883c:	00006f41 	.word	0x00006f41
    8840:	0000a24d 	.word	0x0000a24d
    8844:	200071c8 	.word	0x200071c8
    8848:	41005000 	.word	0x41005000
    884c:	0000a275 	.word	0x0000a275
    8850:	0000a1ed 	.word	0x0000a1ed
    8854:	00007255 	.word	0x00007255
    8858:	0000728d 	.word	0x0000728d
    885c:	0000876d 	.word	0x0000876d
    8860:	00007175 	.word	0x00007175
    8864:	00008729 	.word	0x00008729
    8868:	00006f89 	.word	0x00006f89

0000886c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    886c:	b580      	push	{r7, lr}
    886e:	b082      	sub	sp, #8
    8870:	af00      	add	r7, sp, #0
    8872:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8874:	687b      	ldr	r3, [r7, #4]
    8876:	2200      	movs	r2, #0
    8878:	701a      	strb	r2, [r3, #0]
}
    887a:	46bd      	mov	sp, r7
    887c:	b002      	add	sp, #8
    887e:	bd80      	pop	{r7, pc}

00008880 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8880:	b580      	push	{r7, lr}
    8882:	b082      	sub	sp, #8
    8884:	af00      	add	r7, sp, #0
    8886:	1c02      	adds	r2, r0, #0
    8888:	6039      	str	r1, [r7, #0]
    888a:	1dfb      	adds	r3, r7, #7
    888c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    888e:	1dfb      	adds	r3, r7, #7
    8890:	781b      	ldrb	r3, [r3, #0]
    8892:	2b01      	cmp	r3, #1
    8894:	d00a      	beq.n	88ac <system_apb_clock_set_mask+0x2c>
    8896:	2b02      	cmp	r3, #2
    8898:	d00f      	beq.n	88ba <system_apb_clock_set_mask+0x3a>
    889a:	2b00      	cmp	r3, #0
    889c:	d114      	bne.n	88c8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    889e:	4b0e      	ldr	r3, [pc, #56]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88a0:	4a0d      	ldr	r2, [pc, #52]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88a2:	6991      	ldr	r1, [r2, #24]
    88a4:	683a      	ldr	r2, [r7, #0]
    88a6:	430a      	orrs	r2, r1
    88a8:	619a      	str	r2, [r3, #24]
			break;
    88aa:	e00f      	b.n	88cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    88ac:	4b0a      	ldr	r3, [pc, #40]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88ae:	4a0a      	ldr	r2, [pc, #40]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88b0:	69d1      	ldr	r1, [r2, #28]
    88b2:	683a      	ldr	r2, [r7, #0]
    88b4:	430a      	orrs	r2, r1
    88b6:	61da      	str	r2, [r3, #28]
			break;
    88b8:	e008      	b.n	88cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    88ba:	4b07      	ldr	r3, [pc, #28]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88bc:	4a06      	ldr	r2, [pc, #24]	; (88d8 <system_apb_clock_set_mask+0x58>)
    88be:	6a11      	ldr	r1, [r2, #32]
    88c0:	683a      	ldr	r2, [r7, #0]
    88c2:	430a      	orrs	r2, r1
    88c4:	621a      	str	r2, [r3, #32]
			break;
    88c6:	e001      	b.n	88cc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    88c8:	2317      	movs	r3, #23
    88ca:	e000      	b.n	88ce <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    88cc:	2300      	movs	r3, #0
}
    88ce:	1c18      	adds	r0, r3, #0
    88d0:	46bd      	mov	sp, r7
    88d2:	b002      	add	sp, #8
    88d4:	bd80      	pop	{r7, pc}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	40000400 	.word	0x40000400

000088dc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    88dc:	b580      	push	{r7, lr}
    88de:	b082      	sub	sp, #8
    88e0:	af00      	add	r7, sp, #0
    88e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    88e4:	687b      	ldr	r3, [r7, #4]
    88e6:	2280      	movs	r2, #128	; 0x80
    88e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	2200      	movs	r2, #0
    88ee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	2201      	movs	r2, #1
    88f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    88f6:	687b      	ldr	r3, [r7, #4]
    88f8:	2200      	movs	r2, #0
    88fa:	70da      	strb	r2, [r3, #3]
}
    88fc:	46bd      	mov	sp, r7
    88fe:	b002      	add	sp, #8
    8900:	bd80      	pop	{r7, pc}
    8902:	46c0      	nop			; (mov r8, r8)

00008904 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8904:	b580      	push	{r7, lr}
    8906:	b082      	sub	sp, #8
    8908:	af00      	add	r7, sp, #0
    890a:	1c02      	adds	r2, r0, #0
    890c:	1dfb      	adds	r3, r7, #7
    890e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8910:	4b06      	ldr	r3, [pc, #24]	; (892c <system_interrupt_enable+0x28>)
    8912:	1dfa      	adds	r2, r7, #7
    8914:	7812      	ldrb	r2, [r2, #0]
    8916:	1c11      	adds	r1, r2, #0
    8918:	221f      	movs	r2, #31
    891a:	400a      	ands	r2, r1
    891c:	2101      	movs	r1, #1
    891e:	1c08      	adds	r0, r1, #0
    8920:	4090      	lsls	r0, r2
    8922:	1c02      	adds	r2, r0, #0
    8924:	601a      	str	r2, [r3, #0]
}
    8926:	46bd      	mov	sp, r7
    8928:	b002      	add	sp, #8
    892a:	bd80      	pop	{r7, pc}
    892c:	e000e100 	.word	0xe000e100

00008930 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    8930:	b580      	push	{r7, lr}
    8932:	b082      	sub	sp, #8
    8934:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    8936:	4bbe      	ldr	r3, [pc, #760]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8938:	681b      	ldr	r3, [r3, #0]
    893a:	681b      	ldr	r3, [r3, #0]
    893c:	8c1b      	ldrh	r3, [r3, #32]
    893e:	b29b      	uxth	r3, r3
    8940:	1c1a      	adds	r2, r3, #0
    8942:	4bbc      	ldr	r3, [pc, #752]	; (8c34 <_usb_host_interrupt_handler+0x304>)
    8944:	1c10      	adds	r0, r2, #0
    8946:	4798      	blx	r3
    8948:	1c03      	adds	r3, r0, #0
    894a:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    894c:	687b      	ldr	r3, [r7, #4]
    894e:	2b1f      	cmp	r3, #31
    8950:	d900      	bls.n	8954 <_usb_host_interrupt_handler+0x24>
    8952:	e179      	b.n	8c48 <_usb_host_interrupt_handler+0x318>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    8954:	4bb6      	ldr	r3, [pc, #728]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8956:	681b      	ldr	r3, [r3, #0]
    8958:	681a      	ldr	r2, [r3, #0]
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	3308      	adds	r3, #8
    895e:	015b      	lsls	r3, r3, #5
    8960:	18d3      	adds	r3, r2, r3
    8962:	79db      	ldrb	r3, [r3, #7]
    8964:	b2db      	uxtb	r3, r3
    8966:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    8968:	683a      	ldr	r2, [r7, #0]
    896a:	2303      	movs	r3, #3
    896c:	4013      	ands	r3, r2
    896e:	d100      	bne.n	8972 <_usb_host_interrupt_handler+0x42>
    8970:	e08a      	b.n	8a88 <_usb_host_interrupt_handler+0x158>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	2201      	movs	r2, #1
    8976:	1c11      	adds	r1, r2, #0
    8978:	4099      	lsls	r1, r3
    897a:	1c0b      	adds	r3, r1, #0
    897c:	43db      	mvns	r3, r3
    897e:	1c1a      	adds	r2, r3, #0
    8980:	4bad      	ldr	r3, [pc, #692]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8982:	681b      	ldr	r3, [r3, #0]
    8984:	401a      	ands	r2, r3
    8986:	4bac      	ldr	r3, [pc, #688]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8988:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    898a:	4ba9      	ldr	r3, [pc, #676]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    898c:	681b      	ldr	r3, [r3, #0]
    898e:	681a      	ldr	r2, [r3, #0]
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	3308      	adds	r3, #8
    8994:	015b      	lsls	r3, r3, #5
    8996:	18d3      	adds	r3, r2, r3
    8998:	2203      	movs	r2, #3
    899a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    899c:	4ba4      	ldr	r3, [pc, #656]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    899e:	6819      	ldr	r1, [r3, #0]
    89a0:	23a8      	movs	r3, #168	; 0xa8
    89a2:	687a      	ldr	r2, [r7, #4]
    89a4:	188a      	adds	r2, r1, r2
    89a6:	18d3      	adds	r3, r2, r3
    89a8:	799b      	ldrb	r3, [r3, #6]
    89aa:	1c1a      	adds	r2, r3, #0
    89ac:	2301      	movs	r3, #1
    89ae:	4013      	ands	r3, r2
    89b0:	d06a      	beq.n	8a88 <_usb_host_interrupt_handler+0x158>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	b2da      	uxtb	r2, r3
    89b6:	4ba1      	ldr	r3, [pc, #644]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    89b8:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    89ba:	4b9d      	ldr	r3, [pc, #628]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    89bc:	681b      	ldr	r3, [r3, #0]
    89be:	681b      	ldr	r3, [r3, #0]
    89c0:	687a      	ldr	r2, [r7, #4]
    89c2:	3208      	adds	r2, #8
    89c4:	0152      	lsls	r2, r2, #5
    89c6:	5cd2      	ldrb	r2, [r2, r3]
    89c8:	2303      	movs	r3, #3
    89ca:	4013      	ands	r3, r2
    89cc:	b2db      	uxtb	r3, r3
    89ce:	2b01      	cmp	r3, #1
    89d0:	d11f      	bne.n	8a12 <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    89d2:	4a9b      	ldr	r2, [pc, #620]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    89d4:	687b      	ldr	r3, [r7, #4]
    89d6:	015b      	lsls	r3, r3, #5
    89d8:	18d3      	adds	r3, r2, r3
    89da:	685b      	ldr	r3, [r3, #4]
    89dc:	049b      	lsls	r3, r3, #18
    89de:	0c9b      	lsrs	r3, r3, #18
    89e0:	b29b      	uxth	r3, r3
    89e2:	1c1a      	adds	r2, r3, #0
    89e4:	4b95      	ldr	r3, [pc, #596]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    89e6:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    89e8:	4a95      	ldr	r2, [pc, #596]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	015b      	lsls	r3, r3, #5
    89ee:	18d3      	adds	r3, r2, r3
    89f0:	685b      	ldr	r3, [r3, #4]
    89f2:	0b9b      	lsrs	r3, r3, #14
    89f4:	049b      	lsls	r3, r3, #18
    89f6:	0c9b      	lsrs	r3, r3, #18
    89f8:	b29b      	uxth	r3, r3
    89fa:	1c1a      	adds	r2, r3, #0
    89fc:	4b8f      	ldr	r3, [pc, #572]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    89fe:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    8a00:	4a8f      	ldr	r2, [pc, #572]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	015b      	lsls	r3, r3, #5
    8a06:	18d3      	adds	r3, r2, r3
    8a08:	685a      	ldr	r2, [r3, #4]
    8a0a:	0b92      	lsrs	r2, r2, #14
    8a0c:	0392      	lsls	r2, r2, #14
    8a0e:	605a      	str	r2, [r3, #4]
    8a10:	e02d      	b.n	8a6e <_usb_host_interrupt_handler+0x13e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8a12:	4a8b      	ldr	r2, [pc, #556]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	015b      	lsls	r3, r3, #5
    8a18:	18d3      	adds	r3, r2, r3
    8a1a:	685b      	ldr	r3, [r3, #4]
    8a1c:	0b9b      	lsrs	r3, r3, #14
    8a1e:	049b      	lsls	r3, r3, #18
    8a20:	0c9b      	lsrs	r3, r3, #18
    8a22:	b29b      	uxth	r3, r3
    8a24:	1c1a      	adds	r2, r3, #0
    8a26:	4b85      	ldr	r3, [pc, #532]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8a28:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8a2a:	4a85      	ldr	r2, [pc, #532]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8a2c:	687b      	ldr	r3, [r7, #4]
    8a2e:	015b      	lsls	r3, r3, #5
    8a30:	18d3      	adds	r3, r2, r3
    8a32:	685b      	ldr	r3, [r3, #4]
    8a34:	049b      	lsls	r3, r3, #18
    8a36:	0c9b      	lsrs	r3, r3, #18
    8a38:	b29b      	uxth	r3, r3
    8a3a:	1c1a      	adds	r2, r3, #0
    8a3c:	4b7f      	ldr	r3, [pc, #508]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8a3e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    8a40:	4a7f      	ldr	r2, [pc, #508]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	015b      	lsls	r3, r3, #5
    8a46:	18d3      	adds	r3, r2, r3
    8a48:	6859      	ldr	r1, [r3, #4]
    8a4a:	4a7e      	ldr	r2, [pc, #504]	; (8c44 <_usb_host_interrupt_handler+0x314>)
    8a4c:	400a      	ands	r2, r1
    8a4e:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    8a50:	4b7a      	ldr	r3, [pc, #488]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8a52:	885b      	ldrh	r3, [r3, #2]
    8a54:	2b00      	cmp	r3, #0
    8a56:	d10a      	bne.n	8a6e <_usb_host_interrupt_handler+0x13e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8a58:	4a79      	ldr	r2, [pc, #484]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	015b      	lsls	r3, r3, #5
    8a5e:	18d3      	adds	r3, r2, r3
    8a60:	685b      	ldr	r3, [r3, #4]
    8a62:	049b      	lsls	r3, r3, #18
    8a64:	0c9b      	lsrs	r3, r3, #18
    8a66:	b29b      	uxth	r3, r3
    8a68:	1c1a      	adds	r2, r3, #0
    8a6a:	4b74      	ldr	r3, [pc, #464]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8a6c:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    8a6e:	4b70      	ldr	r3, [pc, #448]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8a70:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	3302      	adds	r3, #2
    8a76:	011b      	lsls	r3, r3, #4
    8a78:	18d3      	adds	r3, r2, r3
    8a7a:	685a      	ldr	r2, [r3, #4]
    8a7c:	4b6c      	ldr	r3, [pc, #432]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8a7e:	6819      	ldr	r1, [r3, #0]
    8a80:	4b6e      	ldr	r3, [pc, #440]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8a82:	1c08      	adds	r0, r1, #0
    8a84:	1c19      	adds	r1, r3, #0
    8a86:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    8a88:	683a      	ldr	r2, [r7, #0]
    8a8a:	2304      	movs	r3, #4
    8a8c:	4013      	ands	r3, r2
    8a8e:	d014      	beq.n	8aba <_usb_host_interrupt_handler+0x18a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8a90:	687b      	ldr	r3, [r7, #4]
    8a92:	2201      	movs	r2, #1
    8a94:	1c11      	adds	r1, r2, #0
    8a96:	4099      	lsls	r1, r3
    8a98:	1c0b      	adds	r3, r1, #0
    8a9a:	43db      	mvns	r3, r3
    8a9c:	1c1a      	adds	r2, r3, #0
    8a9e:	4b66      	ldr	r3, [pc, #408]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8aa0:	681b      	ldr	r3, [r3, #0]
    8aa2:	401a      	ands	r2, r3
    8aa4:	4b64      	ldr	r3, [pc, #400]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8aa6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8aa8:	4b61      	ldr	r3, [pc, #388]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8aaa:	681b      	ldr	r3, [r3, #0]
    8aac:	681a      	ldr	r2, [r3, #0]
    8aae:	687b      	ldr	r3, [r7, #4]
    8ab0:	3308      	adds	r3, #8
    8ab2:	015b      	lsls	r3, r3, #5
    8ab4:	18d3      	adds	r3, r2, r3
    8ab6:	2204      	movs	r2, #4
    8ab8:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    8aba:	683a      	ldr	r2, [r7, #0]
    8abc:	2308      	movs	r3, #8
    8abe:	4013      	ands	r3, r2
    8ac0:	d03d      	beq.n	8b3e <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8ac2:	687b      	ldr	r3, [r7, #4]
    8ac4:	2201      	movs	r2, #1
    8ac6:	1c11      	adds	r1, r2, #0
    8ac8:	4099      	lsls	r1, r3
    8aca:	1c0b      	adds	r3, r1, #0
    8acc:	43db      	mvns	r3, r3
    8ace:	1c1a      	adds	r2, r3, #0
    8ad0:	4b59      	ldr	r3, [pc, #356]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8ad2:	681b      	ldr	r3, [r3, #0]
    8ad4:	401a      	ands	r2, r3
    8ad6:	4b58      	ldr	r3, [pc, #352]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8ad8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8ada:	4b55      	ldr	r3, [pc, #340]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8adc:	681b      	ldr	r3, [r3, #0]
    8ade:	681a      	ldr	r2, [r3, #0]
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	3308      	adds	r3, #8
    8ae4:	015b      	lsls	r3, r3, #5
    8ae6:	18d3      	adds	r3, r2, r3
    8ae8:	2208      	movs	r2, #8
    8aea:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8aec:	4b50      	ldr	r3, [pc, #320]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8aee:	6819      	ldr	r1, [r3, #0]
    8af0:	23a8      	movs	r3, #168	; 0xa8
    8af2:	687a      	ldr	r2, [r7, #4]
    8af4:	188a      	adds	r2, r1, r2
    8af6:	18d3      	adds	r3, r2, r3
    8af8:	799b      	ldrb	r3, [r3, #6]
    8afa:	1c1a      	adds	r2, r3, #0
    8afc:	2302      	movs	r3, #2
    8afe:	4013      	ands	r3, r2
    8b00:	d01d      	beq.n	8b3e <_usb_host_interrupt_handler+0x20e>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    8b02:	687b      	ldr	r3, [r7, #4]
    8b04:	b2da      	uxtb	r2, r3
    8b06:	4b4d      	ldr	r3, [pc, #308]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8b08:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    8b0a:	4a4d      	ldr	r2, [pc, #308]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	015b      	lsls	r3, r3, #5
    8b10:	18d3      	adds	r3, r2, r3
    8b12:	3308      	adds	r3, #8
    8b14:	88db      	ldrh	r3, [r3, #6]
    8b16:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    8b18:	b2da      	uxtb	r2, r3
    8b1a:	231f      	movs	r3, #31
    8b1c:	4013      	ands	r3, r2
    8b1e:	b2da      	uxtb	r2, r3
    8b20:	4b46      	ldr	r3, [pc, #280]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8b22:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    8b24:	4b42      	ldr	r3, [pc, #264]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8b26:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	011b      	lsls	r3, r3, #4
    8b2c:	18d3      	adds	r3, r2, r3
    8b2e:	3324      	adds	r3, #36	; 0x24
    8b30:	685a      	ldr	r2, [r3, #4]
    8b32:	4b3f      	ldr	r3, [pc, #252]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8b34:	6819      	ldr	r1, [r3, #0]
    8b36:	4b41      	ldr	r3, [pc, #260]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8b38:	1c08      	adds	r0, r1, #0
    8b3a:	1c19      	adds	r1, r3, #0
    8b3c:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    8b3e:	683a      	ldr	r2, [r7, #0]
    8b40:	2310      	movs	r3, #16
    8b42:	4013      	ands	r3, r2
    8b44:	d03b      	beq.n	8bbe <_usb_host_interrupt_handler+0x28e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8b46:	687b      	ldr	r3, [r7, #4]
    8b48:	2201      	movs	r2, #1
    8b4a:	1c11      	adds	r1, r2, #0
    8b4c:	4099      	lsls	r1, r3
    8b4e:	1c0b      	adds	r3, r1, #0
    8b50:	43db      	mvns	r3, r3
    8b52:	1c1a      	adds	r2, r3, #0
    8b54:	4b38      	ldr	r3, [pc, #224]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8b56:	681b      	ldr	r3, [r3, #0]
    8b58:	401a      	ands	r2, r3
    8b5a:	4b37      	ldr	r3, [pc, #220]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8b5c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8b5e:	4b34      	ldr	r3, [pc, #208]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8b60:	681b      	ldr	r3, [r3, #0]
    8b62:	681a      	ldr	r2, [r3, #0]
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	3308      	adds	r3, #8
    8b68:	015b      	lsls	r3, r3, #5
    8b6a:	18d3      	adds	r3, r2, r3
    8b6c:	2210      	movs	r2, #16
    8b6e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8b70:	4b2f      	ldr	r3, [pc, #188]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8b72:	6819      	ldr	r1, [r3, #0]
    8b74:	23a8      	movs	r3, #168	; 0xa8
    8b76:	687a      	ldr	r2, [r7, #4]
    8b78:	188a      	adds	r2, r1, r2
    8b7a:	18d3      	adds	r3, r2, r3
    8b7c:	799b      	ldrb	r3, [r3, #6]
    8b7e:	1c1a      	adds	r2, r3, #0
    8b80:	2304      	movs	r3, #4
    8b82:	4013      	ands	r3, r2
    8b84:	d01b      	beq.n	8bbe <_usb_host_interrupt_handler+0x28e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	b2da      	uxtb	r2, r3
    8b8a:	4b2c      	ldr	r3, [pc, #176]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8b8c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8b8e:	4a2c      	ldr	r2, [pc, #176]	; (8c40 <_usb_host_interrupt_handler+0x310>)
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	015b      	lsls	r3, r3, #5
    8b94:	18d3      	adds	r3, r2, r3
    8b96:	685b      	ldr	r3, [r3, #4]
    8b98:	0b9b      	lsrs	r3, r3, #14
    8b9a:	049b      	lsls	r3, r3, #18
    8b9c:	0c9b      	lsrs	r3, r3, #18
    8b9e:	b29b      	uxth	r3, r3
    8ba0:	1c1a      	adds	r2, r3, #0
    8ba2:	4b26      	ldr	r3, [pc, #152]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8ba4:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    8ba6:	4b22      	ldr	r3, [pc, #136]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8ba8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	011b      	lsls	r3, r3, #4
    8bae:	18d3      	adds	r3, r2, r3
    8bb0:	3328      	adds	r3, #40	; 0x28
    8bb2:	685a      	ldr	r2, [r3, #4]
    8bb4:	4b1e      	ldr	r3, [pc, #120]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	1c18      	adds	r0, r3, #0
    8bba:	2100      	movs	r1, #0
    8bbc:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    8bbe:	683a      	ldr	r2, [r7, #0]
    8bc0:	2320      	movs	r3, #32
    8bc2:	4013      	ands	r3, r2
    8bc4:	d100      	bne.n	8bc8 <_usb_host_interrupt_handler+0x298>
    8bc6:	e115      	b.n	8df4 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	2201      	movs	r2, #1
    8bcc:	1c11      	adds	r1, r2, #0
    8bce:	4099      	lsls	r1, r3
    8bd0:	1c0b      	adds	r3, r1, #0
    8bd2:	43db      	mvns	r3, r3
    8bd4:	1c1a      	adds	r2, r3, #0
    8bd6:	4b18      	ldr	r3, [pc, #96]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8bd8:	681b      	ldr	r3, [r3, #0]
    8bda:	401a      	ands	r2, r3
    8bdc:	4b16      	ldr	r3, [pc, #88]	; (8c38 <_usb_host_interrupt_handler+0x308>)
    8bde:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8be0:	4b13      	ldr	r3, [pc, #76]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8be2:	681b      	ldr	r3, [r3, #0]
    8be4:	681a      	ldr	r2, [r3, #0]
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	3308      	adds	r3, #8
    8bea:	015b      	lsls	r3, r3, #5
    8bec:	18d3      	adds	r3, r2, r3
    8bee:	2220      	movs	r2, #32
    8bf0:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8bf2:	4b0f      	ldr	r3, [pc, #60]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8bf4:	6819      	ldr	r1, [r3, #0]
    8bf6:	23a8      	movs	r3, #168	; 0xa8
    8bf8:	687a      	ldr	r2, [r7, #4]
    8bfa:	188a      	adds	r2, r1, r2
    8bfc:	18d3      	adds	r3, r2, r3
    8bfe:	799b      	ldrb	r3, [r3, #6]
    8c00:	1c1a      	adds	r2, r3, #0
    8c02:	2308      	movs	r3, #8
    8c04:	4013      	ands	r3, r2
    8c06:	d100      	bne.n	8c0a <_usb_host_interrupt_handler+0x2da>
    8c08:	e0f4      	b.n	8df4 <_usb_host_interrupt_handler+0x4c4>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	b2da      	uxtb	r2, r3
    8c0e:	4b0b      	ldr	r3, [pc, #44]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8c10:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    8c12:	4b07      	ldr	r3, [pc, #28]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8c14:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    8c16:	687b      	ldr	r3, [r7, #4]
    8c18:	011b      	lsls	r3, r3, #4
    8c1a:	18d3      	adds	r3, r2, r3
    8c1c:	332c      	adds	r3, #44	; 0x2c
    8c1e:	685a      	ldr	r2, [r3, #4]
    8c20:	4b03      	ldr	r3, [pc, #12]	; (8c30 <_usb_host_interrupt_handler+0x300>)
    8c22:	6819      	ldr	r1, [r3, #0]
    8c24:	4b05      	ldr	r3, [pc, #20]	; (8c3c <_usb_host_interrupt_handler+0x30c>)
    8c26:	1c08      	adds	r0, r1, #0
    8c28:	1c19      	adds	r1, r3, #0
    8c2a:	4790      	blx	r2
    8c2c:	e0e2      	b.n	8df4 <_usb_host_interrupt_handler+0x4c4>
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	20007108 	.word	0x20007108
    8c34:	0000b255 	.word	0x0000b255
    8c38:	20007120 	.word	0x20007120
    8c3c:	2000710c 	.word	0x2000710c
    8c40:	20007388 	.word	0x20007388
    8c44:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    8c48:	4b6c      	ldr	r3, [pc, #432]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c4a:	681b      	ldr	r3, [r3, #0]
    8c4c:	681b      	ldr	r3, [r3, #0]
    8c4e:	8b9b      	ldrh	r3, [r3, #28]
    8c50:	b29b      	uxth	r3, r3
    8c52:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    8c54:	683a      	ldr	r2, [r7, #0]
    8c56:	2304      	movs	r3, #4
    8c58:	4013      	ands	r3, r2
    8c5a:	d013      	beq.n	8c84 <_usb_host_interrupt_handler+0x354>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    8c5c:	4b67      	ldr	r3, [pc, #412]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c5e:	681b      	ldr	r3, [r3, #0]
    8c60:	681b      	ldr	r3, [r3, #0]
    8c62:	2204      	movs	r2, #4
    8c64:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    8c66:	4b65      	ldr	r3, [pc, #404]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c68:	681a      	ldr	r2, [r3, #0]
    8c6a:	23a5      	movs	r3, #165	; 0xa5
    8c6c:	5cd3      	ldrb	r3, [r2, r3]
    8c6e:	1c1a      	adds	r2, r3, #0
    8c70:	2301      	movs	r3, #1
    8c72:	4013      	ands	r3, r2
    8c74:	d006      	beq.n	8c84 <_usb_host_interrupt_handler+0x354>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    8c76:	4b61      	ldr	r3, [pc, #388]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c78:	681b      	ldr	r3, [r3, #0]
    8c7a:	685a      	ldr	r2, [r3, #4]
    8c7c:	4b5f      	ldr	r3, [pc, #380]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c7e:	681b      	ldr	r3, [r3, #0]
    8c80:	1c18      	adds	r0, r3, #0
    8c82:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    8c84:	683a      	ldr	r2, [r7, #0]
    8c86:	2308      	movs	r3, #8
    8c88:	4013      	ands	r3, r2
    8c8a:	d016      	beq.n	8cba <_usb_host_interrupt_handler+0x38a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8c8c:	4b5c      	ldr	r3, [pc, #368]	; (8e00 <_usb_host_interrupt_handler+0x4d0>)
    8c8e:	2200      	movs	r2, #0
    8c90:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    8c92:	4b5a      	ldr	r3, [pc, #360]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c94:	681b      	ldr	r3, [r3, #0]
    8c96:	681b      	ldr	r3, [r3, #0]
    8c98:	2208      	movs	r2, #8
    8c9a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    8c9c:	4b57      	ldr	r3, [pc, #348]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8c9e:	681a      	ldr	r2, [r3, #0]
    8ca0:	23a5      	movs	r3, #165	; 0xa5
    8ca2:	5cd3      	ldrb	r3, [r2, r3]
    8ca4:	1c1a      	adds	r2, r3, #0
    8ca6:	2302      	movs	r3, #2
    8ca8:	4013      	ands	r3, r2
    8caa:	d006      	beq.n	8cba <_usb_host_interrupt_handler+0x38a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    8cac:	4b53      	ldr	r3, [pc, #332]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	689a      	ldr	r2, [r3, #8]
    8cb2:	4b52      	ldr	r3, [pc, #328]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cb4:	681b      	ldr	r3, [r3, #0]
    8cb6:	1c18      	adds	r0, r3, #0
    8cb8:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    8cba:	683a      	ldr	r2, [r7, #0]
    8cbc:	2340      	movs	r3, #64	; 0x40
    8cbe:	4013      	ands	r3, r2
    8cc0:	d013      	beq.n	8cea <_usb_host_interrupt_handler+0x3ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    8cc2:	4b4e      	ldr	r3, [pc, #312]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	681b      	ldr	r3, [r3, #0]
    8cc8:	2240      	movs	r2, #64	; 0x40
    8cca:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    8ccc:	4b4b      	ldr	r3, [pc, #300]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cce:	681a      	ldr	r2, [r3, #0]
    8cd0:	23a5      	movs	r3, #165	; 0xa5
    8cd2:	5cd3      	ldrb	r3, [r2, r3]
    8cd4:	1c1a      	adds	r2, r3, #0
    8cd6:	2310      	movs	r3, #16
    8cd8:	4013      	ands	r3, r2
    8cda:	d006      	beq.n	8cea <_usb_host_interrupt_handler+0x3ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    8cdc:	4b47      	ldr	r3, [pc, #284]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cde:	681b      	ldr	r3, [r3, #0]
    8ce0:	695a      	ldr	r2, [r3, #20]
    8ce2:	4b46      	ldr	r3, [pc, #280]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8ce4:	681b      	ldr	r3, [r3, #0]
    8ce6:	1c18      	adds	r0, r3, #0
    8ce8:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    8cea:	683a      	ldr	r2, [r7, #0]
    8cec:	2320      	movs	r3, #32
    8cee:	4013      	ands	r3, r2
    8cf0:	d013      	beq.n	8d1a <_usb_host_interrupt_handler+0x3ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    8cf2:	4b42      	ldr	r3, [pc, #264]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cf4:	681b      	ldr	r3, [r3, #0]
    8cf6:	681b      	ldr	r3, [r3, #0]
    8cf8:	2220      	movs	r2, #32
    8cfa:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    8cfc:	4b3f      	ldr	r3, [pc, #252]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8cfe:	681a      	ldr	r2, [r3, #0]
    8d00:	23a5      	movs	r3, #165	; 0xa5
    8d02:	5cd3      	ldrb	r3, [r2, r3]
    8d04:	1c1a      	adds	r2, r3, #0
    8d06:	2308      	movs	r3, #8
    8d08:	4013      	ands	r3, r2
    8d0a:	d006      	beq.n	8d1a <_usb_host_interrupt_handler+0x3ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    8d0c:	4b3b      	ldr	r3, [pc, #236]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d0e:	681b      	ldr	r3, [r3, #0]
    8d10:	691a      	ldr	r2, [r3, #16]
    8d12:	4b3a      	ldr	r3, [pc, #232]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d14:	681b      	ldr	r3, [r3, #0]
    8d16:	1c18      	adds	r0, r3, #0
    8d18:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    8d1a:	683a      	ldr	r2, [r7, #0]
    8d1c:	2310      	movs	r3, #16
    8d1e:	4013      	ands	r3, r2
    8d20:	d013      	beq.n	8d4a <_usb_host_interrupt_handler+0x41a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    8d22:	4b36      	ldr	r3, [pc, #216]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d24:	681b      	ldr	r3, [r3, #0]
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	2210      	movs	r2, #16
    8d2a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    8d2c:	4b33      	ldr	r3, [pc, #204]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d2e:	681a      	ldr	r2, [r3, #0]
    8d30:	23a5      	movs	r3, #165	; 0xa5
    8d32:	5cd3      	ldrb	r3, [r2, r3]
    8d34:	1c1a      	adds	r2, r3, #0
    8d36:	2304      	movs	r3, #4
    8d38:	4013      	ands	r3, r2
    8d3a:	d006      	beq.n	8d4a <_usb_host_interrupt_handler+0x41a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    8d3c:	4b2f      	ldr	r3, [pc, #188]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d3e:	681b      	ldr	r3, [r3, #0]
    8d40:	68da      	ldr	r2, [r3, #12]
    8d42:	4b2e      	ldr	r3, [pc, #184]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d44:	681b      	ldr	r3, [r3, #0]
    8d46:	1c18      	adds	r0, r3, #0
    8d48:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    8d4a:	683a      	ldr	r2, [r7, #0]
    8d4c:	2380      	movs	r3, #128	; 0x80
    8d4e:	4013      	ands	r3, r2
    8d50:	d016      	beq.n	8d80 <_usb_host_interrupt_handler+0x450>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8d52:	4b2b      	ldr	r3, [pc, #172]	; (8e00 <_usb_host_interrupt_handler+0x4d0>)
    8d54:	2200      	movs	r2, #0
    8d56:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    8d58:	4b28      	ldr	r3, [pc, #160]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d5a:	681b      	ldr	r3, [r3, #0]
    8d5c:	681b      	ldr	r3, [r3, #0]
    8d5e:	2280      	movs	r2, #128	; 0x80
    8d60:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    8d62:	4b26      	ldr	r3, [pc, #152]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d64:	681a      	ldr	r2, [r3, #0]
    8d66:	23a5      	movs	r3, #165	; 0xa5
    8d68:	5cd3      	ldrb	r3, [r2, r3]
    8d6a:	1c1a      	adds	r2, r3, #0
    8d6c:	2320      	movs	r3, #32
    8d6e:	4013      	ands	r3, r2
    8d70:	d006      	beq.n	8d80 <_usb_host_interrupt_handler+0x450>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    8d72:	4b22      	ldr	r3, [pc, #136]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d74:	681b      	ldr	r3, [r3, #0]
    8d76:	699a      	ldr	r2, [r3, #24]
    8d78:	4b20      	ldr	r3, [pc, #128]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d7a:	681b      	ldr	r3, [r3, #0]
    8d7c:	1c18      	adds	r0, r3, #0
    8d7e:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    8d80:	683a      	ldr	r2, [r7, #0]
    8d82:	2380      	movs	r3, #128	; 0x80
    8d84:	005b      	lsls	r3, r3, #1
    8d86:	4013      	ands	r3, r2
    8d88:	d017      	beq.n	8dba <_usb_host_interrupt_handler+0x48a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8d8a:	4b1d      	ldr	r3, [pc, #116]	; (8e00 <_usb_host_interrupt_handler+0x4d0>)
    8d8c:	2200      	movs	r2, #0
    8d8e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    8d90:	4b1a      	ldr	r3, [pc, #104]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d92:	681b      	ldr	r3, [r3, #0]
    8d94:	681b      	ldr	r3, [r3, #0]
    8d96:	2280      	movs	r2, #128	; 0x80
    8d98:	0052      	lsls	r2, r2, #1
    8d9a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    8d9c:	4b17      	ldr	r3, [pc, #92]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8d9e:	681a      	ldr	r2, [r3, #0]
    8da0:	23a5      	movs	r3, #165	; 0xa5
    8da2:	5cd3      	ldrb	r3, [r2, r3]
    8da4:	1c1a      	adds	r2, r3, #0
    8da6:	2340      	movs	r3, #64	; 0x40
    8da8:	4013      	ands	r3, r2
    8daa:	d006      	beq.n	8dba <_usb_host_interrupt_handler+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    8dac:	4b13      	ldr	r3, [pc, #76]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8dae:	681b      	ldr	r3, [r3, #0]
    8db0:	69da      	ldr	r2, [r3, #28]
    8db2:	4b12      	ldr	r3, [pc, #72]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8db4:	681b      	ldr	r3, [r3, #0]
    8db6:	1c18      	adds	r0, r3, #0
    8db8:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    8dba:	683a      	ldr	r2, [r7, #0]
    8dbc:	2380      	movs	r3, #128	; 0x80
    8dbe:	009b      	lsls	r3, r3, #2
    8dc0:	4013      	ands	r3, r2
    8dc2:	d017      	beq.n	8df4 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8dc4:	4b0e      	ldr	r3, [pc, #56]	; (8e00 <_usb_host_interrupt_handler+0x4d0>)
    8dc6:	2200      	movs	r2, #0
    8dc8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    8dca:	4b0c      	ldr	r3, [pc, #48]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8dcc:	681b      	ldr	r3, [r3, #0]
    8dce:	681b      	ldr	r3, [r3, #0]
    8dd0:	2280      	movs	r2, #128	; 0x80
    8dd2:	0092      	lsls	r2, r2, #2
    8dd4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    8dd6:	4b09      	ldr	r3, [pc, #36]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8dd8:	681a      	ldr	r2, [r3, #0]
    8dda:	23a5      	movs	r3, #165	; 0xa5
    8ddc:	5cd3      	ldrb	r3, [r2, r3]
    8dde:	b2db      	uxtb	r3, r3
    8de0:	b25b      	sxtb	r3, r3
    8de2:	2b00      	cmp	r3, #0
    8de4:	da06      	bge.n	8df4 <_usb_host_interrupt_handler+0x4c4>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    8de6:	4b05      	ldr	r3, [pc, #20]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	6a1a      	ldr	r2, [r3, #32]
    8dec:	4b03      	ldr	r3, [pc, #12]	; (8dfc <_usb_host_interrupt_handler+0x4cc>)
    8dee:	681b      	ldr	r3, [r3, #0]
    8df0:	1c18      	adds	r0, r3, #0
    8df2:	4790      	blx	r2
			}
		}

	}
}
    8df4:	46bd      	mov	sp, r7
    8df6:	b002      	add	sp, #8
    8df8:	bd80      	pop	{r7, pc}
    8dfa:	46c0      	nop			; (mov r8, r8)
    8dfc:	20007108 	.word	0x20007108
    8e00:	20007120 	.word	0x20007120

00008e04 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    8e04:	b580      	push	{r7, lr}
    8e06:	b084      	sub	sp, #16
    8e08:	af00      	add	r7, sp, #0
    8e0a:	60f8      	str	r0, [r7, #12]
    8e0c:	607a      	str	r2, [r7, #4]
    8e0e:	1c3b      	adds	r3, r7, #0
    8e10:	330b      	adds	r3, #11
    8e12:	1c0a      	adds	r2, r1, #0
    8e14:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    8e16:	1c3b      	adds	r3, r7, #0
    8e18:	330b      	adds	r3, #11
    8e1a:	781a      	ldrb	r2, [r3, #0]
    8e1c:	68fb      	ldr	r3, [r7, #12]
    8e1e:	322e      	adds	r2, #46	; 0x2e
    8e20:	0092      	lsls	r2, r2, #2
    8e22:	6879      	ldr	r1, [r7, #4]
    8e24:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    8e26:	68fa      	ldr	r2, [r7, #12]
    8e28:	23aa      	movs	r3, #170	; 0xaa
    8e2a:	005b      	lsls	r3, r3, #1
    8e2c:	5ad2      	ldrh	r2, [r2, r3]
    8e2e:	1c3b      	adds	r3, r7, #0
    8e30:	330b      	adds	r3, #11
    8e32:	7819      	ldrb	r1, [r3, #0]
    8e34:	4b06      	ldr	r3, [pc, #24]	; (8e50 <usb_device_register_callback+0x4c>)
    8e36:	0049      	lsls	r1, r1, #1
    8e38:	5acb      	ldrh	r3, [r1, r3]
    8e3a:	4313      	orrs	r3, r2
    8e3c:	b299      	uxth	r1, r3
    8e3e:	68fa      	ldr	r2, [r7, #12]
    8e40:	23aa      	movs	r3, #170	; 0xaa
    8e42:	005b      	lsls	r3, r3, #1
    8e44:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    8e46:	2300      	movs	r3, #0
}
    8e48:	1c18      	adds	r0, r3, #0
    8e4a:	46bd      	mov	sp, r7
    8e4c:	b004      	add	sp, #16
    8e4e:	bd80      	pop	{r7, pc}
    8e50:	0000b5b8 	.word	0x0000b5b8

00008e54 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    8e54:	b580      	push	{r7, lr}
    8e56:	b082      	sub	sp, #8
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
    8e5c:	1c0a      	adds	r2, r1, #0
    8e5e:	1cfb      	adds	r3, r7, #3
    8e60:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    8e62:	687b      	ldr	r3, [r7, #4]
    8e64:	681b      	ldr	r3, [r3, #0]
    8e66:	1cfa      	adds	r2, r7, #3
    8e68:	7811      	ldrb	r1, [r2, #0]
    8e6a:	4a10      	ldr	r2, [pc, #64]	; (8eac <usb_device_enable_callback+0x58>)
    8e6c:	0049      	lsls	r1, r1, #1
    8e6e:	5a8a      	ldrh	r2, [r1, r2]
    8e70:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    8e72:	687a      	ldr	r2, [r7, #4]
    8e74:	23ab      	movs	r3, #171	; 0xab
    8e76:	005b      	lsls	r3, r3, #1
    8e78:	5ad2      	ldrh	r2, [r2, r3]
    8e7a:	1cfb      	adds	r3, r7, #3
    8e7c:	7819      	ldrb	r1, [r3, #0]
    8e7e:	4b0b      	ldr	r3, [pc, #44]	; (8eac <usb_device_enable_callback+0x58>)
    8e80:	0049      	lsls	r1, r1, #1
    8e82:	5acb      	ldrh	r3, [r1, r3]
    8e84:	4313      	orrs	r3, r2
    8e86:	b299      	uxth	r1, r3
    8e88:	687a      	ldr	r2, [r7, #4]
    8e8a:	23ab      	movs	r3, #171	; 0xab
    8e8c:	005b      	lsls	r3, r3, #1
    8e8e:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	681b      	ldr	r3, [r3, #0]
    8e94:	1cfa      	adds	r2, r7, #3
    8e96:	7811      	ldrb	r1, [r2, #0]
    8e98:	4a04      	ldr	r2, [pc, #16]	; (8eac <usb_device_enable_callback+0x58>)
    8e9a:	0049      	lsls	r1, r1, #1
    8e9c:	5a8a      	ldrh	r2, [r1, r2]
    8e9e:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    8ea0:	2300      	movs	r3, #0
}
    8ea2:	1c18      	adds	r0, r3, #0
    8ea4:	46bd      	mov	sp, r7
    8ea6:	b002      	add	sp, #8
    8ea8:	bd80      	pop	{r7, pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	0000b5b8 	.word	0x0000b5b8

00008eb0 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b082      	sub	sp, #8
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
    8eb8:	1c0a      	adds	r2, r1, #0
    8eba:	1cfb      	adds	r3, r7, #3
    8ebc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    8ebe:	687a      	ldr	r2, [r7, #4]
    8ec0:	23ab      	movs	r3, #171	; 0xab
    8ec2:	005b      	lsls	r3, r3, #1
    8ec4:	5ad3      	ldrh	r3, [r2, r3]
    8ec6:	b29b      	uxth	r3, r3
    8ec8:	1cfa      	adds	r2, r7, #3
    8eca:	7811      	ldrb	r1, [r2, #0]
    8ecc:	4a0c      	ldr	r2, [pc, #48]	; (8f00 <usb_device_disable_callback+0x50>)
    8ece:	0049      	lsls	r1, r1, #1
    8ed0:	5a8a      	ldrh	r2, [r1, r2]
    8ed2:	b292      	uxth	r2, r2
    8ed4:	43d2      	mvns	r2, r2
    8ed6:	b292      	uxth	r2, r2
    8ed8:	4013      	ands	r3, r2
    8eda:	b29b      	uxth	r3, r3
    8edc:	b299      	uxth	r1, r3
    8ede:	687a      	ldr	r2, [r7, #4]
    8ee0:	23ab      	movs	r3, #171	; 0xab
    8ee2:	005b      	lsls	r3, r3, #1
    8ee4:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	681b      	ldr	r3, [r3, #0]
    8eea:	1cfa      	adds	r2, r7, #3
    8eec:	7811      	ldrb	r1, [r2, #0]
    8eee:	4a04      	ldr	r2, [pc, #16]	; (8f00 <usb_device_disable_callback+0x50>)
    8ef0:	0049      	lsls	r1, r1, #1
    8ef2:	5a8a      	ldrh	r2, [r1, r2]
    8ef4:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    8ef6:	2300      	movs	r3, #0
}
    8ef8:	1c18      	adds	r0, r3, #0
    8efa:	46bd      	mov	sp, r7
    8efc:	b002      	add	sp, #8
    8efe:	bd80      	pop	{r7, pc}
    8f00:	0000b5b8 	.word	0x0000b5b8

00008f04 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    8f04:	b580      	push	{r7, lr}
    8f06:	b084      	sub	sp, #16
    8f08:	af00      	add	r7, sp, #0
    8f0a:	60f8      	str	r0, [r7, #12]
    8f0c:	607b      	str	r3, [r7, #4]
    8f0e:	1c3b      	adds	r3, r7, #0
    8f10:	330b      	adds	r3, #11
    8f12:	7019      	strb	r1, [r3, #0]
    8f14:	1c3b      	adds	r3, r7, #0
    8f16:	330a      	adds	r3, #10
    8f18:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    8f1a:	1c3b      	adds	r3, r7, #0
    8f1c:	330b      	adds	r3, #11
    8f1e:	7819      	ldrb	r1, [r3, #0]
    8f20:	1c3b      	adds	r3, r7, #0
    8f22:	330a      	adds	r3, #10
    8f24:	781b      	ldrb	r3, [r3, #0]
    8f26:	68fa      	ldr	r2, [r7, #12]
    8f28:	0089      	lsls	r1, r1, #2
    8f2a:	18cb      	adds	r3, r1, r3
    8f2c:	3334      	adds	r3, #52	; 0x34
    8f2e:	009b      	lsls	r3, r3, #2
    8f30:	18d3      	adds	r3, r2, r3
    8f32:	687a      	ldr	r2, [r7, #4]
    8f34:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8f36:	1c3b      	adds	r3, r7, #0
    8f38:	330b      	adds	r3, #11
    8f3a:	7819      	ldrb	r1, [r3, #0]
    8f3c:	1c3b      	adds	r3, r7, #0
    8f3e:	330b      	adds	r3, #11
    8f40:	781a      	ldrb	r2, [r3, #0]
    8f42:	68f8      	ldr	r0, [r7, #12]
    8f44:	23ac      	movs	r3, #172	; 0xac
    8f46:	005b      	lsls	r3, r3, #1
    8f48:	1882      	adds	r2, r0, r2
    8f4a:	18d3      	adds	r3, r2, r3
    8f4c:	781a      	ldrb	r2, [r3, #0]
    8f4e:	1c3b      	adds	r3, r7, #0
    8f50:	330a      	adds	r3, #10
    8f52:	781b      	ldrb	r3, [r3, #0]
    8f54:	4807      	ldr	r0, [pc, #28]	; (8f74 <usb_device_endpoint_register_callback+0x70>)
    8f56:	5cc3      	ldrb	r3, [r0, r3]
    8f58:	4313      	orrs	r3, r2
    8f5a:	b2da      	uxtb	r2, r3
    8f5c:	68f8      	ldr	r0, [r7, #12]
    8f5e:	23ac      	movs	r3, #172	; 0xac
    8f60:	005b      	lsls	r3, r3, #1
    8f62:	1841      	adds	r1, r0, r1
    8f64:	18cb      	adds	r3, r1, r3
    8f66:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8f68:	2300      	movs	r3, #0
}
    8f6a:	1c18      	adds	r0, r3, #0
    8f6c:	46bd      	mov	sp, r7
    8f6e:	b004      	add	sp, #16
    8f70:	bd80      	pop	{r7, pc}
    8f72:	46c0      	nop			; (mov r8, r8)
    8f74:	0000b5c8 	.word	0x0000b5c8

00008f78 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    8f78:	b580      	push	{r7, lr}
    8f7a:	b082      	sub	sp, #8
    8f7c:	af00      	add	r7, sp, #0
    8f7e:	6078      	str	r0, [r7, #4]
    8f80:	1cfb      	adds	r3, r7, #3
    8f82:	7019      	strb	r1, [r3, #0]
    8f84:	1cbb      	adds	r3, r7, #2
    8f86:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    8f88:	1cfb      	adds	r3, r7, #3
    8f8a:	7819      	ldrb	r1, [r3, #0]
    8f8c:	1cbb      	adds	r3, r7, #2
    8f8e:	781b      	ldrb	r3, [r3, #0]
    8f90:	687a      	ldr	r2, [r7, #4]
    8f92:	0089      	lsls	r1, r1, #2
    8f94:	18cb      	adds	r3, r1, r3
    8f96:	3334      	adds	r3, #52	; 0x34
    8f98:	009b      	lsls	r3, r3, #2
    8f9a:	18d3      	adds	r3, r2, r3
    8f9c:	2200      	movs	r2, #0
    8f9e:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8fa0:	1cfb      	adds	r3, r7, #3
    8fa2:	7819      	ldrb	r1, [r3, #0]
    8fa4:	1cfb      	adds	r3, r7, #3
    8fa6:	781a      	ldrb	r2, [r3, #0]
    8fa8:	6878      	ldr	r0, [r7, #4]
    8faa:	23ac      	movs	r3, #172	; 0xac
    8fac:	005b      	lsls	r3, r3, #1
    8fae:	1882      	adds	r2, r0, r2
    8fb0:	18d3      	adds	r3, r2, r3
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	b2db      	uxtb	r3, r3
    8fb6:	1cba      	adds	r2, r7, #2
    8fb8:	7812      	ldrb	r2, [r2, #0]
    8fba:	4809      	ldr	r0, [pc, #36]	; (8fe0 <usb_device_endpoint_unregister_callback+0x68>)
    8fbc:	5c82      	ldrb	r2, [r0, r2]
    8fbe:	b2d2      	uxtb	r2, r2
    8fc0:	43d2      	mvns	r2, r2
    8fc2:	b2d2      	uxtb	r2, r2
    8fc4:	4013      	ands	r3, r2
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	b2da      	uxtb	r2, r3
    8fca:	6878      	ldr	r0, [r7, #4]
    8fcc:	23ac      	movs	r3, #172	; 0xac
    8fce:	005b      	lsls	r3, r3, #1
    8fd0:	1841      	adds	r1, r0, r1
    8fd2:	18cb      	adds	r3, r1, r3
    8fd4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8fd6:	2300      	movs	r3, #0
}
    8fd8:	1c18      	adds	r0, r3, #0
    8fda:	46bd      	mov	sp, r7
    8fdc:	b002      	add	sp, #8
    8fde:	bd80      	pop	{r7, pc}
    8fe0:	0000b5c8 	.word	0x0000b5c8

00008fe4 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    8fe4:	b580      	push	{r7, lr}
    8fe6:	b084      	sub	sp, #16
    8fe8:	af00      	add	r7, sp, #0
    8fea:	6078      	str	r0, [r7, #4]
    8fec:	1cfb      	adds	r3, r7, #3
    8fee:	7019      	strb	r1, [r3, #0]
    8ff0:	1cbb      	adds	r3, r7, #2
    8ff2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8ff4:	1c3b      	adds	r3, r7, #0
    8ff6:	330f      	adds	r3, #15
    8ff8:	1cfa      	adds	r2, r7, #3
    8ffa:	7811      	ldrb	r1, [r2, #0]
    8ffc:	220f      	movs	r2, #15
    8ffe:	400a      	ands	r2, r1
    9000:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    9002:	1c3b      	adds	r3, r7, #0
    9004:	330f      	adds	r3, #15
    9006:	7819      	ldrb	r1, [r3, #0]
    9008:	1c3b      	adds	r3, r7, #0
    900a:	330f      	adds	r3, #15
    900c:	781a      	ldrb	r2, [r3, #0]
    900e:	6878      	ldr	r0, [r7, #4]
    9010:	23b0      	movs	r3, #176	; 0xb0
    9012:	005b      	lsls	r3, r3, #1
    9014:	1882      	adds	r2, r0, r2
    9016:	18d3      	adds	r3, r2, r3
    9018:	781a      	ldrb	r2, [r3, #0]
    901a:	1cbb      	adds	r3, r7, #2
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	4854      	ldr	r0, [pc, #336]	; (9170 <usb_device_endpoint_enable_callback+0x18c>)
    9020:	5cc3      	ldrb	r3, [r0, r3]
    9022:	4313      	orrs	r3, r2
    9024:	b2da      	uxtb	r2, r3
    9026:	6878      	ldr	r0, [r7, #4]
    9028:	23b0      	movs	r3, #176	; 0xb0
    902a:	005b      	lsls	r3, r3, #1
    902c:	1841      	adds	r1, r0, r1
    902e:	18cb      	adds	r3, r1, r3
    9030:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    9032:	1cbb      	adds	r3, r7, #2
    9034:	781b      	ldrb	r3, [r3, #0]
    9036:	2b00      	cmp	r3, #0
    9038:	d12f      	bne.n	909a <usb_device_endpoint_enable_callback+0xb6>
		if (ep_num == 0) { // control endpoint
    903a:	1c3b      	adds	r3, r7, #0
    903c:	330f      	adds	r3, #15
    903e:	781b      	ldrb	r3, [r3, #0]
    9040:	2b00      	cmp	r3, #0
    9042:	d10c      	bne.n	905e <usb_device_endpoint_enable_callback+0x7a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	6819      	ldr	r1, [r3, #0]
    9048:	1c3b      	adds	r3, r7, #0
    904a:	330f      	adds	r3, #15
    904c:	781a      	ldrb	r2, [r3, #0]
    904e:	2384      	movs	r3, #132	; 0x84
    9050:	005b      	lsls	r3, r3, #1
    9052:	0152      	lsls	r2, r2, #5
    9054:	188a      	adds	r2, r1, r2
    9056:	18d3      	adds	r3, r2, r3
    9058:	2203      	movs	r2, #3
    905a:	705a      	strb	r2, [r3, #1]
    905c:	e01d      	b.n	909a <usb_device_endpoint_enable_callback+0xb6>
		} else if (ep & USB_EP_DIR_IN) {
    905e:	1cfb      	adds	r3, r7, #3
    9060:	781b      	ldrb	r3, [r3, #0]
    9062:	b25b      	sxtb	r3, r3
    9064:	2b00      	cmp	r3, #0
    9066:	da0c      	bge.n	9082 <usb_device_endpoint_enable_callback+0x9e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	6819      	ldr	r1, [r3, #0]
    906c:	1c3b      	adds	r3, r7, #0
    906e:	330f      	adds	r3, #15
    9070:	781a      	ldrb	r2, [r3, #0]
    9072:	2384      	movs	r3, #132	; 0x84
    9074:	005b      	lsls	r3, r3, #1
    9076:	0152      	lsls	r2, r2, #5
    9078:	188a      	adds	r2, r1, r2
    907a:	18d3      	adds	r3, r2, r3
    907c:	2202      	movs	r2, #2
    907e:	705a      	strb	r2, [r3, #1]
    9080:	e00b      	b.n	909a <usb_device_endpoint_enable_callback+0xb6>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	6819      	ldr	r1, [r3, #0]
    9086:	1c3b      	adds	r3, r7, #0
    9088:	330f      	adds	r3, #15
    908a:	781a      	ldrb	r2, [r3, #0]
    908c:	2384      	movs	r3, #132	; 0x84
    908e:	005b      	lsls	r3, r3, #1
    9090:	0152      	lsls	r2, r2, #5
    9092:	188a      	adds	r2, r1, r2
    9094:	18d3      	adds	r3, r2, r3
    9096:	2201      	movs	r2, #1
    9098:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    909a:	1cbb      	adds	r3, r7, #2
    909c:	781b      	ldrb	r3, [r3, #0]
    909e:	2b01      	cmp	r3, #1
    90a0:	d12f      	bne.n	9102 <usb_device_endpoint_enable_callback+0x11e>
		if (ep_num == 0) { // control endpoint
    90a2:	1c3b      	adds	r3, r7, #0
    90a4:	330f      	adds	r3, #15
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	2b00      	cmp	r3, #0
    90aa:	d10c      	bne.n	90c6 <usb_device_endpoint_enable_callback+0xe2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	6819      	ldr	r1, [r3, #0]
    90b0:	1c3b      	adds	r3, r7, #0
    90b2:	330f      	adds	r3, #15
    90b4:	781a      	ldrb	r2, [r3, #0]
    90b6:	2384      	movs	r3, #132	; 0x84
    90b8:	005b      	lsls	r3, r3, #1
    90ba:	0152      	lsls	r2, r2, #5
    90bc:	188a      	adds	r2, r1, r2
    90be:	18d3      	adds	r3, r2, r3
    90c0:	220c      	movs	r2, #12
    90c2:	705a      	strb	r2, [r3, #1]
    90c4:	e01d      	b.n	9102 <usb_device_endpoint_enable_callback+0x11e>
		} else if (ep & USB_EP_DIR_IN) {
    90c6:	1cfb      	adds	r3, r7, #3
    90c8:	781b      	ldrb	r3, [r3, #0]
    90ca:	b25b      	sxtb	r3, r3
    90cc:	2b00      	cmp	r3, #0
    90ce:	da0c      	bge.n	90ea <usb_device_endpoint_enable_callback+0x106>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	6819      	ldr	r1, [r3, #0]
    90d4:	1c3b      	adds	r3, r7, #0
    90d6:	330f      	adds	r3, #15
    90d8:	781a      	ldrb	r2, [r3, #0]
    90da:	2384      	movs	r3, #132	; 0x84
    90dc:	005b      	lsls	r3, r3, #1
    90de:	0152      	lsls	r2, r2, #5
    90e0:	188a      	adds	r2, r1, r2
    90e2:	18d3      	adds	r3, r2, r3
    90e4:	2208      	movs	r2, #8
    90e6:	705a      	strb	r2, [r3, #1]
    90e8:	e00b      	b.n	9102 <usb_device_endpoint_enable_callback+0x11e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	6819      	ldr	r1, [r3, #0]
    90ee:	1c3b      	adds	r3, r7, #0
    90f0:	330f      	adds	r3, #15
    90f2:	781a      	ldrb	r2, [r3, #0]
    90f4:	2384      	movs	r3, #132	; 0x84
    90f6:	005b      	lsls	r3, r3, #1
    90f8:	0152      	lsls	r2, r2, #5
    90fa:	188a      	adds	r2, r1, r2
    90fc:	18d3      	adds	r3, r2, r3
    90fe:	2204      	movs	r2, #4
    9100:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    9102:	1cbb      	adds	r3, r7, #2
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	2b02      	cmp	r3, #2
    9108:	d10b      	bne.n	9122 <usb_device_endpoint_enable_callback+0x13e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	6819      	ldr	r1, [r3, #0]
    910e:	1c3b      	adds	r3, r7, #0
    9110:	330f      	adds	r3, #15
    9112:	781a      	ldrb	r2, [r3, #0]
    9114:	2384      	movs	r3, #132	; 0x84
    9116:	005b      	lsls	r3, r3, #1
    9118:	0152      	lsls	r2, r2, #5
    911a:	188a      	adds	r2, r1, r2
    911c:	18d3      	adds	r3, r2, r3
    911e:	2210      	movs	r2, #16
    9120:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    9122:	1cbb      	adds	r3, r7, #2
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	2b03      	cmp	r3, #3
    9128:	d11d      	bne.n	9166 <usb_device_endpoint_enable_callback+0x182>
		if (ep & USB_EP_DIR_IN) {
    912a:	1cfb      	adds	r3, r7, #3
    912c:	781b      	ldrb	r3, [r3, #0]
    912e:	b25b      	sxtb	r3, r3
    9130:	2b00      	cmp	r3, #0
    9132:	da0c      	bge.n	914e <usb_device_endpoint_enable_callback+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	6819      	ldr	r1, [r3, #0]
    9138:	1c3b      	adds	r3, r7, #0
    913a:	330f      	adds	r3, #15
    913c:	781a      	ldrb	r2, [r3, #0]
    913e:	2384      	movs	r3, #132	; 0x84
    9140:	005b      	lsls	r3, r3, #1
    9142:	0152      	lsls	r2, r2, #5
    9144:	188a      	adds	r2, r1, r2
    9146:	18d3      	adds	r3, r2, r3
    9148:	2240      	movs	r2, #64	; 0x40
    914a:	705a      	strb	r2, [r3, #1]
    914c:	e00b      	b.n	9166 <usb_device_endpoint_enable_callback+0x182>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	6819      	ldr	r1, [r3, #0]
    9152:	1c3b      	adds	r3, r7, #0
    9154:	330f      	adds	r3, #15
    9156:	781a      	ldrb	r2, [r3, #0]
    9158:	2384      	movs	r3, #132	; 0x84
    915a:	005b      	lsls	r3, r3, #1
    915c:	0152      	lsls	r2, r2, #5
    915e:	188a      	adds	r2, r1, r2
    9160:	18d3      	adds	r3, r2, r3
    9162:	2220      	movs	r2, #32
    9164:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    9166:	2300      	movs	r3, #0
}
    9168:	1c18      	adds	r0, r3, #0
    916a:	46bd      	mov	sp, r7
    916c:	b004      	add	sp, #16
    916e:	bd80      	pop	{r7, pc}
    9170:	0000b5c8 	.word	0x0000b5c8

00009174 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
    917c:	1cfb      	adds	r3, r7, #3
    917e:	7019      	strb	r1, [r3, #0]
    9180:	1cbb      	adds	r3, r7, #2
    9182:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9184:	1c3b      	adds	r3, r7, #0
    9186:	330f      	adds	r3, #15
    9188:	1cfa      	adds	r2, r7, #3
    918a:	7811      	ldrb	r1, [r2, #0]
    918c:	220f      	movs	r2, #15
    918e:	400a      	ands	r2, r1
    9190:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    9192:	1c3b      	adds	r3, r7, #0
    9194:	330f      	adds	r3, #15
    9196:	7819      	ldrb	r1, [r3, #0]
    9198:	1c3b      	adds	r3, r7, #0
    919a:	330f      	adds	r3, #15
    919c:	781a      	ldrb	r2, [r3, #0]
    919e:	6878      	ldr	r0, [r7, #4]
    91a0:	23b0      	movs	r3, #176	; 0xb0
    91a2:	005b      	lsls	r3, r3, #1
    91a4:	1882      	adds	r2, r0, r2
    91a6:	18d3      	adds	r3, r2, r3
    91a8:	781b      	ldrb	r3, [r3, #0]
    91aa:	b2db      	uxtb	r3, r3
    91ac:	1cba      	adds	r2, r7, #2
    91ae:	7812      	ldrb	r2, [r2, #0]
    91b0:	4856      	ldr	r0, [pc, #344]	; (930c <usb_device_endpoint_disable_callback+0x198>)
    91b2:	5c82      	ldrb	r2, [r0, r2]
    91b4:	b2d2      	uxtb	r2, r2
    91b6:	43d2      	mvns	r2, r2
    91b8:	b2d2      	uxtb	r2, r2
    91ba:	4013      	ands	r3, r2
    91bc:	b2db      	uxtb	r3, r3
    91be:	b2da      	uxtb	r2, r3
    91c0:	6878      	ldr	r0, [r7, #4]
    91c2:	23b0      	movs	r3, #176	; 0xb0
    91c4:	005b      	lsls	r3, r3, #1
    91c6:	1841      	adds	r1, r0, r1
    91c8:	18cb      	adds	r3, r1, r3
    91ca:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    91cc:	1cbb      	adds	r3, r7, #2
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	2b00      	cmp	r3, #0
    91d2:	d12f      	bne.n	9234 <usb_device_endpoint_disable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    91d4:	1c3b      	adds	r3, r7, #0
    91d6:	330f      	adds	r3, #15
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	2b00      	cmp	r3, #0
    91dc:	d10c      	bne.n	91f8 <usb_device_endpoint_disable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	6819      	ldr	r1, [r3, #0]
    91e2:	1c3b      	adds	r3, r7, #0
    91e4:	330f      	adds	r3, #15
    91e6:	781a      	ldrb	r2, [r3, #0]
    91e8:	2384      	movs	r3, #132	; 0x84
    91ea:	005b      	lsls	r3, r3, #1
    91ec:	0152      	lsls	r2, r2, #5
    91ee:	188a      	adds	r2, r1, r2
    91f0:	18d3      	adds	r3, r2, r3
    91f2:	2203      	movs	r2, #3
    91f4:	701a      	strb	r2, [r3, #0]
    91f6:	e01d      	b.n	9234 <usb_device_endpoint_disable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    91f8:	1cfb      	adds	r3, r7, #3
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	b25b      	sxtb	r3, r3
    91fe:	2b00      	cmp	r3, #0
    9200:	da0c      	bge.n	921c <usb_device_endpoint_disable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    9202:	687b      	ldr	r3, [r7, #4]
    9204:	6819      	ldr	r1, [r3, #0]
    9206:	1c3b      	adds	r3, r7, #0
    9208:	330f      	adds	r3, #15
    920a:	781a      	ldrb	r2, [r3, #0]
    920c:	2384      	movs	r3, #132	; 0x84
    920e:	005b      	lsls	r3, r3, #1
    9210:	0152      	lsls	r2, r2, #5
    9212:	188a      	adds	r2, r1, r2
    9214:	18d3      	adds	r3, r2, r3
    9216:	2202      	movs	r2, #2
    9218:	701a      	strb	r2, [r3, #0]
    921a:	e00b      	b.n	9234 <usb_device_endpoint_disable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	6819      	ldr	r1, [r3, #0]
    9220:	1c3b      	adds	r3, r7, #0
    9222:	330f      	adds	r3, #15
    9224:	781a      	ldrb	r2, [r3, #0]
    9226:	2384      	movs	r3, #132	; 0x84
    9228:	005b      	lsls	r3, r3, #1
    922a:	0152      	lsls	r2, r2, #5
    922c:	188a      	adds	r2, r1, r2
    922e:	18d3      	adds	r3, r2, r3
    9230:	2201      	movs	r2, #1
    9232:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    9234:	1cbb      	adds	r3, r7, #2
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	2b01      	cmp	r3, #1
    923a:	d12f      	bne.n	929c <usb_device_endpoint_disable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    923c:	1c3b      	adds	r3, r7, #0
    923e:	330f      	adds	r3, #15
    9240:	781b      	ldrb	r3, [r3, #0]
    9242:	2b00      	cmp	r3, #0
    9244:	d10c      	bne.n	9260 <usb_device_endpoint_disable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	6819      	ldr	r1, [r3, #0]
    924a:	1c3b      	adds	r3, r7, #0
    924c:	330f      	adds	r3, #15
    924e:	781a      	ldrb	r2, [r3, #0]
    9250:	2384      	movs	r3, #132	; 0x84
    9252:	005b      	lsls	r3, r3, #1
    9254:	0152      	lsls	r2, r2, #5
    9256:	188a      	adds	r2, r1, r2
    9258:	18d3      	adds	r3, r2, r3
    925a:	220c      	movs	r2, #12
    925c:	701a      	strb	r2, [r3, #0]
    925e:	e01d      	b.n	929c <usb_device_endpoint_disable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    9260:	1cfb      	adds	r3, r7, #3
    9262:	781b      	ldrb	r3, [r3, #0]
    9264:	b25b      	sxtb	r3, r3
    9266:	2b00      	cmp	r3, #0
    9268:	da0c      	bge.n	9284 <usb_device_endpoint_disable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	6819      	ldr	r1, [r3, #0]
    926e:	1c3b      	adds	r3, r7, #0
    9270:	330f      	adds	r3, #15
    9272:	781a      	ldrb	r2, [r3, #0]
    9274:	2384      	movs	r3, #132	; 0x84
    9276:	005b      	lsls	r3, r3, #1
    9278:	0152      	lsls	r2, r2, #5
    927a:	188a      	adds	r2, r1, r2
    927c:	18d3      	adds	r3, r2, r3
    927e:	2208      	movs	r2, #8
    9280:	701a      	strb	r2, [r3, #0]
    9282:	e00b      	b.n	929c <usb_device_endpoint_disable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    9284:	687b      	ldr	r3, [r7, #4]
    9286:	6819      	ldr	r1, [r3, #0]
    9288:	1c3b      	adds	r3, r7, #0
    928a:	330f      	adds	r3, #15
    928c:	781a      	ldrb	r2, [r3, #0]
    928e:	2384      	movs	r3, #132	; 0x84
    9290:	005b      	lsls	r3, r3, #1
    9292:	0152      	lsls	r2, r2, #5
    9294:	188a      	adds	r2, r1, r2
    9296:	18d3      	adds	r3, r2, r3
    9298:	2204      	movs	r2, #4
    929a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    929c:	1cbb      	adds	r3, r7, #2
    929e:	781b      	ldrb	r3, [r3, #0]
    92a0:	2b02      	cmp	r3, #2
    92a2:	d10b      	bne.n	92bc <usb_device_endpoint_disable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	6819      	ldr	r1, [r3, #0]
    92a8:	1c3b      	adds	r3, r7, #0
    92aa:	330f      	adds	r3, #15
    92ac:	781a      	ldrb	r2, [r3, #0]
    92ae:	2384      	movs	r3, #132	; 0x84
    92b0:	005b      	lsls	r3, r3, #1
    92b2:	0152      	lsls	r2, r2, #5
    92b4:	188a      	adds	r2, r1, r2
    92b6:	18d3      	adds	r3, r2, r3
    92b8:	2210      	movs	r2, #16
    92ba:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    92bc:	1cbb      	adds	r3, r7, #2
    92be:	781b      	ldrb	r3, [r3, #0]
    92c0:	2b03      	cmp	r3, #3
    92c2:	d11d      	bne.n	9300 <usb_device_endpoint_disable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    92c4:	1cfb      	adds	r3, r7, #3
    92c6:	781b      	ldrb	r3, [r3, #0]
    92c8:	b25b      	sxtb	r3, r3
    92ca:	2b00      	cmp	r3, #0
    92cc:	da0c      	bge.n	92e8 <usb_device_endpoint_disable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	6819      	ldr	r1, [r3, #0]
    92d2:	1c3b      	adds	r3, r7, #0
    92d4:	330f      	adds	r3, #15
    92d6:	781a      	ldrb	r2, [r3, #0]
    92d8:	2384      	movs	r3, #132	; 0x84
    92da:	005b      	lsls	r3, r3, #1
    92dc:	0152      	lsls	r2, r2, #5
    92de:	188a      	adds	r2, r1, r2
    92e0:	18d3      	adds	r3, r2, r3
    92e2:	2240      	movs	r2, #64	; 0x40
    92e4:	701a      	strb	r2, [r3, #0]
    92e6:	e00b      	b.n	9300 <usb_device_endpoint_disable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	6819      	ldr	r1, [r3, #0]
    92ec:	1c3b      	adds	r3, r7, #0
    92ee:	330f      	adds	r3, #15
    92f0:	781a      	ldrb	r2, [r3, #0]
    92f2:	2384      	movs	r3, #132	; 0x84
    92f4:	005b      	lsls	r3, r3, #1
    92f6:	0152      	lsls	r2, r2, #5
    92f8:	188a      	adds	r2, r1, r2
    92fa:	18d3      	adds	r3, r2, r3
    92fc:	2220      	movs	r2, #32
    92fe:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    9300:	2300      	movs	r3, #0
}
    9302:	1c18      	adds	r0, r3, #0
    9304:	46bd      	mov	sp, r7
    9306:	b004      	add	sp, #16
    9308:	bd80      	pop	{r7, pc}
    930a:	46c0      	nop			; (mov r8, r8)
    930c:	0000b5c8 	.word	0x0000b5c8

00009310 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    9310:	b580      	push	{r7, lr}
    9312:	b082      	sub	sp, #8
    9314:	af00      	add	r7, sp, #0
    9316:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    9318:	687b      	ldr	r3, [r7, #4]
    931a:	2200      	movs	r2, #0
    931c:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	2200      	movs	r2, #0
    9322:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	2200      	movs	r2, #0
    9328:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	2201      	movs	r2, #1
    932e:	70da      	strb	r2, [r3, #3]
}
    9330:	46bd      	mov	sp, r7
    9332:	b002      	add	sp, #8
    9334:	bd80      	pop	{r7, pc}
    9336:	46c0      	nop			; (mov r8, r8)

00009338 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    9338:	b590      	push	{r4, r7, lr}
    933a:	b085      	sub	sp, #20
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
    9340:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    9342:	683b      	ldr	r3, [r7, #0]
    9344:	7819      	ldrb	r1, [r3, #0]
    9346:	1c3b      	adds	r3, r7, #0
    9348:	330f      	adds	r3, #15
    934a:	220f      	movs	r2, #15
    934c:	400a      	ands	r2, r1
    934e:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    9350:	683b      	ldr	r3, [r7, #0]
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	b2db      	uxtb	r3, r3
    9356:	09db      	lsrs	r3, r3, #7
    9358:	b2da      	uxtb	r2, r3
    935a:	1c3b      	adds	r3, r7, #0
    935c:	330e      	adds	r3, #14
    935e:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    9360:	683b      	ldr	r3, [r7, #0]
    9362:	78db      	ldrb	r3, [r3, #3]
    9364:	2b04      	cmp	r3, #4
    9366:	d900      	bls.n	936a <usb_device_endpoint_set_config+0x32>
    9368:	e1f2      	b.n	9750 <usb_device_endpoint_set_config+0x418>
    936a:	009a      	lsls	r2, r3, #2
    936c:	4bdd      	ldr	r3, [pc, #884]	; (96e4 <usb_device_endpoint_set_config+0x3ac>)
    936e:	18d3      	adds	r3, r2, r3
    9370:	681b      	ldr	r3, [r3, #0]
    9372:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	681b      	ldr	r3, [r3, #0]
    9378:	1c3a      	adds	r2, r7, #0
    937a:	320f      	adds	r2, #15
    937c:	7812      	ldrb	r2, [r2, #0]
    937e:	3208      	adds	r2, #8
    9380:	0152      	lsls	r2, r2, #5
    9382:	2100      	movs	r1, #0
    9384:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    9386:	2300      	movs	r3, #0
    9388:	e237      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	681b      	ldr	r3, [r3, #0]
    938e:	1c3a      	adds	r2, r7, #0
    9390:	320f      	adds	r2, #15
    9392:	7812      	ldrb	r2, [r2, #0]
    9394:	3208      	adds	r2, #8
    9396:	0152      	lsls	r2, r2, #5
    9398:	5cd3      	ldrb	r3, [r2, r3]
    939a:	b2db      	uxtb	r3, r3
    939c:	1c1a      	adds	r2, r3, #0
    939e:	2307      	movs	r3, #7
    93a0:	4013      	ands	r3, r2
    93a2:	d12e      	bne.n	9402 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	681b      	ldr	r3, [r3, #0]
    93a8:	1c3a      	adds	r2, r7, #0
    93aa:	320f      	adds	r2, #15
    93ac:	7812      	ldrb	r2, [r2, #0]
    93ae:	3208      	adds	r2, #8
    93b0:	0152      	lsls	r2, r2, #5
    93b2:	5cd3      	ldrb	r3, [r2, r3]
    93b4:	b2db      	uxtb	r3, r3
    93b6:	1c1a      	adds	r2, r3, #0
    93b8:	2370      	movs	r3, #112	; 0x70
    93ba:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    93bc:	d121      	bne.n	9402 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    93be:	687b      	ldr	r3, [r7, #4]
    93c0:	681b      	ldr	r3, [r3, #0]
    93c2:	1c3a      	adds	r2, r7, #0
    93c4:	320f      	adds	r2, #15
    93c6:	7812      	ldrb	r2, [r2, #0]
    93c8:	3208      	adds	r2, #8
    93ca:	0152      	lsls	r2, r2, #5
    93cc:	2111      	movs	r1, #17
    93ce:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    93d0:	687b      	ldr	r3, [r7, #4]
    93d2:	681a      	ldr	r2, [r3, #0]
    93d4:	1c3b      	adds	r3, r7, #0
    93d6:	330f      	adds	r3, #15
    93d8:	781b      	ldrb	r3, [r3, #0]
    93da:	3308      	adds	r3, #8
    93dc:	015b      	lsls	r3, r3, #5
    93de:	18d3      	adds	r3, r2, r3
    93e0:	2240      	movs	r2, #64	; 0x40
    93e2:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	681a      	ldr	r2, [r3, #0]
    93e8:	1c3b      	adds	r3, r7, #0
    93ea:	330f      	adds	r3, #15
    93ec:	781b      	ldrb	r3, [r3, #0]
    93ee:	3308      	adds	r3, #8
    93f0:	015b      	lsls	r3, r3, #5
    93f2:	18d3      	adds	r3, r2, r3
    93f4:	2280      	movs	r2, #128	; 0x80
    93f6:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    93f8:	683b      	ldr	r3, [r7, #0]
    93fa:	789b      	ldrb	r3, [r3, #2]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d102      	bne.n	9406 <usb_device_endpoint_set_config+0xce>
    9400:	e026      	b.n	9450 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    9402:	231c      	movs	r3, #28
    9404:	e1f9      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9406:	1c3b      	adds	r3, r7, #0
    9408:	330f      	adds	r3, #15
    940a:	7818      	ldrb	r0, [r3, #0]
    940c:	1c3b      	adds	r3, r7, #0
    940e:	330f      	adds	r3, #15
    9410:	781b      	ldrb	r3, [r3, #0]
    9412:	4ab5      	ldr	r2, [pc, #724]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    9414:	015b      	lsls	r3, r3, #5
    9416:	18d3      	adds	r3, r2, r3
    9418:	685b      	ldr	r3, [r3, #4]
    941a:	2280      	movs	r2, #128	; 0x80
    941c:	0612      	lsls	r2, r2, #24
    941e:	431a      	orrs	r2, r3
    9420:	49b1      	ldr	r1, [pc, #708]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    9422:	0143      	lsls	r3, r0, #5
    9424:	18cb      	adds	r3, r1, r3
    9426:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9428:	1c3b      	adds	r3, r7, #0
    942a:	330f      	adds	r3, #15
    942c:	7818      	ldrb	r0, [r3, #0]
    942e:	1c3b      	adds	r3, r7, #0
    9430:	330f      	adds	r3, #15
    9432:	781b      	ldrb	r3, [r3, #0]
    9434:	4aac      	ldr	r2, [pc, #688]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    9436:	015b      	lsls	r3, r3, #5
    9438:	18d3      	adds	r3, r2, r3
    943a:	3310      	adds	r3, #16
    943c:	685b      	ldr	r3, [r3, #4]
    943e:	2280      	movs	r2, #128	; 0x80
    9440:	0612      	lsls	r2, r2, #24
    9442:	431a      	orrs	r2, r3
    9444:	49a8      	ldr	r1, [pc, #672]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    9446:	0143      	lsls	r3, r0, #5
    9448:	18cb      	adds	r3, r1, r3
    944a:	3310      	adds	r3, #16
    944c:	605a      	str	r2, [r3, #4]
    944e:	e021      	b.n	9494 <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9450:	1c3b      	adds	r3, r7, #0
    9452:	330f      	adds	r3, #15
    9454:	7818      	ldrb	r0, [r3, #0]
    9456:	1c3b      	adds	r3, r7, #0
    9458:	330f      	adds	r3, #15
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	4aa2      	ldr	r2, [pc, #648]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    945e:	015b      	lsls	r3, r3, #5
    9460:	18d3      	adds	r3, r2, r3
    9462:	685b      	ldr	r3, [r3, #4]
    9464:	005b      	lsls	r3, r3, #1
    9466:	085a      	lsrs	r2, r3, #1
    9468:	499f      	ldr	r1, [pc, #636]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    946a:	0143      	lsls	r3, r0, #5
    946c:	18cb      	adds	r3, r1, r3
    946e:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9470:	1c3b      	adds	r3, r7, #0
    9472:	330f      	adds	r3, #15
    9474:	7818      	ldrb	r0, [r3, #0]
    9476:	1c3b      	adds	r3, r7, #0
    9478:	330f      	adds	r3, #15
    947a:	781b      	ldrb	r3, [r3, #0]
    947c:	4a9a      	ldr	r2, [pc, #616]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    947e:	015b      	lsls	r3, r3, #5
    9480:	18d3      	adds	r3, r2, r3
    9482:	3310      	adds	r3, #16
    9484:	685b      	ldr	r3, [r3, #4]
    9486:	005b      	lsls	r3, r3, #1
    9488:	085a      	lsrs	r2, r3, #1
    948a:	4997      	ldr	r1, [pc, #604]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    948c:	0143      	lsls	r3, r0, #5
    948e:	18cb      	adds	r3, r1, r3
    9490:	3310      	adds	r3, #16
    9492:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    9494:	1c3b      	adds	r3, r7, #0
    9496:	330f      	adds	r3, #15
    9498:	781b      	ldrb	r3, [r3, #0]
    949a:	683a      	ldr	r2, [r7, #0]
    949c:	7852      	ldrb	r2, [r2, #1]
    949e:	1c11      	adds	r1, r2, #0
    94a0:	2207      	movs	r2, #7
    94a2:	400a      	ands	r2, r1
    94a4:	b2d1      	uxtb	r1, r2
    94a6:	4a90      	ldr	r2, [pc, #576]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    94a8:	015b      	lsls	r3, r3, #5
    94aa:	18d3      	adds	r3, r2, r3
    94ac:	2207      	movs	r2, #7
    94ae:	400a      	ands	r2, r1
    94b0:	0712      	lsls	r2, r2, #28
    94b2:	6858      	ldr	r0, [r3, #4]
    94b4:	498d      	ldr	r1, [pc, #564]	; (96ec <usb_device_endpoint_set_config+0x3b4>)
    94b6:	4001      	ands	r1, r0
    94b8:	430a      	orrs	r2, r1
    94ba:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    94bc:	1c3b      	adds	r3, r7, #0
    94be:	330f      	adds	r3, #15
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	683a      	ldr	r2, [r7, #0]
    94c4:	7852      	ldrb	r2, [r2, #1]
    94c6:	1c11      	adds	r1, r2, #0
    94c8:	2207      	movs	r2, #7
    94ca:	400a      	ands	r2, r1
    94cc:	b2d1      	uxtb	r1, r2
    94ce:	4a86      	ldr	r2, [pc, #536]	; (96e8 <usb_device_endpoint_set_config+0x3b0>)
    94d0:	015b      	lsls	r3, r3, #5
    94d2:	18d3      	adds	r3, r2, r3
    94d4:	3310      	adds	r3, #16
    94d6:	2207      	movs	r2, #7
    94d8:	400a      	ands	r2, r1
    94da:	0712      	lsls	r2, r2, #28
    94dc:	6858      	ldr	r0, [r3, #4]
    94de:	4983      	ldr	r1, [pc, #524]	; (96ec <usb_device_endpoint_set_config+0x3b4>)
    94e0:	4001      	ands	r1, r0
    94e2:	430a      	orrs	r2, r1
    94e4:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    94e6:	2300      	movs	r3, #0
    94e8:	e187      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    94ea:	1c3b      	adds	r3, r7, #0
    94ec:	330e      	adds	r3, #14
    94ee:	781b      	ldrb	r3, [r3, #0]
    94f0:	2b00      	cmp	r3, #0
    94f2:	d02e      	beq.n	9552 <usb_device_endpoint_set_config+0x21a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	681b      	ldr	r3, [r3, #0]
    94f8:	1c3a      	adds	r2, r7, #0
    94fa:	320f      	adds	r2, #15
    94fc:	7812      	ldrb	r2, [r2, #0]
    94fe:	3208      	adds	r2, #8
    9500:	0152      	lsls	r2, r2, #5
    9502:	5cd3      	ldrb	r3, [r2, r3]
    9504:	b2db      	uxtb	r3, r3
    9506:	1c1a      	adds	r2, r3, #0
    9508:	2370      	movs	r3, #112	; 0x70
    950a:	4013      	ands	r3, r2
    950c:	d11f      	bne.n	954e <usb_device_endpoint_set_config+0x216>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	681a      	ldr	r2, [r3, #0]
    9512:	1c3b      	adds	r3, r7, #0
    9514:	330f      	adds	r3, #15
    9516:	7818      	ldrb	r0, [r3, #0]
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	681b      	ldr	r3, [r3, #0]
    951c:	1c39      	adds	r1, r7, #0
    951e:	310f      	adds	r1, #15
    9520:	7809      	ldrb	r1, [r1, #0]
    9522:	3108      	adds	r1, #8
    9524:	0149      	lsls	r1, r1, #5
    9526:	5ccb      	ldrb	r3, [r1, r3]
    9528:	b2db      	uxtb	r3, r3
    952a:	2120      	movs	r1, #32
    952c:	430b      	orrs	r3, r1
    952e:	b2d9      	uxtb	r1, r3
    9530:	1c03      	adds	r3, r0, #0
    9532:	3308      	adds	r3, #8
    9534:	015b      	lsls	r3, r3, #5
    9536:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	681a      	ldr	r2, [r3, #0]
    953c:	1c3b      	adds	r3, r7, #0
    953e:	330f      	adds	r3, #15
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	3308      	adds	r3, #8
    9544:	015b      	lsls	r3, r3, #5
    9546:	18d3      	adds	r3, r2, r3
    9548:	2280      	movs	r2, #128	; 0x80
    954a:	711a      	strb	r2, [r3, #4]
    954c:	e030      	b.n	95b0 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    954e:	231c      	movs	r3, #28
    9550:	e153      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	681b      	ldr	r3, [r3, #0]
    9556:	1c3a      	adds	r2, r7, #0
    9558:	320f      	adds	r2, #15
    955a:	7812      	ldrb	r2, [r2, #0]
    955c:	3208      	adds	r2, #8
    955e:	0152      	lsls	r2, r2, #5
    9560:	5cd3      	ldrb	r3, [r2, r3]
    9562:	b2db      	uxtb	r3, r3
    9564:	1c1a      	adds	r2, r3, #0
    9566:	2307      	movs	r3, #7
    9568:	4013      	ands	r3, r2
    956a:	d11f      	bne.n	95ac <usb_device_endpoint_set_config+0x274>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	681a      	ldr	r2, [r3, #0]
    9570:	1c3b      	adds	r3, r7, #0
    9572:	330f      	adds	r3, #15
    9574:	7818      	ldrb	r0, [r3, #0]
    9576:	687b      	ldr	r3, [r7, #4]
    9578:	681b      	ldr	r3, [r3, #0]
    957a:	1c39      	adds	r1, r7, #0
    957c:	310f      	adds	r1, #15
    957e:	7809      	ldrb	r1, [r1, #0]
    9580:	3108      	adds	r1, #8
    9582:	0149      	lsls	r1, r1, #5
    9584:	5ccb      	ldrb	r3, [r1, r3]
    9586:	b2db      	uxtb	r3, r3
    9588:	2102      	movs	r1, #2
    958a:	430b      	orrs	r3, r1
    958c:	b2d9      	uxtb	r1, r3
    958e:	1c03      	adds	r3, r0, #0
    9590:	3308      	adds	r3, #8
    9592:	015b      	lsls	r3, r3, #5
    9594:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9596:	687b      	ldr	r3, [r7, #4]
    9598:	681a      	ldr	r2, [r3, #0]
    959a:	1c3b      	adds	r3, r7, #0
    959c:	330f      	adds	r3, #15
    959e:	781b      	ldrb	r3, [r3, #0]
    95a0:	3308      	adds	r3, #8
    95a2:	015b      	lsls	r3, r3, #5
    95a4:	18d3      	adds	r3, r2, r3
    95a6:	2240      	movs	r2, #64	; 0x40
    95a8:	715a      	strb	r2, [r3, #5]
    95aa:	e001      	b.n	95b0 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    95ac:	231c      	movs	r3, #28
    95ae:	e124      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    95b0:	e0cf      	b.n	9752 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    95b2:	1c3b      	adds	r3, r7, #0
    95b4:	330e      	adds	r3, #14
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	2b00      	cmp	r3, #0
    95ba:	d02e      	beq.n	961a <usb_device_endpoint_set_config+0x2e2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	1c3a      	adds	r2, r7, #0
    95c2:	320f      	adds	r2, #15
    95c4:	7812      	ldrb	r2, [r2, #0]
    95c6:	3208      	adds	r2, #8
    95c8:	0152      	lsls	r2, r2, #5
    95ca:	5cd3      	ldrb	r3, [r2, r3]
    95cc:	b2db      	uxtb	r3, r3
    95ce:	1c1a      	adds	r2, r3, #0
    95d0:	2370      	movs	r3, #112	; 0x70
    95d2:	4013      	ands	r3, r2
    95d4:	d11f      	bne.n	9616 <usb_device_endpoint_set_config+0x2de>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	681a      	ldr	r2, [r3, #0]
    95da:	1c3b      	adds	r3, r7, #0
    95dc:	330f      	adds	r3, #15
    95de:	7818      	ldrb	r0, [r3, #0]
    95e0:	687b      	ldr	r3, [r7, #4]
    95e2:	681b      	ldr	r3, [r3, #0]
    95e4:	1c39      	adds	r1, r7, #0
    95e6:	310f      	adds	r1, #15
    95e8:	7809      	ldrb	r1, [r1, #0]
    95ea:	3108      	adds	r1, #8
    95ec:	0149      	lsls	r1, r1, #5
    95ee:	5ccb      	ldrb	r3, [r1, r3]
    95f0:	b2db      	uxtb	r3, r3
    95f2:	2130      	movs	r1, #48	; 0x30
    95f4:	430b      	orrs	r3, r1
    95f6:	b2d9      	uxtb	r1, r3
    95f8:	1c03      	adds	r3, r0, #0
    95fa:	3308      	adds	r3, #8
    95fc:	015b      	lsls	r3, r3, #5
    95fe:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	681a      	ldr	r2, [r3, #0]
    9604:	1c3b      	adds	r3, r7, #0
    9606:	330f      	adds	r3, #15
    9608:	781b      	ldrb	r3, [r3, #0]
    960a:	3308      	adds	r3, #8
    960c:	015b      	lsls	r3, r3, #5
    960e:	18d3      	adds	r3, r2, r3
    9610:	2280      	movs	r2, #128	; 0x80
    9612:	711a      	strb	r2, [r3, #4]
    9614:	e030      	b.n	9678 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    9616:	231c      	movs	r3, #28
    9618:	e0ef      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	681b      	ldr	r3, [r3, #0]
    961e:	1c3a      	adds	r2, r7, #0
    9620:	320f      	adds	r2, #15
    9622:	7812      	ldrb	r2, [r2, #0]
    9624:	3208      	adds	r2, #8
    9626:	0152      	lsls	r2, r2, #5
    9628:	5cd3      	ldrb	r3, [r2, r3]
    962a:	b2db      	uxtb	r3, r3
    962c:	1c1a      	adds	r2, r3, #0
    962e:	2307      	movs	r3, #7
    9630:	4013      	ands	r3, r2
    9632:	d11f      	bne.n	9674 <usb_device_endpoint_set_config+0x33c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	681a      	ldr	r2, [r3, #0]
    9638:	1c3b      	adds	r3, r7, #0
    963a:	330f      	adds	r3, #15
    963c:	7818      	ldrb	r0, [r3, #0]
    963e:	687b      	ldr	r3, [r7, #4]
    9640:	681b      	ldr	r3, [r3, #0]
    9642:	1c39      	adds	r1, r7, #0
    9644:	310f      	adds	r1, #15
    9646:	7809      	ldrb	r1, [r1, #0]
    9648:	3108      	adds	r1, #8
    964a:	0149      	lsls	r1, r1, #5
    964c:	5ccb      	ldrb	r3, [r1, r3]
    964e:	b2db      	uxtb	r3, r3
    9650:	2103      	movs	r1, #3
    9652:	430b      	orrs	r3, r1
    9654:	b2d9      	uxtb	r1, r3
    9656:	1c03      	adds	r3, r0, #0
    9658:	3308      	adds	r3, #8
    965a:	015b      	lsls	r3, r3, #5
    965c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	681a      	ldr	r2, [r3, #0]
    9662:	1c3b      	adds	r3, r7, #0
    9664:	330f      	adds	r3, #15
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	3308      	adds	r3, #8
    966a:	015b      	lsls	r3, r3, #5
    966c:	18d3      	adds	r3, r2, r3
    966e:	2240      	movs	r2, #64	; 0x40
    9670:	715a      	strb	r2, [r3, #5]
    9672:	e001      	b.n	9678 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    9674:	231c      	movs	r3, #28
    9676:	e0c0      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9678:	e06b      	b.n	9752 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    967a:	1c3b      	adds	r3, r7, #0
    967c:	330e      	adds	r3, #14
    967e:	781b      	ldrb	r3, [r3, #0]
    9680:	2b00      	cmp	r3, #0
    9682:	d035      	beq.n	96f0 <usb_device_endpoint_set_config+0x3b8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	681b      	ldr	r3, [r3, #0]
    9688:	1c3a      	adds	r2, r7, #0
    968a:	320f      	adds	r2, #15
    968c:	7812      	ldrb	r2, [r2, #0]
    968e:	3208      	adds	r2, #8
    9690:	0152      	lsls	r2, r2, #5
    9692:	5cd3      	ldrb	r3, [r2, r3]
    9694:	b2db      	uxtb	r3, r3
    9696:	1c1a      	adds	r2, r3, #0
    9698:	2370      	movs	r3, #112	; 0x70
    969a:	4013      	ands	r3, r2
    969c:	d11f      	bne.n	96de <usb_device_endpoint_set_config+0x3a6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	681a      	ldr	r2, [r3, #0]
    96a2:	1c3b      	adds	r3, r7, #0
    96a4:	330f      	adds	r3, #15
    96a6:	7818      	ldrb	r0, [r3, #0]
    96a8:	687b      	ldr	r3, [r7, #4]
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	1c39      	adds	r1, r7, #0
    96ae:	310f      	adds	r1, #15
    96b0:	7809      	ldrb	r1, [r1, #0]
    96b2:	3108      	adds	r1, #8
    96b4:	0149      	lsls	r1, r1, #5
    96b6:	5ccb      	ldrb	r3, [r1, r3]
    96b8:	b2db      	uxtb	r3, r3
    96ba:	2140      	movs	r1, #64	; 0x40
    96bc:	430b      	orrs	r3, r1
    96be:	b2d9      	uxtb	r1, r3
    96c0:	1c03      	adds	r3, r0, #0
    96c2:	3308      	adds	r3, #8
    96c4:	015b      	lsls	r3, r3, #5
    96c6:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	681a      	ldr	r2, [r3, #0]
    96cc:	1c3b      	adds	r3, r7, #0
    96ce:	330f      	adds	r3, #15
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	3308      	adds	r3, #8
    96d4:	015b      	lsls	r3, r3, #5
    96d6:	18d3      	adds	r3, r2, r3
    96d8:	2280      	movs	r2, #128	; 0x80
    96da:	711a      	strb	r2, [r3, #4]
    96dc:	e037      	b.n	974e <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    96de:	231c      	movs	r3, #28
    96e0:	e08b      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
    96e2:	46c0      	nop			; (mov r8, r8)
    96e4:	0000b5cc 	.word	0x0000b5cc
    96e8:	20007388 	.word	0x20007388
    96ec:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	681b      	ldr	r3, [r3, #0]
    96f4:	1c3a      	adds	r2, r7, #0
    96f6:	320f      	adds	r2, #15
    96f8:	7812      	ldrb	r2, [r2, #0]
    96fa:	3208      	adds	r2, #8
    96fc:	0152      	lsls	r2, r2, #5
    96fe:	5cd3      	ldrb	r3, [r2, r3]
    9700:	b2db      	uxtb	r3, r3
    9702:	1c1a      	adds	r2, r3, #0
    9704:	2307      	movs	r3, #7
    9706:	4013      	ands	r3, r2
    9708:	d11f      	bne.n	974a <usb_device_endpoint_set_config+0x412>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    970a:	687b      	ldr	r3, [r7, #4]
    970c:	681a      	ldr	r2, [r3, #0]
    970e:	1c3b      	adds	r3, r7, #0
    9710:	330f      	adds	r3, #15
    9712:	7818      	ldrb	r0, [r3, #0]
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	681b      	ldr	r3, [r3, #0]
    9718:	1c39      	adds	r1, r7, #0
    971a:	310f      	adds	r1, #15
    971c:	7809      	ldrb	r1, [r1, #0]
    971e:	3108      	adds	r1, #8
    9720:	0149      	lsls	r1, r1, #5
    9722:	5ccb      	ldrb	r3, [r1, r3]
    9724:	b2db      	uxtb	r3, r3
    9726:	2104      	movs	r1, #4
    9728:	430b      	orrs	r3, r1
    972a:	b2d9      	uxtb	r1, r3
    972c:	1c03      	adds	r3, r0, #0
    972e:	3308      	adds	r3, #8
    9730:	015b      	lsls	r3, r3, #5
    9732:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	681a      	ldr	r2, [r3, #0]
    9738:	1c3b      	adds	r3, r7, #0
    973a:	330f      	adds	r3, #15
    973c:	781b      	ldrb	r3, [r3, #0]
    973e:	3308      	adds	r3, #8
    9740:	015b      	lsls	r3, r3, #5
    9742:	18d3      	adds	r3, r2, r3
    9744:	2240      	movs	r2, #64	; 0x40
    9746:	715a      	strb	r2, [r3, #5]
    9748:	e001      	b.n	974e <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    974a:	231c      	movs	r3, #28
    974c:	e055      	b.n	97fa <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    974e:	e000      	b.n	9752 <usb_device_endpoint_set_config+0x41a>

		default:
			break;
    9750:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    9752:	1c3b      	adds	r3, r7, #0
    9754:	330f      	adds	r3, #15
    9756:	7818      	ldrb	r0, [r3, #0]
    9758:	1c3b      	adds	r3, r7, #0
    975a:	330e      	adds	r3, #14
    975c:	781b      	ldrb	r3, [r3, #0]
    975e:	683a      	ldr	r2, [r7, #0]
    9760:	7852      	ldrb	r2, [r2, #1]
    9762:	1c11      	adds	r1, r2, #0
    9764:	2207      	movs	r2, #7
    9766:	400a      	ands	r2, r1
    9768:	b2d1      	uxtb	r1, r2
    976a:	4a26      	ldr	r2, [pc, #152]	; (9804 <usb_device_endpoint_set_config+0x4cc>)
    976c:	0040      	lsls	r0, r0, #1
    976e:	18c3      	adds	r3, r0, r3
    9770:	011b      	lsls	r3, r3, #4
    9772:	18d3      	adds	r3, r2, r3
    9774:	2207      	movs	r2, #7
    9776:	400a      	ands	r2, r1
    9778:	0712      	lsls	r2, r2, #28
    977a:	6858      	ldr	r0, [r3, #4]
    977c:	4922      	ldr	r1, [pc, #136]	; (9808 <usb_device_endpoint_set_config+0x4d0>)
    977e:	4001      	ands	r1, r0
    9780:	430a      	orrs	r2, r1
    9782:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    9784:	683b      	ldr	r3, [r7, #0]
    9786:	789b      	ldrb	r3, [r3, #2]
    9788:	2b00      	cmp	r3, #0
    978a:	d01b      	beq.n	97c4 <usb_device_endpoint_set_config+0x48c>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    978c:	1c3b      	adds	r3, r7, #0
    978e:	330f      	adds	r3, #15
    9790:	781c      	ldrb	r4, [r3, #0]
    9792:	1c3b      	adds	r3, r7, #0
    9794:	330e      	adds	r3, #14
    9796:	7818      	ldrb	r0, [r3, #0]
    9798:	1c3b      	adds	r3, r7, #0
    979a:	330f      	adds	r3, #15
    979c:	7819      	ldrb	r1, [r3, #0]
    979e:	1c3b      	adds	r3, r7, #0
    97a0:	330e      	adds	r3, #14
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	4a17      	ldr	r2, [pc, #92]	; (9804 <usb_device_endpoint_set_config+0x4cc>)
    97a6:	0049      	lsls	r1, r1, #1
    97a8:	18cb      	adds	r3, r1, r3
    97aa:	011b      	lsls	r3, r3, #4
    97ac:	18d3      	adds	r3, r2, r3
    97ae:	685b      	ldr	r3, [r3, #4]
    97b0:	2280      	movs	r2, #128	; 0x80
    97b2:	0612      	lsls	r2, r2, #24
    97b4:	431a      	orrs	r2, r3
    97b6:	4913      	ldr	r1, [pc, #76]	; (9804 <usb_device_endpoint_set_config+0x4cc>)
    97b8:	0063      	lsls	r3, r4, #1
    97ba:	181b      	adds	r3, r3, r0
    97bc:	011b      	lsls	r3, r3, #4
    97be:	18cb      	adds	r3, r1, r3
    97c0:	605a      	str	r2, [r3, #4]
    97c2:	e019      	b.n	97f8 <usb_device_endpoint_set_config+0x4c0>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    97c4:	1c3b      	adds	r3, r7, #0
    97c6:	330f      	adds	r3, #15
    97c8:	781c      	ldrb	r4, [r3, #0]
    97ca:	1c3b      	adds	r3, r7, #0
    97cc:	330e      	adds	r3, #14
    97ce:	7818      	ldrb	r0, [r3, #0]
    97d0:	1c3b      	adds	r3, r7, #0
    97d2:	330f      	adds	r3, #15
    97d4:	7819      	ldrb	r1, [r3, #0]
    97d6:	1c3b      	adds	r3, r7, #0
    97d8:	330e      	adds	r3, #14
    97da:	781b      	ldrb	r3, [r3, #0]
    97dc:	4a09      	ldr	r2, [pc, #36]	; (9804 <usb_device_endpoint_set_config+0x4cc>)
    97de:	0049      	lsls	r1, r1, #1
    97e0:	18cb      	adds	r3, r1, r3
    97e2:	011b      	lsls	r3, r3, #4
    97e4:	18d3      	adds	r3, r2, r3
    97e6:	685b      	ldr	r3, [r3, #4]
    97e8:	005b      	lsls	r3, r3, #1
    97ea:	085a      	lsrs	r2, r3, #1
    97ec:	4905      	ldr	r1, [pc, #20]	; (9804 <usb_device_endpoint_set_config+0x4cc>)
    97ee:	0063      	lsls	r3, r4, #1
    97f0:	181b      	adds	r3, r3, r0
    97f2:	011b      	lsls	r3, r3, #4
    97f4:	18cb      	adds	r3, r1, r3
    97f6:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    97f8:	2300      	movs	r3, #0
}
    97fa:	1c18      	adds	r0, r3, #0
    97fc:	46bd      	mov	sp, r7
    97fe:	b005      	add	sp, #20
    9800:	bd90      	pop	{r4, r7, pc}
    9802:	46c0      	nop			; (mov r8, r8)
    9804:	20007388 	.word	0x20007388
    9808:	8fffffff 	.word	0x8fffffff

0000980c <usb_device_endpoint_is_configured>:
 * \param ep            Endpoint address (direction & number)
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
    980c:	b580      	push	{r7, lr}
    980e:	b084      	sub	sp, #16
    9810:	af00      	add	r7, sp, #0
    9812:	6078      	str	r0, [r7, #4]
    9814:	1c0a      	adds	r2, r1, #0
    9816:	1cfb      	adds	r3, r7, #3
    9818:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    981a:	1c3b      	adds	r3, r7, #0
    981c:	330e      	adds	r3, #14
    981e:	1cfa      	adds	r2, r7, #3
    9820:	7811      	ldrb	r1, [r2, #0]
    9822:	220f      	movs	r2, #15
    9824:	400a      	ands	r2, r1
    9826:	701a      	strb	r2, [r3, #0]
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    9828:	1cfb      	adds	r3, r7, #3
    982a:	781b      	ldrb	r3, [r3, #0]
    982c:	b25b      	sxtb	r3, r3
    982e:	2b00      	cmp	r3, #0
    9830:	da11      	bge.n	9856 <usb_device_endpoint_is_configured+0x4a>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    9832:	687b      	ldr	r3, [r7, #4]
    9834:	681b      	ldr	r3, [r3, #0]
    9836:	1c3a      	adds	r2, r7, #0
    9838:	320e      	adds	r2, #14
    983a:	7812      	ldrb	r2, [r2, #0]
    983c:	3208      	adds	r2, #8
    983e:	0152      	lsls	r2, r2, #5
    9840:	5cd3      	ldrb	r3, [r2, r3]
    9842:	b2db      	uxtb	r3, r3
    9844:	091b      	lsrs	r3, r3, #4
    9846:	1c1a      	adds	r2, r3, #0
    9848:	2307      	movs	r3, #7
    984a:	4013      	ands	r3, r2
    984c:	b2da      	uxtb	r2, r3
    984e:	1c3b      	adds	r3, r7, #0
    9850:	330f      	adds	r3, #15
    9852:	701a      	strb	r2, [r3, #0]
    9854:	e00d      	b.n	9872 <usb_device_endpoint_is_configured+0x66>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    9856:	687b      	ldr	r3, [r7, #4]
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	1c3a      	adds	r2, r7, #0
    985c:	320e      	adds	r2, #14
    985e:	7812      	ldrb	r2, [r2, #0]
    9860:	3208      	adds	r2, #8
    9862:	0152      	lsls	r2, r2, #5
    9864:	5cd2      	ldrb	r2, [r2, r3]
    9866:	2307      	movs	r3, #7
    9868:	4013      	ands	r3, r2
    986a:	b2da      	uxtb	r2, r3
    986c:	1c3b      	adds	r3, r7, #0
    986e:	330f      	adds	r3, #15
    9870:	701a      	strb	r2, [r3, #0]
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    9872:	1c3b      	adds	r3, r7, #0
    9874:	330f      	adds	r3, #15
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	1e5a      	subs	r2, r3, #1
    987a:	4193      	sbcs	r3, r2
    987c:	b2db      	uxtb	r3, r3
}
    987e:	1c18      	adds	r0, r3, #0
    9880:	46bd      	mov	sp, r7
    9882:	b004      	add	sp, #16
    9884:	bd80      	pop	{r7, pc}
    9886:	46c0      	nop			; (mov r8, r8)

00009888 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    9888:	b580      	push	{r7, lr}
    988a:	b084      	sub	sp, #16
    988c:	af00      	add	r7, sp, #0
    988e:	6078      	str	r0, [r7, #4]
    9890:	1c0a      	adds	r2, r1, #0
    9892:	1cfb      	adds	r3, r7, #3
    9894:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    9896:	1c3b      	adds	r3, r7, #0
    9898:	330f      	adds	r3, #15
    989a:	1cfa      	adds	r2, r7, #3
    989c:	7811      	ldrb	r1, [r2, #0]
    989e:	220f      	movs	r2, #15
    98a0:	400a      	ands	r2, r1
    98a2:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    98a4:	1cfb      	adds	r3, r7, #3
    98a6:	781b      	ldrb	r3, [r3, #0]
    98a8:	b25b      	sxtb	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	da14      	bge.n	98d8 <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    98ae:	687b      	ldr	r3, [r7, #4]
    98b0:	681a      	ldr	r2, [r3, #0]
    98b2:	1c3b      	adds	r3, r7, #0
    98b4:	330f      	adds	r3, #15
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	3308      	adds	r3, #8
    98ba:	015b      	lsls	r3, r3, #5
    98bc:	18d3      	adds	r3, r2, r3
    98be:	2280      	movs	r2, #128	; 0x80
    98c0:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	681a      	ldr	r2, [r3, #0]
    98c6:	1c3b      	adds	r3, r7, #0
    98c8:	330f      	adds	r3, #15
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	3308      	adds	r3, #8
    98ce:	015b      	lsls	r3, r3, #5
    98d0:	18d3      	adds	r3, r2, r3
    98d2:	2202      	movs	r2, #2
    98d4:	71da      	strb	r2, [r3, #7]
    98d6:	e013      	b.n	9900 <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    98d8:	687b      	ldr	r3, [r7, #4]
    98da:	681a      	ldr	r2, [r3, #0]
    98dc:	1c3b      	adds	r3, r7, #0
    98de:	330f      	adds	r3, #15
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	3308      	adds	r3, #8
    98e4:	015b      	lsls	r3, r3, #5
    98e6:	18d3      	adds	r3, r2, r3
    98e8:	2240      	movs	r2, #64	; 0x40
    98ea:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    98ec:	687b      	ldr	r3, [r7, #4]
    98ee:	681a      	ldr	r2, [r3, #0]
    98f0:	1c3b      	adds	r3, r7, #0
    98f2:	330f      	adds	r3, #15
    98f4:	781b      	ldrb	r3, [r3, #0]
    98f6:	3308      	adds	r3, #8
    98f8:	015b      	lsls	r3, r3, #5
    98fa:	18d3      	adds	r3, r2, r3
    98fc:	2201      	movs	r2, #1
    98fe:	71da      	strb	r2, [r3, #7]
	}
}
    9900:	46bd      	mov	sp, r7
    9902:	b004      	add	sp, #16
    9904:	bd80      	pop	{r7, pc}
    9906:	46c0      	nop			; (mov r8, r8)

00009908 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    9908:	b580      	push	{r7, lr}
    990a:	b084      	sub	sp, #16
    990c:	af00      	add	r7, sp, #0
    990e:	6078      	str	r0, [r7, #4]
    9910:	1c0a      	adds	r2, r1, #0
    9912:	1cfb      	adds	r3, r7, #3
    9914:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9916:	1c3b      	adds	r3, r7, #0
    9918:	330f      	adds	r3, #15
    991a:	1cfa      	adds	r2, r7, #3
    991c:	7811      	ldrb	r1, [r2, #0]
    991e:	220f      	movs	r2, #15
    9920:	400a      	ands	r2, r1
    9922:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    9924:	1cfb      	adds	r3, r7, #3
    9926:	781b      	ldrb	r3, [r3, #0]
    9928:	b25b      	sxtb	r3, r3
    992a:	2b00      	cmp	r3, #0
    992c:	da10      	bge.n	9950 <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	681a      	ldr	r2, [r3, #0]
    9932:	1c3b      	adds	r3, r7, #0
    9934:	330f      	adds	r3, #15
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	3308      	adds	r3, #8
    993a:	015b      	lsls	r3, r3, #5
    993c:	18d3      	adds	r3, r2, r3
    993e:	799b      	ldrb	r3, [r3, #6]
    9940:	b2db      	uxtb	r3, r3
    9942:	1c1a      	adds	r2, r3, #0
    9944:	2320      	movs	r3, #32
    9946:	4013      	ands	r3, r2
    9948:	1e5a      	subs	r2, r3, #1
    994a:	4193      	sbcs	r3, r2
    994c:	b2db      	uxtb	r3, r3
    994e:	e00f      	b.n	9970 <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	681a      	ldr	r2, [r3, #0]
    9954:	1c3b      	adds	r3, r7, #0
    9956:	330f      	adds	r3, #15
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	3308      	adds	r3, #8
    995c:	015b      	lsls	r3, r3, #5
    995e:	18d3      	adds	r3, r2, r3
    9960:	799b      	ldrb	r3, [r3, #6]
    9962:	b2db      	uxtb	r3, r3
    9964:	1c1a      	adds	r2, r3, #0
    9966:	2310      	movs	r3, #16
    9968:	4013      	ands	r3, r2
    996a:	1e5a      	subs	r2, r3, #1
    996c:	4193      	sbcs	r3, r2
    996e:	b2db      	uxtb	r3, r3
	}
}
    9970:	1c18      	adds	r0, r3, #0
    9972:	46bd      	mov	sp, r7
    9974:	b004      	add	sp, #16
    9976:	bd80      	pop	{r7, pc}

00009978 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    9978:	b580      	push	{r7, lr}
    997a:	b084      	sub	sp, #16
    997c:	af00      	add	r7, sp, #0
    997e:	6078      	str	r0, [r7, #4]
    9980:	1c0a      	adds	r2, r1, #0
    9982:	1cfb      	adds	r3, r7, #3
    9984:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9986:	1c3b      	adds	r3, r7, #0
    9988:	330f      	adds	r3, #15
    998a:	1cfa      	adds	r2, r7, #3
    998c:	7811      	ldrb	r1, [r2, #0]
    998e:	220f      	movs	r2, #15
    9990:	400a      	ands	r2, r1
    9992:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    9994:	1cfb      	adds	r3, r7, #3
    9996:	781b      	ldrb	r3, [r3, #0]
    9998:	b25b      	sxtb	r3, r3
    999a:	2b00      	cmp	r3, #0
    999c:	da0a      	bge.n	99b4 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    999e:	687b      	ldr	r3, [r7, #4]
    99a0:	681a      	ldr	r2, [r3, #0]
    99a2:	1c3b      	adds	r3, r7, #0
    99a4:	330f      	adds	r3, #15
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	3308      	adds	r3, #8
    99aa:	015b      	lsls	r3, r3, #5
    99ac:	18d3      	adds	r3, r2, r3
    99ae:	2220      	movs	r2, #32
    99b0:	715a      	strb	r2, [r3, #5]
    99b2:	e009      	b.n	99c8 <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	681a      	ldr	r2, [r3, #0]
    99b8:	1c3b      	adds	r3, r7, #0
    99ba:	330f      	adds	r3, #15
    99bc:	781b      	ldrb	r3, [r3, #0]
    99be:	3308      	adds	r3, #8
    99c0:	015b      	lsls	r3, r3, #5
    99c2:	18d3      	adds	r3, r2, r3
    99c4:	2210      	movs	r2, #16
    99c6:	715a      	strb	r2, [r3, #5]
	}
}
    99c8:	46bd      	mov	sp, r7
    99ca:	b004      	add	sp, #16
    99cc:	bd80      	pop	{r7, pc}
    99ce:	46c0      	nop			; (mov r8, r8)

000099d0 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    99d0:	b580      	push	{r7, lr}
    99d2:	b084      	sub	sp, #16
    99d4:	af00      	add	r7, sp, #0
    99d6:	6078      	str	r0, [r7, #4]
    99d8:	1c0a      	adds	r2, r1, #0
    99da:	1cfb      	adds	r3, r7, #3
    99dc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    99de:	1c3b      	adds	r3, r7, #0
    99e0:	330f      	adds	r3, #15
    99e2:	1cfa      	adds	r2, r7, #3
    99e4:	7811      	ldrb	r1, [r2, #0]
    99e6:	220f      	movs	r2, #15
    99e8:	400a      	ands	r2, r1
    99ea:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    99ec:	1cfb      	adds	r3, r7, #3
    99ee:	781b      	ldrb	r3, [r3, #0]
    99f0:	b25b      	sxtb	r3, r3
    99f2:	2b00      	cmp	r3, #0
    99f4:	da3a      	bge.n	9a6c <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	681a      	ldr	r2, [r3, #0]
    99fa:	1c3b      	adds	r3, r7, #0
    99fc:	330f      	adds	r3, #15
    99fe:	781b      	ldrb	r3, [r3, #0]
    9a00:	3308      	adds	r3, #8
    9a02:	015b      	lsls	r3, r3, #5
    9a04:	18d3      	adds	r3, r2, r3
    9a06:	799b      	ldrb	r3, [r3, #6]
    9a08:	b2db      	uxtb	r3, r3
    9a0a:	1c1a      	adds	r2, r3, #0
    9a0c:	2320      	movs	r3, #32
    9a0e:	4013      	ands	r3, r2
    9a10:	d066      	beq.n	9ae0 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    9a12:	687b      	ldr	r3, [r7, #4]
    9a14:	681a      	ldr	r2, [r3, #0]
    9a16:	1c3b      	adds	r3, r7, #0
    9a18:	330f      	adds	r3, #15
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	3308      	adds	r3, #8
    9a1e:	015b      	lsls	r3, r3, #5
    9a20:	18d3      	adds	r3, r2, r3
    9a22:	2220      	movs	r2, #32
    9a24:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    9a26:	687b      	ldr	r3, [r7, #4]
    9a28:	681a      	ldr	r2, [r3, #0]
    9a2a:	1c3b      	adds	r3, r7, #0
    9a2c:	330f      	adds	r3, #15
    9a2e:	781b      	ldrb	r3, [r3, #0]
    9a30:	3308      	adds	r3, #8
    9a32:	015b      	lsls	r3, r3, #5
    9a34:	18d3      	adds	r3, r2, r3
    9a36:	79db      	ldrb	r3, [r3, #7]
    9a38:	b2db      	uxtb	r3, r3
    9a3a:	1c1a      	adds	r2, r3, #0
    9a3c:	2340      	movs	r3, #64	; 0x40
    9a3e:	4013      	ands	r3, r2
    9a40:	d04e      	beq.n	9ae0 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	681a      	ldr	r2, [r3, #0]
    9a46:	1c3b      	adds	r3, r7, #0
    9a48:	330f      	adds	r3, #15
    9a4a:	781b      	ldrb	r3, [r3, #0]
    9a4c:	3308      	adds	r3, #8
    9a4e:	015b      	lsls	r3, r3, #5
    9a50:	18d3      	adds	r3, r2, r3
    9a52:	2240      	movs	r2, #64	; 0x40
    9a54:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    9a56:	687b      	ldr	r3, [r7, #4]
    9a58:	681a      	ldr	r2, [r3, #0]
    9a5a:	1c3b      	adds	r3, r7, #0
    9a5c:	330f      	adds	r3, #15
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	3308      	adds	r3, #8
    9a62:	015b      	lsls	r3, r3, #5
    9a64:	18d3      	adds	r3, r2, r3
    9a66:	2202      	movs	r2, #2
    9a68:	711a      	strb	r2, [r3, #4]
    9a6a:	e039      	b.n	9ae0 <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	681a      	ldr	r2, [r3, #0]
    9a70:	1c3b      	adds	r3, r7, #0
    9a72:	330f      	adds	r3, #15
    9a74:	781b      	ldrb	r3, [r3, #0]
    9a76:	3308      	adds	r3, #8
    9a78:	015b      	lsls	r3, r3, #5
    9a7a:	18d3      	adds	r3, r2, r3
    9a7c:	799b      	ldrb	r3, [r3, #6]
    9a7e:	b2db      	uxtb	r3, r3
    9a80:	1c1a      	adds	r2, r3, #0
    9a82:	2310      	movs	r3, #16
    9a84:	4013      	ands	r3, r2
    9a86:	d02b      	beq.n	9ae0 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	681a      	ldr	r2, [r3, #0]
    9a8c:	1c3b      	adds	r3, r7, #0
    9a8e:	330f      	adds	r3, #15
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	3308      	adds	r3, #8
    9a94:	015b      	lsls	r3, r3, #5
    9a96:	18d3      	adds	r3, r2, r3
    9a98:	2210      	movs	r2, #16
    9a9a:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	681a      	ldr	r2, [r3, #0]
    9aa0:	1c3b      	adds	r3, r7, #0
    9aa2:	330f      	adds	r3, #15
    9aa4:	781b      	ldrb	r3, [r3, #0]
    9aa6:	3308      	adds	r3, #8
    9aa8:	015b      	lsls	r3, r3, #5
    9aaa:	18d3      	adds	r3, r2, r3
    9aac:	79db      	ldrb	r3, [r3, #7]
    9aae:	b2db      	uxtb	r3, r3
    9ab0:	1c1a      	adds	r2, r3, #0
    9ab2:	2320      	movs	r3, #32
    9ab4:	4013      	ands	r3, r2
    9ab6:	d013      	beq.n	9ae0 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9ab8:	687b      	ldr	r3, [r7, #4]
    9aba:	681a      	ldr	r2, [r3, #0]
    9abc:	1c3b      	adds	r3, r7, #0
    9abe:	330f      	adds	r3, #15
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	3308      	adds	r3, #8
    9ac4:	015b      	lsls	r3, r3, #5
    9ac6:	18d3      	adds	r3, r2, r3
    9ac8:	2220      	movs	r2, #32
    9aca:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    9acc:	687b      	ldr	r3, [r7, #4]
    9ace:	681a      	ldr	r2, [r3, #0]
    9ad0:	1c3b      	adds	r3, r7, #0
    9ad2:	330f      	adds	r3, #15
    9ad4:	781b      	ldrb	r3, [r3, #0]
    9ad6:	3308      	adds	r3, #8
    9ad8:	015b      	lsls	r3, r3, #5
    9ada:	18d3      	adds	r3, r2, r3
    9adc:	2201      	movs	r2, #1
    9ade:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    9ae0:	46bd      	mov	sp, r7
    9ae2:	b004      	add	sp, #16
    9ae4:	bd80      	pop	{r7, pc}
    9ae6:	46c0      	nop			; (mov r8, r8)

00009ae8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	b086      	sub	sp, #24
    9aec:	af00      	add	r7, sp, #0
    9aee:	60f8      	str	r0, [r7, #12]
    9af0:	607a      	str	r2, [r7, #4]
    9af2:	603b      	str	r3, [r7, #0]
    9af4:	1c3b      	adds	r3, r7, #0
    9af6:	330b      	adds	r3, #11
    9af8:	1c0a      	adds	r2, r1, #0
    9afa:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	681b      	ldr	r3, [r3, #0]
    9b00:	1c3a      	adds	r2, r7, #0
    9b02:	320b      	adds	r2, #11
    9b04:	7812      	ldrb	r2, [r2, #0]
    9b06:	3208      	adds	r2, #8
    9b08:	0152      	lsls	r2, r2, #5
    9b0a:	5cd3      	ldrb	r3, [r2, r3]
    9b0c:	b2db      	uxtb	r3, r3
    9b0e:	091b      	lsrs	r3, r3, #4
    9b10:	1c1a      	adds	r2, r3, #0
    9b12:	2307      	movs	r3, #7
    9b14:	4013      	ands	r3, r2
    9b16:	b2da      	uxtb	r2, r3
    9b18:	1c3b      	adds	r3, r7, #0
    9b1a:	3317      	adds	r3, #23
    9b1c:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    9b1e:	1c3b      	adds	r3, r7, #0
    9b20:	3317      	adds	r3, #23
    9b22:	781b      	ldrb	r3, [r3, #0]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d101      	bne.n	9b2c <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    9b28:	231c      	movs	r3, #28
    9b2a:	e031      	b.n	9b90 <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    9b2c:	1c3b      	adds	r3, r7, #0
    9b2e:	330b      	adds	r3, #11
    9b30:	781b      	ldrb	r3, [r3, #0]
    9b32:	687a      	ldr	r2, [r7, #4]
    9b34:	4918      	ldr	r1, [pc, #96]	; (9b98 <usb_device_endpoint_write_buffer_job+0xb0>)
    9b36:	015b      	lsls	r3, r3, #5
    9b38:	18cb      	adds	r3, r1, r3
    9b3a:	3310      	adds	r3, #16
    9b3c:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    9b3e:	1c3b      	adds	r3, r7, #0
    9b40:	330b      	adds	r3, #11
    9b42:	781b      	ldrb	r3, [r3, #0]
    9b44:	4a14      	ldr	r2, [pc, #80]	; (9b98 <usb_device_endpoint_write_buffer_job+0xb0>)
    9b46:	015b      	lsls	r3, r3, #5
    9b48:	18d3      	adds	r3, r2, r3
    9b4a:	3310      	adds	r3, #16
    9b4c:	6859      	ldr	r1, [r3, #4]
    9b4e:	4a13      	ldr	r2, [pc, #76]	; (9b9c <usb_device_endpoint_write_buffer_job+0xb4>)
    9b50:	400a      	ands	r2, r1
    9b52:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    9b54:	1c3b      	adds	r3, r7, #0
    9b56:	330b      	adds	r3, #11
    9b58:	781b      	ldrb	r3, [r3, #0]
    9b5a:	683a      	ldr	r2, [r7, #0]
    9b5c:	b292      	uxth	r2, r2
    9b5e:	0492      	lsls	r2, r2, #18
    9b60:	0c92      	lsrs	r2, r2, #18
    9b62:	b292      	uxth	r2, r2
    9b64:	490c      	ldr	r1, [pc, #48]	; (9b98 <usb_device_endpoint_write_buffer_job+0xb0>)
    9b66:	015b      	lsls	r3, r3, #5
    9b68:	18cb      	adds	r3, r1, r3
    9b6a:	3310      	adds	r3, #16
    9b6c:	0492      	lsls	r2, r2, #18
    9b6e:	0c92      	lsrs	r2, r2, #18
    9b70:	6859      	ldr	r1, [r3, #4]
    9b72:	0b89      	lsrs	r1, r1, #14
    9b74:	0389      	lsls	r1, r1, #14
    9b76:	430a      	orrs	r2, r1
    9b78:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    9b7a:	68fb      	ldr	r3, [r7, #12]
    9b7c:	681a      	ldr	r2, [r3, #0]
    9b7e:	1c3b      	adds	r3, r7, #0
    9b80:	330b      	adds	r3, #11
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	3308      	adds	r3, #8
    9b86:	015b      	lsls	r3, r3, #5
    9b88:	18d3      	adds	r3, r2, r3
    9b8a:	2280      	movs	r2, #128	; 0x80
    9b8c:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    9b8e:	2300      	movs	r3, #0
}
    9b90:	1c18      	adds	r0, r3, #0
    9b92:	46bd      	mov	sp, r7
    9b94:	b006      	add	sp, #24
    9b96:	bd80      	pop	{r7, pc}
    9b98:	20007388 	.word	0x20007388
    9b9c:	f0003fff 	.word	0xf0003fff

00009ba0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9ba0:	b580      	push	{r7, lr}
    9ba2:	b086      	sub	sp, #24
    9ba4:	af00      	add	r7, sp, #0
    9ba6:	60f8      	str	r0, [r7, #12]
    9ba8:	607a      	str	r2, [r7, #4]
    9baa:	603b      	str	r3, [r7, #0]
    9bac:	1c3b      	adds	r3, r7, #0
    9bae:	330b      	adds	r3, #11
    9bb0:	1c0a      	adds	r2, r1, #0
    9bb2:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    9bb4:	68fb      	ldr	r3, [r7, #12]
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	1c3a      	adds	r2, r7, #0
    9bba:	320b      	adds	r2, #11
    9bbc:	7812      	ldrb	r2, [r2, #0]
    9bbe:	3208      	adds	r2, #8
    9bc0:	0152      	lsls	r2, r2, #5
    9bc2:	5cd2      	ldrb	r2, [r2, r3]
    9bc4:	2307      	movs	r3, #7
    9bc6:	4013      	ands	r3, r2
    9bc8:	b2da      	uxtb	r2, r3
    9bca:	1c3b      	adds	r3, r7, #0
    9bcc:	3317      	adds	r3, #23
    9bce:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    9bd0:	1c3b      	adds	r3, r7, #0
    9bd2:	3317      	adds	r3, #23
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d101      	bne.n	9bde <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    9bda:	231c      	movs	r3, #28
    9bdc:	e02e      	b.n	9c3c <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    9bde:	1c3b      	adds	r3, r7, #0
    9be0:	330b      	adds	r3, #11
    9be2:	781a      	ldrb	r2, [r3, #0]
    9be4:	6879      	ldr	r1, [r7, #4]
    9be6:	4b17      	ldr	r3, [pc, #92]	; (9c44 <usb_device_endpoint_read_buffer_job+0xa4>)
    9be8:	0152      	lsls	r2, r2, #5
    9bea:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    9bec:	1c3b      	adds	r3, r7, #0
    9bee:	330b      	adds	r3, #11
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	683a      	ldr	r2, [r7, #0]
    9bf4:	b292      	uxth	r2, r2
    9bf6:	0492      	lsls	r2, r2, #18
    9bf8:	0c92      	lsrs	r2, r2, #18
    9bfa:	b292      	uxth	r2, r2
    9bfc:	4911      	ldr	r1, [pc, #68]	; (9c44 <usb_device_endpoint_read_buffer_job+0xa4>)
    9bfe:	015b      	lsls	r3, r3, #5
    9c00:	18cb      	adds	r3, r1, r3
    9c02:	0492      	lsls	r2, r2, #18
    9c04:	0c92      	lsrs	r2, r2, #18
    9c06:	0392      	lsls	r2, r2, #14
    9c08:	6858      	ldr	r0, [r3, #4]
    9c0a:	490f      	ldr	r1, [pc, #60]	; (9c48 <usb_device_endpoint_read_buffer_job+0xa8>)
    9c0c:	4001      	ands	r1, r0
    9c0e:	430a      	orrs	r2, r1
    9c10:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9c12:	1c3b      	adds	r3, r7, #0
    9c14:	330b      	adds	r3, #11
    9c16:	781b      	ldrb	r3, [r3, #0]
    9c18:	4a0a      	ldr	r2, [pc, #40]	; (9c44 <usb_device_endpoint_read_buffer_job+0xa4>)
    9c1a:	015b      	lsls	r3, r3, #5
    9c1c:	18d3      	adds	r3, r2, r3
    9c1e:	685a      	ldr	r2, [r3, #4]
    9c20:	0b92      	lsrs	r2, r2, #14
    9c22:	0392      	lsls	r2, r2, #14
    9c24:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	681a      	ldr	r2, [r3, #0]
    9c2a:	1c3b      	adds	r3, r7, #0
    9c2c:	330b      	adds	r3, #11
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	3308      	adds	r3, #8
    9c32:	015b      	lsls	r3, r3, #5
    9c34:	18d3      	adds	r3, r2, r3
    9c36:	2240      	movs	r2, #64	; 0x40
    9c38:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    9c3a:	2300      	movs	r3, #0
}
    9c3c:	1c18      	adds	r0, r3, #0
    9c3e:	46bd      	mov	sp, r7
    9c40:	b006      	add	sp, #24
    9c42:	bd80      	pop	{r7, pc}
    9c44:	20007388 	.word	0x20007388
    9c48:	f0003fff 	.word	0xf0003fff

00009c4c <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    9c4c:	b580      	push	{r7, lr}
    9c4e:	b082      	sub	sp, #8
    9c50:	af00      	add	r7, sp, #0
    9c52:	6078      	str	r0, [r7, #4]
    9c54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    9c56:	683a      	ldr	r2, [r7, #0]
    9c58:	4b0c      	ldr	r3, [pc, #48]	; (9c8c <usb_device_endpoint_setup_buffer_job+0x40>)
    9c5a:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    9c5c:	4b0b      	ldr	r3, [pc, #44]	; (9c8c <usb_device_endpoint_setup_buffer_job+0x40>)
    9c5e:	6859      	ldr	r1, [r3, #4]
    9c60:	4a0b      	ldr	r2, [pc, #44]	; (9c90 <usb_device_endpoint_setup_buffer_job+0x44>)
    9c62:	400a      	ands	r2, r1
    9c64:	2180      	movs	r1, #128	; 0x80
    9c66:	0289      	lsls	r1, r1, #10
    9c68:	430a      	orrs	r2, r1
    9c6a:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9c6c:	4b07      	ldr	r3, [pc, #28]	; (9c8c <usb_device_endpoint_setup_buffer_job+0x40>)
    9c6e:	685a      	ldr	r2, [r3, #4]
    9c70:	0b92      	lsrs	r2, r2, #14
    9c72:	0392      	lsls	r2, r2, #14
    9c74:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    9c76:	687b      	ldr	r3, [r7, #4]
    9c78:	681a      	ldr	r2, [r3, #0]
    9c7a:	2382      	movs	r3, #130	; 0x82
    9c7c:	005b      	lsls	r3, r3, #1
    9c7e:	2140      	movs	r1, #64	; 0x40
    9c80:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    9c82:	2300      	movs	r3, #0
}
    9c84:	1c18      	adds	r0, r3, #0
    9c86:	46bd      	mov	sp, r7
    9c88:	b002      	add	sp, #8
    9c8a:	bd80      	pop	{r7, pc}
    9c8c:	20007388 	.word	0x20007388
    9c90:	f0003fff 	.word	0xf0003fff

00009c94 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    9c94:	b580      	push	{r7, lr}
    9c96:	b084      	sub	sp, #16
    9c98:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    9c9a:	4bcc      	ldr	r3, [pc, #816]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9c9c:	681b      	ldr	r3, [r3, #0]
    9c9e:	681a      	ldr	r2, [r3, #0]
    9ca0:	1c3b      	adds	r3, r7, #0
    9ca2:	3308      	adds	r3, #8
    9ca4:	8c12      	ldrh	r2, [r2, #32]
    9ca6:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    9ca8:	1c3b      	adds	r3, r7, #0
    9caa:	3308      	adds	r3, #8
    9cac:	881b      	ldrh	r3, [r3, #0]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d158      	bne.n	9d64 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    9cb2:	4bc6      	ldr	r3, [pc, #792]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9cb4:	681b      	ldr	r3, [r3, #0]
    9cb6:	681a      	ldr	r2, [r3, #0]
    9cb8:	1dbb      	adds	r3, r7, #6
    9cba:	8b92      	ldrh	r2, [r2, #28]
    9cbc:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    9cbe:	4bc3      	ldr	r3, [pc, #780]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9cc0:	681a      	ldr	r2, [r3, #0]
    9cc2:	23ab      	movs	r3, #171	; 0xab
    9cc4:	005b      	lsls	r3, r3, #1
    9cc6:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    9cc8:	1dba      	adds	r2, r7, #6
    9cca:	8812      	ldrh	r2, [r2, #0]
    9ccc:	4013      	ands	r3, r2
    9cce:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    9cd0:	4bbe      	ldr	r3, [pc, #760]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9cd2:	6819      	ldr	r1, [r3, #0]
    9cd4:	23aa      	movs	r3, #170	; 0xaa
    9cd6:	005b      	lsls	r3, r3, #1
    9cd8:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    9cda:	1d3b      	adds	r3, r7, #4
    9cdc:	400a      	ands	r2, r1
    9cde:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    9ce0:	2300      	movs	r3, #0
    9ce2:	60fb      	str	r3, [r7, #12]
    9ce4:	e03a      	b.n	9d5c <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    9ce6:	4bba      	ldr	r3, [pc, #744]	; (9fd0 <_usb_device_interrupt_handler+0x33c>)
    9ce8:	68fa      	ldr	r2, [r7, #12]
    9cea:	0052      	lsls	r2, r2, #1
    9cec:	5ad3      	ldrh	r3, [r2, r3]
    9cee:	1dba      	adds	r2, r7, #6
    9cf0:	8812      	ldrh	r2, [r2, #0]
    9cf2:	4013      	ands	r3, r2
    9cf4:	b29b      	uxth	r3, r3
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d007      	beq.n	9d0a <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    9cfa:	4bb4      	ldr	r3, [pc, #720]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    9d00:	4ab3      	ldr	r2, [pc, #716]	; (9fd0 <_usb_device_interrupt_handler+0x33c>)
    9d02:	68f9      	ldr	r1, [r7, #12]
    9d04:	0049      	lsls	r1, r1, #1
    9d06:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    9d08:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    9d0a:	4bb1      	ldr	r3, [pc, #708]	; (9fd0 <_usb_device_interrupt_handler+0x33c>)
    9d0c:	68fa      	ldr	r2, [r7, #12]
    9d0e:	0052      	lsls	r2, r2, #1
    9d10:	5ad3      	ldrh	r3, [r2, r3]
    9d12:	1d3a      	adds	r2, r7, #4
    9d14:	8812      	ldrh	r2, [r2, #0]
    9d16:	4013      	ands	r3, r2
    9d18:	b29b      	uxth	r3, r3
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d01b      	beq.n	9d56 <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    9d1e:	68fb      	ldr	r3, [r7, #12]
    9d20:	2b06      	cmp	r3, #6
    9d22:	d10c      	bne.n	9d3e <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    9d24:	4bab      	ldr	r3, [pc, #684]	; (9fd4 <_usb_device_interrupt_handler+0x340>)
    9d26:	891b      	ldrh	r3, [r3, #8]
    9d28:	b29b      	uxth	r3, r3
    9d2a:	091b      	lsrs	r3, r3, #4
    9d2c:	055b      	lsls	r3, r3, #21
    9d2e:	0d5b      	lsrs	r3, r3, #21
    9d30:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    9d32:	1c1a      	adds	r2, r3, #0
    9d34:	2380      	movs	r3, #128	; 0x80
    9d36:	005b      	lsls	r3, r3, #1
    9d38:	401a      	ands	r2, r3
    9d3a:	4ba7      	ldr	r3, [pc, #668]	; (9fd8 <_usb_device_interrupt_handler+0x344>)
    9d3c:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    9d3e:	4ba3      	ldr	r3, [pc, #652]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9d40:	681b      	ldr	r3, [r3, #0]
    9d42:	68fa      	ldr	r2, [r7, #12]
    9d44:	322e      	adds	r2, #46	; 0x2e
    9d46:	0092      	lsls	r2, r2, #2
    9d48:	58d2      	ldr	r2, [r2, r3]
    9d4a:	4ba0      	ldr	r3, [pc, #640]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9d4c:	6819      	ldr	r1, [r3, #0]
    9d4e:	4ba2      	ldr	r3, [pc, #648]	; (9fd8 <_usb_device_interrupt_handler+0x344>)
    9d50:	1c08      	adds	r0, r1, #0
    9d52:	1c19      	adds	r1, r3, #0
    9d54:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    9d56:	68fb      	ldr	r3, [r7, #12]
    9d58:	3301      	adds	r3, #1
    9d5a:	60fb      	str	r3, [r7, #12]
    9d5c:	68fb      	ldr	r3, [r7, #12]
    9d5e:	2b06      	cmp	r3, #6
    9d60:	ddc1      	ble.n	9ce6 <_usb_device_interrupt_handler+0x52>
    9d62:	e239      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    9d64:	1c3b      	adds	r3, r7, #0
    9d66:	330b      	adds	r3, #11
    9d68:	2200      	movs	r2, #0
    9d6a:	701a      	strb	r2, [r3, #0]
    9d6c:	e22e      	b.n	a1cc <_usb_device_interrupt_handler+0x538>

			if (ep_inst & (1 << i)) {
    9d6e:	1c3b      	adds	r3, r7, #0
    9d70:	3308      	adds	r3, #8
    9d72:	881a      	ldrh	r2, [r3, #0]
    9d74:	1c3b      	adds	r3, r7, #0
    9d76:	330b      	adds	r3, #11
    9d78:	781b      	ldrb	r3, [r3, #0]
    9d7a:	411a      	asrs	r2, r3
    9d7c:	2301      	movs	r3, #1
    9d7e:	4013      	ands	r3, r2
    9d80:	d100      	bne.n	9d84 <_usb_device_interrupt_handler+0xf0>
    9d82:	e21c      	b.n	a1be <_usb_device_interrupt_handler+0x52a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    9d84:	4b91      	ldr	r3, [pc, #580]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9d86:	681b      	ldr	r3, [r3, #0]
    9d88:	681a      	ldr	r2, [r3, #0]
    9d8a:	1c3b      	adds	r3, r7, #0
    9d8c:	330b      	adds	r3, #11
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	3308      	adds	r3, #8
    9d92:	015b      	lsls	r3, r3, #5
    9d94:	18d3      	adds	r3, r2, r3
    9d96:	79db      	ldrb	r3, [r3, #7]
    9d98:	b2da      	uxtb	r2, r3
    9d9a:	1dbb      	adds	r3, r7, #6
    9d9c:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    9d9e:	4b8b      	ldr	r3, [pc, #556]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9da0:	6819      	ldr	r1, [r3, #0]
    9da2:	1c3b      	adds	r3, r7, #0
    9da4:	330b      	adds	r3, #11
    9da6:	781a      	ldrb	r2, [r3, #0]
    9da8:	23b0      	movs	r3, #176	; 0xb0
    9daa:	005b      	lsls	r3, r3, #1
    9dac:	188a      	adds	r2, r1, r2
    9dae:	18d3      	adds	r3, r2, r3
    9db0:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    9db2:	1dba      	adds	r2, r7, #6
    9db4:	8812      	ldrh	r2, [r2, #0]
    9db6:	4013      	ands	r3, r2
    9db8:	b29b      	uxth	r3, r3
    9dba:	b299      	uxth	r1, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    9dbc:	4b83      	ldr	r3, [pc, #524]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9dbe:	6818      	ldr	r0, [r3, #0]
    9dc0:	1c3b      	adds	r3, r7, #0
    9dc2:	330b      	adds	r3, #11
    9dc4:	781a      	ldrb	r2, [r3, #0]
    9dc6:	23ac      	movs	r3, #172	; 0xac
    9dc8:	005b      	lsls	r3, r3, #1
    9dca:	1882      	adds	r2, r0, r2
    9dcc:	18d3      	adds	r3, r2, r3
    9dce:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    9dd0:	1c1a      	adds	r2, r3, #0
    9dd2:	1c0b      	adds	r3, r1, #0
    9dd4:	4013      	ands	r3, r2
    9dd6:	b29a      	uxth	r2, r3
    9dd8:	1d3b      	adds	r3, r7, #4
    9dda:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9ddc:	1dbb      	adds	r3, r7, #6
    9dde:	881a      	ldrh	r2, [r3, #0]
    9de0:	2360      	movs	r3, #96	; 0x60
    9de2:	4013      	ands	r3, r2
    9de4:	d059      	beq.n	9e9a <_usb_device_interrupt_handler+0x206>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    9de6:	4b79      	ldr	r3, [pc, #484]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9de8:	681b      	ldr	r3, [r3, #0]
    9dea:	681a      	ldr	r2, [r3, #0]
    9dec:	1c3b      	adds	r3, r7, #0
    9dee:	330b      	adds	r3, #11
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	3308      	adds	r3, #8
    9df4:	015b      	lsls	r3, r3, #5
    9df6:	18d3      	adds	r3, r2, r3
    9df8:	79db      	ldrb	r3, [r3, #7]
    9dfa:	b2db      	uxtb	r3, r3
    9dfc:	1c1a      	adds	r2, r3, #0
    9dfe:	2340      	movs	r3, #64	; 0x40
    9e00:	4013      	ands	r3, r2
    9e02:	d014      	beq.n	9e2e <_usb_device_interrupt_handler+0x19a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9e04:	4b71      	ldr	r3, [pc, #452]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9e06:	681b      	ldr	r3, [r3, #0]
    9e08:	681a      	ldr	r2, [r3, #0]
    9e0a:	1c3b      	adds	r3, r7, #0
    9e0c:	330b      	adds	r3, #11
    9e0e:	781b      	ldrb	r3, [r3, #0]
    9e10:	3308      	adds	r3, #8
    9e12:	015b      	lsls	r3, r3, #5
    9e14:	18d3      	adds	r3, r2, r3
    9e16:	2240      	movs	r2, #64	; 0x40
    9e18:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9e1a:	1c3b      	adds	r3, r7, #0
    9e1c:	330b      	adds	r3, #11
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	2280      	movs	r2, #128	; 0x80
    9e22:	4252      	negs	r2, r2
    9e24:	4313      	orrs	r3, r2
    9e26:	b2da      	uxtb	r2, r3
    9e28:	4b6c      	ldr	r3, [pc, #432]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9e2a:	719a      	strb	r2, [r3, #6]
    9e2c:	e01e      	b.n	9e6c <_usb_device_interrupt_handler+0x1d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9e2e:	4b67      	ldr	r3, [pc, #412]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9e30:	681b      	ldr	r3, [r3, #0]
    9e32:	681a      	ldr	r2, [r3, #0]
    9e34:	1c3b      	adds	r3, r7, #0
    9e36:	330b      	adds	r3, #11
    9e38:	781b      	ldrb	r3, [r3, #0]
    9e3a:	3308      	adds	r3, #8
    9e3c:	015b      	lsls	r3, r3, #5
    9e3e:	18d3      	adds	r3, r2, r3
    9e40:	79db      	ldrb	r3, [r3, #7]
    9e42:	b2db      	uxtb	r3, r3
    9e44:	1c1a      	adds	r2, r3, #0
    9e46:	2320      	movs	r3, #32
    9e48:	4013      	ands	r3, r2
    9e4a:	d00f      	beq.n	9e6c <_usb_device_interrupt_handler+0x1d8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9e4c:	4b5f      	ldr	r3, [pc, #380]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9e4e:	681b      	ldr	r3, [r3, #0]
    9e50:	681a      	ldr	r2, [r3, #0]
    9e52:	1c3b      	adds	r3, r7, #0
    9e54:	330b      	adds	r3, #11
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	3308      	adds	r3, #8
    9e5a:	015b      	lsls	r3, r3, #5
    9e5c:	18d3      	adds	r3, r2, r3
    9e5e:	2220      	movs	r2, #32
    9e60:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9e62:	4b5e      	ldr	r3, [pc, #376]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9e64:	1c3a      	adds	r2, r7, #0
    9e66:	320b      	adds	r2, #11
    9e68:	7812      	ldrb	r2, [r2, #0]
    9e6a:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9e6c:	1d3b      	adds	r3, r7, #4
    9e6e:	881a      	ldrh	r2, [r3, #0]
    9e70:	2360      	movs	r3, #96	; 0x60
    9e72:	4013      	ands	r3, r2
    9e74:	d010      	beq.n	9e98 <_usb_device_interrupt_handler+0x204>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    9e76:	4b55      	ldr	r3, [pc, #340]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9e78:	6819      	ldr	r1, [r3, #0]
    9e7a:	1c3b      	adds	r3, r7, #0
    9e7c:	330b      	adds	r3, #11
    9e7e:	781a      	ldrb	r2, [r3, #0]
    9e80:	23dc      	movs	r3, #220	; 0xdc
    9e82:	0112      	lsls	r2, r2, #4
    9e84:	188a      	adds	r2, r1, r2
    9e86:	18d3      	adds	r3, r2, r3
    9e88:	685a      	ldr	r2, [r3, #4]
    9e8a:	4b50      	ldr	r3, [pc, #320]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9e8c:	6819      	ldr	r1, [r3, #0]
    9e8e:	4b53      	ldr	r3, [pc, #332]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9e90:	1c08      	adds	r0, r1, #0
    9e92:	1c19      	adds	r1, r3, #0
    9e94:	4790      	blx	r2
					}
					return;
    9e96:	e19f      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
    9e98:	e19e      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9e9a:	1dbb      	adds	r3, r7, #6
    9e9c:	881a      	ldrh	r2, [r3, #0]
    9e9e:	2310      	movs	r3, #16
    9ea0:	4013      	ands	r3, r2
    9ea2:	d038      	beq.n	9f16 <_usb_device_interrupt_handler+0x282>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    9ea4:	4b49      	ldr	r3, [pc, #292]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9ea6:	681b      	ldr	r3, [r3, #0]
    9ea8:	681a      	ldr	r2, [r3, #0]
    9eaa:	1c3b      	adds	r3, r7, #0
    9eac:	330b      	adds	r3, #11
    9eae:	781b      	ldrb	r3, [r3, #0]
    9eb0:	3308      	adds	r3, #8
    9eb2:	015b      	lsls	r3, r3, #5
    9eb4:	18d3      	adds	r3, r2, r3
    9eb6:	2210      	movs	r2, #16
    9eb8:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    9eba:	4b44      	ldr	r3, [pc, #272]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9ebc:	6819      	ldr	r1, [r3, #0]
    9ebe:	1c3b      	adds	r3, r7, #0
    9ec0:	330b      	adds	r3, #11
    9ec2:	781a      	ldrb	r2, [r3, #0]
    9ec4:	23b0      	movs	r3, #176	; 0xb0
    9ec6:	005b      	lsls	r3, r3, #1
    9ec8:	188a      	adds	r2, r1, r2
    9eca:	18d3      	adds	r3, r2, r3
    9ecc:	781b      	ldrb	r3, [r3, #0]
    9ece:	2210      	movs	r2, #16
    9ed0:	4013      	ands	r3, r2
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d01d      	beq.n	9f14 <_usb_device_interrupt_handler+0x280>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9ed8:	1c3b      	adds	r3, r7, #0
    9eda:	330b      	adds	r3, #11
    9edc:	781b      	ldrb	r3, [r3, #0]
    9ede:	4a3d      	ldr	r2, [pc, #244]	; (9fd4 <_usb_device_interrupt_handler+0x340>)
    9ee0:	015b      	lsls	r3, r3, #5
    9ee2:	18d3      	adds	r3, r2, r3
    9ee4:	685b      	ldr	r3, [r3, #4]
    9ee6:	049b      	lsls	r3, r3, #18
    9ee8:	0c9b      	lsrs	r3, r3, #18
    9eea:	b29b      	uxth	r3, r3
    9eec:	1c1a      	adds	r2, r3, #0
    9eee:	4b3b      	ldr	r3, [pc, #236]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9ef0:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    9ef2:	4b36      	ldr	r3, [pc, #216]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9ef4:	6819      	ldr	r1, [r3, #0]
    9ef6:	1c3b      	adds	r3, r7, #0
    9ef8:	330b      	adds	r3, #11
    9efa:	781a      	ldrb	r2, [r3, #0]
    9efc:	23d8      	movs	r3, #216	; 0xd8
    9efe:	0112      	lsls	r2, r2, #4
    9f00:	188a      	adds	r2, r1, r2
    9f02:	18d3      	adds	r3, r2, r3
    9f04:	685a      	ldr	r2, [r3, #4]
    9f06:	4b31      	ldr	r3, [pc, #196]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9f08:	6819      	ldr	r1, [r3, #0]
    9f0a:	4b34      	ldr	r3, [pc, #208]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9f0c:	1c08      	adds	r0, r1, #0
    9f0e:	1c19      	adds	r1, r3, #0
    9f10:	4790      	blx	r2
					}
					return;
    9f12:	e161      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
    9f14:	e160      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9f16:	1dbb      	adds	r3, r7, #6
    9f18:	881a      	ldrh	r2, [r3, #0]
    9f1a:	230c      	movs	r3, #12
    9f1c:	4013      	ands	r3, r2
    9f1e:	d100      	bne.n	9f22 <_usb_device_interrupt_handler+0x28e>
    9f20:	e0c5      	b.n	a0ae <_usb_device_interrupt_handler+0x41a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9f22:	4b2a      	ldr	r3, [pc, #168]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	681a      	ldr	r2, [r3, #0]
    9f28:	1c3b      	adds	r3, r7, #0
    9f2a:	330b      	adds	r3, #11
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	3308      	adds	r3, #8
    9f30:	015b      	lsls	r3, r3, #5
    9f32:	18d3      	adds	r3, r2, r3
    9f34:	79db      	ldrb	r3, [r3, #7]
    9f36:	b2db      	uxtb	r3, r3
    9f38:	1c1a      	adds	r2, r3, #0
    9f3a:	2308      	movs	r3, #8
    9f3c:	4013      	ands	r3, r2
    9f3e:	d04f      	beq.n	9fe0 <_usb_device_interrupt_handler+0x34c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    9f40:	4b22      	ldr	r3, [pc, #136]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9f42:	681b      	ldr	r3, [r3, #0]
    9f44:	681a      	ldr	r2, [r3, #0]
    9f46:	1c3b      	adds	r3, r7, #0
    9f48:	330b      	adds	r3, #11
    9f4a:	781b      	ldrb	r3, [r3, #0]
    9f4c:	3308      	adds	r3, #8
    9f4e:	015b      	lsls	r3, r3, #5
    9f50:	18d3      	adds	r3, r2, r3
    9f52:	2208      	movs	r2, #8
    9f54:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    9f56:	1c3b      	adds	r3, r7, #0
    9f58:	330b      	adds	r3, #11
    9f5a:	781b      	ldrb	r3, [r3, #0]
    9f5c:	4a1d      	ldr	r2, [pc, #116]	; (9fd4 <_usb_device_interrupt_handler+0x340>)
    9f5e:	015b      	lsls	r3, r3, #5
    9f60:	18d3      	adds	r3, r2, r3
    9f62:	3318      	adds	r3, #24
    9f64:	789b      	ldrb	r3, [r3, #2]
    9f66:	b2db      	uxtb	r3, r3
    9f68:	1c1a      	adds	r2, r3, #0
    9f6a:	2302      	movs	r3, #2
    9f6c:	4013      	ands	r3, r2
    9f6e:	d013      	beq.n	9f98 <_usb_device_interrupt_handler+0x304>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9f70:	1c3b      	adds	r3, r7, #0
    9f72:	330b      	adds	r3, #11
    9f74:	781b      	ldrb	r3, [r3, #0]
    9f76:	1c3a      	adds	r2, r7, #0
    9f78:	320b      	adds	r2, #11
    9f7a:	7812      	ldrb	r2, [r2, #0]
    9f7c:	4915      	ldr	r1, [pc, #84]	; (9fd4 <_usb_device_interrupt_handler+0x340>)
    9f7e:	0152      	lsls	r2, r2, #5
    9f80:	188a      	adds	r2, r1, r2
    9f82:	3218      	adds	r2, #24
    9f84:	7892      	ldrb	r2, [r2, #2]
    9f86:	b2d2      	uxtb	r2, r2
    9f88:	2102      	movs	r1, #2
    9f8a:	438a      	bics	r2, r1
    9f8c:	b2d2      	uxtb	r2, r2
    9f8e:	4911      	ldr	r1, [pc, #68]	; (9fd4 <_usb_device_interrupt_handler+0x340>)
    9f90:	015b      	lsls	r3, r3, #5
    9f92:	18cb      	adds	r3, r1, r3
    9f94:	3318      	adds	r3, #24
    9f96:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9f98:	1c3b      	adds	r3, r7, #0
    9f9a:	330b      	adds	r3, #11
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	2280      	movs	r2, #128	; 0x80
    9fa0:	4252      	negs	r2, r2
    9fa2:	4313      	orrs	r3, r2
    9fa4:	b2da      	uxtb	r2, r3
    9fa6:	4b0d      	ldr	r3, [pc, #52]	; (9fdc <_usb_device_interrupt_handler+0x348>)
    9fa8:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9faa:	4b08      	ldr	r3, [pc, #32]	; (9fcc <_usb_device_interrupt_handler+0x338>)
    9fac:	681b      	ldr	r3, [r3, #0]
    9fae:	681a      	ldr	r2, [r3, #0]
    9fb0:	1c3b      	adds	r3, r7, #0
    9fb2:	330b      	adds	r3, #11
    9fb4:	781b      	ldrb	r3, [r3, #0]
    9fb6:	3308      	adds	r3, #8
    9fb8:	015b      	lsls	r3, r3, #5
    9fba:	18d3      	adds	r3, r2, r3
    9fbc:	79db      	ldrb	r3, [r3, #7]
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	1c1a      	adds	r2, r3, #0
    9fc2:	2302      	movs	r3, #2
    9fc4:	4013      	ands	r3, r2
    9fc6:	d05b      	beq.n	a080 <_usb_device_interrupt_handler+0x3ec>
							return;
    9fc8:	e106      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
    9fca:	46c0      	nop			; (mov r8, r8)
    9fcc:	20007108 	.word	0x20007108
    9fd0:	0000b5b8 	.word	0x0000b5b8
    9fd4:	20007388 	.word	0x20007388
    9fd8:	20007114 	.word	0x20007114
    9fdc:	20007118 	.word	0x20007118
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9fe0:	4b7f      	ldr	r3, [pc, #508]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    9fe2:	681b      	ldr	r3, [r3, #0]
    9fe4:	681a      	ldr	r2, [r3, #0]
    9fe6:	1c3b      	adds	r3, r7, #0
    9fe8:	330b      	adds	r3, #11
    9fea:	781b      	ldrb	r3, [r3, #0]
    9fec:	3308      	adds	r3, #8
    9fee:	015b      	lsls	r3, r3, #5
    9ff0:	18d3      	adds	r3, r2, r3
    9ff2:	79db      	ldrb	r3, [r3, #7]
    9ff4:	b2db      	uxtb	r3, r3
    9ff6:	1c1a      	adds	r2, r3, #0
    9ff8:	2304      	movs	r3, #4
    9ffa:	4013      	ands	r3, r2
    9ffc:	d040      	beq.n	a080 <_usb_device_interrupt_handler+0x3ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    9ffe:	4b78      	ldr	r3, [pc, #480]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a000:	681b      	ldr	r3, [r3, #0]
    a002:	681a      	ldr	r2, [r3, #0]
    a004:	1c3b      	adds	r3, r7, #0
    a006:	330b      	adds	r3, #11
    a008:	781b      	ldrb	r3, [r3, #0]
    a00a:	3308      	adds	r3, #8
    a00c:	015b      	lsls	r3, r3, #5
    a00e:	18d3      	adds	r3, r2, r3
    a010:	2204      	movs	r2, #4
    a012:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    a014:	1c3b      	adds	r3, r7, #0
    a016:	330b      	adds	r3, #11
    a018:	781b      	ldrb	r3, [r3, #0]
    a01a:	4a72      	ldr	r2, [pc, #456]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a01c:	015b      	lsls	r3, r3, #5
    a01e:	18d3      	adds	r3, r2, r3
    a020:	3308      	adds	r3, #8
    a022:	789b      	ldrb	r3, [r3, #2]
    a024:	b2db      	uxtb	r3, r3
    a026:	1c1a      	adds	r2, r3, #0
    a028:	2302      	movs	r3, #2
    a02a:	4013      	ands	r3, r2
    a02c:	d013      	beq.n	a056 <_usb_device_interrupt_handler+0x3c2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    a02e:	1c3b      	adds	r3, r7, #0
    a030:	330b      	adds	r3, #11
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	1c3a      	adds	r2, r7, #0
    a036:	320b      	adds	r2, #11
    a038:	7812      	ldrb	r2, [r2, #0]
    a03a:	496a      	ldr	r1, [pc, #424]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a03c:	0152      	lsls	r2, r2, #5
    a03e:	188a      	adds	r2, r1, r2
    a040:	3208      	adds	r2, #8
    a042:	7892      	ldrb	r2, [r2, #2]
    a044:	b2d2      	uxtb	r2, r2
    a046:	2102      	movs	r1, #2
    a048:	438a      	bics	r2, r1
    a04a:	b2d2      	uxtb	r2, r2
    a04c:	4965      	ldr	r1, [pc, #404]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a04e:	015b      	lsls	r3, r3, #5
    a050:	18cb      	adds	r3, r1, r3
    a052:	3308      	adds	r3, #8
    a054:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    a056:	4b64      	ldr	r3, [pc, #400]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a058:	1c3a      	adds	r2, r7, #0
    a05a:	320b      	adds	r2, #11
    a05c:	7812      	ldrb	r2, [r2, #0]
    a05e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a060:	4b5f      	ldr	r3, [pc, #380]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a062:	681b      	ldr	r3, [r3, #0]
    a064:	681a      	ldr	r2, [r3, #0]
    a066:	1c3b      	adds	r3, r7, #0
    a068:	330b      	adds	r3, #11
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	3308      	adds	r3, #8
    a06e:	015b      	lsls	r3, r3, #5
    a070:	18d3      	adds	r3, r2, r3
    a072:	79db      	ldrb	r3, [r3, #7]
    a074:	b2db      	uxtb	r3, r3
    a076:	1c1a      	adds	r2, r3, #0
    a078:	2301      	movs	r3, #1
    a07a:	4013      	ands	r3, r2
    a07c:	d000      	beq.n	a080 <_usb_device_interrupt_handler+0x3ec>
							return;
    a07e:	e0ab      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    a080:	1d3b      	adds	r3, r7, #4
    a082:	881a      	ldrh	r2, [r3, #0]
    a084:	230c      	movs	r3, #12
    a086:	4013      	ands	r3, r2
    a088:	d010      	beq.n	a0ac <_usb_device_interrupt_handler+0x418>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    a08a:	4b55      	ldr	r3, [pc, #340]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a08c:	6819      	ldr	r1, [r3, #0]
    a08e:	1c3b      	adds	r3, r7, #0
    a090:	330b      	adds	r3, #11
    a092:	781a      	ldrb	r2, [r3, #0]
    a094:	23d4      	movs	r3, #212	; 0xd4
    a096:	0112      	lsls	r2, r2, #4
    a098:	188a      	adds	r2, r1, r2
    a09a:	18d3      	adds	r3, r2, r3
    a09c:	685a      	ldr	r2, [r3, #4]
    a09e:	4b50      	ldr	r3, [pc, #320]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a0a0:	6819      	ldr	r1, [r3, #0]
    a0a2:	4b51      	ldr	r3, [pc, #324]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a0a4:	1c08      	adds	r0, r1, #0
    a0a6:	1c19      	adds	r1, r3, #0
    a0a8:	4790      	blx	r2
					}
					return;
    a0aa:	e095      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
    a0ac:	e094      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    a0ae:	1dbb      	adds	r3, r7, #6
    a0b0:	881a      	ldrh	r2, [r3, #0]
    a0b2:	2303      	movs	r3, #3
    a0b4:	4013      	ands	r3, r2
    a0b6:	d100      	bne.n	a0ba <_usb_device_interrupt_handler+0x426>
    a0b8:	e081      	b.n	a1be <_usb_device_interrupt_handler+0x52a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a0ba:	4b49      	ldr	r3, [pc, #292]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a0bc:	681b      	ldr	r3, [r3, #0]
    a0be:	681a      	ldr	r2, [r3, #0]
    a0c0:	1c3b      	adds	r3, r7, #0
    a0c2:	330b      	adds	r3, #11
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	3308      	adds	r3, #8
    a0c8:	015b      	lsls	r3, r3, #5
    a0ca:	18d3      	adds	r3, r2, r3
    a0cc:	79db      	ldrb	r3, [r3, #7]
    a0ce:	b2db      	uxtb	r3, r3
    a0d0:	1c1a      	adds	r2, r3, #0
    a0d2:	2302      	movs	r3, #2
    a0d4:	4013      	ands	r3, r2
    a0d6:	d022      	beq.n	a11e <_usb_device_interrupt_handler+0x48a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    a0d8:	4b41      	ldr	r3, [pc, #260]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a0da:	681b      	ldr	r3, [r3, #0]
    a0dc:	681a      	ldr	r2, [r3, #0]
    a0de:	1c3b      	adds	r3, r7, #0
    a0e0:	330b      	adds	r3, #11
    a0e2:	781b      	ldrb	r3, [r3, #0]
    a0e4:	3308      	adds	r3, #8
    a0e6:	015b      	lsls	r3, r3, #5
    a0e8:	18d3      	adds	r3, r2, r3
    a0ea:	2202      	movs	r2, #2
    a0ec:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    a0ee:	1c3b      	adds	r3, r7, #0
    a0f0:	330b      	adds	r3, #11
    a0f2:	781b      	ldrb	r3, [r3, #0]
    a0f4:	2280      	movs	r2, #128	; 0x80
    a0f6:	4252      	negs	r2, r2
    a0f8:	4313      	orrs	r3, r2
    a0fa:	b2da      	uxtb	r2, r3
    a0fc:	4b3a      	ldr	r3, [pc, #232]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a0fe:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    a100:	1c3b      	adds	r3, r7, #0
    a102:	330b      	adds	r3, #11
    a104:	781b      	ldrb	r3, [r3, #0]
    a106:	4a37      	ldr	r2, [pc, #220]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a108:	015b      	lsls	r3, r3, #5
    a10a:	18d3      	adds	r3, r2, r3
    a10c:	3310      	adds	r3, #16
    a10e:	685b      	ldr	r3, [r3, #4]
    a110:	049b      	lsls	r3, r3, #18
    a112:	0c9b      	lsrs	r3, r3, #18
    a114:	b29b      	uxth	r3, r3
    a116:	1c1a      	adds	r2, r3, #0
    a118:	4b33      	ldr	r3, [pc, #204]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a11a:	805a      	strh	r2, [r3, #2]
    a11c:	e039      	b.n	a192 <_usb_device_interrupt_handler+0x4fe>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a11e:	4b30      	ldr	r3, [pc, #192]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a120:	681b      	ldr	r3, [r3, #0]
    a122:	681a      	ldr	r2, [r3, #0]
    a124:	1c3b      	adds	r3, r7, #0
    a126:	330b      	adds	r3, #11
    a128:	781b      	ldrb	r3, [r3, #0]
    a12a:	3308      	adds	r3, #8
    a12c:	015b      	lsls	r3, r3, #5
    a12e:	18d3      	adds	r3, r2, r3
    a130:	79db      	ldrb	r3, [r3, #7]
    a132:	b2db      	uxtb	r3, r3
    a134:	1c1a      	adds	r2, r3, #0
    a136:	2301      	movs	r3, #1
    a138:	4013      	ands	r3, r2
    a13a:	d02a      	beq.n	a192 <_usb_device_interrupt_handler+0x4fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    a13c:	4b28      	ldr	r3, [pc, #160]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a13e:	681b      	ldr	r3, [r3, #0]
    a140:	681a      	ldr	r2, [r3, #0]
    a142:	1c3b      	adds	r3, r7, #0
    a144:	330b      	adds	r3, #11
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	3308      	adds	r3, #8
    a14a:	015b      	lsls	r3, r3, #5
    a14c:	18d3      	adds	r3, r2, r3
    a14e:	2201      	movs	r2, #1
    a150:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    a152:	4b25      	ldr	r3, [pc, #148]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a154:	1c3a      	adds	r2, r7, #0
    a156:	320b      	adds	r2, #11
    a158:	7812      	ldrb	r2, [r2, #0]
    a15a:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    a15c:	1c3b      	adds	r3, r7, #0
    a15e:	330b      	adds	r3, #11
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	4a20      	ldr	r2, [pc, #128]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a164:	015b      	lsls	r3, r3, #5
    a166:	18d3      	adds	r3, r2, r3
    a168:	685b      	ldr	r3, [r3, #4]
    a16a:	049b      	lsls	r3, r3, #18
    a16c:	0c9b      	lsrs	r3, r3, #18
    a16e:	b29b      	uxth	r3, r3
    a170:	1c1a      	adds	r2, r3, #0
    a172:	4b1d      	ldr	r3, [pc, #116]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a174:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    a176:	1c3b      	adds	r3, r7, #0
    a178:	330b      	adds	r3, #11
    a17a:	781b      	ldrb	r3, [r3, #0]
    a17c:	4a19      	ldr	r2, [pc, #100]	; (a1e4 <_usb_device_interrupt_handler+0x550>)
    a17e:	015b      	lsls	r3, r3, #5
    a180:	18d3      	adds	r3, r2, r3
    a182:	685b      	ldr	r3, [r3, #4]
    a184:	0b9b      	lsrs	r3, r3, #14
    a186:	049b      	lsls	r3, r3, #18
    a188:	0c9b      	lsrs	r3, r3, #18
    a18a:	b29b      	uxth	r3, r3
    a18c:	1c1a      	adds	r2, r3, #0
    a18e:	4b16      	ldr	r3, [pc, #88]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a190:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    a192:	1d3b      	adds	r3, r7, #4
    a194:	881a      	ldrh	r2, [r3, #0]
    a196:	2303      	movs	r3, #3
    a198:	4013      	ands	r3, r2
    a19a:	d00f      	beq.n	a1bc <_usb_device_interrupt_handler+0x528>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    a19c:	4b10      	ldr	r3, [pc, #64]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a19e:	681a      	ldr	r2, [r3, #0]
    a1a0:	1c3b      	adds	r3, r7, #0
    a1a2:	330b      	adds	r3, #11
    a1a4:	781b      	ldrb	r3, [r3, #0]
    a1a6:	330d      	adds	r3, #13
    a1a8:	011b      	lsls	r3, r3, #4
    a1aa:	18d3      	adds	r3, r2, r3
    a1ac:	685a      	ldr	r2, [r3, #4]
    a1ae:	4b0c      	ldr	r3, [pc, #48]	; (a1e0 <_usb_device_interrupt_handler+0x54c>)
    a1b0:	6819      	ldr	r1, [r3, #0]
    a1b2:	4b0d      	ldr	r3, [pc, #52]	; (a1e8 <_usb_device_interrupt_handler+0x554>)
    a1b4:	1c08      	adds	r0, r1, #0
    a1b6:	1c19      	adds	r1, r3, #0
    a1b8:	4790      	blx	r2
					}
					return;
    a1ba:	e00d      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
    a1bc:	e00c      	b.n	a1d8 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    a1be:	1c3b      	adds	r3, r7, #0
    a1c0:	330b      	adds	r3, #11
    a1c2:	781a      	ldrb	r2, [r3, #0]
    a1c4:	1c3b      	adds	r3, r7, #0
    a1c6:	330b      	adds	r3, #11
    a1c8:	3201      	adds	r2, #1
    a1ca:	701a      	strb	r2, [r3, #0]
    a1cc:	1c3b      	adds	r3, r7, #0
    a1ce:	330b      	adds	r3, #11
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	2b07      	cmp	r3, #7
    a1d4:	d800      	bhi.n	a1d8 <_usb_device_interrupt_handler+0x544>
    a1d6:	e5ca      	b.n	9d6e <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    a1d8:	46bd      	mov	sp, r7
    a1da:	b004      	add	sp, #16
    a1dc:	bd80      	pop	{r7, pc}
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	20007108 	.word	0x20007108
    a1e4:	20007388 	.word	0x20007388
    a1e8:	20007118 	.word	0x20007118

0000a1ec <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    a1ec:	b580      	push	{r7, lr}
    a1ee:	b082      	sub	sp, #8
    a1f0:	af00      	add	r7, sp, #0
    a1f2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	681a      	ldr	r2, [r3, #0]
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	681b      	ldr	r3, [r3, #0]
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	b2db      	uxtb	r3, r3
    a200:	2102      	movs	r1, #2
    a202:	430b      	orrs	r3, r1
    a204:	b2db      	uxtb	r3, r3
    a206:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    a208:	46c0      	nop			; (mov r8, r8)
    a20a:	687b      	ldr	r3, [r7, #4]
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	789b      	ldrb	r3, [r3, #2]
    a210:	b2db      	uxtb	r3, r3
    a212:	2b02      	cmp	r3, #2
    a214:	d0f9      	beq.n	a20a <usb_enable+0x1e>
}
    a216:	46bd      	mov	sp, r7
    a218:	b002      	add	sp, #8
    a21a:	bd80      	pop	{r7, pc}

0000a21c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    a21c:	b580      	push	{r7, lr}
    a21e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    a220:	4b07      	ldr	r3, [pc, #28]	; (a240 <USB_Handler+0x24>)
    a222:	681b      	ldr	r3, [r3, #0]
    a224:	681b      	ldr	r3, [r3, #0]
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	b2db      	uxtb	r3, r3
    a22a:	09db      	lsrs	r3, r3, #7
    a22c:	b2db      	uxtb	r3, r3
    a22e:	2b00      	cmp	r3, #0
    a230:	d002      	beq.n	a238 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    a232:	4b04      	ldr	r3, [pc, #16]	; (a244 <USB_Handler+0x28>)
    a234:	4798      	blx	r3
    a236:	e001      	b.n	a23c <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    a238:	4b03      	ldr	r3, [pc, #12]	; (a248 <USB_Handler+0x2c>)
    a23a:	4798      	blx	r3
	}
}
    a23c:	46bd      	mov	sp, r7
    a23e:	bd80      	pop	{r7, pc}
    a240:	20007108 	.word	0x20007108
    a244:	00008931 	.word	0x00008931
    a248:	00009c95 	.word	0x00009c95

0000a24c <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    a24c:	b580      	push	{r7, lr}
    a24e:	b082      	sub	sp, #8
    a250:	af00      	add	r7, sp, #0
    a252:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    a254:	687b      	ldr	r3, [r7, #4]
    a256:	2200      	movs	r2, #0
    a258:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    a25a:	687b      	ldr	r3, [r7, #4]
    a25c:	2201      	movs	r2, #1
    a25e:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    a260:	687b      	ldr	r3, [r7, #4]
    a262:	2200      	movs	r2, #0
    a264:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    a266:	687b      	ldr	r3, [r7, #4]
    a268:	2201      	movs	r2, #1
    a26a:	70da      	strb	r2, [r3, #3]
}
    a26c:	46bd      	mov	sp, r7
    a26e:	b002      	add	sp, #8
    a270:	bd80      	pop	{r7, pc}
    a272:	46c0      	nop			; (mov r8, r8)

0000a274 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    a274:	b580      	push	{r7, lr}
    a276:	b08c      	sub	sp, #48	; 0x30
    a278:	af00      	add	r7, sp, #0
    a27a:	60f8      	str	r0, [r7, #12]
    a27c:	60b9      	str	r1, [r7, #8]
    a27e:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    a280:	4bbb      	ldr	r3, [pc, #748]	; (a570 <usb_init+0x2fc>)
    a282:	2200      	movs	r2, #0
    a284:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    a286:	4bbb      	ldr	r3, [pc, #748]	; (a574 <usb_init+0x300>)
    a288:	68fa      	ldr	r2, [r7, #12]
    a28a:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    a28c:	68fb      	ldr	r3, [r7, #12]
    a28e:	68ba      	ldr	r2, [r7, #8]
    a290:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    a292:	2001      	movs	r0, #1
    a294:	2120      	movs	r1, #32
    a296:	4bb8      	ldr	r3, [pc, #736]	; (a578 <usb_init+0x304>)
    a298:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    a29a:	1c3b      	adds	r3, r7, #0
    a29c:	3318      	adds	r3, #24
    a29e:	1c18      	adds	r0, r3, #0
    a2a0:	4bb6      	ldr	r3, [pc, #728]	; (a57c <usb_init+0x308>)
    a2a2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    a2a4:	1c3b      	adds	r3, r7, #0
    a2a6:	3318      	adds	r3, #24
    a2a8:	2206      	movs	r2, #6
    a2aa:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    a2ac:	1c3b      	adds	r3, r7, #0
    a2ae:	3318      	adds	r3, #24
    a2b0:	2018      	movs	r0, #24
    a2b2:	1c19      	adds	r1, r3, #0
    a2b4:	4bb2      	ldr	r3, [pc, #712]	; (a580 <usb_init+0x30c>)
    a2b6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    a2b8:	1c3b      	adds	r3, r7, #0
    a2ba:	3318      	adds	r3, #24
    a2bc:	2206      	movs	r2, #6
    a2be:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    a2c0:	1c3b      	adds	r3, r7, #0
    a2c2:	3318      	adds	r3, #24
    a2c4:	2019      	movs	r0, #25
    a2c6:	1c19      	adds	r1, r3, #0
    a2c8:	4bad      	ldr	r3, [pc, #692]	; (a580 <usb_init+0x30c>)
    a2ca:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    a2cc:	1c3b      	adds	r3, r7, #0
    a2ce:	3314      	adds	r3, #20
    a2d0:	1c18      	adds	r0, r3, #0
    a2d2:	4bac      	ldr	r3, [pc, #688]	; (a584 <usb_init+0x310>)
    a2d4:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    a2d6:	687b      	ldr	r3, [r7, #4]
    a2d8:	789a      	ldrb	r2, [r3, #2]
    a2da:	1c3b      	adds	r3, r7, #0
    a2dc:	3314      	adds	r3, #20
    a2de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    a2e0:	1c3b      	adds	r3, r7, #0
    a2e2:	3314      	adds	r3, #20
    a2e4:	2006      	movs	r0, #6
    a2e6:	1c19      	adds	r1, r3, #0
    a2e8:	4ba7      	ldr	r3, [pc, #668]	; (a588 <usb_init+0x314>)
    a2ea:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    a2ec:	2006      	movs	r0, #6
    a2ee:	4ba7      	ldr	r3, [pc, #668]	; (a58c <usb_init+0x318>)
    a2f0:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    a2f2:	68bb      	ldr	r3, [r7, #8]
    a2f4:	781a      	ldrb	r2, [r3, #0]
    a2f6:	2101      	movs	r1, #1
    a2f8:	430a      	orrs	r2, r1
    a2fa:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    a2fc:	46c0      	nop			; (mov r8, r8)
    a2fe:	68bb      	ldr	r3, [r7, #8]
    a300:	789a      	ldrb	r2, [r3, #2]
    a302:	2301      	movs	r3, #1
    a304:	4013      	ands	r3, r2
    a306:	b2db      	uxtb	r3, r3
    a308:	2b00      	cmp	r3, #0
    a30a:	d1f8      	bne.n	a2fe <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a30c:	4ba0      	ldr	r3, [pc, #640]	; (a590 <usb_init+0x31c>)
    a30e:	78da      	ldrb	r2, [r3, #3]
    a310:	2103      	movs	r1, #3
    a312:	438a      	bics	r2, r1
    a314:	2102      	movs	r1, #2
    a316:	430a      	orrs	r2, r1
    a318:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a31a:	4b9d      	ldr	r3, [pc, #628]	; (a590 <usb_init+0x31c>)
    a31c:	78da      	ldrb	r2, [r3, #3]
    a31e:	210c      	movs	r1, #12
    a320:	438a      	bics	r2, r1
    a322:	2108      	movs	r1, #8
    a324:	430a      	orrs	r2, r1
    a326:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a328:	4b9a      	ldr	r3, [pc, #616]	; (a594 <usb_init+0x320>)
    a32a:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    a32c:	0b5a      	lsrs	r2, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a32e:	231f      	movs	r3, #31
    a330:	4013      	ands	r3, r2
    a332:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a336:	2b1f      	cmp	r3, #31
    a338:	d101      	bne.n	a33e <usb_init+0xca>
		pad_transn = 5;
    a33a:	2305      	movs	r3, #5
    a33c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a340:	b2db      	uxtb	r3, r3
    a342:	1c1a      	adds	r2, r3, #0
    a344:	231f      	movs	r3, #31
    a346:	4013      	ands	r3, r2
    a348:	b2d9      	uxtb	r1, r3
    a34a:	68bb      	ldr	r3, [r7, #8]
    a34c:	221f      	movs	r2, #31
    a34e:	400a      	ands	r2, r1
    a350:	0192      	lsls	r2, r2, #6
    a352:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a354:	4990      	ldr	r1, [pc, #576]	; (a598 <usb_init+0x324>)
    a356:	4001      	ands	r1, r0
    a358:	430a      	orrs	r2, r1
    a35a:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a35c:	4b8d      	ldr	r3, [pc, #564]	; (a594 <usb_init+0x320>)
    a35e:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    a360:	0c9a      	lsrs	r2, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a362:	231f      	movs	r3, #31
    a364:	4013      	ands	r3, r2
    a366:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    a368:	6a3b      	ldr	r3, [r7, #32]
    a36a:	2b1f      	cmp	r3, #31
    a36c:	d101      	bne.n	a372 <usb_init+0xfe>
		pad_transp = 29;
    a36e:	231d      	movs	r3, #29
    a370:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    a372:	6a3b      	ldr	r3, [r7, #32]
    a374:	b2db      	uxtb	r3, r3
    a376:	1c1a      	adds	r2, r3, #0
    a378:	231f      	movs	r3, #31
    a37a:	4013      	ands	r3, r2
    a37c:	b2d9      	uxtb	r1, r3
    a37e:	68bb      	ldr	r3, [r7, #8]
    a380:	221f      	movs	r2, #31
    a382:	400a      	ands	r2, r1
    a384:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    a386:	201f      	movs	r0, #31
    a388:	4381      	bics	r1, r0
    a38a:	430a      	orrs	r2, r1
    a38c:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a38e:	4b81      	ldr	r3, [pc, #516]	; (a594 <usb_init+0x320>)
    a390:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    a392:	0dda      	lsrs	r2, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a394:	2307      	movs	r3, #7
    a396:	4013      	ands	r3, r2
    a398:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    a39a:	69fb      	ldr	r3, [r7, #28]
    a39c:	2b07      	cmp	r3, #7
    a39e:	d101      	bne.n	a3a4 <usb_init+0x130>
		pad_trim = 3;
    a3a0:	2303      	movs	r3, #3
    a3a2:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    a3a4:	69fb      	ldr	r3, [r7, #28]
    a3a6:	b2db      	uxtb	r3, r3
    a3a8:	1c1a      	adds	r2, r3, #0
    a3aa:	2307      	movs	r3, #7
    a3ac:	4013      	ands	r3, r2
    a3ae:	b2d9      	uxtb	r1, r3
    a3b0:	68bb      	ldr	r3, [r7, #8]
    a3b2:	2207      	movs	r2, #7
    a3b4:	400a      	ands	r2, r1
    a3b6:	0312      	lsls	r2, r2, #12
    a3b8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a3ba:	4978      	ldr	r1, [pc, #480]	; (a59c <usb_init+0x328>)
    a3bc:	4001      	ands	r1, r0
    a3be:	430a      	orrs	r2, r1
    a3c0:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    a3c2:	687b      	ldr	r3, [r7, #4]
    a3c4:	781a      	ldrb	r2, [r3, #0]
    a3c6:	68bb      	ldr	r3, [r7, #8]
    a3c8:	01d2      	lsls	r2, r2, #7
    a3ca:	7818      	ldrb	r0, [r3, #0]
    a3cc:	217f      	movs	r1, #127	; 0x7f
    a3ce:	4001      	ands	r1, r0
    a3d0:	430a      	orrs	r2, r1
    a3d2:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	7859      	ldrb	r1, [r3, #1]
    a3d8:	68bb      	ldr	r3, [r7, #8]
    a3da:	2201      	movs	r2, #1
    a3dc:	400a      	ands	r2, r1
    a3de:	0092      	lsls	r2, r2, #2
    a3e0:	7819      	ldrb	r1, [r3, #0]
    a3e2:	2004      	movs	r0, #4
    a3e4:	4381      	bics	r1, r0
    a3e6:	430a      	orrs	r2, r1
    a3e8:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    a3ea:	4a6d      	ldr	r2, [pc, #436]	; (a5a0 <usb_init+0x32c>)
    a3ec:	68bb      	ldr	r3, [r7, #8]
    a3ee:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	78db      	ldrb	r3, [r3, #3]
    a3f4:	2b01      	cmp	r3, #1
    a3f6:	d106      	bne.n	a406 <usb_init+0x192>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    a3f8:	68fb      	ldr	r3, [r7, #12]
    a3fa:	681b      	ldr	r3, [r3, #0]
    a3fc:	891a      	ldrh	r2, [r3, #8]
    a3fe:	210c      	movs	r1, #12
    a400:	438a      	bics	r2, r1
    a402:	811a      	strh	r2, [r3, #8]
    a404:	e00b      	b.n	a41e <usb_init+0x1aa>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    a406:	687b      	ldr	r3, [r7, #4]
    a408:	78db      	ldrb	r3, [r3, #3]
    a40a:	2b00      	cmp	r3, #0
    a40c:	d107      	bne.n	a41e <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    a40e:	68fb      	ldr	r3, [r7, #12]
    a410:	681b      	ldr	r3, [r3, #0]
    a412:	891a      	ldrh	r2, [r3, #8]
    a414:	210c      	movs	r1, #12
    a416:	438a      	bics	r2, r1
    a418:	2104      	movs	r1, #4
    a41a:	430a      	orrs	r2, r1
    a41c:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    a41e:	4a60      	ldr	r2, [pc, #384]	; (a5a0 <usb_init+0x32c>)
    a420:	2380      	movs	r3, #128	; 0x80
    a422:	005b      	lsls	r3, r3, #1
    a424:	1c10      	adds	r0, r2, #0
    a426:	2100      	movs	r1, #0
    a428:	1c1a      	adds	r2, r3, #0
    a42a:	4b5e      	ldr	r3, [pc, #376]	; (a5a4 <usb_init+0x330>)
    a42c:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a42e:	2300      	movs	r3, #0
    a430:	62fb      	str	r3, [r7, #44]	; 0x2c
    a432:	e008      	b.n	a446 <usb_init+0x1d2>
		module_inst->host_callback[i] = NULL;
    a434:	68fa      	ldr	r2, [r7, #12]
    a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a438:	009b      	lsls	r3, r3, #2
    a43a:	18d3      	adds	r3, r2, r3
    a43c:	2200      	movs	r2, #0
    a43e:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a442:	3301      	adds	r3, #1
    a444:	62fb      	str	r3, [r7, #44]	; 0x2c
    a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a448:	2b07      	cmp	r3, #7
    a44a:	d9f3      	bls.n	a434 <usb_init+0x1c0>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a44c:	2300      	movs	r3, #0
    a44e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a450:	e015      	b.n	a47e <usb_init+0x20a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a452:	2300      	movs	r3, #0
    a454:	62bb      	str	r3, [r7, #40]	; 0x28
    a456:	e00c      	b.n	a472 <usb_init+0x1fe>
			module_inst->host_pipe_callback[i][j] = NULL;
    a458:	68fa      	ldr	r2, [r7, #12]
    a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a45c:	0099      	lsls	r1, r3, #2
    a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a460:	18cb      	adds	r3, r1, r3
    a462:	3308      	adds	r3, #8
    a464:	009b      	lsls	r3, r3, #2
    a466:	18d3      	adds	r3, r2, r3
    a468:	2200      	movs	r2, #0
    a46a:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a46e:	3301      	adds	r3, #1
    a470:	62bb      	str	r3, [r7, #40]	; 0x28
    a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a474:	2b03      	cmp	r3, #3
    a476:	d9ef      	bls.n	a458 <usb_init+0x1e4>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a47a:	3301      	adds	r3, #1
    a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
    a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a480:	2b07      	cmp	r3, #7
    a482:	d9e6      	bls.n	a452 <usb_init+0x1de>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    a484:	68fa      	ldr	r2, [r7, #12]
    a486:	23a4      	movs	r3, #164	; 0xa4
    a488:	2100      	movs	r1, #0
    a48a:	54d1      	strb	r1, [r2, r3]
	module_inst->host_enabled_callback_mask = 0;
    a48c:	68fa      	ldr	r2, [r7, #12]
    a48e:	23a5      	movs	r3, #165	; 0xa5
    a490:	2100      	movs	r1, #0
    a492:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a494:	2300      	movs	r3, #0
    a496:	62fb      	str	r3, [r7, #44]	; 0x2c
    a498:	e010      	b.n	a4bc <usb_init+0x248>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    a49a:	68f9      	ldr	r1, [r7, #12]
    a49c:	23a0      	movs	r3, #160	; 0xa0
    a49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a4a0:	188a      	adds	r2, r1, r2
    a4a2:	18d3      	adds	r3, r2, r3
    a4a4:	2200      	movs	r2, #0
    a4a6:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    a4a8:	68f9      	ldr	r1, [r7, #12]
    a4aa:	23a8      	movs	r3, #168	; 0xa8
    a4ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a4ae:	188a      	adds	r2, r1, r2
    a4b0:	18d3      	adds	r3, r2, r3
    a4b2:	2200      	movs	r2, #0
    a4b4:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4b8:	3301      	adds	r3, #1
    a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4be:	2b07      	cmp	r3, #7
    a4c0:	d9eb      	bls.n	a49a <usb_init+0x226>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a4c2:	2300      	movs	r3, #0
    a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4c6:	e008      	b.n	a4da <usb_init+0x266>
		module_inst->device_callback[i] = NULL;
    a4c8:	68fb      	ldr	r3, [r7, #12]
    a4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a4cc:	322e      	adds	r2, #46	; 0x2e
    a4ce:	0092      	lsls	r2, r2, #2
    a4d0:	2100      	movs	r1, #0
    a4d2:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4d6:	3301      	adds	r3, #1
    a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4dc:	2b06      	cmp	r3, #6
    a4de:	d9f3      	bls.n	a4c8 <usb_init+0x254>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    a4e0:	2300      	movs	r3, #0
    a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    a4e4:	e015      	b.n	a512 <usb_init+0x29e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    a4e6:	2300      	movs	r3, #0
    a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
    a4ea:	e00c      	b.n	a506 <usb_init+0x292>
			module_inst->device_endpoint_callback[i][j] = NULL;
    a4ec:	68fa      	ldr	r2, [r7, #12]
    a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a4f0:	0099      	lsls	r1, r3, #2
    a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a4f4:	18cb      	adds	r3, r1, r3
    a4f6:	3334      	adds	r3, #52	; 0x34
    a4f8:	009b      	lsls	r3, r3, #2
    a4fa:	18d3      	adds	r3, r2, r3
    a4fc:	2200      	movs	r2, #0
    a4fe:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a502:	3301      	adds	r3, #1
    a504:	62bb      	str	r3, [r7, #40]	; 0x28
    a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a508:	2b03      	cmp	r3, #3
    a50a:	d9ef      	bls.n	a4ec <usb_init+0x278>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a50e:	3301      	adds	r3, #1
    a510:	62fb      	str	r3, [r7, #44]	; 0x2c
    a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a514:	2b07      	cmp	r3, #7
    a516:	d9e6      	bls.n	a4e6 <usb_init+0x272>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    a518:	68fa      	ldr	r2, [r7, #12]
    a51a:	23aa      	movs	r3, #170	; 0xaa
    a51c:	005b      	lsls	r3, r3, #1
    a51e:	2100      	movs	r1, #0
    a520:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    a522:	68fa      	ldr	r2, [r7, #12]
    a524:	23ab      	movs	r3, #171	; 0xab
    a526:	005b      	lsls	r3, r3, #1
    a528:	2100      	movs	r1, #0
    a52a:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    a52c:	2300      	movs	r3, #0
    a52e:	62bb      	str	r3, [r7, #40]	; 0x28
    a530:	e012      	b.n	a558 <usb_init+0x2e4>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    a532:	68f9      	ldr	r1, [r7, #12]
    a534:	23ac      	movs	r3, #172	; 0xac
    a536:	005b      	lsls	r3, r3, #1
    a538:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a53a:	188a      	adds	r2, r1, r2
    a53c:	18d3      	adds	r3, r2, r3
    a53e:	2200      	movs	r2, #0
    a540:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    a542:	68f9      	ldr	r1, [r7, #12]
    a544:	23b0      	movs	r3, #176	; 0xb0
    a546:	005b      	lsls	r3, r3, #1
    a548:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a54a:	188a      	adds	r2, r1, r2
    a54c:	18d3      	adds	r3, r2, r3
    a54e:	2200      	movs	r2, #0
    a550:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a554:	3301      	adds	r3, #1
    a556:	62bb      	str	r3, [r7, #40]	; 0x28
    a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a55a:	2b07      	cmp	r3, #7
    a55c:	d9e9      	bls.n	a532 <usb_init+0x2be>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    a55e:	2007      	movs	r0, #7
    a560:	4b11      	ldr	r3, [pc, #68]	; (a5a8 <usb_init+0x334>)
    a562:	4798      	blx	r3

	return STATUS_OK;
    a564:	2300      	movs	r3, #0
}
    a566:	1c18      	adds	r0, r3, #0
    a568:	46bd      	mov	sp, r7
    a56a:	b00c      	add	sp, #48	; 0x30
    a56c:	bd80      	pop	{r7, pc}
    a56e:	46c0      	nop			; (mov r8, r8)
    a570:	20007120 	.word	0x20007120
    a574:	20007108 	.word	0x20007108
    a578:	00008881 	.word	0x00008881
    a57c:	000088dd 	.word	0x000088dd
    a580:	00006ec1 	.word	0x00006ec1
    a584:	0000886d 	.word	0x0000886d
    a588:	00006bdd 	.word	0x00006bdd
    a58c:	00006c1d 	.word	0x00006c1d
    a590:	41005000 	.word	0x41005000
    a594:	00806024 	.word	0x00806024
    a598:	fffff83f 	.word	0xfffff83f
    a59c:	ffff8fff 	.word	0xffff8fff
    a5a0:	20007388 	.word	0x20007388
    a5a4:	0000b337 	.word	0x0000b337
    a5a8:	00008905 	.word	0x00008905

0000a5ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    a5ac:	b580      	push	{r7, lr}
    a5ae:	b082      	sub	sp, #8
    a5b0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    a5b2:	4b2d      	ldr	r3, [pc, #180]	; (a668 <Reset_Handler+0xbc>)
    a5b4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    a5b6:	4b2d      	ldr	r3, [pc, #180]	; (a66c <Reset_Handler+0xc0>)
    a5b8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    a5ba:	687a      	ldr	r2, [r7, #4]
    a5bc:	683b      	ldr	r3, [r7, #0]
    a5be:	429a      	cmp	r2, r3
    a5c0:	d00c      	beq.n	a5dc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    a5c2:	e007      	b.n	a5d4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    a5c4:	683b      	ldr	r3, [r7, #0]
    a5c6:	1d1a      	adds	r2, r3, #4
    a5c8:	603a      	str	r2, [r7, #0]
    a5ca:	687a      	ldr	r2, [r7, #4]
    a5cc:	1d11      	adds	r1, r2, #4
    a5ce:	6079      	str	r1, [r7, #4]
    a5d0:	6812      	ldr	r2, [r2, #0]
    a5d2:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    a5d4:	683a      	ldr	r2, [r7, #0]
    a5d6:	4b26      	ldr	r3, [pc, #152]	; (a670 <Reset_Handler+0xc4>)
    a5d8:	429a      	cmp	r2, r3
    a5da:	d3f3      	bcc.n	a5c4 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a5dc:	4b25      	ldr	r3, [pc, #148]	; (a674 <Reset_Handler+0xc8>)
    a5de:	603b      	str	r3, [r7, #0]
    a5e0:	e004      	b.n	a5ec <Reset_Handler+0x40>
                *pDest++ = 0;
    a5e2:	683b      	ldr	r3, [r7, #0]
    a5e4:	1d1a      	adds	r2, r3, #4
    a5e6:	603a      	str	r2, [r7, #0]
    a5e8:	2200      	movs	r2, #0
    a5ea:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a5ec:	683a      	ldr	r2, [r7, #0]
    a5ee:	4b22      	ldr	r3, [pc, #136]	; (a678 <Reset_Handler+0xcc>)
    a5f0:	429a      	cmp	r2, r3
    a5f2:	d3f6      	bcc.n	a5e2 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    a5f4:	4b21      	ldr	r3, [pc, #132]	; (a67c <Reset_Handler+0xd0>)
    a5f6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    a5f8:	4b21      	ldr	r3, [pc, #132]	; (a680 <Reset_Handler+0xd4>)
    a5fa:	687a      	ldr	r2, [r7, #4]
    a5fc:	21ff      	movs	r1, #255	; 0xff
    a5fe:	438a      	bics	r2, r1
    a600:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a602:	4a20      	ldr	r2, [pc, #128]	; (a684 <Reset_Handler+0xd8>)
    a604:	2390      	movs	r3, #144	; 0x90
    a606:	005b      	lsls	r3, r3, #1
    a608:	2102      	movs	r1, #2
    a60a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a60c:	4b1e      	ldr	r3, [pc, #120]	; (a688 <Reset_Handler+0xdc>)
    a60e:	78da      	ldrb	r2, [r3, #3]
    a610:	2103      	movs	r1, #3
    a612:	438a      	bics	r2, r1
    a614:	2102      	movs	r1, #2
    a616:	430a      	orrs	r2, r1
    a618:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a61a:	4b1b      	ldr	r3, [pc, #108]	; (a688 <Reset_Handler+0xdc>)
    a61c:	78da      	ldrb	r2, [r3, #3]
    a61e:	210c      	movs	r1, #12
    a620:	438a      	bics	r2, r1
    a622:	2108      	movs	r1, #8
    a624:	430a      	orrs	r2, r1
    a626:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    a628:	4b18      	ldr	r3, [pc, #96]	; (a68c <Reset_Handler+0xe0>)
    a62a:	7b9a      	ldrb	r2, [r3, #14]
    a62c:	2130      	movs	r1, #48	; 0x30
    a62e:	438a      	bics	r2, r1
    a630:	2120      	movs	r1, #32
    a632:	430a      	orrs	r2, r1
    a634:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    a636:	4b15      	ldr	r3, [pc, #84]	; (a68c <Reset_Handler+0xe0>)
    a638:	7b9a      	ldrb	r2, [r3, #14]
    a63a:	210c      	movs	r1, #12
    a63c:	438a      	bics	r2, r1
    a63e:	2108      	movs	r1, #8
    a640:	430a      	orrs	r2, r1
    a642:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a644:	4b11      	ldr	r3, [pc, #68]	; (a68c <Reset_Handler+0xe0>)
    a646:	7b9a      	ldrb	r2, [r3, #14]
    a648:	2103      	movs	r1, #3
    a64a:	438a      	bics	r2, r1
    a64c:	2102      	movs	r1, #2
    a64e:	430a      	orrs	r2, r1
    a650:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    a652:	4b0f      	ldr	r3, [pc, #60]	; (a690 <Reset_Handler+0xe4>)
    a654:	685a      	ldr	r2, [r3, #4]
    a656:	2180      	movs	r1, #128	; 0x80
    a658:	430a      	orrs	r2, r1
    a65a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    a65c:	4b0d      	ldr	r3, [pc, #52]	; (a694 <Reset_Handler+0xe8>)
    a65e:	4798      	blx	r3

        /* Branch to main function */
        main();
    a660:	4b0d      	ldr	r3, [pc, #52]	; (a698 <Reset_Handler+0xec>)
    a662:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    a664:	e7fe      	b.n	a664 <Reset_Handler+0xb8>
    a666:	46c0      	nop			; (mov r8, r8)
    a668:	0000b600 	.word	0x0000b600
    a66c:	20000000 	.word	0x20000000
    a670:	20000308 	.word	0x20000308
    a674:	20000308 	.word	0x20000308
    a678:	200074fc 	.word	0x200074fc
    a67c:	00000000 	.word	0x00000000
    a680:	e000ed00 	.word	0xe000ed00
    a684:	41007000 	.word	0x41007000
    a688:	41005000 	.word	0x41005000
    a68c:	41004800 	.word	0x41004800
    a690:	41004000 	.word	0x41004000
    a694:	0000b2d9 	.word	0x0000b2d9
    a698:	0000a7f1 	.word	0x0000a7f1

0000a69c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    a69c:	b580      	push	{r7, lr}
    a69e:	af00      	add	r7, sp, #0
        while (1) {
        }
    a6a0:	e7fe      	b.n	a6a0 <Dummy_Handler+0x4>
    a6a2:	46c0      	nop			; (mov r8, r8)

0000a6a4 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    a6a4:	b580      	push	{r7, lr}
    a6a6:	b082      	sub	sp, #8
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	1c02      	adds	r2, r0, #0
    a6ac:	1dfb      	adds	r3, r7, #7
    a6ae:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    a6b0:	4b13      	ldr	r3, [pc, #76]	; (a700 <system_set_sleepmode+0x5c>)
    a6b2:	685a      	ldr	r2, [r3, #4]
    a6b4:	21c0      	movs	r1, #192	; 0xc0
    a6b6:	0089      	lsls	r1, r1, #2
    a6b8:	430a      	orrs	r2, r1
    a6ba:	605a      	str	r2, [r3, #4]
#endif

	switch (sleep_mode) {
    a6bc:	1dfb      	adds	r3, r7, #7
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	2b00      	cmp	r3, #0
    a6c2:	db16      	blt.n	a6f2 <system_set_sleepmode+0x4e>
    a6c4:	2b02      	cmp	r3, #2
    a6c6:	dd02      	ble.n	a6ce <system_set_sleepmode+0x2a>
    a6c8:	2b03      	cmp	r3, #3
    a6ca:	d00b      	beq.n	a6e4 <system_set_sleepmode+0x40>
    a6cc:	e011      	b.n	a6f2 <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    a6ce:	4b0d      	ldr	r3, [pc, #52]	; (a704 <system_set_sleepmode+0x60>)
    a6d0:	4a0c      	ldr	r2, [pc, #48]	; (a704 <system_set_sleepmode+0x60>)
    a6d2:	6912      	ldr	r2, [r2, #16]
    a6d4:	2104      	movs	r1, #4
    a6d6:	438a      	bics	r2, r1
    a6d8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    a6da:	4b0b      	ldr	r3, [pc, #44]	; (a708 <system_set_sleepmode+0x64>)
    a6dc:	1dfa      	adds	r2, r7, #7
    a6de:	7812      	ldrb	r2, [r2, #0]
    a6e0:	705a      	strb	r2, [r3, #1]
			break;
    a6e2:	e008      	b.n	a6f6 <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    a6e4:	4b07      	ldr	r3, [pc, #28]	; (a704 <system_set_sleepmode+0x60>)
    a6e6:	4a07      	ldr	r2, [pc, #28]	; (a704 <system_set_sleepmode+0x60>)
    a6e8:	6912      	ldr	r2, [r2, #16]
    a6ea:	2104      	movs	r1, #4
    a6ec:	430a      	orrs	r2, r1
    a6ee:	611a      	str	r2, [r3, #16]
			break;
    a6f0:	e001      	b.n	a6f6 <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    a6f2:	2317      	movs	r3, #23
    a6f4:	e000      	b.n	a6f8 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    a6f6:	2300      	movs	r3, #0
}
    a6f8:	1c18      	adds	r0, r3, #0
    a6fa:	46bd      	mov	sp, r7
    a6fc:	b002      	add	sp, #8
    a6fe:	bd80      	pop	{r7, pc}
    a700:	41004000 	.word	0x41004000
    a704:	e000ed00 	.word	0xe000ed00
    a708:	40000400 	.word	0x40000400

0000a70c <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    a710:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    a714:	bf30      	wfi
	__DSB();
	__WFI();
}
    a716:	46bd      	mov	sp, r7
    a718:	bd80      	pop	{r7, pc}
    a71a:	46c0      	nop			; (mov r8, r8)

0000a71c <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	af00      	add	r7, sp, #0
    a722:	1c02      	adds	r2, r0, #0
    a724:	1dfb      	adds	r3, r7, #7
    a726:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    a728:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    a72a:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    a72e:	4b0a      	ldr	r3, [pc, #40]	; (a758 <sleepmgr_sleep+0x3c>)
    a730:	2200      	movs	r2, #0
    a732:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    a734:	1dfb      	adds	r3, r7, #7
    a736:	781b      	ldrb	r3, [r3, #0]
    a738:	3b01      	subs	r3, #1
    a73a:	b2db      	uxtb	r3, r3
    a73c:	1c18      	adds	r0, r3, #0
    a73e:	4b07      	ldr	r3, [pc, #28]	; (a75c <sleepmgr_sleep+0x40>)
    a740:	4798      	blx	r3
	cpu_irq_enable();
    a742:	4b05      	ldr	r3, [pc, #20]	; (a758 <sleepmgr_sleep+0x3c>)
    a744:	2201      	movs	r2, #1
    a746:	701a      	strb	r2, [r3, #0]
    a748:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a74c:	b662      	cpsie	i
	system_sleep();
    a74e:	4b04      	ldr	r3, [pc, #16]	; (a760 <sleepmgr_sleep+0x44>)
    a750:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    a752:	46bd      	mov	sp, r7
    a754:	b002      	add	sp, #8
    a756:	bd80      	pop	{r7, pc}
    a758:	20000288 	.word	0x20000288
    a75c:	0000a6a5 	.word	0x0000a6a5
    a760:	0000a70d 	.word	0x0000a70d

0000a764 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    a76a:	1dfb      	adds	r3, r7, #7
    a76c:	2200      	movs	r2, #0
    a76e:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    a770:	4b0a      	ldr	r3, [pc, #40]	; (a79c <sleepmgr_get_sleep_mode+0x38>)
    a772:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    a774:	e007      	b.n	a786 <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    a776:	683b      	ldr	r3, [r7, #0]
    a778:	3301      	adds	r3, #1
    a77a:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    a77c:	1dfb      	adds	r3, r7, #7
    a77e:	1dfa      	adds	r2, r7, #7
    a780:	7812      	ldrb	r2, [r2, #0]
    a782:	3201      	adds	r2, #1
    a784:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    a786:	683b      	ldr	r3, [r7, #0]
    a788:	781b      	ldrb	r3, [r3, #0]
    a78a:	2b00      	cmp	r3, #0
    a78c:	d0f3      	beq.n	a776 <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    a78e:	1dfb      	adds	r3, r7, #7
    a790:	781b      	ldrb	r3, [r3, #0]
}
    a792:	1c18      	adds	r0, r3, #0
    a794:	46bd      	mov	sp, r7
    a796:	b002      	add	sp, #8
    a798:	bd80      	pop	{r7, pc}
    a79a:	46c0      	nop			; (mov r8, r8)
    a79c:	20007130 	.word	0x20007130

0000a7a0 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    a7a0:	b590      	push	{r4, r7, lr}
    a7a2:	b083      	sub	sp, #12
    a7a4:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    a7a6:	b672      	cpsid	i
    a7a8:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    a7ac:	4b0d      	ldr	r3, [pc, #52]	; (a7e4 <sleepmgr_enter_sleep+0x44>)
    a7ae:	2200      	movs	r2, #0
    a7b0:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    a7b2:	1dfc      	adds	r4, r7, #7
    a7b4:	4b0c      	ldr	r3, [pc, #48]	; (a7e8 <sleepmgr_enter_sleep+0x48>)
    a7b6:	4798      	blx	r3
    a7b8:	1c03      	adds	r3, r0, #0
    a7ba:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    a7bc:	1dfb      	adds	r3, r7, #7
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d106      	bne.n	a7d2 <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    a7c4:	4b07      	ldr	r3, [pc, #28]	; (a7e4 <sleepmgr_enter_sleep+0x44>)
    a7c6:	2201      	movs	r2, #1
    a7c8:	701a      	strb	r2, [r3, #0]
    a7ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a7ce:	b662      	cpsie	i
		return;
    a7d0:	e004      	b.n	a7dc <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    a7d2:	1dfb      	adds	r3, r7, #7
    a7d4:	781b      	ldrb	r3, [r3, #0]
    a7d6:	1c18      	adds	r0, r3, #0
    a7d8:	4b04      	ldr	r3, [pc, #16]	; (a7ec <sleepmgr_enter_sleep+0x4c>)
    a7da:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    a7dc:	46bd      	mov	sp, r7
    a7de:	b003      	add	sp, #12
    a7e0:	bd90      	pop	{r4, r7, pc}
    a7e2:	46c0      	nop			; (mov r8, r8)
    a7e4:	20000288 	.word	0x20000288
    a7e8:	0000a765 	.word	0x0000a765
    a7ec:	0000a71d 	.word	0x0000a71d

0000a7f0 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)//
{
    a7f0:	b580      	push	{r7, lr}
    a7f2:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    a7f4:	4b21      	ldr	r3, [pc, #132]	; (a87c <main+0x8c>)
    a7f6:	2201      	movs	r2, #1
    a7f8:	701a      	strb	r2, [r3, #0]
    a7fa:	f3bf 8f5f 	dmb	sy
    a7fe:	b662      	cpsie	i
	//sleepmgr_init();
#if !SAMD21 && !SAMR21 && !SAML21
	sysclk_init();
	board_init();
#else
	system_init();
    a800:	4b1f      	ldr	r3, [pc, #124]	; (a880 <main+0x90>)
    a802:	4798      	blx	r3
#endif
	ui_init();
    a804:	4b1f      	ldr	r3, [pc, #124]	; (a884 <main+0x94>)
    a806:	4798      	blx	r3
	ui_powerdown();
    a808:	4b1f      	ldr	r3, [pc, #124]	; (a888 <main+0x98>)
    a80a:	4798      	blx	r3

	memories_initialization();
    a80c:	4b1f      	ldr	r3, [pc, #124]	; (a88c <main+0x9c>)
    a80e:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    a810:	4b1f      	ldr	r3, [pc, #124]	; (a890 <main+0xa0>)
    a812:	4798      	blx	r3
	while (true) {

	//this is just an attempt to
	static volatile uint16_t virtual_sof_sub = 0;
	
	if (udd_get_frame_number()/500 == virtual_sof_sub++) 
    a814:	4b1f      	ldr	r3, [pc, #124]	; (a894 <main+0xa4>)
    a816:	4798      	blx	r3
    a818:	1c03      	adds	r3, r0, #0
    a81a:	1c1a      	adds	r2, r3, #0
    a81c:	4b1e      	ldr	r3, [pc, #120]	; (a898 <main+0xa8>)
    a81e:	1c10      	adds	r0, r2, #0
    a820:	22fa      	movs	r2, #250	; 0xfa
    a822:	0051      	lsls	r1, r2, #1
    a824:	4798      	blx	r3
    a826:	1c03      	adds	r3, r0, #0
    a828:	b29a      	uxth	r2, r3
    a82a:	4b1c      	ldr	r3, [pc, #112]	; (a89c <main+0xac>)
    a82c:	881b      	ldrh	r3, [r3, #0]
    a82e:	b29b      	uxth	r3, r3
    a830:	1c59      	adds	r1, r3, #1
    a832:	b288      	uxth	r0, r1
    a834:	4919      	ldr	r1, [pc, #100]	; (a89c <main+0xac>)
    a836:	8008      	strh	r0, [r1, #0]
    a838:	429a      	cmp	r2, r3
    a83a:	d10b      	bne.n	a854 <main+0x64>
	{
		virtual_sof_sub = 0;
    a83c:	4b17      	ldr	r3, [pc, #92]	; (a89c <main+0xac>)
    a83e:	2200      	movs	r2, #0
    a840:	801a      	strh	r2, [r3, #0]
		static uint16_t virtual_sof = 0;
		ui_process(virtual_sof++);
    a842:	4b17      	ldr	r3, [pc, #92]	; (a8a0 <main+0xb0>)
    a844:	881b      	ldrh	r3, [r3, #0]
    a846:	1c5a      	adds	r2, r3, #1
    a848:	b291      	uxth	r1, r2
    a84a:	4a15      	ldr	r2, [pc, #84]	; (a8a0 <main+0xb0>)
    a84c:	8011      	strh	r1, [r2, #0]
    a84e:	1c18      	adds	r0, r3, #0
    a850:	4b14      	ldr	r3, [pc, #80]	; (a8a4 <main+0xb4>)
    a852:	4798      	blx	r3
	}
	
//	ui_process(udd_get_frame_number());
	
		if (main_b_msc_enable) {
    a854:	4b14      	ldr	r3, [pc, #80]	; (a8a8 <main+0xb8>)
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	b2db      	uxtb	r3, r3
    a85a:	2b00      	cmp	r3, #0
    a85c:	d00a      	beq.n	a874 <main+0x84>
			if (!udi_msc_process_trans()) {
    a85e:	4b13      	ldr	r3, [pc, #76]	; (a8ac <main+0xbc>)
    a860:	4798      	blx	r3
    a862:	1c03      	adds	r3, r0, #0
    a864:	2201      	movs	r2, #1
    a866:	4053      	eors	r3, r2
    a868:	b2db      	uxtb	r3, r3
    a86a:	2b00      	cmp	r3, #0
    a86c:	d005      	beq.n	a87a <main+0x8a>
				sleepmgr_enter_sleep();
    a86e:	4b10      	ldr	r3, [pc, #64]	; (a8b0 <main+0xc0>)
    a870:	4798      	blx	r3
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
    a872:	e7cf      	b.n	a814 <main+0x24>
		if (main_b_msc_enable) {
			if (!udi_msc_process_trans()) {
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
    a874:	4b0e      	ldr	r3, [pc, #56]	; (a8b0 <main+0xc0>)
    a876:	4798      	blx	r3
		}
	}
    a878:	e7cc      	b.n	a814 <main+0x24>
    a87a:	e7cb      	b.n	a814 <main+0x24>
    a87c:	20000288 	.word	0x20000288
    a880:	00006f19 	.word	0x00006f19
    a884:	00000c85 	.word	0x00000c85
    a888:	00000cfd 	.word	0x00000cfd
    a88c:	0000ab85 	.word	0x0000ab85
    a890:	00003cad 	.word	0x00003cad
    a894:	00007771 	.word	0x00007771
    a898:	0000b0f5 	.word	0x0000b0f5
    a89c:	20007128 	.word	0x20007128
    a8a0:	2000712a 	.word	0x2000712a
    a8a4:	00000dbd 	.word	0x00000dbd
    a8a8:	20007126 	.word	0x20007126
    a8ac:	000037fd 	.word	0x000037fd
    a8b0:	0000a7a1 	.word	0x0000a7a1

0000a8b4 <main_suspend_action>:
}

void main_suspend_action(void)
{
    a8b4:	b580      	push	{r7, lr}
    a8b6:	af00      	add	r7, sp, #0
	ui_powerdown();
    a8b8:	4b01      	ldr	r3, [pc, #4]	; (a8c0 <main_suspend_action+0xc>)
    a8ba:	4798      	blx	r3
}
    a8bc:	46bd      	mov	sp, r7
    a8be:	bd80      	pop	{r7, pc}
    a8c0:	00000cfd 	.word	0x00000cfd

0000a8c4 <main_resume_action>:

void main_resume_action(void)
{
    a8c4:	b580      	push	{r7, lr}
    a8c6:	af00      	add	r7, sp, #0
	ui_wakeup();
    a8c8:	4b01      	ldr	r3, [pc, #4]	; (a8d0 <main_resume_action+0xc>)
    a8ca:	4798      	blx	r3
}
    a8cc:	46bd      	mov	sp, r7
    a8ce:	bd80      	pop	{r7, pc}
    a8d0:	00000d39 	.word	0x00000d39

0000a8d4 <main_sof_action>:

void main_sof_action(void)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	af00      	add	r7, sp, #0
	if ((!main_b_mouse_enable) ||
    a8d8:	4b14      	ldr	r3, [pc, #80]	; (a92c <main_sof_action+0x58>)
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	b2db      	uxtb	r3, r3
    a8de:	2201      	movs	r2, #1
    a8e0:	4053      	eors	r3, r2
    a8e2:	b2db      	uxtb	r3, r3
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d117      	bne.n	a918 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
    a8e8:	4b11      	ldr	r3, [pc, #68]	; (a930 <main_sof_action+0x5c>)
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	b2db      	uxtb	r3, r3
    a8ee:	2201      	movs	r2, #1
    a8f0:	4053      	eors	r3, r2
    a8f2:	b2db      	uxtb	r3, r3
	ui_wakeup();
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d10f      	bne.n	a918 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a8f8:	4b0e      	ldr	r3, [pc, #56]	; (a934 <main_sof_action+0x60>)
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	b2db      	uxtb	r3, r3
    a8fe:	2201      	movs	r2, #1
    a900:	4053      	eors	r3, r2
    a902:	b2db      	uxtb	r3, r3
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
    a904:	2b00      	cmp	r3, #0
    a906:	d107      	bne.n	a918 <main_sof_action+0x44>
		(!main_b_keyboard_enable) ||
		(!main_b_cdc_enable))
    a908:	4b0b      	ldr	r3, [pc, #44]	; (a938 <main_sof_action+0x64>)
    a90a:	781b      	ldrb	r3, [r3, #0]
    a90c:	b2db      	uxtb	r3, r3
    a90e:	2201      	movs	r2, #1
    a910:	4053      	eors	r3, r2
    a912:	b2db      	uxtb	r3, r3

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a914:	2b00      	cmp	r3, #0
    a916:	d000      	beq.n	a91a <main_sof_action+0x46>
		(!main_b_cdc_enable))
		return;
    a918:	e005      	b.n	a926 <main_sof_action+0x52>
	ui_process(udd_get_frame_number());
    a91a:	4b08      	ldr	r3, [pc, #32]	; (a93c <main_sof_action+0x68>)
    a91c:	4798      	blx	r3
    a91e:	1c03      	adds	r3, r0, #0
    a920:	1c18      	adds	r0, r3, #0
    a922:	4b07      	ldr	r3, [pc, #28]	; (a940 <main_sof_action+0x6c>)
    a924:	4798      	blx	r3
}
    a926:	46bd      	mov	sp, r7
    a928:	bd80      	pop	{r7, pc}
    a92a:	46c0      	nop			; (mov r8, r8)
    a92c:	20007125 	.word	0x20007125
    a930:	20007126 	.word	0x20007126
    a934:	20007124 	.word	0x20007124
    a938:	20007127 	.word	0x20007127
    a93c:	00007771 	.word	0x00007771
    a940:	00000dbd 	.word	0x00000dbd

0000a944 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    a944:	b580      	push	{r7, lr}
    a946:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    a948:	4b01      	ldr	r3, [pc, #4]	; (a950 <main_remotewakeup_enable+0xc>)
    a94a:	4798      	blx	r3
}
    a94c:	46bd      	mov	sp, r7
    a94e:	bd80      	pop	{r7, pc}
    a950:	00000d11 	.word	0x00000d11

0000a954 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    a954:	b580      	push	{r7, lr}
    a956:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    a958:	4b01      	ldr	r3, [pc, #4]	; (a960 <main_remotewakeup_disable+0xc>)
    a95a:	4798      	blx	r3
}
    a95c:	46bd      	mov	sp, r7
    a95e:	bd80      	pop	{r7, pc}
    a960:	00000d25 	.word	0x00000d25

0000a964 <main_extra_string>:
 * Manufacture, Product and serial number ID.
 *
 * return true, if the string ID requested is know and managed by this functions
 */
bool main_extra_string(void)
{
    a964:	b580      	push	{r7, lr}
    a966:	b084      	sub	sp, #16
    a968:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
    a96a:	1dfb      	adds	r3, r7, #7
    a96c:	2200      	movs	r2, #0
    a96e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    a970:	4b36      	ldr	r3, [pc, #216]	; (aa4c <main_extra_string+0xe8>)
    a972:	885b      	ldrh	r3, [r3, #2]
    a974:	1c1a      	adds	r2, r3, #0
    a976:	23ff      	movs	r3, #255	; 0xff
    a978:	4013      	ands	r3, r2
    a97a:	2b05      	cmp	r3, #5
    a97c:	d00e      	beq.n	a99c <main_extra_string+0x38>
    a97e:	dc02      	bgt.n	a986 <main_extra_string+0x22>
    a980:	2b04      	cmp	r3, #4
    a982:	d005      	beq.n	a990 <main_extra_string+0x2c>
    a984:	e01c      	b.n	a9c0 <main_extra_string+0x5c>
    a986:	2b06      	cmp	r3, #6
    a988:	d00e      	beq.n	a9a8 <main_extra_string+0x44>
    a98a:	2b07      	cmp	r3, #7
    a98c:	d012      	beq.n	a9b4 <main_extra_string+0x50>
    a98e:	e017      	b.n	a9c0 <main_extra_string+0x5c>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
    a990:	1dfb      	adds	r3, r7, #7
    a992:	220d      	movs	r2, #13
    a994:	701a      	strb	r2, [r3, #0]
		str = udi_cdc_name;
    a996:	4b2e      	ldr	r3, [pc, #184]	; (aa50 <main_extra_string+0xec>)
    a998:	60bb      	str	r3, [r7, #8]
		break;
    a99a:	e013      	b.n	a9c4 <main_extra_string+0x60>
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
    a99c:	1dfb      	adds	r3, r7, #7
    a99e:	220d      	movs	r2, #13
    a9a0:	701a      	strb	r2, [r3, #0]
		str = udi_msc_name;
    a9a2:	4b2c      	ldr	r3, [pc, #176]	; (aa54 <main_extra_string+0xf0>)
    a9a4:	60bb      	str	r3, [r7, #8]
		break;
    a9a6:	e00d      	b.n	a9c4 <main_extra_string+0x60>
	case UDI_HID_MOUSE_STRING_ID:
		str_lgt = sizeof(udi_hid_mouse_name)-1;
    a9a8:	1dfb      	adds	r3, r7, #7
    a9aa:	2213      	movs	r2, #19
    a9ac:	701a      	strb	r2, [r3, #0]
		str = udi_hid_mouse_name;
    a9ae:	4b2a      	ldr	r3, [pc, #168]	; (aa58 <main_extra_string+0xf4>)
    a9b0:	60bb      	str	r3, [r7, #8]
		break;
    a9b2:	e007      	b.n	a9c4 <main_extra_string+0x60>
	case UDI_HID_KBD_STRING_ID:
		str_lgt = sizeof(udi_hid_kbd_name)-1;
    a9b4:	1dfb      	adds	r3, r7, #7
    a9b6:	2216      	movs	r2, #22
    a9b8:	701a      	strb	r2, [r3, #0]
		str = udi_hid_kbd_name;
    a9ba:	4b28      	ldr	r3, [pc, #160]	; (aa5c <main_extra_string+0xf8>)
    a9bc:	60bb      	str	r3, [r7, #8]
		break;
    a9be:	e001      	b.n	a9c4 <main_extra_string+0x60>
	default:
		return false;
    a9c0:	2300      	movs	r3, #0
    a9c2:	e03e      	b.n	aa42 <main_extra_string+0xde>
	}

	if (str_lgt!=0) {
    a9c4:	1dfb      	adds	r3, r7, #7
    a9c6:	781b      	ldrb	r3, [r3, #0]
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d02f      	beq.n	aa2c <main_extra_string+0xc8>
		for( i=0; i<str_lgt; i++) {
    a9cc:	1c3b      	adds	r3, r7, #0
    a9ce:	330f      	adds	r3, #15
    a9d0:	2200      	movs	r2, #0
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	e013      	b.n	a9fe <main_extra_string+0x9a>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    a9d6:	1c3b      	adds	r3, r7, #0
    a9d8:	330f      	adds	r3, #15
    a9da:	781b      	ldrb	r3, [r3, #0]
    a9dc:	1c3a      	adds	r2, r7, #0
    a9de:	320f      	adds	r2, #15
    a9e0:	7812      	ldrb	r2, [r2, #0]
    a9e2:	68b9      	ldr	r1, [r7, #8]
    a9e4:	188a      	adds	r2, r1, r2
    a9e6:	7812      	ldrb	r2, [r2, #0]
    a9e8:	491d      	ldr	r1, [pc, #116]	; (aa60 <main_extra_string+0xfc>)
    a9ea:	005b      	lsls	r3, r3, #1
    a9ec:	18cb      	adds	r3, r1, r3
    a9ee:	805a      	strh	r2, [r3, #2]
	default:
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
    a9f0:	1c3b      	adds	r3, r7, #0
    a9f2:	330f      	adds	r3, #15
    a9f4:	781a      	ldrb	r2, [r3, #0]
    a9f6:	1c3b      	adds	r3, r7, #0
    a9f8:	330f      	adds	r3, #15
    a9fa:	3201      	adds	r2, #1
    a9fc:	701a      	strb	r2, [r3, #0]
    a9fe:	1c3a      	adds	r2, r7, #0
    aa00:	320f      	adds	r2, #15
    aa02:	1dfb      	adds	r3, r7, #7
    aa04:	7812      	ldrb	r2, [r2, #0]
    aa06:	781b      	ldrb	r3, [r3, #0]
    aa08:	429a      	cmp	r2, r3
    aa0a:	d3e4      	bcc.n	a9d6 <main_extra_string+0x72>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
    aa0c:	1dfb      	adds	r3, r7, #7
    aa0e:	781b      	ldrb	r3, [r3, #0]
    aa10:	3301      	adds	r3, #1
    aa12:	b2db      	uxtb	r3, r3
    aa14:	18db      	adds	r3, r3, r3
    aa16:	b2da      	uxtb	r2, r3
    aa18:	4b11      	ldr	r3, [pc, #68]	; (aa60 <main_extra_string+0xfc>)
    aa1a:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
    aa1c:	4b10      	ldr	r3, [pc, #64]	; (aa60 <main_extra_string+0xfc>)
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	1c1a      	adds	r2, r3, #0
    aa22:	4b0a      	ldr	r3, [pc, #40]	; (aa4c <main_extra_string+0xe8>)
    aa24:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
    aa26:	4b09      	ldr	r3, [pc, #36]	; (aa4c <main_extra_string+0xe8>)
    aa28:	4a0d      	ldr	r2, [pc, #52]	; (aa60 <main_extra_string+0xfc>)
    aa2a:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
    aa2c:	4b07      	ldr	r3, [pc, #28]	; (aa4c <main_extra_string+0xe8>)
    aa2e:	899a      	ldrh	r2, [r3, #12]
    aa30:	4b06      	ldr	r3, [pc, #24]	; (aa4c <main_extra_string+0xe8>)
    aa32:	88db      	ldrh	r3, [r3, #6]
    aa34:	429a      	cmp	r2, r3
    aa36:	d903      	bls.n	aa40 <main_extra_string+0xdc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    aa38:	4b04      	ldr	r3, [pc, #16]	; (aa4c <main_extra_string+0xe8>)
    aa3a:	88da      	ldrh	r2, [r3, #6]
    aa3c:	4b03      	ldr	r3, [pc, #12]	; (aa4c <main_extra_string+0xe8>)
    aa3e:	819a      	strh	r2, [r3, #12]
	}
	return true;
    aa40:	2301      	movs	r3, #1
}
    aa42:	1c18      	adds	r0, r3, #0
    aa44:	46bd      	mov	sp, r7
    aa46:	b004      	add	sp, #16
    aa48:	bd80      	pop	{r7, pc}
    aa4a:	46c0      	nop			; (mov r8, r8)
    aa4c:	20007330 	.word	0x20007330
    aa50:	2000028c 	.word	0x2000028c
    aa54:	2000029c 	.word	0x2000029c
    aa58:	200002ac 	.word	0x200002ac
    aa5c:	200002c0 	.word	0x200002c0
    aa60:	200002d8 	.word	0x200002d8

0000aa64 <main_msc_enable>:

bool main_msc_enable(void)
{
    aa64:	b580      	push	{r7, lr}
    aa66:	af00      	add	r7, sp, #0
	main_b_msc_enable = true;
    aa68:	4b03      	ldr	r3, [pc, #12]	; (aa78 <main_msc_enable+0x14>)
    aa6a:	2201      	movs	r2, #1
    aa6c:	701a      	strb	r2, [r3, #0]
	return true;
    aa6e:	2301      	movs	r3, #1
}
    aa70:	1c18      	adds	r0, r3, #0
    aa72:	46bd      	mov	sp, r7
    aa74:	bd80      	pop	{r7, pc}
    aa76:	46c0      	nop			; (mov r8, r8)
    aa78:	20007126 	.word	0x20007126

0000aa7c <main_msc_disable>:

void main_msc_disable(void)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	af00      	add	r7, sp, #0
	main_b_msc_enable = false;
    aa80:	4b02      	ldr	r3, [pc, #8]	; (aa8c <main_msc_disable+0x10>)
    aa82:	2200      	movs	r2, #0
    aa84:	701a      	strb	r2, [r3, #0]
}
    aa86:	46bd      	mov	sp, r7
    aa88:	bd80      	pop	{r7, pc}
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	20007126 	.word	0x20007126

0000aa90 <main_mouse_enable>:

bool main_mouse_enable(void)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    aa94:	4b03      	ldr	r3, [pc, #12]	; (aaa4 <main_mouse_enable+0x14>)
    aa96:	2201      	movs	r2, #1
    aa98:	701a      	strb	r2, [r3, #0]
	return true;
    aa9a:	2301      	movs	r3, #1
}
    aa9c:	1c18      	adds	r0, r3, #0
    aa9e:	46bd      	mov	sp, r7
    aaa0:	bd80      	pop	{r7, pc}
    aaa2:	46c0      	nop			; (mov r8, r8)
    aaa4:	20007125 	.word	0x20007125

0000aaa8 <main_mouse_disable>:

void main_mouse_disable(void)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    aaac:	4b02      	ldr	r3, [pc, #8]	; (aab8 <main_mouse_disable+0x10>)
    aaae:	2200      	movs	r2, #0
    aab0:	701a      	strb	r2, [r3, #0]
}
    aab2:	46bd      	mov	sp, r7
    aab4:	bd80      	pop	{r7, pc}
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	20007125 	.word	0x20007125

0000aabc <main_keyboard_enable>:

bool main_keyboard_enable(void)
{
    aabc:	b580      	push	{r7, lr}
    aabe:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = true;
    aac0:	4b03      	ldr	r3, [pc, #12]	; (aad0 <main_keyboard_enable+0x14>)
    aac2:	2201      	movs	r2, #1
    aac4:	701a      	strb	r2, [r3, #0]
	return true;
    aac6:	2301      	movs	r3, #1
}
    aac8:	1c18      	adds	r0, r3, #0
    aaca:	46bd      	mov	sp, r7
    aacc:	bd80      	pop	{r7, pc}
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	20007124 	.word	0x20007124

0000aad4 <main_keyboard_disable>:

void main_keyboard_disable(void)
{
    aad4:	b580      	push	{r7, lr}
    aad6:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = false;
    aad8:	4b02      	ldr	r3, [pc, #8]	; (aae4 <main_keyboard_disable+0x10>)
    aada:	2200      	movs	r2, #0
    aadc:	701a      	strb	r2, [r3, #0]
}
    aade:	46bd      	mov	sp, r7
    aae0:	bd80      	pop	{r7, pc}
    aae2:	46c0      	nop			; (mov r8, r8)
    aae4:	20007124 	.word	0x20007124

0000aae8 <main_cdc_enable>:

bool main_cdc_enable(uint8_t port)
{
    aae8:	b580      	push	{r7, lr}
    aaea:	b082      	sub	sp, #8
    aaec:	af00      	add	r7, sp, #0
    aaee:	1c02      	adds	r2, r0, #0
    aaf0:	1dfb      	adds	r3, r7, #7
    aaf2:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = true;
    aaf4:	4b06      	ldr	r3, [pc, #24]	; (ab10 <main_cdc_enable+0x28>)
    aaf6:	2201      	movs	r2, #1
    aaf8:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    aafa:	1dfb      	adds	r3, r7, #7
    aafc:	781b      	ldrb	r3, [r3, #0]
    aafe:	1c18      	adds	r0, r3, #0
    ab00:	4b04      	ldr	r3, [pc, #16]	; (ab14 <main_cdc_enable+0x2c>)
    ab02:	4798      	blx	r3
	return true;
    ab04:	2301      	movs	r3, #1
}
    ab06:	1c18      	adds	r0, r3, #0
    ab08:	46bd      	mov	sp, r7
    ab0a:	b002      	add	sp, #8
    ab0c:	bd80      	pop	{r7, pc}
    ab0e:	46c0      	nop			; (mov r8, r8)
    ab10:	20007127 	.word	0x20007127
    ab14:	0000b0ad 	.word	0x0000b0ad

0000ab18 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    ab18:	b580      	push	{r7, lr}
    ab1a:	b082      	sub	sp, #8
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	1c02      	adds	r2, r0, #0
    ab20:	1dfb      	adds	r3, r7, #7
    ab22:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = false;
    ab24:	4b05      	ldr	r3, [pc, #20]	; (ab3c <main_cdc_disable+0x24>)
    ab26:	2200      	movs	r2, #0
    ab28:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    ab2a:	1dfb      	adds	r3, r7, #7
    ab2c:	781b      	ldrb	r3, [r3, #0]
    ab2e:	1c18      	adds	r0, r3, #0
    ab30:	4b03      	ldr	r3, [pc, #12]	; (ab40 <main_cdc_disable+0x28>)
    ab32:	4798      	blx	r3
}
    ab34:	46bd      	mov	sp, r7
    ab36:	b002      	add	sp, #8
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	46c0      	nop			; (mov r8, r8)
    ab3c:	20007127 	.word	0x20007127
    ab40:	0000b0d1 	.word	0x0000b0d1

0000ab44 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    ab44:	b580      	push	{r7, lr}
    ab46:	b082      	sub	sp, #8
    ab48:	af00      	add	r7, sp, #0
    ab4a:	1c0a      	adds	r2, r1, #0
    ab4c:	1dfb      	adds	r3, r7, #7
    ab4e:	1c01      	adds	r1, r0, #0
    ab50:	7019      	strb	r1, [r3, #0]
    ab52:	1dbb      	adds	r3, r7, #6
    ab54:	701a      	strb	r2, [r3, #0]
	if (b_enable) {
    ab56:	1dbb      	adds	r3, r7, #6
    ab58:	781b      	ldrb	r3, [r3, #0]
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d005      	beq.n	ab6a <main_cdc_set_dtr+0x26>
		// Host terminal has open COM
		ui_com_open(port);
    ab5e:	1dfb      	adds	r3, r7, #7
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	1c18      	adds	r0, r3, #0
    ab64:	4b05      	ldr	r3, [pc, #20]	; (ab7c <main_cdc_set_dtr+0x38>)
    ab66:	4798      	blx	r3
    ab68:	e004      	b.n	ab74 <main_cdc_set_dtr+0x30>
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    ab6a:	1dfb      	adds	r3, r7, #7
    ab6c:	781b      	ldrb	r3, [r3, #0]
    ab6e:	1c18      	adds	r0, r3, #0
    ab70:	4b03      	ldr	r3, [pc, #12]	; (ab80 <main_cdc_set_dtr+0x3c>)
    ab72:	4798      	blx	r3
	}
}
    ab74:	46bd      	mov	sp, r7
    ab76:	b002      	add	sp, #8
    ab78:	bd80      	pop	{r7, pc}
    ab7a:	46c0      	nop			; (mov r8, r8)
    ab7c:	00000d4d 	.word	0x00000d4d
    ab80:	00000d61 	.word	0x00000d61

0000ab84 <memories_initialization>:
	   No additional actions to do */
}
#endif

void memories_initialization(void)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	af00      	add	r7, sp, #0
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    ab88:	46bd      	mov	sp, r7
    ab8a:	bd80      	pop	{r7, pc}

0000ab8c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b082      	sub	sp, #8
    ab90:	af00      	add	r7, sp, #0
    ab92:	1c02      	adds	r2, r0, #0
    ab94:	1dfb      	adds	r3, r7, #7
    ab96:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ab98:	4b06      	ldr	r3, [pc, #24]	; (abb4 <system_interrupt_enable+0x28>)
    ab9a:	1dfa      	adds	r2, r7, #7
    ab9c:	7812      	ldrb	r2, [r2, #0]
    ab9e:	1c11      	adds	r1, r2, #0
    aba0:	221f      	movs	r2, #31
    aba2:	400a      	ands	r2, r1
    aba4:	2101      	movs	r1, #1
    aba6:	1c08      	adds	r0, r1, #0
    aba8:	4090      	lsls	r0, r2
    abaa:	1c02      	adds	r2, r0, #0
    abac:	601a      	str	r2, [r3, #0]
}
    abae:	46bd      	mov	sp, r7
    abb0:	b002      	add	sp, #8
    abb2:	bd80      	pop	{r7, pc}
    abb4:	e000e100 	.word	0xe000e100

0000abb8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b082      	sub	sp, #8
    abbc:	af00      	add	r7, sp, #0
    abbe:	1c02      	adds	r2, r0, #0
    abc0:	1dfb      	adds	r3, r7, #7
    abc2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    abc4:	4a07      	ldr	r2, [pc, #28]	; (abe4 <system_interrupt_disable+0x2c>)
    abc6:	1dfb      	adds	r3, r7, #7
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	1c19      	adds	r1, r3, #0
    abcc:	231f      	movs	r3, #31
    abce:	400b      	ands	r3, r1
    abd0:	2101      	movs	r1, #1
    abd2:	1c08      	adds	r0, r1, #0
    abd4:	4098      	lsls	r0, r3
    abd6:	1c03      	adds	r3, r0, #0
    abd8:	1c19      	adds	r1, r3, #0
    abda:	2380      	movs	r3, #128	; 0x80
    abdc:	50d1      	str	r1, [r2, r3]
}
    abde:	46bd      	mov	sp, r7
    abe0:	b002      	add	sp, #8
    abe2:	bd80      	pop	{r7, pc}
    abe4:	e000e100 	.word	0xe000e100

0000abe8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    abe8:	b580      	push	{r7, lr}
    abea:	b084      	sub	sp, #16
    abec:	af00      	add	r7, sp, #0
    abee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    abf0:	687b      	ldr	r3, [r7, #4]
    abf2:	681b      	ldr	r3, [r3, #0]
    abf4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    abf6:	68fb      	ldr	r3, [r7, #12]
    abf8:	69db      	ldr	r3, [r3, #28]
    abfa:	1e5a      	subs	r2, r3, #1
    abfc:	4193      	sbcs	r3, r2
    abfe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    ac00:	1c18      	adds	r0, r3, #0
    ac02:	46bd      	mov	sp, r7
    ac04:	b004      	add	sp, #16
    ac06:	bd80      	pop	{r7, pc}

0000ac08 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	b082      	sub	sp, #8
    ac0c:	af00      	add	r7, sp, #0
    ac0e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    ac10:	46c0      	nop			; (mov r8, r8)
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	1c18      	adds	r0, r3, #0
    ac16:	4b04      	ldr	r3, [pc, #16]	; (ac28 <_usart_wait_for_sync+0x20>)
    ac18:	4798      	blx	r3
    ac1a:	1c03      	adds	r3, r0, #0
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	d1f8      	bne.n	ac12 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    ac20:	46bd      	mov	sp, r7
    ac22:	b002      	add	sp, #8
    ac24:	bd80      	pop	{r7, pc}
    ac26:	46c0      	nop			; (mov r8, r8)
    ac28:	0000abe9 	.word	0x0000abe9

0000ac2c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    ac2c:	b580      	push	{r7, lr}
    ac2e:	b082      	sub	sp, #8
    ac30:	af00      	add	r7, sp, #0
    ac32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    ac34:	687b      	ldr	r3, [r7, #4]
    ac36:	2280      	movs	r2, #128	; 0x80
    ac38:	05d2      	lsls	r2, r2, #23
    ac3a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	2200      	movs	r2, #0
    ac40:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    ac42:	687b      	ldr	r3, [r7, #4]
    ac44:	22ff      	movs	r2, #255	; 0xff
    ac46:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ac48:	687b      	ldr	r3, [r7, #4]
    ac4a:	2200      	movs	r2, #0
    ac4c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ac4e:	687b      	ldr	r3, [r7, #4]
    ac50:	2200      	movs	r2, #0
    ac52:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    ac54:	687b      	ldr	r3, [r7, #4]
    ac56:	2296      	movs	r2, #150	; 0x96
    ac58:	0192      	lsls	r2, r2, #6
    ac5a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    ac5c:	687a      	ldr	r2, [r7, #4]
    ac5e:	2324      	movs	r3, #36	; 0x24
    ac60:	2101      	movs	r1, #1
    ac62:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    ac64:	687a      	ldr	r2, [r7, #4]
    ac66:	2325      	movs	r3, #37	; 0x25
    ac68:	2101      	movs	r1, #1
    ac6a:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    ac6c:	687a      	ldr	r2, [r7, #4]
    ac6e:	2326      	movs	r3, #38	; 0x26
    ac70:	2100      	movs	r1, #0
    ac72:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    ac74:	687a      	ldr	r2, [r7, #4]
    ac76:	2327      	movs	r3, #39	; 0x27
    ac78:	2100      	movs	r1, #0
    ac7a:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    ac7c:	687b      	ldr	r3, [r7, #4]
    ac7e:	2200      	movs	r2, #0
    ac80:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ac82:	687b      	ldr	r3, [r7, #4]
    ac84:	2288      	movs	r2, #136	; 0x88
    ac86:	0352      	lsls	r2, r2, #13
    ac88:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    ac8a:	687a      	ldr	r2, [r7, #4]
    ac8c:	232c      	movs	r3, #44	; 0x2c
    ac8e:	2100      	movs	r1, #0
    ac90:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    ac92:	687a      	ldr	r2, [r7, #4]
    ac94:	232d      	movs	r3, #45	; 0x2d
    ac96:	2100      	movs	r1, #0
    ac98:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    ac9a:	687b      	ldr	r3, [r7, #4]
    ac9c:	2200      	movs	r2, #0
    ac9e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	2200      	movs	r2, #0
    aca4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	2200      	movs	r2, #0
    acaa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    acac:	687b      	ldr	r3, [r7, #4]
    acae:	2200      	movs	r2, #0
    acb0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    acb2:	687b      	ldr	r3, [r7, #4]
    acb4:	2200      	movs	r2, #0
    acb6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	2200      	movs	r2, #0
    acbc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    acbe:	687b      	ldr	r3, [r7, #4]
    acc0:	2200      	movs	r2, #0
    acc2:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	2200      	movs	r2, #0
    acc8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    acca:	687b      	ldr	r3, [r7, #4]
    accc:	2200      	movs	r2, #0
    acce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	2200      	movs	r2, #0
    acd4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    acd6:	687b      	ldr	r3, [r7, #4]
    acd8:	2213      	movs	r2, #19
    acda:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	2200      	movs	r2, #0
    ace0:	775a      	strb	r2, [r3, #29]
#endif
}
    ace2:	46bd      	mov	sp, r7
    ace4:	b002      	add	sp, #8
    ace6:	bd80      	pop	{r7, pc}

0000ace8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    ace8:	b580      	push	{r7, lr}
    acea:	b084      	sub	sp, #16
    acec:	af00      	add	r7, sp, #0
    acee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    acf0:	687b      	ldr	r3, [r7, #4]
    acf2:	681b      	ldr	r3, [r3, #0]
    acf4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    acf6:	687b      	ldr	r3, [r7, #4]
    acf8:	681b      	ldr	r3, [r3, #0]
    acfa:	1c18      	adds	r0, r3, #0
    acfc:	4b09      	ldr	r3, [pc, #36]	; (ad24 <usart_enable+0x3c>)
    acfe:	4798      	blx	r3
    ad00:	1c03      	adds	r3, r0, #0
    ad02:	1c18      	adds	r0, r3, #0
    ad04:	4b08      	ldr	r3, [pc, #32]	; (ad28 <usart_enable+0x40>)
    ad06:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ad08:	687b      	ldr	r3, [r7, #4]
    ad0a:	1c18      	adds	r0, r3, #0
    ad0c:	4b07      	ldr	r3, [pc, #28]	; (ad2c <usart_enable+0x44>)
    ad0e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ad10:	68fb      	ldr	r3, [r7, #12]
    ad12:	681b      	ldr	r3, [r3, #0]
    ad14:	2202      	movs	r2, #2
    ad16:	431a      	orrs	r2, r3
    ad18:	68fb      	ldr	r3, [r7, #12]
    ad1a:	601a      	str	r2, [r3, #0]
}
    ad1c:	46bd      	mov	sp, r7
    ad1e:	b004      	add	sp, #16
    ad20:	bd80      	pop	{r7, pc}
    ad22:	46c0      	nop			; (mov r8, r8)
    ad24:	0000554d 	.word	0x0000554d
    ad28:	0000ab8d 	.word	0x0000ab8d
    ad2c:	0000ac09 	.word	0x0000ac09

0000ad30 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    ad30:	b580      	push	{r7, lr}
    ad32:	b084      	sub	sp, #16
    ad34:	af00      	add	r7, sp, #0
    ad36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ad38:	687b      	ldr	r3, [r7, #4]
    ad3a:	681b      	ldr	r3, [r3, #0]
    ad3c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    ad3e:	687b      	ldr	r3, [r7, #4]
    ad40:	681b      	ldr	r3, [r3, #0]
    ad42:	1c18      	adds	r0, r3, #0
    ad44:	4b0a      	ldr	r3, [pc, #40]	; (ad70 <usart_disable+0x40>)
    ad46:	4798      	blx	r3
    ad48:	1c03      	adds	r3, r0, #0
    ad4a:	1c18      	adds	r0, r3, #0
    ad4c:	4b09      	ldr	r3, [pc, #36]	; (ad74 <usart_disable+0x44>)
    ad4e:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    ad50:	687b      	ldr	r3, [r7, #4]
    ad52:	1c18      	adds	r0, r3, #0
    ad54:	4b08      	ldr	r3, [pc, #32]	; (ad78 <usart_disable+0x48>)
    ad56:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    ad58:	68fb      	ldr	r3, [r7, #12]
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	2202      	movs	r2, #2
    ad5e:	1c19      	adds	r1, r3, #0
    ad60:	4391      	bics	r1, r2
    ad62:	1c0a      	adds	r2, r1, #0
    ad64:	68fb      	ldr	r3, [r7, #12]
    ad66:	601a      	str	r2, [r3, #0]
}
    ad68:	46bd      	mov	sp, r7
    ad6a:	b004      	add	sp, #16
    ad6c:	bd80      	pop	{r7, pc}
    ad6e:	46c0      	nop			; (mov r8, r8)
    ad70:	0000554d 	.word	0x0000554d
    ad74:	0000abb9 	.word	0x0000abb9
    ad78:	0000ac09 	.word	0x0000ac09

0000ad7c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    ad7c:	b580      	push	{r7, lr}
    ad7e:	b082      	sub	sp, #8
    ad80:	af00      	add	r7, sp, #0
    ad82:	6078      	str	r0, [r7, #4]
    ad84:	1c0a      	adds	r2, r1, #0
    ad86:	1cfb      	adds	r3, r7, #3
    ad88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    ad8a:	687a      	ldr	r2, [r7, #4]
    ad8c:	2331      	movs	r3, #49	; 0x31
    ad8e:	5cd3      	ldrb	r3, [r2, r3]
    ad90:	b2da      	uxtb	r2, r3
    ad92:	1cfb      	adds	r3, r7, #3
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	2101      	movs	r1, #1
    ad98:	1c08      	adds	r0, r1, #0
    ad9a:	4098      	lsls	r0, r3
    ad9c:	1c03      	adds	r3, r0, #0
    ad9e:	b2db      	uxtb	r3, r3
    ada0:	4313      	orrs	r3, r2
    ada2:	b2db      	uxtb	r3, r3
    ada4:	b2d9      	uxtb	r1, r3
    ada6:	687a      	ldr	r2, [r7, #4]
    ada8:	2331      	movs	r3, #49	; 0x31
    adaa:	54d1      	strb	r1, [r2, r3]

}
    adac:	46bd      	mov	sp, r7
    adae:	b002      	add	sp, #8
    adb0:	bd80      	pop	{r7, pc}
    adb2:	46c0      	nop			; (mov r8, r8)

0000adb4 <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    adb4:	b580      	push	{r7, lr}
    adb6:	b082      	sub	sp, #8
    adb8:	af00      	add	r7, sp, #0
    adba:	6078      	str	r0, [r7, #4]
    adbc:	1c0a      	adds	r2, r1, #0
    adbe:	1cfb      	adds	r3, r7, #3
    adc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    adc2:	687a      	ldr	r2, [r7, #4]
    adc4:	2331      	movs	r3, #49	; 0x31
    adc6:	5cd3      	ldrb	r3, [r2, r3]
    adc8:	b2db      	uxtb	r3, r3
    adca:	1cfa      	adds	r2, r7, #3
    adcc:	7812      	ldrb	r2, [r2, #0]
    adce:	2101      	movs	r1, #1
    add0:	1c08      	adds	r0, r1, #0
    add2:	4090      	lsls	r0, r2
    add4:	1c02      	adds	r2, r0, #0
    add6:	b2d2      	uxtb	r2, r2
    add8:	43d2      	mvns	r2, r2
    adda:	b2d2      	uxtb	r2, r2
    addc:	4013      	ands	r3, r2
    adde:	b2db      	uxtb	r3, r3
    ade0:	b2d9      	uxtb	r1, r3
    ade2:	687a      	ldr	r2, [r7, #4]
    ade4:	2331      	movs	r3, #49	; 0x31
    ade6:	54d1      	strb	r1, [r2, r3]
}
    ade8:	46bd      	mov	sp, r7
    adea:	b002      	add	sp, #8
    adec:	bd80      	pop	{r7, pc}
    adee:	46c0      	nop			; (mov r8, r8)

0000adf0 <usart_tx_callback>:
 * Called by USART driver when transmit is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_tx_callback(struct usart_module *const module)
{
    adf0:	b580      	push	{r7, lr}
    adf2:	b082      	sub	sp, #8
    adf4:	af00      	add	r7, sp, #0
    adf6:	6078      	str	r0, [r7, #4]
	/* Data ready to be sent */
	if (udi_cdc_is_rx_ready()) {
    adf8:	4b0f      	ldr	r3, [pc, #60]	; (ae38 <usart_tx_callback+0x48>)
    adfa:	4798      	blx	r3
    adfc:	1c03      	adds	r3, r0, #0
    adfe:	2b00      	cmp	r3, #0
    ae00:	d00f      	beq.n	ae22 <usart_tx_callback+0x32>
		/* Transmit next data */
		ui_com_rx_start();
    ae02:	4b0e      	ldr	r3, [pc, #56]	; (ae3c <usart_tx_callback+0x4c>)
    ae04:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    ae06:	4b0e      	ldr	r3, [pc, #56]	; (ae40 <usart_tx_callback+0x50>)
    ae08:	4798      	blx	r3
    ae0a:	1c03      	adds	r3, r0, #0
    ae0c:	b2da      	uxtb	r2, r3
    ae0e:	4b0d      	ldr	r3, [pc, #52]	; (ae44 <usart_tx_callback+0x54>)
    ae10:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    ae12:	4a0d      	ldr	r2, [pc, #52]	; (ae48 <usart_tx_callback+0x58>)
    ae14:	4b0b      	ldr	r3, [pc, #44]	; (ae44 <usart_tx_callback+0x54>)
    ae16:	1c10      	adds	r0, r2, #0
    ae18:	1c19      	adds	r1, r3, #0
    ae1a:	2201      	movs	r2, #1
    ae1c:	4b0b      	ldr	r3, [pc, #44]	; (ae4c <usart_tx_callback+0x5c>)
    ae1e:	4798      	blx	r3
    ae20:	e006      	b.n	ae30 <usart_tx_callback+0x40>
	} else {
		/* Fifo empty then Stop UART transmission */
		usart_disable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    ae22:	4b09      	ldr	r3, [pc, #36]	; (ae48 <usart_tx_callback+0x58>)
    ae24:	1c18      	adds	r0, r3, #0
    ae26:	2100      	movs	r1, #0
    ae28:	4b09      	ldr	r3, [pc, #36]	; (ae50 <usart_tx_callback+0x60>)
    ae2a:	4798      	blx	r3
		ui_com_rx_stop();
    ae2c:	4b09      	ldr	r3, [pc, #36]	; (ae54 <usart_tx_callback+0x64>)
    ae2e:	4798      	blx	r3
	}
}
    ae30:	46bd      	mov	sp, r7
    ae32:	b002      	add	sp, #8
    ae34:	bd80      	pop	{r7, pc}
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	00002151 	.word	0x00002151
    ae3c:	00000d75 	.word	0x00000d75
    ae40:	000022b1 	.word	0x000022b1
    ae44:	2000712c 	.word	0x2000712c
    ae48:	200074c8 	.word	0x200074c8
    ae4c:	00005ded 	.word	0x00005ded
    ae50:	0000adb5 	.word	0x0000adb5
    ae54:	00000d7d 	.word	0x00000d7d

0000ae58 <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
	/* Data received */
	ui_com_tx_start();
    ae60:	4b10      	ldr	r3, [pc, #64]	; (aea4 <usart_rx_callback+0x4c>)
    ae62:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    ae64:	4b10      	ldr	r3, [pc, #64]	; (aea8 <usart_rx_callback+0x50>)
    ae66:	4798      	blx	r3
    ae68:	1c03      	adds	r3, r0, #0
    ae6a:	2201      	movs	r2, #1
    ae6c:	4053      	eors	r3, r2
    ae6e:	b2db      	uxtb	r3, r3
    ae70:	2b00      	cmp	r3, #0
    ae72:	d004      	beq.n	ae7e <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
    ae74:	4b0d      	ldr	r3, [pc, #52]	; (aeac <usart_rx_callback+0x54>)
    ae76:	4798      	blx	r3
		ui_com_overflow();
    ae78:	4b0d      	ldr	r3, [pc, #52]	; (aeb0 <usart_rx_callback+0x58>)
    ae7a:	4798      	blx	r3
    ae7c:	e004      	b.n	ae88 <usart_rx_callback+0x30>
	} else {
		udi_cdc_putc(rx_data);
    ae7e:	4b0d      	ldr	r3, [pc, #52]	; (aeb4 <usart_rx_callback+0x5c>)
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	1c18      	adds	r0, r3, #0
    ae84:	4b0c      	ldr	r3, [pc, #48]	; (aeb8 <usart_rx_callback+0x60>)
    ae86:	4798      	blx	r3
	}

	ui_com_tx_stop();
    ae88:	4b0c      	ldr	r3, [pc, #48]	; (aebc <usart_rx_callback+0x64>)
    ae8a:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    ae8c:	4a0c      	ldr	r2, [pc, #48]	; (aec0 <usart_rx_callback+0x68>)
    ae8e:	4b09      	ldr	r3, [pc, #36]	; (aeb4 <usart_rx_callback+0x5c>)
    ae90:	1c10      	adds	r0, r2, #0
    ae92:	1c19      	adds	r1, r3, #0
    ae94:	2201      	movs	r2, #1
    ae96:	4b0b      	ldr	r3, [pc, #44]	; (aec4 <usart_rx_callback+0x6c>)
    ae98:	4798      	blx	r3

	return;
    ae9a:	46c0      	nop			; (mov r8, r8)
}
    ae9c:	46bd      	mov	sp, r7
    ae9e:	b002      	add	sp, #8
    aea0:	bd80      	pop	{r7, pc}
    aea2:	46c0      	nop			; (mov r8, r8)
    aea4:	00000d85 	.word	0x00000d85
    aea8:	000023f1 	.word	0x000023f1
    aeac:	0000208d 	.word	0x0000208d
    aeb0:	00000d95 	.word	0x00000d95
    aeb4:	2000712d 	.word	0x2000712d
    aeb8:	00002531 	.word	0x00002531
    aebc:	00000d8d 	.word	0x00000d8d
    aec0:	200074c8 	.word	0x200074c8
    aec4:	00005e39 	.word	0x00005e39

0000aec8 <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    aec8:	b580      	push	{r7, lr}
    aeca:	b082      	sub	sp, #8
    aecc:	af00      	add	r7, sp, #0
    aece:	1c02      	adds	r2, r0, #0
    aed0:	1dfb      	adds	r3, r7, #7
    aed2:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    aed4:	4b0b      	ldr	r3, [pc, #44]	; (af04 <uart_rx_notify+0x3c>)
    aed6:	4798      	blx	r3
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    aed8:	4b0b      	ldr	r3, [pc, #44]	; (af08 <uart_rx_notify+0x40>)
    aeda:	1c18      	adds	r0, r3, #0
    aedc:	2100      	movs	r1, #0
    aede:	4b0b      	ldr	r3, [pc, #44]	; (af0c <uart_rx_notify+0x44>)
    aee0:	4798      	blx	r3
	tx_data = udi_cdc_getc();
    aee2:	4b0b      	ldr	r3, [pc, #44]	; (af10 <uart_rx_notify+0x48>)
    aee4:	4798      	blx	r3
    aee6:	1c03      	adds	r3, r0, #0
    aee8:	b2da      	uxtb	r2, r3
    aeea:	4b0a      	ldr	r3, [pc, #40]	; (af14 <uart_rx_notify+0x4c>)
    aeec:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    aeee:	4a06      	ldr	r2, [pc, #24]	; (af08 <uart_rx_notify+0x40>)
    aef0:	4b08      	ldr	r3, [pc, #32]	; (af14 <uart_rx_notify+0x4c>)
    aef2:	1c10      	adds	r0, r2, #0
    aef4:	1c19      	adds	r1, r3, #0
    aef6:	2201      	movs	r2, #1
    aef8:	4b07      	ldr	r3, [pc, #28]	; (af18 <uart_rx_notify+0x50>)
    aefa:	4798      	blx	r3
}
    aefc:	46bd      	mov	sp, r7
    aefe:	b002      	add	sp, #8
    af00:	bd80      	pop	{r7, pc}
    af02:	46c0      	nop			; (mov r8, r8)
    af04:	00000d75 	.word	0x00000d75
    af08:	200074c8 	.word	0x200074c8
    af0c:	0000ad7d 	.word	0x0000ad7d
    af10:	000022b1 	.word	0x000022b1
    af14:	2000712c 	.word	0x2000712c
    af18:	00005ded 	.word	0x00005ded

0000af1c <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    af1c:	b580      	push	{r7, lr}
    af1e:	b082      	sub	sp, #8
    af20:	af00      	add	r7, sp, #0
    af22:	1c02      	adds	r2, r0, #0
    af24:	6039      	str	r1, [r7, #0]
    af26:	1dfb      	adds	r3, r7, #7
    af28:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    af2a:	4b51      	ldr	r3, [pc, #324]	; (b070 <uart_config+0x154>)
    af2c:	1c18      	adds	r0, r3, #0
    af2e:	4b51      	ldr	r3, [pc, #324]	; (b074 <uart_config+0x158>)
    af30:	4798      	blx	r3

	switch (cfg->bCharFormat) {
    af32:	683b      	ldr	r3, [r7, #0]
    af34:	791b      	ldrb	r3, [r3, #4]
    af36:	2b01      	cmp	r3, #1
    af38:	d005      	beq.n	af46 <uart_config+0x2a>
    af3a:	2b02      	cmp	r3, #2
    af3c:	d107      	bne.n	af4e <uart_config+0x32>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    af3e:	4b4c      	ldr	r3, [pc, #304]	; (b070 <uart_config+0x154>)
    af40:	2240      	movs	r2, #64	; 0x40
    af42:	729a      	strb	r2, [r3, #10]
		break;
    af44:	e007      	b.n	af56 <uart_config+0x3a>

	case CDC_STOP_BITS_1_5:
		usart_conf.stopbits = USART_STOPBITS_1;
    af46:	4b4a      	ldr	r3, [pc, #296]	; (b070 <uart_config+0x154>)
    af48:	2200      	movs	r2, #0
    af4a:	729a      	strb	r2, [r3, #10]
		break;
    af4c:	e003      	b.n	af56 <uart_config+0x3a>

	case CDC_STOP_BITS_1:
	default:
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
    af4e:	4b48      	ldr	r3, [pc, #288]	; (b070 <uart_config+0x154>)
    af50:	2200      	movs	r2, #0
    af52:	729a      	strb	r2, [r3, #10]
		break;
    af54:	46c0      	nop			; (mov r8, r8)
	}

	switch (cfg->bParityType) {
    af56:	683b      	ldr	r3, [r7, #0]
    af58:	795b      	ldrb	r3, [r3, #5]
    af5a:	2b02      	cmp	r3, #2
    af5c:	d008      	beq.n	af70 <uart_config+0x54>
    af5e:	dc02      	bgt.n	af66 <uart_config+0x4a>
    af60:	2b01      	cmp	r3, #1
    af62:	d009      	beq.n	af78 <uart_config+0x5c>
    af64:	e015      	b.n	af92 <uart_config+0x76>
    af66:	2b03      	cmp	r3, #3
    af68:	d00b      	beq.n	af82 <uart_config+0x66>
    af6a:	2b04      	cmp	r3, #4
    af6c:	d00d      	beq.n	af8a <uart_config+0x6e>
    af6e:	e010      	b.n	af92 <uart_config+0x76>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    af70:	4b3f      	ldr	r3, [pc, #252]	; (b070 <uart_config+0x154>)
    af72:	2200      	movs	r2, #0
    af74:	811a      	strh	r2, [r3, #8]
		break;
    af76:	e010      	b.n	af9a <uart_config+0x7e>

	case CDC_PAR_ODD:
		usart_conf.parity = USART_PARITY_ODD;
    af78:	4b3d      	ldr	r3, [pc, #244]	; (b070 <uart_config+0x154>)
    af7a:	2280      	movs	r2, #128	; 0x80
    af7c:	0192      	lsls	r2, r2, #6
    af7e:	811a      	strh	r2, [r3, #8]
		break;
    af80:	e00b      	b.n	af9a <uart_config+0x7e>

	case CDC_PAR_MARK:
		usart_conf.parity = USART_PARITY_NONE;
    af82:	4b3b      	ldr	r3, [pc, #236]	; (b070 <uart_config+0x154>)
    af84:	22ff      	movs	r2, #255	; 0xff
    af86:	811a      	strh	r2, [r3, #8]
		break;
    af88:	e007      	b.n	af9a <uart_config+0x7e>

	case CDC_PAR_SPACE:
		usart_conf.parity = USART_PARITY_NONE;
    af8a:	4b39      	ldr	r3, [pc, #228]	; (b070 <uart_config+0x154>)
    af8c:	22ff      	movs	r2, #255	; 0xff
    af8e:	811a      	strh	r2, [r3, #8]
		break;
    af90:	e003      	b.n	af9a <uart_config+0x7e>

	case CDC_PAR_NONE:
	default:
		usart_conf.parity = USART_PARITY_NONE;
    af92:	4b37      	ldr	r3, [pc, #220]	; (b070 <uart_config+0x154>)
    af94:	22ff      	movs	r2, #255	; 0xff
    af96:	811a      	strh	r2, [r3, #8]
		break;
    af98:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg->bDataBits) {
    af9a:	683b      	ldr	r3, [r7, #0]
    af9c:	799b      	ldrb	r3, [r3, #6]
    af9e:	2b06      	cmp	r3, #6
    afa0:	d007      	beq.n	afb2 <uart_config+0x96>
    afa2:	2b07      	cmp	r3, #7
    afa4:	d009      	beq.n	afba <uart_config+0x9e>
    afa6:	2b05      	cmp	r3, #5
    afa8:	d10b      	bne.n	afc2 <uart_config+0xa6>
	case 5:
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    afaa:	4b31      	ldr	r3, [pc, #196]	; (b070 <uart_config+0x154>)
    afac:	2205      	movs	r2, #5
    afae:	72da      	strb	r2, [r3, #11]
		break;
    afb0:	e00b      	b.n	afca <uart_config+0xae>
	case 6:
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    afb2:	4b2f      	ldr	r3, [pc, #188]	; (b070 <uart_config+0x154>)
    afb4:	2206      	movs	r2, #6
    afb6:	72da      	strb	r2, [r3, #11]
		break;
    afb8:	e007      	b.n	afca <uart_config+0xae>
	case 7:
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    afba:	4b2d      	ldr	r3, [pc, #180]	; (b070 <uart_config+0x154>)
    afbc:	2207      	movs	r2, #7
    afbe:	72da      	strb	r2, [r3, #11]
		break;
    afc0:	e003      	b.n	afca <uart_config+0xae>
	case 8:
	default:
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
    afc2:	4b2b      	ldr	r3, [pc, #172]	; (b070 <uart_config+0x154>)
    afc4:	2200      	movs	r2, #0
    afc6:	72da      	strb	r2, [r3, #11]
		break;
    afc8:	46c0      	nop			; (mov r8, r8)
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    afca:	683b      	ldr	r3, [r7, #0]
    afcc:	781a      	ldrb	r2, [r3, #0]
    afce:	7859      	ldrb	r1, [r3, #1]
    afd0:	0209      	lsls	r1, r1, #8
    afd2:	430a      	orrs	r2, r1
    afd4:	7899      	ldrb	r1, [r3, #2]
    afd6:	0409      	lsls	r1, r1, #16
    afd8:	430a      	orrs	r2, r1
    afda:	78db      	ldrb	r3, [r3, #3]
    afdc:	061b      	lsls	r3, r3, #24
    afde:	4313      	orrs	r3, r2
    afe0:	1c1a      	adds	r2, r3, #0
    afe2:	4b23      	ldr	r3, [pc, #140]	; (b070 <uart_config+0x154>)
    afe4:	621a      	str	r2, [r3, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    afe6:	4b22      	ldr	r3, [pc, #136]	; (b070 <uart_config+0x154>)
    afe8:	2280      	movs	r2, #128	; 0x80
    afea:	0352      	lsls	r2, r2, #13
    afec:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    afee:	4b20      	ldr	r3, [pc, #128]	; (b070 <uart_config+0x154>)
    aff0:	4a21      	ldr	r2, [pc, #132]	; (b078 <uart_config+0x15c>)
    aff2:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    aff4:	4b1e      	ldr	r3, [pc, #120]	; (b070 <uart_config+0x154>)
    aff6:	4a21      	ldr	r2, [pc, #132]	; (b07c <uart_config+0x160>)
    aff8:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    affa:	4b1d      	ldr	r3, [pc, #116]	; (b070 <uart_config+0x154>)
    affc:	2201      	movs	r2, #1
    affe:	4252      	negs	r2, r2
    b000:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    b002:	4b1b      	ldr	r3, [pc, #108]	; (b070 <uart_config+0x154>)
    b004:	2201      	movs	r2, #1
    b006:	4252      	negs	r2, r2
    b008:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_disable(&usart_module_edbg);
    b00a:	4b1d      	ldr	r3, [pc, #116]	; (b080 <uart_config+0x164>)
    b00c:	1c18      	adds	r0, r3, #0
    b00e:	4b1d      	ldr	r3, [pc, #116]	; (b084 <uart_config+0x168>)
    b010:	4798      	blx	r3
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    b012:	491b      	ldr	r1, [pc, #108]	; (b080 <uart_config+0x164>)
    b014:	4a1c      	ldr	r2, [pc, #112]	; (b088 <uart_config+0x16c>)
    b016:	4b16      	ldr	r3, [pc, #88]	; (b070 <uart_config+0x154>)
    b018:	1c08      	adds	r0, r1, #0
    b01a:	1c11      	adds	r1, r2, #0
    b01c:	1c1a      	adds	r2, r3, #0
    b01e:	4b1b      	ldr	r3, [pc, #108]	; (b08c <uart_config+0x170>)
    b020:	4798      	blx	r3
	usart_enable(&usart_module_edbg);
    b022:	4b17      	ldr	r3, [pc, #92]	; (b080 <uart_config+0x164>)
    b024:	1c18      	adds	r0, r3, #0
    b026:	4b1a      	ldr	r3, [pc, #104]	; (b090 <uart_config+0x174>)
    b028:	4798      	blx	r3

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    b02a:	4a15      	ldr	r2, [pc, #84]	; (b080 <uart_config+0x164>)
    b02c:	4b19      	ldr	r3, [pc, #100]	; (b094 <uart_config+0x178>)
    b02e:	1c10      	adds	r0, r2, #0
    b030:	1c19      	adds	r1, r3, #0
    b032:	2200      	movs	r2, #0
    b034:	4b18      	ldr	r3, [pc, #96]	; (b098 <uart_config+0x17c>)
    b036:	4798      	blx	r3
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    b038:	4b11      	ldr	r3, [pc, #68]	; (b080 <uart_config+0x164>)
    b03a:	1c18      	adds	r0, r3, #0
    b03c:	2100      	movs	r1, #0
    b03e:	4b17      	ldr	r3, [pc, #92]	; (b09c <uart_config+0x180>)
    b040:	4798      	blx	r3
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    b042:	4a0f      	ldr	r2, [pc, #60]	; (b080 <uart_config+0x164>)
    b044:	4b16      	ldr	r3, [pc, #88]	; (b0a0 <uart_config+0x184>)
    b046:	1c10      	adds	r0, r2, #0
    b048:	1c19      	adds	r1, r3, #0
    b04a:	2201      	movs	r2, #1
    b04c:	4b12      	ldr	r3, [pc, #72]	; (b098 <uart_config+0x17c>)
    b04e:	4798      	blx	r3
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
    b050:	4b0b      	ldr	r3, [pc, #44]	; (b080 <uart_config+0x164>)
    b052:	1c18      	adds	r0, r3, #0
    b054:	2101      	movs	r1, #1
    b056:	4b11      	ldr	r3, [pc, #68]	; (b09c <uart_config+0x180>)
    b058:	4798      	blx	r3
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    b05a:	4a09      	ldr	r2, [pc, #36]	; (b080 <uart_config+0x164>)
    b05c:	4b11      	ldr	r3, [pc, #68]	; (b0a4 <uart_config+0x188>)
    b05e:	1c10      	adds	r0, r2, #0
    b060:	1c19      	adds	r1, r3, #0
    b062:	2201      	movs	r2, #1
    b064:	4b10      	ldr	r3, [pc, #64]	; (b0a8 <uart_config+0x18c>)
    b066:	4798      	blx	r3
}
    b068:	46bd      	mov	sp, r7
    b06a:	b002      	add	sp, #8
    b06c:	bd80      	pop	{r7, pc}
    b06e:	46c0      	nop			; (mov r8, r8)
    b070:	20007488 	.word	0x20007488
    b074:	0000ac2d 	.word	0x0000ac2d
    b078:	00160002 	.word	0x00160002
    b07c:	00170002 	.word	0x00170002
    b080:	200074c8 	.word	0x200074c8
    b084:	0000ad31 	.word	0x0000ad31
    b088:	42001400 	.word	0x42001400
    b08c:	000059f9 	.word	0x000059f9
    b090:	0000ace9 	.word	0x0000ace9
    b094:	0000adf1 	.word	0x0000adf1
    b098:	00005da5 	.word	0x00005da5
    b09c:	0000ad7d 	.word	0x0000ad7d
    b0a0:	0000ae59 	.word	0x0000ae59
    b0a4:	2000712d 	.word	0x2000712d
    b0a8:	00005e39 	.word	0x00005e39

0000b0ac <uart_open>:

void uart_open(uint8_t port)
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b082      	sub	sp, #8
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	1c02      	adds	r2, r0, #0
    b0b4:	1dfb      	adds	r3, r7, #7
    b0b6:	701a      	strb	r2, [r3, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
    b0b8:	4b03      	ldr	r3, [pc, #12]	; (b0c8 <uart_open+0x1c>)
    b0ba:	1c18      	adds	r0, r3, #0
    b0bc:	4b03      	ldr	r3, [pc, #12]	; (b0cc <uart_open+0x20>)
    b0be:	4798      	blx	r3
}
    b0c0:	46bd      	mov	sp, r7
    b0c2:	b002      	add	sp, #8
    b0c4:	bd80      	pop	{r7, pc}
    b0c6:	46c0      	nop			; (mov r8, r8)
    b0c8:	200074c8 	.word	0x200074c8
    b0cc:	0000ace9 	.word	0x0000ace9

0000b0d0 <uart_close>:

void uart_close(uint8_t port)
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b082      	sub	sp, #8
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	1c02      	adds	r2, r0, #0
    b0d8:	1dfb      	adds	r3, r7, #7
    b0da:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
    b0dc:	4b03      	ldr	r3, [pc, #12]	; (b0ec <uart_close+0x1c>)
    b0de:	1c18      	adds	r0, r3, #0
    b0e0:	4b03      	ldr	r3, [pc, #12]	; (b0f0 <uart_close+0x20>)
    b0e2:	4798      	blx	r3
}
    b0e4:	46bd      	mov	sp, r7
    b0e6:	b002      	add	sp, #8
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	200074c8 	.word	0x200074c8
    b0f0:	0000ad31 	.word	0x0000ad31

0000b0f4 <__aeabi_uidiv>:
    b0f4:	2900      	cmp	r1, #0
    b0f6:	d034      	beq.n	b162 <.udivsi3_skip_div0_test+0x6a>

0000b0f8 <.udivsi3_skip_div0_test>:
    b0f8:	2301      	movs	r3, #1
    b0fa:	2200      	movs	r2, #0
    b0fc:	b410      	push	{r4}
    b0fe:	4288      	cmp	r0, r1
    b100:	d32c      	bcc.n	b15c <.udivsi3_skip_div0_test+0x64>
    b102:	2401      	movs	r4, #1
    b104:	0724      	lsls	r4, r4, #28
    b106:	42a1      	cmp	r1, r4
    b108:	d204      	bcs.n	b114 <.udivsi3_skip_div0_test+0x1c>
    b10a:	4281      	cmp	r1, r0
    b10c:	d202      	bcs.n	b114 <.udivsi3_skip_div0_test+0x1c>
    b10e:	0109      	lsls	r1, r1, #4
    b110:	011b      	lsls	r3, r3, #4
    b112:	e7f8      	b.n	b106 <.udivsi3_skip_div0_test+0xe>
    b114:	00e4      	lsls	r4, r4, #3
    b116:	42a1      	cmp	r1, r4
    b118:	d204      	bcs.n	b124 <.udivsi3_skip_div0_test+0x2c>
    b11a:	4281      	cmp	r1, r0
    b11c:	d202      	bcs.n	b124 <.udivsi3_skip_div0_test+0x2c>
    b11e:	0049      	lsls	r1, r1, #1
    b120:	005b      	lsls	r3, r3, #1
    b122:	e7f8      	b.n	b116 <.udivsi3_skip_div0_test+0x1e>
    b124:	4288      	cmp	r0, r1
    b126:	d301      	bcc.n	b12c <.udivsi3_skip_div0_test+0x34>
    b128:	1a40      	subs	r0, r0, r1
    b12a:	431a      	orrs	r2, r3
    b12c:	084c      	lsrs	r4, r1, #1
    b12e:	42a0      	cmp	r0, r4
    b130:	d302      	bcc.n	b138 <.udivsi3_skip_div0_test+0x40>
    b132:	1b00      	subs	r0, r0, r4
    b134:	085c      	lsrs	r4, r3, #1
    b136:	4322      	orrs	r2, r4
    b138:	088c      	lsrs	r4, r1, #2
    b13a:	42a0      	cmp	r0, r4
    b13c:	d302      	bcc.n	b144 <.udivsi3_skip_div0_test+0x4c>
    b13e:	1b00      	subs	r0, r0, r4
    b140:	089c      	lsrs	r4, r3, #2
    b142:	4322      	orrs	r2, r4
    b144:	08cc      	lsrs	r4, r1, #3
    b146:	42a0      	cmp	r0, r4
    b148:	d302      	bcc.n	b150 <.udivsi3_skip_div0_test+0x58>
    b14a:	1b00      	subs	r0, r0, r4
    b14c:	08dc      	lsrs	r4, r3, #3
    b14e:	4322      	orrs	r2, r4
    b150:	2800      	cmp	r0, #0
    b152:	d003      	beq.n	b15c <.udivsi3_skip_div0_test+0x64>
    b154:	091b      	lsrs	r3, r3, #4
    b156:	d001      	beq.n	b15c <.udivsi3_skip_div0_test+0x64>
    b158:	0909      	lsrs	r1, r1, #4
    b15a:	e7e3      	b.n	b124 <.udivsi3_skip_div0_test+0x2c>
    b15c:	1c10      	adds	r0, r2, #0
    b15e:	bc10      	pop	{r4}
    b160:	4770      	bx	lr
    b162:	2800      	cmp	r0, #0
    b164:	d001      	beq.n	b16a <.udivsi3_skip_div0_test+0x72>
    b166:	2000      	movs	r0, #0
    b168:	43c0      	mvns	r0, r0
    b16a:	b407      	push	{r0, r1, r2}
    b16c:	4802      	ldr	r0, [pc, #8]	; (b178 <.udivsi3_skip_div0_test+0x80>)
    b16e:	a102      	add	r1, pc, #8	; (adr r1, b178 <.udivsi3_skip_div0_test+0x80>)
    b170:	1840      	adds	r0, r0, r1
    b172:	9002      	str	r0, [sp, #8]
    b174:	bd03      	pop	{r0, r1, pc}
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	000000d9 	.word	0x000000d9

0000b17c <__aeabi_uidivmod>:
    b17c:	2900      	cmp	r1, #0
    b17e:	d0f0      	beq.n	b162 <.udivsi3_skip_div0_test+0x6a>
    b180:	b503      	push	{r0, r1, lr}
    b182:	f7ff ffb9 	bl	b0f8 <.udivsi3_skip_div0_test>
    b186:	bc0e      	pop	{r1, r2, r3}
    b188:	4342      	muls	r2, r0
    b18a:	1a89      	subs	r1, r1, r2
    b18c:	4718      	bx	r3
    b18e:	46c0      	nop			; (mov r8, r8)

0000b190 <__aeabi_idiv>:
    b190:	2900      	cmp	r1, #0
    b192:	d041      	beq.n	b218 <.divsi3_skip_div0_test+0x84>

0000b194 <.divsi3_skip_div0_test>:
    b194:	b410      	push	{r4}
    b196:	1c04      	adds	r4, r0, #0
    b198:	404c      	eors	r4, r1
    b19a:	46a4      	mov	ip, r4
    b19c:	2301      	movs	r3, #1
    b19e:	2200      	movs	r2, #0
    b1a0:	2900      	cmp	r1, #0
    b1a2:	d500      	bpl.n	b1a6 <.divsi3_skip_div0_test+0x12>
    b1a4:	4249      	negs	r1, r1
    b1a6:	2800      	cmp	r0, #0
    b1a8:	d500      	bpl.n	b1ac <.divsi3_skip_div0_test+0x18>
    b1aa:	4240      	negs	r0, r0
    b1ac:	4288      	cmp	r0, r1
    b1ae:	d32c      	bcc.n	b20a <.divsi3_skip_div0_test+0x76>
    b1b0:	2401      	movs	r4, #1
    b1b2:	0724      	lsls	r4, r4, #28
    b1b4:	42a1      	cmp	r1, r4
    b1b6:	d204      	bcs.n	b1c2 <.divsi3_skip_div0_test+0x2e>
    b1b8:	4281      	cmp	r1, r0
    b1ba:	d202      	bcs.n	b1c2 <.divsi3_skip_div0_test+0x2e>
    b1bc:	0109      	lsls	r1, r1, #4
    b1be:	011b      	lsls	r3, r3, #4
    b1c0:	e7f8      	b.n	b1b4 <.divsi3_skip_div0_test+0x20>
    b1c2:	00e4      	lsls	r4, r4, #3
    b1c4:	42a1      	cmp	r1, r4
    b1c6:	d204      	bcs.n	b1d2 <.divsi3_skip_div0_test+0x3e>
    b1c8:	4281      	cmp	r1, r0
    b1ca:	d202      	bcs.n	b1d2 <.divsi3_skip_div0_test+0x3e>
    b1cc:	0049      	lsls	r1, r1, #1
    b1ce:	005b      	lsls	r3, r3, #1
    b1d0:	e7f8      	b.n	b1c4 <.divsi3_skip_div0_test+0x30>
    b1d2:	4288      	cmp	r0, r1
    b1d4:	d301      	bcc.n	b1da <.divsi3_skip_div0_test+0x46>
    b1d6:	1a40      	subs	r0, r0, r1
    b1d8:	431a      	orrs	r2, r3
    b1da:	084c      	lsrs	r4, r1, #1
    b1dc:	42a0      	cmp	r0, r4
    b1de:	d302      	bcc.n	b1e6 <.divsi3_skip_div0_test+0x52>
    b1e0:	1b00      	subs	r0, r0, r4
    b1e2:	085c      	lsrs	r4, r3, #1
    b1e4:	4322      	orrs	r2, r4
    b1e6:	088c      	lsrs	r4, r1, #2
    b1e8:	42a0      	cmp	r0, r4
    b1ea:	d302      	bcc.n	b1f2 <.divsi3_skip_div0_test+0x5e>
    b1ec:	1b00      	subs	r0, r0, r4
    b1ee:	089c      	lsrs	r4, r3, #2
    b1f0:	4322      	orrs	r2, r4
    b1f2:	08cc      	lsrs	r4, r1, #3
    b1f4:	42a0      	cmp	r0, r4
    b1f6:	d302      	bcc.n	b1fe <.divsi3_skip_div0_test+0x6a>
    b1f8:	1b00      	subs	r0, r0, r4
    b1fa:	08dc      	lsrs	r4, r3, #3
    b1fc:	4322      	orrs	r2, r4
    b1fe:	2800      	cmp	r0, #0
    b200:	d003      	beq.n	b20a <.divsi3_skip_div0_test+0x76>
    b202:	091b      	lsrs	r3, r3, #4
    b204:	d001      	beq.n	b20a <.divsi3_skip_div0_test+0x76>
    b206:	0909      	lsrs	r1, r1, #4
    b208:	e7e3      	b.n	b1d2 <.divsi3_skip_div0_test+0x3e>
    b20a:	1c10      	adds	r0, r2, #0
    b20c:	4664      	mov	r4, ip
    b20e:	2c00      	cmp	r4, #0
    b210:	d500      	bpl.n	b214 <.divsi3_skip_div0_test+0x80>
    b212:	4240      	negs	r0, r0
    b214:	bc10      	pop	{r4}
    b216:	4770      	bx	lr
    b218:	2800      	cmp	r0, #0
    b21a:	d006      	beq.n	b22a <.divsi3_skip_div0_test+0x96>
    b21c:	db03      	blt.n	b226 <.divsi3_skip_div0_test+0x92>
    b21e:	2000      	movs	r0, #0
    b220:	43c0      	mvns	r0, r0
    b222:	0840      	lsrs	r0, r0, #1
    b224:	e001      	b.n	b22a <.divsi3_skip_div0_test+0x96>
    b226:	2080      	movs	r0, #128	; 0x80
    b228:	0600      	lsls	r0, r0, #24
    b22a:	b407      	push	{r0, r1, r2}
    b22c:	4802      	ldr	r0, [pc, #8]	; (b238 <.divsi3_skip_div0_test+0xa4>)
    b22e:	a102      	add	r1, pc, #8	; (adr r1, b238 <.divsi3_skip_div0_test+0xa4>)
    b230:	1840      	adds	r0, r0, r1
    b232:	9002      	str	r0, [sp, #8]
    b234:	bd03      	pop	{r0, r1, pc}
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	00000019 	.word	0x00000019

0000b23c <__aeabi_idivmod>:
    b23c:	2900      	cmp	r1, #0
    b23e:	d0eb      	beq.n	b218 <.divsi3_skip_div0_test+0x84>
    b240:	b503      	push	{r0, r1, lr}
    b242:	f7ff ffa7 	bl	b194 <.divsi3_skip_div0_test>
    b246:	bc0e      	pop	{r1, r2, r3}
    b248:	4342      	muls	r2, r0
    b24a:	1a89      	subs	r1, r1, r2
    b24c:	4718      	bx	r3
    b24e:	46c0      	nop			; (mov r8, r8)

0000b250 <__aeabi_idiv0>:
    b250:	4770      	bx	lr
    b252:	46c0      	nop			; (mov r8, r8)

0000b254 <__ctzsi2>:
    b254:	4241      	negs	r1, r0
    b256:	4008      	ands	r0, r1
    b258:	211c      	movs	r1, #28
    b25a:	2301      	movs	r3, #1
    b25c:	041b      	lsls	r3, r3, #16
    b25e:	4298      	cmp	r0, r3
    b260:	d301      	bcc.n	b266 <__ctzsi2+0x12>
    b262:	0c00      	lsrs	r0, r0, #16
    b264:	3910      	subs	r1, #16
    b266:	0a1b      	lsrs	r3, r3, #8
    b268:	4298      	cmp	r0, r3
    b26a:	d301      	bcc.n	b270 <__ctzsi2+0x1c>
    b26c:	0a00      	lsrs	r0, r0, #8
    b26e:	3908      	subs	r1, #8
    b270:	091b      	lsrs	r3, r3, #4
    b272:	4298      	cmp	r0, r3
    b274:	d301      	bcc.n	b27a <__ctzsi2+0x26>
    b276:	0900      	lsrs	r0, r0, #4
    b278:	3904      	subs	r1, #4
    b27a:	a202      	add	r2, pc, #8	; (adr r2, b284 <__ctzsi2+0x30>)
    b27c:	5c10      	ldrb	r0, [r2, r0]
    b27e:	1a40      	subs	r0, r0, r1
    b280:	4770      	bx	lr
    b282:	46c0      	nop			; (mov r8, r8)
    b284:	1d1d1c1b 	.word	0x1d1d1c1b
    b288:	1e1e1e1e 	.word	0x1e1e1e1e
    b28c:	1f1f1f1f 	.word	0x1f1f1f1f
    b290:	1f1f1f1f 	.word	0x1f1f1f1f

0000b294 <__aeabi_lmul>:
    b294:	469c      	mov	ip, r3
    b296:	0403      	lsls	r3, r0, #16
    b298:	b5f0      	push	{r4, r5, r6, r7, lr}
    b29a:	0c1b      	lsrs	r3, r3, #16
    b29c:	0417      	lsls	r7, r2, #16
    b29e:	0c3f      	lsrs	r7, r7, #16
    b2a0:	0c15      	lsrs	r5, r2, #16
    b2a2:	1c1e      	adds	r6, r3, #0
    b2a4:	1c04      	adds	r4, r0, #0
    b2a6:	0c00      	lsrs	r0, r0, #16
    b2a8:	437e      	muls	r6, r7
    b2aa:	436b      	muls	r3, r5
    b2ac:	4347      	muls	r7, r0
    b2ae:	4345      	muls	r5, r0
    b2b0:	18fb      	adds	r3, r7, r3
    b2b2:	0c30      	lsrs	r0, r6, #16
    b2b4:	1818      	adds	r0, r3, r0
    b2b6:	4287      	cmp	r7, r0
    b2b8:	d902      	bls.n	b2c0 <__aeabi_lmul+0x2c>
    b2ba:	2380      	movs	r3, #128	; 0x80
    b2bc:	025b      	lsls	r3, r3, #9
    b2be:	18ed      	adds	r5, r5, r3
    b2c0:	0c03      	lsrs	r3, r0, #16
    b2c2:	18ed      	adds	r5, r5, r3
    b2c4:	4663      	mov	r3, ip
    b2c6:	435c      	muls	r4, r3
    b2c8:	434a      	muls	r2, r1
    b2ca:	0436      	lsls	r6, r6, #16
    b2cc:	0c36      	lsrs	r6, r6, #16
    b2ce:	18a1      	adds	r1, r4, r2
    b2d0:	0400      	lsls	r0, r0, #16
    b2d2:	1980      	adds	r0, r0, r6
    b2d4:	1949      	adds	r1, r1, r5
    b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b2d8 <__libc_init_array>:
    b2d8:	b570      	push	{r4, r5, r6, lr}
    b2da:	4b0e      	ldr	r3, [pc, #56]	; (b314 <__libc_init_array+0x3c>)
    b2dc:	4d0e      	ldr	r5, [pc, #56]	; (b318 <__libc_init_array+0x40>)
    b2de:	2400      	movs	r4, #0
    b2e0:	1aed      	subs	r5, r5, r3
    b2e2:	10ad      	asrs	r5, r5, #2
    b2e4:	1c1e      	adds	r6, r3, #0
    b2e6:	42ac      	cmp	r4, r5
    b2e8:	d004      	beq.n	b2f4 <__libc_init_array+0x1c>
    b2ea:	00a3      	lsls	r3, r4, #2
    b2ec:	58f3      	ldr	r3, [r6, r3]
    b2ee:	4798      	blx	r3
    b2f0:	3401      	adds	r4, #1
    b2f2:	e7f8      	b.n	b2e6 <__libc_init_array+0xe>
    b2f4:	f000 f974 	bl	b5e0 <_init>
    b2f8:	4b08      	ldr	r3, [pc, #32]	; (b31c <__libc_init_array+0x44>)
    b2fa:	4d09      	ldr	r5, [pc, #36]	; (b320 <__libc_init_array+0x48>)
    b2fc:	2400      	movs	r4, #0
    b2fe:	1aed      	subs	r5, r5, r3
    b300:	10ad      	asrs	r5, r5, #2
    b302:	1c1e      	adds	r6, r3, #0
    b304:	42ac      	cmp	r4, r5
    b306:	d004      	beq.n	b312 <__libc_init_array+0x3a>
    b308:	00a3      	lsls	r3, r4, #2
    b30a:	58f3      	ldr	r3, [r6, r3]
    b30c:	4798      	blx	r3
    b30e:	3401      	adds	r4, #1
    b310:	e7f8      	b.n	b304 <__libc_init_array+0x2c>
    b312:	bd70      	pop	{r4, r5, r6, pc}
    b314:	0000b5ec 	.word	0x0000b5ec
    b318:	0000b5ec 	.word	0x0000b5ec
    b31c:	0000b5ec 	.word	0x0000b5ec
    b320:	0000b5f0 	.word	0x0000b5f0

0000b324 <memcpy>:
    b324:	b510      	push	{r4, lr}
    b326:	2300      	movs	r3, #0
    b328:	4293      	cmp	r3, r2
    b32a:	d003      	beq.n	b334 <memcpy+0x10>
    b32c:	5ccc      	ldrb	r4, [r1, r3]
    b32e:	54c4      	strb	r4, [r0, r3]
    b330:	3301      	adds	r3, #1
    b332:	e7f9      	b.n	b328 <memcpy+0x4>
    b334:	bd10      	pop	{r4, pc}

0000b336 <memset>:
    b336:	1c03      	adds	r3, r0, #0
    b338:	1882      	adds	r2, r0, r2
    b33a:	4293      	cmp	r3, r2
    b33c:	d002      	beq.n	b344 <memset+0xe>
    b33e:	7019      	strb	r1, [r3, #0]
    b340:	3301      	adds	r3, #1
    b342:	e7fa      	b.n	b33a <memset+0x4>
    b344:	4770      	bx	lr
    b346:	0000      	movs	r0, r0
    b348:	2d6e4f22 	.word	0x2d6e4f22
    b34c:	70696843 	.word	0x70696843
    b350:	72695620 	.word	0x72695620
    b354:	6c617574 	.word	0x6c617574
    b358:	6d654d20 	.word	0x6d654d20
    b35c:	2279726f 	.word	0x2279726f
    b360:	00000000 	.word	0x00000000

0000b364 <lun_desc>:
    b364:	00001039 00001055 00000000 0000107d     9...U.......}...
    b374:	00001089 00001139 00001165 0000b348     ....9...e...H...
    b384:	00002ede 00002f10 00002f10 00002ec2     ...../.../......
    b394:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b3a4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b3b4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b3c4:	00002f10 00002f10 00002ec8 00002f10     ./.../......./..
    b3d4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b3e4:	00002f10 00002f10 00002ece 00002eea     ./.../..........
    b3f4:	00002f10 00002f10 00002ef0 00002f10     ./.../......./..
    b404:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b414:	00002f10 00002ee4 00002f10 00002f10     ./......./.../..
    b424:	00002f00 00002f10 00002f08 00002f10     ./.../.../.../..
    b434:	00002f10 00002f10 00002f10 00002ef6     ./.../.../......
    b444:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b454:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b464:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b474:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b484:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b494:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b4a4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b4b4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b4c4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b4d4:	00002f10 00002f10 00002f10 00002f10     ./.../.../.../..
    b4e4:	00002f10 00002f10 00002ed6 31333231     ./.../......1231
    b4f4:	32313332 33323133 00000000 0000444a     23123123....JD..
    b504:	00004432 0000444a 0000443a 0000444a     2D..JD..:D..JD..
    b514:	0000442a 0000444a 0000444a 0000444a     *D..JD..JD..JD..
    b524:	00004442 42000800 42000c00 42001000     BD.....B...B...B
    b534:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    b544:	00000e0d 000063b6 00006434 00006434     .....c..4d..4d..
    b554:	000063da 000063d4 000063e0 000063bc     .c...c...c...c..
    b564:	000063e6 0000641a 000065b0 00006600     .c...d...e...f..
    b574:	00006600 000065fc 000065a2 000065c2     .f...e...e...e..
    b584:	00006592 000065d4 000065e6 0000664e     .e...e...e..Nf..
    b594:	0000667c 0000667c 00006678 00006648     |f..|f..xf..Hf..
    b5a4:	00006654 00006642 0000665a 00006660     Tf..Bf..Zf..`f..
    b5b4:	01020300                                ....

0000b5b8 <_usb_device_irq_bits>:
    b5b8:	00080004 00800070 01000001 00000200     ....p...........

0000b5c8 <_usb_endpoint_irq_bits>:
    b5c8:	60100c03 00009374 0000938a 000094ea     ...`t...........
    b5d8:	000095b2 0000967a                       ....z...

0000b5e0 <_init>:
    b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5e2:	46c0      	nop			; (mov r8, r8)
    b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b5e6:	bc08      	pop	{r3}
    b5e8:	469e      	mov	lr, r3
    b5ea:	4770      	bx	lr

0000b5ec <__init_array_start>:
    b5ec:	000000d9 	.word	0x000000d9

0000b5f0 <_fini>:
    b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b5f6:	bc08      	pop	{r3}
    b5f8:	469e      	mov	lr, r3
    b5fa:	4770      	bx	lr

0000b5fc <__fini_array_start>:
    b5fc:	000000b1 	.word	0x000000b1
