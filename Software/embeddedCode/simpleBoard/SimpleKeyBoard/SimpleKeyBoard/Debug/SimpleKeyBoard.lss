
SimpleKeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac5c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002d4  20000000  0000ac5c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000039d4  200002d4  0000af30  000182d4  2**2
                  ALLOC
  3 .stack        00000b00  20003ca8  0000e904  000182d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000182d4  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000182fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002bd85  00000000  00000000  00018357  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000442a  00000000  00000000  000440dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005beb  00000000  00000000  00048506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010c8  00000000  00000000  0004e0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ee0  00000000  00000000  0004f1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000207e6  00000000  00000000  00050099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001842d  00000000  00000000  0007087f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094dfa  00000000  00000000  00088cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003898  00000000  00000000  0011daa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200047a8 	.word	0x200047a8
       4:	00009da1 	.word	0x00009da1
       8:	00009e91 	.word	0x00009e91
       c:	00009e91 	.word	0x00009e91
	...
      2c:	00009e91 	.word	0x00009e91
	...
      38:	00009e91 	.word	0x00009e91
      3c:	00009e91 	.word	0x00009e91
      40:	00009e91 	.word	0x00009e91
      44:	00009e91 	.word	0x00009e91
      48:	00009e91 	.word	0x00009e91
      4c:	00009e91 	.word	0x00009e91
      50:	00004351 	.word	0x00004351
      54:	00009e91 	.word	0x00009e91
      58:	00009e91 	.word	0x00009e91
      5c:	00009a11 	.word	0x00009a11
      60:	00009e91 	.word	0x00009e91
      64:	00004eb9 	.word	0x00004eb9
      68:	00004ecd 	.word	0x00004ecd
      6c:	00004ee1 	.word	0x00004ee1
      70:	00004ef5 	.word	0x00004ef5
      74:	00004f09 	.word	0x00004f09
      78:	00004f1d 	.word	0x00004f1d
      7c:	00009e91 	.word	0x00009e91
      80:	00009e91 	.word	0x00009e91
      84:	00009e91 	.word	0x00009e91
      88:	00009e91 	.word	0x00009e91
      8c:	00009e91 	.word	0x00009e91
      90:	00009e91 	.word	0x00009e91
      94:	00009e91 	.word	0x00009e91
      98:	00009e91 	.word	0x00009e91
      9c:	00009e91 	.word	0x00009e91
      a0:	00009e91 	.word	0x00009e91
      a4:	00009e91 	.word	0x00009e91
      a8:	00009e91 	.word	0x00009e91
      ac:	00009e91 	.word	0x00009e91

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200002d4 	.word	0x200002d4
      d0:	00000000 	.word	0x00000000
      d4:	0000ac5c 	.word	0x0000ac5c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000ac5c 	.word	0x0000ac5c
     104:	200002d8 	.word	0x200002d8
     108:	0000ac5c 	.word	0x0000ac5c
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b580      	push	{r7, lr}
     112:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     114:	2000      	movs	r0, #0
     116:	4b10      	ldr	r3, [pc, #64]	; (158 <delay_init+0x48>)
     118:	4798      	blx	r3
     11a:	1c02      	adds	r2, r0, #0
     11c:	4b0f      	ldr	r3, [pc, #60]	; (15c <delay_init+0x4c>)
     11e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     120:	4b0e      	ldr	r3, [pc, #56]	; (15c <delay_init+0x4c>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	4b0e      	ldr	r3, [pc, #56]	; (160 <delay_init+0x50>)
     126:	1c10      	adds	r0, r2, #0
     128:	22fa      	movs	r2, #250	; 0xfa
     12a:	0091      	lsls	r1, r2, #2
     12c:	4798      	blx	r3
     12e:	1c03      	adds	r3, r0, #0
     130:	1c1a      	adds	r2, r3, #0
     132:	4b0a      	ldr	r3, [pc, #40]	; (15c <delay_init+0x4c>)
     134:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <delay_init+0x4c>)
     138:	681a      	ldr	r2, [r3, #0]
     13a:	4b09      	ldr	r3, [pc, #36]	; (160 <delay_init+0x50>)
     13c:	1c10      	adds	r0, r2, #0
     13e:	22fa      	movs	r2, #250	; 0xfa
     140:	0091      	lsls	r1, r2, #2
     142:	4798      	blx	r3
     144:	1c03      	adds	r3, r0, #0
     146:	1c1a      	adds	r2, r3, #0
     148:	4b06      	ldr	r3, [pc, #24]	; (164 <delay_init+0x54>)
     14a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     14c:	4b06      	ldr	r3, [pc, #24]	; (168 <delay_init+0x58>)
     14e:	2205      	movs	r2, #5
     150:	601a      	str	r2, [r3, #0]
}
     152:	46bd      	mov	sp, r7
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00006409 	.word	0x00006409
     15c:	20000000 	.word	0x20000000
     160:	0000a8f9 	.word	0x0000a8f9
     164:	20000004 	.word	0x20000004
     168:	e000e010 	.word	0xe000e010

0000016c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     16c:	b580      	push	{r7, lr}
     16e:	b084      	sub	sp, #16
     170:	af00      	add	r7, sp, #0
     172:	1c02      	adds	r2, r0, #0
     174:	1dfb      	adds	r3, r7, #7
     176:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     178:	1c3b      	adds	r3, r7, #0
     17a:	330f      	adds	r3, #15
     17c:	1dfa      	adds	r2, r7, #7
     17e:	7812      	ldrb	r2, [r2, #0]
     180:	09d2      	lsrs	r2, r2, #7
     182:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     184:	1c3b      	adds	r3, r7, #0
     186:	330e      	adds	r3, #14
     188:	1dfa      	adds	r2, r7, #7
     18a:	7812      	ldrb	r2, [r2, #0]
     18c:	0952      	lsrs	r2, r2, #5
     18e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     190:	4b0d      	ldr	r3, [pc, #52]	; (1c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     192:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     194:	1c3b      	adds	r3, r7, #0
     196:	330f      	adds	r3, #15
     198:	781b      	ldrb	r3, [r3, #0]
     19a:	2b00      	cmp	r3, #0
     19c:	d10e      	bne.n	1bc <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     19e:	1c3b      	adds	r3, r7, #0
     1a0:	330f      	adds	r3, #15
     1a2:	781b      	ldrb	r3, [r3, #0]
     1a4:	009b      	lsls	r3, r3, #2
     1a6:	2210      	movs	r2, #16
     1a8:	19d2      	adds	r2, r2, r7
     1aa:	18d3      	adds	r3, r2, r3
     1ac:	3b08      	subs	r3, #8
     1ae:	681a      	ldr	r2, [r3, #0]
     1b0:	1c3b      	adds	r3, r7, #0
     1b2:	330e      	adds	r3, #14
     1b4:	781b      	ldrb	r3, [r3, #0]
     1b6:	01db      	lsls	r3, r3, #7
     1b8:	18d3      	adds	r3, r2, r3
     1ba:	e000      	b.n	1be <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
     1bc:	2300      	movs	r3, #0
	}
}
     1be:	1c18      	adds	r0, r3, #0
     1c0:	46bd      	mov	sp, r7
     1c2:	b004      	add	sp, #16
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	41004400 	.word	0x41004400

000001cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
     1d2:	1c02      	adds	r2, r0, #0
     1d4:	1dfb      	adds	r3, r7, #7
     1d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	781b      	ldrb	r3, [r3, #0]
     1dc:	1c18      	adds	r0, r3, #0
     1de:	4b03      	ldr	r3, [pc, #12]	; (1ec <port_get_group_from_gpio_pin+0x20>)
     1e0:	4798      	blx	r3
     1e2:	1c03      	adds	r3, r0, #0
}
     1e4:	1c18      	adds	r0, r3, #0
     1e6:	46bd      	mov	sp, r7
     1e8:	b002      	add	sp, #8
     1ea:	bd80      	pop	{r7, pc}
     1ec:	0000016d 	.word	0x0000016d

000001f0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b084      	sub	sp, #16
     1f4:	af00      	add	r7, sp, #0
     1f6:	1c0a      	adds	r2, r1, #0
     1f8:	1dfb      	adds	r3, r7, #7
     1fa:	1c01      	adds	r1, r0, #0
     1fc:	7019      	strb	r1, [r3, #0]
     1fe:	1dbb      	adds	r3, r7, #6
     200:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     202:	1dfb      	adds	r3, r7, #7
     204:	781b      	ldrb	r3, [r3, #0]
     206:	1c18      	adds	r0, r3, #0
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <port_pin_set_output_level+0x50>)
     20a:	4798      	blx	r3
     20c:	1c03      	adds	r3, r0, #0
     20e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     210:	1dfb      	adds	r3, r7, #7
     212:	781a      	ldrb	r2, [r3, #0]
     214:	231f      	movs	r3, #31
     216:	4013      	ands	r3, r2
     218:	2201      	movs	r2, #1
     21a:	1c11      	adds	r1, r2, #0
     21c:	4099      	lsls	r1, r3
     21e:	1c0b      	adds	r3, r1, #0
     220:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     222:	1dbb      	adds	r3, r7, #6
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2b00      	cmp	r3, #0
     228:	d003      	beq.n	232 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	68ba      	ldr	r2, [r7, #8]
     22e:	619a      	str	r2, [r3, #24]
     230:	e002      	b.n	238 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     232:	68fb      	ldr	r3, [r7, #12]
     234:	68ba      	ldr	r2, [r7, #8]
     236:	615a      	str	r2, [r3, #20]
	}
}
     238:	46bd      	mov	sp, r7
     23a:	b004      	add	sp, #16
     23c:	bd80      	pop	{r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	000001cd 	.word	0x000001cd

00000244 <udc_remotewakeup>:

/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
     244:	b580      	push	{r7, lr}
     246:	af00      	add	r7, sp, #0
	udd_send_remotewakeup();
     248:	4b01      	ldr	r3, [pc, #4]	; (250 <udc_remotewakeup+0xc>)
     24a:	4798      	blx	r3
}
     24c:	46bd      	mov	sp, r7
     24e:	bd80      	pop	{r7, pc}
     250:	00007749 	.word	0x00007749

00000254 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     254:	b580      	push	{r7, lr}
     256:	af00      	add	r7, sp, #0
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
     258:	4b03      	ldr	r3, [pc, #12]	; (268 <ui_wakeup_handler+0x14>)
     25a:	4798      	blx	r3
	LED_On(LED_0_PIN);
     25c:	203e      	movs	r0, #62	; 0x3e
     25e:	2100      	movs	r1, #0
     260:	4b02      	ldr	r3, [pc, #8]	; (26c <ui_wakeup_handler+0x18>)
     262:	4798      	blx	r3
}
     264:	46bd      	mov	sp, r7
     266:	bd80      	pop	{r7, pc}
     268:	00000245 	.word	0x00000245
     26c:	000001f1 	.word	0x000001f1

00000270 <ui_init>:

void ui_init(void)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     276:	1d3b      	adds	r3, r7, #4
     278:	1c18      	adds	r0, r3, #0
     27a:	4b14      	ldr	r3, [pc, #80]	; (2cc <ui_init+0x5c>)
     27c:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     27e:	1d3b      	adds	r3, r7, #4
     280:	220f      	movs	r2, #15
     282:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     284:	1d3b      	adds	r3, r7, #4
     286:	2200      	movs	r2, #0
     288:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     28a:	1d3b      	adds	r3, r7, #4
     28c:	2201      	movs	r2, #1
     28e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.filter_input_signal = true;
     290:	1d3b      	adds	r3, r7, #4
     292:	2201      	movs	r2, #1
     294:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     296:	1d3b      	adds	r3, r7, #4
     298:	2202      	movs	r2, #2
     29a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     29c:	1d3b      	adds	r3, r7, #4
     29e:	200f      	movs	r0, #15
     2a0:	1c19      	adds	r1, r3, #0
     2a2:	4b0b      	ldr	r3, [pc, #44]	; (2d0 <ui_init+0x60>)
     2a4:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     2a6:	4b0b      	ldr	r3, [pc, #44]	; (2d4 <ui_init+0x64>)
     2a8:	1c18      	adds	r0, r3, #0
     2aa:	210f      	movs	r1, #15
     2ac:	2200      	movs	r2, #0
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <ui_init+0x68>)
     2b0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     2b2:	200f      	movs	r0, #15
     2b4:	2100      	movs	r1, #0
     2b6:	4b09      	ldr	r3, [pc, #36]	; (2dc <ui_init+0x6c>)
     2b8:	4798      	blx	r3

	/* Initialize LEDs */
	initKeyBoard();
     2ba:	4b09      	ldr	r3, [pc, #36]	; (2e0 <ui_init+0x70>)
     2bc:	4798      	blx	r3
	LED_On(LED_0_PIN);
     2be:	203e      	movs	r0, #62	; 0x3e
     2c0:	2100      	movs	r1, #0
     2c2:	4b08      	ldr	r3, [pc, #32]	; (2e4 <ui_init+0x74>)
     2c4:	4798      	blx	r3
}
     2c6:	46bd      	mov	sp, r7
     2c8:	b004      	add	sp, #16
     2ca:	bd80      	pop	{r7, pc}
     2cc:	0000464d 	.word	0x0000464d
     2d0:	00004681 	.word	0x00004681
     2d4:	00000255 	.word	0x00000255
     2d8:	00004265 	.word	0x00004265
     2dc:	000042c1 	.word	0x000042c1
     2e0:	000012ad 	.word	0x000012ad
     2e4:	000001f1 	.word	0x000001f1

000002e8 <ui_powerdown>:

void ui_powerdown(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
     2ec:	203e      	movs	r0, #62	; 0x3e
     2ee:	2101      	movs	r1, #1
     2f0:	4b01      	ldr	r3, [pc, #4]	; (2f8 <ui_powerdown+0x10>)
     2f2:	4798      	blx	r3
}
     2f4:	46bd      	mov	sp, r7
     2f6:	bd80      	pop	{r7, pc}
     2f8:	000001f1 	.word	0x000001f1

000002fc <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
	//enable the external interrupts here
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     300:	200f      	movs	r0, #15
     302:	2100      	movs	r1, #0
     304:	4b01      	ldr	r3, [pc, #4]	; (30c <ui_wakeup_enable+0x10>)
     306:	4798      	blx	r3
}
     308:	46bd      	mov	sp, r7
     30a:	bd80      	pop	{r7, pc}
     30c:	000042c1 	.word	0x000042c1

00000310 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     310:	b580      	push	{r7, lr}
     312:	af00      	add	r7, sp, #0
	//disable the external interrupts here
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     314:	200f      	movs	r0, #15
     316:	2100      	movs	r1, #0
     318:	4b01      	ldr	r3, [pc, #4]	; (320 <ui_wakeup_disable+0x10>)
     31a:	4798      	blx	r3
}
     31c:	46bd      	mov	sp, r7
     31e:	bd80      	pop	{r7, pc}
     320:	00004309 	.word	0x00004309

00000324 <ui_wakeup>:

void ui_wakeup(void)
{
     324:	b580      	push	{r7, lr}
     326:	af00      	add	r7, sp, #0
	//when we wake up we need to turn all of the pins low, instead of driving them high
	LED_On(LED_0_PIN);
     328:	203e      	movs	r0, #62	; 0x3e
     32a:	2100      	movs	r1, #0
     32c:	4b01      	ldr	r3, [pc, #4]	; (334 <ui_wakeup+0x10>)
     32e:	4798      	blx	r3
}
     330:	46bd      	mov	sp, r7
     332:	bd80      	pop	{r7, pc}
     334:	000001f1 	.word	0x000001f1

00000338 <ui_com_open>:

void ui_com_open(uint8_t port)
{
     338:	b580      	push	{r7, lr}
     33a:	b082      	sub	sp, #8
     33c:	af00      	add	r7, sp, #0
     33e:	1c02      	adds	r2, r0, #0
     340:	1dfb      	adds	r3, r7, #7
     342:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     344:	46bd      	mov	sp, r7
     346:	b002      	add	sp, #8
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)

0000034c <ui_com_close>:


void ui_com_close(uint8_t port)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
     352:	1c02      	adds	r2, r0, #0
     354:	1dfb      	adds	r3, r7, #7
     356:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     358:	46bd      	mov	sp, r7
     35a:	b002      	add	sp, #8
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)

00000360 <ui_com_rx_start>:


void ui_com_rx_start(void)
{
     360:	b580      	push	{r7, lr}
     362:	af00      	add	r7, sp, #0

}
     364:	46bd      	mov	sp, r7
     366:	bd80      	pop	{r7, pc}

00000368 <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{
     368:	b580      	push	{r7, lr}
     36a:	af00      	add	r7, sp, #0

}
     36c:	46bd      	mov	sp, r7
     36e:	bd80      	pop	{r7, pc}

00000370 <ui_com_tx_start>:


void ui_com_tx_start(void)
{
     370:	b580      	push	{r7, lr}
     372:	af00      	add	r7, sp, #0

}
     374:	46bd      	mov	sp, r7
     376:	bd80      	pop	{r7, pc}

00000378 <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{
     378:	b580      	push	{r7, lr}
     37a:	af00      	add	r7, sp, #0

}
     37c:	46bd      	mov	sp, r7
     37e:	bd80      	pop	{r7, pc}

00000380 <ui_com_overflow>:

}


void ui_com_overflow(void)
{
     380:	b580      	push	{r7, lr}
     382:	af00      	add	r7, sp, #0

}
     384:	46bd      	mov	sp, r7
     386:	bd80      	pop	{r7, pc}

00000388 <ui_process>:
void ui_stop_write(void)
{
}

void ui_process(uint16_t framenumber)
{
     388:	b580      	push	{r7, lr}
     38a:	b0ae      	sub	sp, #184	; 0xb8
     38c:	af00      	add	r7, sp, #0
     38e:	1c02      	adds	r2, r0, #0
     390:	1dbb      	adds	r3, r7, #6
     392:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	uint8_t value;
	uint8_t numberOfKeys = 0;
     394:	1c3b      	adds	r3, r7, #0
     396:	33b6      	adds	r3, #182	; 0xb6
     398:	2200      	movs	r2, #0
     39a:	701a      	strb	r2, [r3, #0]
	uint8_t i= 0;
     39c:	1c3b      	adds	r3, r7, #0
     39e:	33b7      	adds	r3, #183	; 0xb7
     3a0:	2200      	movs	r2, #0
     3a2:	701a      	strb	r2, [r3, #0]
	uint8_t hidOnlyCount = 0;
     3a4:	1c3b      	adds	r3, r7, #0
     3a6:	33b5      	adds	r3, #181	; 0xb5
     3a8:	2200      	movs	r2, #0
     3aa:	701a      	strb	r2, [r3, #0]
	uint8_t keyValue = 0;
     3ac:	1c3b      	adds	r3, r7, #0
     3ae:	33b4      	adds	r3, #180	; 0xb4
     3b0:	2200      	movs	r2, #0
     3b2:	701a      	strb	r2, [r3, #0]

	//use the cpt_sof to handle the debounce
	cpt_sof++;
     3b4:	4b28      	ldr	r3, [pc, #160]	; (458 <ui_process+0xd0>)
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	3301      	adds	r3, #1
     3ba:	b2da      	uxtb	r2, r3
     3bc:	4b26      	ldr	r3, [pc, #152]	; (458 <ui_process+0xd0>)
     3be:	701a      	strb	r2, [r3, #0]
	if(cpt_sof < 15)
     3c0:	4b25      	ldr	r3, [pc, #148]	; (458 <ui_process+0xd0>)
     3c2:	781b      	ldrb	r3, [r3, #0]
     3c4:	2b0e      	cmp	r3, #14
     3c6:	d944      	bls.n	452 <ui_process+0xca>
	{
		return;
	}
	cpt_sof = 0;
     3c8:	4b23      	ldr	r3, [pc, #140]	; (458 <ui_process+0xd0>)
     3ca:	2200      	movs	r2, #0
     3cc:	701a      	strb	r2, [r3, #0]

	//array of pointers to an array
	//Yes this Way more that is needed
	KEY_OBJ *keyArr[NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS];
	//clear out all of the in the array
	memset(keyArr, 0, (sizeof(KEY_OBJ*)*NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS));
     3ce:	1c3b      	adds	r3, r7, #0
     3d0:	330c      	adds	r3, #12
     3d2:	1c18      	adds	r0, r3, #0
     3d4:	2100      	movs	r1, #0
     3d6:	22a8      	movs	r2, #168	; 0xa8
     3d8:	4b20      	ldr	r3, [pc, #128]	; (45c <ui_process+0xd4>)
     3da:	4798      	blx	r3

	if ((framenumber % 1000) == 0) {
     3dc:	1dbb      	adds	r3, r7, #6
     3de:	881a      	ldrh	r2, [r3, #0]
     3e0:	4b1f      	ldr	r3, [pc, #124]	; (460 <ui_process+0xd8>)
     3e2:	1c10      	adds	r0, r2, #0
     3e4:	22fa      	movs	r2, #250	; 0xfa
     3e6:	0091      	lsls	r1, r2, #2
     3e8:	4798      	blx	r3
     3ea:	1c0b      	adds	r3, r1, #0
     3ec:	b29b      	uxth	r3, r3
     3ee:	2b00      	cmp	r3, #0
     3f0:	d103      	bne.n	3fa <ui_process+0x72>
		LED_On(LED_0_PIN);
     3f2:	203e      	movs	r0, #62	; 0x3e
     3f4:	2100      	movs	r1, #0
     3f6:	4b1b      	ldr	r3, [pc, #108]	; (464 <ui_process+0xdc>)
     3f8:	4798      	blx	r3
	}
	
	
	
	if ((framenumber % 1000) == 500) {
     3fa:	1dbb      	adds	r3, r7, #6
     3fc:	881a      	ldrh	r2, [r3, #0]
     3fe:	4b18      	ldr	r3, [pc, #96]	; (460 <ui_process+0xd8>)
     400:	1c10      	adds	r0, r2, #0
     402:	22fa      	movs	r2, #250	; 0xfa
     404:	0091      	lsls	r1, r2, #2
     406:	4798      	blx	r3
     408:	1c0b      	adds	r3, r1, #0
     40a:	b29a      	uxth	r2, r3
     40c:	23fa      	movs	r3, #250	; 0xfa
     40e:	005b      	lsls	r3, r3, #1
     410:	429a      	cmp	r2, r3
     412:	d103      	bne.n	41c <ui_process+0x94>
		LED_Off(LED_0_PIN);
     414:	203e      	movs	r0, #62	; 0x3e
     416:	2101      	movs	r1, #1
     418:	4b12      	ldr	r3, [pc, #72]	; (464 <ui_process+0xdc>)
     41a:	4798      	blx	r3
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     41c:	1c3b      	adds	r3, r7, #0
     41e:	33b7      	adds	r3, #183	; 0xb7
     420:	2200      	movs	r2, #0
     422:	701a      	strb	r2, [r3, #0]
     424:	e00e      	b.n	444 <ui_process+0xbc>
	{
		keyArr[i] = 0;
     426:	1c3b      	adds	r3, r7, #0
     428:	33b7      	adds	r3, #183	; 0xb7
     42a:	781a      	ldrb	r2, [r3, #0]
     42c:	1c3b      	adds	r3, r7, #0
     42e:	330c      	adds	r3, #12
     430:	0092      	lsls	r2, r2, #2
     432:	2100      	movs	r1, #0
     434:	50d1      	str	r1, [r2, r3]
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     436:	1c3b      	adds	r3, r7, #0
     438:	33b7      	adds	r3, #183	; 0xb7
     43a:	781a      	ldrb	r2, [r3, #0]
     43c:	1c3b      	adds	r3, r7, #0
     43e:	33b7      	adds	r3, #183	; 0xb7
     440:	3201      	adds	r2, #1
     442:	701a      	strb	r2, [r3, #0]
     444:	1c3b      	adds	r3, r7, #0
     446:	33b7      	adds	r3, #183	; 0xb7
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	2b29      	cmp	r3, #41	; 0x29
     44c:	d9eb      	bls.n	426 <ui_process+0x9e>
	{
		keyArr[i] = 0;
	}
	//checks and sends the keys to the pc	
	checkKeys();
     44e:	4b06      	ldr	r3, [pc, #24]	; (468 <ui_process+0xe0>)
     450:	4798      	blx	r3
				//sequence_running = false;
				//button_function  = 1;
			//}
		//}
	//}
}
     452:	46bd      	mov	sp, r7
     454:	b02e      	add	sp, #184	; 0xb8
     456:	bd80      	pop	{r7, pc}
     458:	200002f0 	.word	0x200002f0
     45c:	0000ab3b 	.word	0x0000ab3b
     460:	0000a981 	.word	0x0000a981
     464:	000001f1 	.word	0x000001f1
     468:	00001715 	.word	0x00001715

0000046c <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
     46c:	b580      	push	{r7, lr}
     46e:	b082      	sub	sp, #8
     470:	af00      	add	r7, sp, #0
     472:	1c02      	adds	r2, r0, #0
     474:	1dfb      	adds	r3, r7, #7
     476:	701a      	strb	r2, [r3, #0]
	UNUSED(value);
}
     478:	46bd      	mov	sp, r7
     47a:	b002      	add	sp, #8
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)

00000480 <initStandardKey>:
#include "Salloc.h"
#include "Key.h"
//here we will create all of the keys that there are

GENERIC_KEY * initStandardKey(uint8_t hid_key, uint8_t hid_modifier)
{
     480:	b580      	push	{r7, lr}
     482:	b084      	sub	sp, #16
     484:	af00      	add	r7, sp, #0
     486:	1c0a      	adds	r2, r1, #0
     488:	1dfb      	adds	r3, r7, #7
     48a:	1c01      	adds	r1, r0, #0
     48c:	7019      	strb	r1, [r3, #0]
     48e:	1dbb      	adds	r3, r7, #6
     490:	701a      	strb	r2, [r3, #0]
	//Allocate the Ram for the key from the salloc	
	//if we want to support some other source we can add a different one
	STANDARD_KEY *key = (STANDARD_KEY*)salloc(sizeof(STANDARD_KEY));
     492:	2003      	movs	r0, #3
     494:	4b09      	ldr	r3, [pc, #36]	; (4bc <initStandardKey+0x3c>)
     496:	4798      	blx	r3
     498:	1c03      	adds	r3, r0, #0
     49a:	60fb      	str	r3, [r7, #12]
	key->type = STANDARD_KEY_TYPE;
     49c:	68fb      	ldr	r3, [r7, #12]
     49e:	2200      	movs	r2, #0
     4a0:	701a      	strb	r2, [r3, #0]
	key->hid = hid_key;
     4a2:	68fb      	ldr	r3, [r7, #12]
     4a4:	1dfa      	adds	r2, r7, #7
     4a6:	7812      	ldrb	r2, [r2, #0]
     4a8:	705a      	strb	r2, [r3, #1]
	key->modifiers = hid_modifier;
     4aa:	68fb      	ldr	r3, [r7, #12]
     4ac:	1dba      	adds	r2, r7, #6
     4ae:	7812      	ldrb	r2, [r2, #0]
     4b0:	709a      	strb	r2, [r3, #2]
	return (GENERIC_KEY*)key;
     4b2:	68fb      	ldr	r3, [r7, #12]
}
     4b4:	1c18      	adds	r0, r3, #0
     4b6:	46bd      	mov	sp, r7
     4b8:	b004      	add	sp, #16
     4ba:	bd80      	pop	{r7, pc}
     4bc:	00009eb9 	.word	0x00009eb9

000004c0 <arch_ioport_pin_to_port_id>:
	
	tempKey = initStandardKey(HID_BACKSLASH, HID_MODIFIER_NONE);
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
	
	tempKey = initStandardKey(HID_LEFT, HID_MODIFIER_NONE);
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     4c0:	b580      	push	{r7, lr}
     4c2:	b082      	sub	sp, #8
     4c4:	af00      	add	r7, sp, #0
     4c6:	6078      	str	r0, [r7, #4]
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	095b      	lsrs	r3, r3, #5
     4cc:	1c18      	adds	r0, r3, #0
	
	tempKey = initStandardKey(HID_RIGHT, HID_MODIFIER_NONE);
     4ce:	46bd      	mov	sp, r7
     4d0:	b002      	add	sp, #8
     4d2:	bd80      	pop	{r7, pc}

000004d4 <arch_ioport_port_to_base>:
     4d4:	b580      	push	{r7, lr}
     4d6:	b082      	sub	sp, #8
     4d8:	af00      	add	r7, sp, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     4da:	6078      	str	r0, [r7, #4]
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	01db      	lsls	r3, r3, #7
     4e0:	4a02      	ldr	r2, [pc, #8]	; (4ec <arch_ioport_port_to_base+0x18>)
     4e2:	189b      	adds	r3, r3, r2
     4e4:	1c18      	adds	r0, r3, #0
     4e6:	46bd      	mov	sp, r7
     4e8:	b002      	add	sp, #8
     4ea:	bd80      	pop	{r7, pc}
     4ec:	41004400 	.word	0x41004400

000004f0 <arch_ioport_pin_to_base>:
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
	
	
	//Thumb keys left hand
	tempKey = initStandardKey(HID_BACKSPACE, HID_MODIFIER_NONE);
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	1c18      	adds	r0, r3, #0
     4fc:	4b05      	ldr	r3, [pc, #20]	; (514 <arch_ioport_pin_to_base+0x24>)
     4fe:	4798      	blx	r3
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     500:	1c03      	adds	r3, r0, #0
     502:	1c18      	adds	r0, r3, #0
     504:	4b04      	ldr	r3, [pc, #16]	; (518 <arch_ioport_pin_to_base+0x28>)
     506:	4798      	blx	r3
     508:	1c03      	adds	r3, r0, #0
     50a:	1c18      	adds	r0, r3, #0
     50c:	46bd      	mov	sp, r7
     50e:	b002      	add	sp, #8
     510:	bd80      	pop	{r7, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	000004c1 	.word	0x000004c1
     518:	000004d5 	.word	0x000004d5

0000051c <arch_ioport_pin_to_mask>:
	
	tempKey = initStandardKey(HID_DELETE, HID_MODIFIER_NONE);
     51c:	b580      	push	{r7, lr}
     51e:	b082      	sub	sp, #8
     520:	af00      	add	r7, sp, #0
     522:	6078      	str	r0, [r7, #4]
     524:	687a      	ldr	r2, [r7, #4]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     526:	231f      	movs	r3, #31
     528:	4013      	ands	r3, r2
     52a:	2201      	movs	r2, #1
     52c:	1c11      	adds	r1, r2, #0
     52e:	4099      	lsls	r1, r3
     530:	1c0b      	adds	r3, r1, #0
     532:	1c18      	adds	r0, r3, #0
     534:	46bd      	mov	sp, r7
     536:	b002      	add	sp, #8
     538:	bd80      	pop	{r7, pc}
     53a:	46c0      	nop			; (mov r8, r8)

0000053c <arch_ioport_init>:
     53c:	b580      	push	{r7, lr}
     53e:	af00      	add	r7, sp, #0
	
	tempKey = initStandardKey(HID_END, HID_MODIFIER_NONE);
     540:	46bd      	mov	sp, r7
     542:	bd80      	pop	{r7, pc}

00000544 <arch_ioport_set_port_mode>:
     544:	b580      	push	{r7, lr}
     546:	b08a      	sub	sp, #40	; 0x28
     548:	af00      	add	r7, sp, #0
     54a:	60f8      	str	r0, [r7, #12]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     54c:	60b9      	str	r1, [r7, #8]
     54e:	607a      	str	r2, [r7, #4]
     550:	68fb      	ldr	r3, [r7, #12]
     552:	1c18      	adds	r0, r3, #0
     554:	4b2d      	ldr	r3, [pc, #180]	; (60c <arch_ioport_set_port_mode+0xc8>)
     556:	4798      	blx	r3
     558:	1c03      	adds	r3, r0, #0
     55a:	623b      	str	r3, [r7, #32]
     55c:	2300      	movs	r3, #0
     55e:	627b      	str	r3, [r7, #36]	; 0x24
     560:	2300      	movs	r3, #0
     562:	61fb      	str	r3, [r7, #28]
     564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	
	tempKey = initStandardKey(HID_HOME, HID_MODIFIER_NONE);
     566:	2280      	movs	r2, #128	; 0x80
     568:	0292      	lsls	r2, r2, #10
     56a:	4313      	orrs	r3, r2
     56c:	627b      	str	r3, [r7, #36]	; 0x24
     56e:	687a      	ldr	r2, [r7, #4]
     570:	2320      	movs	r3, #32
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     572:	4013      	ands	r3, r2
     574:	d103      	bne.n	57e <arch_ioport_set_port_mode+0x3a>
     576:	687a      	ldr	r2, [r7, #4]
     578:	2310      	movs	r3, #16
     57a:	4013      	ands	r3, r2
     57c:	d004      	beq.n	588 <arch_ioport_set_port_mode+0x44>
     57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     580:	2280      	movs	r2, #128	; 0x80
     582:	02d2      	lsls	r2, r2, #11
     584:	4313      	orrs	r3, r2
     586:	627b      	str	r3, [r7, #36]	; 0x24
     588:	687a      	ldr	r2, [r7, #4]
     58a:	2380      	movs	r3, #128	; 0x80
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_ALT);
     58c:	4013      	ands	r3, r2
     58e:	d004      	beq.n	59a <arch_ioport_set_port_mode+0x56>
     590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     592:	2280      	movs	r2, #128	; 0x80
     594:	03d2      	lsls	r2, r2, #15
     596:	4313      	orrs	r3, r2
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     598:	627b      	str	r3, [r7, #36]	; 0x24
     59a:	687a      	ldr	r2, [r7, #4]
     59c:	230f      	movs	r3, #15
     59e:	4013      	ands	r3, r2
     5a0:	061b      	lsls	r3, r3, #24
     5a2:	61fb      	str	r3, [r7, #28]
     5a4:	68bb      	ldr	r3, [r7, #8]
     5a6:	041b      	lsls	r3, r3, #16
     5a8:	0c1b      	lsrs	r3, r3, #16
     5aa:	61bb      	str	r3, [r7, #24]
     5ac:	68bb      	ldr	r3, [r7, #8]
     5ae:	0c1b      	lsrs	r3, r3, #16
     5b0:	617b      	str	r3, [r7, #20]
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_CTRL);
     5b2:	69ba      	ldr	r2, [r7, #24]
     5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5b6:	431a      	orrs	r2, r3
     5b8:	69fb      	ldr	r3, [r7, #28]
     5ba:	4313      	orrs	r3, r2
     5bc:	22a0      	movs	r2, #160	; 0xa0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     5be:	05d2      	lsls	r2, r2, #23
     5c0:	431a      	orrs	r2, r3
     5c2:	6a3b      	ldr	r3, [r7, #32]
     5c4:	629a      	str	r2, [r3, #40]	; 0x28
     5c6:	697a      	ldr	r2, [r7, #20]
     5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5ca:	431a      	orrs	r2, r3
     5cc:	69fb      	ldr	r3, [r7, #28]
     5ce:	4313      	orrs	r3, r2
     5d0:	22d0      	movs	r2, #208	; 0xd0
     5d2:	0612      	lsls	r2, r2, #24
     5d4:	431a      	orrs	r2, r3
     5d6:	6a3b      	ldr	r3, [r7, #32]
	
	
	
	//Right Hand
	//Row 5 top right
	tempKey = initStandardKey(HID_UNDERSCORE, HID_MODIFIER_NONE);
     5d8:	629a      	str	r2, [r3, #40]	; 0x28
     5da:	687a      	ldr	r2, [r7, #4]
     5dc:	2320      	movs	r3, #32
     5de:	4013      	ands	r3, r2
     5e0:	d006      	beq.n	5f0 <arch_ioport_set_port_mode+0xac>
     5e2:	6a3b      	ldr	r3, [r7, #32]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     5e4:	695a      	ldr	r2, [r3, #20]
     5e6:	68bb      	ldr	r3, [r7, #8]
     5e8:	431a      	orrs	r2, r3
     5ea:	6a3b      	ldr	r3, [r7, #32]
     5ec:	615a      	str	r2, [r3, #20]
     5ee:	e009      	b.n	604 <arch_ioport_set_port_mode+0xc0>
     5f0:	687a      	ldr	r2, [r7, #4]
     5f2:	2310      	movs	r3, #16
     5f4:	4013      	ands	r3, r2
     5f6:	d005      	beq.n	604 <arch_ioport_set_port_mode+0xc0>
     5f8:	6a3b      	ldr	r3, [r7, #32]
     5fa:	699a      	ldr	r2, [r3, #24]
     5fc:	68bb      	ldr	r3, [r7, #8]
	
	tempKey = initStandardKey(HID_0, HID_MODIFIER_NONE);
     5fe:	431a      	orrs	r2, r3
     600:	6a3b      	ldr	r3, [r7, #32]
     602:	619a      	str	r2, [r3, #24]
     604:	46bd      	mov	sp, r7
     606:	b00a      	add	sp, #40	; 0x28
     608:	bd80      	pop	{r7, pc}
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     60a:	46c0      	nop			; (mov r8, r8)
     60c:	000004d5 	.word	0x000004d5

00000610 <arch_ioport_set_pin_mode>:
     610:	b590      	push	{r4, r7, lr}
     612:	b083      	sub	sp, #12
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
     618:	6039      	str	r1, [r7, #0]
     61a:	687b      	ldr	r3, [r7, #4]
     61c:	1c18      	adds	r0, r3, #0
     61e:	4b08      	ldr	r3, [pc, #32]	; (640 <arch_ioport_set_pin_mode+0x30>)
     620:	4798      	blx	r3
     622:	1c04      	adds	r4, r0, #0
	
	tempKey = initStandardKey(HID_9, HID_MODIFIER_NONE);
     624:	687b      	ldr	r3, [r7, #4]
     626:	1c18      	adds	r0, r3, #0
     628:	4b06      	ldr	r3, [pc, #24]	; (644 <arch_ioport_set_pin_mode+0x34>)
     62a:	4798      	blx	r3
     62c:	1c02      	adds	r2, r0, #0
     62e:	683b      	ldr	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     630:	1c20      	adds	r0, r4, #0
     632:	1c11      	adds	r1, r2, #0
     634:	1c1a      	adds	r2, r3, #0
     636:	4b04      	ldr	r3, [pc, #16]	; (648 <arch_ioport_set_pin_mode+0x38>)
     638:	4798      	blx	r3
     63a:	46bd      	mov	sp, r7
     63c:	b003      	add	sp, #12
     63e:	bd90      	pop	{r4, r7, pc}
     640:	000004c1 	.word	0x000004c1
     644:	0000051d 	.word	0x0000051d
     648:	00000545 	.word	0x00000545

0000064c <arch_ioport_set_pin_dir>:
	
	tempKey = initStandardKey(HID_8, HID_MODIFIER_NONE);
     64c:	b580      	push	{r7, lr}
     64e:	b084      	sub	sp, #16
     650:	af00      	add	r7, sp, #0
     652:	6078      	str	r0, [r7, #4]
     654:	1c0a      	adds	r2, r1, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     656:	1cfb      	adds	r3, r7, #3
     658:	701a      	strb	r2, [r3, #0]
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	1c18      	adds	r0, r3, #0
     65e:	4b18      	ldr	r3, [pc, #96]	; (6c0 <arch_ioport_set_pin_dir+0x74>)
     660:	4798      	blx	r3
     662:	1c03      	adds	r3, r0, #0
     664:	60fb      	str	r3, [r7, #12]
     666:	1cfb      	adds	r3, r7, #3
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	2b01      	cmp	r3, #1
     66c:	d107      	bne.n	67e <arch_ioport_set_pin_dir+0x32>
     66e:	687b      	ldr	r3, [r7, #4]
	
	tempKey = initStandardKey(HID_7, HID_MODIFIER_NONE);
     670:	1c18      	adds	r0, r3, #0
     672:	4b14      	ldr	r3, [pc, #80]	; (6c4 <arch_ioport_set_pin_dir+0x78>)
     674:	4798      	blx	r3
     676:	1c02      	adds	r2, r0, #0
     678:	68fb      	ldr	r3, [r7, #12]
     67a:	609a      	str	r2, [r3, #8]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     67c:	e00a      	b.n	694 <arch_ioport_set_pin_dir+0x48>
     67e:	1cfb      	adds	r3, r7, #3
     680:	781b      	ldrb	r3, [r3, #0]
     682:	2b00      	cmp	r3, #0
     684:	d106      	bne.n	694 <arch_ioport_set_pin_dir+0x48>
     686:	687b      	ldr	r3, [r7, #4]
     688:	1c18      	adds	r0, r3, #0
     68a:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <arch_ioport_set_pin_dir+0x78>)
     68c:	4798      	blx	r3
     68e:	1c02      	adds	r2, r0, #0
     690:	68fb      	ldr	r3, [r7, #12]
     692:	605a      	str	r2, [r3, #4]
     694:	687b      	ldr	r3, [r7, #4]
	
	tempKey = initStandardKey(HID_6, HID_MODIFIER_NONE);
     696:	1c18      	adds	r0, r3, #0
     698:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <arch_ioport_set_pin_dir+0x7c>)
     69a:	4798      	blx	r3
     69c:	1c03      	adds	r3, r0, #0
     69e:	68f9      	ldr	r1, [r7, #12]
     6a0:	2240      	movs	r2, #64	; 0x40
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6a2:	18c9      	adds	r1, r1, r3
     6a4:	188a      	adds	r2, r1, r2
     6a6:	7812      	ldrb	r2, [r2, #0]
     6a8:	b2d2      	uxtb	r2, r2
     6aa:	2102      	movs	r1, #2
     6ac:	430a      	orrs	r2, r1
     6ae:	b2d2      	uxtb	r2, r2
     6b0:	68f8      	ldr	r0, [r7, #12]
     6b2:	2140      	movs	r1, #64	; 0x40
     6b4:	18c3      	adds	r3, r0, r3
     6b6:	185b      	adds	r3, r3, r1
     6b8:	701a      	strb	r2, [r3, #0]
     6ba:	46bd      	mov	sp, r7
	
	//Layer button
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     6bc:	b004      	add	sp, #16
     6be:	bd80      	pop	{r7, pc}
     6c0:	000004f1 	.word	0x000004f1
     6c4:	0000051d 	.word	0x0000051d
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6c8:	000004c1 	.word	0x000004c1

000006cc <arch_ioport_set_pin_level>:
     6cc:	b590      	push	{r4, r7, lr}
     6ce:	b083      	sub	sp, #12
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	1c0a      	adds	r2, r1, #0
     6d6:	1cfb      	adds	r3, r7, #3
     6d8:	701a      	strb	r2, [r3, #0]
     6da:	1cfb      	adds	r3, r7, #3
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	2b00      	cmp	r3, #0
     6e0:	d00b      	beq.n	6fa <arch_ioport_set_pin_level+0x2e>
	
	//Row 4 top right
	tempKey = initStandardKey(HID_CLOSE_BRACKET, HID_MODIFIER_NONE);
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	1c18      	adds	r0, r3, #0
     6e6:	4b0c      	ldr	r3, [pc, #48]	; (718 <arch_ioport_set_pin_level+0x4c>)
     6e8:	4798      	blx	r3
     6ea:	1c04      	adds	r4, r0, #0
     6ec:	687b      	ldr	r3, [r7, #4]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     6ee:	1c18      	adds	r0, r3, #0
     6f0:	4b0a      	ldr	r3, [pc, #40]	; (71c <arch_ioport_set_pin_level+0x50>)
     6f2:	4798      	blx	r3
     6f4:	1c03      	adds	r3, r0, #0
     6f6:	61a3      	str	r3, [r4, #24]
     6f8:	e00a      	b.n	710 <arch_ioport_set_pin_level+0x44>
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	1c18      	adds	r0, r3, #0
     6fe:	4b06      	ldr	r3, [pc, #24]	; (718 <arch_ioport_set_pin_level+0x4c>)
     700:	4798      	blx	r3
     702:	1c04      	adds	r4, r0, #0
     704:	687b      	ldr	r3, [r7, #4]
     706:	1c18      	adds	r0, r3, #0
	
	tempKey = initStandardKey(HID_P, HID_MODIFIER_NONE);
     708:	4b04      	ldr	r3, [pc, #16]	; (71c <arch_ioport_set_pin_level+0x50>)
     70a:	4798      	blx	r3
     70c:	1c03      	adds	r3, r0, #0
     70e:	6163      	str	r3, [r4, #20]
     710:	46bd      	mov	sp, r7
     712:	b003      	add	sp, #12
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     714:	bd90      	pop	{r4, r7, pc}
     716:	46c0      	nop			; (mov r8, r8)
     718:	000004f1 	.word	0x000004f1
     71c:	0000051d 	.word	0x0000051d

00000720 <arch_ioport_get_pin_level>:
     720:	b590      	push	{r4, r7, lr}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
     728:	687b      	ldr	r3, [r7, #4]
     72a:	1c18      	adds	r0, r3, #0
     72c:	4b08      	ldr	r3, [pc, #32]	; (750 <arch_ioport_get_pin_level+0x30>)
	
	tempKey = initStandardKey(HID_O, HID_MODIFIER_NONE);
     72e:	4798      	blx	r3
     730:	1c03      	adds	r3, r0, #0
     732:	6a1c      	ldr	r4, [r3, #32]
     734:	687b      	ldr	r3, [r7, #4]
     736:	1c18      	adds	r0, r3, #0
     738:	4b06      	ldr	r3, [pc, #24]	; (754 <arch_ioport_get_pin_level+0x34>)
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     73a:	4798      	blx	r3
     73c:	1c03      	adds	r3, r0, #0
     73e:	4023      	ands	r3, r4
     740:	1e5a      	subs	r2, r3, #1
     742:	4193      	sbcs	r3, r2
     744:	b2db      	uxtb	r3, r3
     746:	1c18      	adds	r0, r3, #0
     748:	46bd      	mov	sp, r7
     74a:	b003      	add	sp, #12
     74c:	bd90      	pop	{r4, r7, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000004f1 	.word	0x000004f1
	
	tempKey = initStandardKey(HID_I, HID_MODIFIER_NONE);
     754:	0000051d 	.word	0x0000051d

00000758 <ioport_init>:
     758:	b580      	push	{r7, lr}
     75a:	af00      	add	r7, sp, #0
     75c:	4b01      	ldr	r3, [pc, #4]	; (764 <ioport_init+0xc>)
     75e:	4798      	blx	r3
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     760:	46bd      	mov	sp, r7
     762:	bd80      	pop	{r7, pc}
     764:	0000053d 	.word	0x0000053d

00000768 <ioport_set_pin_mode>:
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
     770:	6039      	str	r1, [r7, #0]
     772:	687a      	ldr	r2, [r7, #4]
     774:	683b      	ldr	r3, [r7, #0]
     776:	1c10      	adds	r0, r2, #0
     778:	1c19      	adds	r1, r3, #0
	
	tempKey = initStandardKey(HID_U, HID_MODIFIER_NONE);
     77a:	4b02      	ldr	r3, [pc, #8]	; (784 <ioport_set_pin_mode+0x1c>)
     77c:	4798      	blx	r3
     77e:	46bd      	mov	sp, r7
     780:	b002      	add	sp, #8
     782:	bd80      	pop	{r7, pc}
     784:	00000611 	.word	0x00000611

00000788 <ioport_set_pin_dir>:
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     788:	b580      	push	{r7, lr}
     78a:	b082      	sub	sp, #8
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
     790:	1c0a      	adds	r2, r1, #0
     792:	1cfb      	adds	r3, r7, #3
     794:	701a      	strb	r2, [r3, #0]
     796:	687a      	ldr	r2, [r7, #4]
     798:	1cfb      	adds	r3, r7, #3
     79a:	781b      	ldrb	r3, [r3, #0]
     79c:	1c10      	adds	r0, r2, #0
     79e:	1c19      	adds	r1, r3, #0
	
	tempKey = initStandardKey(HID_Y, HID_MODIFIER_NONE);
     7a0:	4b02      	ldr	r3, [pc, #8]	; (7ac <ioport_set_pin_dir+0x24>)
     7a2:	4798      	blx	r3
     7a4:	46bd      	mov	sp, r7
     7a6:	b002      	add	sp, #8
     7a8:	bd80      	pop	{r7, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7ac:	0000064d 	.word	0x0000064d

000007b0 <ioport_set_pin_level>:
     7b0:	b580      	push	{r7, lr}
     7b2:	b082      	sub	sp, #8
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
     7b8:	1c0a      	adds	r2, r1, #0
     7ba:	1cfb      	adds	r3, r7, #3
     7bc:	701a      	strb	r2, [r3, #0]
     7be:	687a      	ldr	r2, [r7, #4]
     7c0:	1cfb      	adds	r3, r7, #3
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	1c10      	adds	r0, r2, #0
	
	tempKey = initStandardKey(HID_OPEN_BRACKET, HID_MODIFIER_NONE);
     7c6:	1c19      	adds	r1, r3, #0
     7c8:	4b02      	ldr	r3, [pc, #8]	; (7d4 <ioport_set_pin_level+0x24>)
     7ca:	4798      	blx	r3
     7cc:	46bd      	mov	sp, r7
     7ce:	b002      	add	sp, #8
     7d0:	bd80      	pop	{r7, pc}
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	000006cd 	.word	0x000006cd

000007d8 <ioport_get_pin_level>:
     7d8:	b580      	push	{r7, lr}
     7da:	b082      	sub	sp, #8
     7dc:	af00      	add	r7, sp, #0
     7de:	6078      	str	r0, [r7, #4]
     7e0:	687b      	ldr	r3, [r7, #4]
     7e2:	1c18      	adds	r0, r3, #0
     7e4:	4b03      	ldr	r3, [pc, #12]	; (7f4 <ioport_get_pin_level+0x1c>)
     7e6:	4798      	blx	r3
     7e8:	1c03      	adds	r3, r0, #0
     7ea:	1c18      	adds	r0, r3, #0
	
	//Row 3 right
	tempKey = initStandardKey(HID_QUOTE, HID_MODIFIER_NONE);
     7ec:	46bd      	mov	sp, r7
     7ee:	b002      	add	sp, #8
     7f0:	bd80      	pop	{r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	00000721 	.word	0x00000721

000007f8 <initKeys>:
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     7f8:	b580      	push	{r7, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	af00      	add	r7, sp, #0
     7fe:	1dfb      	adds	r3, r7, #7
     800:	2200      	movs	r2, #0
     802:	701a      	strb	r2, [r3, #0]
     804:	202e      	movs	r0, #46	; 0x2e
     806:	2100      	movs	r1, #0
     808:	4bfd      	ldr	r3, [pc, #1012]	; (c00 <STACK_SIZE+0x100>)
     80a:	4798      	blx	r3
     80c:	1c03      	adds	r3, r0, #0
     80e:	603b      	str	r3, [r7, #0]
     810:	1dfb      	adds	r3, r7, #7
     812:	781b      	ldrb	r3, [r3, #0]
     814:	1dfa      	adds	r2, r7, #7
     816:	1c59      	adds	r1, r3, #1
     818:	7011      	strb	r1, [r2, #0]
     81a:	683a      	ldr	r2, [r7, #0]
     81c:	1c18      	adds	r0, r3, #0
	
	tempKey = initStandardKey(HID_COLON, HID_MODIFIER_NONE);
     81e:	1c11      	adds	r1, r2, #0
     820:	2200      	movs	r2, #0
     822:	4bf8      	ldr	r3, [pc, #992]	; (c04 <STACK_SIZE+0x104>)
     824:	4798      	blx	r3
     826:	201e      	movs	r0, #30
     828:	2100      	movs	r1, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     82a:	4bf5      	ldr	r3, [pc, #980]	; (c00 <STACK_SIZE+0x100>)
     82c:	4798      	blx	r3
     82e:	1c03      	adds	r3, r0, #0
     830:	603b      	str	r3, [r7, #0]
     832:	1dfb      	adds	r3, r7, #7
     834:	781b      	ldrb	r3, [r3, #0]
     836:	1dfa      	adds	r2, r7, #7
     838:	1c59      	adds	r1, r3, #1
     83a:	7011      	strb	r1, [r2, #0]
     83c:	683a      	ldr	r2, [r7, #0]
     83e:	1c18      	adds	r0, r3, #0
     840:	1c11      	adds	r1, r2, #0
     842:	2200      	movs	r2, #0
	
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     844:	4bef      	ldr	r3, [pc, #956]	; (c04 <STACK_SIZE+0x104>)
     846:	4798      	blx	r3
     848:	201f      	movs	r0, #31
     84a:	2100      	movs	r1, #0
     84c:	4bec      	ldr	r3, [pc, #944]	; (c00 <STACK_SIZE+0x100>)
     84e:	4798      	blx	r3
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     850:	1c03      	adds	r3, r0, #0
     852:	603b      	str	r3, [r7, #0]
     854:	1dfb      	adds	r3, r7, #7
     856:	781b      	ldrb	r3, [r3, #0]
     858:	1dfa      	adds	r2, r7, #7
     85a:	1c59      	adds	r1, r3, #1
     85c:	7011      	strb	r1, [r2, #0]
     85e:	683a      	ldr	r2, [r7, #0]
     860:	1c18      	adds	r0, r3, #0
     862:	1c11      	adds	r1, r2, #0
     864:	2200      	movs	r2, #0
     866:	4be7      	ldr	r3, [pc, #924]	; (c04 <STACK_SIZE+0x104>)
     868:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_K, HID_MODIFIER_NONE);
     86a:	2020      	movs	r0, #32
     86c:	2100      	movs	r1, #0
     86e:	4be4      	ldr	r3, [pc, #912]	; (c00 <STACK_SIZE+0x100>)
     870:	4798      	blx	r3
     872:	1c03      	adds	r3, r0, #0
     874:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     876:	1dfb      	adds	r3, r7, #7
     878:	781b      	ldrb	r3, [r3, #0]
     87a:	1dfa      	adds	r2, r7, #7
     87c:	1c59      	adds	r1, r3, #1
     87e:	7011      	strb	r1, [r2, #0]
     880:	683a      	ldr	r2, [r7, #0]
     882:	1c18      	adds	r0, r3, #0
     884:	1c11      	adds	r1, r2, #0
     886:	2200      	movs	r2, #0
     888:	4bde      	ldr	r3, [pc, #888]	; (c04 <STACK_SIZE+0x104>)
     88a:	4798      	blx	r3
     88c:	2021      	movs	r0, #33	; 0x21
     88e:	2100      	movs	r1, #0
	
	tempKey = initStandardKey(HID_J, HID_MODIFIER_NONE);
     890:	4bdb      	ldr	r3, [pc, #876]	; (c00 <STACK_SIZE+0x100>)
     892:	4798      	blx	r3
     894:	1c03      	adds	r3, r0, #0
     896:	603b      	str	r3, [r7, #0]
     898:	1dfb      	adds	r3, r7, #7
     89a:	781b      	ldrb	r3, [r3, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     89c:	1dfa      	adds	r2, r7, #7
     89e:	1c59      	adds	r1, r3, #1
     8a0:	7011      	strb	r1, [r2, #0]
     8a2:	683a      	ldr	r2, [r7, #0]
     8a4:	1c18      	adds	r0, r3, #0
     8a6:	1c11      	adds	r1, r2, #0
     8a8:	2200      	movs	r2, #0
     8aa:	4bd6      	ldr	r3, [pc, #856]	; (c04 <STACK_SIZE+0x104>)
     8ac:	4798      	blx	r3
     8ae:	2022      	movs	r0, #34	; 0x22
     8b0:	2100      	movs	r1, #0
     8b2:	4bd3      	ldr	r3, [pc, #844]	; (c00 <STACK_SIZE+0x100>)
     8b4:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_H, HID_MODIFIER_NONE);
     8b6:	1c03      	adds	r3, r0, #0
     8b8:	603b      	str	r3, [r7, #0]
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	1dfa      	adds	r2, r7, #7
     8c0:	1c59      	adds	r1, r3, #1
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     8c2:	7011      	strb	r1, [r2, #0]
     8c4:	683a      	ldr	r2, [r7, #0]
     8c6:	1c18      	adds	r0, r3, #0
     8c8:	1c11      	adds	r1, r2, #0
     8ca:	2200      	movs	r2, #0
     8cc:	4bcd      	ldr	r3, [pc, #820]	; (c04 <STACK_SIZE+0x104>)
     8ce:	4798      	blx	r3
     8d0:	2029      	movs	r0, #41	; 0x29
     8d2:	2100      	movs	r1, #0
     8d4:	4bca      	ldr	r3, [pc, #808]	; (c00 <STACK_SIZE+0x100>)
     8d6:	4798      	blx	r3
     8d8:	1c03      	adds	r3, r0, #0
     8da:	603b      	str	r3, [r7, #0]
	
	//Row 2 right
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_SHIFT);
     8dc:	1dfb      	adds	r3, r7, #7
     8de:	781b      	ldrb	r3, [r3, #0]
     8e0:	1dfa      	adds	r2, r7, #7
     8e2:	1c59      	adds	r1, r3, #1
     8e4:	7011      	strb	r1, [r2, #0]
     8e6:	683a      	ldr	r2, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     8e8:	1c18      	adds	r0, r3, #0
     8ea:	1c11      	adds	r1, r2, #0
     8ec:	2200      	movs	r2, #0
     8ee:	4bc5      	ldr	r3, [pc, #788]	; (c04 <STACK_SIZE+0x104>)
     8f0:	4798      	blx	r3
     8f2:	2031      	movs	r0, #49	; 0x31
     8f4:	2100      	movs	r1, #0
     8f6:	4bc2      	ldr	r3, [pc, #776]	; (c00 <STACK_SIZE+0x100>)
     8f8:	4798      	blx	r3
     8fa:	1c03      	adds	r3, r0, #0
     8fc:	603b      	str	r3, [r7, #0]
     8fe:	1dfb      	adds	r3, r7, #7
     900:	781b      	ldrb	r3, [r3, #0]
	
	tempKey = initStandardKey(HID_SLASH, HID_MODIFIER_NONE);
     902:	1dfa      	adds	r2, r7, #7
     904:	1c59      	adds	r1, r3, #1
     906:	7011      	strb	r1, [r2, #0]
     908:	683a      	ldr	r2, [r7, #0]
     90a:	1c18      	adds	r0, r3, #0
     90c:	1c11      	adds	r1, r2, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     90e:	2200      	movs	r2, #0
     910:	4bbc      	ldr	r3, [pc, #752]	; (c04 <STACK_SIZE+0x104>)
     912:	4798      	blx	r3
     914:	2014      	movs	r0, #20
     916:	2100      	movs	r1, #0
     918:	4bb9      	ldr	r3, [pc, #740]	; (c00 <STACK_SIZE+0x100>)
     91a:	4798      	blx	r3
     91c:	1c03      	adds	r3, r0, #0
     91e:	603b      	str	r3, [r7, #0]
     920:	1dfb      	adds	r3, r7, #7
     922:	781b      	ldrb	r3, [r3, #0]
     924:	1dfa      	adds	r2, r7, #7
     926:	1c59      	adds	r1, r3, #1
	
	tempKey = initStandardKey(HID_DOT, HID_MODIFIER_NONE);
     928:	7011      	strb	r1, [r2, #0]
     92a:	683a      	ldr	r2, [r7, #0]
     92c:	1c18      	adds	r0, r3, #0
     92e:	1c11      	adds	r1, r2, #0
     930:	2200      	movs	r2, #0
     932:	4bb4      	ldr	r3, [pc, #720]	; (c04 <STACK_SIZE+0x104>)
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     934:	4798      	blx	r3
     936:	201a      	movs	r0, #26
     938:	2100      	movs	r1, #0
     93a:	4bb1      	ldr	r3, [pc, #708]	; (c00 <STACK_SIZE+0x100>)
     93c:	4798      	blx	r3
     93e:	1c03      	adds	r3, r0, #0
     940:	603b      	str	r3, [r7, #0]
     942:	1dfb      	adds	r3, r7, #7
     944:	781b      	ldrb	r3, [r3, #0]
     946:	1dfa      	adds	r2, r7, #7
     948:	1c59      	adds	r1, r3, #1
     94a:	7011      	strb	r1, [r2, #0]
     94c:	683a      	ldr	r2, [r7, #0]
	
	tempKey = initStandardKey(HID_COMMA, HID_MODIFIER_NONE);
     94e:	1c18      	adds	r0, r3, #0
     950:	1c11      	adds	r1, r2, #0
     952:	2200      	movs	r2, #0
     954:	4bab      	ldr	r3, [pc, #684]	; (c04 <STACK_SIZE+0x104>)
     956:	4798      	blx	r3
     958:	2008      	movs	r0, #8
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     95a:	2100      	movs	r1, #0
     95c:	4ba8      	ldr	r3, [pc, #672]	; (c00 <STACK_SIZE+0x100>)
     95e:	4798      	blx	r3
     960:	1c03      	adds	r3, r0, #0
     962:	603b      	str	r3, [r7, #0]
     964:	1dfb      	adds	r3, r7, #7
     966:	781b      	ldrb	r3, [r3, #0]
     968:	1dfa      	adds	r2, r7, #7
     96a:	1c59      	adds	r1, r3, #1
     96c:	7011      	strb	r1, [r2, #0]
     96e:	683a      	ldr	r2, [r7, #0]
     970:	1c18      	adds	r0, r3, #0
     972:	1c11      	adds	r1, r2, #0
	
	tempKey = initStandardKey(HID_M, HID_MODIFIER_NONE);
     974:	2200      	movs	r2, #0
     976:	4ba3      	ldr	r3, [pc, #652]	; (c04 <STACK_SIZE+0x104>)
     978:	4798      	blx	r3
     97a:	2015      	movs	r0, #21
     97c:	2100      	movs	r1, #0
     97e:	4ba0      	ldr	r3, [pc, #640]	; (c00 <STACK_SIZE+0x100>)
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     980:	4798      	blx	r3
     982:	1c03      	adds	r3, r0, #0
     984:	603b      	str	r3, [r7, #0]
     986:	1dfb      	adds	r3, r7, #7
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	1dfa      	adds	r2, r7, #7
     98c:	1c59      	adds	r1, r3, #1
     98e:	7011      	strb	r1, [r2, #0]
     990:	683a      	ldr	r2, [r7, #0]
     992:	1c18      	adds	r0, r3, #0
     994:	1c11      	adds	r1, r2, #0
     996:	2200      	movs	r2, #0
     998:	4b9a      	ldr	r3, [pc, #616]	; (c04 <STACK_SIZE+0x104>)
	
	tempKey = initStandardKey(HID_N, HID_MODIFIER_NONE);
     99a:	4798      	blx	r3
     99c:	2017      	movs	r0, #23
     99e:	2100      	movs	r1, #0
     9a0:	4b97      	ldr	r3, [pc, #604]	; (c00 <STACK_SIZE+0x100>)
     9a2:	4798      	blx	r3
     9a4:	1c03      	adds	r3, r0, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9a6:	603b      	str	r3, [r7, #0]
     9a8:	1dfb      	adds	r3, r7, #7
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	1dfa      	adds	r2, r7, #7
     9ae:	1c59      	adds	r1, r3, #1
     9b0:	7011      	strb	r1, [r2, #0]
     9b2:	683a      	ldr	r2, [r7, #0]
     9b4:	1c18      	adds	r0, r3, #0
     9b6:	1c11      	adds	r1, r2, #0
     9b8:	2200      	movs	r2, #0
     9ba:	4b92      	ldr	r3, [pc, #584]	; (c04 <STACK_SIZE+0x104>)
     9bc:	4798      	blx	r3
     9be:	200f      	movs	r0, #15
	
	//Layer button
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     9c0:	2100      	movs	r1, #0
     9c2:	4b8f      	ldr	r3, [pc, #572]	; (c00 <STACK_SIZE+0x100>)
     9c4:	4798      	blx	r3
     9c6:	1c03      	adds	r3, r0, #0
     9c8:	603b      	str	r3, [r7, #0]
     9ca:	1dfb      	adds	r3, r7, #7
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	1dfa      	adds	r2, r7, #7
     9d0:	1c59      	adds	r1, r3, #1
     9d2:	7011      	strb	r1, [r2, #0]
     9d4:	683a      	ldr	r2, [r7, #0]
     9d6:	1c18      	adds	r0, r3, #0
     9d8:	1c11      	adds	r1, r2, #0
     9da:	2200      	movs	r2, #0
     9dc:	4b89      	ldr	r3, [pc, #548]	; (c04 <STACK_SIZE+0x104>)
     9de:	4798      	blx	r3
     9e0:	202b      	movs	r0, #43	; 0x2b
     9e2:	2100      	movs	r1, #0
     9e4:	4b86      	ldr	r3, [pc, #536]	; (c00 <STACK_SIZE+0x100>)
	
	//Row 1 right
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_UI);
     9e6:	4798      	blx	r3
     9e8:	1c03      	adds	r3, r0, #0
     9ea:	603b      	str	r3, [r7, #0]
     9ec:	1dfb      	adds	r3, r7, #7
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	1dfa      	adds	r2, r7, #7
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     9f2:	1c59      	adds	r1, r3, #1
     9f4:	7011      	strb	r1, [r2, #0]
     9f6:	683a      	ldr	r2, [r7, #0]
     9f8:	1c18      	adds	r0, r3, #0
     9fa:	1c11      	adds	r1, r2, #0
     9fc:	2200      	movs	r2, #0
     9fe:	4b81      	ldr	r3, [pc, #516]	; (c04 <STACK_SIZE+0x104>)
     a00:	4798      	blx	r3
     a02:	2004      	movs	r0, #4
     a04:	2100      	movs	r1, #0
     a06:	4b7e      	ldr	r3, [pc, #504]	; (c00 <STACK_SIZE+0x100>)
     a08:	4798      	blx	r3
     a0a:	1c03      	adds	r3, r0, #0
	
	tempKey = initStandardKey(HID_RIGHT, HID_MODIFIER_NONE);
     a0c:	603b      	str	r3, [r7, #0]
     a0e:	1dfb      	adds	r3, r7, #7
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	1dfa      	adds	r2, r7, #7
     a14:	1c59      	adds	r1, r3, #1
     a16:	7011      	strb	r1, [r2, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     a18:	683a      	ldr	r2, [r7, #0]
     a1a:	1c18      	adds	r0, r3, #0
     a1c:	1c11      	adds	r1, r2, #0
     a1e:	2200      	movs	r2, #0
     a20:	4b78      	ldr	r3, [pc, #480]	; (c04 <STACK_SIZE+0x104>)
     a22:	4798      	blx	r3
     a24:	2016      	movs	r0, #22
     a26:	2100      	movs	r1, #0
     a28:	4b75      	ldr	r3, [pc, #468]	; (c00 <STACK_SIZE+0x100>)
     a2a:	4798      	blx	r3
     a2c:	1c03      	adds	r3, r0, #0
     a2e:	603b      	str	r3, [r7, #0]
     a30:	1dfb      	adds	r3, r7, #7
	
	tempKey = initStandardKey(HID_UP, HID_MODIFIER_NONE);
     a32:	781b      	ldrb	r3, [r3, #0]
     a34:	1dfa      	adds	r2, r7, #7
     a36:	1c59      	adds	r1, r3, #1
     a38:	7011      	strb	r1, [r2, #0]
     a3a:	683a      	ldr	r2, [r7, #0]
     a3c:	1c18      	adds	r0, r3, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     a3e:	1c11      	adds	r1, r2, #0
     a40:	2200      	movs	r2, #0
     a42:	4b70      	ldr	r3, [pc, #448]	; (c04 <STACK_SIZE+0x104>)
     a44:	4798      	blx	r3
     a46:	2007      	movs	r0, #7
     a48:	2100      	movs	r1, #0
     a4a:	4b6d      	ldr	r3, [pc, #436]	; (c00 <STACK_SIZE+0x100>)
     a4c:	4798      	blx	r3
     a4e:	1c03      	adds	r3, r0, #0
     a50:	603b      	str	r3, [r7, #0]
     a52:	1dfb      	adds	r3, r7, #7
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	1dfa      	adds	r2, r7, #7
	
	tempKey = initStandardKey(HID_DOWN, HID_MODIFIER_NONE);
     a58:	1c59      	adds	r1, r3, #1
     a5a:	7011      	strb	r1, [r2, #0]
     a5c:	683a      	ldr	r2, [r7, #0]
     a5e:	1c18      	adds	r0, r3, #0
     a60:	1c11      	adds	r1, r2, #0
     a62:	2200      	movs	r2, #0
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     a64:	4b67      	ldr	r3, [pc, #412]	; (c04 <STACK_SIZE+0x104>)
     a66:	4798      	blx	r3
     a68:	2009      	movs	r0, #9
     a6a:	2100      	movs	r1, #0
     a6c:	4b64      	ldr	r3, [pc, #400]	; (c00 <STACK_SIZE+0x100>)
     a6e:	4798      	blx	r3
     a70:	1c03      	adds	r3, r0, #0
     a72:	603b      	str	r3, [r7, #0]
     a74:	1dfb      	adds	r3, r7, #7
     a76:	781b      	ldrb	r3, [r3, #0]
     a78:	1dfa      	adds	r2, r7, #7
     a7a:	1c59      	adds	r1, r3, #1
     a7c:	7011      	strb	r1, [r2, #0]
	
	tempKey = initStandardKey(HID_LEFT, HID_MODIFIER_NONE);
     a7e:	683a      	ldr	r2, [r7, #0]
     a80:	1c18      	adds	r0, r3, #0
     a82:	1c11      	adds	r1, r2, #0
     a84:	2200      	movs	r2, #0
     a86:	4b5f      	ldr	r3, [pc, #380]	; (c04 <STACK_SIZE+0x104>)
     a88:	4798      	blx	r3
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     a8a:	200a      	movs	r0, #10
     a8c:	2100      	movs	r1, #0
     a8e:	4b5c      	ldr	r3, [pc, #368]	; (c00 <STACK_SIZE+0x100>)
     a90:	4798      	blx	r3
     a92:	1c03      	adds	r3, r0, #0
     a94:	603b      	str	r3, [r7, #0]
     a96:	1dfb      	adds	r3, r7, #7
     a98:	781b      	ldrb	r3, [r3, #0]
     a9a:	1dfa      	adds	r2, r7, #7
     a9c:	1c59      	adds	r1, r3, #1
     a9e:	7011      	strb	r1, [r2, #0]
     aa0:	683a      	ldr	r2, [r7, #0]
     aa2:	1c18      	adds	r0, r3, #0
	
	//Row 0 Thumb
	tempKey = initStandardKey(HID_SPACEBAR, HID_MODIFIER_NONE);
     aa4:	1c11      	adds	r1, r2, #0
     aa6:	2200      	movs	r2, #0
     aa8:	4b56      	ldr	r3, [pc, #344]	; (c04 <STACK_SIZE+0x104>)
     aaa:	4798      	blx	r3
     aac:	2000      	movs	r0, #0
     aae:	2102      	movs	r1, #2
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ab0:	4b53      	ldr	r3, [pc, #332]	; (c00 <STACK_SIZE+0x100>)
     ab2:	4798      	blx	r3
     ab4:	1c03      	adds	r3, r0, #0
     ab6:	603b      	str	r3, [r7, #0]
     ab8:	1dfb      	adds	r3, r7, #7
     aba:	781b      	ldrb	r3, [r3, #0]
     abc:	1dfa      	adds	r2, r7, #7
     abe:	1c59      	adds	r1, r3, #1
     ac0:	7011      	strb	r1, [r2, #0]
     ac2:	683a      	ldr	r2, [r7, #0]
     ac4:	1c18      	adds	r0, r3, #0
     ac6:	1c11      	adds	r1, r2, #0
     ac8:	2200      	movs	r2, #0
	
	tempKey = initStandardKey(HID_ENTER, HID_MODIFIER_NONE);
     aca:	4b4e      	ldr	r3, [pc, #312]	; (c04 <STACK_SIZE+0x104>)
     acc:	4798      	blx	r3
     ace:	201d      	movs	r0, #29
     ad0:	2100      	movs	r1, #0
     ad2:	4b4b      	ldr	r3, [pc, #300]	; (c00 <STACK_SIZE+0x100>)
     ad4:	4798      	blx	r3
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ad6:	1c03      	adds	r3, r0, #0
     ad8:	603b      	str	r3, [r7, #0]
     ada:	1dfb      	adds	r3, r7, #7
     adc:	781b      	ldrb	r3, [r3, #0]
     ade:	1dfa      	adds	r2, r7, #7
     ae0:	1c59      	adds	r1, r3, #1
     ae2:	7011      	strb	r1, [r2, #0]
     ae4:	683a      	ldr	r2, [r7, #0]
     ae6:	1c18      	adds	r0, r3, #0
     ae8:	1c11      	adds	r1, r2, #0
     aea:	2200      	movs	r2, #0
     aec:	4b45      	ldr	r3, [pc, #276]	; (c04 <STACK_SIZE+0x104>)
     aee:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_PAGEDOWN, HID_MODIFIER_NONE);
     af0:	201b      	movs	r0, #27
     af2:	2100      	movs	r1, #0
     af4:	4b42      	ldr	r3, [pc, #264]	; (c00 <STACK_SIZE+0x100>)
     af6:	4798      	blx	r3
     af8:	1c03      	adds	r3, r0, #0
     afa:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     afc:	1dfb      	adds	r3, r7, #7
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	1dfa      	adds	r2, r7, #7
     b02:	1c59      	adds	r1, r3, #1
     b04:	7011      	strb	r1, [r2, #0]
     b06:	683a      	ldr	r2, [r7, #0]
     b08:	1c18      	adds	r0, r3, #0
     b0a:	1c11      	adds	r1, r2, #0
     b0c:	2200      	movs	r2, #0
     b0e:	4b3d      	ldr	r3, [pc, #244]	; (c04 <STACK_SIZE+0x104>)
     b10:	4798      	blx	r3
     b12:	2006      	movs	r0, #6
     b14:	2100      	movs	r1, #0
	
	tempKey = initStandardKey(HID_PAGEUP, HID_MODIFIER_NONE);
     b16:	4b3a      	ldr	r3, [pc, #232]	; (c00 <STACK_SIZE+0x100>)
     b18:	4798      	blx	r3
     b1a:	1c03      	adds	r3, r0, #0
     b1c:	603b      	str	r3, [r7, #0]
     b1e:	1dfb      	adds	r3, r7, #7
     b20:	781b      	ldrb	r3, [r3, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     b22:	1dfa      	adds	r2, r7, #7
     b24:	1c59      	adds	r1, r3, #1
     b26:	7011      	strb	r1, [r2, #0]
     b28:	683a      	ldr	r2, [r7, #0]
     b2a:	1c18      	adds	r0, r3, #0
     b2c:	1c11      	adds	r1, r2, #0
     b2e:	2200      	movs	r2, #0
     b30:	4b34      	ldr	r3, [pc, #208]	; (c04 <STACK_SIZE+0x104>)
     b32:	4798      	blx	r3
     b34:	2019      	movs	r0, #25
     b36:	2100      	movs	r1, #0
     b38:	4b31      	ldr	r3, [pc, #196]	; (c00 <STACK_SIZE+0x100>)
     b3a:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_ALT);
     b3c:	1c03      	adds	r3, r0, #0
     b3e:	603b      	str	r3, [r7, #0]
     b40:	1dfb      	adds	r3, r7, #7
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	1dfa      	adds	r2, r7, #7
     b46:	1c59      	adds	r1, r3, #1
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     b48:	7011      	strb	r1, [r2, #0]
     b4a:	683a      	ldr	r2, [r7, #0]
     b4c:	1c18      	adds	r0, r3, #0
     b4e:	1c11      	adds	r1, r2, #0
     b50:	2200      	movs	r2, #0
     b52:	4b2c      	ldr	r3, [pc, #176]	; (c04 <STACK_SIZE+0x104>)
     b54:	4798      	blx	r3
     b56:	2005      	movs	r0, #5
     b58:	2100      	movs	r1, #0
     b5a:	4b29      	ldr	r3, [pc, #164]	; (c00 <STACK_SIZE+0x100>)
     b5c:	4798      	blx	r3
     b5e:	1c03      	adds	r3, r0, #0
     b60:	603b      	str	r3, [r7, #0]
	
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_CTRL);
     b62:	1dfb      	adds	r3, r7, #7
     b64:	781b      	ldrb	r3, [r3, #0]
     b66:	1dfa      	adds	r2, r7, #7
     b68:	1c59      	adds	r1, r3, #1
     b6a:	7011      	strb	r1, [r2, #0]
     b6c:	683a      	ldr	r2, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     b6e:	1c18      	adds	r0, r3, #0
     b70:	1c11      	adds	r1, r2, #0
     b72:	2200      	movs	r2, #0
     b74:	4b23      	ldr	r3, [pc, #140]	; (c04 <STACK_SIZE+0x104>)
     b76:	4798      	blx	r3
     b78:	200f      	movs	r0, #15
     b7a:	2100      	movs	r1, #0
     b7c:	4b20      	ldr	r3, [pc, #128]	; (c00 <STACK_SIZE+0x100>)
     b7e:	4798      	blx	r3
     b80:	1c03      	adds	r3, r0, #0
     b82:	603b      	str	r3, [r7, #0]
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
	
	
		
}
     b88:	1dfa      	adds	r2, r7, #7
     b8a:	1c59      	adds	r1, r3, #1
     b8c:	7011      	strb	r1, [r2, #0]
     b8e:	683a      	ldr	r2, [r7, #0]
     b90:	1c18      	adds	r0, r3, #0
     b92:	1c11      	adds	r1, r2, #0
     b94:	2200      	movs	r2, #0
     b96:	4b1b      	ldr	r3, [pc, #108]	; (c04 <STACK_SIZE+0x104>)
	tempKey = initStandardKey(HID_B, HID_MODIFIER_NONE);
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
	
	//Layer Key
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     b98:	4798      	blx	r3
		
	//Row 5 left hand
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_UI);
     b9a:	2000      	movs	r0, #0
     b9c:	2108      	movs	r1, #8
     b9e:	4b18      	ldr	r3, [pc, #96]	; (c00 <STACK_SIZE+0x100>)
     ba0:	4798      	blx	r3
     ba2:	1c03      	adds	r3, r0, #0
     ba4:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	1dfa      	adds	r2, r7, #7
     bac:	1c59      	adds	r1, r3, #1
     bae:	7011      	strb	r1, [r2, #0]
     bb0:	683a      	ldr	r2, [r7, #0]
     bb2:	1c18      	adds	r0, r3, #0
     bb4:	1c11      	adds	r1, r2, #0
     bb6:	2200      	movs	r2, #0
     bb8:	4b12      	ldr	r3, [pc, #72]	; (c04 <STACK_SIZE+0x104>)
     bba:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_TILDE, HID_MODIFIER_NONE);
     bbc:	2035      	movs	r0, #53	; 0x35
     bbe:	2100      	movs	r1, #0
     bc0:	4b0f      	ldr	r3, [pc, #60]	; (c00 <STACK_SIZE+0x100>)
     bc2:	4798      	blx	r3
     bc4:	1c03      	adds	r3, r0, #0
     bc6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     bc8:	1dfb      	adds	r3, r7, #7
     bca:	781b      	ldrb	r3, [r3, #0]
     bcc:	1dfa      	adds	r2, r7, #7
     bce:	1c59      	adds	r1, r3, #1
     bd0:	7011      	strb	r1, [r2, #0]
     bd2:	683a      	ldr	r2, [r7, #0]
     bd4:	1c18      	adds	r0, r3, #0
     bd6:	1c11      	adds	r1, r2, #0
     bd8:	2200      	movs	r2, #0
     bda:	4b0a      	ldr	r3, [pc, #40]	; (c04 <STACK_SIZE+0x104>)
     bdc:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_BACKSLASH, HID_MODIFIER_NONE);
     bde:	2031      	movs	r0, #49	; 0x31
     be0:	2100      	movs	r1, #0
     be2:	4b07      	ldr	r3, [pc, #28]	; (c00 <STACK_SIZE+0x100>)
     be4:	4798      	blx	r3
     be6:	1c03      	adds	r3, r0, #0
     be8:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     bea:	1dfb      	adds	r3, r7, #7
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	1dfa      	adds	r2, r7, #7
     bf0:	1c59      	adds	r1, r3, #1
     bf2:	7011      	strb	r1, [r2, #0]
     bf4:	683a      	ldr	r2, [r7, #0]
     bf6:	1c18      	adds	r0, r3, #0
     bf8:	1c11      	adds	r1, r2, #0
     bfa:	2200      	movs	r2, #0
     bfc:	e004      	b.n	c08 <STACK_SIZE+0x108>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	00000481 	.word	0x00000481
     c04:	00001651 	.word	0x00001651
     c08:	4bfe      	ldr	r3, [pc, #1016]	; (1004 <STACK_SIZE+0x504>)
     c0a:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_LEFT, HID_MODIFIER_NONE);
     c0c:	2050      	movs	r0, #80	; 0x50
     c0e:	2100      	movs	r1, #0
     c10:	4bfd      	ldr	r3, [pc, #1012]	; (1008 <STACK_SIZE+0x508>)
     c12:	4798      	blx	r3
     c14:	1c03      	adds	r3, r0, #0
     c16:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     c18:	1dfb      	adds	r3, r7, #7
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	1dfa      	adds	r2, r7, #7
     c1e:	1c59      	adds	r1, r3, #1
     c20:	7011      	strb	r1, [r2, #0]
     c22:	683a      	ldr	r2, [r7, #0]
     c24:	1c18      	adds	r0, r3, #0
     c26:	1c11      	adds	r1, r2, #0
     c28:	2200      	movs	r2, #0
     c2a:	4bf6      	ldr	r3, [pc, #984]	; (1004 <STACK_SIZE+0x504>)
     c2c:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_RIGHT, HID_MODIFIER_NONE);
     c2e:	204f      	movs	r0, #79	; 0x4f
     c30:	2100      	movs	r1, #0
     c32:	4bf5      	ldr	r3, [pc, #980]	; (1008 <STACK_SIZE+0x508>)
     c34:	4798      	blx	r3
     c36:	1c03      	adds	r3, r0, #0
     c38:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     c3a:	1dfb      	adds	r3, r7, #7
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	1dfa      	adds	r2, r7, #7
     c40:	1c59      	adds	r1, r3, #1
     c42:	7011      	strb	r1, [r2, #0]
     c44:	683a      	ldr	r2, [r7, #0]
     c46:	1c18      	adds	r0, r3, #0
     c48:	1c11      	adds	r1, r2, #0
     c4a:	2200      	movs	r2, #0
     c4c:	4bed      	ldr	r3, [pc, #948]	; (1004 <STACK_SIZE+0x504>)
     c4e:	4798      	blx	r3
	
	
	//Thumb keys left hand
	tempKey = initStandardKey(HID_BACKSPACE, HID_MODIFIER_NONE);
     c50:	202a      	movs	r0, #42	; 0x2a
     c52:	2100      	movs	r1, #0
     c54:	4bec      	ldr	r3, [pc, #944]	; (1008 <STACK_SIZE+0x508>)
     c56:	4798      	blx	r3
     c58:	1c03      	adds	r3, r0, #0
     c5a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     c5c:	1dfb      	adds	r3, r7, #7
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	1dfa      	adds	r2, r7, #7
     c62:	1c59      	adds	r1, r3, #1
     c64:	7011      	strb	r1, [r2, #0]
     c66:	683a      	ldr	r2, [r7, #0]
     c68:	1c18      	adds	r0, r3, #0
     c6a:	1c11      	adds	r1, r2, #0
     c6c:	2200      	movs	r2, #0
     c6e:	4be5      	ldr	r3, [pc, #916]	; (1004 <STACK_SIZE+0x504>)
     c70:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_DELETE, HID_MODIFIER_NONE);
     c72:	204c      	movs	r0, #76	; 0x4c
     c74:	2100      	movs	r1, #0
     c76:	4be4      	ldr	r3, [pc, #912]	; (1008 <STACK_SIZE+0x508>)
     c78:	4798      	blx	r3
     c7a:	1c03      	adds	r3, r0, #0
     c7c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     c7e:	1dfb      	adds	r3, r7, #7
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	1dfa      	adds	r2, r7, #7
     c84:	1c59      	adds	r1, r3, #1
     c86:	7011      	strb	r1, [r2, #0]
     c88:	683a      	ldr	r2, [r7, #0]
     c8a:	1c18      	adds	r0, r3, #0
     c8c:	1c11      	adds	r1, r2, #0
     c8e:	2200      	movs	r2, #0
     c90:	4bdc      	ldr	r3, [pc, #880]	; (1004 <STACK_SIZE+0x504>)
     c92:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_END, HID_MODIFIER_NONE);
     c94:	204d      	movs	r0, #77	; 0x4d
     c96:	2100      	movs	r1, #0
     c98:	4bdb      	ldr	r3, [pc, #876]	; (1008 <STACK_SIZE+0x508>)
     c9a:	4798      	blx	r3
     c9c:	1c03      	adds	r3, r0, #0
     c9e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ca0:	1dfb      	adds	r3, r7, #7
     ca2:	781b      	ldrb	r3, [r3, #0]
     ca4:	1dfa      	adds	r2, r7, #7
     ca6:	1c59      	adds	r1, r3, #1
     ca8:	7011      	strb	r1, [r2, #0]
     caa:	683a      	ldr	r2, [r7, #0]
     cac:	1c18      	adds	r0, r3, #0
     cae:	1c11      	adds	r1, r2, #0
     cb0:	2200      	movs	r2, #0
     cb2:	4bd4      	ldr	r3, [pc, #848]	; (1004 <STACK_SIZE+0x504>)
     cb4:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_HOME, HID_MODIFIER_NONE);
     cb6:	204a      	movs	r0, #74	; 0x4a
     cb8:	2100      	movs	r1, #0
     cba:	4bd3      	ldr	r3, [pc, #844]	; (1008 <STACK_SIZE+0x508>)
     cbc:	4798      	blx	r3
     cbe:	1c03      	adds	r3, r0, #0
     cc0:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     cc2:	1dfb      	adds	r3, r7, #7
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	1dfa      	adds	r2, r7, #7
     cc8:	1c59      	adds	r1, r3, #1
     cca:	7011      	strb	r1, [r2, #0]
     ccc:	683a      	ldr	r2, [r7, #0]
     cce:	1c18      	adds	r0, r3, #0
     cd0:	1c11      	adds	r1, r2, #0
     cd2:	2200      	movs	r2, #0
     cd4:	4bcb      	ldr	r3, [pc, #812]	; (1004 <STACK_SIZE+0x504>)
     cd6:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_ALT);
     cd8:	2000      	movs	r0, #0
     cda:	2104      	movs	r1, #4
     cdc:	4bca      	ldr	r3, [pc, #808]	; (1008 <STACK_SIZE+0x508>)
     cde:	4798      	blx	r3
     ce0:	1c03      	adds	r3, r0, #0
     ce2:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ce4:	1dfb      	adds	r3, r7, #7
     ce6:	781b      	ldrb	r3, [r3, #0]
     ce8:	1dfa      	adds	r2, r7, #7
     cea:	1c59      	adds	r1, r3, #1
     cec:	7011      	strb	r1, [r2, #0]
     cee:	683a      	ldr	r2, [r7, #0]
     cf0:	1c18      	adds	r0, r3, #0
     cf2:	1c11      	adds	r1, r2, #0
     cf4:	2200      	movs	r2, #0
     cf6:	4bc3      	ldr	r3, [pc, #780]	; (1004 <STACK_SIZE+0x504>)
     cf8:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_LEFT_CTRL);
     cfa:	2000      	movs	r0, #0
     cfc:	2101      	movs	r1, #1
     cfe:	4bc2      	ldr	r3, [pc, #776]	; (1008 <STACK_SIZE+0x508>)
     d00:	4798      	blx	r3
     d02:	1c03      	adds	r3, r0, #0
     d04:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     d06:	1dfb      	adds	r3, r7, #7
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	1dfa      	adds	r2, r7, #7
     d0c:	1c59      	adds	r1, r3, #1
     d0e:	7011      	strb	r1, [r2, #0]
     d10:	683a      	ldr	r2, [r7, #0]
     d12:	1c18      	adds	r0, r3, #0
     d14:	1c11      	adds	r1, r2, #0
     d16:	2200      	movs	r2, #0
     d18:	4bba      	ldr	r3, [pc, #744]	; (1004 <STACK_SIZE+0x504>)
     d1a:	4798      	blx	r3
	
	
	
	//Right Hand
	//Row 5 top right
	tempKey = initStandardKey(HID_UNDERSCORE, HID_MODIFIER_NONE);
     d1c:	202d      	movs	r0, #45	; 0x2d
     d1e:	2100      	movs	r1, #0
     d20:	4bb9      	ldr	r3, [pc, #740]	; (1008 <STACK_SIZE+0x508>)
     d22:	4798      	blx	r3
     d24:	1c03      	adds	r3, r0, #0
     d26:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     d28:	1dfb      	adds	r3, r7, #7
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	1dfa      	adds	r2, r7, #7
     d2e:	1c59      	adds	r1, r3, #1
     d30:	7011      	strb	r1, [r2, #0]
     d32:	683a      	ldr	r2, [r7, #0]
     d34:	1c18      	adds	r0, r3, #0
     d36:	1c11      	adds	r1, r2, #0
     d38:	2200      	movs	r2, #0
     d3a:	4bb2      	ldr	r3, [pc, #712]	; (1004 <STACK_SIZE+0x504>)
     d3c:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_0, HID_MODIFIER_NONE);
     d3e:	2027      	movs	r0, #39	; 0x27
     d40:	2100      	movs	r1, #0
     d42:	4bb1      	ldr	r3, [pc, #708]	; (1008 <STACK_SIZE+0x508>)
     d44:	4798      	blx	r3
     d46:	1c03      	adds	r3, r0, #0
     d48:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     d4a:	1dfb      	adds	r3, r7, #7
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	1dfa      	adds	r2, r7, #7
     d50:	1c59      	adds	r1, r3, #1
     d52:	7011      	strb	r1, [r2, #0]
     d54:	683a      	ldr	r2, [r7, #0]
     d56:	1c18      	adds	r0, r3, #0
     d58:	1c11      	adds	r1, r2, #0
     d5a:	2200      	movs	r2, #0
     d5c:	4ba9      	ldr	r3, [pc, #676]	; (1004 <STACK_SIZE+0x504>)
     d5e:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_9, HID_MODIFIER_NONE);
     d60:	2026      	movs	r0, #38	; 0x26
     d62:	2100      	movs	r1, #0
     d64:	4ba8      	ldr	r3, [pc, #672]	; (1008 <STACK_SIZE+0x508>)
     d66:	4798      	blx	r3
     d68:	1c03      	adds	r3, r0, #0
     d6a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     d6c:	1dfb      	adds	r3, r7, #7
     d6e:	781b      	ldrb	r3, [r3, #0]
     d70:	1dfa      	adds	r2, r7, #7
     d72:	1c59      	adds	r1, r3, #1
     d74:	7011      	strb	r1, [r2, #0]
     d76:	683a      	ldr	r2, [r7, #0]
     d78:	1c18      	adds	r0, r3, #0
     d7a:	1c11      	adds	r1, r2, #0
     d7c:	2200      	movs	r2, #0
     d7e:	4ba1      	ldr	r3, [pc, #644]	; (1004 <STACK_SIZE+0x504>)
     d80:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_8, HID_MODIFIER_NONE);
     d82:	2025      	movs	r0, #37	; 0x25
     d84:	2100      	movs	r1, #0
     d86:	4ba0      	ldr	r3, [pc, #640]	; (1008 <STACK_SIZE+0x508>)
     d88:	4798      	blx	r3
     d8a:	1c03      	adds	r3, r0, #0
     d8c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     d8e:	1dfb      	adds	r3, r7, #7
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	1dfa      	adds	r2, r7, #7
     d94:	1c59      	adds	r1, r3, #1
     d96:	7011      	strb	r1, [r2, #0]
     d98:	683a      	ldr	r2, [r7, #0]
     d9a:	1c18      	adds	r0, r3, #0
     d9c:	1c11      	adds	r1, r2, #0
     d9e:	2200      	movs	r2, #0
     da0:	4b98      	ldr	r3, [pc, #608]	; (1004 <STACK_SIZE+0x504>)
     da2:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_7, HID_MODIFIER_NONE);
     da4:	2024      	movs	r0, #36	; 0x24
     da6:	2100      	movs	r1, #0
     da8:	4b97      	ldr	r3, [pc, #604]	; (1008 <STACK_SIZE+0x508>)
     daa:	4798      	blx	r3
     dac:	1c03      	adds	r3, r0, #0
     dae:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     db0:	1dfb      	adds	r3, r7, #7
     db2:	781b      	ldrb	r3, [r3, #0]
     db4:	1dfa      	adds	r2, r7, #7
     db6:	1c59      	adds	r1, r3, #1
     db8:	7011      	strb	r1, [r2, #0]
     dba:	683a      	ldr	r2, [r7, #0]
     dbc:	1c18      	adds	r0, r3, #0
     dbe:	1c11      	adds	r1, r2, #0
     dc0:	2200      	movs	r2, #0
     dc2:	4b90      	ldr	r3, [pc, #576]	; (1004 <STACK_SIZE+0x504>)
     dc4:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_6, HID_MODIFIER_NONE);
     dc6:	2023      	movs	r0, #35	; 0x23
     dc8:	2100      	movs	r1, #0
     dca:	4b8f      	ldr	r3, [pc, #572]	; (1008 <STACK_SIZE+0x508>)
     dcc:	4798      	blx	r3
     dce:	1c03      	adds	r3, r0, #0
     dd0:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     dd2:	1dfb      	adds	r3, r7, #7
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	1dfa      	adds	r2, r7, #7
     dd8:	1c59      	adds	r1, r3, #1
     dda:	7011      	strb	r1, [r2, #0]
     ddc:	683a      	ldr	r2, [r7, #0]
     dde:	1c18      	adds	r0, r3, #0
     de0:	1c11      	adds	r1, r2, #0
     de2:	2200      	movs	r2, #0
     de4:	4b87      	ldr	r3, [pc, #540]	; (1004 <STACK_SIZE+0x504>)
     de6:	4798      	blx	r3
	
	//Layer button
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     de8:	200f      	movs	r0, #15
     dea:	2100      	movs	r1, #0
     dec:	4b86      	ldr	r3, [pc, #536]	; (1008 <STACK_SIZE+0x508>)
     dee:	4798      	blx	r3
     df0:	1c03      	adds	r3, r0, #0
     df2:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     df4:	1dfb      	adds	r3, r7, #7
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	1dfa      	adds	r2, r7, #7
     dfa:	1c59      	adds	r1, r3, #1
     dfc:	7011      	strb	r1, [r2, #0]
     dfe:	683a      	ldr	r2, [r7, #0]
     e00:	1c18      	adds	r0, r3, #0
     e02:	1c11      	adds	r1, r2, #0
     e04:	2200      	movs	r2, #0
     e06:	4b7f      	ldr	r3, [pc, #508]	; (1004 <STACK_SIZE+0x504>)
     e08:	4798      	blx	r3
	
	//Row 4 top right
	tempKey = initStandardKey(HID_CLOSE_BRACKET, HID_MODIFIER_NONE);
     e0a:	2030      	movs	r0, #48	; 0x30
     e0c:	2100      	movs	r1, #0
     e0e:	4b7e      	ldr	r3, [pc, #504]	; (1008 <STACK_SIZE+0x508>)
     e10:	4798      	blx	r3
     e12:	1c03      	adds	r3, r0, #0
     e14:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     e16:	1dfb      	adds	r3, r7, #7
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	1dfa      	adds	r2, r7, #7
     e1c:	1c59      	adds	r1, r3, #1
     e1e:	7011      	strb	r1, [r2, #0]
     e20:	683a      	ldr	r2, [r7, #0]
     e22:	1c18      	adds	r0, r3, #0
     e24:	1c11      	adds	r1, r2, #0
     e26:	2200      	movs	r2, #0
     e28:	4b76      	ldr	r3, [pc, #472]	; (1004 <STACK_SIZE+0x504>)
     e2a:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_P, HID_MODIFIER_NONE);
     e2c:	2013      	movs	r0, #19
     e2e:	2100      	movs	r1, #0
     e30:	4b75      	ldr	r3, [pc, #468]	; (1008 <STACK_SIZE+0x508>)
     e32:	4798      	blx	r3
     e34:	1c03      	adds	r3, r0, #0
     e36:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     e38:	1dfb      	adds	r3, r7, #7
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	1dfa      	adds	r2, r7, #7
     e3e:	1c59      	adds	r1, r3, #1
     e40:	7011      	strb	r1, [r2, #0]
     e42:	683a      	ldr	r2, [r7, #0]
     e44:	1c18      	adds	r0, r3, #0
     e46:	1c11      	adds	r1, r2, #0
     e48:	2200      	movs	r2, #0
     e4a:	4b6e      	ldr	r3, [pc, #440]	; (1004 <STACK_SIZE+0x504>)
     e4c:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_O, HID_MODIFIER_NONE);
     e4e:	2012      	movs	r0, #18
     e50:	2100      	movs	r1, #0
     e52:	4b6d      	ldr	r3, [pc, #436]	; (1008 <STACK_SIZE+0x508>)
     e54:	4798      	blx	r3
     e56:	1c03      	adds	r3, r0, #0
     e58:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     e5a:	1dfb      	adds	r3, r7, #7
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	1dfa      	adds	r2, r7, #7
     e60:	1c59      	adds	r1, r3, #1
     e62:	7011      	strb	r1, [r2, #0]
     e64:	683a      	ldr	r2, [r7, #0]
     e66:	1c18      	adds	r0, r3, #0
     e68:	1c11      	adds	r1, r2, #0
     e6a:	2200      	movs	r2, #0
     e6c:	4b65      	ldr	r3, [pc, #404]	; (1004 <STACK_SIZE+0x504>)
     e6e:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_I, HID_MODIFIER_NONE);
     e70:	200c      	movs	r0, #12
     e72:	2100      	movs	r1, #0
     e74:	4b64      	ldr	r3, [pc, #400]	; (1008 <STACK_SIZE+0x508>)
     e76:	4798      	blx	r3
     e78:	1c03      	adds	r3, r0, #0
     e7a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     e7c:	1dfb      	adds	r3, r7, #7
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	1dfa      	adds	r2, r7, #7
     e82:	1c59      	adds	r1, r3, #1
     e84:	7011      	strb	r1, [r2, #0]
     e86:	683a      	ldr	r2, [r7, #0]
     e88:	1c18      	adds	r0, r3, #0
     e8a:	1c11      	adds	r1, r2, #0
     e8c:	2200      	movs	r2, #0
     e8e:	4b5d      	ldr	r3, [pc, #372]	; (1004 <STACK_SIZE+0x504>)
     e90:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_U, HID_MODIFIER_NONE);
     e92:	2018      	movs	r0, #24
     e94:	2100      	movs	r1, #0
     e96:	4b5c      	ldr	r3, [pc, #368]	; (1008 <STACK_SIZE+0x508>)
     e98:	4798      	blx	r3
     e9a:	1c03      	adds	r3, r0, #0
     e9c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     e9e:	1dfb      	adds	r3, r7, #7
     ea0:	781b      	ldrb	r3, [r3, #0]
     ea2:	1dfa      	adds	r2, r7, #7
     ea4:	1c59      	adds	r1, r3, #1
     ea6:	7011      	strb	r1, [r2, #0]
     ea8:	683a      	ldr	r2, [r7, #0]
     eaa:	1c18      	adds	r0, r3, #0
     eac:	1c11      	adds	r1, r2, #0
     eae:	2200      	movs	r2, #0
     eb0:	4b54      	ldr	r3, [pc, #336]	; (1004 <STACK_SIZE+0x504>)
     eb2:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_Y, HID_MODIFIER_NONE);
     eb4:	201c      	movs	r0, #28
     eb6:	2100      	movs	r1, #0
     eb8:	4b53      	ldr	r3, [pc, #332]	; (1008 <STACK_SIZE+0x508>)
     eba:	4798      	blx	r3
     ebc:	1c03      	adds	r3, r0, #0
     ebe:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ec0:	1dfb      	adds	r3, r7, #7
     ec2:	781b      	ldrb	r3, [r3, #0]
     ec4:	1dfa      	adds	r2, r7, #7
     ec6:	1c59      	adds	r1, r3, #1
     ec8:	7011      	strb	r1, [r2, #0]
     eca:	683a      	ldr	r2, [r7, #0]
     ecc:	1c18      	adds	r0, r3, #0
     ece:	1c11      	adds	r1, r2, #0
     ed0:	2200      	movs	r2, #0
     ed2:	4b4c      	ldr	r3, [pc, #304]	; (1004 <STACK_SIZE+0x504>)
     ed4:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_OPEN_BRACKET, HID_MODIFIER_NONE);
     ed6:	202f      	movs	r0, #47	; 0x2f
     ed8:	2100      	movs	r1, #0
     eda:	4b4b      	ldr	r3, [pc, #300]	; (1008 <STACK_SIZE+0x508>)
     edc:	4798      	blx	r3
     ede:	1c03      	adds	r3, r0, #0
     ee0:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	1dfa      	adds	r2, r7, #7
     ee8:	1c59      	adds	r1, r3, #1
     eea:	7011      	strb	r1, [r2, #0]
     eec:	683a      	ldr	r2, [r7, #0]
     eee:	1c18      	adds	r0, r3, #0
     ef0:	1c11      	adds	r1, r2, #0
     ef2:	2200      	movs	r2, #0
     ef4:	4b43      	ldr	r3, [pc, #268]	; (1004 <STACK_SIZE+0x504>)
     ef6:	4798      	blx	r3
	
	//Row 3 right
	tempKey = initStandardKey(HID_QUOTE, HID_MODIFIER_NONE);
     ef8:	2034      	movs	r0, #52	; 0x34
     efa:	2100      	movs	r1, #0
     efc:	4b42      	ldr	r3, [pc, #264]	; (1008 <STACK_SIZE+0x508>)
     efe:	4798      	blx	r3
     f00:	1c03      	adds	r3, r0, #0
     f02:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     f04:	1dfb      	adds	r3, r7, #7
     f06:	781b      	ldrb	r3, [r3, #0]
     f08:	1dfa      	adds	r2, r7, #7
     f0a:	1c59      	adds	r1, r3, #1
     f0c:	7011      	strb	r1, [r2, #0]
     f0e:	683a      	ldr	r2, [r7, #0]
     f10:	1c18      	adds	r0, r3, #0
     f12:	1c11      	adds	r1, r2, #0
     f14:	2200      	movs	r2, #0
     f16:	4b3b      	ldr	r3, [pc, #236]	; (1004 <STACK_SIZE+0x504>)
     f18:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_COLON, HID_MODIFIER_NONE);
     f1a:	2033      	movs	r0, #51	; 0x33
     f1c:	2100      	movs	r1, #0
     f1e:	4b3a      	ldr	r3, [pc, #232]	; (1008 <STACK_SIZE+0x508>)
     f20:	4798      	blx	r3
     f22:	1c03      	adds	r3, r0, #0
     f24:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     f26:	1dfb      	adds	r3, r7, #7
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	1dfa      	adds	r2, r7, #7
     f2c:	1c59      	adds	r1, r3, #1
     f2e:	7011      	strb	r1, [r2, #0]
     f30:	683a      	ldr	r2, [r7, #0]
     f32:	1c18      	adds	r0, r3, #0
     f34:	1c11      	adds	r1, r2, #0
     f36:	2200      	movs	r2, #0
     f38:	4b32      	ldr	r3, [pc, #200]	; (1004 <STACK_SIZE+0x504>)
     f3a:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
     f3c:	200f      	movs	r0, #15
     f3e:	2100      	movs	r1, #0
     f40:	4b31      	ldr	r3, [pc, #196]	; (1008 <STACK_SIZE+0x508>)
     f42:	4798      	blx	r3
     f44:	1c03      	adds	r3, r0, #0
     f46:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     f48:	1dfb      	adds	r3, r7, #7
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	1dfa      	adds	r2, r7, #7
     f4e:	1c59      	adds	r1, r3, #1
     f50:	7011      	strb	r1, [r2, #0]
     f52:	683a      	ldr	r2, [r7, #0]
     f54:	1c18      	adds	r0, r3, #0
     f56:	1c11      	adds	r1, r2, #0
     f58:	2200      	movs	r2, #0
     f5a:	4b2a      	ldr	r3, [pc, #168]	; (1004 <STACK_SIZE+0x504>)
     f5c:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_K, HID_MODIFIER_NONE);
     f5e:	200e      	movs	r0, #14
     f60:	2100      	movs	r1, #0
     f62:	4b29      	ldr	r3, [pc, #164]	; (1008 <STACK_SIZE+0x508>)
     f64:	4798      	blx	r3
     f66:	1c03      	adds	r3, r0, #0
     f68:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     f6a:	1dfb      	adds	r3, r7, #7
     f6c:	781b      	ldrb	r3, [r3, #0]
     f6e:	1dfa      	adds	r2, r7, #7
     f70:	1c59      	adds	r1, r3, #1
     f72:	7011      	strb	r1, [r2, #0]
     f74:	683a      	ldr	r2, [r7, #0]
     f76:	1c18      	adds	r0, r3, #0
     f78:	1c11      	adds	r1, r2, #0
     f7a:	2200      	movs	r2, #0
     f7c:	4b21      	ldr	r3, [pc, #132]	; (1004 <STACK_SIZE+0x504>)
     f7e:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_J, HID_MODIFIER_NONE);
     f80:	200d      	movs	r0, #13
     f82:	2100      	movs	r1, #0
     f84:	4b20      	ldr	r3, [pc, #128]	; (1008 <STACK_SIZE+0x508>)
     f86:	4798      	blx	r3
     f88:	1c03      	adds	r3, r0, #0
     f8a:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     f8c:	1dfb      	adds	r3, r7, #7
     f8e:	781b      	ldrb	r3, [r3, #0]
     f90:	1dfa      	adds	r2, r7, #7
     f92:	1c59      	adds	r1, r3, #1
     f94:	7011      	strb	r1, [r2, #0]
     f96:	683a      	ldr	r2, [r7, #0]
     f98:	1c18      	adds	r0, r3, #0
     f9a:	1c11      	adds	r1, r2, #0
     f9c:	2200      	movs	r2, #0
     f9e:	4b19      	ldr	r3, [pc, #100]	; (1004 <STACK_SIZE+0x504>)
     fa0:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_H, HID_MODIFIER_NONE);
     fa2:	200b      	movs	r0, #11
     fa4:	2100      	movs	r1, #0
     fa6:	4b18      	ldr	r3, [pc, #96]	; (1008 <STACK_SIZE+0x508>)
     fa8:	4798      	blx	r3
     faa:	1c03      	adds	r3, r0, #0
     fac:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     fae:	1dfb      	adds	r3, r7, #7
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	1dfa      	adds	r2, r7, #7
     fb4:	1c59      	adds	r1, r3, #1
     fb6:	7011      	strb	r1, [r2, #0]
     fb8:	683a      	ldr	r2, [r7, #0]
     fba:	1c18      	adds	r0, r3, #0
     fbc:	1c11      	adds	r1, r2, #0
     fbe:	2200      	movs	r2, #0
     fc0:	4b10      	ldr	r3, [pc, #64]	; (1004 <STACK_SIZE+0x504>)
     fc2:	4798      	blx	r3
	
	//Row 2 right
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_SHIFT);
     fc4:	2000      	movs	r0, #0
     fc6:	2120      	movs	r1, #32
     fc8:	4b0f      	ldr	r3, [pc, #60]	; (1008 <STACK_SIZE+0x508>)
     fca:	4798      	blx	r3
     fcc:	1c03      	adds	r3, r0, #0
     fce:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     fd0:	1dfb      	adds	r3, r7, #7
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	1dfa      	adds	r2, r7, #7
     fd6:	1c59      	adds	r1, r3, #1
     fd8:	7011      	strb	r1, [r2, #0]
     fda:	683a      	ldr	r2, [r7, #0]
     fdc:	1c18      	adds	r0, r3, #0
     fde:	1c11      	adds	r1, r2, #0
     fe0:	2200      	movs	r2, #0
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <STACK_SIZE+0x504>)
     fe4:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_SLASH, HID_MODIFIER_NONE);
     fe6:	2038      	movs	r0, #56	; 0x38
     fe8:	2100      	movs	r1, #0
     fea:	4b07      	ldr	r3, [pc, #28]	; (1008 <STACK_SIZE+0x508>)
     fec:	4798      	blx	r3
     fee:	1c03      	adds	r3, r0, #0
     ff0:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
     ff2:	1dfb      	adds	r3, r7, #7
     ff4:	781b      	ldrb	r3, [r3, #0]
     ff6:	1dfa      	adds	r2, r7, #7
     ff8:	1c59      	adds	r1, r3, #1
     ffa:	7011      	strb	r1, [r2, #0]
     ffc:	683a      	ldr	r2, [r7, #0]
     ffe:	1c18      	adds	r0, r3, #0
    1000:	e004      	b.n	100c <STACK_SIZE+0x50c>
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00001651 	.word	0x00001651
    1008:	00000481 	.word	0x00000481
    100c:	1c11      	adds	r1, r2, #0
    100e:	2200      	movs	r2, #0
    1010:	4b8a      	ldr	r3, [pc, #552]	; (123c <STACK_SIZE+0x73c>)
    1012:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_DOT, HID_MODIFIER_NONE);
    1014:	2037      	movs	r0, #55	; 0x37
    1016:	2100      	movs	r1, #0
    1018:	4b89      	ldr	r3, [pc, #548]	; (1240 <STACK_SIZE+0x740>)
    101a:	4798      	blx	r3
    101c:	1c03      	adds	r3, r0, #0
    101e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1020:	1dfb      	adds	r3, r7, #7
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	1dfa      	adds	r2, r7, #7
    1026:	1c59      	adds	r1, r3, #1
    1028:	7011      	strb	r1, [r2, #0]
    102a:	683a      	ldr	r2, [r7, #0]
    102c:	1c18      	adds	r0, r3, #0
    102e:	1c11      	adds	r1, r2, #0
    1030:	2200      	movs	r2, #0
    1032:	4b82      	ldr	r3, [pc, #520]	; (123c <STACK_SIZE+0x73c>)
    1034:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_COMMA, HID_MODIFIER_NONE);
    1036:	2036      	movs	r0, #54	; 0x36
    1038:	2100      	movs	r1, #0
    103a:	4b81      	ldr	r3, [pc, #516]	; (1240 <STACK_SIZE+0x740>)
    103c:	4798      	blx	r3
    103e:	1c03      	adds	r3, r0, #0
    1040:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1042:	1dfb      	adds	r3, r7, #7
    1044:	781b      	ldrb	r3, [r3, #0]
    1046:	1dfa      	adds	r2, r7, #7
    1048:	1c59      	adds	r1, r3, #1
    104a:	7011      	strb	r1, [r2, #0]
    104c:	683a      	ldr	r2, [r7, #0]
    104e:	1c18      	adds	r0, r3, #0
    1050:	1c11      	adds	r1, r2, #0
    1052:	2200      	movs	r2, #0
    1054:	4b79      	ldr	r3, [pc, #484]	; (123c <STACK_SIZE+0x73c>)
    1056:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_M, HID_MODIFIER_NONE);
    1058:	2010      	movs	r0, #16
    105a:	2100      	movs	r1, #0
    105c:	4b78      	ldr	r3, [pc, #480]	; (1240 <STACK_SIZE+0x740>)
    105e:	4798      	blx	r3
    1060:	1c03      	adds	r3, r0, #0
    1062:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1064:	1dfb      	adds	r3, r7, #7
    1066:	781b      	ldrb	r3, [r3, #0]
    1068:	1dfa      	adds	r2, r7, #7
    106a:	1c59      	adds	r1, r3, #1
    106c:	7011      	strb	r1, [r2, #0]
    106e:	683a      	ldr	r2, [r7, #0]
    1070:	1c18      	adds	r0, r3, #0
    1072:	1c11      	adds	r1, r2, #0
    1074:	2200      	movs	r2, #0
    1076:	4b71      	ldr	r3, [pc, #452]	; (123c <STACK_SIZE+0x73c>)
    1078:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_N, HID_MODIFIER_NONE);
    107a:	2011      	movs	r0, #17
    107c:	2100      	movs	r1, #0
    107e:	4b70      	ldr	r3, [pc, #448]	; (1240 <STACK_SIZE+0x740>)
    1080:	4798      	blx	r3
    1082:	1c03      	adds	r3, r0, #0
    1084:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1086:	1dfb      	adds	r3, r7, #7
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	1dfa      	adds	r2, r7, #7
    108c:	1c59      	adds	r1, r3, #1
    108e:	7011      	strb	r1, [r2, #0]
    1090:	683a      	ldr	r2, [r7, #0]
    1092:	1c18      	adds	r0, r3, #0
    1094:	1c11      	adds	r1, r2, #0
    1096:	2200      	movs	r2, #0
    1098:	4b68      	ldr	r3, [pc, #416]	; (123c <STACK_SIZE+0x73c>)
    109a:	4798      	blx	r3
	
	//Layer button
	tempKey = initStandardKey(HID_L, HID_MODIFIER_NONE);
    109c:	200f      	movs	r0, #15
    109e:	2100      	movs	r1, #0
    10a0:	4b67      	ldr	r3, [pc, #412]	; (1240 <STACK_SIZE+0x740>)
    10a2:	4798      	blx	r3
    10a4:	1c03      	adds	r3, r0, #0
    10a6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    10a8:	1dfb      	adds	r3, r7, #7
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	1dfa      	adds	r2, r7, #7
    10ae:	1c59      	adds	r1, r3, #1
    10b0:	7011      	strb	r1, [r2, #0]
    10b2:	683a      	ldr	r2, [r7, #0]
    10b4:	1c18      	adds	r0, r3, #0
    10b6:	1c11      	adds	r1, r2, #0
    10b8:	2200      	movs	r2, #0
    10ba:	4b60      	ldr	r3, [pc, #384]	; (123c <STACK_SIZE+0x73c>)
    10bc:	4798      	blx	r3
	
	//Row 1 right
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_UI);
    10be:	2000      	movs	r0, #0
    10c0:	2180      	movs	r1, #128	; 0x80
    10c2:	4b5f      	ldr	r3, [pc, #380]	; (1240 <STACK_SIZE+0x740>)
    10c4:	4798      	blx	r3
    10c6:	1c03      	adds	r3, r0, #0
    10c8:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    10ca:	1dfb      	adds	r3, r7, #7
    10cc:	781b      	ldrb	r3, [r3, #0]
    10ce:	1dfa      	adds	r2, r7, #7
    10d0:	1c59      	adds	r1, r3, #1
    10d2:	7011      	strb	r1, [r2, #0]
    10d4:	683a      	ldr	r2, [r7, #0]
    10d6:	1c18      	adds	r0, r3, #0
    10d8:	1c11      	adds	r1, r2, #0
    10da:	2200      	movs	r2, #0
    10dc:	4b57      	ldr	r3, [pc, #348]	; (123c <STACK_SIZE+0x73c>)
    10de:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_RIGHT, HID_MODIFIER_NONE);
    10e0:	204f      	movs	r0, #79	; 0x4f
    10e2:	2100      	movs	r1, #0
    10e4:	4b56      	ldr	r3, [pc, #344]	; (1240 <STACK_SIZE+0x740>)
    10e6:	4798      	blx	r3
    10e8:	1c03      	adds	r3, r0, #0
    10ea:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    10ec:	1dfb      	adds	r3, r7, #7
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	1dfa      	adds	r2, r7, #7
    10f2:	1c59      	adds	r1, r3, #1
    10f4:	7011      	strb	r1, [r2, #0]
    10f6:	683a      	ldr	r2, [r7, #0]
    10f8:	1c18      	adds	r0, r3, #0
    10fa:	1c11      	adds	r1, r2, #0
    10fc:	2200      	movs	r2, #0
    10fe:	4b4f      	ldr	r3, [pc, #316]	; (123c <STACK_SIZE+0x73c>)
    1100:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_UP, HID_MODIFIER_NONE);
    1102:	2052      	movs	r0, #82	; 0x52
    1104:	2100      	movs	r1, #0
    1106:	4b4e      	ldr	r3, [pc, #312]	; (1240 <STACK_SIZE+0x740>)
    1108:	4798      	blx	r3
    110a:	1c03      	adds	r3, r0, #0
    110c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    110e:	1dfb      	adds	r3, r7, #7
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	1dfa      	adds	r2, r7, #7
    1114:	1c59      	adds	r1, r3, #1
    1116:	7011      	strb	r1, [r2, #0]
    1118:	683a      	ldr	r2, [r7, #0]
    111a:	1c18      	adds	r0, r3, #0
    111c:	1c11      	adds	r1, r2, #0
    111e:	2200      	movs	r2, #0
    1120:	4b46      	ldr	r3, [pc, #280]	; (123c <STACK_SIZE+0x73c>)
    1122:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_DOWN, HID_MODIFIER_NONE);
    1124:	2051      	movs	r0, #81	; 0x51
    1126:	2100      	movs	r1, #0
    1128:	4b45      	ldr	r3, [pc, #276]	; (1240 <STACK_SIZE+0x740>)
    112a:	4798      	blx	r3
    112c:	1c03      	adds	r3, r0, #0
    112e:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1130:	1dfb      	adds	r3, r7, #7
    1132:	781b      	ldrb	r3, [r3, #0]
    1134:	1dfa      	adds	r2, r7, #7
    1136:	1c59      	adds	r1, r3, #1
    1138:	7011      	strb	r1, [r2, #0]
    113a:	683a      	ldr	r2, [r7, #0]
    113c:	1c18      	adds	r0, r3, #0
    113e:	1c11      	adds	r1, r2, #0
    1140:	2200      	movs	r2, #0
    1142:	4b3e      	ldr	r3, [pc, #248]	; (123c <STACK_SIZE+0x73c>)
    1144:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_LEFT, HID_MODIFIER_NONE);
    1146:	2050      	movs	r0, #80	; 0x50
    1148:	2100      	movs	r1, #0
    114a:	4b3d      	ldr	r3, [pc, #244]	; (1240 <STACK_SIZE+0x740>)
    114c:	4798      	blx	r3
    114e:	1c03      	adds	r3, r0, #0
    1150:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1152:	1dfb      	adds	r3, r7, #7
    1154:	781b      	ldrb	r3, [r3, #0]
    1156:	1dfa      	adds	r2, r7, #7
    1158:	1c59      	adds	r1, r3, #1
    115a:	7011      	strb	r1, [r2, #0]
    115c:	683a      	ldr	r2, [r7, #0]
    115e:	1c18      	adds	r0, r3, #0
    1160:	1c11      	adds	r1, r2, #0
    1162:	2200      	movs	r2, #0
    1164:	4b35      	ldr	r3, [pc, #212]	; (123c <STACK_SIZE+0x73c>)
    1166:	4798      	blx	r3
	
	//Row 0 Thumb
	tempKey = initStandardKey(HID_SPACEBAR, HID_MODIFIER_NONE);
    1168:	202c      	movs	r0, #44	; 0x2c
    116a:	2100      	movs	r1, #0
    116c:	4b34      	ldr	r3, [pc, #208]	; (1240 <STACK_SIZE+0x740>)
    116e:	4798      	blx	r3
    1170:	1c03      	adds	r3, r0, #0
    1172:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1174:	1dfb      	adds	r3, r7, #7
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	1dfa      	adds	r2, r7, #7
    117a:	1c59      	adds	r1, r3, #1
    117c:	7011      	strb	r1, [r2, #0]
    117e:	683a      	ldr	r2, [r7, #0]
    1180:	1c18      	adds	r0, r3, #0
    1182:	1c11      	adds	r1, r2, #0
    1184:	2200      	movs	r2, #0
    1186:	4b2d      	ldr	r3, [pc, #180]	; (123c <STACK_SIZE+0x73c>)
    1188:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_ENTER, HID_MODIFIER_NONE);
    118a:	2028      	movs	r0, #40	; 0x28
    118c:	2100      	movs	r1, #0
    118e:	4b2c      	ldr	r3, [pc, #176]	; (1240 <STACK_SIZE+0x740>)
    1190:	4798      	blx	r3
    1192:	1c03      	adds	r3, r0, #0
    1194:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    1196:	1dfb      	adds	r3, r7, #7
    1198:	781b      	ldrb	r3, [r3, #0]
    119a:	1dfa      	adds	r2, r7, #7
    119c:	1c59      	adds	r1, r3, #1
    119e:	7011      	strb	r1, [r2, #0]
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	1c18      	adds	r0, r3, #0
    11a4:	1c11      	adds	r1, r2, #0
    11a6:	2200      	movs	r2, #0
    11a8:	4b24      	ldr	r3, [pc, #144]	; (123c <STACK_SIZE+0x73c>)
    11aa:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_PAGEDOWN, HID_MODIFIER_NONE);
    11ac:	204e      	movs	r0, #78	; 0x4e
    11ae:	2100      	movs	r1, #0
    11b0:	4b23      	ldr	r3, [pc, #140]	; (1240 <STACK_SIZE+0x740>)
    11b2:	4798      	blx	r3
    11b4:	1c03      	adds	r3, r0, #0
    11b6:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    11b8:	1dfb      	adds	r3, r7, #7
    11ba:	781b      	ldrb	r3, [r3, #0]
    11bc:	1dfa      	adds	r2, r7, #7
    11be:	1c59      	adds	r1, r3, #1
    11c0:	7011      	strb	r1, [r2, #0]
    11c2:	683a      	ldr	r2, [r7, #0]
    11c4:	1c18      	adds	r0, r3, #0
    11c6:	1c11      	adds	r1, r2, #0
    11c8:	2200      	movs	r2, #0
    11ca:	4b1c      	ldr	r3, [pc, #112]	; (123c <STACK_SIZE+0x73c>)
    11cc:	4798      	blx	r3
	
	tempKey = initStandardKey(HID_PAGEUP, HID_MODIFIER_NONE);
    11ce:	204b      	movs	r0, #75	; 0x4b
    11d0:	2100      	movs	r1, #0
    11d2:	4b1b      	ldr	r3, [pc, #108]	; (1240 <STACK_SIZE+0x740>)
    11d4:	4798      	blx	r3
    11d6:	1c03      	adds	r3, r0, #0
    11d8:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    11da:	1dfb      	adds	r3, r7, #7
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	1dfa      	adds	r2, r7, #7
    11e0:	1c59      	adds	r1, r3, #1
    11e2:	7011      	strb	r1, [r2, #0]
    11e4:	683a      	ldr	r2, [r7, #0]
    11e6:	1c18      	adds	r0, r3, #0
    11e8:	1c11      	adds	r1, r2, #0
    11ea:	2200      	movs	r2, #0
    11ec:	4b13      	ldr	r3, [pc, #76]	; (123c <STACK_SIZE+0x73c>)
    11ee:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_ALT);
    11f0:	2000      	movs	r0, #0
    11f2:	2140      	movs	r1, #64	; 0x40
    11f4:	4b12      	ldr	r3, [pc, #72]	; (1240 <STACK_SIZE+0x740>)
    11f6:	4798      	blx	r3
    11f8:	1c03      	adds	r3, r0, #0
    11fa:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    11fc:	1dfb      	adds	r3, r7, #7
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	1dfa      	adds	r2, r7, #7
    1202:	1c59      	adds	r1, r3, #1
    1204:	7011      	strb	r1, [r2, #0]
    1206:	683a      	ldr	r2, [r7, #0]
    1208:	1c18      	adds	r0, r3, #0
    120a:	1c11      	adds	r1, r2, #0
    120c:	2200      	movs	r2, #0
    120e:	4b0b      	ldr	r3, [pc, #44]	; (123c <STACK_SIZE+0x73c>)
    1210:	4798      	blx	r3
	
	tempKey = initStandardKey(0, HID_MODIFIER_RIGHT_CTRL);
    1212:	2000      	movs	r0, #0
    1214:	2110      	movs	r1, #16
    1216:	4b0a      	ldr	r3, [pc, #40]	; (1240 <STACK_SIZE+0x740>)
    1218:	4798      	blx	r3
    121a:	1c03      	adds	r3, r0, #0
    121c:	603b      	str	r3, [r7, #0]
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
    121e:	1dfb      	adds	r3, r7, #7
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	1dfa      	adds	r2, r7, #7
    1224:	1c59      	adds	r1, r3, #1
    1226:	7011      	strb	r1, [r2, #0]
    1228:	683a      	ldr	r2, [r7, #0]
    122a:	1c18      	adds	r0, r3, #0
    122c:	1c11      	adds	r1, r2, #0
    122e:	2200      	movs	r2, #0
    1230:	4b02      	ldr	r3, [pc, #8]	; (123c <STACK_SIZE+0x73c>)
    1232:	4798      	blx	r3
	
}
    1234:	46bd      	mov	sp, r7
    1236:	b002      	add	sp, #8
    1238:	bd80      	pop	{r7, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	00001651 	.word	0x00001651
    1240:	00000481 	.word	0x00000481

00001244 <initLayerManager>:
	addKey(keyIndex++,tempKey, STANDARD_LAYER);
	
}

static void initLayerManager(void)
{
    1244:	b580      	push	{r7, lr}
    1246:	b082      	sub	sp, #8
    1248:	af00      	add	r7, sp, #0
	boardLayerManager.currentLayer = 0;
    124a:	4a15      	ldr	r2, [pc, #84]	; (12a0 <initLayerManager+0x5c>)
    124c:	233d      	movs	r3, #61	; 0x3d
    124e:	2100      	movs	r1, #0
    1250:	54d1      	strb	r1, [r2, r3]
	boardLayerManager.currentLayerType = STANDARD_LAYER;
    1252:	4a13      	ldr	r2, [pc, #76]	; (12a0 <initLayerManager+0x5c>)
    1254:	233e      	movs	r3, #62	; 0x3e
    1256:	2100      	movs	r1, #0
    1258:	54d1      	strb	r1, [r2, r3]
	boardLayerManager.numberOfLayers = 0;
    125a:	4a11      	ldr	r2, [pc, #68]	; (12a0 <initLayerManager+0x5c>)
    125c:	233c      	movs	r3, #60	; 0x3c
    125e:	2100      	movs	r1, #0
    1260:	54d1      	strb	r1, [r2, r3]
	//initialize all layers to be 0
	//change to memset
	for(uint8_t i = 0; i < MAX_NUMBER_OF_LAYERS; i++)
    1262:	1dfb      	adds	r3, r7, #7
    1264:	2200      	movs	r2, #0
    1266:	701a      	strb	r2, [r3, #0]
    1268:	e00a      	b.n	1280 <initLayerManager+0x3c>
	{
		//make sure that they are all 0
		boardLayerManager.layers[i] = 0;		
    126a:	1dfb      	adds	r3, r7, #7
    126c:	781a      	ldrb	r2, [r3, #0]
    126e:	4b0c      	ldr	r3, [pc, #48]	; (12a0 <initLayerManager+0x5c>)
    1270:	0092      	lsls	r2, r2, #2
    1272:	2100      	movs	r1, #0
    1274:	50d1      	str	r1, [r2, r3]
	boardLayerManager.currentLayer = 0;
	boardLayerManager.currentLayerType = STANDARD_LAYER;
	boardLayerManager.numberOfLayers = 0;
	//initialize all layers to be 0
	//change to memset
	for(uint8_t i = 0; i < MAX_NUMBER_OF_LAYERS; i++)
    1276:	1dfb      	adds	r3, r7, #7
    1278:	781a      	ldrb	r2, [r3, #0]
    127a:	1dfb      	adds	r3, r7, #7
    127c:	3201      	adds	r2, #1
    127e:	701a      	strb	r2, [r3, #0]
    1280:	1dfb      	adds	r3, r7, #7
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	2b0e      	cmp	r3, #14
    1286:	d9f0      	bls.n	126a <initLayerManager+0x26>
		//make sure that they are all 0
		boardLayerManager.layers[i] = 0;		
	}

	//setup the standard layer
	LAYER * temp = initLayer(STANDARD_LAYER);
    1288:	2000      	movs	r0, #0
    128a:	4b06      	ldr	r3, [pc, #24]	; (12a4 <initLayerManager+0x60>)
    128c:	4798      	blx	r3
    128e:	1c03      	adds	r3, r0, #0
    1290:	603b      	str	r3, [r7, #0]
	if(!addLayer(temp))
    1292:	683b      	ldr	r3, [r7, #0]
    1294:	1c18      	adds	r0, r3, #0
    1296:	4b04      	ldr	r3, [pc, #16]	; (12a8 <initLayerManager+0x64>)
    1298:	4798      	blx	r3
	{
		//error couldn't add the layer to the system.
	}

}
    129a:	46bd      	mov	sp, r7
    129c:	b002      	add	sp, #8
    129e:	bd80      	pop	{r7, pc}
    12a0:	20000974 	.word	0x20000974
    12a4:	0000156d 	.word	0x0000156d
    12a8:	000015d1 	.word	0x000015d1

000012ac <initKeyBoard>:

void initKeyBoard(void)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	b086      	sub	sp, #24
    12b0:	af00      	add	r7, sp, #0
	//configure pin PB10 as output High
	bool tempPinValue = false;	
    12b2:	1c3b      	adds	r3, r7, #0
    12b4:	3315      	adds	r3, #21
    12b6:	2200      	movs	r2, #0
    12b8:	701a      	strb	r2, [r3, #0]
	//configure pin PB06 as input
	uint8_t i = 0;
    12ba:	1c3b      	adds	r3, r7, #0
    12bc:	3317      	adds	r3, #23
    12be:	2200      	movs	r2, #0
    12c0:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
    12c2:	1c3b      	adds	r3, r7, #0
    12c4:	3316      	adds	r3, #22
    12c6:	2200      	movs	r2, #0
    12c8:	701a      	strb	r2, [r3, #0]
	//clear all data in ram buffer
	initSalloc();
    12ca:	4b9c      	ldr	r3, [pc, #624]	; (153c <initKeyBoard+0x290>)
    12cc:	4798      	blx	r3

	//setup data structure
	initLayerManager();
    12ce:	4b9c      	ldr	r3, [pc, #624]	; (1540 <initKeyBoard+0x294>)
    12d0:	4798      	blx	r3
	initKeys();
    12d2:	4b9c      	ldr	r3, [pc, #624]	; (1544 <initKeyBoard+0x298>)
    12d4:	4798      	blx	r3
	
//outputs
	keyboardObj.rowIOArr[0] = ROW_0;
    12d6:	4b9c      	ldr	r3, [pc, #624]	; (1548 <initKeyBoard+0x29c>)
    12d8:	222f      	movs	r2, #47	; 0x2f
    12da:	601a      	str	r2, [r3, #0]
	keyboardObj.rowIOArr[1] = ROW_1;
    12dc:	4b9a      	ldr	r3, [pc, #616]	; (1548 <initKeyBoard+0x29c>)
    12de:	222e      	movs	r2, #46	; 0x2e
    12e0:	605a      	str	r2, [r3, #4]
	keyboardObj.rowIOArr[2] = ROW_2;
    12e2:	4b99      	ldr	r3, [pc, #612]	; (1548 <initKeyBoard+0x29c>)
    12e4:	222d      	movs	r2, #45	; 0x2d
    12e6:	609a      	str	r2, [r3, #8]
	keyboardObj.rowIOArr[3] = ROW_3;
    12e8:	4b97      	ldr	r3, [pc, #604]	; (1548 <initKeyBoard+0x29c>)
    12ea:	222c      	movs	r2, #44	; 0x2c
    12ec:	60da      	str	r2, [r3, #12]
	keyboardObj.rowIOArr[4] = ROW_4;
    12ee:	4b96      	ldr	r3, [pc, #600]	; (1548 <initKeyBoard+0x29c>)
    12f0:	222b      	movs	r2, #43	; 0x2b
    12f2:	611a      	str	r2, [r3, #16]
	keyboardObj.rowIOArr[5] = ROW_5;
    12f4:	4b94      	ldr	r3, [pc, #592]	; (1548 <initKeyBoard+0x29c>)
    12f6:	222a      	movs	r2, #42	; 0x2a
    12f8:	615a      	str	r2, [r3, #20]
	

//input
	keyboardObj.columnIOArr[0] = COLUMN_0;
    12fa:	4b93      	ldr	r3, [pc, #588]	; (1548 <initKeyBoard+0x29c>)
    12fc:	2226      	movs	r2, #38	; 0x26
    12fe:	619a      	str	r2, [r3, #24]
	keyboardObj.columnIOArr[1] = COLUMN_1;
    1300:	4b91      	ldr	r3, [pc, #580]	; (1548 <initKeyBoard+0x29c>)
    1302:	2225      	movs	r2, #37	; 0x25
    1304:	61da      	str	r2, [r3, #28]
	keyboardObj.columnIOArr[2] = COLUMN_2;
    1306:	4b90      	ldr	r3, [pc, #576]	; (1548 <initKeyBoard+0x29c>)
    1308:	2224      	movs	r2, #36	; 0x24
    130a:	621a      	str	r2, [r3, #32]
	keyboardObj.columnIOArr[3] = COLUMN_3;
    130c:	4b8e      	ldr	r3, [pc, #568]	; (1548 <initKeyBoard+0x29c>)
    130e:	2223      	movs	r2, #35	; 0x23
    1310:	625a      	str	r2, [r3, #36]	; 0x24
	keyboardObj.columnIOArr[4] = COLUMN_4;
    1312:	4b8d      	ldr	r3, [pc, #564]	; (1548 <initKeyBoard+0x29c>)
    1314:	2222      	movs	r2, #34	; 0x22
    1316:	629a      	str	r2, [r3, #40]	; 0x28
	keyboardObj.columnIOArr[5] = COLUMN_5;
    1318:	4b8b      	ldr	r3, [pc, #556]	; (1548 <initKeyBoard+0x29c>)
    131a:	2221      	movs	r2, #33	; 0x21
    131c:	62da      	str	r2, [r3, #44]	; 0x2c
	keyboardObj.columnIOArr[6] = COLUMN_6;
    131e:	4b8a      	ldr	r3, [pc, #552]	; (1548 <initKeyBoard+0x29c>)
    1320:	2220      	movs	r2, #32
    1322:	631a      	str	r2, [r3, #48]	; 0x30

	// Right Hand
	//outputs
	rightKeyboardObj.rowIOArr[0] = R_ROW_0;
    1324:	4b89      	ldr	r3, [pc, #548]	; (154c <initKeyBoard+0x2a0>)
    1326:	2214      	movs	r2, #20
    1328:	601a      	str	r2, [r3, #0]
	rightKeyboardObj.rowIOArr[1] = R_ROW_1;
    132a:	4b88      	ldr	r3, [pc, #544]	; (154c <initKeyBoard+0x2a0>)
    132c:	2213      	movs	r2, #19
    132e:	605a      	str	r2, [r3, #4]
	rightKeyboardObj.rowIOArr[2] = R_ROW_2;
    1330:	4b86      	ldr	r3, [pc, #536]	; (154c <initKeyBoard+0x2a0>)
    1332:	2212      	movs	r2, #18
    1334:	609a      	str	r2, [r3, #8]
	rightKeyboardObj.rowIOArr[3] = R_ROW_3;
    1336:	4b85      	ldr	r3, [pc, #532]	; (154c <initKeyBoard+0x2a0>)
    1338:	220b      	movs	r2, #11
    133a:	60da      	str	r2, [r3, #12]
	rightKeyboardObj.rowIOArr[4] = R_ROW_4;
    133c:	4b83      	ldr	r3, [pc, #524]	; (154c <initKeyBoard+0x2a0>)
    133e:	2210      	movs	r2, #16
    1340:	611a      	str	r2, [r3, #16]
	rightKeyboardObj.rowIOArr[5] = R_ROW_5;
    1342:	4b82      	ldr	r3, [pc, #520]	; (154c <initKeyBoard+0x2a0>)
    1344:	2211      	movs	r2, #17
    1346:	615a      	str	r2, [r3, #20]

	//input
	rightKeyboardObj.columnIOArr[0] = R_COLUMN_0;
    1348:	4b80      	ldr	r3, [pc, #512]	; (154c <initKeyBoard+0x2a0>)
    134a:	220a      	movs	r2, #10
    134c:	619a      	str	r2, [r3, #24]
	rightKeyboardObj.columnIOArr[1] = R_COLUMN_1;
    134e:	4b7f      	ldr	r3, [pc, #508]	; (154c <initKeyBoard+0x2a0>)
    1350:	2229      	movs	r2, #41	; 0x29
    1352:	61da      	str	r2, [r3, #28]
	rightKeyboardObj.columnIOArr[2] = R_COLUMN_2;
    1354:	4b7d      	ldr	r3, [pc, #500]	; (154c <initKeyBoard+0x2a0>)
    1356:	2228      	movs	r2, #40	; 0x28
    1358:	621a      	str	r2, [r3, #32]
	rightKeyboardObj.columnIOArr[3] = R_COLUMN_3;
    135a:	4b7c      	ldr	r3, [pc, #496]	; (154c <initKeyBoard+0x2a0>)
    135c:	2207      	movs	r2, #7
    135e:	625a      	str	r2, [r3, #36]	; 0x24
	rightKeyboardObj.columnIOArr[4] = R_COLUMN_4;
    1360:	4b7a      	ldr	r3, [pc, #488]	; (154c <initKeyBoard+0x2a0>)
    1362:	2206      	movs	r2, #6
    1364:	629a      	str	r2, [r3, #40]	; 0x28
	rightKeyboardObj.columnIOArr[5] = R_COLUMN_5;
    1366:	4b79      	ldr	r3, [pc, #484]	; (154c <initKeyBoard+0x2a0>)
    1368:	2205      	movs	r2, #5
    136a:	62da      	str	r2, [r3, #44]	; 0x2c
	rightKeyboardObj.columnIOArr[6] = R_COLUMN_6;
    136c:	4b77      	ldr	r3, [pc, #476]	; (154c <initKeyBoard+0x2a0>)
    136e:	2204      	movs	r2, #4
    1370:	631a      	str	r2, [r3, #48]	; 0x30
// Set all of the output pins high, and
// set the interrupt to trigger when the pin goes high.

	
	struct extint_chan_conf *config_extint_chan;
	uint8_t eicLine = 0;
    1372:	1c3b      	adds	r3, r7, #0
    1374:	3314      	adds	r3, #20
    1376:	2200      	movs	r2, #0
    1378:	701a      	strb	r2, [r3, #0]


//Currently we have disabled all interrupts
	for(i = 0; i < 0; i++)
    137a:	1c3b      	adds	r3, r7, #0
    137c:	3317      	adds	r3, #23
    137e:	2200      	movs	r2, #0
    1380:	701a      	strb	r2, [r3, #0]
    1382:	46c0      	nop			; (mov r8, r8)
	}


//setup all of the pins

	ioport_init();
    1384:	4b72      	ldr	r3, [pc, #456]	; (1550 <initKeyBoard+0x2a4>)
    1386:	4798      	blx	r3
	delay_init();
    1388:	4b72      	ldr	r3, [pc, #456]	; (1554 <initKeyBoard+0x2a8>)
    138a:	4798      	blx	r3
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
    138c:	1c3b      	adds	r3, r7, #0
    138e:	3317      	adds	r3, #23
    1390:	2200      	movs	r2, #0
    1392:	701a      	strb	r2, [r3, #0]
    1394:	e0c8      	b.n	1528 <initKeyBoard+0x27c>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
    1396:	1c3b      	adds	r3, r7, #0
    1398:	3317      	adds	r3, #23
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	2274      	movs	r2, #116	; 0x74
    139e:	4353      	muls	r3, r2
    13a0:	1c1a      	adds	r2, r3, #0
    13a2:	3288      	adds	r2, #136	; 0x88
    13a4:	4b68      	ldr	r3, [pc, #416]	; (1548 <initKeyBoard+0x29c>)
    13a6:	18d3      	adds	r3, r2, r3
    13a8:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
    13aa:	1c3b      	adds	r3, r7, #0
    13ac:	3317      	adds	r3, #23
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	2274      	movs	r2, #116	; 0x74
    13b2:	4353      	muls	r3, r2
    13b4:	1c1a      	adds	r2, r3, #0
    13b6:	3288      	adds	r2, #136	; 0x88
    13b8:	4b64      	ldr	r3, [pc, #400]	; (154c <initKeyBoard+0x2a0>)
    13ba:	18d3      	adds	r3, r2, r3
    13bc:	60fb      	str	r3, [r7, #12]
		row->rowIO = keyboardObj.rowIOArr[i];
    13be:	1c3b      	adds	r3, r7, #0
    13c0:	3317      	adds	r3, #23
    13c2:	781a      	ldrb	r2, [r3, #0]
    13c4:	4b60      	ldr	r3, [pc, #384]	; (1548 <initKeyBoard+0x29c>)
    13c6:	0092      	lsls	r2, r2, #2
    13c8:	58d2      	ldr	r2, [r2, r3]
    13ca:	693b      	ldr	r3, [r7, #16]
    13cc:	601a      	str	r2, [r3, #0]
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
    13ce:	1c3b      	adds	r3, r7, #0
    13d0:	3317      	adds	r3, #23
    13d2:	781a      	ldrb	r2, [r3, #0]
    13d4:	4b5d      	ldr	r3, [pc, #372]	; (154c <initKeyBoard+0x2a0>)
    13d6:	0092      	lsls	r2, r2, #2
    13d8:	58d2      	ldr	r2, [r2, r3]
    13da:	68fb      	ldr	r3, [r7, #12]
    13dc:	601a      	str	r2, [r3, #0]
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
    13de:	1c3b      	adds	r3, r7, #0
    13e0:	3316      	adds	r3, #22
    13e2:	2200      	movs	r2, #0
    13e4:	701a      	strb	r2, [r3, #0]
    13e6:	e07a      	b.n	14de <initKeyBoard+0x232>
		{
			KEY_OBJ *key = &row->keys[j];
    13e8:	1c3b      	adds	r3, r7, #0
    13ea:	3316      	adds	r3, #22
    13ec:	781b      	ldrb	r3, [r3, #0]
    13ee:	011b      	lsls	r3, r3, #4
    13f0:	693a      	ldr	r2, [r7, #16]
    13f2:	18d3      	adds	r3, r2, r3
    13f4:	3304      	adds	r3, #4
    13f6:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
    13f8:	1c3b      	adds	r3, r7, #0
    13fa:	3316      	adds	r3, #22
    13fc:	781b      	ldrb	r3, [r3, #0]
    13fe:	011b      	lsls	r3, r3, #4
    1400:	68fa      	ldr	r2, [r7, #12]
    1402:	18d3      	adds	r3, r2, r3
    1404:	3304      	adds	r3, #4
    1406:	607b      	str	r3, [r7, #4]
			key->columnIO = keyboardObj.columnIOArr[j];
    1408:	1c3b      	adds	r3, r7, #0
    140a:	3316      	adds	r3, #22
    140c:	781a      	ldrb	r2, [r3, #0]
    140e:	4b4e      	ldr	r3, [pc, #312]	; (1548 <initKeyBoard+0x29c>)
    1410:	3206      	adds	r2, #6
    1412:	0092      	lsls	r2, r2, #2
    1414:	58d2      	ldr	r2, [r2, r3]
    1416:	68bb      	ldr	r3, [r7, #8]
    1418:	601a      	str	r2, [r3, #0]
			key->currentState = false;
    141a:	68bb      	ldr	r3, [r7, #8]
    141c:	2200      	movs	r2, #0
    141e:	715a      	strb	r2, [r3, #5]
			key->previousState = false;
    1420:	68bb      	ldr	r3, [r7, #8]
    1422:	2200      	movs	r2, #0
    1424:	711a      	strb	r2, [r3, #4]
			key->keyId = keyIdMapping[i][j];
    1426:	1c3b      	adds	r3, r7, #0
    1428:	3317      	adds	r3, #23
    142a:	781a      	ldrb	r2, [r3, #0]
    142c:	1c3b      	adds	r3, r7, #0
    142e:	3316      	adds	r3, #22
    1430:	7818      	ldrb	r0, [r3, #0]
    1432:	4949      	ldr	r1, [pc, #292]	; (1558 <initKeyBoard+0x2ac>)
    1434:	1c13      	adds	r3, r2, #0
    1436:	00db      	lsls	r3, r3, #3
    1438:	1a9b      	subs	r3, r3, r2
    143a:	181b      	adds	r3, r3, r0
    143c:	5c5a      	ldrb	r2, [r3, r1]
    143e:	68bb      	ldr	r3, [r7, #8]
    1440:	731a      	strb	r2, [r3, #12]
			key->keyJustDown = false;
    1442:	68bb      	ldr	r3, [r7, #8]
    1444:	2200      	movs	r2, #0
    1446:	719a      	strb	r2, [r3, #6]
			key->keyJustRelease = false;
    1448:	68bb      	ldr	r3, [r7, #8]
    144a:	2200      	movs	r2, #0
    144c:	71da      	strb	r2, [r3, #7]
			key->keyHoldCount = 0;
    144e:	68bb      	ldr	r3, [r7, #8]
    1450:	2200      	movs	r2, #0
    1452:	609a      	str	r2, [r3, #8]

			//right key
			rightKey->columnIO = rightKeyboardObj.columnIOArr[j];
    1454:	1c3b      	adds	r3, r7, #0
    1456:	3316      	adds	r3, #22
    1458:	781a      	ldrb	r2, [r3, #0]
    145a:	4b3c      	ldr	r3, [pc, #240]	; (154c <initKeyBoard+0x2a0>)
    145c:	3206      	adds	r2, #6
    145e:	0092      	lsls	r2, r2, #2
    1460:	58d2      	ldr	r2, [r2, r3]
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	601a      	str	r2, [r3, #0]
			rightKey->currentState = false;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	2200      	movs	r2, #0
    146a:	715a      	strb	r2, [r3, #5]
			rightKey->previousState = false;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	2200      	movs	r2, #0
    1470:	711a      	strb	r2, [r3, #4]
			rightKey->keyId = keyIdMappingRight[i][j];
    1472:	1c3b      	adds	r3, r7, #0
    1474:	3317      	adds	r3, #23
    1476:	781a      	ldrb	r2, [r3, #0]
    1478:	1c3b      	adds	r3, r7, #0
    147a:	3316      	adds	r3, #22
    147c:	7818      	ldrb	r0, [r3, #0]
    147e:	4937      	ldr	r1, [pc, #220]	; (155c <initKeyBoard+0x2b0>)
    1480:	1c13      	adds	r3, r2, #0
    1482:	00db      	lsls	r3, r3, #3
    1484:	1a9b      	subs	r3, r3, r2
    1486:	181b      	adds	r3, r3, r0
    1488:	5c5a      	ldrb	r2, [r3, r1]
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	731a      	strb	r2, [r3, #12]
			rightKey->keyJustDown = false;
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	2200      	movs	r2, #0
    1492:	719a      	strb	r2, [r3, #6]
			rightKey->keyJustRelease = false;
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	2200      	movs	r2, #0
    1498:	71da      	strb	r2, [r3, #7]
			rightKey->keyHoldCount = 0;
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	2200      	movs	r2, #0
    149e:	609a      	str	r2, [r3, #8]
			
			ioport_set_pin_dir(key->columnIO, IOPORT_DIR_INPUT);
    14a0:	68bb      	ldr	r3, [r7, #8]
    14a2:	681b      	ldr	r3, [r3, #0]
    14a4:	1c18      	adds	r0, r3, #0
    14a6:	2100      	movs	r1, #0
    14a8:	4b2d      	ldr	r3, [pc, #180]	; (1560 <initKeyBoard+0x2b4>)
    14aa:	4798      	blx	r3
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
    14ac:	68bb      	ldr	r3, [r7, #8]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	1c18      	adds	r0, r3, #0
    14b2:	2120      	movs	r1, #32
    14b4:	4b2b      	ldr	r3, [pc, #172]	; (1564 <initKeyBoard+0x2b8>)
    14b6:	4798      	blx	r3
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	1c18      	adds	r0, r3, #0
    14be:	2100      	movs	r1, #0
    14c0:	4b27      	ldr	r3, [pc, #156]	; (1560 <initKeyBoard+0x2b4>)
    14c2:	4798      	blx	r3
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	1c18      	adds	r0, r3, #0
    14ca:	2120      	movs	r1, #32
    14cc:	4b25      	ldr	r3, [pc, #148]	; (1564 <initKeyBoard+0x2b8>)
    14ce:	4798      	blx	r3
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		row->rowIO = keyboardObj.rowIOArr[i];
		rightRow->rowIO = rightKeyboardObj.rowIOArr[i];
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
    14d0:	1c3b      	adds	r3, r7, #0
    14d2:	3316      	adds	r3, #22
    14d4:	781a      	ldrb	r2, [r3, #0]
    14d6:	1c3b      	adds	r3, r7, #0
    14d8:	3316      	adds	r3, #22
    14da:	3201      	adds	r2, #1
    14dc:	701a      	strb	r2, [r3, #0]
    14de:	1c3b      	adds	r3, r7, #0
    14e0:	3316      	adds	r3, #22
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	2b06      	cmp	r3, #6
    14e6:	d800      	bhi.n	14ea <initKeyBoard+0x23e>
    14e8:	e77e      	b.n	13e8 <initKeyBoard+0x13c>
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
			
			ioport_set_pin_dir(rightKey->columnIO, IOPORT_DIR_INPUT);
			ioport_set_pin_mode(rightKey->columnIO, IOPORT_MODE_PULLDOWN);
	}
	ioport_set_pin_dir(row->rowIO, IOPORT_DIR_OUTPUT);
    14ea:	693b      	ldr	r3, [r7, #16]
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	1c18      	adds	r0, r3, #0
    14f0:	2101      	movs	r1, #1
    14f2:	4b1b      	ldr	r3, [pc, #108]	; (1560 <initKeyBoard+0x2b4>)
    14f4:	4798      	blx	r3
	ioport_set_pin_level(row->rowIO, false);//set the pin low
    14f6:	693b      	ldr	r3, [r7, #16]
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	1c18      	adds	r0, r3, #0
    14fc:	2100      	movs	r1, #0
    14fe:	4b1a      	ldr	r3, [pc, #104]	; (1568 <initKeyBoard+0x2bc>)
    1500:	4798      	blx	r3
	
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	681b      	ldr	r3, [r3, #0]
    1506:	1c18      	adds	r0, r3, #0
    1508:	2101      	movs	r1, #1
    150a:	4b15      	ldr	r3, [pc, #84]	; (1560 <initKeyBoard+0x2b4>)
    150c:	4798      	blx	r3
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	1c18      	adds	r0, r3, #0
    1514:	2100      	movs	r1, #0
    1516:	4b14      	ldr	r3, [pc, #80]	; (1568 <initKeyBoard+0x2bc>)
    1518:	4798      	blx	r3

//setup all of the pins

	ioport_init();
	delay_init();
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
    151a:	1c3b      	adds	r3, r7, #0
    151c:	3317      	adds	r3, #23
    151e:	781a      	ldrb	r2, [r3, #0]
    1520:	1c3b      	adds	r3, r7, #0
    1522:	3317      	adds	r3, #23
    1524:	3201      	adds	r2, #1
    1526:	701a      	strb	r2, [r3, #0]
    1528:	1c3b      	adds	r3, r7, #0
    152a:	3317      	adds	r3, #23
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	2b05      	cmp	r3, #5
    1530:	d800      	bhi.n	1534 <initKeyBoard+0x288>
    1532:	e730      	b.n	1396 <initKeyBoard+0xea>
	ioport_set_pin_dir(rightRow->rowIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
		
	}
	
}
    1534:	46bd      	mov	sp, r7
    1536:	b006      	add	sp, #24
    1538:	bd80      	pop	{r7, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	00009e99 	.word	0x00009e99
    1540:	00001245 	.word	0x00001245
    1544:	000007f9 	.word	0x000007f9
    1548:	200002f4 	.word	0x200002f4
    154c:	20000634 	.word	0x20000634
    1550:	00000759 	.word	0x00000759
    1554:	00000111 	.word	0x00000111
    1558:	200000c4 	.word	0x200000c4
    155c:	200000f0 	.word	0x200000f0
    1560:	00000789 	.word	0x00000789
    1564:	00000769 	.word	0x00000769
    1568:	000007b1 	.word	0x000007b1

0000156c <initLayer>:


LAYER *initLayer(KEYBOARD_LAYER layer)
{
    156c:	b580      	push	{r7, lr}
    156e:	b084      	sub	sp, #16
    1570:	af00      	add	r7, sp, #0
    1572:	1c02      	adds	r2, r0, #0
    1574:	1dfb      	adds	r3, r7, #7
    1576:	701a      	strb	r2, [r3, #0]
	//a layer holds the number of keys on the board(whether 64, 76, 108, any number)
	LAYER *boardLayer = (LAYER*)salloc(sizeof(LAYER));
    1578:	239a      	movs	r3, #154	; 0x9a
    157a:	005b      	lsls	r3, r3, #1
    157c:	1c18      	adds	r0, r3, #0
    157e:	4b13      	ldr	r3, [pc, #76]	; (15cc <initLayer+0x60>)
    1580:	4798      	blx	r3
    1582:	1c03      	adds	r3, r0, #0
    1584:	60bb      	str	r3, [r7, #8]
	boardLayer->type = layer;
    1586:	68ba      	ldr	r2, [r7, #8]
    1588:	1df9      	adds	r1, r7, #7
    158a:	2398      	movs	r3, #152	; 0x98
    158c:	005b      	lsls	r3, r3, #1
    158e:	7809      	ldrb	r1, [r1, #0]
    1590:	54d1      	strb	r1, [r2, r3]
	//zero out all of the keys
	for(uint8_t i = 0; i < NUMBER_OF_KEYS; i++)
    1592:	1c3b      	adds	r3, r7, #0
    1594:	330f      	adds	r3, #15
    1596:	2200      	movs	r2, #0
    1598:	701a      	strb	r2, [r3, #0]
    159a:	e00d      	b.n	15b8 <initLayer+0x4c>
	{
		boardLayer->keys[i] = 0;
    159c:	1c3b      	adds	r3, r7, #0
    159e:	330f      	adds	r3, #15
    15a0:	781a      	ldrb	r2, [r3, #0]
    15a2:	68bb      	ldr	r3, [r7, #8]
    15a4:	0092      	lsls	r2, r2, #2
    15a6:	2100      	movs	r1, #0
    15a8:	50d1      	str	r1, [r2, r3]
{
	//a layer holds the number of keys on the board(whether 64, 76, 108, any number)
	LAYER *boardLayer = (LAYER*)salloc(sizeof(LAYER));
	boardLayer->type = layer;
	//zero out all of the keys
	for(uint8_t i = 0; i < NUMBER_OF_KEYS; i++)
    15aa:	1c3b      	adds	r3, r7, #0
    15ac:	330f      	adds	r3, #15
    15ae:	781a      	ldrb	r2, [r3, #0]
    15b0:	1c3b      	adds	r3, r7, #0
    15b2:	330f      	adds	r3, #15
    15b4:	3201      	adds	r2, #1
    15b6:	701a      	strb	r2, [r3, #0]
    15b8:	1c3b      	adds	r3, r7, #0
    15ba:	330f      	adds	r3, #15
    15bc:	781b      	ldrb	r3, [r3, #0]
    15be:	2b4b      	cmp	r3, #75	; 0x4b
    15c0:	d9ec      	bls.n	159c <initLayer+0x30>
	{
		boardLayer->keys[i] = 0;
	}
	return boardLayer;
    15c2:	68bb      	ldr	r3, [r7, #8]
}
    15c4:	1c18      	adds	r0, r3, #0
    15c6:	46bd      	mov	sp, r7
    15c8:	b004      	add	sp, #16
    15ca:	bd80      	pop	{r7, pc}
    15cc:	00009eb9 	.word	0x00009eb9

000015d0 <addLayer>:

bool addLayer(LAYER *layer)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	6078      	str	r0, [r7, #4]
	//check if we already have a the same layer in the manager
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
    15d8:	1c3b      	adds	r3, r7, #0
    15da:	330f      	adds	r3, #15
    15dc:	2200      	movs	r2, #0
    15de:	701a      	strb	r2, [r3, #0]
    15e0:	e017      	b.n	1612 <addLayer+0x42>
	{
		
		if(boardLayerManager.layers[i]->type == layer->type)
    15e2:	1c3b      	adds	r3, r7, #0
    15e4:	330f      	adds	r3, #15
    15e6:	781a      	ldrb	r2, [r3, #0]
    15e8:	4b18      	ldr	r3, [pc, #96]	; (164c <addLayer+0x7c>)
    15ea:	0092      	lsls	r2, r2, #2
    15ec:	58d2      	ldr	r2, [r2, r3]
    15ee:	2398      	movs	r3, #152	; 0x98
    15f0:	005b      	lsls	r3, r3, #1
    15f2:	5cd2      	ldrb	r2, [r2, r3]
    15f4:	6879      	ldr	r1, [r7, #4]
    15f6:	2398      	movs	r3, #152	; 0x98
    15f8:	005b      	lsls	r3, r3, #1
    15fa:	5ccb      	ldrb	r3, [r1, r3]
    15fc:	429a      	cmp	r2, r3
    15fe:	d101      	bne.n	1604 <addLayer+0x34>
		{
			return false;//Layer is already in the manager, add a different one
    1600:	2300      	movs	r3, #0
    1602:	e01e      	b.n	1642 <addLayer+0x72>
}

bool addLayer(LAYER *layer)
{
	//check if we already have a the same layer in the manager
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
    1604:	1c3b      	adds	r3, r7, #0
    1606:	330f      	adds	r3, #15
    1608:	781a      	ldrb	r2, [r3, #0]
    160a:	1c3b      	adds	r3, r7, #0
    160c:	330f      	adds	r3, #15
    160e:	3201      	adds	r2, #1
    1610:	701a      	strb	r2, [r3, #0]
    1612:	4a0e      	ldr	r2, [pc, #56]	; (164c <addLayer+0x7c>)
    1614:	233c      	movs	r3, #60	; 0x3c
    1616:	5cd3      	ldrb	r3, [r2, r3]
    1618:	1c3a      	adds	r2, r7, #0
    161a:	320f      	adds	r2, #15
    161c:	7812      	ldrb	r2, [r2, #0]
    161e:	429a      	cmp	r2, r3
    1620:	d3df      	bcc.n	15e2 <addLayer+0x12>
		{
			return false;//Layer is already in the manager, add a different one
		}
	}
	//add the layer to the manager
	boardLayerManager.layers[boardLayerManager.numberOfLayers] = layer;
    1622:	4a0a      	ldr	r2, [pc, #40]	; (164c <addLayer+0x7c>)
    1624:	233c      	movs	r3, #60	; 0x3c
    1626:	5cd3      	ldrb	r3, [r2, r3]
    1628:	1c1a      	adds	r2, r3, #0
    162a:	4b08      	ldr	r3, [pc, #32]	; (164c <addLayer+0x7c>)
    162c:	0092      	lsls	r2, r2, #2
    162e:	6879      	ldr	r1, [r7, #4]
    1630:	50d1      	str	r1, [r2, r3]
	boardLayerManager.numberOfLayers++;
    1632:	4a06      	ldr	r2, [pc, #24]	; (164c <addLayer+0x7c>)
    1634:	233c      	movs	r3, #60	; 0x3c
    1636:	5cd3      	ldrb	r3, [r2, r3]
    1638:	3301      	adds	r3, #1
    163a:	b2d9      	uxtb	r1, r3
    163c:	4a03      	ldr	r2, [pc, #12]	; (164c <addLayer+0x7c>)
    163e:	233c      	movs	r3, #60	; 0x3c
    1640:	54d1      	strb	r1, [r2, r3]
}
    1642:	1c18      	adds	r0, r3, #0
    1644:	46bd      	mov	sp, r7
    1646:	b004      	add	sp, #16
    1648:	bd80      	pop	{r7, pc}
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	20000974 	.word	0x20000974

00001650 <addKey>:
// Adds a key
// You can override already assigned keys in run time
bool addKey(uint8_t keyId, GENERIC_KEY *key, KEYBOARD_LAYER layer)
{
    1650:	b580      	push	{r7, lr}
    1652:	b084      	sub	sp, #16
    1654:	af00      	add	r7, sp, #0
    1656:	6039      	str	r1, [r7, #0]
    1658:	1dfb      	adds	r3, r7, #7
    165a:	1c01      	adds	r1, r0, #0
    165c:	7019      	strb	r1, [r3, #0]
    165e:	1dbb      	adds	r3, r7, #6
    1660:	701a      	strb	r2, [r3, #0]
	//adds a key to a specific layer already on the board
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
    1662:	1c3b      	adds	r3, r7, #0
    1664:	330f      	adds	r3, #15
    1666:	2200      	movs	r2, #0
    1668:	701a      	strb	r2, [r3, #0]
    166a:	e023      	b.n	16b4 <addKey+0x64>
	{
		if(boardLayerManager.layers[i]->type == layer)
    166c:	1c3b      	adds	r3, r7, #0
    166e:	330f      	adds	r3, #15
    1670:	781a      	ldrb	r2, [r3, #0]
    1672:	4b17      	ldr	r3, [pc, #92]	; (16d0 <addKey+0x80>)
    1674:	0092      	lsls	r2, r2, #2
    1676:	58d2      	ldr	r2, [r2, r3]
    1678:	2398      	movs	r3, #152	; 0x98
    167a:	005b      	lsls	r3, r3, #1
    167c:	5cd3      	ldrb	r3, [r2, r3]
    167e:	1dba      	adds	r2, r7, #6
    1680:	7812      	ldrb	r2, [r2, #0]
    1682:	429a      	cmp	r2, r3
    1684:	d10f      	bne.n	16a6 <addKey+0x56>
		{
			//valid layer
			return addKeyToLayer(keyId, key, boardLayerManager.layers[i]);
    1686:	1c3b      	adds	r3, r7, #0
    1688:	330f      	adds	r3, #15
    168a:	781a      	ldrb	r2, [r3, #0]
    168c:	4b10      	ldr	r3, [pc, #64]	; (16d0 <addKey+0x80>)
    168e:	0092      	lsls	r2, r2, #2
    1690:	58d3      	ldr	r3, [r2, r3]
    1692:	1dfa      	adds	r2, r7, #7
    1694:	7811      	ldrb	r1, [r2, #0]
    1696:	683a      	ldr	r2, [r7, #0]
    1698:	1c08      	adds	r0, r1, #0
    169a:	1c11      	adds	r1, r2, #0
    169c:	1c1a      	adds	r2, r3, #0
    169e:	4b0d      	ldr	r3, [pc, #52]	; (16d4 <addKey+0x84>)
    16a0:	4798      	blx	r3
    16a2:	1c03      	adds	r3, r0, #0
    16a4:	e00f      	b.n	16c6 <addKey+0x76>
// Adds a key
// You can override already assigned keys in run time
bool addKey(uint8_t keyId, GENERIC_KEY *key, KEYBOARD_LAYER layer)
{
	//adds a key to a specific layer already on the board
	for(uint8_t i = 0; i < boardLayerManager.numberOfLayers; i++)
    16a6:	1c3b      	adds	r3, r7, #0
    16a8:	330f      	adds	r3, #15
    16aa:	781a      	ldrb	r2, [r3, #0]
    16ac:	1c3b      	adds	r3, r7, #0
    16ae:	330f      	adds	r3, #15
    16b0:	3201      	adds	r2, #1
    16b2:	701a      	strb	r2, [r3, #0]
    16b4:	4a06      	ldr	r2, [pc, #24]	; (16d0 <addKey+0x80>)
    16b6:	233c      	movs	r3, #60	; 0x3c
    16b8:	5cd3      	ldrb	r3, [r2, r3]
    16ba:	1c3a      	adds	r2, r7, #0
    16bc:	320f      	adds	r2, #15
    16be:	7812      	ldrb	r2, [r2, #0]
    16c0:	429a      	cmp	r2, r3
    16c2:	d3d3      	bcc.n	166c <addKey+0x1c>
		{
			//valid layer
			return addKeyToLayer(keyId, key, boardLayerManager.layers[i]);
		}
	}
	return false;//layer currently isn't in the board
    16c4:	2300      	movs	r3, #0
}
    16c6:	1c18      	adds	r0, r3, #0
    16c8:	46bd      	mov	sp, r7
    16ca:	b004      	add	sp, #16
    16cc:	bd80      	pop	{r7, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	20000974 	.word	0x20000974
    16d4:	000016d9 	.word	0x000016d9

000016d8 <addKeyToLayer>:

bool addKeyToLayer(uint8_t keyId, GENERIC_KEY *key, LAYER *layer)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b084      	sub	sp, #16
    16dc:	af00      	add	r7, sp, #0
    16de:	60b9      	str	r1, [r7, #8]
    16e0:	607a      	str	r2, [r7, #4]
    16e2:	1c3b      	adds	r3, r7, #0
    16e4:	330f      	adds	r3, #15
    16e6:	1c02      	adds	r2, r0, #0
    16e8:	701a      	strb	r2, [r3, #0]
	//can over write existing keys
	//check that the input is valid
	if(key == 0 || layer == 0)
    16ea:	68bb      	ldr	r3, [r7, #8]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d002      	beq.n	16f6 <addKeyToLayer+0x1e>
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d101      	bne.n	16fa <addKeyToLayer+0x22>
	{
		return false;//invalid key, or layer
    16f6:	2300      	movs	r3, #0
    16f8:	e007      	b.n	170a <addKeyToLayer+0x32>
	}
	layer->keys[keyId] = key;
    16fa:	1c3b      	adds	r3, r7, #0
    16fc:	330f      	adds	r3, #15
    16fe:	781a      	ldrb	r2, [r3, #0]
    1700:	687b      	ldr	r3, [r7, #4]
    1702:	0092      	lsls	r2, r2, #2
    1704:	68b9      	ldr	r1, [r7, #8]
    1706:	50d1      	str	r1, [r2, r3]
	return true;
    1708:	2301      	movs	r3, #1
}
    170a:	1c18      	adds	r0, r3, #0
    170c:	46bd      	mov	sp, r7
    170e:	b004      	add	sp, #16
    1710:	bd80      	pop	{r7, pc}
    1712:	46c0      	nop			; (mov r8, r8)

00001714 <checkKeys>:



uint8_t checkKeys(void)
{
    1714:	b580      	push	{r7, lr}
    1716:	b086      	sub	sp, #24
    1718:	af00      	add	r7, sp, #0
	uint8_t i = 0;
    171a:	1c3b      	adds	r3, r7, #0
    171c:	3317      	adds	r3, #23
    171e:	2200      	movs	r2, #0
    1720:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
    1722:	1c3b      	adds	r3, r7, #0
    1724:	3316      	adds	r3, #22
    1726:	2200      	movs	r2, #0
    1728:	701a      	strb	r2, [r3, #0]
	static uint8_t  keySendCounter= 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
    172a:	1c3b      	adds	r3, r7, #0
    172c:	3317      	adds	r3, #23
    172e:	2200      	movs	r2, #0
    1730:	701a      	strb	r2, [r3, #0]
    1732:	e132      	b.n	199a <checkKeys+0x286>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
    1734:	1c3b      	adds	r3, r7, #0
    1736:	3317      	adds	r3, #23
    1738:	781b      	ldrb	r3, [r3, #0]
    173a:	2274      	movs	r2, #116	; 0x74
    173c:	4353      	muls	r3, r2
    173e:	1c1a      	adds	r2, r3, #0
    1740:	3288      	adds	r2, #136	; 0x88
    1742:	4b9b      	ldr	r3, [pc, #620]	; (19b0 <checkKeys+0x29c>)
    1744:	18d3      	adds	r3, r2, r3
    1746:	613b      	str	r3, [r7, #16]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
    1748:	1c3b      	adds	r3, r7, #0
    174a:	3317      	adds	r3, #23
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	2274      	movs	r2, #116	; 0x74
    1750:	4353      	muls	r3, r2
    1752:	1c1a      	adds	r2, r3, #0
    1754:	3288      	adds	r2, #136	; 0x88
    1756:	4b97      	ldr	r3, [pc, #604]	; (19b4 <checkKeys+0x2a0>)
    1758:	18d3      	adds	r3, r2, r3
    175a:	60fb      	str	r3, [r7, #12]
		
		ioport_set_pin_level(row->rowIO, true);
    175c:	693b      	ldr	r3, [r7, #16]
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	1c18      	adds	r0, r3, #0
    1762:	2101      	movs	r1, #1
    1764:	4b94      	ldr	r3, [pc, #592]	; (19b8 <checkKeys+0x2a4>)
    1766:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, true);
    1768:	68fb      	ldr	r3, [r7, #12]
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	1c18      	adds	r0, r3, #0
    176e:	2101      	movs	r1, #1
    1770:	4b91      	ldr	r3, [pc, #580]	; (19b8 <checkKeys+0x2a4>)
    1772:	4798      	blx	r3
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
    1774:	1c3b      	adds	r3, r7, #0
    1776:	3316      	adds	r3, #22
    1778:	2200      	movs	r2, #0
    177a:	701a      	strb	r2, [r3, #0]
    177c:	e0f4      	b.n	1968 <checkKeys+0x254>
		{
			KEY_OBJ *key = &row->keys[j];
    177e:	1c3b      	adds	r3, r7, #0
    1780:	3316      	adds	r3, #22
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	011b      	lsls	r3, r3, #4
    1786:	693a      	ldr	r2, [r7, #16]
    1788:	18d3      	adds	r3, r2, r3
    178a:	3304      	adds	r3, #4
    178c:	60bb      	str	r3, [r7, #8]
			KEY_OBJ *rightKey = &rightRow->keys[j];
    178e:	1c3b      	adds	r3, r7, #0
    1790:	3316      	adds	r3, #22
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	011b      	lsls	r3, r3, #4
    1796:	68fa      	ldr	r2, [r7, #12]
    1798:	18d3      	adds	r3, r2, r3
    179a:	3304      	adds	r3, #4
    179c:	607b      	str	r3, [r7, #4]
				
			key->previousState = key->currentState;
    179e:	68bb      	ldr	r3, [r7, #8]
    17a0:	795a      	ldrb	r2, [r3, #5]
    17a2:	68bb      	ldr	r3, [r7, #8]
    17a4:	711a      	strb	r2, [r3, #4]
			key->currentState = ioport_get_pin_level(key->columnIO);
    17a6:	68bb      	ldr	r3, [r7, #8]
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	1c18      	adds	r0, r3, #0
    17ac:	4b83      	ldr	r3, [pc, #524]	; (19bc <checkKeys+0x2a8>)
    17ae:	4798      	blx	r3
    17b0:	1c03      	adds	r3, r0, #0
    17b2:	1c1a      	adds	r2, r3, #0
    17b4:	68bb      	ldr	r3, [r7, #8]
    17b6:	715a      	strb	r2, [r3, #5]
			//delay_ms(KEY_DELAY_MS);
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
    17b8:	68bb      	ldr	r3, [r7, #8]
    17ba:	795b      	ldrb	r3, [r3, #5]
    17bc:	2b00      	cmp	r3, #0
    17be:	d023      	beq.n	1808 <checkKeys+0xf4>
    17c0:	68bb      	ldr	r3, [r7, #8]
    17c2:	791b      	ldrb	r3, [r3, #4]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d01f      	beq.n	1808 <checkKeys+0xf4>
			{
				key->keyHoldCount++;
    17c8:	68bb      	ldr	r3, [r7, #8]
    17ca:	689b      	ldr	r3, [r3, #8]
    17cc:	1c5a      	adds	r2, r3, #1
    17ce:	68bb      	ldr	r3, [r7, #8]
    17d0:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(key->keyHoldCount == 1)
    17d2:	68bb      	ldr	r3, [r7, #8]
    17d4:	689b      	ldr	r3, [r3, #8]
    17d6:	2b01      	cmp	r3, #1
    17d8:	d111      	bne.n	17fe <checkKeys+0xea>
				{
					key->keyJustDown = true;
    17da:	68bb      	ldr	r3, [r7, #8]
    17dc:	2201      	movs	r2, #1
    17de:	719a      	strb	r2, [r3, #6]
					if(keySendCounter < 6)
    17e0:	4b77      	ldr	r3, [pc, #476]	; (19c0 <checkKeys+0x2ac>)
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	2b05      	cmp	r3, #5
    17e6:	d80e      	bhi.n	1806 <checkKeys+0xf2>
					{
					
						handleKeyJustPressed(key);
    17e8:	68bb      	ldr	r3, [r7, #8]
    17ea:	1c18      	adds	r0, r3, #0
    17ec:	4b75      	ldr	r3, [pc, #468]	; (19c4 <checkKeys+0x2b0>)
    17ee:	4798      	blx	r3
						keySendCounter++;
    17f0:	4b73      	ldr	r3, [pc, #460]	; (19c0 <checkKeys+0x2ac>)
    17f2:	781b      	ldrb	r3, [r3, #0]
    17f4:	3301      	adds	r3, #1
    17f6:	b2da      	uxtb	r2, r3
    17f8:	4b71      	ldr	r3, [pc, #452]	; (19c0 <checkKeys+0x2ac>)
    17fa:	701a      	strb	r2, [r3, #0]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
    17fc:	e03e      	b.n	187c <checkKeys+0x168>
						keySendCounter++;
					}
				}
				else
				{
					key->keyJustDown = false;
    17fe:	68bb      	ldr	r3, [r7, #8]
    1800:	2200      	movs	r2, #0
    1802:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
    1804:	e03a      	b.n	187c <checkKeys+0x168>
    1806:	e039      	b.n	187c <checkKeys+0x168>
				{
					key->keyJustDown = false;
					
				}
			}
			else if(key->currentState == false && key->previousState == false)
    1808:	68bb      	ldr	r3, [r7, #8]
    180a:	795b      	ldrb	r3, [r3, #5]
    180c:	2201      	movs	r2, #1
    180e:	4053      	eors	r3, r2
    1810:	b2db      	uxtb	r3, r3
    1812:	2b00      	cmp	r3, #0
    1814:	d02c      	beq.n	1870 <checkKeys+0x15c>
    1816:	68bb      	ldr	r3, [r7, #8]
    1818:	791b      	ldrb	r3, [r3, #4]
    181a:	2201      	movs	r2, #1
    181c:	4053      	eors	r3, r2
    181e:	b2db      	uxtb	r3, r3
    1820:	2b00      	cmp	r3, #0
    1822:	d025      	beq.n	1870 <checkKeys+0x15c>
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
    1824:	68bb      	ldr	r3, [r7, #8]
    1826:	689b      	ldr	r3, [r3, #8]
    1828:	2b00      	cmp	r3, #0
    182a:	d019      	beq.n	1860 <checkKeys+0x14c>
    182c:	68bb      	ldr	r3, [r7, #8]
    182e:	79db      	ldrb	r3, [r3, #7]
    1830:	2201      	movs	r2, #1
    1832:	4053      	eors	r3, r2
    1834:	b2db      	uxtb	r3, r3
    1836:	2b00      	cmp	r3, #0
    1838:	d012      	beq.n	1860 <checkKeys+0x14c>
				{
					key->keyJustRelease = true;
    183a:	68bb      	ldr	r3, [r7, #8]
    183c:	2201      	movs	r2, #1
    183e:	71da      	strb	r2, [r3, #7]
					//handle the key being released
					
					handleKeyJustReleased(key);
    1840:	68bb      	ldr	r3, [r7, #8]
    1842:	1c18      	adds	r0, r3, #0
    1844:	4b60      	ldr	r3, [pc, #384]	; (19c8 <checkKeys+0x2b4>)
    1846:	4798      	blx	r3
					if(keySendCounter > 0)
    1848:	4b5d      	ldr	r3, [pc, #372]	; (19c0 <checkKeys+0x2ac>)
    184a:	781b      	ldrb	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d006      	beq.n	185e <checkKeys+0x14a>
					{
						
						keySendCounter--;
    1850:	4b5b      	ldr	r3, [pc, #364]	; (19c0 <checkKeys+0x2ac>)
    1852:	781b      	ldrb	r3, [r3, #0]
    1854:	3b01      	subs	r3, #1
    1856:	b2da      	uxtb	r2, r3
    1858:	4b59      	ldr	r3, [pc, #356]	; (19c0 <checkKeys+0x2ac>)
    185a:	701a      	strb	r2, [r3, #0]
				{
					key->keyJustRelease = true;
					//handle the key being released
					
					handleKeyJustReleased(key);
					if(keySendCounter > 0)
    185c:	e007      	b.n	186e <checkKeys+0x15a>
    185e:	e006      	b.n	186e <checkKeys+0x15a>
						keySendCounter--;
					}
				}
				else
				{
					key->keyJustRelease = false;
    1860:	68bb      	ldr	r3, [r7, #8]
    1862:	2200      	movs	r2, #0
    1864:	71da      	strb	r2, [r3, #7]
					key->keyHoldCount = 0;
    1866:	68bb      	ldr	r3, [r7, #8]
    1868:	2200      	movs	r2, #0
    186a:	609a      	str	r2, [r3, #8]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
    186c:	e006      	b.n	187c <checkKeys+0x168>
    186e:	e005      	b.n	187c <checkKeys+0x168>
					key->keyHoldCount = 0;
				}
			}
			else
			{
				key->keyJustRelease = false;
    1870:	68bb      	ldr	r3, [r7, #8]
    1872:	2200      	movs	r2, #0
    1874:	71da      	strb	r2, [r3, #7]
				key->keyJustDown = false;
    1876:	68bb      	ldr	r3, [r7, #8]
    1878:	2200      	movs	r2, #0
    187a:	719a      	strb	r2, [r3, #6]
			}
			
			//Right Hand check
			//right hand items
			rightKey->previousState = rightKey->currentState;
    187c:	687b      	ldr	r3, [r7, #4]
    187e:	795a      	ldrb	r2, [r3, #5]
    1880:	687b      	ldr	r3, [r7, #4]
    1882:	711a      	strb	r2, [r3, #4]
			rightKey->currentState = ioport_get_pin_level(rightKey->columnIO);
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	1c18      	adds	r0, r3, #0
    188a:	4b4c      	ldr	r3, [pc, #304]	; (19bc <checkKeys+0x2a8>)
    188c:	4798      	blx	r3
    188e:	1c03      	adds	r3, r0, #0
    1890:	1c1a      	adds	r2, r3, #0
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	715a      	strb	r2, [r3, #5]

			if(rightKey->currentState == true && rightKey->previousState == true)
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	795b      	ldrb	r3, [r3, #5]
    189a:	2b00      	cmp	r3, #0
    189c:	d023      	beq.n	18e6 <checkKeys+0x1d2>
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	791b      	ldrb	r3, [r3, #4]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d01f      	beq.n	18e6 <checkKeys+0x1d2>
			{
				rightKey->keyHoldCount++;
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	689b      	ldr	r3, [r3, #8]
    18aa:	1c5a      	adds	r2, r3, #1
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	689b      	ldr	r3, [r3, #8]
    18b4:	2b01      	cmp	r3, #1
    18b6:	d111      	bne.n	18dc <checkKeys+0x1c8>
				{
					rightKey->keyJustDown = true;
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	2201      	movs	r2, #1
    18bc:	719a      	strb	r2, [r3, #6]
					if(keySendCounter < 6)
    18be:	4b40      	ldr	r3, [pc, #256]	; (19c0 <checkKeys+0x2ac>)
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	2b05      	cmp	r3, #5
    18c4:	d80e      	bhi.n	18e4 <checkKeys+0x1d0>
					{
						
						handleKeyJustPressed(rightKey);
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	1c18      	adds	r0, r3, #0
    18ca:	4b3e      	ldr	r3, [pc, #248]	; (19c4 <checkKeys+0x2b0>)
    18cc:	4798      	blx	r3
						keySendCounter++;
    18ce:	4b3c      	ldr	r3, [pc, #240]	; (19c0 <checkKeys+0x2ac>)
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	3301      	adds	r3, #1
    18d4:	b2da      	uxtb	r2, r3
    18d6:	4b3a      	ldr	r3, [pc, #232]	; (19c0 <checkKeys+0x2ac>)
    18d8:	701a      	strb	r2, [r3, #0]

			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    18da:	e03e      	b.n	195a <checkKeys+0x246>
					}
					
				}
				else
				{
					rightKey->keyJustDown = false;
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	2200      	movs	r2, #0
    18e0:	719a      	strb	r2, [r3, #6]

			if(rightKey->currentState == true && rightKey->previousState == true)
			{
				rightKey->keyHoldCount++;
				//check if just pressed is true
				if(rightKey->keyHoldCount == 1)
    18e2:	e03a      	b.n	195a <checkKeys+0x246>
    18e4:	e039      	b.n	195a <checkKeys+0x246>
				{
					rightKey->keyJustDown = false;
								
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	795b      	ldrb	r3, [r3, #5]
    18ea:	2201      	movs	r2, #1
    18ec:	4053      	eors	r3, r2
    18ee:	b2db      	uxtb	r3, r3
    18f0:	2b00      	cmp	r3, #0
    18f2:	d02c      	beq.n	194e <checkKeys+0x23a>
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	791b      	ldrb	r3, [r3, #4]
    18f8:	2201      	movs	r2, #1
    18fa:	4053      	eors	r3, r2
    18fc:	b2db      	uxtb	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	d025      	beq.n	194e <checkKeys+0x23a>
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	689b      	ldr	r3, [r3, #8]
    1906:	2b00      	cmp	r3, #0
    1908:	d019      	beq.n	193e <checkKeys+0x22a>
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	79db      	ldrb	r3, [r3, #7]
    190e:	2201      	movs	r2, #1
    1910:	4053      	eors	r3, r2
    1912:	b2db      	uxtb	r3, r3
    1914:	2b00      	cmp	r3, #0
    1916:	d012      	beq.n	193e <checkKeys+0x22a>
				{
					rightKey->keyJustRelease = true;
    1918:	687b      	ldr	r3, [r7, #4]
    191a:	2201      	movs	r2, #1
    191c:	71da      	strb	r2, [r3, #7]
					handleKeyJustReleased(rightKey);
    191e:	687b      	ldr	r3, [r7, #4]
    1920:	1c18      	adds	r0, r3, #0
    1922:	4b29      	ldr	r3, [pc, #164]	; (19c8 <checkKeys+0x2b4>)
    1924:	4798      	blx	r3
					if(keySendCounter > 0)
    1926:	4b26      	ldr	r3, [pc, #152]	; (19c0 <checkKeys+0x2ac>)
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	2b00      	cmp	r3, #0
    192c:	d006      	beq.n	193c <checkKeys+0x228>
					{
						
						keySendCounter--;
    192e:	4b24      	ldr	r3, [pc, #144]	; (19c0 <checkKeys+0x2ac>)
    1930:	781b      	ldrb	r3, [r3, #0]
    1932:	3b01      	subs	r3, #1
    1934:	b2da      	uxtb	r2, r3
    1936:	4b22      	ldr	r3, [pc, #136]	; (19c0 <checkKeys+0x2ac>)
    1938:	701a      	strb	r2, [r3, #0]
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
				{
					rightKey->keyJustRelease = true;
					handleKeyJustReleased(rightKey);
					if(keySendCounter > 0)
    193a:	e007      	b.n	194c <checkKeys+0x238>
    193c:	e006      	b.n	194c <checkKeys+0x238>
						keySendCounter--;
					}
				}
				else
				{
					rightKey->keyJustRelease = false;
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	2200      	movs	r2, #0
    1942:	71da      	strb	r2, [r3, #7]
					rightKey->keyHoldCount = 0;
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	2200      	movs	r2, #0
    1948:	609a      	str	r2, [r3, #8]
				}
			}
			else if(rightKey->currentState == false && rightKey->previousState == false)
			{
				//check that there is a keyHold Count
				if (rightKey->keyHoldCount != 0 && rightKey->keyJustRelease == false)
    194a:	e006      	b.n	195a <checkKeys+0x246>
    194c:	e005      	b.n	195a <checkKeys+0x246>
					rightKey->keyHoldCount = 0;
				}
			}
			else
			{
				rightKey->keyJustRelease = false;
    194e:	687b      	ldr	r3, [r7, #4]
    1950:	2200      	movs	r2, #0
    1952:	71da      	strb	r2, [r3, #7]
				rightKey->keyJustDown = false;
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	2200      	movs	r2, #0
    1958:	719a      	strb	r2, [r3, #6]
		KEY_ROW *rightRow = &rightKeyboardObj.keyRows[i];
		
		ioport_set_pin_level(row->rowIO, true);
		ioport_set_pin_level(rightRow->rowIO, true);
		
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
    195a:	1c3b      	adds	r3, r7, #0
    195c:	3316      	adds	r3, #22
    195e:	781a      	ldrb	r2, [r3, #0]
    1960:	1c3b      	adds	r3, r7, #0
    1962:	3316      	adds	r3, #22
    1964:	3201      	adds	r2, #1
    1966:	701a      	strb	r2, [r3, #0]
    1968:	1c3b      	adds	r3, r7, #0
    196a:	3316      	adds	r3, #22
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	2b06      	cmp	r3, #6
    1970:	d800      	bhi.n	1974 <checkKeys+0x260>
    1972:	e704      	b.n	177e <checkKeys+0x6a>
				rightKey->keyJustRelease = false;
				rightKey->keyJustDown = false;
			}
		}
		
		ioport_set_pin_level(row->rowIO, false);//set the pin low
    1974:	693b      	ldr	r3, [r7, #16]
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	1c18      	adds	r0, r3, #0
    197a:	2100      	movs	r1, #0
    197c:	4b0e      	ldr	r3, [pc, #56]	; (19b8 <checkKeys+0x2a4>)
    197e:	4798      	blx	r3
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
    1980:	68fb      	ldr	r3, [r7, #12]
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	1c18      	adds	r0, r3, #0
    1986:	2100      	movs	r1, #0
    1988:	4b0b      	ldr	r3, [pc, #44]	; (19b8 <checkKeys+0x2a4>)
    198a:	4798      	blx	r3
uint8_t checkKeys(void)
{
	uint8_t i = 0;
	uint8_t j = 0;
	static uint8_t  keySendCounter= 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
    198c:	1c3b      	adds	r3, r7, #0
    198e:	3317      	adds	r3, #23
    1990:	781a      	ldrb	r2, [r3, #0]
    1992:	1c3b      	adds	r3, r7, #0
    1994:	3317      	adds	r3, #23
    1996:	3201      	adds	r2, #1
    1998:	701a      	strb	r2, [r3, #0]
    199a:	1c3b      	adds	r3, r7, #0
    199c:	3317      	adds	r3, #23
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	2b05      	cmp	r3, #5
    19a2:	d800      	bhi.n	19a6 <checkKeys+0x292>
    19a4:	e6c6      	b.n	1734 <checkKeys+0x20>
		ioport_set_pin_level(row->rowIO, false);//set the pin low
		ioport_set_pin_level(rightRow->rowIO, false);//set the pin low
	}
	
	
	return 0;
    19a6:	2300      	movs	r3, #0
}
    19a8:	1c18      	adds	r0, r3, #0
    19aa:	46bd      	mov	sp, r7
    19ac:	b006      	add	sp, #24
    19ae:	bd80      	pop	{r7, pc}
    19b0:	200002f4 	.word	0x200002f4
    19b4:	20000634 	.word	0x20000634
    19b8:	000007b1 	.word	0x000007b1
    19bc:	000007d9 	.word	0x000007d9
    19c0:	200009b4 	.word	0x200009b4
    19c4:	000019cd 	.word	0x000019cd
    19c8:	00001aed 	.word	0x00001aed

000019cc <handleKeyJustPressed>:
	
}


static void handleKeyJustPressed(KEY_OBJ *key)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b08a      	sub	sp, #40	; 0x28
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
    19d4:	1c3b      	adds	r3, r7, #0
    19d6:	3327      	adds	r3, #39	; 0x27
    19d8:	2200      	movs	r2, #0
    19da:	701a      	strb	r2, [r3, #0]
	LAYER *layer = boardLayerManager.layers[boardLayerManager.currentLayer];
    19dc:	4a40      	ldr	r2, [pc, #256]	; (1ae0 <handleKeyJustPressed+0x114>)
    19de:	233d      	movs	r3, #61	; 0x3d
    19e0:	5cd3      	ldrb	r3, [r2, r3]
    19e2:	1c1a      	adds	r2, r3, #0
    19e4:	4b3e      	ldr	r3, [pc, #248]	; (1ae0 <handleKeyJustPressed+0x114>)
    19e6:	0092      	lsls	r2, r2, #2
    19e8:	58d3      	ldr	r3, [r2, r3]
    19ea:	623b      	str	r3, [r7, #32]
	uint8_t keyId = key->keyId;
    19ec:	1c3b      	adds	r3, r7, #0
    19ee:	331f      	adds	r3, #31
    19f0:	687a      	ldr	r2, [r7, #4]
    19f2:	7b12      	ldrb	r2, [r2, #12]
    19f4:	701a      	strb	r2, [r3, #0]
	GENERIC_KEY *genericKey = layer->keys[keyId];
    19f6:	1c3b      	adds	r3, r7, #0
    19f8:	331f      	adds	r3, #31
    19fa:	781a      	ldrb	r2, [r3, #0]
    19fc:	6a3b      	ldr	r3, [r7, #32]
    19fe:	0092      	lsls	r2, r2, #2
    1a00:	58d3      	ldr	r3, [r2, r3]
    1a02:	61bb      	str	r3, [r7, #24]
	if(genericKey == 0)
    1a04:	69bb      	ldr	r3, [r7, #24]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d100      	bne.n	1a0c <handleKeyJustPressed+0x40>
	{	
		return;//no key
    1a0a:	e065      	b.n	1ad8 <handleKeyJustPressed+0x10c>
	}
	//since all of the generic keys have the type as the first var in the struct this works
	KEY_PTR_TYPE keyType = genericKey->standard.type;
    1a0c:	1c3b      	adds	r3, r7, #0
    1a0e:	3317      	adds	r3, #23
    1a10:	69ba      	ldr	r2, [r7, #24]
    1a12:	7812      	ldrb	r2, [r2, #0]
    1a14:	701a      	strb	r2, [r3, #0]
	if(keyType == STANDARD_KEY_TYPE)
    1a16:	1c3b      	adds	r3, r7, #0
    1a18:	3317      	adds	r3, #23
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d10c      	bne.n	1a3a <handleKeyJustPressed+0x6e>
	{
		//
		STANDARD_KEY *standardKey = (STANDARD_KEY*) genericKey;
    1a20:	69bb      	ldr	r3, [r7, #24]
    1a22:	613b      	str	r3, [r7, #16]
		udi_hid_kbd_modifier_down(standardKey->modifiers);
    1a24:	693b      	ldr	r3, [r7, #16]
    1a26:	789b      	ldrb	r3, [r3, #2]
    1a28:	1c18      	adds	r0, r3, #0
    1a2a:	4b2e      	ldr	r3, [pc, #184]	; (1ae4 <handleKeyJustPressed+0x118>)
    1a2c:	4798      	blx	r3
		udi_hid_kbd_down(standardKey->hid);
    1a2e:	693b      	ldr	r3, [r7, #16]
    1a30:	785b      	ldrb	r3, [r3, #1]
    1a32:	1c18      	adds	r0, r3, #0
    1a34:	4b2c      	ldr	r3, [pc, #176]	; (1ae8 <handleKeyJustPressed+0x11c>)
    1a36:	4798      	blx	r3
    1a38:	e04e      	b.n	1ad8 <handleKeyJustPressed+0x10c>
	}
	else if(keyType == LAYER_KEY_TYPE)
    1a3a:	1c3b      	adds	r3, r7, #0
    1a3c:	3317      	adds	r3, #23
    1a3e:	781b      	ldrb	r3, [r3, #0]
    1a40:	2b04      	cmp	r3, #4
    1a42:	d149      	bne.n	1ad8 <handleKeyJustPressed+0x10c>
	{
		//depending on the layer the key is, we will switch accordingly
		LAYER_KEY *layerKey = (LAYER_KEY *) genericKey;
    1a44:	69bb      	ldr	r3, [r7, #24]
    1a46:	60fb      	str	r3, [r7, #12]
		//check if it is a layer up or down key
		//check if there is a layer in that direction. if we reach the max wrap around
		if(layerKey->layer == LAYER_UP)
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	785b      	ldrb	r3, [r3, #1]
    1a4c:	2b03      	cmp	r3, #3
    1a4e:	d114      	bne.n	1a7a <handleKeyJustPressed+0xae>
		{
			//check if we can move the layer up
			boardLayerManager.currentLayer++;
    1a50:	4a23      	ldr	r2, [pc, #140]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a52:	233d      	movs	r3, #61	; 0x3d
    1a54:	5cd3      	ldrb	r3, [r2, r3]
    1a56:	3301      	adds	r3, #1
    1a58:	b2d9      	uxtb	r1, r3
    1a5a:	4a21      	ldr	r2, [pc, #132]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a5c:	233d      	movs	r3, #61	; 0x3d
    1a5e:	54d1      	strb	r1, [r2, r3]
			if(boardLayerManager.currentLayer == boardLayerManager.numberOfLayers)
    1a60:	4a1f      	ldr	r2, [pc, #124]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a62:	233d      	movs	r3, #61	; 0x3d
    1a64:	5cd2      	ldrb	r2, [r2, r3]
    1a66:	491e      	ldr	r1, [pc, #120]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a68:	233c      	movs	r3, #60	; 0x3c
    1a6a:	5ccb      	ldrb	r3, [r1, r3]
    1a6c:	429a      	cmp	r2, r3
    1a6e:	d133      	bne.n	1ad8 <handleKeyJustPressed+0x10c>
			{
				//go to 0 layer
				boardLayerManager.currentLayer = 0;
    1a70:	4a1b      	ldr	r2, [pc, #108]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a72:	233d      	movs	r3, #61	; 0x3d
    1a74:	2100      	movs	r1, #0
    1a76:	54d1      	strb	r1, [r2, r3]
    1a78:	e02e      	b.n	1ad8 <handleKeyJustPressed+0x10c>
			}
		}
		else if(layerKey->layer == LAYER_DOWN)
    1a7a:	68fb      	ldr	r3, [r7, #12]
    1a7c:	785b      	ldrb	r3, [r3, #1]
    1a7e:	2b04      	cmp	r3, #4
    1a80:	d116      	bne.n	1ab0 <handleKeyJustPressed+0xe4>
		{
			//check if we can move the layer Down
			if(boardLayerManager.currentLayer == 0)
    1a82:	4a17      	ldr	r2, [pc, #92]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a84:	233d      	movs	r3, #61	; 0x3d
    1a86:	5cd3      	ldrb	r3, [r2, r3]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d108      	bne.n	1a9e <handleKeyJustPressed+0xd2>
			{
				//go to the max layer
				
				boardLayerManager.currentLayer = boardLayerManager.numberOfLayers-1;
    1a8c:	4a14      	ldr	r2, [pc, #80]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a8e:	233c      	movs	r3, #60	; 0x3c
    1a90:	5cd3      	ldrb	r3, [r2, r3]
    1a92:	3b01      	subs	r3, #1
    1a94:	b2d9      	uxtb	r1, r3
    1a96:	4a12      	ldr	r2, [pc, #72]	; (1ae0 <handleKeyJustPressed+0x114>)
    1a98:	233d      	movs	r3, #61	; 0x3d
    1a9a:	54d1      	strb	r1, [r2, r3]
    1a9c:	e01c      	b.n	1ad8 <handleKeyJustPressed+0x10c>
//				boardLayerManager.currentLayer = boardLayerManager.;
			}
			else
			{
				boardLayerManager.currentLayer--;
    1a9e:	4a10      	ldr	r2, [pc, #64]	; (1ae0 <handleKeyJustPressed+0x114>)
    1aa0:	233d      	movs	r3, #61	; 0x3d
    1aa2:	5cd3      	ldrb	r3, [r2, r3]
    1aa4:	3b01      	subs	r3, #1
    1aa6:	b2d9      	uxtb	r1, r3
    1aa8:	4a0d      	ldr	r2, [pc, #52]	; (1ae0 <handleKeyJustPressed+0x114>)
    1aaa:	233d      	movs	r3, #61	; 0x3d
    1aac:	54d1      	strb	r1, [r2, r3]
    1aae:	e013      	b.n	1ad8 <handleKeyJustPressed+0x10c>
			}
		}
		else
		{
			//go through each layer till the layer matches the current layer
			for(i = 0; i < boardLayerManager.numberOfLayers; i++)
    1ab0:	1c3b      	adds	r3, r7, #0
    1ab2:	3327      	adds	r3, #39	; 0x27
    1ab4:	2200      	movs	r2, #0
    1ab6:	701a      	strb	r2, [r3, #0]
    1ab8:	e006      	b.n	1ac8 <handleKeyJustPressed+0xfc>
    1aba:	1c3b      	adds	r3, r7, #0
    1abc:	3327      	adds	r3, #39	; 0x27
    1abe:	781a      	ldrb	r2, [r3, #0]
    1ac0:	1c3b      	adds	r3, r7, #0
    1ac2:	3327      	adds	r3, #39	; 0x27
    1ac4:	3201      	adds	r2, #1
    1ac6:	701a      	strb	r2, [r3, #0]
    1ac8:	4a05      	ldr	r2, [pc, #20]	; (1ae0 <handleKeyJustPressed+0x114>)
    1aca:	233c      	movs	r3, #60	; 0x3c
    1acc:	5cd3      	ldrb	r3, [r2, r3]
    1ace:	1c3a      	adds	r2, r7, #0
    1ad0:	3227      	adds	r2, #39	; 0x27
    1ad2:	7812      	ldrb	r2, [r2, #0]
    1ad4:	429a      	cmp	r2, r3
    1ad6:	d3f0      	bcc.n	1aba <handleKeyJustPressed+0xee>
			
		}
		
	}
	
}
    1ad8:	46bd      	mov	sp, r7
    1ada:	b00a      	add	sp, #40	; 0x28
    1adc:	bd80      	pop	{r7, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	20000974 	.word	0x20000974
    1ae4:	00002e49 	.word	0x00002e49
    1ae8:	00002f7d 	.word	0x00002f7d

00001aec <handleKeyJustReleased>:


static void handleKeyJustReleased(KEY_OBJ *key)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b088      	sub	sp, #32
    1af0:	af00      	add	r7, sp, #0
    1af2:	6078      	str	r0, [r7, #4]
	LAYER *layer = boardLayerManager.layers[boardLayerManager.currentLayer];
    1af4:	4a18      	ldr	r2, [pc, #96]	; (1b58 <handleKeyJustReleased+0x6c>)
    1af6:	233d      	movs	r3, #61	; 0x3d
    1af8:	5cd3      	ldrb	r3, [r2, r3]
    1afa:	1c1a      	adds	r2, r3, #0
    1afc:	4b16      	ldr	r3, [pc, #88]	; (1b58 <handleKeyJustReleased+0x6c>)
    1afe:	0092      	lsls	r2, r2, #2
    1b00:	58d3      	ldr	r3, [r2, r3]
    1b02:	61fb      	str	r3, [r7, #28]
	uint8_t keyId = key->keyId;
    1b04:	1c3b      	adds	r3, r7, #0
    1b06:	331b      	adds	r3, #27
    1b08:	687a      	ldr	r2, [r7, #4]
    1b0a:	7b12      	ldrb	r2, [r2, #12]
    1b0c:	701a      	strb	r2, [r3, #0]
	GENERIC_KEY *genericKey = layer->keys[keyId];
    1b0e:	1c3b      	adds	r3, r7, #0
    1b10:	331b      	adds	r3, #27
    1b12:	781a      	ldrb	r2, [r3, #0]
    1b14:	69fb      	ldr	r3, [r7, #28]
    1b16:	0092      	lsls	r2, r2, #2
    1b18:	58d3      	ldr	r3, [r2, r3]
    1b1a:	617b      	str	r3, [r7, #20]
	if(genericKey == 0)
    1b1c:	697b      	ldr	r3, [r7, #20]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d100      	bne.n	1b24 <handleKeyJustReleased+0x38>
	{
		
		return;//no key
    1b22:	e015      	b.n	1b50 <handleKeyJustReleased+0x64>
	}
	//since all of the generic keys have the type as the first var in the struct this works
	KEY_PTR_TYPE keyType = genericKey->standard.type;
    1b24:	1c3b      	adds	r3, r7, #0
    1b26:	3313      	adds	r3, #19
    1b28:	697a      	ldr	r2, [r7, #20]
    1b2a:	7812      	ldrb	r2, [r2, #0]
    1b2c:	701a      	strb	r2, [r3, #0]
	if(keyType == STANDARD_KEY_TYPE)
    1b2e:	1c3b      	adds	r3, r7, #0
    1b30:	3313      	adds	r3, #19
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d10b      	bne.n	1b50 <handleKeyJustReleased+0x64>
	{
		STANDARD_KEY *standardKey = (STANDARD_KEY*) genericKey;
    1b38:	697b      	ldr	r3, [r7, #20]
    1b3a:	60fb      	str	r3, [r7, #12]
		udi_hid_kbd_modifier_up(standardKey->modifiers);
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	789b      	ldrb	r3, [r3, #2]
    1b40:	1c18      	adds	r0, r3, #0
    1b42:	4b06      	ldr	r3, [pc, #24]	; (1b5c <handleKeyJustReleased+0x70>)
    1b44:	4798      	blx	r3
		udi_hid_kbd_up(standardKey->hid);		
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	785b      	ldrb	r3, [r3, #1]
    1b4a:	1c18      	adds	r0, r3, #0
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <handleKeyJustReleased+0x74>)
    1b4e:	4798      	blx	r3
	{
		
		
	}
	
    1b50:	46bd      	mov	sp, r7
    1b52:	b008      	add	sp, #32
    1b54:	bd80      	pop	{r7, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	20000974 	.word	0x20000974
    1b5c:	00002df1 	.word	0x00002df1
    1b60:	00002e9d 	.word	0x00002e9d

00001b64 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b082      	sub	sp, #8
    1b68:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b6a:	f3ef 8310 	mrs	r3, PRIMASK
    1b6e:	603b      	str	r3, [r7, #0]
  return(result);
    1b70:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    1b72:	425a      	negs	r2, r3
    1b74:	4153      	adcs	r3, r2
    1b76:	b2db      	uxtb	r3, r3
    1b78:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b7a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1b7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b80:	4b03      	ldr	r3, [pc, #12]	; (1b90 <cpu_irq_save+0x2c>)
    1b82:	2200      	movs	r2, #0
    1b84:	701a      	strb	r2, [r3, #0]
	return flags;
    1b86:	687b      	ldr	r3, [r7, #4]
}
    1b88:	1c18      	adds	r0, r3, #0
    1b8a:	46bd      	mov	sp, r7
    1b8c:	b002      	add	sp, #8
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	20000254 	.word	0x20000254

00001b94 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b082      	sub	sp, #8
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
	return (flags);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	1e5a      	subs	r2, r3, #1
    1ba0:	4193      	sbcs	r3, r2
    1ba2:	b2db      	uxtb	r3, r3
}
    1ba4:	1c18      	adds	r0, r3, #0
    1ba6:	46bd      	mov	sp, r7
    1ba8:	b002      	add	sp, #8
    1baa:	bd80      	pop	{r7, pc}

00001bac <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
    1bb2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	1c18      	adds	r0, r3, #0
    1bb8:	4b06      	ldr	r3, [pc, #24]	; (1bd4 <cpu_irq_restore+0x28>)
    1bba:	4798      	blx	r3
    1bbc:	1c03      	adds	r3, r0, #0
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d005      	beq.n	1bce <cpu_irq_restore+0x22>
		cpu_irq_enable();
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <cpu_irq_restore+0x2c>)
    1bc4:	2201      	movs	r2, #1
    1bc6:	701a      	strb	r2, [r3, #0]
    1bc8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1bcc:	b662      	cpsie	i
}
    1bce:	46bd      	mov	sp, r7
    1bd0:	b002      	add	sp, #8
    1bd2:	bd80      	pop	{r7, pc}
    1bd4:	00001b95 	.word	0x00001b95
    1bd8:	20000254 	.word	0x20000254

00001bdc <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    1bdc:	b590      	push	{r4, r7, lr}
    1bde:	b083      	sub	sp, #12
    1be0:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1be2:	1dbb      	adds	r3, r7, #6
    1be4:	2200      	movs	r2, #0
    1be6:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    1be8:	4b59      	ldr	r3, [pc, #356]	; (1d50 <udi_cdc_comm_enable+0x174>)
    1bea:	2200      	movs	r2, #0
    1bec:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    1bee:	1dbb      	adds	r3, r7, #6
    1bf0:	781a      	ldrb	r2, [r3, #0]
    1bf2:	4b58      	ldr	r3, [pc, #352]	; (1d54 <udi_cdc_comm_enable+0x178>)
    1bf4:	0052      	lsls	r2, r2, #1
    1bf6:	2100      	movs	r1, #0
    1bf8:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    1bfa:	1dbb      	adds	r3, r7, #6
    1bfc:	781a      	ldrb	r2, [r3, #0]
    1bfe:	4956      	ldr	r1, [pc, #344]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c00:	1c13      	adds	r3, r2, #0
    1c02:	009b      	lsls	r3, r3, #2
    1c04:	189b      	adds	r3, r3, r2
    1c06:	005b      	lsls	r3, r3, #1
    1c08:	22a1      	movs	r2, #161	; 0xa1
    1c0a:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    1c0c:	1dbb      	adds	r3, r7, #6
    1c0e:	781a      	ldrb	r2, [r3, #0]
    1c10:	4951      	ldr	r1, [pc, #324]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c12:	1c13      	adds	r3, r2, #0
    1c14:	009b      	lsls	r3, r3, #2
    1c16:	189b      	adds	r3, r3, r2
    1c18:	005b      	lsls	r3, r3, #1
    1c1a:	18cb      	adds	r3, r1, r3
    1c1c:	2220      	movs	r2, #32
    1c1e:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    1c20:	1dbb      	adds	r3, r7, #6
    1c22:	781a      	ldrb	r2, [r3, #0]
    1c24:	494c      	ldr	r1, [pc, #304]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c26:	1c13      	adds	r3, r2, #0
    1c28:	009b      	lsls	r3, r3, #2
    1c2a:	189b      	adds	r3, r3, r2
    1c2c:	005b      	lsls	r3, r3, #1
    1c2e:	18cb      	adds	r3, r1, r3
    1c30:	2200      	movs	r2, #0
    1c32:	805a      	strh	r2, [r3, #2]

	switch (port) {
    1c34:	1dbb      	adds	r3, r7, #6
    1c36:	781b      	ldrb	r3, [r3, #0]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d103      	bne.n	1c44 <udi_cdc_comm_enable+0x68>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    1c3c:	1dfb      	adds	r3, r7, #7
    1c3e:	2200      	movs	r2, #0
    1c40:	701a      	strb	r2, [r3, #0]
    1c42:	e003      	b.n	1c4c <udi_cdc_comm_enable+0x70>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    1c44:	1dfb      	adds	r3, r7, #7
    1c46:	2200      	movs	r2, #0
    1c48:	701a      	strb	r2, [r3, #0]
		break;
    1c4a:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    1c4c:	1dbb      	adds	r3, r7, #6
    1c4e:	781a      	ldrb	r2, [r3, #0]
    1c50:	1dfb      	adds	r3, r7, #7
    1c52:	781b      	ldrb	r3, [r3, #0]
    1c54:	b299      	uxth	r1, r3
    1c56:	4840      	ldr	r0, [pc, #256]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c58:	1c13      	adds	r3, r2, #0
    1c5a:	009b      	lsls	r3, r3, #2
    1c5c:	189b      	adds	r3, r3, r2
    1c5e:	005b      	lsls	r3, r3, #1
    1c60:	18c3      	adds	r3, r0, r3
    1c62:	1c0a      	adds	r2, r1, #0
    1c64:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    1c66:	1dbb      	adds	r3, r7, #6
    1c68:	781a      	ldrb	r2, [r3, #0]
    1c6a:	493b      	ldr	r1, [pc, #236]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c6c:	1c13      	adds	r3, r2, #0
    1c6e:	009b      	lsls	r3, r3, #2
    1c70:	189b      	adds	r3, r3, r2
    1c72:	005b      	lsls	r3, r3, #1
    1c74:	18cb      	adds	r3, r1, r3
    1c76:	2202      	movs	r2, #2
    1c78:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    1c7a:	1dbb      	adds	r3, r7, #6
    1c7c:	781a      	ldrb	r2, [r3, #0]
    1c7e:	4936      	ldr	r1, [pc, #216]	; (1d58 <udi_cdc_comm_enable+0x17c>)
    1c80:	1c13      	adds	r3, r2, #0
    1c82:	009b      	lsls	r3, r3, #2
    1c84:	189b      	adds	r3, r3, r2
    1c86:	005b      	lsls	r3, r3, #1
    1c88:	18cb      	adds	r3, r1, r3
    1c8a:	3308      	adds	r3, #8
    1c8c:	2200      	movs	r2, #0
    1c8e:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    1c90:	1dbb      	adds	r3, r7, #6
    1c92:	7819      	ldrb	r1, [r3, #0]
    1c94:	4a31      	ldr	r2, [pc, #196]	; (1d5c <udi_cdc_comm_enable+0x180>)
    1c96:	1c0b      	adds	r3, r1, #0
    1c98:	00db      	lsls	r3, r3, #3
    1c9a:	1a5b      	subs	r3, r3, r1
    1c9c:	5c98      	ldrb	r0, [r3, r2]
    1c9e:	2100      	movs	r1, #0
    1ca0:	4001      	ands	r1, r0
    1ca2:	5499      	strb	r1, [r3, r2]
    1ca4:	18d1      	adds	r1, r2, r3
    1ca6:	784c      	ldrb	r4, [r1, #1]
    1ca8:	2000      	movs	r0, #0
    1caa:	4020      	ands	r0, r4
    1cac:	243e      	movs	r4, #62	; 0x3e
    1cae:	4264      	negs	r4, r4
    1cb0:	4320      	orrs	r0, r4
    1cb2:	7048      	strb	r0, [r1, #1]
    1cb4:	18d1      	adds	r1, r2, r3
    1cb6:	788c      	ldrb	r4, [r1, #2]
    1cb8:	2000      	movs	r0, #0
    1cba:	4020      	ands	r0, r4
    1cbc:	2401      	movs	r4, #1
    1cbe:	4320      	orrs	r0, r4
    1cc0:	7088      	strb	r0, [r1, #2]
    1cc2:	18d3      	adds	r3, r2, r3
    1cc4:	78d9      	ldrb	r1, [r3, #3]
    1cc6:	2200      	movs	r2, #0
    1cc8:	400a      	ands	r2, r1
    1cca:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    1ccc:	1dbb      	adds	r3, r7, #6
    1cce:	781a      	ldrb	r2, [r3, #0]
    1cd0:	4922      	ldr	r1, [pc, #136]	; (1d5c <udi_cdc_comm_enable+0x180>)
    1cd2:	1c13      	adds	r3, r2, #0
    1cd4:	00db      	lsls	r3, r3, #3
    1cd6:	1a9b      	subs	r3, r3, r2
    1cd8:	18cb      	adds	r3, r1, r3
    1cda:	2200      	movs	r2, #0
    1cdc:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    1cde:	1dbb      	adds	r3, r7, #6
    1ce0:	781a      	ldrb	r2, [r3, #0]
    1ce2:	491e      	ldr	r1, [pc, #120]	; (1d5c <udi_cdc_comm_enable+0x180>)
    1ce4:	1c13      	adds	r3, r2, #0
    1ce6:	00db      	lsls	r3, r3, #3
    1ce8:	1a9b      	subs	r3, r3, r2
    1cea:	18cb      	adds	r3, r1, r3
    1cec:	2200      	movs	r2, #0
    1cee:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    1cf0:	1dbb      	adds	r3, r7, #6
    1cf2:	781a      	ldrb	r2, [r3, #0]
    1cf4:	4919      	ldr	r1, [pc, #100]	; (1d5c <udi_cdc_comm_enable+0x180>)
    1cf6:	1c13      	adds	r3, r2, #0
    1cf8:	00db      	lsls	r3, r3, #3
    1cfa:	1a9b      	subs	r3, r3, r2
    1cfc:	18cb      	adds	r3, r1, r3
    1cfe:	2208      	movs	r2, #8
    1d00:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    1d02:	1dbb      	adds	r3, r7, #6
    1d04:	781a      	ldrb	r2, [r3, #0]
    1d06:	1c13      	adds	r3, r2, #0
    1d08:	00db      	lsls	r3, r3, #3
    1d0a:	1a9b      	subs	r3, r3, r2
    1d0c:	4a13      	ldr	r2, [pc, #76]	; (1d5c <udi_cdc_comm_enable+0x180>)
    1d0e:	189b      	adds	r3, r3, r2
    1d10:	1dba      	adds	r2, r7, #6
    1d12:	7812      	ldrb	r2, [r2, #0]
    1d14:	1c10      	adds	r0, r2, #0
    1d16:	1c19      	adds	r1, r3, #0
    1d18:	4b11      	ldr	r3, [pc, #68]	; (1d60 <udi_cdc_comm_enable+0x184>)
    1d1a:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
    1d1c:	1dbb      	adds	r3, r7, #6
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	1c18      	adds	r0, r3, #0
    1d22:	4b10      	ldr	r3, [pc, #64]	; (1d64 <udi_cdc_comm_enable+0x188>)
    1d24:	4798      	blx	r3
    1d26:	1c03      	adds	r3, r0, #0
    1d28:	2201      	movs	r2, #1
    1d2a:	4053      	eors	r3, r2
    1d2c:	b2db      	uxtb	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d001      	beq.n	1d36 <udi_cdc_comm_enable+0x15a>
		return false;
    1d32:	2300      	movs	r3, #0
    1d34:	e007      	b.n	1d46 <udi_cdc_comm_enable+0x16a>
	}
	udi_cdc_nb_comm_enabled++;
    1d36:	4b06      	ldr	r3, [pc, #24]	; (1d50 <udi_cdc_comm_enable+0x174>)
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	b2db      	uxtb	r3, r3
    1d3c:	3301      	adds	r3, #1
    1d3e:	b2da      	uxtb	r2, r3
    1d40:	4b03      	ldr	r3, [pc, #12]	; (1d50 <udi_cdc_comm_enable+0x174>)
    1d42:	701a      	strb	r2, [r3, #0]
	return true;
    1d44:	2301      	movs	r3, #1
}
    1d46:	1c18      	adds	r0, r3, #0
    1d48:	46bd      	mov	sp, r7
    1d4a:	b003      	add	sp, #12
    1d4c:	bd90      	pop	{r4, r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	200009d4 	.word	0x200009d4
    1d54:	200009c4 	.word	0x200009c4
    1d58:	200009c8 	.word	0x200009c8
    1d5c:	200009b8 	.word	0x200009b8
    1d60:	0000a721 	.word	0x0000a721
    1d64:	0000a2ed 	.word	0x0000a2ed

00001d68 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b082      	sub	sp, #8
    1d6c:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1d6e:	1dfb      	adds	r3, r7, #7
    1d70:	2200      	movs	r2, #0
    1d72:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    1d74:	4b30      	ldr	r3, [pc, #192]	; (1e38 <udi_cdc_data_enable+0xd0>)
    1d76:	2200      	movs	r2, #0
    1d78:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    1d7a:	1dfb      	adds	r3, r7, #7
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	4a2f      	ldr	r2, [pc, #188]	; (1e3c <udi_cdc_data_enable+0xd4>)
    1d80:	2100      	movs	r1, #0
    1d82:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    1d84:	1dfb      	adds	r3, r7, #7
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	4a2d      	ldr	r2, [pc, #180]	; (1e40 <udi_cdc_data_enable+0xd8>)
    1d8a:	2100      	movs	r1, #0
    1d8c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    1d8e:	1dfb      	adds	r3, r7, #7
    1d90:	781b      	ldrb	r3, [r3, #0]
    1d92:	4a2c      	ldr	r2, [pc, #176]	; (1e44 <udi_cdc_data_enable+0xdc>)
    1d94:	2100      	movs	r1, #0
    1d96:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    1d98:	1dfb      	adds	r3, r7, #7
    1d9a:	781a      	ldrb	r2, [r3, #0]
    1d9c:	4b2a      	ldr	r3, [pc, #168]	; (1e48 <udi_cdc_data_enable+0xe0>)
    1d9e:	0092      	lsls	r2, r2, #2
    1da0:	2100      	movs	r1, #0
    1da2:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    1da4:	1dfb      	adds	r3, r7, #7
    1da6:	781b      	ldrb	r3, [r3, #0]
    1da8:	4a27      	ldr	r2, [pc, #156]	; (1e48 <udi_cdc_data_enable+0xe0>)
    1daa:	009b      	lsls	r3, r3, #2
    1dac:	18d3      	adds	r3, r2, r3
    1dae:	3302      	adds	r3, #2
    1db0:	2200      	movs	r2, #0
    1db2:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    1db4:	1dfb      	adds	r3, r7, #7
    1db6:	781a      	ldrb	r2, [r3, #0]
    1db8:	4b24      	ldr	r3, [pc, #144]	; (1e4c <udi_cdc_data_enable+0xe4>)
    1dba:	0052      	lsls	r2, r2, #1
    1dbc:	2100      	movs	r1, #0
    1dbe:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    1dc0:	1dfb      	adds	r3, r7, #7
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	1c18      	adds	r0, r3, #0
    1dc6:	4b22      	ldr	r3, [pc, #136]	; (1e50 <udi_cdc_data_enable+0xe8>)
    1dc8:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    1dca:	1dfb      	adds	r3, r7, #7
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	4a21      	ldr	r2, [pc, #132]	; (1e54 <udi_cdc_data_enable+0xec>)
    1dd0:	2100      	movs	r1, #0
    1dd2:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    1dd4:	1dfb      	adds	r3, r7, #7
    1dd6:	781b      	ldrb	r3, [r3, #0]
    1dd8:	4a1f      	ldr	r2, [pc, #124]	; (1e58 <udi_cdc_data_enable+0xf0>)
    1dda:	2100      	movs	r1, #0
    1ddc:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    1dde:	1dfb      	adds	r3, r7, #7
    1de0:	781a      	ldrb	r2, [r3, #0]
    1de2:	4b1e      	ldr	r3, [pc, #120]	; (1e5c <udi_cdc_data_enable+0xf4>)
    1de4:	0092      	lsls	r2, r2, #2
    1de6:	2100      	movs	r1, #0
    1de8:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_pos[port] = 0;
    1dea:	1dfb      	adds	r3, r7, #7
    1dec:	781a      	ldrb	r2, [r3, #0]
    1dee:	4b1c      	ldr	r3, [pc, #112]	; (1e60 <udi_cdc_data_enable+0xf8>)
    1df0:	0052      	lsls	r2, r2, #1
    1df2:	2100      	movs	r1, #0
    1df4:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    1df6:	1dfb      	adds	r3, r7, #7
    1df8:	781b      	ldrb	r3, [r3, #0]
    1dfa:	1c18      	adds	r0, r3, #0
    1dfc:	4b19      	ldr	r3, [pc, #100]	; (1e64 <udi_cdc_data_enable+0xfc>)
    1dfe:	4798      	blx	r3
    1e00:	1c03      	adds	r3, r0, #0
    1e02:	2201      	movs	r2, #1
    1e04:	4053      	eors	r3, r2
    1e06:	b2db      	uxtb	r3, r3
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d001      	beq.n	1e10 <udi_cdc_data_enable+0xa8>
		return false;
    1e0c:	2300      	movs	r3, #0
    1e0e:	e00f      	b.n	1e30 <udi_cdc_data_enable+0xc8>
	}
	udi_cdc_nb_data_enabled++;
    1e10:	4b09      	ldr	r3, [pc, #36]	; (1e38 <udi_cdc_data_enable+0xd0>)
    1e12:	781b      	ldrb	r3, [r3, #0]
    1e14:	b2db      	uxtb	r3, r3
    1e16:	3301      	adds	r3, #1
    1e18:	b2da      	uxtb	r2, r3
    1e1a:	4b07      	ldr	r3, [pc, #28]	; (1e38 <udi_cdc_data_enable+0xd0>)
    1e1c:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    1e1e:	4b06      	ldr	r3, [pc, #24]	; (1e38 <udi_cdc_data_enable+0xd0>)
    1e20:	781b      	ldrb	r3, [r3, #0]
    1e22:	b2db      	uxtb	r3, r3
    1e24:	2b01      	cmp	r3, #1
    1e26:	d102      	bne.n	1e2e <udi_cdc_data_enable+0xc6>
		udi_cdc_data_running = true;
    1e28:	4b0f      	ldr	r3, [pc, #60]	; (1e68 <udi_cdc_data_enable+0x100>)
    1e2a:	2201      	movs	r2, #1
    1e2c:	701a      	strb	r2, [r3, #0]
	}
	return true;
    1e2e:	2301      	movs	r3, #1
}
    1e30:	1c18      	adds	r0, r3, #0
    1e32:	46bd      	mov	sp, r7
    1e34:	b002      	add	sp, #8
    1e36:	bd80      	pop	{r7, pc}
    1e38:	200009d5 	.word	0x200009d5
    1e3c:	20000ef4 	.word	0x20000ef4
    1e40:	20000ef8 	.word	0x20000ef8
    1e44:	20000eec 	.word	0x20000eec
    1e48:	20000ee8 	.word	0x20000ee8
    1e4c:	20000ef0 	.word	0x20000ef0
    1e50:	0000257d 	.word	0x0000257d
    1e54:	20000c64 	.word	0x20000c64
    1e58:	20000c5c 	.word	0x20000c5c
    1e5c:	20000c58 	.word	0x20000c58
    1e60:	20000c60 	.word	0x20000c60
    1e64:	000022a5 	.word	0x000022a5
    1e68:	200009d6 	.word	0x200009d6

00001e6c <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    1e70:	4b04      	ldr	r3, [pc, #16]	; (1e84 <udi_cdc_comm_disable+0x18>)
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	b2db      	uxtb	r3, r3
    1e76:	3b01      	subs	r3, #1
    1e78:	b2da      	uxtb	r2, r3
    1e7a:	4b02      	ldr	r3, [pc, #8]	; (1e84 <udi_cdc_comm_disable+0x18>)
    1e7c:	701a      	strb	r2, [r3, #0]
}
    1e7e:	46bd      	mov	sp, r7
    1e80:	bd80      	pop	{r7, pc}
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	200009d4 	.word	0x200009d4

00001e88 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    1e88:	b580      	push	{r7, lr}
    1e8a:	b082      	sub	sp, #8
    1e8c:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    1e8e:	4b0b      	ldr	r3, [pc, #44]	; (1ebc <udi_cdc_data_disable+0x34>)
    1e90:	781b      	ldrb	r3, [r3, #0]
    1e92:	b2db      	uxtb	r3, r3
    1e94:	3b01      	subs	r3, #1
    1e96:	b2da      	uxtb	r2, r3
    1e98:	4b08      	ldr	r3, [pc, #32]	; (1ebc <udi_cdc_data_disable+0x34>)
    1e9a:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    1e9c:	1dfb      	adds	r3, r7, #7
    1e9e:	4a07      	ldr	r2, [pc, #28]	; (1ebc <udi_cdc_data_disable+0x34>)
    1ea0:	7812      	ldrb	r2, [r2, #0]
    1ea2:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
    1ea4:	1dfb      	adds	r3, r7, #7
    1ea6:	781b      	ldrb	r3, [r3, #0]
    1ea8:	1c18      	adds	r0, r3, #0
    1eaa:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <udi_cdc_data_disable+0x38>)
    1eac:	4798      	blx	r3
	udi_cdc_data_running = false;
    1eae:	4b05      	ldr	r3, [pc, #20]	; (1ec4 <udi_cdc_data_disable+0x3c>)
    1eb0:	2200      	movs	r2, #0
    1eb2:	701a      	strb	r2, [r3, #0]
}
    1eb4:	46bd      	mov	sp, r7
    1eb6:	b002      	add	sp, #8
    1eb8:	bd80      	pop	{r7, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	200009d5 	.word	0x200009d5
    1ec0:	0000a31d 	.word	0x0000a31d
    1ec4:	200009d6 	.word	0x200009d6

00001ec8 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    1ec8:	b590      	push	{r4, r7, lr}
    1eca:	b083      	sub	sp, #12
    1ecc:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    1ece:	1dfc      	adds	r4, r7, #7
    1ed0:	4b34      	ldr	r3, [pc, #208]	; (1fa4 <udi_cdc_comm_setup+0xdc>)
    1ed2:	4798      	blx	r3
    1ed4:	1c03      	adds	r3, r0, #0
    1ed6:	7023      	strb	r3, [r4, #0]

	if (Udd_setup_is_in()) {
    1ed8:	4b33      	ldr	r3, [pc, #204]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	b2db      	uxtb	r3, r3
    1ede:	b25b      	sxtb	r3, r3
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	da1e      	bge.n	1f22 <udi_cdc_comm_setup+0x5a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1ee4:	4b30      	ldr	r3, [pc, #192]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1ee6:	781b      	ldrb	r3, [r3, #0]
    1ee8:	1c1a      	adds	r2, r3, #0
    1eea:	2360      	movs	r3, #96	; 0x60
    1eec:	4013      	ands	r3, r2
    1eee:	2b20      	cmp	r3, #32
    1ef0:	d117      	bne.n	1f22 <udi_cdc_comm_setup+0x5a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1ef2:	4b2d      	ldr	r3, [pc, #180]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1ef4:	785b      	ldrb	r3, [r3, #1]
    1ef6:	2b21      	cmp	r3, #33	; 0x21
    1ef8:	d113      	bne.n	1f22 <udi_cdc_comm_setup+0x5a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1efa:	4b2b      	ldr	r3, [pc, #172]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1efc:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    1efe:	2b07      	cmp	r3, #7
    1f00:	d001      	beq.n	1f06 <udi_cdc_comm_setup+0x3e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    1f02:	2300      	movs	r3, #0
    1f04:	e049      	b.n	1f9a <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    1f06:	1dfb      	adds	r3, r7, #7
    1f08:	781a      	ldrb	r2, [r3, #0]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1f0a:	1c13      	adds	r3, r2, #0
    1f0c:	00db      	lsls	r3, r3, #3
    1f0e:	1a9b      	subs	r3, r3, r2
    1f10:	4a26      	ldr	r2, [pc, #152]	; (1fac <udi_cdc_comm_setup+0xe4>)
    1f12:	189a      	adds	r2, r3, r2
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    1f14:	4b24      	ldr	r3, [pc, #144]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f16:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    1f18:	4b23      	ldr	r3, [pc, #140]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f1a:	2207      	movs	r2, #7
    1f1c:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    1f1e:	2301      	movs	r3, #1
    1f20:	e03b      	b.n	1f9a <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	if (Udd_setup_is_out()) {
    1f22:	4b21      	ldr	r3, [pc, #132]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	b2db      	uxtb	r3, r3
    1f28:	b25b      	sxtb	r3, r3
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	db34      	blt.n	1f98 <udi_cdc_comm_setup+0xd0>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1f2e:	4b1e      	ldr	r3, [pc, #120]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	1c1a      	adds	r2, r3, #0
    1f34:	2360      	movs	r3, #96	; 0x60
    1f36:	4013      	ands	r3, r2
    1f38:	2b20      	cmp	r3, #32
    1f3a:	d12d      	bne.n	1f98 <udi_cdc_comm_setup+0xd0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1f3c:	4b1a      	ldr	r3, [pc, #104]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f3e:	785b      	ldrb	r3, [r3, #1]
    1f40:	2b20      	cmp	r3, #32
    1f42:	d002      	beq.n	1f4a <udi_cdc_comm_setup+0x82>
    1f44:	2b22      	cmp	r3, #34	; 0x22
    1f46:	d017      	beq.n	1f78 <udi_cdc_comm_setup+0xb0>
    1f48:	e026      	b.n	1f98 <udi_cdc_comm_setup+0xd0>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1f4a:	4b17      	ldr	r3, [pc, #92]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f4c:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    1f4e:	2b07      	cmp	r3, #7
    1f50:	d001      	beq.n	1f56 <udi_cdc_comm_setup+0x8e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    1f52:	2300      	movs	r3, #0
    1f54:	e021      	b.n	1f9a <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.callback =
    1f56:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f58:	4a15      	ldr	r2, [pc, #84]	; (1fb0 <udi_cdc_comm_setup+0xe8>)
    1f5a:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    1f5c:	1dfb      	adds	r3, r7, #7
    1f5e:	781a      	ldrb	r2, [r3, #0]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1f60:	1c13      	adds	r3, r2, #0
    1f62:	00db      	lsls	r3, r3, #3
    1f64:	1a9b      	subs	r3, r3, r2
    1f66:	4a11      	ldr	r2, [pc, #68]	; (1fac <udi_cdc_comm_setup+0xe4>)
    1f68:	189a      	adds	r2, r3, r2
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    1f6a:	4b0f      	ldr	r3, [pc, #60]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f6c:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    1f6e:	4b0e      	ldr	r3, [pc, #56]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f70:	2207      	movs	r2, #7
    1f72:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    1f74:	2301      	movs	r3, #1
    1f76:	e010      	b.n	1f9a <udi_cdc_comm_setup+0xd2>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
    1f78:	4b0b      	ldr	r3, [pc, #44]	; (1fa8 <udi_cdc_comm_setup+0xe0>)
    1f7a:	885b      	ldrh	r3, [r3, #2]
    1f7c:	1c1a      	adds	r2, r3, #0
    1f7e:	2301      	movs	r3, #1
    1f80:	4013      	ands	r3, r2
    1f82:	1e5a      	subs	r2, r3, #1
    1f84:	4193      	sbcs	r3, r2
    1f86:	b2db      	uxtb	r3, r3
    1f88:	1dfa      	adds	r2, r7, #7
    1f8a:	7812      	ldrb	r2, [r2, #0]
    1f8c:	1c10      	adds	r0, r2, #0
    1f8e:	1c19      	adds	r1, r3, #0
    1f90:	4b08      	ldr	r3, [pc, #32]	; (1fb4 <udi_cdc_comm_setup+0xec>)
    1f92:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    1f94:	2301      	movs	r3, #1
    1f96:	e000      	b.n	1f9a <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	return false;  // request Not supported
    1f98:	2300      	movs	r3, #0
}
    1f9a:	1c18      	adds	r0, r3, #0
    1f9c:	46bd      	mov	sp, r7
    1f9e:	b003      	add	sp, #12
    1fa0:	bd90      	pop	{r4, r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	00001fed 	.word	0x00001fed
    1fa8:	20003adc 	.word	0x20003adc
    1fac:	200009b8 	.word	0x200009b8
    1fb0:	00002021 	.word	0x00002021
    1fb4:	0000a349 	.word	0x0000a349

00001fb8 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    1fb8:	b580      	push	{r7, lr}
    1fba:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    1fbc:	2300      	movs	r3, #0
}
    1fbe:	1c18      	adds	r0, r3, #0
    1fc0:	46bd      	mov	sp, r7
    1fc2:	bd80      	pop	{r7, pc}

00001fc4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    1fc8:	2300      	movs	r3, #0
}
    1fca:	1c18      	adds	r0, r3, #0
    1fcc:	46bd      	mov	sp, r7
    1fce:	bd80      	pop	{r7, pc}

00001fd0 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    1fd4:	4b03      	ldr	r3, [pc, #12]	; (1fe4 <udi_cdc_data_sof_notify+0x14>)
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	1c18      	adds	r0, r3, #0
    1fda:	4b03      	ldr	r3, [pc, #12]	; (1fe8 <udi_cdc_data_sof_notify+0x18>)
    1fdc:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    1fde:	46bd      	mov	sp, r7
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	20000efc 	.word	0x20000efc
    1fe8:	0000257d 	.word	0x0000257d

00001fec <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b082      	sub	sp, #8
    1ff0:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    1ff2:	4b0a      	ldr	r3, [pc, #40]	; (201c <udi_cdc_setup_to_port+0x30>)
    1ff4:	889b      	ldrh	r3, [r3, #4]
    1ff6:	1c1a      	adds	r2, r3, #0
    1ff8:	23ff      	movs	r3, #255	; 0xff
    1ffa:	4013      	ands	r3, r2
    1ffc:	d103      	bne.n	2006 <udi_cdc_setup_to_port+0x1a>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    1ffe:	1dfb      	adds	r3, r7, #7
    2000:	2200      	movs	r2, #0
    2002:	701a      	strb	r2, [r3, #0]
    2004:	e003      	b.n	200e <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    2006:	1dfb      	adds	r3, r7, #7
    2008:	2200      	movs	r2, #0
    200a:	701a      	strb	r2, [r3, #0]
		break;
    200c:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    200e:	1dfb      	adds	r3, r7, #7
    2010:	781b      	ldrb	r3, [r3, #0]
}
    2012:	1c18      	adds	r0, r3, #0
    2014:	46bd      	mov	sp, r7
    2016:	b002      	add	sp, #8
    2018:	bd80      	pop	{r7, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	20003adc 	.word	0x20003adc

00002020 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    2020:	b590      	push	{r4, r7, lr}
    2022:	b083      	sub	sp, #12
    2024:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    2026:	1dfc      	adds	r4, r7, #7
    2028:	4b09      	ldr	r3, [pc, #36]	; (2050 <udi_cdc_line_coding_received+0x30>)
    202a:	4798      	blx	r3
    202c:	1c03      	adds	r3, r0, #0
    202e:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
    2030:	1dfb      	adds	r3, r7, #7
    2032:	781a      	ldrb	r2, [r3, #0]
    2034:	1c13      	adds	r3, r2, #0
    2036:	00db      	lsls	r3, r3, #3
    2038:	1a9b      	subs	r3, r3, r2
    203a:	4a06      	ldr	r2, [pc, #24]	; (2054 <udi_cdc_line_coding_received+0x34>)
    203c:	189b      	adds	r3, r3, r2
    203e:	1dfa      	adds	r2, r7, #7
    2040:	7812      	ldrb	r2, [r2, #0]
    2042:	1c10      	adds	r0, r2, #0
    2044:	1c19      	adds	r1, r3, #0
    2046:	4b04      	ldr	r3, [pc, #16]	; (2058 <udi_cdc_line_coding_received+0x38>)
    2048:	4798      	blx	r3
}
    204a:	46bd      	mov	sp, r7
    204c:	b003      	add	sp, #12
    204e:	bd90      	pop	{r4, r7, pc}
    2050:	00001fed 	.word	0x00001fed
    2054:	200009b8 	.word	0x200009b8
    2058:	0000a721 	.word	0x0000a721

0000205c <udi_cdc_ctrl_state_change>:

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    205c:	b580      	push	{r7, lr}
    205e:	b084      	sub	sp, #16
    2060:	af00      	add	r7, sp, #0
    2062:	1dfb      	adds	r3, r7, #7
    2064:	7018      	strb	r0, [r3, #0]
    2066:	1dbb      	adds	r3, r7, #6
    2068:	7019      	strb	r1, [r3, #0]
    206a:	1d3b      	adds	r3, r7, #4
    206c:	801a      	strh	r2, [r3, #0]
	irqflags_t flags;
	udd_ep_id_t ep_comm;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    206e:	1c3b      	adds	r3, r7, #0
    2070:	330e      	adds	r3, #14
    2072:	2200      	movs	r2, #0
    2074:	701a      	strb	r2, [r3, #0]
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
    2076:	4b26      	ldr	r3, [pc, #152]	; (2110 <udi_cdc_ctrl_state_change+0xb4>)
    2078:	4798      	blx	r3
    207a:	1c03      	adds	r3, r0, #0
    207c:	60bb      	str	r3, [r7, #8]
	if (b_set) {
    207e:	1dbb      	adds	r3, r7, #6
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	2b00      	cmp	r3, #0
    2084:	d011      	beq.n	20aa <udi_cdc_ctrl_state_change+0x4e>
		udi_cdc_state[port] |= bit_mask;
    2086:	1c3b      	adds	r3, r7, #0
    2088:	330e      	adds	r3, #14
    208a:	781a      	ldrb	r2, [r3, #0]
    208c:	1c3b      	adds	r3, r7, #0
    208e:	330e      	adds	r3, #14
    2090:	7819      	ldrb	r1, [r3, #0]
    2092:	4b20      	ldr	r3, [pc, #128]	; (2114 <udi_cdc_ctrl_state_change+0xb8>)
    2094:	0049      	lsls	r1, r1, #1
    2096:	5acb      	ldrh	r3, [r1, r3]
    2098:	b299      	uxth	r1, r3
    209a:	1d3b      	adds	r3, r7, #4
    209c:	881b      	ldrh	r3, [r3, #0]
    209e:	430b      	orrs	r3, r1
    20a0:	b299      	uxth	r1, r3
    20a2:	4b1c      	ldr	r3, [pc, #112]	; (2114 <udi_cdc_ctrl_state_change+0xb8>)
    20a4:	0052      	lsls	r2, r2, #1
    20a6:	52d1      	strh	r1, [r2, r3]
    20a8:	e012      	b.n	20d0 <udi_cdc_ctrl_state_change+0x74>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    20aa:	1c3b      	adds	r3, r7, #0
    20ac:	330e      	adds	r3, #14
    20ae:	781a      	ldrb	r2, [r3, #0]
    20b0:	1c3b      	adds	r3, r7, #0
    20b2:	330e      	adds	r3, #14
    20b4:	7819      	ldrb	r1, [r3, #0]
    20b6:	4b17      	ldr	r3, [pc, #92]	; (2114 <udi_cdc_ctrl_state_change+0xb8>)
    20b8:	0049      	lsls	r1, r1, #1
    20ba:	5acb      	ldrh	r3, [r1, r3]
    20bc:	b29b      	uxth	r3, r3
    20be:	1d39      	adds	r1, r7, #4
    20c0:	8809      	ldrh	r1, [r1, #0]
    20c2:	43c9      	mvns	r1, r1
    20c4:	b289      	uxth	r1, r1
    20c6:	400b      	ands	r3, r1
    20c8:	b299      	uxth	r1, r3
    20ca:	4b12      	ldr	r3, [pc, #72]	; (2114 <udi_cdc_ctrl_state_change+0xb8>)
    20cc:	0052      	lsls	r2, r2, #1
    20ce:	52d1      	strh	r1, [r2, r3]
	}
	cpu_irq_restore(flags);
    20d0:	68bb      	ldr	r3, [r7, #8]
    20d2:	1c18      	adds	r0, r3, #0
    20d4:	4b10      	ldr	r3, [pc, #64]	; (2118 <udi_cdc_ctrl_state_change+0xbc>)
    20d6:	4798      	blx	r3

	// Send it if possible and state changed
	switch (port) {
    20d8:	1c3b      	adds	r3, r7, #0
    20da:	330e      	adds	r3, #14
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	2b00      	cmp	r3, #0
    20e0:	d104      	bne.n	20ec <udi_cdc_ctrl_state_change+0x90>
#define UDI_CDC_PORT_TO_COMM_EP(index, unused) \
	case index: \
		ep_comm = UDI_CDC_COMM_EP_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_COMM_EP, ~)
    20e2:	1c3b      	adds	r3, r7, #0
    20e4:	330f      	adds	r3, #15
    20e6:	2287      	movs	r2, #135	; 0x87
    20e8:	701a      	strb	r2, [r3, #0]
    20ea:	e004      	b.n	20f6 <udi_cdc_ctrl_state_change+0x9a>
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
    20ec:	1c3b      	adds	r3, r7, #0
    20ee:	330f      	adds	r3, #15
    20f0:	2287      	movs	r2, #135	; 0x87
    20f2:	701a      	strb	r2, [r3, #0]
		break;
    20f4:	46c0      	nop			; (mov r8, r8)
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    20f6:	1c3b      	adds	r3, r7, #0
    20f8:	330e      	adds	r3, #14
    20fa:	781a      	ldrb	r2, [r3, #0]
    20fc:	1c3b      	adds	r3, r7, #0
    20fe:	330f      	adds	r3, #15
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	1c10      	adds	r0, r2, #0
    2104:	1c19      	adds	r1, r3, #0
    2106:	4b05      	ldr	r3, [pc, #20]	; (211c <udi_cdc_ctrl_state_change+0xc0>)
    2108:	4798      	blx	r3
}
    210a:	46bd      	mov	sp, r7
    210c:	b004      	add	sp, #16
    210e:	bd80      	pop	{r7, pc}
    2110:	00001b65 	.word	0x00001b65
    2114:	200009c4 	.word	0x200009c4
    2118:	00001bad 	.word	0x00001bad
    211c:	00002121 	.word	0x00002121

00002120 <udi_cdc_ctrl_state_notify>:


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    2120:	b5b0      	push	{r4, r5, r7, lr}
    2122:	b086      	sub	sp, #24
    2124:	af02      	add	r7, sp, #8
    2126:	1c0a      	adds	r2, r1, #0
    2128:	1dfb      	adds	r3, r7, #7
    212a:	1c01      	adds	r1, r0, #0
    212c:	7019      	strb	r1, [r3, #0]
    212e:	1dbb      	adds	r3, r7, #6
    2130:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2132:	1c3b      	adds	r3, r7, #0
    2134:	330f      	adds	r3, #15
    2136:	2200      	movs	r2, #0
    2138:	701a      	strb	r2, [r3, #0]
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    213a:	1c3b      	adds	r3, r7, #0
    213c:	330f      	adds	r3, #15
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	4a25      	ldr	r2, [pc, #148]	; (21d8 <udi_cdc_ctrl_state_notify+0xb8>)
    2142:	5cd3      	ldrb	r3, [r2, r3]
    2144:	2201      	movs	r2, #1
    2146:	4053      	eors	r3, r2
    2148:	b2db      	uxtb	r3, r3
    214a:	2b00      	cmp	r3, #0
    214c:	d040      	beq.n	21d0 <udi_cdc_ctrl_state_notify+0xb0>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    214e:	1c3b      	adds	r3, r7, #0
    2150:	330f      	adds	r3, #15
    2152:	781a      	ldrb	r2, [r3, #0]
    2154:	4b21      	ldr	r3, [pc, #132]	; (21dc <udi_cdc_ctrl_state_notify+0xbc>)
    2156:	0052      	lsls	r2, r2, #1
    2158:	5ad3      	ldrh	r3, [r2, r3]
    215a:	b299      	uxth	r1, r3
    215c:	1c3b      	adds	r3, r7, #0
    215e:	330f      	adds	r3, #15
    2160:	781a      	ldrb	r2, [r3, #0]
    2162:	481f      	ldr	r0, [pc, #124]	; (21e0 <udi_cdc_ctrl_state_notify+0xc0>)
    2164:	1c13      	adds	r3, r2, #0
    2166:	009b      	lsls	r3, r3, #2
    2168:	189b      	adds	r3, r3, r2
    216a:	005b      	lsls	r3, r3, #1
    216c:	18c3      	adds	r3, r0, r3
    216e:	3308      	adds	r3, #8
    2170:	881b      	ldrh	r3, [r3, #0]
    2172:	4299      	cmp	r1, r3
    2174:	d02c      	beq.n	21d0 <udi_cdc_ctrl_state_notify+0xb0>
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    2176:	1c3b      	adds	r3, r7, #0
    2178:	330f      	adds	r3, #15
    217a:	781a      	ldrb	r2, [r3, #0]
    217c:	1c3b      	adds	r3, r7, #0
    217e:	330f      	adds	r3, #15
    2180:	7819      	ldrb	r1, [r3, #0]
    2182:	4b16      	ldr	r3, [pc, #88]	; (21dc <udi_cdc_ctrl_state_notify+0xbc>)
    2184:	0049      	lsls	r1, r1, #1
    2186:	5acb      	ldrh	r3, [r1, r3]
    2188:	b299      	uxth	r1, r3
    218a:	4815      	ldr	r0, [pc, #84]	; (21e0 <udi_cdc_ctrl_state_notify+0xc0>)
    218c:	1c13      	adds	r3, r2, #0
    218e:	009b      	lsls	r3, r3, #2
    2190:	189b      	adds	r3, r3, r2
    2192:	005b      	lsls	r3, r3, #1
    2194:	18c3      	adds	r3, r0, r3
    2196:	3308      	adds	r3, #8
    2198:	1c0a      	adds	r2, r1, #0
    219a:	801a      	strh	r2, [r3, #0]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    219c:	1c3b      	adds	r3, r7, #0
    219e:	330f      	adds	r3, #15
    21a0:	781c      	ldrb	r4, [r3, #0]
				udd_ep_run(ep,
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
    21a2:	1c3b      	adds	r3, r7, #0
    21a4:	330f      	adds	r3, #15
    21a6:	781a      	ldrb	r2, [r3, #0]
    21a8:	1c13      	adds	r3, r2, #0
    21aa:	009b      	lsls	r3, r3, #2
    21ac:	189b      	adds	r3, r3, r2
    21ae:	005b      	lsls	r3, r3, #1
    21b0:	4a0b      	ldr	r2, [pc, #44]	; (21e0 <udi_cdc_ctrl_state_notify+0xc0>)
    21b2:	189b      	adds	r3, r3, r2
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    21b4:	1dba      	adds	r2, r7, #6
    21b6:	7812      	ldrb	r2, [r2, #0]
    21b8:	490a      	ldr	r1, [pc, #40]	; (21e4 <udi_cdc_ctrl_state_notify+0xc4>)
    21ba:	9100      	str	r1, [sp, #0]
    21bc:	1c10      	adds	r0, r2, #0
    21be:	2100      	movs	r1, #0
    21c0:	1c1a      	adds	r2, r3, #0
    21c2:	230a      	movs	r3, #10
    21c4:	4d08      	ldr	r5, [pc, #32]	; (21e8 <udi_cdc_ctrl_state_notify+0xc8>)
    21c6:	47a8      	blx	r5
    21c8:	1c03      	adds	r3, r0, #0
    21ca:	1c1a      	adds	r2, r3, #0
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    21cc:	4b02      	ldr	r3, [pc, #8]	; (21d8 <udi_cdc_ctrl_state_notify+0xb8>)
    21ce:	551a      	strb	r2, [r3, r4]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    21d0:	46bd      	mov	sp, r7
    21d2:	b004      	add	sp, #16
    21d4:	bdb0      	pop	{r4, r5, r7, pc}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	200009c0 	.word	0x200009c0
    21dc:	200009c4 	.word	0x200009c4
    21e0:	200009c8 	.word	0x200009c8
    21e4:	000021ed 	.word	0x000021ed
    21e8:	00007425 	.word	0x00007425

000021ec <udi_cdc_serial_state_msg_sent>:


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	b084      	sub	sp, #16
    21f0:	af00      	add	r7, sp, #0
    21f2:	6039      	str	r1, [r7, #0]
    21f4:	1dfb      	adds	r3, r7, #7
    21f6:	1c01      	adds	r1, r0, #0
    21f8:	7019      	strb	r1, [r3, #0]
    21fa:	1dbb      	adds	r3, r7, #6
    21fc:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);
	UNUSED(status);

	switch (ep) {
    21fe:	1dbb      	adds	r3, r7, #6
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	2b87      	cmp	r3, #135	; 0x87
    2204:	d104      	bne.n	2210 <udi_cdc_serial_state_msg_sent+0x24>
#define UDI_CDC_GET_PORT_FROM_COMM_EP(iface, unused) \
	case UDI_CDC_COMM_EP_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
    2206:	1c3b      	adds	r3, r7, #0
    2208:	330f      	adds	r3, #15
    220a:	2200      	movs	r2, #0
    220c:	701a      	strb	r2, [r3, #0]
    220e:	e004      	b.n	221a <udi_cdc_serial_state_msg_sent+0x2e>
#undef UDI_CDC_GET_PORT_FROM_COMM_EP
	default:
		port = 0;
    2210:	1c3b      	adds	r3, r7, #0
    2212:	330f      	adds	r3, #15
    2214:	2200      	movs	r2, #0
    2216:	701a      	strb	r2, [r3, #0]
		break;
    2218:	46c0      	nop			; (mov r8, r8)
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    221a:	1c3b      	adds	r3, r7, #0
    221c:	330f      	adds	r3, #15
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	4a1c      	ldr	r2, [pc, #112]	; (2294 <udi_cdc_serial_state_msg_sent+0xa8>)
    2222:	2100      	movs	r1, #0
    2224:	54d1      	strb	r1, [r2, r3]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    2226:	1c3b      	adds	r3, r7, #0
    2228:	330f      	adds	r3, #15
    222a:	781a      	ldrb	r2, [r3, #0]
    222c:	1c3b      	adds	r3, r7, #0
    222e:	330f      	adds	r3, #15
    2230:	7819      	ldrb	r1, [r3, #0]
    2232:	4b19      	ldr	r3, [pc, #100]	; (2298 <udi_cdc_serial_state_msg_sent+0xac>)
    2234:	0049      	lsls	r1, r1, #1
    2236:	5acb      	ldrh	r3, [r1, r3]
    2238:	b29b      	uxth	r3, r3
    223a:	217c      	movs	r1, #124	; 0x7c
    223c:	438b      	bics	r3, r1
    223e:	b299      	uxth	r1, r3
    2240:	4b15      	ldr	r3, [pc, #84]	; (2298 <udi_cdc_serial_state_msg_sent+0xac>)
    2242:	0052      	lsls	r2, r2, #1
    2244:	52d1      	strh	r1, [r2, r3]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    2246:	1c3b      	adds	r3, r7, #0
    2248:	330f      	adds	r3, #15
    224a:	781a      	ldrb	r2, [r3, #0]
    224c:	1c3b      	adds	r3, r7, #0
    224e:	330f      	adds	r3, #15
    2250:	7819      	ldrb	r1, [r3, #0]
    2252:	4812      	ldr	r0, [pc, #72]	; (229c <udi_cdc_serial_state_msg_sent+0xb0>)
    2254:	1c0b      	adds	r3, r1, #0
    2256:	009b      	lsls	r3, r3, #2
    2258:	185b      	adds	r3, r3, r1
    225a:	005b      	lsls	r3, r3, #1
    225c:	18c3      	adds	r3, r0, r3
    225e:	3308      	adds	r3, #8
    2260:	881b      	ldrh	r3, [r3, #0]
    2262:	217c      	movs	r1, #124	; 0x7c
    2264:	438b      	bics	r3, r1
    2266:	b299      	uxth	r1, r3
    2268:	480c      	ldr	r0, [pc, #48]	; (229c <udi_cdc_serial_state_msg_sent+0xb0>)
    226a:	1c13      	adds	r3, r2, #0
    226c:	009b      	lsls	r3, r3, #2
    226e:	189b      	adds	r3, r3, r2
    2270:	005b      	lsls	r3, r3, #1
    2272:	18c3      	adds	r3, r0, r3
    2274:	3308      	adds	r3, #8
    2276:	1c0a      	adds	r2, r1, #0
    2278:	801a      	strh	r2, [r3, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    227a:	1c3b      	adds	r3, r7, #0
    227c:	330f      	adds	r3, #15
    227e:	781a      	ldrb	r2, [r3, #0]
    2280:	1dbb      	adds	r3, r7, #6
    2282:	781b      	ldrb	r3, [r3, #0]
    2284:	1c10      	adds	r0, r2, #0
    2286:	1c19      	adds	r1, r3, #0
    2288:	4b05      	ldr	r3, [pc, #20]	; (22a0 <udi_cdc_serial_state_msg_sent+0xb4>)
    228a:	4798      	blx	r3
}
    228c:	46bd      	mov	sp, r7
    228e:	b004      	add	sp, #16
    2290:	bd80      	pop	{r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	200009c0 	.word	0x200009c0
    2298:	200009c4 	.word	0x200009c4
    229c:	200009c8 	.word	0x200009c8
    22a0:	00002121 	.word	0x00002121

000022a4 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    22a4:	b590      	push	{r4, r7, lr}
    22a6:	b089      	sub	sp, #36	; 0x24
    22a8:	af02      	add	r7, sp, #8
    22aa:	1c02      	adds	r2, r0, #0
    22ac:	1dfb      	adds	r3, r7, #7
    22ae:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    22b0:	1c3b      	adds	r3, r7, #0
    22b2:	3316      	adds	r3, #22
    22b4:	2200      	movs	r2, #0
    22b6:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    22b8:	4b45      	ldr	r3, [pc, #276]	; (23d0 <udi_cdc_rx_start+0x12c>)
    22ba:	4798      	blx	r3
    22bc:	1c03      	adds	r3, r0, #0
    22be:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    22c0:	1c3b      	adds	r3, r7, #0
    22c2:	3316      	adds	r3, #22
    22c4:	781a      	ldrb	r2, [r3, #0]
    22c6:	1c3b      	adds	r3, r7, #0
    22c8:	330f      	adds	r3, #15
    22ca:	4942      	ldr	r1, [pc, #264]	; (23d4 <udi_cdc_rx_start+0x130>)
    22cc:	5c8a      	ldrb	r2, [r1, r2]
    22ce:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    22d0:	1c3b      	adds	r3, r7, #0
    22d2:	3316      	adds	r3, #22
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	4a40      	ldr	r2, [pc, #256]	; (23d8 <udi_cdc_rx_start+0x134>)
    22d8:	5cd3      	ldrb	r3, [r2, r3]
    22da:	b2db      	uxtb	r3, r3
    22dc:	2b00      	cmp	r3, #0
    22de:	d113      	bne.n	2308 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    22e0:	1c3b      	adds	r3, r7, #0
    22e2:	3316      	adds	r3, #22
    22e4:	781a      	ldrb	r2, [r3, #0]
    22e6:	4b3d      	ldr	r3, [pc, #244]	; (23dc <udi_cdc_rx_start+0x138>)
    22e8:	0052      	lsls	r2, r2, #1
    22ea:	5ad3      	ldrh	r3, [r2, r3]
    22ec:	b29a      	uxth	r2, r3
    22ee:	1c3b      	adds	r3, r7, #0
    22f0:	3316      	adds	r3, #22
    22f2:	7818      	ldrb	r0, [r3, #0]
    22f4:	1c3b      	adds	r3, r7, #0
    22f6:	330f      	adds	r3, #15
    22f8:	7819      	ldrb	r1, [r3, #0]
    22fa:	4b39      	ldr	r3, [pc, #228]	; (23e0 <udi_cdc_rx_start+0x13c>)
    22fc:	0040      	lsls	r0, r0, #1
    22fe:	1841      	adds	r1, r0, r1
    2300:	0049      	lsls	r1, r1, #1
    2302:	5acb      	ldrh	r3, [r1, r3]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    2304:	429a      	cmp	r2, r3
    2306:	d205      	bcs.n	2314 <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    2308:	693b      	ldr	r3, [r7, #16]
    230a:	1c18      	adds	r0, r3, #0
    230c:	4b35      	ldr	r3, [pc, #212]	; (23e4 <udi_cdc_rx_start+0x140>)
    230e:	4798      	blx	r3
		return false;
    2310:	2300      	movs	r3, #0
    2312:	e058      	b.n	23c6 <udi_cdc_rx_start+0x122>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    2314:	1c3b      	adds	r3, r7, #0
    2316:	3316      	adds	r3, #22
    2318:	781a      	ldrb	r2, [r3, #0]
    231a:	4b30      	ldr	r3, [pc, #192]	; (23dc <udi_cdc_rx_start+0x138>)
    231c:	0052      	lsls	r2, r2, #1
    231e:	2100      	movs	r1, #0
    2320:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    2322:	1c3b      	adds	r3, r7, #0
    2324:	3316      	adds	r3, #22
    2326:	781b      	ldrb	r3, [r3, #0]
    2328:	1c3a      	adds	r2, r7, #0
    232a:	320f      	adds	r2, #15
    232c:	7812      	ldrb	r2, [r2, #0]
    232e:	4251      	negs	r1, r2
    2330:	414a      	adcs	r2, r1
    2332:	b2d2      	uxtb	r2, r2
    2334:	1c11      	adds	r1, r2, #0
    2336:	4a27      	ldr	r2, [pc, #156]	; (23d4 <udi_cdc_rx_start+0x130>)
    2338:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    233a:	1c3b      	adds	r3, r7, #0
    233c:	3316      	adds	r3, #22
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	4a25      	ldr	r2, [pc, #148]	; (23d8 <udi_cdc_rx_start+0x134>)
    2342:	2101      	movs	r1, #1
    2344:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    2346:	693b      	ldr	r3, [r7, #16]
    2348:	1c18      	adds	r0, r3, #0
    234a:	4b26      	ldr	r3, [pc, #152]	; (23e4 <udi_cdc_rx_start+0x140>)
    234c:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    234e:	1c3b      	adds	r3, r7, #0
    2350:	3316      	adds	r3, #22
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	1c18      	adds	r0, r3, #0
    2356:	4b24      	ldr	r3, [pc, #144]	; (23e8 <udi_cdc_rx_start+0x144>)
    2358:	4798      	blx	r3
    235a:	1c03      	adds	r3, r0, #0
    235c:	2b00      	cmp	r3, #0
    235e:	d005      	beq.n	236c <udi_cdc_rx_start+0xc8>
		UDI_CDC_RX_NOTIFY(port);
    2360:	1c3b      	adds	r3, r7, #0
    2362:	3316      	adds	r3, #22
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	1c18      	adds	r0, r3, #0
    2368:	4b20      	ldr	r3, [pc, #128]	; (23ec <udi_cdc_rx_start+0x148>)
    236a:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
    236c:	1c3b      	adds	r3, r7, #0
    236e:	3316      	adds	r3, #22
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	2b00      	cmp	r3, #0
    2374:	d104      	bne.n	2380 <udi_cdc_rx_start+0xdc>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    2376:	1c3b      	adds	r3, r7, #0
    2378:	3317      	adds	r3, #23
    237a:	2205      	movs	r2, #5
    237c:	701a      	strb	r2, [r3, #0]
    237e:	e004      	b.n	238a <udi_cdc_rx_start+0xe6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    2380:	1c3b      	adds	r3, r7, #0
    2382:	3317      	adds	r3, #23
    2384:	2205      	movs	r2, #5
    2386:	701a      	strb	r2, [r3, #0]
		break;
    2388:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    238a:	1c3b      	adds	r3, r7, #0
    238c:	3316      	adds	r3, #22
    238e:	7819      	ldrb	r1, [r3, #0]
    2390:	1c3b      	adds	r3, r7, #0
    2392:	330f      	adds	r3, #15
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	1c1a      	adds	r2, r3, #0
    2398:	0092      	lsls	r2, r2, #2
    239a:	18d2      	adds	r2, r2, r3
    239c:	0193      	lsls	r3, r2, #6
    239e:	1c1a      	adds	r2, r3, #0
    23a0:	1c0b      	adds	r3, r1, #0
    23a2:	009b      	lsls	r3, r3, #2
    23a4:	185b      	adds	r3, r3, r1
    23a6:	01db      	lsls	r3, r3, #7
    23a8:	18d2      	adds	r2, r2, r3
    23aa:	4b11      	ldr	r3, [pc, #68]	; (23f0 <udi_cdc_rx_start+0x14c>)
    23ac:	18d2      	adds	r2, r2, r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    23ae:	1c3b      	adds	r3, r7, #0
    23b0:	3317      	adds	r3, #23
    23b2:	7819      	ldrb	r1, [r3, #0]
    23b4:	23a0      	movs	r3, #160	; 0xa0
    23b6:	005b      	lsls	r3, r3, #1
    23b8:	480e      	ldr	r0, [pc, #56]	; (23f4 <udi_cdc_rx_start+0x150>)
    23ba:	9000      	str	r0, [sp, #0]
    23bc:	1c08      	adds	r0, r1, #0
    23be:	2101      	movs	r1, #1
    23c0:	4c0d      	ldr	r4, [pc, #52]	; (23f8 <udi_cdc_rx_start+0x154>)
    23c2:	47a0      	blx	r4
    23c4:	1c03      	adds	r3, r0, #0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    23c6:	1c18      	adds	r0, r3, #0
    23c8:	46bd      	mov	sp, r7
    23ca:	b007      	add	sp, #28
    23cc:	bd90      	pop	{r4, r7, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	00001b65 	.word	0x00001b65
    23d4:	20000c5c 	.word	0x20000c5c
    23d8:	20000c64 	.word	0x20000c64
    23dc:	20000c60 	.word	0x20000c60
    23e0:	20000c58 	.word	0x20000c58
    23e4:	00001bad 	.word	0x00001bad
    23e8:	00002865 	.word	0x00002865
    23ec:	0000a6cd 	.word	0x0000a6cd
    23f0:	200009d8 	.word	0x200009d8
    23f4:	000023fd 	.word	0x000023fd
    23f8:	00007425 	.word	0x00007425

000023fc <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    23fc:	b590      	push	{r4, r7, lr}
    23fe:	b087      	sub	sp, #28
    2400:	af02      	add	r7, sp, #8
    2402:	6039      	str	r1, [r7, #0]
    2404:	1dfb      	adds	r3, r7, #7
    2406:	1c01      	adds	r1, r0, #0
    2408:	7019      	strb	r1, [r3, #0]
    240a:	1dbb      	adds	r3, r7, #6
    240c:	701a      	strb	r2, [r3, #0]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    240e:	1dbb      	adds	r3, r7, #6
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	2b05      	cmp	r3, #5
    2414:	d104      	bne.n	2420 <udi_cdc_data_received+0x24>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    2416:	1c3b      	adds	r3, r7, #0
    2418:	330f      	adds	r3, #15
    241a:	2200      	movs	r2, #0
    241c:	701a      	strb	r2, [r3, #0]
    241e:	e004      	b.n	242a <udi_cdc_data_received+0x2e>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    2420:	1c3b      	adds	r3, r7, #0
    2422:	330f      	adds	r3, #15
    2424:	2200      	movs	r2, #0
    2426:	701a      	strb	r2, [r3, #0]
		break;
    2428:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    242a:	1dfb      	adds	r3, r7, #7
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2b00      	cmp	r3, #0
    2430:	d000      	beq.n	2434 <udi_cdc_data_received+0x38>
		// Abort reception
		return;
    2432:	e044      	b.n	24be <udi_cdc_data_received+0xc2>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    2434:	1c3b      	adds	r3, r7, #0
    2436:	330f      	adds	r3, #15
    2438:	781b      	ldrb	r3, [r3, #0]
    243a:	4a22      	ldr	r2, [pc, #136]	; (24c4 <udi_cdc_data_received+0xc8>)
    243c:	5cd3      	ldrb	r3, [r2, r3]
    243e:	b2db      	uxtb	r3, r3
    2440:	425a      	negs	r2, r3
    2442:	4153      	adcs	r3, r2
    2444:	b2da      	uxtb	r2, r3
    2446:	1c3b      	adds	r3, r7, #0
    2448:	330e      	adds	r3, #14
    244a:	701a      	strb	r2, [r3, #0]
	if (!n) {
    244c:	683b      	ldr	r3, [r7, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d11c      	bne.n	248c <udi_cdc_data_received+0x90>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    2452:	1c3b      	adds	r3, r7, #0
    2454:	330f      	adds	r3, #15
    2456:	7819      	ldrb	r1, [r3, #0]
    2458:	1c3b      	adds	r3, r7, #0
    245a:	330e      	adds	r3, #14
    245c:	781b      	ldrb	r3, [r3, #0]
    245e:	1c1a      	adds	r2, r3, #0
    2460:	0092      	lsls	r2, r2, #2
    2462:	18d2      	adds	r2, r2, r3
    2464:	0193      	lsls	r3, r2, #6
    2466:	1c1a      	adds	r2, r3, #0
    2468:	1c0b      	adds	r3, r1, #0
    246a:	009b      	lsls	r3, r3, #2
    246c:	185b      	adds	r3, r3, r1
    246e:	01db      	lsls	r3, r3, #7
    2470:	18d2      	adds	r2, r2, r3
    2472:	4b15      	ldr	r3, [pc, #84]	; (24c8 <udi_cdc_data_received+0xcc>)
    2474:	18d2      	adds	r2, r2, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    2476:	1dbb      	adds	r3, r7, #6
    2478:	7819      	ldrb	r1, [r3, #0]
    247a:	23a0      	movs	r3, #160	; 0xa0
    247c:	005b      	lsls	r3, r3, #1
    247e:	4813      	ldr	r0, [pc, #76]	; (24cc <udi_cdc_data_received+0xd0>)
    2480:	9000      	str	r0, [sp, #0]
    2482:	1c08      	adds	r0, r1, #0
    2484:	2101      	movs	r1, #1
    2486:	4c12      	ldr	r4, [pc, #72]	; (24d0 <udi_cdc_data_received+0xd4>)
    2488:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    248a:	e018      	b.n	24be <udi_cdc_data_received+0xc2>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    248c:	1c3b      	adds	r3, r7, #0
    248e:	330f      	adds	r3, #15
    2490:	7818      	ldrb	r0, [r3, #0]
    2492:	1c3b      	adds	r3, r7, #0
    2494:	330e      	adds	r3, #14
    2496:	781a      	ldrb	r2, [r3, #0]
    2498:	683b      	ldr	r3, [r7, #0]
    249a:	b299      	uxth	r1, r3
    249c:	4b0d      	ldr	r3, [pc, #52]	; (24d4 <udi_cdc_data_received+0xd8>)
    249e:	0040      	lsls	r0, r0, #1
    24a0:	1882      	adds	r2, r0, r2
    24a2:	0052      	lsls	r2, r2, #1
    24a4:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    24a6:	1c3b      	adds	r3, r7, #0
    24a8:	330f      	adds	r3, #15
    24aa:	781b      	ldrb	r3, [r3, #0]
    24ac:	4a0a      	ldr	r2, [pc, #40]	; (24d8 <udi_cdc_data_received+0xdc>)
    24ae:	2100      	movs	r1, #0
    24b0:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    24b2:	1c3b      	adds	r3, r7, #0
    24b4:	330f      	adds	r3, #15
    24b6:	781b      	ldrb	r3, [r3, #0]
    24b8:	1c18      	adds	r0, r3, #0
    24ba:	4b08      	ldr	r3, [pc, #32]	; (24dc <udi_cdc_data_received+0xe0>)
    24bc:	4798      	blx	r3
}
    24be:	46bd      	mov	sp, r7
    24c0:	b005      	add	sp, #20
    24c2:	bd90      	pop	{r4, r7, pc}
    24c4:	20000c5c 	.word	0x20000c5c
    24c8:	200009d8 	.word	0x200009d8
    24cc:	000023fd 	.word	0x000023fd
    24d0:	00007425 	.word	0x00007425
    24d4:	20000c58 	.word	0x20000c58
    24d8:	20000c64 	.word	0x20000c64
    24dc:	000022a5 	.word	0x000022a5

000024e0 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    24e0:	b580      	push	{r7, lr}
    24e2:	b084      	sub	sp, #16
    24e4:	af00      	add	r7, sp, #0
    24e6:	6039      	str	r1, [r7, #0]
    24e8:	1dfb      	adds	r3, r7, #7
    24ea:	1c01      	adds	r1, r0, #0
    24ec:	7019      	strb	r1, [r3, #0]
    24ee:	1dbb      	adds	r3, r7, #6
    24f0:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    24f2:	1dbb      	adds	r3, r7, #6
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b86      	cmp	r3, #134	; 0x86
    24f8:	d104      	bne.n	2504 <udi_cdc_data_sent+0x24>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    24fa:	1c3b      	adds	r3, r7, #0
    24fc:	330f      	adds	r3, #15
    24fe:	2200      	movs	r2, #0
    2500:	701a      	strb	r2, [r3, #0]
    2502:	e004      	b.n	250e <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    2504:	1c3b      	adds	r3, r7, #0
    2506:	330f      	adds	r3, #15
    2508:	2200      	movs	r2, #0
    250a:	701a      	strb	r2, [r3, #0]
		break;
    250c:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    250e:	1dfb      	adds	r3, r7, #7
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	2b00      	cmp	r3, #0
    2514:	d000      	beq.n	2518 <udi_cdc_data_sent+0x38>
		// Abort transfer
		return;
    2516:	e024      	b.n	2562 <udi_cdc_data_sent+0x82>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    2518:	1c3b      	adds	r3, r7, #0
    251a:	330f      	adds	r3, #15
    251c:	7819      	ldrb	r1, [r3, #0]
    251e:	1c3b      	adds	r3, r7, #0
    2520:	330f      	adds	r3, #15
    2522:	781b      	ldrb	r3, [r3, #0]
    2524:	4a10      	ldr	r2, [pc, #64]	; (2568 <udi_cdc_data_sent+0x88>)
    2526:	5cd3      	ldrb	r3, [r2, r3]
    2528:	b2db      	uxtb	r3, r3
    252a:	425a      	negs	r2, r3
    252c:	4153      	adcs	r3, r2
    252e:	b2db      	uxtb	r3, r3
    2530:	1c1a      	adds	r2, r3, #0
    2532:	4b0e      	ldr	r3, [pc, #56]	; (256c <udi_cdc_data_sent+0x8c>)
    2534:	0049      	lsls	r1, r1, #1
    2536:	188a      	adds	r2, r1, r2
    2538:	0052      	lsls	r2, r2, #1
    253a:	2100      	movs	r1, #0
    253c:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    253e:	1c3b      	adds	r3, r7, #0
    2540:	330f      	adds	r3, #15
    2542:	781b      	ldrb	r3, [r3, #0]
    2544:	4a0a      	ldr	r2, [pc, #40]	; (2570 <udi_cdc_data_sent+0x90>)
    2546:	2100      	movs	r1, #0
    2548:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    254a:	1c3b      	adds	r3, r7, #0
    254c:	330f      	adds	r3, #15
    254e:	781b      	ldrb	r3, [r3, #0]
    2550:	4a08      	ldr	r2, [pc, #32]	; (2574 <udi_cdc_data_sent+0x94>)
    2552:	2100      	movs	r1, #0
    2554:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    2556:	1c3b      	adds	r3, r7, #0
    2558:	330f      	adds	r3, #15
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	1c18      	adds	r0, r3, #0
    255e:	4b06      	ldr	r3, [pc, #24]	; (2578 <udi_cdc_data_sent+0x98>)
    2560:	4798      	blx	r3
}
    2562:	46bd      	mov	sp, r7
    2564:	b004      	add	sp, #16
    2566:	bd80      	pop	{r7, pc}
    2568:	20000eec 	.word	0x20000eec
    256c:	20000ee8 	.word	0x20000ee8
    2570:	20000ef8 	.word	0x20000ef8
    2574:	20000ef4 	.word	0x20000ef4
    2578:	0000257d 	.word	0x0000257d

0000257c <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    257c:	b590      	push	{r4, r7, lr}
    257e:	b089      	sub	sp, #36	; 0x24
    2580:	af02      	add	r7, sp, #8
    2582:	1c02      	adds	r2, r0, #0
    2584:	1dfb      	adds	r3, r7, #7
    2586:	701a      	strb	r2, [r3, #0]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2588:	1c3b      	adds	r3, r7, #0
    258a:	3315      	adds	r3, #21
    258c:	2200      	movs	r2, #0
    258e:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    2590:	1c3b      	adds	r3, r7, #0
    2592:	3315      	adds	r3, #21
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	4a7e      	ldr	r2, [pc, #504]	; (2790 <udi_cdc_tx_send+0x214>)
    2598:	5cd3      	ldrb	r3, [r2, r3]
    259a:	b2db      	uxtb	r3, r3
    259c:	2b00      	cmp	r3, #0
    259e:	d000      	beq.n	25a2 <udi_cdc_tx_send+0x26>
		return; // Already on going or wait next SOF to send next data
    25a0:	e0f3      	b.n	278a <udi_cdc_tx_send+0x20e>
	}
	if (udd_is_high_speed()) {
    25a2:	4b7c      	ldr	r3, [pc, #496]	; (2794 <udi_cdc_tx_send+0x218>)
    25a4:	4798      	blx	r3
    25a6:	1c03      	adds	r3, r0, #0
    25a8:	2b00      	cmp	r3, #0
    25aa:	d00b      	beq.n	25c4 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    25ac:	1c3b      	adds	r3, r7, #0
    25ae:	3315      	adds	r3, #21
    25b0:	781a      	ldrb	r2, [r3, #0]
    25b2:	4b79      	ldr	r3, [pc, #484]	; (2798 <udi_cdc_tx_send+0x21c>)
    25b4:	0052      	lsls	r2, r2, #1
    25b6:	5ad4      	ldrh	r4, [r2, r3]
    25b8:	4b78      	ldr	r3, [pc, #480]	; (279c <udi_cdc_tx_send+0x220>)
    25ba:	4798      	blx	r3
    25bc:	1c03      	adds	r3, r0, #0
    25be:	429c      	cmp	r4, r3
    25c0:	d10c      	bne.n	25dc <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    25c2:	e0e2      	b.n	278a <udi_cdc_tx_send+0x20e>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    25c4:	1c3b      	adds	r3, r7, #0
    25c6:	3315      	adds	r3, #21
    25c8:	781a      	ldrb	r2, [r3, #0]
    25ca:	4b73      	ldr	r3, [pc, #460]	; (2798 <udi_cdc_tx_send+0x21c>)
    25cc:	0052      	lsls	r2, r2, #1
    25ce:	5ad4      	ldrh	r4, [r2, r3]
    25d0:	4b73      	ldr	r3, [pc, #460]	; (27a0 <udi_cdc_tx_send+0x224>)
    25d2:	4798      	blx	r3
    25d4:	1c03      	adds	r3, r0, #0
    25d6:	429c      	cmp	r4, r3
    25d8:	d100      	bne.n	25dc <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    25da:	e0d6      	b.n	278a <udi_cdc_tx_send+0x20e>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    25dc:	4b71      	ldr	r3, [pc, #452]	; (27a4 <udi_cdc_tx_send+0x228>)
    25de:	4798      	blx	r3
    25e0:	1c03      	adds	r3, r0, #0
    25e2:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    25e4:	1c3b      	adds	r3, r7, #0
    25e6:	3315      	adds	r3, #21
    25e8:	781a      	ldrb	r2, [r3, #0]
    25ea:	1c3b      	adds	r3, r7, #0
    25ec:	3317      	adds	r3, #23
    25ee:	496e      	ldr	r1, [pc, #440]	; (27a8 <udi_cdc_tx_send+0x22c>)
    25f0:	5c8a      	ldrb	r2, [r1, r2]
    25f2:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    25f4:	1c3b      	adds	r3, r7, #0
    25f6:	3315      	adds	r3, #21
    25f8:	7819      	ldrb	r1, [r3, #0]
    25fa:	1c3b      	adds	r3, r7, #0
    25fc:	3317      	adds	r3, #23
    25fe:	781a      	ldrb	r2, [r3, #0]
    2600:	4b6a      	ldr	r3, [pc, #424]	; (27ac <udi_cdc_tx_send+0x230>)
    2602:	0049      	lsls	r1, r1, #1
    2604:	188a      	adds	r2, r1, r2
    2606:	0052      	lsls	r2, r2, #1
    2608:	5ad3      	ldrh	r3, [r2, r3]
    260a:	2b00      	cmp	r3, #0
    260c:	d120      	bne.n	2650 <udi_cdc_tx_send+0xd4>
		sof_zlp_counter++;
    260e:	4b68      	ldr	r3, [pc, #416]	; (27b0 <udi_cdc_tx_send+0x234>)
    2610:	881b      	ldrh	r3, [r3, #0]
    2612:	3301      	adds	r3, #1
    2614:	b29a      	uxth	r2, r3
    2616:	4b66      	ldr	r3, [pc, #408]	; (27b0 <udi_cdc_tx_send+0x234>)
    2618:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    261a:	4b5e      	ldr	r3, [pc, #376]	; (2794 <udi_cdc_tx_send+0x218>)
    261c:	4798      	blx	r3
    261e:	1c03      	adds	r3, r0, #0
    2620:	2201      	movs	r2, #1
    2622:	4053      	eors	r3, r2
    2624:	b2db      	uxtb	r3, r3
    2626:	2b00      	cmp	r3, #0
    2628:	d003      	beq.n	2632 <udi_cdc_tx_send+0xb6>
    262a:	4b61      	ldr	r3, [pc, #388]	; (27b0 <udi_cdc_tx_send+0x234>)
    262c:	881b      	ldrh	r3, [r3, #0]
    262e:	2b63      	cmp	r3, #99	; 0x63
    2630:	d909      	bls.n	2646 <udi_cdc_tx_send+0xca>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    2632:	4b58      	ldr	r3, [pc, #352]	; (2794 <udi_cdc_tx_send+0x218>)
    2634:	4798      	blx	r3
    2636:	1c03      	adds	r3, r0, #0
    2638:	2b00      	cmp	r3, #0
    263a:	d009      	beq.n	2650 <udi_cdc_tx_send+0xd4>
    263c:	4b5c      	ldr	r3, [pc, #368]	; (27b0 <udi_cdc_tx_send+0x234>)
    263e:	881a      	ldrh	r2, [r3, #0]
    2640:	4b5c      	ldr	r3, [pc, #368]	; (27b4 <udi_cdc_tx_send+0x238>)
    2642:	429a      	cmp	r2, r3
    2644:	d804      	bhi.n	2650 <udi_cdc_tx_send+0xd4>
			cpu_irq_restore(flags);
    2646:	693b      	ldr	r3, [r7, #16]
    2648:	1c18      	adds	r0, r3, #0
    264a:	4b5b      	ldr	r3, [pc, #364]	; (27b8 <udi_cdc_tx_send+0x23c>)
    264c:	4798      	blx	r3
			return;
    264e:	e09c      	b.n	278a <udi_cdc_tx_send+0x20e>
		}
	}
	sof_zlp_counter = 0;
    2650:	4b57      	ldr	r3, [pc, #348]	; (27b0 <udi_cdc_tx_send+0x234>)
    2652:	2200      	movs	r2, #0
    2654:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    2656:	1c3b      	adds	r3, r7, #0
    2658:	3315      	adds	r3, #21
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	4a57      	ldr	r2, [pc, #348]	; (27bc <udi_cdc_tx_send+0x240>)
    265e:	5cd3      	ldrb	r3, [r2, r3]
    2660:	b2db      	uxtb	r3, r3
    2662:	2201      	movs	r2, #1
    2664:	4053      	eors	r3, r2
    2666:	b2db      	uxtb	r3, r3
    2668:	2b00      	cmp	r3, #0
    266a:	d00c      	beq.n	2686 <udi_cdc_tx_send+0x10a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    266c:	1c3b      	adds	r3, r7, #0
    266e:	3315      	adds	r3, #21
    2670:	781b      	ldrb	r3, [r3, #0]
    2672:	1c3a      	adds	r2, r7, #0
    2674:	3217      	adds	r2, #23
    2676:	7812      	ldrb	r2, [r2, #0]
    2678:	4251      	negs	r1, r2
    267a:	414a      	adcs	r2, r1
    267c:	b2d2      	uxtb	r2, r2
    267e:	1c11      	adds	r1, r2, #0
    2680:	4a49      	ldr	r2, [pc, #292]	; (27a8 <udi_cdc_tx_send+0x22c>)
    2682:	54d1      	strb	r1, [r2, r3]
    2684:	e008      	b.n	2698 <udi_cdc_tx_send+0x11c>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    2686:	1c3b      	adds	r3, r7, #0
    2688:	3317      	adds	r3, #23
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	425a      	negs	r2, r3
    268e:	4153      	adcs	r3, r2
    2690:	b2da      	uxtb	r2, r3
    2692:	1c3b      	adds	r3, r7, #0
    2694:	3317      	adds	r3, #23
    2696:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    2698:	1c3b      	adds	r3, r7, #0
    269a:	3315      	adds	r3, #21
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	4a3c      	ldr	r2, [pc, #240]	; (2790 <udi_cdc_tx_send+0x214>)
    26a0:	2101      	movs	r1, #1
    26a2:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    26a4:	693b      	ldr	r3, [r7, #16]
    26a6:	1c18      	adds	r0, r3, #0
    26a8:	4b43      	ldr	r3, [pc, #268]	; (27b8 <udi_cdc_tx_send+0x23c>)
    26aa:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    26ac:	1c3b      	adds	r3, r7, #0
    26ae:	3315      	adds	r3, #21
    26b0:	7819      	ldrb	r1, [r3, #0]
    26b2:	1c3b      	adds	r3, r7, #0
    26b4:	3317      	adds	r3, #23
    26b6:	781a      	ldrb	r2, [r3, #0]
    26b8:	4b3c      	ldr	r3, [pc, #240]	; (27ac <udi_cdc_tx_send+0x230>)
    26ba:	0049      	lsls	r1, r1, #1
    26bc:	188a      	adds	r2, r1, r2
    26be:	0052      	lsls	r2, r2, #1
    26c0:	5ad2      	ldrh	r2, [r2, r3]
    26c2:	1c3b      	adds	r3, r7, #0
    26c4:	330f      	adds	r3, #15
    26c6:	3a41      	subs	r2, #65	; 0x41
    26c8:	3aff      	subs	r2, #255	; 0xff
    26ca:	1e51      	subs	r1, r2, #1
    26cc:	418a      	sbcs	r2, r1
    26ce:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    26d0:	1c3b      	adds	r3, r7, #0
    26d2:	330f      	adds	r3, #15
    26d4:	781b      	ldrb	r3, [r3, #0]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d01a      	beq.n	2710 <udi_cdc_tx_send+0x194>
		if (udd_is_high_speed()) {
    26da:	4b2e      	ldr	r3, [pc, #184]	; (2794 <udi_cdc_tx_send+0x218>)
    26dc:	4798      	blx	r3
    26de:	1c03      	adds	r3, r0, #0
    26e0:	2b00      	cmp	r3, #0
    26e2:	d00a      	beq.n	26fa <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    26e4:	1c3b      	adds	r3, r7, #0
    26e6:	3315      	adds	r3, #21
    26e8:	781c      	ldrb	r4, [r3, #0]
    26ea:	4b2c      	ldr	r3, [pc, #176]	; (279c <udi_cdc_tx_send+0x220>)
    26ec:	4798      	blx	r3
    26ee:	1c03      	adds	r3, r0, #0
    26f0:	1c19      	adds	r1, r3, #0
    26f2:	4b29      	ldr	r3, [pc, #164]	; (2798 <udi_cdc_tx_send+0x21c>)
    26f4:	0062      	lsls	r2, r4, #1
    26f6:	52d1      	strh	r1, [r2, r3]
    26f8:	e011      	b.n	271e <udi_cdc_tx_send+0x1a2>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    26fa:	1c3b      	adds	r3, r7, #0
    26fc:	3315      	adds	r3, #21
    26fe:	781c      	ldrb	r4, [r3, #0]
    2700:	4b27      	ldr	r3, [pc, #156]	; (27a0 <udi_cdc_tx_send+0x224>)
    2702:	4798      	blx	r3
    2704:	1c03      	adds	r3, r0, #0
    2706:	1c19      	adds	r1, r3, #0
    2708:	4b23      	ldr	r3, [pc, #140]	; (2798 <udi_cdc_tx_send+0x21c>)
    270a:	0062      	lsls	r2, r4, #1
    270c:	52d1      	strh	r1, [r2, r3]
    270e:	e006      	b.n	271e <udi_cdc_tx_send+0x1a2>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    2710:	1c3b      	adds	r3, r7, #0
    2712:	3315      	adds	r3, #21
    2714:	781a      	ldrb	r2, [r3, #0]
    2716:	4b20      	ldr	r3, [pc, #128]	; (2798 <udi_cdc_tx_send+0x21c>)
    2718:	0052      	lsls	r2, r2, #1
    271a:	2100      	movs	r1, #0
    271c:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    271e:	1c3b      	adds	r3, r7, #0
    2720:	3315      	adds	r3, #21
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	2b00      	cmp	r3, #0
    2726:	d104      	bne.n	2732 <udi_cdc_tx_send+0x1b6>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    2728:	1c3b      	adds	r3, r7, #0
    272a:	3316      	adds	r3, #22
    272c:	2286      	movs	r2, #134	; 0x86
    272e:	701a      	strb	r2, [r3, #0]
    2730:	e004      	b.n	273c <udi_cdc_tx_send+0x1c0>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    2732:	1c3b      	adds	r3, r7, #0
    2734:	3316      	adds	r3, #22
    2736:	2286      	movs	r2, #134	; 0x86
    2738:	701a      	strb	r2, [r3, #0]
		break;
    273a:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    273c:	1c3b      	adds	r3, r7, #0
    273e:	3315      	adds	r3, #21
    2740:	7819      	ldrb	r1, [r3, #0]
    2742:	1c3b      	adds	r3, r7, #0
    2744:	3317      	adds	r3, #23
    2746:	781b      	ldrb	r3, [r3, #0]
    2748:	1c1a      	adds	r2, r3, #0
    274a:	0092      	lsls	r2, r2, #2
    274c:	18d2      	adds	r2, r2, r3
    274e:	0193      	lsls	r3, r2, #6
    2750:	1c1a      	adds	r2, r3, #0
    2752:	1c0b      	adds	r3, r1, #0
    2754:	009b      	lsls	r3, r3, #2
    2756:	185b      	adds	r3, r3, r1
    2758:	01db      	lsls	r3, r3, #7
    275a:	18d2      	adds	r2, r2, r3
    275c:	4b18      	ldr	r3, [pc, #96]	; (27c0 <udi_cdc_tx_send+0x244>)
    275e:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    2760:	1c3b      	adds	r3, r7, #0
    2762:	3315      	adds	r3, #21
    2764:	7818      	ldrb	r0, [r3, #0]
    2766:	1c3b      	adds	r3, r7, #0
    2768:	3317      	adds	r3, #23
    276a:	7819      	ldrb	r1, [r3, #0]
    276c:	4b0f      	ldr	r3, [pc, #60]	; (27ac <udi_cdc_tx_send+0x230>)
    276e:	0040      	lsls	r0, r0, #1
    2770:	1841      	adds	r1, r0, r1
    2772:	0049      	lsls	r1, r1, #1
    2774:	5acb      	ldrh	r3, [r1, r3]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    2776:	1c39      	adds	r1, r7, #0
    2778:	3116      	adds	r1, #22
    277a:	7808      	ldrb	r0, [r1, #0]
    277c:	1c39      	adds	r1, r7, #0
    277e:	310f      	adds	r1, #15
    2780:	7809      	ldrb	r1, [r1, #0]
    2782:	4c10      	ldr	r4, [pc, #64]	; (27c4 <udi_cdc_tx_send+0x248>)
    2784:	9400      	str	r4, [sp, #0]
    2786:	4c10      	ldr	r4, [pc, #64]	; (27c8 <udi_cdc_tx_send+0x24c>)
    2788:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    278a:	46bd      	mov	sp, r7
    278c:	b007      	add	sp, #28
    278e:	bd90      	pop	{r4, r7, pc}
    2790:	20000ef4 	.word	0x20000ef4
    2794:	0000707d 	.word	0x0000707d
    2798:	20000ef0 	.word	0x20000ef0
    279c:	000070a5 	.word	0x000070a5
    27a0:	00007089 	.word	0x00007089
    27a4:	00001b65 	.word	0x00001b65
    27a8:	20000eec 	.word	0x20000eec
    27ac:	20000ee8 	.word	0x20000ee8
    27b0:	20000efe 	.word	0x20000efe
    27b4:	0000031f 	.word	0x0000031f
    27b8:	00001bad 	.word	0x00001bad
    27bc:	20000ef8 	.word	0x20000ef8
    27c0:	20000c68 	.word	0x20000c68
    27c4:	000024e1 	.word	0x000024e1
    27c8:	00007425 	.word	0x00007425

000027cc <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	af00      	add	r7, sp, #0
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    27d0:	2000      	movs	r0, #0
    27d2:	2101      	movs	r1, #1
    27d4:	2240      	movs	r2, #64	; 0x40
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <udi_cdc_signal_overrun+0x14>)
    27d8:	4798      	blx	r3
}
    27da:	46bd      	mov	sp, r7
    27dc:	bd80      	pop	{r7, pc}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	0000205d 	.word	0x0000205d

000027e4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	b086      	sub	sp, #24
    27e8:	af00      	add	r7, sp, #0
    27ea:	1c02      	adds	r2, r0, #0
    27ec:	1dfb      	adds	r3, r7, #7
    27ee:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    27f0:	1c3b      	adds	r3, r7, #0
    27f2:	3317      	adds	r3, #23
    27f4:	2200      	movs	r2, #0
    27f6:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    27f8:	4b15      	ldr	r3, [pc, #84]	; (2850 <udi_cdc_multi_get_nb_received_data+0x6c>)
    27fa:	4798      	blx	r3
    27fc:	1c03      	adds	r3, r0, #0
    27fe:	613b      	str	r3, [r7, #16]
	pos = udi_cdc_rx_pos[port];
    2800:	1c3b      	adds	r3, r7, #0
    2802:	3317      	adds	r3, #23
    2804:	7819      	ldrb	r1, [r3, #0]
    2806:	1c3b      	adds	r3, r7, #0
    2808:	330e      	adds	r3, #14
    280a:	4a12      	ldr	r2, [pc, #72]	; (2854 <udi_cdc_multi_get_nb_received_data+0x70>)
    280c:	0049      	lsls	r1, r1, #1
    280e:	5a8a      	ldrh	r2, [r1, r2]
    2810:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    2812:	1c3b      	adds	r3, r7, #0
    2814:	3317      	adds	r3, #23
    2816:	7819      	ldrb	r1, [r3, #0]
    2818:	1c3b      	adds	r3, r7, #0
    281a:	3317      	adds	r3, #23
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	4a0e      	ldr	r2, [pc, #56]	; (2858 <udi_cdc_multi_get_nb_received_data+0x74>)
    2820:	5cd3      	ldrb	r3, [r2, r3]
    2822:	b2db      	uxtb	r3, r3
    2824:	1c1a      	adds	r2, r3, #0
    2826:	4b0d      	ldr	r3, [pc, #52]	; (285c <udi_cdc_multi_get_nb_received_data+0x78>)
    2828:	0049      	lsls	r1, r1, #1
    282a:	188a      	adds	r2, r1, r2
    282c:	0052      	lsls	r2, r2, #1
    282e:	5ad3      	ldrh	r3, [r2, r3]
    2830:	1c1a      	adds	r2, r3, #0
    2832:	1c3b      	adds	r3, r7, #0
    2834:	330e      	adds	r3, #14
    2836:	881b      	ldrh	r3, [r3, #0]
    2838:	1ad3      	subs	r3, r2, r3
    283a:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	1c18      	adds	r0, r3, #0
    2840:	4b07      	ldr	r3, [pc, #28]	; (2860 <udi_cdc_multi_get_nb_received_data+0x7c>)
    2842:	4798      	blx	r3
	return nb_received;
    2844:	68bb      	ldr	r3, [r7, #8]
}
    2846:	1c18      	adds	r0, r3, #0
    2848:	46bd      	mov	sp, r7
    284a:	b006      	add	sp, #24
    284c:	bd80      	pop	{r7, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	00001b65 	.word	0x00001b65
    2854:	20000c60 	.word	0x20000c60
    2858:	20000c5c 	.word	0x20000c5c
    285c:	20000c58 	.word	0x20000c58
    2860:	00001bad 	.word	0x00001bad

00002864 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    2864:	b580      	push	{r7, lr}
    2866:	b082      	sub	sp, #8
    2868:	af00      	add	r7, sp, #0
    286a:	1c02      	adds	r2, r0, #0
    286c:	1dfb      	adds	r3, r7, #7
    286e:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    2870:	1dfb      	adds	r3, r7, #7
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	1c18      	adds	r0, r3, #0
    2876:	4b05      	ldr	r3, [pc, #20]	; (288c <udi_cdc_multi_is_rx_ready+0x28>)
    2878:	4798      	blx	r3
    287a:	1c03      	adds	r3, r0, #0
    287c:	1e5a      	subs	r2, r3, #1
    287e:	4193      	sbcs	r3, r2
    2880:	b2db      	uxtb	r3, r3
}
    2882:	1c18      	adds	r0, r3, #0
    2884:	46bd      	mov	sp, r7
    2886:	b002      	add	sp, #8
    2888:	bd80      	pop	{r7, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	000027e5 	.word	0x000027e5

00002890 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
    2890:	b580      	push	{r7, lr}
    2892:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
    2894:	2000      	movs	r0, #0
    2896:	4b03      	ldr	r3, [pc, #12]	; (28a4 <udi_cdc_is_rx_ready+0x14>)
    2898:	4798      	blx	r3
    289a:	1c03      	adds	r3, r0, #0
}
    289c:	1c18      	adds	r0, r3, #0
    289e:	46bd      	mov	sp, r7
    28a0:	bd80      	pop	{r7, pc}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	00002865 	.word	0x00002865

000028a8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    28a8:	b590      	push	{r4, r7, lr}
    28aa:	b087      	sub	sp, #28
    28ac:	af00      	add	r7, sp, #0
    28ae:	1c02      	adds	r2, r0, #0
    28b0:	1dfb      	adds	r3, r7, #7
    28b2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    28b4:	2300      	movs	r3, #0
    28b6:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    28b8:	1c3b      	adds	r3, r7, #0
    28ba:	3312      	adds	r3, #18
    28bc:	2200      	movs	r2, #0
    28be:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    28c0:	1c3b      	adds	r3, r7, #0
    28c2:	3312      	adds	r3, #18
    28c4:	781a      	ldrb	r2, [r3, #0]
    28c6:	4941      	ldr	r1, [pc, #260]	; (29cc <udi_cdc_multi_getc+0x124>)
    28c8:	1c13      	adds	r3, r2, #0
    28ca:	00db      	lsls	r3, r3, #3
    28cc:	1a9b      	subs	r3, r3, r2
    28ce:	18cb      	adds	r3, r1, r3
    28d0:	799a      	ldrb	r2, [r3, #6]
    28d2:	1c3b      	adds	r3, r7, #0
    28d4:	3313      	adds	r3, #19
    28d6:	3a09      	subs	r2, #9
    28d8:	4251      	negs	r1, r2
    28da:	414a      	adcs	r2, r1
    28dc:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    28de:	4b3c      	ldr	r3, [pc, #240]	; (29d0 <udi_cdc_multi_getc+0x128>)
    28e0:	4798      	blx	r3
    28e2:	1c03      	adds	r3, r0, #0
    28e4:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    28e6:	1c3b      	adds	r3, r7, #0
    28e8:	3312      	adds	r3, #18
    28ea:	7819      	ldrb	r1, [r3, #0]
    28ec:	1c3b      	adds	r3, r7, #0
    28ee:	330a      	adds	r3, #10
    28f0:	4a38      	ldr	r2, [pc, #224]	; (29d4 <udi_cdc_multi_getc+0x12c>)
    28f2:	0049      	lsls	r1, r1, #1
    28f4:	5a8a      	ldrh	r2, [r1, r2]
    28f6:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    28f8:	1c3b      	adds	r3, r7, #0
    28fa:	3312      	adds	r3, #18
    28fc:	781a      	ldrb	r2, [r3, #0]
    28fe:	1c3b      	adds	r3, r7, #0
    2900:	3309      	adds	r3, #9
    2902:	4935      	ldr	r1, [pc, #212]	; (29d8 <udi_cdc_multi_getc+0x130>)
    2904:	5c8a      	ldrb	r2, [r1, r2]
    2906:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
    2908:	68fb      	ldr	r3, [r7, #12]
    290a:	1c18      	adds	r0, r3, #0
    290c:	4b33      	ldr	r3, [pc, #204]	; (29dc <udi_cdc_multi_getc+0x134>)
    290e:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
    2910:	46c0      	nop			; (mov r8, r8)
    2912:	1c3b      	adds	r3, r7, #0
    2914:	3312      	adds	r3, #18
    2916:	7819      	ldrb	r1, [r3, #0]
    2918:	1c3b      	adds	r3, r7, #0
    291a:	3309      	adds	r3, #9
    291c:	781a      	ldrb	r2, [r3, #0]
    291e:	4b30      	ldr	r3, [pc, #192]	; (29e0 <udi_cdc_multi_getc+0x138>)
    2920:	0049      	lsls	r1, r1, #1
    2922:	188a      	adds	r2, r1, r2
    2924:	0052      	lsls	r2, r2, #1
    2926:	5ad3      	ldrh	r3, [r2, r3]
    2928:	1c3a      	adds	r2, r7, #0
    292a:	320a      	adds	r2, #10
    292c:	8812      	ldrh	r2, [r2, #0]
    292e:	429a      	cmp	r2, r3
    2930:	d310      	bcc.n	2954 <udi_cdc_multi_getc+0xac>
		if (!udi_cdc_data_running) {
    2932:	4b2c      	ldr	r3, [pc, #176]	; (29e4 <udi_cdc_multi_getc+0x13c>)
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	b2db      	uxtb	r3, r3
    2938:	2201      	movs	r2, #1
    293a:	4053      	eors	r3, r2
    293c:	b2db      	uxtb	r3, r3
    293e:	2b00      	cmp	r3, #0
    2940:	d001      	beq.n	2946 <udi_cdc_multi_getc+0x9e>
			return 0;
    2942:	2300      	movs	r3, #0
    2944:	e03e      	b.n	29c4 <udi_cdc_multi_getc+0x11c>
    2946:	1c3b      	adds	r3, r7, #0
    2948:	3313      	adds	r3, #19
    294a:	1c3a      	adds	r2, r7, #0
    294c:	3213      	adds	r2, #19
    294e:	7812      	ldrb	r2, [r2, #0]
    2950:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    2952:	e7c4      	b.n	28de <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    2954:	1c3b      	adds	r3, r7, #0
    2956:	3312      	adds	r3, #18
    2958:	7819      	ldrb	r1, [r3, #0]
    295a:	1c3b      	adds	r3, r7, #0
    295c:	3309      	adds	r3, #9
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	1c3a      	adds	r2, r7, #0
    2962:	320a      	adds	r2, #10
    2964:	8810      	ldrh	r0, [r2, #0]
    2966:	4c20      	ldr	r4, [pc, #128]	; (29e8 <udi_cdc_multi_getc+0x140>)
    2968:	1c1a      	adds	r2, r3, #0
    296a:	0092      	lsls	r2, r2, #2
    296c:	18d2      	adds	r2, r2, r3
    296e:	0193      	lsls	r3, r2, #6
    2970:	1c1a      	adds	r2, r3, #0
    2972:	1c0b      	adds	r3, r1, #0
    2974:	009b      	lsls	r3, r3, #2
    2976:	185b      	adds	r3, r3, r1
    2978:	01db      	lsls	r3, r3, #7
    297a:	18d3      	adds	r3, r2, r3
    297c:	18e3      	adds	r3, r4, r3
    297e:	5c1b      	ldrb	r3, [r3, r0]
    2980:	697a      	ldr	r2, [r7, #20]
    2982:	4313      	orrs	r3, r2
    2984:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    2986:	1c3b      	adds	r3, r7, #0
    2988:	3312      	adds	r3, #18
    298a:	781a      	ldrb	r2, [r3, #0]
    298c:	1c3b      	adds	r3, r7, #0
    298e:	330a      	adds	r3, #10
    2990:	881b      	ldrh	r3, [r3, #0]
    2992:	3301      	adds	r3, #1
    2994:	b299      	uxth	r1, r3
    2996:	4b0f      	ldr	r3, [pc, #60]	; (29d4 <udi_cdc_multi_getc+0x12c>)
    2998:	0052      	lsls	r2, r2, #1
    299a:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    299c:	1c3b      	adds	r3, r7, #0
    299e:	3312      	adds	r3, #18
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	1c18      	adds	r0, r3, #0
    29a4:	4b11      	ldr	r3, [pc, #68]	; (29ec <udi_cdc_multi_getc+0x144>)
    29a6:	4798      	blx	r3

	if (b_databit_9) {
    29a8:	1c3b      	adds	r3, r7, #0
    29aa:	3313      	adds	r3, #19
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d007      	beq.n	29c2 <udi_cdc_multi_getc+0x11a>
		// Receive MSB
		b_databit_9 = false;
    29b2:	1c3b      	adds	r3, r7, #0
    29b4:	3313      	adds	r3, #19
    29b6:	2200      	movs	r2, #0
    29b8:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    29ba:	697b      	ldr	r3, [r7, #20]
    29bc:	021b      	lsls	r3, r3, #8
    29be:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    29c0:	e78d      	b.n	28de <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    29c2:	697b      	ldr	r3, [r7, #20]
}
    29c4:	1c18      	adds	r0, r3, #0
    29c6:	46bd      	mov	sp, r7
    29c8:	b007      	add	sp, #28
    29ca:	bd90      	pop	{r4, r7, pc}
    29cc:	200009b8 	.word	0x200009b8
    29d0:	00001b65 	.word	0x00001b65
    29d4:	20000c60 	.word	0x20000c60
    29d8:	20000c5c 	.word	0x20000c5c
    29dc:	00001bad 	.word	0x00001bad
    29e0:	20000c58 	.word	0x20000c58
    29e4:	200009d6 	.word	0x200009d6
    29e8:	200009d8 	.word	0x200009d8
    29ec:	000022a5 	.word	0x000022a5

000029f0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
    29f4:	2000      	movs	r0, #0
    29f6:	4b03      	ldr	r3, [pc, #12]	; (2a04 <udi_cdc_getc+0x14>)
    29f8:	4798      	blx	r3
    29fa:	1c03      	adds	r3, r0, #0
}
    29fc:	1c18      	adds	r0, r3, #0
    29fe:	46bd      	mov	sp, r7
    2a00:	bd80      	pop	{r7, pc}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	000028a9 	.word	0x000028a9

00002a08 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    2a08:	b580      	push	{r7, lr}
    2a0a:	b088      	sub	sp, #32
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	1c02      	adds	r2, r0, #0
    2a10:	1dfb      	adds	r3, r7, #7
    2a12:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2a14:	1c3b      	adds	r3, r7, #0
    2a16:	331b      	adds	r3, #27
    2a18:	2200      	movs	r2, #0
    2a1a:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    2a1c:	4b33      	ldr	r3, [pc, #204]	; (2aec <udi_cdc_multi_get_free_tx_buffer+0xe4>)
    2a1e:	4798      	blx	r3
    2a20:	1c03      	adds	r3, r0, #0
    2a22:	617b      	str	r3, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
    2a24:	1c3b      	adds	r3, r7, #0
    2a26:	331b      	adds	r3, #27
    2a28:	781a      	ldrb	r2, [r3, #0]
    2a2a:	1c3b      	adds	r3, r7, #0
    2a2c:	3313      	adds	r3, #19
    2a2e:	4930      	ldr	r1, [pc, #192]	; (2af0 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    2a30:	5c8a      	ldrb	r2, [r1, r2]
    2a32:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    2a34:	1c3b      	adds	r3, r7, #0
    2a36:	331b      	adds	r3, #27
    2a38:	7819      	ldrb	r1, [r3, #0]
    2a3a:	1c3b      	adds	r3, r7, #0
    2a3c:	3313      	adds	r3, #19
    2a3e:	781a      	ldrb	r2, [r3, #0]
    2a40:	4b2c      	ldr	r3, [pc, #176]	; (2af4 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2a42:	0049      	lsls	r1, r1, #1
    2a44:	188a      	adds	r2, r1, r2
    2a46:	0052      	lsls	r2, r2, #1
    2a48:	5ad3      	ldrh	r3, [r2, r3]
    2a4a:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
    2a4c:	1c3b      	adds	r3, r7, #0
    2a4e:	331b      	adds	r3, #27
    2a50:	7819      	ldrb	r1, [r3, #0]
    2a52:	1c3b      	adds	r3, r7, #0
    2a54:	3313      	adds	r3, #19
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	425a      	negs	r2, r3
    2a5a:	4153      	adcs	r3, r2
    2a5c:	b2db      	uxtb	r3, r3
    2a5e:	1c1a      	adds	r2, r3, #0
    2a60:	4b24      	ldr	r3, [pc, #144]	; (2af4 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    2a62:	0049      	lsls	r1, r1, #1
    2a64:	188a      	adds	r2, r1, r2
    2a66:	0052      	lsls	r2, r2, #1
    2a68:	5ad3      	ldrh	r3, [r2, r3]
    2a6a:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    2a6c:	69fa      	ldr	r2, [r7, #28]
    2a6e:	23a0      	movs	r3, #160	; 0xa0
    2a70:	005b      	lsls	r3, r3, #1
    2a72:	429a      	cmp	r2, r3
    2a74:	d12c      	bne.n	2ad0 <udi_cdc_multi_get_free_tx_buffer+0xc8>
		if ((!udi_cdc_tx_trans_ongoing[port])
    2a76:	1c3b      	adds	r3, r7, #0
    2a78:	331b      	adds	r3, #27
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	4a1e      	ldr	r2, [pc, #120]	; (2af8 <udi_cdc_multi_get_free_tx_buffer+0xf0>)
    2a7e:	5cd3      	ldrb	r3, [r2, r3]
    2a80:	b2db      	uxtb	r3, r3
    2a82:	2201      	movs	r2, #1
    2a84:	4053      	eors	r3, r2
    2a86:	b2db      	uxtb	r3, r3
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d021      	beq.n	2ad0 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    2a8c:	1c3b      	adds	r3, r7, #0
    2a8e:	331b      	adds	r3, #27
    2a90:	781b      	ldrb	r3, [r3, #0]
    2a92:	4a1a      	ldr	r2, [pc, #104]	; (2afc <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    2a94:	5cd3      	ldrb	r3, [r2, r3]
    2a96:	b2db      	uxtb	r3, r3
    2a98:	2201      	movs	r2, #1
    2a9a:	4053      	eors	r3, r2
    2a9c:	b2db      	uxtb	r3, r3
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d016      	beq.n	2ad0 <udi_cdc_multi_get_free_tx_buffer+0xc8>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    2aa2:	1c3b      	adds	r3, r7, #0
    2aa4:	331b      	adds	r3, #27
    2aa6:	781b      	ldrb	r3, [r3, #0]
    2aa8:	4a14      	ldr	r2, [pc, #80]	; (2afc <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    2aaa:	2101      	movs	r1, #1
    2aac:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    2aae:	1c3b      	adds	r3, r7, #0
    2ab0:	331b      	adds	r3, #27
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	1c3a      	adds	r2, r7, #0
    2ab6:	3213      	adds	r2, #19
    2ab8:	7812      	ldrb	r2, [r2, #0]
    2aba:	4251      	negs	r1, r2
    2abc:	414a      	adcs	r2, r1
    2abe:	b2d2      	uxtb	r2, r2
    2ac0:	1c11      	adds	r1, r2, #0
    2ac2:	4a0b      	ldr	r2, [pc, #44]	; (2af0 <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    2ac4:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    2ac6:	2300      	movs	r3, #0
    2ac8:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
    2aca:	23a0      	movs	r3, #160	; 0xa0
    2acc:	005b      	lsls	r3, r3, #1
    2ace:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    2ad0:	69fb      	ldr	r3, [r7, #28]
    2ad2:	22a0      	movs	r2, #160	; 0xa0
    2ad4:	0052      	lsls	r2, r2, #1
    2ad6:	1ad3      	subs	r3, r2, r3
    2ad8:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    2ada:	697b      	ldr	r3, [r7, #20]
    2adc:	1c18      	adds	r0, r3, #0
    2ade:	4b08      	ldr	r3, [pc, #32]	; (2b00 <udi_cdc_multi_get_free_tx_buffer+0xf8>)
    2ae0:	4798      	blx	r3
	return retval;
    2ae2:	68bb      	ldr	r3, [r7, #8]
}
    2ae4:	1c18      	adds	r0, r3, #0
    2ae6:	46bd      	mov	sp, r7
    2ae8:	b008      	add	sp, #32
    2aea:	bd80      	pop	{r7, pc}
    2aec:	00001b65 	.word	0x00001b65
    2af0:	20000eec 	.word	0x20000eec
    2af4:	20000ee8 	.word	0x20000ee8
    2af8:	20000ef4 	.word	0x20000ef4
    2afc:	20000ef8 	.word	0x20000ef8
    2b00:	00001bad 	.word	0x00001bad

00002b04 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    2b04:	b580      	push	{r7, lr}
    2b06:	b082      	sub	sp, #8
    2b08:	af00      	add	r7, sp, #0
    2b0a:	1c02      	adds	r2, r0, #0
    2b0c:	1dfb      	adds	r3, r7, #7
    2b0e:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    2b10:	1dfb      	adds	r3, r7, #7
    2b12:	781b      	ldrb	r3, [r3, #0]
    2b14:	1c18      	adds	r0, r3, #0
    2b16:	4b05      	ldr	r3, [pc, #20]	; (2b2c <udi_cdc_multi_is_tx_ready+0x28>)
    2b18:	4798      	blx	r3
    2b1a:	1c03      	adds	r3, r0, #0
    2b1c:	1e5a      	subs	r2, r3, #1
    2b1e:	4193      	sbcs	r3, r2
    2b20:	b2db      	uxtb	r3, r3
}
    2b22:	1c18      	adds	r0, r3, #0
    2b24:	46bd      	mov	sp, r7
    2b26:	b002      	add	sp, #8
    2b28:	bd80      	pop	{r7, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00002a09 	.word	0x00002a09

00002b30 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
    2b34:	2000      	movs	r0, #0
    2b36:	4b03      	ldr	r3, [pc, #12]	; (2b44 <udi_cdc_is_tx_ready+0x14>)
    2b38:	4798      	blx	r3
    2b3a:	1c03      	adds	r3, r0, #0
}
    2b3c:	1c18      	adds	r0, r3, #0
    2b3e:	46bd      	mov	sp, r7
    2b40:	bd80      	pop	{r7, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	00002b05 	.word	0x00002b05

00002b48 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4a:	b087      	sub	sp, #28
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	1c02      	adds	r2, r0, #0
    2b50:	6039      	str	r1, [r7, #0]
    2b52:	1dfb      	adds	r3, r7, #7
    2b54:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2b56:	1c3b      	adds	r3, r7, #0
    2b58:	3316      	adds	r3, #22
    2b5a:	2200      	movs	r2, #0
    2b5c:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2b5e:	1c3b      	adds	r3, r7, #0
    2b60:	3316      	adds	r3, #22
    2b62:	781a      	ldrb	r2, [r3, #0]
    2b64:	493a      	ldr	r1, [pc, #232]	; (2c50 <udi_cdc_multi_putc+0x108>)
    2b66:	1c13      	adds	r3, r2, #0
    2b68:	00db      	lsls	r3, r3, #3
    2b6a:	1a9b      	subs	r3, r3, r2
    2b6c:	18cb      	adds	r3, r1, r3
    2b6e:	799a      	ldrb	r2, [r3, #6]
    2b70:	1c3b      	adds	r3, r7, #0
    2b72:	3317      	adds	r3, #23
    2b74:	3a09      	subs	r2, #9
    2b76:	4251      	negs	r1, r2
    2b78:	414a      	adcs	r2, r1
    2b7a:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    2b7c:	1c3b      	adds	r3, r7, #0
    2b7e:	3316      	adds	r3, #22
    2b80:	781b      	ldrb	r3, [r3, #0]
    2b82:	1c18      	adds	r0, r3, #0
    2b84:	4b33      	ldr	r3, [pc, #204]	; (2c54 <udi_cdc_multi_putc+0x10c>)
    2b86:	4798      	blx	r3
    2b88:	1c03      	adds	r3, r0, #0
    2b8a:	2201      	movs	r2, #1
    2b8c:	4053      	eors	r3, r2
    2b8e:	b2db      	uxtb	r3, r3
    2b90:	2b00      	cmp	r3, #0
    2b92:	d010      	beq.n	2bb6 <udi_cdc_multi_putc+0x6e>
		if (!udi_cdc_data_running) {
    2b94:	4b30      	ldr	r3, [pc, #192]	; (2c58 <udi_cdc_multi_putc+0x110>)
    2b96:	781b      	ldrb	r3, [r3, #0]
    2b98:	b2db      	uxtb	r3, r3
    2b9a:	2201      	movs	r2, #1
    2b9c:	4053      	eors	r3, r2
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d001      	beq.n	2ba8 <udi_cdc_multi_putc+0x60>
			return false;
    2ba4:	2300      	movs	r3, #0
    2ba6:	e04e      	b.n	2c46 <udi_cdc_multi_putc+0xfe>
    2ba8:	1c3b      	adds	r3, r7, #0
    2baa:	3317      	adds	r3, #23
    2bac:	1c3a      	adds	r2, r7, #0
    2bae:	3217      	adds	r2, #23
    2bb0:	7812      	ldrb	r2, [r2, #0]
    2bb2:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    2bb4:	e7e2      	b.n	2b7c <udi_cdc_multi_putc+0x34>
	}

	// Write value
	flags = cpu_irq_save();
    2bb6:	4b29      	ldr	r3, [pc, #164]	; (2c5c <udi_cdc_multi_putc+0x114>)
    2bb8:	4798      	blx	r3
    2bba:	1c03      	adds	r3, r0, #0
    2bbc:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    2bbe:	1c3b      	adds	r3, r7, #0
    2bc0:	3316      	adds	r3, #22
    2bc2:	781a      	ldrb	r2, [r3, #0]
    2bc4:	1c3b      	adds	r3, r7, #0
    2bc6:	330f      	adds	r3, #15
    2bc8:	4925      	ldr	r1, [pc, #148]	; (2c60 <udi_cdc_multi_putc+0x118>)
    2bca:	5c8a      	ldrb	r2, [r1, r2]
    2bcc:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    2bce:	1c3b      	adds	r3, r7, #0
    2bd0:	3316      	adds	r3, #22
    2bd2:	7819      	ldrb	r1, [r3, #0]
    2bd4:	1c3b      	adds	r3, r7, #0
    2bd6:	330f      	adds	r3, #15
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	1c3a      	adds	r2, r7, #0
    2bdc:	3216      	adds	r2, #22
    2bde:	7814      	ldrb	r4, [r2, #0]
    2be0:	1c3a      	adds	r2, r7, #0
    2be2:	320f      	adds	r2, #15
    2be4:	7810      	ldrb	r0, [r2, #0]
    2be6:	4a1f      	ldr	r2, [pc, #124]	; (2c64 <udi_cdc_multi_putc+0x11c>)
    2be8:	0065      	lsls	r5, r4, #1
    2bea:	182d      	adds	r5, r5, r0
    2bec:	006d      	lsls	r5, r5, #1
    2bee:	5aaa      	ldrh	r2, [r5, r2]
    2bf0:	1c55      	adds	r5, r2, #1
    2bf2:	b2ae      	uxth	r6, r5
    2bf4:	4d1b      	ldr	r5, [pc, #108]	; (2c64 <udi_cdc_multi_putc+0x11c>)
    2bf6:	0064      	lsls	r4, r4, #1
    2bf8:	1820      	adds	r0, r4, r0
    2bfa:	0040      	lsls	r0, r0, #1
    2bfc:	1c34      	adds	r4, r6, #0
    2bfe:	5344      	strh	r4, [r0, r5]
    2c00:	1c10      	adds	r0, r2, #0
    2c02:	683a      	ldr	r2, [r7, #0]
    2c04:	b2d4      	uxtb	r4, r2
    2c06:	4d18      	ldr	r5, [pc, #96]	; (2c68 <udi_cdc_multi_putc+0x120>)
    2c08:	1c1a      	adds	r2, r3, #0
    2c0a:	0092      	lsls	r2, r2, #2
    2c0c:	18d2      	adds	r2, r2, r3
    2c0e:	0193      	lsls	r3, r2, #6
    2c10:	1c1a      	adds	r2, r3, #0
    2c12:	1c0b      	adds	r3, r1, #0
    2c14:	009b      	lsls	r3, r3, #2
    2c16:	185b      	adds	r3, r3, r1
    2c18:	01db      	lsls	r3, r3, #7
    2c1a:	18d3      	adds	r3, r2, r3
    2c1c:	18eb      	adds	r3, r5, r3
    2c1e:	1c22      	adds	r2, r4, #0
    2c20:	541a      	strb	r2, [r3, r0]
	cpu_irq_restore(flags);
    2c22:	693b      	ldr	r3, [r7, #16]
    2c24:	1c18      	adds	r0, r3, #0
    2c26:	4b11      	ldr	r3, [pc, #68]	; (2c6c <udi_cdc_multi_putc+0x124>)
    2c28:	4798      	blx	r3

	if (b_databit_9) {
    2c2a:	1c3b      	adds	r3, r7, #0
    2c2c:	3317      	adds	r3, #23
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d007      	beq.n	2c44 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    2c34:	1c3b      	adds	r3, r7, #0
    2c36:	3317      	adds	r3, #23
    2c38:	2200      	movs	r2, #0
    2c3a:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    2c3c:	683b      	ldr	r3, [r7, #0]
    2c3e:	121b      	asrs	r3, r3, #8
    2c40:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    2c42:	e79b      	b.n	2b7c <udi_cdc_multi_putc+0x34>
	}
	return true;
    2c44:	2301      	movs	r3, #1
}
    2c46:	1c18      	adds	r0, r3, #0
    2c48:	46bd      	mov	sp, r7
    2c4a:	b007      	add	sp, #28
    2c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	200009b8 	.word	0x200009b8
    2c54:	00002b05 	.word	0x00002b05
    2c58:	200009d6 	.word	0x200009d6
    2c5c:	00001b65 	.word	0x00001b65
    2c60:	20000eec 	.word	0x20000eec
    2c64:	20000ee8 	.word	0x20000ee8
    2c68:	20000c68 	.word	0x20000c68
    2c6c:	00001bad 	.word	0x00001bad

00002c70 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    2c70:	b580      	push	{r7, lr}
    2c72:	b082      	sub	sp, #8
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	2000      	movs	r0, #0
    2c7c:	1c19      	adds	r1, r3, #0
    2c7e:	4b03      	ldr	r3, [pc, #12]	; (2c8c <udi_cdc_putc+0x1c>)
    2c80:	4798      	blx	r3
    2c82:	1c03      	adds	r3, r0, #0
}
    2c84:	1c18      	adds	r0, r3, #0
    2c86:	46bd      	mov	sp, r7
    2c88:	b002      	add	sp, #8
    2c8a:	bd80      	pop	{r7, pc}
    2c8c:	00002b49 	.word	0x00002b49

00002c90 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2c90:	b580      	push	{r7, lr}
    2c92:	b082      	sub	sp, #8
    2c94:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2c96:	f3ef 8310 	mrs	r3, PRIMASK
    2c9a:	603b      	str	r3, [r7, #0]
  return(result);
    2c9c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    2c9e:	425a      	negs	r2, r3
    2ca0:	4153      	adcs	r3, r2
    2ca2:	b2db      	uxtb	r3, r3
    2ca4:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2ca6:	b672      	cpsid	i
    2ca8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2cac:	4b03      	ldr	r3, [pc, #12]	; (2cbc <cpu_irq_save+0x2c>)
    2cae:	2200      	movs	r2, #0
    2cb0:	701a      	strb	r2, [r3, #0]
	return flags;
    2cb2:	687b      	ldr	r3, [r7, #4]
}
    2cb4:	1c18      	adds	r0, r3, #0
    2cb6:	46bd      	mov	sp, r7
    2cb8:	b002      	add	sp, #8
    2cba:	bd80      	pop	{r7, pc}
    2cbc:	20000254 	.word	0x20000254

00002cc0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
	return (flags);
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	1e5a      	subs	r2, r3, #1
    2ccc:	4193      	sbcs	r3, r2
    2cce:	b2db      	uxtb	r3, r3
}
    2cd0:	1c18      	adds	r0, r3, #0
    2cd2:	46bd      	mov	sp, r7
    2cd4:	b002      	add	sp, #8
    2cd6:	bd80      	pop	{r7, pc}

00002cd8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b082      	sub	sp, #8
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	1c18      	adds	r0, r3, #0
    2ce4:	4b06      	ldr	r3, [pc, #24]	; (2d00 <cpu_irq_restore+0x28>)
    2ce6:	4798      	blx	r3
    2ce8:	1c03      	adds	r3, r0, #0
    2cea:	2b00      	cmp	r3, #0
    2cec:	d005      	beq.n	2cfa <cpu_irq_restore+0x22>
		cpu_irq_enable();
    2cee:	4b05      	ldr	r3, [pc, #20]	; (2d04 <cpu_irq_restore+0x2c>)
    2cf0:	2201      	movs	r2, #1
    2cf2:	701a      	strb	r2, [r3, #0]
    2cf4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2cf8:	b662      	cpsie	i
}
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b002      	add	sp, #8
    2cfe:	bd80      	pop	{r7, pc}
    2d00:	00002cc1 	.word	0x00002cc1
    2d04:	20000254 	.word	0x20000254

00002d08 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
    2d08:	b580      	push	{r7, lr}
    2d0a:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
    2d0c:	4b0b      	ldr	r3, [pc, #44]	; (2d3c <udi_hid_kbd_enable+0x34>)
    2d0e:	2200      	movs	r2, #0
    2d10:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
    2d12:	4b0b      	ldr	r3, [pc, #44]	; (2d40 <udi_hid_kbd_enable+0x38>)
    2d14:	2200      	movs	r2, #0
    2d16:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    2d18:	4b0a      	ldr	r3, [pc, #40]	; (2d44 <udi_hid_kbd_enable+0x3c>)
    2d1a:	2200      	movs	r2, #0
    2d1c:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    2d1e:	4b0a      	ldr	r3, [pc, #40]	; (2d48 <udi_hid_kbd_enable+0x40>)
    2d20:	1c18      	adds	r0, r3, #0
    2d22:	2100      	movs	r1, #0
    2d24:	2208      	movs	r2, #8
    2d26:	4b09      	ldr	r3, [pc, #36]	; (2d4c <udi_hid_kbd_enable+0x44>)
    2d28:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    2d2a:	4b09      	ldr	r3, [pc, #36]	; (2d50 <udi_hid_kbd_enable+0x48>)
    2d2c:	2200      	movs	r2, #0
    2d2e:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    2d30:	4b08      	ldr	r3, [pc, #32]	; (2d54 <udi_hid_kbd_enable+0x4c>)
    2d32:	4798      	blx	r3
    2d34:	1c03      	adds	r3, r0, #0
}
    2d36:	1c18      	adds	r0, r3, #0
    2d38:	46bd      	mov	sp, r7
    2d3a:	bd80      	pop	{r7, pc}
    2d3c:	20000f00 	.word	0x20000f00
    2d40:	20000f04 	.word	0x20000f04
    2d44:	20000f18 	.word	0x20000f18
    2d48:	20000f10 	.word	0x20000f10
    2d4c:	0000ab3b 	.word	0x0000ab3b
    2d50:	20000f0c 	.word	0x20000f0c
    2d54:	0000a2c1 	.word	0x0000a2c1

00002d58 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
    2d58:	b580      	push	{r7, lr}
    2d5a:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
    2d5c:	4b01      	ldr	r3, [pc, #4]	; (2d64 <udi_hid_kbd_disable+0xc>)
    2d5e:	4798      	blx	r3
}
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}
    2d64:	0000a2d9 	.word	0x0000a2d9

00002d68 <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
    2d68:	b598      	push	{r3, r4, r7, lr}
    2d6a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
    2d6c:	4804      	ldr	r0, [pc, #16]	; (2d80 <udi_hid_kbd_setup+0x18>)
    2d6e:	4905      	ldr	r1, [pc, #20]	; (2d84 <udi_hid_kbd_setup+0x1c>)
    2d70:	4a05      	ldr	r2, [pc, #20]	; (2d88 <udi_hid_kbd_setup+0x20>)
    2d72:	4b06      	ldr	r3, [pc, #24]	; (2d8c <udi_hid_kbd_setup+0x24>)
    2d74:	4c06      	ldr	r4, [pc, #24]	; (2d90 <udi_hid_kbd_setup+0x28>)
    2d76:	47a0      	blx	r4
    2d78:	1c03      	adds	r3, r0, #0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
    2d7a:	1c18      	adds	r0, r3, #0
    2d7c:	46bd      	mov	sp, r7
    2d7e:	bd98      	pop	{r3, r4, r7, pc}
    2d80:	20000f00 	.word	0x20000f00
    2d84:	20000f04 	.word	0x20000f04
    2d88:	20000158 	.word	0x20000158
    2d8c:	00002da1 	.word	0x00002da1
    2d90:	0000318d 	.word	0x0000318d

00002d94 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
    2d94:	b580      	push	{r7, lr}
    2d96:	af00      	add	r7, sp, #0
	return 0;
    2d98:	2300      	movs	r3, #0
}
    2d9a:	1c18      	adds	r0, r3, #0
    2d9c:	46bd      	mov	sp, r7
    2d9e:	bd80      	pop	{r7, pc}

00002da0 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    2da4:	4b0f      	ldr	r3, [pc, #60]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2da6:	885b      	ldrh	r3, [r3, #2]
    2da8:	0a1b      	lsrs	r3, r3, #8
    2daa:	b29b      	uxth	r3, r3
    2dac:	2b02      	cmp	r3, #2
    2dae:	d115      	bne.n	2ddc <udi_hid_kbd_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2db0:	4b0c      	ldr	r3, [pc, #48]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2db2:	885a      	ldrh	r2, [r3, #2]
    2db4:	23ff      	movs	r3, #255	; 0xff
    2db6:	4013      	ands	r3, r2
    2db8:	b29b      	uxth	r3, r3
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d10e      	bne.n	2ddc <udi_hid_kbd_setreport+0x3c>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    2dbe:	4b09      	ldr	r3, [pc, #36]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2dc0:	88db      	ldrh	r3, [r3, #6]
    2dc2:	2b01      	cmp	r3, #1
    2dc4:	d10a      	bne.n	2ddc <udi_hid_kbd_setreport+0x3c>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    2dc6:	4b07      	ldr	r3, [pc, #28]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2dc8:	4a07      	ldr	r2, [pc, #28]	; (2de8 <udi_hid_kbd_setreport+0x48>)
    2dca:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    2dcc:	4b05      	ldr	r3, [pc, #20]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2dce:	4a07      	ldr	r2, [pc, #28]	; (2dec <udi_hid_kbd_setreport+0x4c>)
    2dd0:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    2dd2:	4b04      	ldr	r3, [pc, #16]	; (2de4 <udi_hid_kbd_setreport+0x44>)
    2dd4:	2201      	movs	r2, #1
    2dd6:	819a      	strh	r2, [r3, #12]
		return true;
    2dd8:	2301      	movs	r3, #1
    2dda:	e000      	b.n	2dde <udi_hid_kbd_setreport+0x3e>
	}
	return false;
    2ddc:	2300      	movs	r3, #0
}
    2dde:	1c18      	adds	r0, r3, #0
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}
    2de4:	20003adc 	.word	0x20003adc
    2de8:	20000f08 	.word	0x20000f08
    2dec:	000030cd 	.word	0x000030cd

00002df0 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b084      	sub	sp, #16
    2df4:	af00      	add	r7, sp, #0
    2df6:	1c02      	adds	r2, r0, #0
    2df8:	1dfb      	adds	r3, r7, #7
    2dfa:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2dfc:	4b0d      	ldr	r3, [pc, #52]	; (2e34 <udi_hid_kbd_modifier_up+0x44>)
    2dfe:	4798      	blx	r3
    2e00:	1c03      	adds	r3, r0, #0
    2e02:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    2e04:	4b0c      	ldr	r3, [pc, #48]	; (2e38 <udi_hid_kbd_modifier_up+0x48>)
    2e06:	781b      	ldrb	r3, [r3, #0]
    2e08:	1dfa      	adds	r2, r7, #7
    2e0a:	7812      	ldrb	r2, [r2, #0]
    2e0c:	43d2      	mvns	r2, r2
    2e0e:	b2d2      	uxtb	r2, r2
    2e10:	4013      	ands	r3, r2
    2e12:	b2da      	uxtb	r2, r3
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <udi_hid_kbd_modifier_up+0x48>)
    2e16:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    2e18:	4b08      	ldr	r3, [pc, #32]	; (2e3c <udi_hid_kbd_modifier_up+0x4c>)
    2e1a:	2201      	movs	r2, #1
    2e1c:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2e1e:	4b08      	ldr	r3, [pc, #32]	; (2e40 <udi_hid_kbd_modifier_up+0x50>)
    2e20:	4798      	blx	r3

	cpu_irq_restore(flags);
    2e22:	68fb      	ldr	r3, [r7, #12]
    2e24:	1c18      	adds	r0, r3, #0
    2e26:	4b07      	ldr	r3, [pc, #28]	; (2e44 <udi_hid_kbd_modifier_up+0x54>)
    2e28:	4798      	blx	r3
	return true;
    2e2a:	2301      	movs	r3, #1
}
    2e2c:	1c18      	adds	r0, r3, #0
    2e2e:	46bd      	mov	sp, r7
    2e30:	b004      	add	sp, #16
    2e32:	bd80      	pop	{r7, pc}
    2e34:	00002c91 	.word	0x00002c91
    2e38:	20000f10 	.word	0x20000f10
    2e3c:	20000f0c 	.word	0x20000f0c
    2e40:	00003035 	.word	0x00003035
    2e44:	00002cd9 	.word	0x00002cd9

00002e48 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b084      	sub	sp, #16
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	1c02      	adds	r2, r0, #0
    2e50:	1dfb      	adds	r3, r7, #7
    2e52:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2e54:	4b0c      	ldr	r3, [pc, #48]	; (2e88 <udi_hid_kbd_modifier_down+0x40>)
    2e56:	4798      	blx	r3
    2e58:	1c03      	adds	r3, r0, #0
    2e5a:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
    2e5c:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <udi_hid_kbd_modifier_down+0x44>)
    2e5e:	781a      	ldrb	r2, [r3, #0]
    2e60:	1dfb      	adds	r3, r7, #7
    2e62:	781b      	ldrb	r3, [r3, #0]
    2e64:	4313      	orrs	r3, r2
    2e66:	b2da      	uxtb	r2, r3
    2e68:	4b08      	ldr	r3, [pc, #32]	; (2e8c <udi_hid_kbd_modifier_down+0x44>)
    2e6a:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    2e6c:	4b08      	ldr	r3, [pc, #32]	; (2e90 <udi_hid_kbd_modifier_down+0x48>)
    2e6e:	2201      	movs	r2, #1
    2e70:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2e72:	4b08      	ldr	r3, [pc, #32]	; (2e94 <udi_hid_kbd_modifier_down+0x4c>)
    2e74:	4798      	blx	r3

	cpu_irq_restore(flags);
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	1c18      	adds	r0, r3, #0
    2e7a:	4b07      	ldr	r3, [pc, #28]	; (2e98 <udi_hid_kbd_modifier_down+0x50>)
    2e7c:	4798      	blx	r3
	return true;
    2e7e:	2301      	movs	r3, #1
}
    2e80:	1c18      	adds	r0, r3, #0
    2e82:	46bd      	mov	sp, r7
    2e84:	b004      	add	sp, #16
    2e86:	bd80      	pop	{r7, pc}
    2e88:	00002c91 	.word	0x00002c91
    2e8c:	20000f10 	.word	0x20000f10
    2e90:	20000f0c 	.word	0x20000f0c
    2e94:	00003035 	.word	0x00003035
    2e98:	00002cd9 	.word	0x00002cd9

00002e9c <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    2e9c:	b580      	push	{r7, lr}
    2e9e:	b084      	sub	sp, #16
    2ea0:	af00      	add	r7, sp, #0
    2ea2:	1c02      	adds	r2, r0, #0
    2ea4:	1dfb      	adds	r3, r7, #7
    2ea6:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2ea8:	4b2f      	ldr	r3, [pc, #188]	; (2f68 <udi_hid_kbd_up+0xcc>)
    2eaa:	4798      	blx	r3
    2eac:	1c03      	adds	r3, r0, #0
    2eae:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2eb0:	1c3b      	adds	r3, r7, #0
    2eb2:	330f      	adds	r3, #15
    2eb4:	2202      	movs	r2, #2
    2eb6:	701a      	strb	r2, [r3, #0]
    2eb8:	e01d      	b.n	2ef6 <udi_hid_kbd_up+0x5a>
		if (0 == udi_hid_kbd_report[i]) {
    2eba:	1c3b      	adds	r3, r7, #0
    2ebc:	330f      	adds	r3, #15
    2ebe:	781b      	ldrb	r3, [r3, #0]
    2ec0:	4a2a      	ldr	r2, [pc, #168]	; (2f6c <udi_hid_kbd_up+0xd0>)
    2ec2:	5cd3      	ldrb	r3, [r2, r3]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d105      	bne.n	2ed4 <udi_hid_kbd_up+0x38>
			// Already removed
			cpu_irq_restore(flags);
    2ec8:	68bb      	ldr	r3, [r7, #8]
    2eca:	1c18      	adds	r0, r3, #0
    2ecc:	4b28      	ldr	r3, [pc, #160]	; (2f70 <udi_hid_kbd_up+0xd4>)
    2ece:	4798      	blx	r3
			return true;
    2ed0:	2301      	movs	r3, #1
    2ed2:	e045      	b.n	2f60 <udi_hid_kbd_up+0xc4>
		}
		if (key_id == udi_hid_kbd_report[i])
    2ed4:	1c3b      	adds	r3, r7, #0
    2ed6:	330f      	adds	r3, #15
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	4a24      	ldr	r2, [pc, #144]	; (2f6c <udi_hid_kbd_up+0xd0>)
    2edc:	5cd3      	ldrb	r3, [r2, r3]
    2ede:	1dfa      	adds	r2, r7, #7
    2ee0:	7812      	ldrb	r2, [r2, #0]
    2ee2:	429a      	cmp	r2, r3
    2ee4:	d100      	bne.n	2ee8 <udi_hid_kbd_up+0x4c>
			break;
    2ee6:	e00b      	b.n	2f00 <udi_hid_kbd_up+0x64>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2ee8:	1c3b      	adds	r3, r7, #0
    2eea:	330f      	adds	r3, #15
    2eec:	781a      	ldrb	r2, [r3, #0]
    2eee:	1c3b      	adds	r3, r7, #0
    2ef0:	330f      	adds	r3, #15
    2ef2:	3201      	adds	r2, #1
    2ef4:	701a      	strb	r2, [r3, #0]
    2ef6:	1c3b      	adds	r3, r7, #0
    2ef8:	330f      	adds	r3, #15
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	2b07      	cmp	r3, #7
    2efe:	d9dc      	bls.n	2eba <udi_hid_kbd_up+0x1e>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    2f00:	1c3b      	adds	r3, r7, #0
    2f02:	330f      	adds	r3, #15
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	2b08      	cmp	r3, #8
    2f08:	d105      	bne.n	2f16 <udi_hid_kbd_up+0x7a>
		// Already removed
		cpu_irq_restore(flags);
    2f0a:	68bb      	ldr	r3, [r7, #8]
    2f0c:	1c18      	adds	r0, r3, #0
    2f0e:	4b18      	ldr	r3, [pc, #96]	; (2f70 <udi_hid_kbd_up+0xd4>)
    2f10:	4798      	blx	r3
		return true;
    2f12:	2301      	movs	r3, #1
    2f14:	e024      	b.n	2f60 <udi_hid_kbd_up+0xc4>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2f16:	e011      	b.n	2f3c <udi_hid_kbd_up+0xa0>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    2f18:	1c3b      	adds	r3, r7, #0
    2f1a:	330f      	adds	r3, #15
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	1c3a      	adds	r2, r7, #0
    2f20:	320f      	adds	r2, #15
    2f22:	7812      	ldrb	r2, [r2, #0]
    2f24:	3201      	adds	r2, #1
    2f26:	4911      	ldr	r1, [pc, #68]	; (2f6c <udi_hid_kbd_up+0xd0>)
    2f28:	5c89      	ldrb	r1, [r1, r2]
    2f2a:	4a10      	ldr	r2, [pc, #64]	; (2f6c <udi_hid_kbd_up+0xd0>)
    2f2c:	54d1      	strb	r1, [r2, r3]
		i++;
    2f2e:	1c3b      	adds	r3, r7, #0
    2f30:	330f      	adds	r3, #15
    2f32:	781a      	ldrb	r2, [r3, #0]
    2f34:	1c3b      	adds	r3, r7, #0
    2f36:	330f      	adds	r3, #15
    2f38:	3201      	adds	r2, #1
    2f3a:	701a      	strb	r2, [r3, #0]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2f3c:	1c3b      	adds	r3, r7, #0
    2f3e:	330f      	adds	r3, #15
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	2b06      	cmp	r3, #6
    2f44:	d9e8      	bls.n	2f18 <udi_hid_kbd_up+0x7c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    2f46:	4b09      	ldr	r3, [pc, #36]	; (2f6c <udi_hid_kbd_up+0xd0>)
    2f48:	2200      	movs	r2, #0
    2f4a:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    2f4c:	4b09      	ldr	r3, [pc, #36]	; (2f74 <udi_hid_kbd_up+0xd8>)
    2f4e:	2201      	movs	r2, #1
    2f50:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2f52:	4b09      	ldr	r3, [pc, #36]	; (2f78 <udi_hid_kbd_up+0xdc>)
    2f54:	4798      	blx	r3

	cpu_irq_restore(flags);
    2f56:	68bb      	ldr	r3, [r7, #8]
    2f58:	1c18      	adds	r0, r3, #0
    2f5a:	4b05      	ldr	r3, [pc, #20]	; (2f70 <udi_hid_kbd_up+0xd4>)
    2f5c:	4798      	blx	r3
	return true;
    2f5e:	2301      	movs	r3, #1
}
    2f60:	1c18      	adds	r0, r3, #0
    2f62:	46bd      	mov	sp, r7
    2f64:	b004      	add	sp, #16
    2f66:	bd80      	pop	{r7, pc}
    2f68:	00002c91 	.word	0x00002c91
    2f6c:	20000f10 	.word	0x20000f10
    2f70:	00002cd9 	.word	0x00002cd9
    2f74:	20000f0c 	.word	0x20000f0c
    2f78:	00003035 	.word	0x00003035

00002f7c <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b084      	sub	sp, #16
    2f80:	af00      	add	r7, sp, #0
    2f82:	1c02      	adds	r2, r0, #0
    2f84:	1dfb      	adds	r3, r7, #7
    2f86:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    2f88:	4b25      	ldr	r3, [pc, #148]	; (3020 <udi_hid_kbd_down+0xa4>)
    2f8a:	4798      	blx	r3
    2f8c:	1c03      	adds	r3, r0, #0
    2f8e:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2f90:	1c3b      	adds	r3, r7, #0
    2f92:	330f      	adds	r3, #15
    2f94:	2202      	movs	r2, #2
    2f96:	701a      	strb	r2, [r3, #0]
    2f98:	e01d      	b.n	2fd6 <udi_hid_kbd_down+0x5a>
		if (0 == udi_hid_kbd_report[i])
    2f9a:	1c3b      	adds	r3, r7, #0
    2f9c:	330f      	adds	r3, #15
    2f9e:	781b      	ldrb	r3, [r3, #0]
    2fa0:	4a20      	ldr	r2, [pc, #128]	; (3024 <udi_hid_kbd_down+0xa8>)
    2fa2:	5cd3      	ldrb	r3, [r2, r3]
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d100      	bne.n	2faa <udi_hid_kbd_down+0x2e>
			break;
    2fa8:	e01a      	b.n	2fe0 <udi_hid_kbd_down+0x64>
		if (key_id == udi_hid_kbd_report[i]) {
    2faa:	1c3b      	adds	r3, r7, #0
    2fac:	330f      	adds	r3, #15
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	4a1c      	ldr	r2, [pc, #112]	; (3024 <udi_hid_kbd_down+0xa8>)
    2fb2:	5cd3      	ldrb	r3, [r2, r3]
    2fb4:	1dfa      	adds	r2, r7, #7
    2fb6:	7812      	ldrb	r2, [r2, #0]
    2fb8:	429a      	cmp	r2, r3
    2fba:	d105      	bne.n	2fc8 <udi_hid_kbd_down+0x4c>
			// Already in array
			cpu_irq_restore(flags);
    2fbc:	68bb      	ldr	r3, [r7, #8]
    2fbe:	1c18      	adds	r0, r3, #0
    2fc0:	4b19      	ldr	r3, [pc, #100]	; (3028 <udi_hid_kbd_down+0xac>)
    2fc2:	4798      	blx	r3
			return true;
    2fc4:	2301      	movs	r3, #1
    2fc6:	e027      	b.n	3018 <udi_hid_kbd_down+0x9c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2fc8:	1c3b      	adds	r3, r7, #0
    2fca:	330f      	adds	r3, #15
    2fcc:	781a      	ldrb	r2, [r3, #0]
    2fce:	1c3b      	adds	r3, r7, #0
    2fd0:	330f      	adds	r3, #15
    2fd2:	3201      	adds	r2, #1
    2fd4:	701a      	strb	r2, [r3, #0]
    2fd6:	1c3b      	adds	r3, r7, #0
    2fd8:	330f      	adds	r3, #15
    2fda:	781b      	ldrb	r3, [r3, #0]
    2fdc:	2b07      	cmp	r3, #7
    2fde:	d9dc      	bls.n	2f9a <udi_hid_kbd_down+0x1e>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    2fe0:	1c3b      	adds	r3, r7, #0
    2fe2:	330f      	adds	r3, #15
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	2b08      	cmp	r3, #8
    2fe8:	d105      	bne.n	2ff6 <udi_hid_kbd_down+0x7a>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
    2fea:	68bb      	ldr	r3, [r7, #8]
    2fec:	1c18      	adds	r0, r3, #0
    2fee:	4b0e      	ldr	r3, [pc, #56]	; (3028 <udi_hid_kbd_down+0xac>)
    2ff0:	4798      	blx	r3
		return false;
    2ff2:	2300      	movs	r3, #0
    2ff4:	e010      	b.n	3018 <udi_hid_kbd_down+0x9c>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    2ff6:	1c3b      	adds	r3, r7, #0
    2ff8:	330f      	adds	r3, #15
    2ffa:	781b      	ldrb	r3, [r3, #0]
    2ffc:	4a09      	ldr	r2, [pc, #36]	; (3024 <udi_hid_kbd_down+0xa8>)
    2ffe:	1df9      	adds	r1, r7, #7
    3000:	7809      	ldrb	r1, [r1, #0]
    3002:	54d1      	strb	r1, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    3004:	4b09      	ldr	r3, [pc, #36]	; (302c <udi_hid_kbd_down+0xb0>)
    3006:	2201      	movs	r2, #1
    3008:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    300a:	4b09      	ldr	r3, [pc, #36]	; (3030 <udi_hid_kbd_down+0xb4>)
    300c:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
    300e:	68bb      	ldr	r3, [r7, #8]
    3010:	1c18      	adds	r0, r3, #0
    3012:	4b05      	ldr	r3, [pc, #20]	; (3028 <udi_hid_kbd_down+0xac>)
    3014:	4798      	blx	r3
	return true;
    3016:	2301      	movs	r3, #1
}
    3018:	1c18      	adds	r0, r3, #0
    301a:	46bd      	mov	sp, r7
    301c:	b004      	add	sp, #16
    301e:	bd80      	pop	{r7, pc}
    3020:	00002c91 	.word	0x00002c91
    3024:	20000f10 	.word	0x20000f10
    3028:	00002cd9 	.word	0x00002cd9
    302c:	20000f0c 	.word	0x20000f0c
    3030:	00003035 	.word	0x00003035

00003034 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
    3034:	b590      	push	{r4, r7, lr}
    3036:	b083      	sub	sp, #12
    3038:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    303a:	4b10      	ldr	r3, [pc, #64]	; (307c <udi_hid_kbd_send_report+0x48>)
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	2b00      	cmp	r3, #0
    3040:	d001      	beq.n	3046 <udi_hid_kbd_send_report+0x12>
		return false;
    3042:	2300      	movs	r3, #0
    3044:	e015      	b.n	3072 <udi_hid_kbd_send_report+0x3e>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    3046:	4b0e      	ldr	r3, [pc, #56]	; (3080 <udi_hid_kbd_send_report+0x4c>)
    3048:	4a0e      	ldr	r2, [pc, #56]	; (3084 <udi_hid_kbd_send_report+0x50>)
    304a:	ca03      	ldmia	r2!, {r0, r1}
    304c:	c303      	stmia	r3!, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
    304e:	4b0e      	ldr	r3, [pc, #56]	; (3088 <udi_hid_kbd_send_report+0x54>)
    3050:	2200      	movs	r2, #0
    3052:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    3054:	4b0a      	ldr	r3, [pc, #40]	; (3080 <udi_hid_kbd_send_report+0x4c>)
    3056:	4a0d      	ldr	r2, [pc, #52]	; (308c <udi_hid_kbd_send_report+0x58>)
    3058:	9200      	str	r2, [sp, #0]
    305a:	2084      	movs	r0, #132	; 0x84
    305c:	2100      	movs	r1, #0
    305e:	1c1a      	adds	r2, r3, #0
    3060:	2308      	movs	r3, #8
    3062:	4c0b      	ldr	r4, [pc, #44]	; (3090 <udi_hid_kbd_send_report+0x5c>)
    3064:	47a0      	blx	r4
    3066:	1c03      	adds	r3, r0, #0
    3068:	1c1a      	adds	r2, r3, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
    306a:	4b04      	ldr	r3, [pc, #16]	; (307c <udi_hid_kbd_send_report+0x48>)
    306c:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
    306e:	4b03      	ldr	r3, [pc, #12]	; (307c <udi_hid_kbd_send_report+0x48>)
    3070:	781b      	ldrb	r3, [r3, #0]
}
    3072:	1c18      	adds	r0, r3, #0
    3074:	46bd      	mov	sp, r7
    3076:	b001      	add	sp, #4
    3078:	bd90      	pop	{r4, r7, pc}
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	20000f18 	.word	0x20000f18
    3080:	20000f1c 	.word	0x20000f1c
    3084:	20000f10 	.word	0x20000f10
    3088:	20000f0c 	.word	0x20000f0c
    308c:	00003095 	.word	0x00003095
    3090:	00007425 	.word	0x00007425

00003094 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6039      	str	r1, [r7, #0]
    309c:	1dfb      	adds	r3, r7, #7
    309e:	1c01      	adds	r1, r0, #0
    30a0:	7019      	strb	r1, [r3, #0]
    30a2:	1dbb      	adds	r3, r7, #6
    30a4:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
    30a6:	4b06      	ldr	r3, [pc, #24]	; (30c0 <udi_hid_kbd_report_sent+0x2c>)
    30a8:	2200      	movs	r2, #0
    30aa:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    30ac:	4b05      	ldr	r3, [pc, #20]	; (30c4 <udi_hid_kbd_report_sent+0x30>)
    30ae:	781b      	ldrb	r3, [r3, #0]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d001      	beq.n	30b8 <udi_hid_kbd_report_sent+0x24>
		udi_hid_kbd_send_report();
    30b4:	4b04      	ldr	r3, [pc, #16]	; (30c8 <udi_hid_kbd_report_sent+0x34>)
    30b6:	4798      	blx	r3
	}
}
    30b8:	46bd      	mov	sp, r7
    30ba:	b002      	add	sp, #8
    30bc:	bd80      	pop	{r7, pc}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	20000f18 	.word	0x20000f18
    30c4:	20000f0c 	.word	0x20000f0c
    30c8:	00003035 	.word	0x00003035

000030cc <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
    30cc:	b580      	push	{r7, lr}
    30ce:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
    30d0:	4b03      	ldr	r3, [pc, #12]	; (30e0 <udi_hid_kbd_setreport_valid+0x14>)
    30d2:	781b      	ldrb	r3, [r3, #0]
    30d4:	1c18      	adds	r0, r3, #0
    30d6:	4b03      	ldr	r3, [pc, #12]	; (30e4 <udi_hid_kbd_setreport_valid+0x18>)
    30d8:	4798      	blx	r3
}
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	20000f08 	.word	0x20000f08
    30e4:	0000046d 	.word	0x0000046d

000030e8 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    30e8:	b580      	push	{r7, lr}
    30ea:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    30ec:	4b0b      	ldr	r3, [pc, #44]	; (311c <udi_hid_mouse_enable+0x34>)
    30ee:	2200      	movs	r2, #0
    30f0:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    30f2:	4b0b      	ldr	r3, [pc, #44]	; (3120 <udi_hid_mouse_enable+0x38>)
    30f4:	2200      	movs	r2, #0
    30f6:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <udi_hid_mouse_enable+0x3c>)
    30fa:	2200      	movs	r2, #0
    30fc:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    30fe:	4b0a      	ldr	r3, [pc, #40]	; (3128 <udi_hid_mouse_enable+0x40>)
    3100:	1c18      	adds	r0, r3, #0
    3102:	2100      	movs	r1, #0
    3104:	2204      	movs	r2, #4
    3106:	4b09      	ldr	r3, [pc, #36]	; (312c <udi_hid_mouse_enable+0x44>)
    3108:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    310a:	4b09      	ldr	r3, [pc, #36]	; (3130 <udi_hid_mouse_enable+0x48>)
    310c:	2200      	movs	r2, #0
    310e:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    3110:	4b08      	ldr	r3, [pc, #32]	; (3134 <udi_hid_mouse_enable+0x4c>)
    3112:	4798      	blx	r3
    3114:	1c03      	adds	r3, r0, #0
}
    3116:	1c18      	adds	r0, r3, #0
    3118:	46bd      	mov	sp, r7
    311a:	bd80      	pop	{r7, pc}
    311c:	20000f24 	.word	0x20000f24
    3120:	20000f28 	.word	0x20000f28
    3124:	20000f34 	.word	0x20000f34
    3128:	20000f30 	.word	0x20000f30
    312c:	0000ab3b 	.word	0x0000ab3b
    3130:	20000f2c 	.word	0x20000f2c
    3134:	0000a295 	.word	0x0000a295

00003138 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    3138:	b580      	push	{r7, lr}
    313a:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    313c:	4b01      	ldr	r3, [pc, #4]	; (3144 <udi_hid_mouse_disable+0xc>)
    313e:	4798      	blx	r3
}
    3140:	46bd      	mov	sp, r7
    3142:	bd80      	pop	{r7, pc}
    3144:	0000a2ad 	.word	0x0000a2ad

00003148 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    3148:	b598      	push	{r3, r4, r7, lr}
    314a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    314c:	4804      	ldr	r0, [pc, #16]	; (3160 <udi_hid_mouse_setup+0x18>)
    314e:	4905      	ldr	r1, [pc, #20]	; (3164 <udi_hid_mouse_setup+0x1c>)
    3150:	4a05      	ldr	r2, [pc, #20]	; (3168 <udi_hid_mouse_setup+0x20>)
    3152:	4b06      	ldr	r3, [pc, #24]	; (316c <udi_hid_mouse_setup+0x24>)
    3154:	4c06      	ldr	r4, [pc, #24]	; (3170 <udi_hid_mouse_setup+0x28>)
    3156:	47a0      	blx	r4
    3158:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    315a:	1c18      	adds	r0, r3, #0
    315c:	46bd      	mov	sp, r7
    315e:	bd98      	pop	{r3, r4, r7, pc}
    3160:	20000f24 	.word	0x20000f24
    3164:	20000f28 	.word	0x20000f28
    3168:	200001a8 	.word	0x200001a8
    316c:	00003181 	.word	0x00003181
    3170:	0000318d 	.word	0x0000318d

00003174 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    3174:	b580      	push	{r7, lr}
    3176:	af00      	add	r7, sp, #0
	return 0;
    3178:	2300      	movs	r3, #0
}
    317a:	1c18      	adds	r0, r3, #0
    317c:	46bd      	mov	sp, r7
    317e:	bd80      	pop	{r7, pc}

00003180 <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    3180:	b580      	push	{r7, lr}
    3182:	af00      	add	r7, sp, #0
	return false;
    3184:	2300      	movs	r3, #0
}
    3186:	1c18      	adds	r0, r3, #0
    3188:	46bd      	mov	sp, r7
    318a:	bd80      	pop	{r7, pc}

0000318c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    318c:	b580      	push	{r7, lr}
    318e:	b084      	sub	sp, #16
    3190:	af00      	add	r7, sp, #0
    3192:	60f8      	str	r0, [r7, #12]
    3194:	60b9      	str	r1, [r7, #8]
    3196:	607a      	str	r2, [r7, #4]
    3198:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    319a:	4b36      	ldr	r3, [pc, #216]	; (3274 <udi_hid_setup+0xe8>)
    319c:	781b      	ldrb	r3, [r3, #0]
    319e:	b2db      	uxtb	r3, r3
    31a0:	b25b      	sxtb	r3, r3
    31a2:	2b00      	cmp	r3, #0
    31a4:	da32      	bge.n	320c <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    31a6:	4b33      	ldr	r3, [pc, #204]	; (3274 <udi_hid_setup+0xe8>)
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	1c1a      	adds	r2, r3, #0
    31ac:	2360      	movs	r3, #96	; 0x60
    31ae:	4013      	ands	r3, r2
    31b0:	d109      	bne.n	31c6 <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    31b2:	4b30      	ldr	r3, [pc, #192]	; (3274 <udi_hid_setup+0xe8>)
    31b4:	785b      	ldrb	r3, [r3, #1]
    31b6:	2b06      	cmp	r3, #6
    31b8:	d105      	bne.n	31c6 <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	1c18      	adds	r0, r3, #0
    31be:	4b2e      	ldr	r3, [pc, #184]	; (3278 <udi_hid_setup+0xec>)
    31c0:	4798      	blx	r3
    31c2:	1c03      	adds	r3, r0, #0
    31c4:	e052      	b.n	326c <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    31c6:	4b2b      	ldr	r3, [pc, #172]	; (3274 <udi_hid_setup+0xe8>)
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	1c1a      	adds	r2, r3, #0
    31cc:	2360      	movs	r3, #96	; 0x60
    31ce:	4013      	ands	r3, r2
    31d0:	2b20      	cmp	r3, #32
    31d2:	d11b      	bne.n	320c <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    31d4:	4b27      	ldr	r3, [pc, #156]	; (3274 <udi_hid_setup+0xe8>)
    31d6:	785b      	ldrb	r3, [r3, #1]
    31d8:	2b02      	cmp	r3, #2
    31da:	d007      	beq.n	31ec <udi_hid_setup+0x60>
    31dc:	2b03      	cmp	r3, #3
    31de:	d00d      	beq.n	31fc <udi_hid_setup+0x70>
    31e0:	2b01      	cmp	r3, #1
    31e2:	d113      	bne.n	320c <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    31e4:	683b      	ldr	r3, [r7, #0]
    31e6:	4798      	blx	r3
    31e8:	1c03      	adds	r3, r0, #0
    31ea:	e03f      	b.n	326c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    31ec:	4b21      	ldr	r3, [pc, #132]	; (3274 <udi_hid_setup+0xe8>)
    31ee:	68fa      	ldr	r2, [r7, #12]
    31f0:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    31f2:	4b20      	ldr	r3, [pc, #128]	; (3274 <udi_hid_setup+0xe8>)
    31f4:	2201      	movs	r2, #1
    31f6:	819a      	strh	r2, [r3, #12]
				return true;
    31f8:	2301      	movs	r3, #1
    31fa:	e037      	b.n	326c <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    31fc:	4b1d      	ldr	r3, [pc, #116]	; (3274 <udi_hid_setup+0xe8>)
    31fe:	68ba      	ldr	r2, [r7, #8]
    3200:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    3202:	4b1c      	ldr	r3, [pc, #112]	; (3274 <udi_hid_setup+0xe8>)
    3204:	2201      	movs	r2, #1
    3206:	819a      	strh	r2, [r3, #12]
				return true;
    3208:	2301      	movs	r3, #1
    320a:	e02f      	b.n	326c <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    320c:	4b19      	ldr	r3, [pc, #100]	; (3274 <udi_hid_setup+0xe8>)
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	b2db      	uxtb	r3, r3
    3212:	b25b      	sxtb	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	db28      	blt.n	326a <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3218:	4b16      	ldr	r3, [pc, #88]	; (3274 <udi_hid_setup+0xe8>)
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	1c1a      	adds	r2, r3, #0
    321e:	2360      	movs	r3, #96	; 0x60
    3220:	4013      	ands	r3, r2
    3222:	2b20      	cmp	r3, #32
    3224:	d121      	bne.n	326a <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    3226:	4b13      	ldr	r3, [pc, #76]	; (3274 <udi_hid_setup+0xe8>)
    3228:	785b      	ldrb	r3, [r3, #1]
    322a:	2b0a      	cmp	r3, #10
    322c:	d007      	beq.n	323e <udi_hid_setup+0xb2>
    322e:	2b0b      	cmp	r3, #11
    3230:	d00e      	beq.n	3250 <udi_hid_setup+0xc4>
    3232:	2b09      	cmp	r3, #9
    3234:	d119      	bne.n	326a <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    3236:	683b      	ldr	r3, [r7, #0]
    3238:	4798      	blx	r3
    323a:	1c03      	adds	r3, r0, #0
    323c:	e016      	b.n	326c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    323e:	4b0d      	ldr	r3, [pc, #52]	; (3274 <udi_hid_setup+0xe8>)
    3240:	885b      	ldrh	r3, [r3, #2]
    3242:	0a1b      	lsrs	r3, r3, #8
    3244:	b29b      	uxth	r3, r3
    3246:	b2da      	uxtb	r2, r3
    3248:	68fb      	ldr	r3, [r7, #12]
    324a:	701a      	strb	r2, [r3, #0]
				return true;
    324c:	2301      	movs	r3, #1
    324e:	e00d      	b.n	326c <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    3250:	4b08      	ldr	r3, [pc, #32]	; (3274 <udi_hid_setup+0xe8>)
    3252:	88db      	ldrh	r3, [r3, #6]
    3254:	2b00      	cmp	r3, #0
    3256:	d001      	beq.n	325c <udi_hid_setup+0xd0>
					return false;
    3258:	2300      	movs	r3, #0
    325a:	e007      	b.n	326c <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    325c:	4b05      	ldr	r3, [pc, #20]	; (3274 <udi_hid_setup+0xe8>)
    325e:	885b      	ldrh	r3, [r3, #2]
    3260:	b2da      	uxtb	r2, r3
    3262:	68bb      	ldr	r3, [r7, #8]
    3264:	701a      	strb	r2, [r3, #0]
				return true;
    3266:	2301      	movs	r3, #1
    3268:	e000      	b.n	326c <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    326a:	2300      	movs	r3, #0
}
    326c:	1c18      	adds	r0, r3, #0
    326e:	46bd      	mov	sp, r7
    3270:	b004      	add	sp, #16
    3272:	bd80      	pop	{r7, pc}
    3274:	20003adc 	.word	0x20003adc
    3278:	0000327d 	.word	0x0000327d

0000327c <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    327c:	b580      	push	{r7, lr}
    327e:	b084      	sub	sp, #16
    3280:	af00      	add	r7, sp, #0
    3282:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    3284:	4b22      	ldr	r3, [pc, #136]	; (3310 <udi_hid_reqstdifaceget_descriptor+0x94>)
    3286:	4798      	blx	r3
    3288:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    328a:	3309      	adds	r3, #9
    328c:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    328e:	68fb      	ldr	r3, [r7, #12]
    3290:	785b      	ldrb	r3, [r3, #1]
    3292:	2b21      	cmp	r3, #33	; 0x21
    3294:	d001      	beq.n	329a <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    3296:	2300      	movs	r3, #0
    3298:	e036      	b.n	3308 <udi_hid_reqstdifaceget_descriptor+0x8c>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    329a:	4b1e      	ldr	r3, [pc, #120]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    329c:	885b      	ldrh	r3, [r3, #2]
    329e:	0a1b      	lsrs	r3, r3, #8
    32a0:	b29b      	uxth	r3, r3
    32a2:	b2db      	uxtb	r3, r3
    32a4:	2b21      	cmp	r3, #33	; 0x21
    32a6:	d110      	bne.n	32ca <udi_hid_reqstdifaceget_descriptor+0x4e>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    32a8:	4b1a      	ldr	r3, [pc, #104]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32aa:	68fa      	ldr	r2, [r7, #12]
    32ac:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    32ae:	68fb      	ldr	r3, [r7, #12]
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	4a18      	ldr	r2, [pc, #96]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32b4:	88d2      	ldrh	r2, [r2, #6]
    32b6:	b298      	uxth	r0, r3
    32b8:	b291      	uxth	r1, r2
    32ba:	4288      	cmp	r0, r1
    32bc:	d900      	bls.n	32c0 <udi_hid_reqstdifaceget_descriptor+0x44>
    32be:	1c13      	adds	r3, r2, #0
    32c0:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    32c2:	4b14      	ldr	r3, [pc, #80]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32c4:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    32c6:	2301      	movs	r3, #1
    32c8:	e01e      	b.n	3308 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    32ca:	68fb      	ldr	r3, [r7, #12]
    32cc:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    32ce:	4b11      	ldr	r3, [pc, #68]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32d0:	885b      	ldrh	r3, [r3, #2]
    32d2:	0a1b      	lsrs	r3, r3, #8
    32d4:	b29b      	uxth	r3, r3
    32d6:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    32d8:	429a      	cmp	r2, r3
    32da:	d114      	bne.n	3306 <udi_hid_reqstdifaceget_descriptor+0x8a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    32dc:	4b0d      	ldr	r3, [pc, #52]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32de:	687a      	ldr	r2, [r7, #4]
    32e0:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    32e2:	68fb      	ldr	r3, [r7, #12]
    32e4:	79da      	ldrb	r2, [r3, #7]
    32e6:	7a1b      	ldrb	r3, [r3, #8]
    32e8:	021b      	lsls	r3, r3, #8
    32ea:	4313      	orrs	r3, r2
    32ec:	b29b      	uxth	r3, r3
    32ee:	4a09      	ldr	r2, [pc, #36]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    32f0:	88d2      	ldrh	r2, [r2, #6]
    32f2:	b298      	uxth	r0, r3
    32f4:	b291      	uxth	r1, r2
    32f6:	4288      	cmp	r0, r1
    32f8:	d900      	bls.n	32fc <udi_hid_reqstdifaceget_descriptor+0x80>
    32fa:	1c13      	adds	r3, r2, #0
    32fc:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    32fe:	4b05      	ldr	r3, [pc, #20]	; (3314 <udi_hid_reqstdifaceget_descriptor+0x98>)
    3300:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    3302:	2301      	movs	r3, #1
    3304:	e000      	b.n	3308 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	return false;
    3306:	2300      	movs	r3, #0
}
    3308:	1c18      	adds	r0, r3, #0
    330a:	46bd      	mov	sp, r7
    330c:	b004      	add	sp, #16
    330e:	bd80      	pop	{r7, pc}
    3310:	00003329 	.word	0x00003329
    3314:	20003adc 	.word	0x20003adc

00003318 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    3318:	b580      	push	{r7, lr}
    331a:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    331c:	4b01      	ldr	r3, [pc, #4]	; (3324 <udc_get_string_serial_name+0xc>)
	}
    331e:	1c18      	adds	r0, r3, #0
    3320:	46bd      	mov	sp, r7
    3322:	bd80      	pop	{r7, pc}
    3324:	0000ab4c 	.word	0x0000ab4c

00003328 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    3328:	b580      	push	{r7, lr}
    332a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    332c:	4b02      	ldr	r3, [pc, #8]	; (3338 <udc_get_interface_desc+0x10>)
    332e:	681b      	ldr	r3, [r3, #0]
}
    3330:	1c18      	adds	r0, r3, #0
    3332:	46bd      	mov	sp, r7
    3334:	bd80      	pop	{r7, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	20000f44 	.word	0x20000f44

0000333c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    333c:	b580      	push	{r7, lr}
    333e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3340:	4b07      	ldr	r3, [pc, #28]	; (3360 <udc_get_eof_conf+0x24>)
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3346:	4b06      	ldr	r3, [pc, #24]	; (3360 <udc_get_eof_conf+0x24>)
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	7899      	ldrb	r1, [r3, #2]
    334e:	78db      	ldrb	r3, [r3, #3]
    3350:	021b      	lsls	r3, r3, #8
    3352:	430b      	orrs	r3, r1
    3354:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3356:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    3358:	1c18      	adds	r0, r3, #0
    335a:	46bd      	mov	sp, r7
    335c:	bd80      	pop	{r7, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	20000f40 	.word	0x20000f40

00003364 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3364:	b580      	push	{r7, lr}
    3366:	b084      	sub	sp, #16
    3368:	af00      	add	r7, sp, #0
    336a:	6078      	str	r0, [r7, #4]
    336c:	1c0a      	adds	r2, r1, #0
    336e:	1cfb      	adds	r3, r7, #3
    3370:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3372:	4b12      	ldr	r3, [pc, #72]	; (33bc <udc_next_desc_in_iface+0x58>)
    3374:	4798      	blx	r3
    3376:	1c03      	adds	r3, r0, #0
    3378:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    337e:	687a      	ldr	r2, [r7, #4]
    3380:	18d3      	adds	r3, r2, r3
    3382:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3384:	e011      	b.n	33aa <udc_next_desc_in_iface+0x46>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	785b      	ldrb	r3, [r3, #1]
    338a:	2b04      	cmp	r3, #4
    338c:	d100      	bne.n	3390 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
    338e:	e010      	b.n	33b2 <udc_next_desc_in_iface+0x4e>
		}
		if (desc_id == desc->bDescriptorType) {
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	785b      	ldrb	r3, [r3, #1]
    3394:	1cfa      	adds	r2, r7, #3
    3396:	7812      	ldrb	r2, [r2, #0]
    3398:	429a      	cmp	r2, r3
    339a:	d101      	bne.n	33a0 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	e009      	b.n	33b4 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    33a4:	687a      	ldr	r2, [r7, #4]
    33a6:	18d3      	adds	r3, r2, r3
    33a8:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    33aa:	68fa      	ldr	r2, [r7, #12]
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	429a      	cmp	r2, r3
    33b0:	d8e9      	bhi.n	3386 <udc_next_desc_in_iface+0x22>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    33b2:	2300      	movs	r3, #0
}
    33b4:	1c18      	adds	r0, r3, #0
    33b6:	46bd      	mov	sp, r7
    33b8:	b004      	add	sp, #16
    33ba:	bd80      	pop	{r7, pc}
    33bc:	0000333d 	.word	0x0000333d

000033c0 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b084      	sub	sp, #16
    33c4:	af00      	add	r7, sp, #0
    33c6:	1c0a      	adds	r2, r1, #0
    33c8:	1dfb      	adds	r3, r7, #7
    33ca:	1c01      	adds	r1, r0, #0
    33cc:	7019      	strb	r1, [r3, #0]
    33ce:	1dbb      	adds	r3, r7, #6
    33d0:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    33d2:	4b20      	ldr	r3, [pc, #128]	; (3454 <udc_update_iface_desc+0x94>)
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d101      	bne.n	33de <udc_update_iface_desc+0x1e>
		return false;
    33da:	2300      	movs	r3, #0
    33dc:	e036      	b.n	344c <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    33de:	4b1e      	ldr	r3, [pc, #120]	; (3458 <udc_update_iface_desc+0x98>)
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	791b      	ldrb	r3, [r3, #4]
    33e6:	1dfa      	adds	r2, r7, #7
    33e8:	7812      	ldrb	r2, [r2, #0]
    33ea:	429a      	cmp	r2, r3
    33ec:	d301      	bcc.n	33f2 <udc_update_iface_desc+0x32>
		return false;
    33ee:	2300      	movs	r3, #0
    33f0:	e02c      	b.n	344c <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    33f2:	4b19      	ldr	r3, [pc, #100]	; (3458 <udc_update_iface_desc+0x98>)
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    33f8:	4b18      	ldr	r3, [pc, #96]	; (345c <udc_update_iface_desc+0x9c>)
    33fa:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    33fc:	4b18      	ldr	r3, [pc, #96]	; (3460 <udc_update_iface_desc+0xa0>)
    33fe:	4798      	blx	r3
    3400:	1c03      	adds	r3, r0, #0
    3402:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3404:	e01c      	b.n	3440 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3406:	4b15      	ldr	r3, [pc, #84]	; (345c <udc_update_iface_desc+0x9c>)
    3408:	681b      	ldr	r3, [r3, #0]
    340a:	785b      	ldrb	r3, [r3, #1]
    340c:	2b04      	cmp	r3, #4
    340e:	d10f      	bne.n	3430 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3410:	4b12      	ldr	r3, [pc, #72]	; (345c <udc_update_iface_desc+0x9c>)
    3412:	681b      	ldr	r3, [r3, #0]
    3414:	789b      	ldrb	r3, [r3, #2]
    3416:	1dfa      	adds	r2, r7, #7
    3418:	7812      	ldrb	r2, [r2, #0]
    341a:	429a      	cmp	r2, r3
    341c:	d108      	bne.n	3430 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    341e:	4b0f      	ldr	r3, [pc, #60]	; (345c <udc_update_iface_desc+0x9c>)
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3424:	1dba      	adds	r2, r7, #6
    3426:	7812      	ldrb	r2, [r2, #0]
    3428:	429a      	cmp	r2, r3
    342a:	d101      	bne.n	3430 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    342c:	2301      	movs	r3, #1
    342e:	e00d      	b.n	344c <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3430:	4b0a      	ldr	r3, [pc, #40]	; (345c <udc_update_iface_desc+0x9c>)
    3432:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3434:	4b09      	ldr	r3, [pc, #36]	; (345c <udc_update_iface_desc+0x9c>)
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    343a:	18d2      	adds	r2, r2, r3
    343c:	4b07      	ldr	r3, [pc, #28]	; (345c <udc_update_iface_desc+0x9c>)
    343e:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    3440:	4b06      	ldr	r3, [pc, #24]	; (345c <udc_update_iface_desc+0x9c>)
    3442:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3444:	68fa      	ldr	r2, [r7, #12]
    3446:	429a      	cmp	r2, r3
    3448:	d8dd      	bhi.n	3406 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    344a:	2300      	movs	r3, #0
}
    344c:	1c18      	adds	r0, r3, #0
    344e:	46bd      	mov	sp, r7
    3450:	b004      	add	sp, #16
    3452:	bd80      	pop	{r7, pc}
    3454:	20000f3c 	.word	0x20000f3c
    3458:	20000f40 	.word	0x20000f40
    345c:	20000f44 	.word	0x20000f44
    3460:	0000333d 	.word	0x0000333d

00003464 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3464:	b580      	push	{r7, lr}
    3466:	b084      	sub	sp, #16
    3468:	af00      	add	r7, sp, #0
    346a:	1c02      	adds	r2, r0, #0
    346c:	1dfb      	adds	r3, r7, #7
    346e:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3470:	1dfb      	adds	r3, r7, #7
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	1c18      	adds	r0, r3, #0
    3476:	2100      	movs	r1, #0
    3478:	4b20      	ldr	r3, [pc, #128]	; (34fc <udc_iface_disable+0x98>)
    347a:	4798      	blx	r3
    347c:	1c03      	adds	r3, r0, #0
    347e:	2201      	movs	r2, #1
    3480:	4053      	eors	r3, r2
    3482:	b2db      	uxtb	r3, r3
    3484:	2b00      	cmp	r3, #0
    3486:	d001      	beq.n	348c <udc_iface_disable+0x28>
		return false;
    3488:	2300      	movs	r3, #0
    348a:	e033      	b.n	34f4 <udc_iface_disable+0x90>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    348c:	4b1c      	ldr	r3, [pc, #112]	; (3500 <udc_iface_disable+0x9c>)
    348e:	681b      	ldr	r3, [r3, #0]
    3490:	685a      	ldr	r2, [r3, #4]
    3492:	1dfb      	adds	r3, r7, #7
    3494:	781b      	ldrb	r3, [r3, #0]
    3496:	009b      	lsls	r3, r3, #2
    3498:	18d3      	adds	r3, r2, r3
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    349e:	68bb      	ldr	r3, [r7, #8]
    34a0:	68db      	ldr	r3, [r3, #12]
    34a2:	4798      	blx	r3
    34a4:	1c03      	adds	r3, r0, #0
    34a6:	1dfa      	adds	r2, r7, #7
    34a8:	7812      	ldrb	r2, [r2, #0]
    34aa:	1c10      	adds	r0, r2, #0
    34ac:	1c19      	adds	r1, r3, #0
    34ae:	4b13      	ldr	r3, [pc, #76]	; (34fc <udc_iface_disable+0x98>)
    34b0:	4798      	blx	r3
    34b2:	1c03      	adds	r3, r0, #0
    34b4:	2201      	movs	r2, #1
    34b6:	4053      	eors	r3, r2
    34b8:	b2db      	uxtb	r3, r3
    34ba:	2b00      	cmp	r3, #0
    34bc:	d001      	beq.n	34c2 <udc_iface_disable+0x5e>
		return false;
    34be:	2300      	movs	r3, #0
    34c0:	e018      	b.n	34f4 <udc_iface_disable+0x90>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    34c2:	4b10      	ldr	r3, [pc, #64]	; (3504 <udc_iface_disable+0xa0>)
    34c4:	681b      	ldr	r3, [r3, #0]
    34c6:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    34c8:	68fb      	ldr	r3, [r7, #12]
    34ca:	1c18      	adds	r0, r3, #0
    34cc:	2105      	movs	r1, #5
    34ce:	4b0e      	ldr	r3, [pc, #56]	; (3508 <udc_iface_disable+0xa4>)
    34d0:	4798      	blx	r3
    34d2:	1c03      	adds	r3, r0, #0
    34d4:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	2b00      	cmp	r3, #0
    34da:	d105      	bne.n	34e8 <udc_iface_disable+0x84>
				break;
    34dc:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    34de:	68bb      	ldr	r3, [r7, #8]
    34e0:	685b      	ldr	r3, [r3, #4]
    34e2:	4798      	blx	r3
	return true;
    34e4:	2301      	movs	r3, #1
    34e6:	e005      	b.n	34f4 <udc_iface_disable+0x90>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    34e8:	68fb      	ldr	r3, [r7, #12]
    34ea:	789b      	ldrb	r3, [r3, #2]
    34ec:	1c18      	adds	r0, r3, #0
    34ee:	4b07      	ldr	r3, [pc, #28]	; (350c <udc_iface_disable+0xa8>)
    34f0:	4798      	blx	r3
		}
    34f2:	e7e9      	b.n	34c8 <udc_iface_disable+0x64>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    34f4:	1c18      	adds	r0, r3, #0
    34f6:	46bd      	mov	sp, r7
    34f8:	b004      	add	sp, #16
    34fa:	bd80      	pop	{r7, pc}
    34fc:	000033c1 	.word	0x000033c1
    3500:	20000f40 	.word	0x20000f40
    3504:	20000f44 	.word	0x20000f44
    3508:	00003365 	.word	0x00003365
    350c:	000070c1 	.word	0x000070c1

00003510 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3510:	b580      	push	{r7, lr}
    3512:	b084      	sub	sp, #16
    3514:	af00      	add	r7, sp, #0
    3516:	1c0a      	adds	r2, r1, #0
    3518:	1dfb      	adds	r3, r7, #7
    351a:	1c01      	adds	r1, r0, #0
    351c:	7019      	strb	r1, [r3, #0]
    351e:	1dbb      	adds	r3, r7, #6
    3520:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3522:	1dfb      	adds	r3, r7, #7
    3524:	781a      	ldrb	r2, [r3, #0]
    3526:	1dbb      	adds	r3, r7, #6
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	1c10      	adds	r0, r2, #0
    352c:	1c19      	adds	r1, r3, #0
    352e:	4b20      	ldr	r3, [pc, #128]	; (35b0 <udc_iface_enable+0xa0>)
    3530:	4798      	blx	r3
    3532:	1c03      	adds	r3, r0, #0
    3534:	2201      	movs	r2, #1
    3536:	4053      	eors	r3, r2
    3538:	b2db      	uxtb	r3, r3
    353a:	2b00      	cmp	r3, #0
    353c:	d001      	beq.n	3542 <udc_iface_enable+0x32>
		return false;
    353e:	2300      	movs	r3, #0
    3540:	e031      	b.n	35a6 <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3542:	4b1c      	ldr	r3, [pc, #112]	; (35b4 <udc_iface_enable+0xa4>)
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3548:	68fb      	ldr	r3, [r7, #12]
    354a:	1c18      	adds	r0, r3, #0
    354c:	2105      	movs	r1, #5
    354e:	4b1a      	ldr	r3, [pc, #104]	; (35b8 <udc_iface_enable+0xa8>)
    3550:	4798      	blx	r3
    3552:	1c03      	adds	r3, r0, #0
    3554:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	2b00      	cmp	r3, #0
    355a:	d10c      	bne.n	3576 <udc_iface_enable+0x66>
			break;
    355c:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    355e:	4b17      	ldr	r3, [pc, #92]	; (35bc <udc_iface_enable+0xac>)
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	685a      	ldr	r2, [r3, #4]
    3564:	1dfb      	adds	r3, r7, #7
    3566:	781b      	ldrb	r3, [r3, #0]
    3568:	009b      	lsls	r3, r3, #2
    356a:	18d3      	adds	r3, r2, r3
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	681b      	ldr	r3, [r3, #0]
    3570:	4798      	blx	r3
    3572:	1c03      	adds	r3, r0, #0
    3574:	e017      	b.n	35a6 <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3576:	68fb      	ldr	r3, [r7, #12]
    3578:	7899      	ldrb	r1, [r3, #2]
    357a:	68fb      	ldr	r3, [r7, #12]
    357c:	78da      	ldrb	r2, [r3, #3]
    357e:	68fb      	ldr	r3, [r7, #12]
    3580:	7918      	ldrb	r0, [r3, #4]
    3582:	795b      	ldrb	r3, [r3, #5]
    3584:	021b      	lsls	r3, r3, #8
    3586:	4303      	orrs	r3, r0
    3588:	b29b      	uxth	r3, r3
    358a:	1c08      	adds	r0, r1, #0
    358c:	1c11      	adds	r1, r2, #0
    358e:	1c1a      	adds	r2, r3, #0
    3590:	4b0b      	ldr	r3, [pc, #44]	; (35c0 <udc_iface_enable+0xb0>)
    3592:	4798      	blx	r3
    3594:	1c03      	adds	r3, r0, #0
    3596:	2201      	movs	r2, #1
    3598:	4053      	eors	r3, r2
    359a:	b2db      	uxtb	r3, r3
    359c:	2b00      	cmp	r3, #0
    359e:	d001      	beq.n	35a4 <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    35a0:	2300      	movs	r3, #0
    35a2:	e000      	b.n	35a6 <udc_iface_enable+0x96>
		}
	}
    35a4:	e7d0      	b.n	3548 <udc_iface_enable+0x38>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    35a6:	1c18      	adds	r0, r3, #0
    35a8:	46bd      	mov	sp, r7
    35aa:	b004      	add	sp, #16
    35ac:	bd80      	pop	{r7, pc}
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	000033c1 	.word	0x000033c1
    35b4:	20000f44 	.word	0x20000f44
    35b8:	00003365 	.word	0x00003365
    35bc:	20000f40 	.word	0x20000f40
    35c0:	00007151 	.word	0x00007151

000035c4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    35c4:	b580      	push	{r7, lr}
    35c6:	af00      	add	r7, sp, #0
	udd_enable();
    35c8:	4b01      	ldr	r3, [pc, #4]	; (35d0 <udc_start+0xc>)
    35ca:	4798      	blx	r3
}
    35cc:	46bd      	mov	sp, r7
    35ce:	bd80      	pop	{r7, pc}
    35d0:	0000804d 	.word	0x0000804d

000035d4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b082      	sub	sp, #8
    35d8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    35da:	4b16      	ldr	r3, [pc, #88]	; (3634 <udc_reset+0x60>)
    35dc:	781b      	ldrb	r3, [r3, #0]
    35de:	2b00      	cmp	r3, #0
    35e0:	d015      	beq.n	360e <udc_reset+0x3a>
		for (iface_num = 0;
    35e2:	1dfb      	adds	r3, r7, #7
    35e4:	2200      	movs	r2, #0
    35e6:	701a      	strb	r2, [r3, #0]
    35e8:	e009      	b.n	35fe <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    35ea:	1dfb      	adds	r3, r7, #7
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	1c18      	adds	r0, r3, #0
    35f0:	4b11      	ldr	r3, [pc, #68]	; (3638 <udc_reset+0x64>)
    35f2:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    35f4:	1dfb      	adds	r3, r7, #7
    35f6:	781a      	ldrb	r2, [r3, #0]
    35f8:	1dfb      	adds	r3, r7, #7
    35fa:	3201      	adds	r2, #1
    35fc:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    35fe:	4b0f      	ldr	r3, [pc, #60]	; (363c <udc_reset+0x68>)
    3600:	681b      	ldr	r3, [r3, #0]
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3606:	1dfa      	adds	r2, r7, #7
    3608:	7812      	ldrb	r2, [r2, #0]
    360a:	429a      	cmp	r2, r3
    360c:	d3ed      	bcc.n	35ea <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    360e:	4b09      	ldr	r3, [pc, #36]	; (3634 <udc_reset+0x60>)
    3610:	2200      	movs	r2, #0
    3612:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    3614:	4b0a      	ldr	r3, [pc, #40]	; (3640 <udc_reset+0x6c>)
    3616:	881a      	ldrh	r2, [r3, #0]
    3618:	2302      	movs	r3, #2
    361a:	4013      	ands	r3, r2
    361c:	b29b      	uxth	r3, r3
    361e:	2b00      	cmp	r3, #0
    3620:	d001      	beq.n	3626 <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    3622:	4b08      	ldr	r3, [pc, #32]	; (3644 <udc_reset+0x70>)
    3624:	4798      	blx	r3
	}
#endif
	udc_device_status =
    3626:	4b06      	ldr	r3, [pc, #24]	; (3640 <udc_reset+0x6c>)
    3628:	2201      	movs	r2, #1
    362a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    362c:	46bd      	mov	sp, r7
    362e:	b002      	add	sp, #8
    3630:	bd80      	pop	{r7, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	20000f3c 	.word	0x20000f3c
    3638:	00003465 	.word	0x00003465
    363c:	20000f40 	.word	0x20000f40
    3640:	20000f36 	.word	0x20000f36
    3644:	0000a185 	.word	0x0000a185

00003648 <udc_sof_notify>:

void udc_sof_notify(void)
{
    3648:	b580      	push	{r7, lr}
    364a:	b082      	sub	sp, #8
    364c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    364e:	4b16      	ldr	r3, [pc, #88]	; (36a8 <udc_sof_notify+0x60>)
    3650:	781b      	ldrb	r3, [r3, #0]
    3652:	2b00      	cmp	r3, #0
    3654:	d025      	beq.n	36a2 <udc_sof_notify+0x5a>
		for (iface_num = 0;
    3656:	1dfb      	adds	r3, r7, #7
    3658:	2200      	movs	r2, #0
    365a:	701a      	strb	r2, [r3, #0]
    365c:	e019      	b.n	3692 <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    365e:	4b13      	ldr	r3, [pc, #76]	; (36ac <udc_sof_notify+0x64>)
    3660:	681b      	ldr	r3, [r3, #0]
    3662:	685a      	ldr	r2, [r3, #4]
    3664:	1dfb      	adds	r3, r7, #7
    3666:	781b      	ldrb	r3, [r3, #0]
    3668:	009b      	lsls	r3, r3, #2
    366a:	18d3      	adds	r3, r2, r3
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	691b      	ldr	r3, [r3, #16]
    3670:	2b00      	cmp	r3, #0
    3672:	d009      	beq.n	3688 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3674:	4b0d      	ldr	r3, [pc, #52]	; (36ac <udc_sof_notify+0x64>)
    3676:	681b      	ldr	r3, [r3, #0]
    3678:	685a      	ldr	r2, [r3, #4]
    367a:	1dfb      	adds	r3, r7, #7
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	009b      	lsls	r3, r3, #2
    3680:	18d3      	adds	r3, r2, r3
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	691b      	ldr	r3, [r3, #16]
    3686:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3688:	1dfb      	adds	r3, r7, #7
    368a:	781a      	ldrb	r2, [r3, #0]
    368c:	1dfb      	adds	r3, r7, #7
    368e:	3201      	adds	r2, #1
    3690:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3692:	4b06      	ldr	r3, [pc, #24]	; (36ac <udc_sof_notify+0x64>)
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    369a:	1dfa      	adds	r2, r7, #7
    369c:	7812      	ldrb	r2, [r2, #0]
    369e:	429a      	cmp	r2, r3
    36a0:	d3dd      	bcc.n	365e <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    36a2:	46bd      	mov	sp, r7
    36a4:	b002      	add	sp, #8
    36a6:	bd80      	pop	{r7, pc}
    36a8:	20000f3c 	.word	0x20000f3c
    36ac:	20000f40 	.word	0x20000f40

000036b0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    36b4:	4b07      	ldr	r3, [pc, #28]	; (36d4 <udc_req_std_dev_get_status+0x24>)
    36b6:	88db      	ldrh	r3, [r3, #6]
    36b8:	2b02      	cmp	r3, #2
    36ba:	d001      	beq.n	36c0 <udc_req_std_dev_get_status+0x10>
		return false;
    36bc:	2300      	movs	r3, #0
    36be:	e005      	b.n	36cc <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    36c0:	4b05      	ldr	r3, [pc, #20]	; (36d8 <udc_req_std_dev_get_status+0x28>)
    36c2:	1c18      	adds	r0, r3, #0
    36c4:	2102      	movs	r1, #2
    36c6:	4b05      	ldr	r3, [pc, #20]	; (36dc <udc_req_std_dev_get_status+0x2c>)
    36c8:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    36ca:	2301      	movs	r3, #1
}
    36cc:	1c18      	adds	r0, r3, #0
    36ce:	46bd      	mov	sp, r7
    36d0:	bd80      	pop	{r7, pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	20003adc 	.word	0x20003adc
    36d8:	20000f36 	.word	0x20000f36
    36dc:	00007799 	.word	0x00007799

000036e0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    36e4:	4b0c      	ldr	r3, [pc, #48]	; (3718 <udc_req_std_ep_get_status+0x38>)
    36e6:	88db      	ldrh	r3, [r3, #6]
    36e8:	2b02      	cmp	r3, #2
    36ea:	d001      	beq.n	36f0 <udc_req_std_ep_get_status+0x10>
		return false;
    36ec:	2300      	movs	r3, #0
    36ee:	e00f      	b.n	3710 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    36f0:	4b09      	ldr	r3, [pc, #36]	; (3718 <udc_req_std_ep_get_status+0x38>)
    36f2:	889b      	ldrh	r3, [r3, #4]
    36f4:	b2db      	uxtb	r3, r3
    36f6:	1c18      	adds	r0, r3, #0
    36f8:	4b08      	ldr	r3, [pc, #32]	; (371c <udc_req_std_ep_get_status+0x3c>)
    36fa:	4798      	blx	r3
    36fc:	1c03      	adds	r3, r0, #0
    36fe:	1c1a      	adds	r2, r3, #0
    3700:	4b07      	ldr	r3, [pc, #28]	; (3720 <udc_req_std_ep_get_status+0x40>)
    3702:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3704:	4b06      	ldr	r3, [pc, #24]	; (3720 <udc_req_std_ep_get_status+0x40>)
    3706:	1c18      	adds	r0, r3, #0
    3708:	2102      	movs	r1, #2
    370a:	4b06      	ldr	r3, [pc, #24]	; (3724 <udc_req_std_ep_get_status+0x44>)
    370c:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    370e:	2301      	movs	r3, #1
}
    3710:	1c18      	adds	r0, r3, #0
    3712:	46bd      	mov	sp, r7
    3714:	bd80      	pop	{r7, pc}
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	20003adc 	.word	0x20003adc
    371c:	000072f5 	.word	0x000072f5
    3720:	20000f48 	.word	0x20000f48
    3724:	00007799 	.word	0x00007799

00003728 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3728:	b580      	push	{r7, lr}
    372a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    372c:	4b0c      	ldr	r3, [pc, #48]	; (3760 <udc_req_std_dev_clear_feature+0x38>)
    372e:	88db      	ldrh	r3, [r3, #6]
    3730:	2b00      	cmp	r3, #0
    3732:	d001      	beq.n	3738 <udc_req_std_dev_clear_feature+0x10>
		return false;
    3734:	2300      	movs	r3, #0
    3736:	e00f      	b.n	3758 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3738:	4b09      	ldr	r3, [pc, #36]	; (3760 <udc_req_std_dev_clear_feature+0x38>)
    373a:	885b      	ldrh	r3, [r3, #2]
    373c:	2b01      	cmp	r3, #1
    373e:	d10a      	bne.n	3756 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3740:	4b08      	ldr	r3, [pc, #32]	; (3764 <udc_req_std_dev_clear_feature+0x3c>)
    3742:	881b      	ldrh	r3, [r3, #0]
    3744:	2202      	movs	r2, #2
    3746:	4393      	bics	r3, r2
    3748:	b29a      	uxth	r2, r3
    374a:	4b06      	ldr	r3, [pc, #24]	; (3764 <udc_req_std_dev_clear_feature+0x3c>)
    374c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    374e:	4b06      	ldr	r3, [pc, #24]	; (3768 <udc_req_std_dev_clear_feature+0x40>)
    3750:	4798      	blx	r3
#endif
		return true;
    3752:	2301      	movs	r3, #1
    3754:	e000      	b.n	3758 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    3756:	2300      	movs	r3, #0
}
    3758:	1c18      	adds	r0, r3, #0
    375a:	46bd      	mov	sp, r7
    375c:	bd80      	pop	{r7, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	20003adc 	.word	0x20003adc
    3764:	20000f36 	.word	0x20000f36
    3768:	0000a185 	.word	0x0000a185

0000376c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    376c:	b580      	push	{r7, lr}
    376e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3770:	4b0a      	ldr	r3, [pc, #40]	; (379c <udc_req_std_ep_clear_feature+0x30>)
    3772:	88db      	ldrh	r3, [r3, #6]
    3774:	2b00      	cmp	r3, #0
    3776:	d001      	beq.n	377c <udc_req_std_ep_clear_feature+0x10>
		return false;
    3778:	2300      	movs	r3, #0
    377a:	e00c      	b.n	3796 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    377c:	4b07      	ldr	r3, [pc, #28]	; (379c <udc_req_std_ep_clear_feature+0x30>)
    377e:	885b      	ldrh	r3, [r3, #2]
    3780:	2b00      	cmp	r3, #0
    3782:	d107      	bne.n	3794 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3784:	4b05      	ldr	r3, [pc, #20]	; (379c <udc_req_std_ep_clear_feature+0x30>)
    3786:	889b      	ldrh	r3, [r3, #4]
    3788:	b2db      	uxtb	r3, r3
    378a:	1c18      	adds	r0, r3, #0
    378c:	4b04      	ldr	r3, [pc, #16]	; (37a0 <udc_req_std_ep_clear_feature+0x34>)
    378e:	4798      	blx	r3
    3790:	1c03      	adds	r3, r0, #0
    3792:	e000      	b.n	3796 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    3794:	2300      	movs	r3, #0
}
    3796:	1c18      	adds	r0, r3, #0
    3798:	46bd      	mov	sp, r7
    379a:	bd80      	pop	{r7, pc}
    379c:	20003adc 	.word	0x20003adc
    37a0:	00007379 	.word	0x00007379

000037a4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    37a8:	4b0c      	ldr	r3, [pc, #48]	; (37dc <udc_req_std_dev_set_feature+0x38>)
    37aa:	88db      	ldrh	r3, [r3, #6]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d001      	beq.n	37b4 <udc_req_std_dev_set_feature+0x10>
		return false;
    37b0:	2300      	movs	r3, #0
    37b2:	e010      	b.n	37d6 <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    37b4:	4b09      	ldr	r3, [pc, #36]	; (37dc <udc_req_std_dev_set_feature+0x38>)
    37b6:	885b      	ldrh	r3, [r3, #2]
    37b8:	2b01      	cmp	r3, #1
    37ba:	d002      	beq.n	37c2 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    37bc:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    37be:	2300      	movs	r3, #0
    37c0:	e009      	b.n	37d6 <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    37c2:	4b07      	ldr	r3, [pc, #28]	; (37e0 <udc_req_std_dev_set_feature+0x3c>)
    37c4:	881b      	ldrh	r3, [r3, #0]
    37c6:	2202      	movs	r2, #2
    37c8:	4313      	orrs	r3, r2
    37ca:	b29a      	uxth	r2, r3
    37cc:	4b04      	ldr	r3, [pc, #16]	; (37e0 <udc_req_std_dev_set_feature+0x3c>)
    37ce:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <udc_req_std_dev_set_feature+0x40>)
    37d2:	4798      	blx	r3
		return true;
    37d4:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    37d6:	1c18      	adds	r0, r3, #0
    37d8:	46bd      	mov	sp, r7
    37da:	bd80      	pop	{r7, pc}
    37dc:	20003adc 	.word	0x20003adc
    37e0:	20000f36 	.word	0x20000f36
    37e4:	0000a175 	.word	0x0000a175

000037e8 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    37e8:	b580      	push	{r7, lr}
    37ea:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    37ec:	4b0d      	ldr	r3, [pc, #52]	; (3824 <udc_req_std_ep_set_feature+0x3c>)
    37ee:	88db      	ldrh	r3, [r3, #6]
    37f0:	2b00      	cmp	r3, #0
    37f2:	d001      	beq.n	37f8 <udc_req_std_ep_set_feature+0x10>
		return false;
    37f4:	2300      	movs	r3, #0
    37f6:	e012      	b.n	381e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    37f8:	4b0a      	ldr	r3, [pc, #40]	; (3824 <udc_req_std_ep_set_feature+0x3c>)
    37fa:	885b      	ldrh	r3, [r3, #2]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d10d      	bne.n	381c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3800:	4b08      	ldr	r3, [pc, #32]	; (3824 <udc_req_std_ep_set_feature+0x3c>)
    3802:	889b      	ldrh	r3, [r3, #4]
    3804:	b2db      	uxtb	r3, r3
    3806:	1c18      	adds	r0, r3, #0
    3808:	4b07      	ldr	r3, [pc, #28]	; (3828 <udc_req_std_ep_set_feature+0x40>)
    380a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    380c:	4b05      	ldr	r3, [pc, #20]	; (3824 <udc_req_std_ep_set_feature+0x3c>)
    380e:	889b      	ldrh	r3, [r3, #4]
    3810:	b2db      	uxtb	r3, r3
    3812:	1c18      	adds	r0, r3, #0
    3814:	4b05      	ldr	r3, [pc, #20]	; (382c <udc_req_std_ep_set_feature+0x44>)
    3816:	4798      	blx	r3
    3818:	1c03      	adds	r3, r0, #0
    381a:	e000      	b.n	381e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    381c:	2300      	movs	r3, #0
}
    381e:	1c18      	adds	r0, r3, #0
    3820:	46bd      	mov	sp, r7
    3822:	bd80      	pop	{r7, pc}
    3824:	20003adc 	.word	0x20003adc
    3828:	0000700d 	.word	0x0000700d
    382c:	00007321 	.word	0x00007321

00003830 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3830:	b580      	push	{r7, lr}
    3832:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3834:	4b05      	ldr	r3, [pc, #20]	; (384c <udc_valid_address+0x1c>)
    3836:	885b      	ldrh	r3, [r3, #2]
    3838:	b2da      	uxtb	r2, r3
    383a:	237f      	movs	r3, #127	; 0x7f
    383c:	4013      	ands	r3, r2
    383e:	b2db      	uxtb	r3, r3
    3840:	1c18      	adds	r0, r3, #0
    3842:	4b03      	ldr	r3, [pc, #12]	; (3850 <udc_valid_address+0x20>)
    3844:	4798      	blx	r3
}
    3846:	46bd      	mov	sp, r7
    3848:	bd80      	pop	{r7, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	20003adc 	.word	0x20003adc
    3850:	00007705 	.word	0x00007705

00003854 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    3854:	b580      	push	{r7, lr}
    3856:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3858:	4b06      	ldr	r3, [pc, #24]	; (3874 <udc_req_std_dev_set_address+0x20>)
    385a:	88db      	ldrh	r3, [r3, #6]
    385c:	2b00      	cmp	r3, #0
    385e:	d001      	beq.n	3864 <udc_req_std_dev_set_address+0x10>
		return false;
    3860:	2300      	movs	r3, #0
    3862:	e003      	b.n	386c <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3864:	4b03      	ldr	r3, [pc, #12]	; (3874 <udc_req_std_dev_set_address+0x20>)
    3866:	4a04      	ldr	r2, [pc, #16]	; (3878 <udc_req_std_dev_set_address+0x24>)
    3868:	611a      	str	r2, [r3, #16]
	return true;
    386a:	2301      	movs	r3, #1
}
    386c:	1c18      	adds	r0, r3, #0
    386e:	46bd      	mov	sp, r7
    3870:	bd80      	pop	{r7, pc}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	20003adc 	.word	0x20003adc
    3878:	00003831 	.word	0x00003831

0000387c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    387c:	b580      	push	{r7, lr}
    387e:	b084      	sub	sp, #16
    3880:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    3882:	1dfb      	adds	r3, r7, #7
    3884:	2200      	movs	r2, #0
    3886:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3888:	4b34      	ldr	r3, [pc, #208]	; (395c <udc_req_std_dev_get_str_desc+0xe0>)
    388a:	885b      	ldrh	r3, [r3, #2]
    388c:	1c1a      	adds	r2, r3, #0
    388e:	23ff      	movs	r3, #255	; 0xff
    3890:	4013      	ands	r3, r2
    3892:	2b01      	cmp	r3, #1
    3894:	d00e      	beq.n	38b4 <udc_req_std_dev_get_str_desc+0x38>
    3896:	dc02      	bgt.n	389e <udc_req_std_dev_get_str_desc+0x22>
    3898:	2b00      	cmp	r3, #0
    389a:	d005      	beq.n	38a8 <udc_req_std_dev_get_str_desc+0x2c>
    389c:	e01e      	b.n	38dc <udc_req_std_dev_get_str_desc+0x60>
    389e:	2b02      	cmp	r3, #2
    38a0:	d00e      	beq.n	38c0 <udc_req_std_dev_get_str_desc+0x44>
    38a2:	2b03      	cmp	r3, #3
    38a4:	d012      	beq.n	38cc <udc_req_std_dev_get_str_desc+0x50>
    38a6:	e019      	b.n	38dc <udc_req_std_dev_get_str_desc+0x60>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    38a8:	4b2d      	ldr	r3, [pc, #180]	; (3960 <udc_req_std_dev_get_str_desc+0xe4>)
    38aa:	1c18      	adds	r0, r3, #0
    38ac:	2104      	movs	r1, #4
    38ae:	4b2d      	ldr	r3, [pc, #180]	; (3964 <udc_req_std_dev_get_str_desc+0xe8>)
    38b0:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    38b2:	e01b      	b.n	38ec <udc_req_std_dev_get_str_desc+0x70>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    38b4:	1dfb      	adds	r3, r7, #7
    38b6:	220a      	movs	r2, #10
    38b8:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    38ba:	4b2b      	ldr	r3, [pc, #172]	; (3968 <udc_req_std_dev_get_str_desc+0xec>)
    38bc:	60bb      	str	r3, [r7, #8]
		break;
    38be:	e015      	b.n	38ec <udc_req_std_dev_get_str_desc+0x70>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    38c0:	1dfb      	adds	r3, r7, #7
    38c2:	2220      	movs	r2, #32
    38c4:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    38c6:	4b29      	ldr	r3, [pc, #164]	; (396c <udc_req_std_dev_get_str_desc+0xf0>)
    38c8:	60bb      	str	r3, [r7, #8]
		break;
    38ca:	e00f      	b.n	38ec <udc_req_std_dev_get_str_desc+0x70>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    38cc:	1dfb      	adds	r3, r7, #7
    38ce:	220c      	movs	r2, #12
    38d0:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    38d2:	4b27      	ldr	r3, [pc, #156]	; (3970 <udc_req_std_dev_get_str_desc+0xf4>)
    38d4:	4798      	blx	r3
    38d6:	1c03      	adds	r3, r0, #0
    38d8:	60bb      	str	r3, [r7, #8]
		break;
    38da:	e007      	b.n	38ec <udc_req_std_dev_get_str_desc+0x70>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
    38dc:	4b25      	ldr	r3, [pc, #148]	; (3974 <udc_req_std_dev_get_str_desc+0xf8>)
    38de:	4798      	blx	r3
    38e0:	1c03      	adds	r3, r0, #0
    38e2:	2b00      	cmp	r3, #0
    38e4:	d000      	beq.n	38e8 <udc_req_std_dev_get_str_desc+0x6c>
			break;
    38e6:	e001      	b.n	38ec <udc_req_std_dev_get_str_desc+0x70>
		}
#endif
		return false;
    38e8:	2300      	movs	r3, #0
    38ea:	e033      	b.n	3954 <udc_req_std_dev_get_str_desc+0xd8>
	}

	if (str_length) {
    38ec:	1dfb      	adds	r3, r7, #7
    38ee:	781b      	ldrb	r3, [r3, #0]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d02e      	beq.n	3952 <udc_req_std_dev_get_str_desc+0xd6>
		for(i = 0; i < str_length; i++) {
    38f4:	1c3b      	adds	r3, r7, #0
    38f6:	330f      	adds	r3, #15
    38f8:	2200      	movs	r2, #0
    38fa:	701a      	strb	r2, [r3, #0]
    38fc:	e013      	b.n	3926 <udc_req_std_dev_get_str_desc+0xaa>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    38fe:	1c3b      	adds	r3, r7, #0
    3900:	330f      	adds	r3, #15
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	1c3a      	adds	r2, r7, #0
    3906:	320f      	adds	r2, #15
    3908:	7812      	ldrb	r2, [r2, #0]
    390a:	68b9      	ldr	r1, [r7, #8]
    390c:	188a      	adds	r2, r1, r2
    390e:	7812      	ldrb	r2, [r2, #0]
    3910:	4919      	ldr	r1, [pc, #100]	; (3978 <udc_req_std_dev_get_str_desc+0xfc>)
    3912:	005b      	lsls	r3, r3, #1
    3914:	18cb      	adds	r3, r1, r3
    3916:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3918:	1c3b      	adds	r3, r7, #0
    391a:	330f      	adds	r3, #15
    391c:	781a      	ldrb	r2, [r3, #0]
    391e:	1c3b      	adds	r3, r7, #0
    3920:	330f      	adds	r3, #15
    3922:	3201      	adds	r2, #1
    3924:	701a      	strb	r2, [r3, #0]
    3926:	1c3a      	adds	r2, r7, #0
    3928:	320f      	adds	r2, #15
    392a:	1dfb      	adds	r3, r7, #7
    392c:	7812      	ldrb	r2, [r2, #0]
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	429a      	cmp	r2, r3
    3932:	d3e4      	bcc.n	38fe <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3934:	1dfb      	adds	r3, r7, #7
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	3301      	adds	r3, #1
    393a:	b2db      	uxtb	r3, r3
    393c:	18db      	adds	r3, r3, r3
    393e:	b2da      	uxtb	r2, r3
    3940:	4b0d      	ldr	r3, [pc, #52]	; (3978 <udc_req_std_dev_get_str_desc+0xfc>)
    3942:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    3944:	4b0c      	ldr	r3, [pc, #48]	; (3978 <udc_req_std_dev_get_str_desc+0xfc>)
    3946:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    3948:	4a0b      	ldr	r2, [pc, #44]	; (3978 <udc_req_std_dev_get_str_desc+0xfc>)
    394a:	1c10      	adds	r0, r2, #0
    394c:	1c19      	adds	r1, r3, #0
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <udc_req_std_dev_get_str_desc+0xe8>)
    3950:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    3952:	2301      	movs	r3, #1
}
    3954:	1c18      	adds	r0, r3, #0
    3956:	46bd      	mov	sp, r7
    3958:	b004      	add	sp, #16
    395a:	bd80      	pop	{r7, pc}
    395c:	20003adc 	.word	0x20003adc
    3960:	200001dc 	.word	0x200001dc
    3964:	00007799 	.word	0x00007799
    3968:	200001e0 	.word	0x200001e0
    396c:	200001ec 	.word	0x200001ec
    3970:	00003319 	.word	0x00003319
    3974:	0000a195 	.word	0x0000a195
    3978:	20000210 	.word	0x20000210

0000397c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    397c:	b580      	push	{r7, lr}
    397e:	b082      	sub	sp, #8
    3980:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3982:	4b39      	ldr	r3, [pc, #228]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3984:	885a      	ldrh	r2, [r3, #2]
    3986:	1dfb      	adds	r3, r7, #7
    3988:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    398a:	4b37      	ldr	r3, [pc, #220]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    398c:	885b      	ldrh	r3, [r3, #2]
    398e:	0a1b      	lsrs	r3, r3, #8
    3990:	b29b      	uxth	r3, r3
    3992:	b2db      	uxtb	r3, r3
    3994:	2b02      	cmp	r3, #2
    3996:	d012      	beq.n	39be <udc_req_std_dev_get_descriptor+0x42>
    3998:	dc02      	bgt.n	39a0 <udc_req_std_dev_get_descriptor+0x24>
    399a:	2b01      	cmp	r3, #1
    399c:	d005      	beq.n	39aa <udc_req_std_dev_get_descriptor+0x2e>
    399e:	e052      	b.n	3a46 <udc_req_std_dev_get_descriptor+0xca>
    39a0:	2b03      	cmp	r3, #3
    39a2:	d045      	beq.n	3a30 <udc_req_std_dev_get_descriptor+0xb4>
    39a4:	2b0f      	cmp	r3, #15
    39a6:	d02f      	beq.n	3a08 <udc_req_std_dev_get_descriptor+0x8c>
    39a8:	e04d      	b.n	3a46 <udc_req_std_dev_get_descriptor+0xca>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    39aa:	4b30      	ldr	r3, [pc, #192]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    39ac:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    39ae:	4b2f      	ldr	r3, [pc, #188]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    39b4:	1c10      	adds	r0, r2, #0
    39b6:	1c19      	adds	r1, r3, #0
    39b8:	4b2d      	ldr	r3, [pc, #180]	; (3a70 <udc_req_std_dev_get_descriptor+0xf4>)
    39ba:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    39bc:	e045      	b.n	3a4a <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    39be:	4b2b      	ldr	r3, [pc, #172]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	7c5b      	ldrb	r3, [r3, #17]
    39c4:	1dfa      	adds	r2, r7, #7
    39c6:	7812      	ldrb	r2, [r2, #0]
    39c8:	429a      	cmp	r2, r3
    39ca:	d301      	bcc.n	39d0 <udc_req_std_dev_get_descriptor+0x54>
					bNumConfigurations) {
				return false;
    39cc:	2300      	movs	r3, #0
    39ce:	e047      	b.n	3a60 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    39d0:	4b26      	ldr	r3, [pc, #152]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    39d2:	685a      	ldr	r2, [r3, #4]
    39d4:	1dfb      	adds	r3, r7, #7
    39d6:	781b      	ldrb	r3, [r3, #0]
    39d8:	00db      	lsls	r3, r3, #3
    39da:	18d3      	adds	r3, r2, r3
    39dc:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    39de:	4b23      	ldr	r3, [pc, #140]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    39e0:	6859      	ldr	r1, [r3, #4]
    39e2:	1dfb      	adds	r3, r7, #7
    39e4:	781b      	ldrb	r3, [r3, #0]
    39e6:	00db      	lsls	r3, r3, #3
    39e8:	18cb      	adds	r3, r1, r3
    39ea:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    39ec:	7899      	ldrb	r1, [r3, #2]
    39ee:	78db      	ldrb	r3, [r3, #3]
    39f0:	021b      	lsls	r3, r3, #8
    39f2:	430b      	orrs	r3, r1
    39f4:	b29b      	uxth	r3, r3
    39f6:	1c10      	adds	r0, r2, #0
    39f8:	1c19      	adds	r1, r3, #0
    39fa:	4b1d      	ldr	r3, [pc, #116]	; (3a70 <udc_req_std_dev_get_descriptor+0xf4>)
    39fc:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    39fe:	4b1a      	ldr	r3, [pc, #104]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3a00:	689b      	ldr	r3, [r3, #8]
    3a02:	2202      	movs	r2, #2
    3a04:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    3a06:	e020      	b.n	3a4a <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3a08:	4b18      	ldr	r3, [pc, #96]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    3a0a:	689b      	ldr	r3, [r3, #8]
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d101      	bne.n	3a14 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    3a10:	2300      	movs	r3, #0
    3a12:	e025      	b.n	3a60 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3a14:	4b15      	ldr	r3, [pc, #84]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    3a16:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    3a18:	4b14      	ldr	r3, [pc, #80]	; (3a6c <udc_req_std_dev_get_descriptor+0xf0>)
    3a1a:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3a1c:	7899      	ldrb	r1, [r3, #2]
    3a1e:	78db      	ldrb	r3, [r3, #3]
    3a20:	021b      	lsls	r3, r3, #8
    3a22:	430b      	orrs	r3, r1
    3a24:	b29b      	uxth	r3, r3
    3a26:	1c10      	adds	r0, r2, #0
    3a28:	1c19      	adds	r1, r3, #0
    3a2a:	4b11      	ldr	r3, [pc, #68]	; (3a70 <udc_req_std_dev_get_descriptor+0xf4>)
    3a2c:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    3a2e:	e00c      	b.n	3a4a <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    3a30:	4b10      	ldr	r3, [pc, #64]	; (3a74 <udc_req_std_dev_get_descriptor+0xf8>)
    3a32:	4798      	blx	r3
    3a34:	1c03      	adds	r3, r0, #0
    3a36:	2201      	movs	r2, #1
    3a38:	4053      	eors	r3, r2
    3a3a:	b2db      	uxtb	r3, r3
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d001      	beq.n	3a44 <udc_req_std_dev_get_descriptor+0xc8>
			return false;
    3a40:	2300      	movs	r3, #0
    3a42:	e00d      	b.n	3a60 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;
    3a44:	e001      	b.n	3a4a <udc_req_std_dev_get_descriptor+0xce>

	default:
		// Unknown descriptor requested
		return false;
    3a46:	2300      	movs	r3, #0
    3a48:	e00a      	b.n	3a60 <udc_req_std_dev_get_descriptor+0xe4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3a4a:	4b07      	ldr	r3, [pc, #28]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3a4c:	88da      	ldrh	r2, [r3, #6]
    3a4e:	4b06      	ldr	r3, [pc, #24]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3a50:	899b      	ldrh	r3, [r3, #12]
    3a52:	429a      	cmp	r2, r3
    3a54:	d203      	bcs.n	3a5e <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3a56:	4b04      	ldr	r3, [pc, #16]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3a58:	88da      	ldrh	r2, [r3, #6]
    3a5a:	4b03      	ldr	r3, [pc, #12]	; (3a68 <udc_req_std_dev_get_descriptor+0xec>)
    3a5c:	819a      	strh	r2, [r3, #12]
	}
	return true;
    3a5e:	2301      	movs	r3, #1
}
    3a60:	1c18      	adds	r0, r3, #0
    3a62:	46bd      	mov	sp, r7
    3a64:	b002      	add	sp, #8
    3a66:	bd80      	pop	{r7, pc}
    3a68:	20003adc 	.word	0x20003adc
    3a6c:	200000b8 	.word	0x200000b8
    3a70:	00007799 	.word	0x00007799
    3a74:	0000387d 	.word	0x0000387d

00003a78 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    3a7c:	4b07      	ldr	r3, [pc, #28]	; (3a9c <udc_req_std_dev_get_configuration+0x24>)
    3a7e:	88db      	ldrh	r3, [r3, #6]
    3a80:	2b01      	cmp	r3, #1
    3a82:	d001      	beq.n	3a88 <udc_req_std_dev_get_configuration+0x10>
		return false;
    3a84:	2300      	movs	r3, #0
    3a86:	e005      	b.n	3a94 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3a88:	4b05      	ldr	r3, [pc, #20]	; (3aa0 <udc_req_std_dev_get_configuration+0x28>)
    3a8a:	1c18      	adds	r0, r3, #0
    3a8c:	2101      	movs	r1, #1
    3a8e:	4b05      	ldr	r3, [pc, #20]	; (3aa4 <udc_req_std_dev_get_configuration+0x2c>)
    3a90:	4798      	blx	r3
	return true;
    3a92:	2301      	movs	r3, #1
}
    3a94:	1c18      	adds	r0, r3, #0
    3a96:	46bd      	mov	sp, r7
    3a98:	bd80      	pop	{r7, pc}
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	20003adc 	.word	0x20003adc
    3aa0:	20000f3c 	.word	0x20000f3c
    3aa4:	00007799 	.word	0x00007799

00003aa8 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	b082      	sub	sp, #8
    3aac:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3aae:	4b2a      	ldr	r3, [pc, #168]	; (3b58 <udc_req_std_dev_set_configuration+0xb0>)
    3ab0:	88db      	ldrh	r3, [r3, #6]
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d001      	beq.n	3aba <udc_req_std_dev_set_configuration+0x12>
		return false;
    3ab6:	2300      	movs	r3, #0
    3ab8:	e049      	b.n	3b4e <udc_req_std_dev_set_configuration+0xa6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3aba:	4b28      	ldr	r3, [pc, #160]	; (3b5c <udc_req_std_dev_set_configuration+0xb4>)
    3abc:	4798      	blx	r3
    3abe:	1c03      	adds	r3, r0, #0
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	d101      	bne.n	3ac8 <udc_req_std_dev_set_configuration+0x20>
		return false;
    3ac4:	2300      	movs	r3, #0
    3ac6:	e042      	b.n	3b4e <udc_req_std_dev_set_configuration+0xa6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3ac8:	4b23      	ldr	r3, [pc, #140]	; (3b58 <udc_req_std_dev_set_configuration+0xb0>)
    3aca:	885b      	ldrh	r3, [r3, #2]
    3acc:	1c1a      	adds	r2, r3, #0
    3ace:	23ff      	movs	r3, #255	; 0xff
    3ad0:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    3ad2:	4b23      	ldr	r3, [pc, #140]	; (3b60 <udc_req_std_dev_set_configuration+0xb8>)
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3ad8:	429a      	cmp	r2, r3
    3ada:	dd01      	ble.n	3ae0 <udc_req_std_dev_set_configuration+0x38>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    3adc:	2300      	movs	r3, #0
    3ade:	e036      	b.n	3b4e <udc_req_std_dev_set_configuration+0xa6>
		}
	}

	// Reset current configuration
	udc_reset();
    3ae0:	4b20      	ldr	r3, [pc, #128]	; (3b64 <udc_req_std_dev_set_configuration+0xbc>)
    3ae2:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3ae4:	4b1c      	ldr	r3, [pc, #112]	; (3b58 <udc_req_std_dev_set_configuration+0xb0>)
    3ae6:	885b      	ldrh	r3, [r3, #2]
    3ae8:	b2da      	uxtb	r2, r3
    3aea:	4b1f      	ldr	r3, [pc, #124]	; (3b68 <udc_req_std_dev_set_configuration+0xc0>)
    3aec:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    3aee:	4b1e      	ldr	r3, [pc, #120]	; (3b68 <udc_req_std_dev_set_configuration+0xc0>)
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d101      	bne.n	3afa <udc_req_std_dev_set_configuration+0x52>
		return true; // Default empty configuration requested
    3af6:	2301      	movs	r3, #1
    3af8:	e029      	b.n	3b4e <udc_req_std_dev_set_configuration+0xa6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3afa:	4b19      	ldr	r3, [pc, #100]	; (3b60 <udc_req_std_dev_set_configuration+0xb8>)
    3afc:	685a      	ldr	r2, [r3, #4]
    3afe:	4b1a      	ldr	r3, [pc, #104]	; (3b68 <udc_req_std_dev_set_configuration+0xc0>)
    3b00:	781b      	ldrb	r3, [r3, #0]
    3b02:	491a      	ldr	r1, [pc, #104]	; (3b6c <udc_req_std_dev_set_configuration+0xc4>)
    3b04:	185b      	adds	r3, r3, r1
    3b06:	00db      	lsls	r3, r3, #3
    3b08:	18d2      	adds	r2, r2, r3
    3b0a:	4b19      	ldr	r3, [pc, #100]	; (3b70 <udc_req_std_dev_set_configuration+0xc8>)
    3b0c:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b0e:	1dfb      	adds	r3, r7, #7
    3b10:	2200      	movs	r2, #0
    3b12:	701a      	strb	r2, [r3, #0]
    3b14:	e012      	b.n	3b3c <udc_req_std_dev_set_configuration+0x94>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3b16:	1dfb      	adds	r3, r7, #7
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	1c18      	adds	r0, r3, #0
    3b1c:	2100      	movs	r1, #0
    3b1e:	4b15      	ldr	r3, [pc, #84]	; (3b74 <udc_req_std_dev_set_configuration+0xcc>)
    3b20:	4798      	blx	r3
    3b22:	1c03      	adds	r3, r0, #0
    3b24:	2201      	movs	r2, #1
    3b26:	4053      	eors	r3, r2
    3b28:	b2db      	uxtb	r3, r3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d001      	beq.n	3b32 <udc_req_std_dev_set_configuration+0x8a>
			return false;
    3b2e:	2300      	movs	r3, #0
    3b30:	e00d      	b.n	3b4e <udc_req_std_dev_set_configuration+0xa6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3b32:	1dfb      	adds	r3, r7, #7
    3b34:	781a      	ldrb	r2, [r3, #0]
    3b36:	1dfb      	adds	r3, r7, #7
    3b38:	3201      	adds	r2, #1
    3b3a:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b3c:	4b0c      	ldr	r3, [pc, #48]	; (3b70 <udc_req_std_dev_set_configuration+0xc8>)
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	681b      	ldr	r3, [r3, #0]
    3b42:	791b      	ldrb	r3, [r3, #4]
    3b44:	1dfa      	adds	r2, r7, #7
    3b46:	7812      	ldrb	r2, [r2, #0]
    3b48:	429a      	cmp	r2, r3
    3b4a:	d3e4      	bcc.n	3b16 <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    3b4c:	2301      	movs	r3, #1
}
    3b4e:	1c18      	adds	r0, r3, #0
    3b50:	46bd      	mov	sp, r7
    3b52:	b002      	add	sp, #8
    3b54:	bd80      	pop	{r7, pc}
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	20003adc 	.word	0x20003adc
    3b5c:	0000772d 	.word	0x0000772d
    3b60:	200000b8 	.word	0x200000b8
    3b64:	000035d5 	.word	0x000035d5
    3b68:	20000f3c 	.word	0x20000f3c
    3b6c:	1fffffff 	.word	0x1fffffff
    3b70:	20000f40 	.word	0x20000f40
    3b74:	00003511 	.word	0x00003511

00003b78 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    3b78:	b580      	push	{r7, lr}
    3b7a:	b082      	sub	sp, #8
    3b7c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3b7e:	4b21      	ldr	r3, [pc, #132]	; (3c04 <udc_req_std_iface_get_setting+0x8c>)
    3b80:	88db      	ldrh	r3, [r3, #6]
    3b82:	2b01      	cmp	r3, #1
    3b84:	d001      	beq.n	3b8a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    3b86:	2300      	movs	r3, #0
    3b88:	e037      	b.n	3bfa <udc_req_std_iface_get_setting+0x82>
	}
	if (!udc_num_configuration) {
    3b8a:	4b1f      	ldr	r3, [pc, #124]	; (3c08 <udc_req_std_iface_get_setting+0x90>)
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d101      	bne.n	3b96 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    3b92:	2300      	movs	r3, #0
    3b94:	e031      	b.n	3bfa <udc_req_std_iface_get_setting+0x82>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3b96:	4b1b      	ldr	r3, [pc, #108]	; (3c04 <udc_req_std_iface_get_setting+0x8c>)
    3b98:	889a      	ldrh	r2, [r3, #4]
    3b9a:	1dfb      	adds	r3, r7, #7
    3b9c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3b9e:	4b1b      	ldr	r3, [pc, #108]	; (3c0c <udc_req_std_iface_get_setting+0x94>)
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	791b      	ldrb	r3, [r3, #4]
    3ba6:	1dfa      	adds	r2, r7, #7
    3ba8:	7812      	ldrb	r2, [r2, #0]
    3baa:	429a      	cmp	r2, r3
    3bac:	d301      	bcc.n	3bb2 <udc_req_std_iface_get_setting+0x3a>
		return false;
    3bae:	2300      	movs	r3, #0
    3bb0:	e023      	b.n	3bfa <udc_req_std_iface_get_setting+0x82>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3bb2:	1dfb      	adds	r3, r7, #7
    3bb4:	781b      	ldrb	r3, [r3, #0]
    3bb6:	1c18      	adds	r0, r3, #0
    3bb8:	2100      	movs	r1, #0
    3bba:	4b15      	ldr	r3, [pc, #84]	; (3c10 <udc_req_std_iface_get_setting+0x98>)
    3bbc:	4798      	blx	r3
    3bbe:	1c03      	adds	r3, r0, #0
    3bc0:	2201      	movs	r2, #1
    3bc2:	4053      	eors	r3, r2
    3bc4:	b2db      	uxtb	r3, r3
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d001      	beq.n	3bce <udc_req_std_iface_get_setting+0x56>
		return false;
    3bca:	2300      	movs	r3, #0
    3bcc:	e015      	b.n	3bfa <udc_req_std_iface_get_setting+0x82>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3bce:	4b0f      	ldr	r3, [pc, #60]	; (3c0c <udc_req_std_iface_get_setting+0x94>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	685a      	ldr	r2, [r3, #4]
    3bd4:	1dfb      	adds	r3, r7, #7
    3bd6:	781b      	ldrb	r3, [r3, #0]
    3bd8:	009b      	lsls	r3, r3, #2
    3bda:	18d3      	adds	r3, r2, r3
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    3be0:	683b      	ldr	r3, [r7, #0]
    3be2:	68db      	ldr	r3, [r3, #12]
    3be4:	4798      	blx	r3
    3be6:	1c03      	adds	r3, r0, #0
    3be8:	1c1a      	adds	r2, r3, #0
    3bea:	4b0a      	ldr	r3, [pc, #40]	; (3c14 <udc_req_std_iface_get_setting+0x9c>)
    3bec:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3bee:	4b09      	ldr	r3, [pc, #36]	; (3c14 <udc_req_std_iface_get_setting+0x9c>)
    3bf0:	1c18      	adds	r0, r3, #0
    3bf2:	2101      	movs	r1, #1
    3bf4:	4b08      	ldr	r3, [pc, #32]	; (3c18 <udc_req_std_iface_get_setting+0xa0>)
    3bf6:	4798      	blx	r3
	return true;
    3bf8:	2301      	movs	r3, #1
}
    3bfa:	1c18      	adds	r0, r3, #0
    3bfc:	46bd      	mov	sp, r7
    3bfe:	b002      	add	sp, #8
    3c00:	bd80      	pop	{r7, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	20003adc 	.word	0x20003adc
    3c08:	20000f3c 	.word	0x20000f3c
    3c0c:	20000f40 	.word	0x20000f40
    3c10:	000033c1 	.word	0x000033c1
    3c14:	20000f38 	.word	0x20000f38
    3c18:	00007799 	.word	0x00007799

00003c1c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    3c1c:	b580      	push	{r7, lr}
    3c1e:	b082      	sub	sp, #8
    3c20:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    3c22:	4b17      	ldr	r3, [pc, #92]	; (3c80 <udc_req_std_iface_set_setting+0x64>)
    3c24:	88db      	ldrh	r3, [r3, #6]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d001      	beq.n	3c2e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    3c2a:	2300      	movs	r3, #0
    3c2c:	e023      	b.n	3c76 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
    3c2e:	4b15      	ldr	r3, [pc, #84]	; (3c84 <udc_req_std_iface_set_setting+0x68>)
    3c30:	781b      	ldrb	r3, [r3, #0]
    3c32:	2b00      	cmp	r3, #0
    3c34:	d101      	bne.n	3c3a <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    3c36:	2300      	movs	r3, #0
    3c38:	e01d      	b.n	3c76 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3c3a:	4b11      	ldr	r3, [pc, #68]	; (3c80 <udc_req_std_iface_set_setting+0x64>)
    3c3c:	889a      	ldrh	r2, [r3, #4]
    3c3e:	1dfb      	adds	r3, r7, #7
    3c40:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    3c42:	4b0f      	ldr	r3, [pc, #60]	; (3c80 <udc_req_std_iface_set_setting+0x64>)
    3c44:	885a      	ldrh	r2, [r3, #2]
    3c46:	1dbb      	adds	r3, r7, #6
    3c48:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    3c4a:	1dfb      	adds	r3, r7, #7
    3c4c:	781b      	ldrb	r3, [r3, #0]
    3c4e:	1c18      	adds	r0, r3, #0
    3c50:	4b0d      	ldr	r3, [pc, #52]	; (3c88 <udc_req_std_iface_set_setting+0x6c>)
    3c52:	4798      	blx	r3
    3c54:	1c03      	adds	r3, r0, #0
    3c56:	2201      	movs	r2, #1
    3c58:	4053      	eors	r3, r2
    3c5a:	b2db      	uxtb	r3, r3
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d001      	beq.n	3c64 <udc_req_std_iface_set_setting+0x48>
		return false;
    3c60:	2300      	movs	r3, #0
    3c62:	e008      	b.n	3c76 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    3c64:	1dfb      	adds	r3, r7, #7
    3c66:	781a      	ldrb	r2, [r3, #0]
    3c68:	1dbb      	adds	r3, r7, #6
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	1c10      	adds	r0, r2, #0
    3c6e:	1c19      	adds	r1, r3, #0
    3c70:	4b06      	ldr	r3, [pc, #24]	; (3c8c <udc_req_std_iface_set_setting+0x70>)
    3c72:	4798      	blx	r3
    3c74:	1c03      	adds	r3, r0, #0
}
    3c76:	1c18      	adds	r0, r3, #0
    3c78:	46bd      	mov	sp, r7
    3c7a:	b002      	add	sp, #8
    3c7c:	bd80      	pop	{r7, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	20003adc 	.word	0x20003adc
    3c84:	20000f3c 	.word	0x20000f3c
    3c88:	00003465 	.word	0x00003465
    3c8c:	00003511 	.word	0x00003511

00003c90 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    3c94:	4b48      	ldr	r3, [pc, #288]	; (3db8 <udc_reqstd+0x128>)
    3c96:	781b      	ldrb	r3, [r3, #0]
    3c98:	b2db      	uxtb	r3, r3
    3c9a:	b25b      	sxtb	r3, r3
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	da41      	bge.n	3d24 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    3ca0:	4b45      	ldr	r3, [pc, #276]	; (3db8 <udc_reqstd+0x128>)
    3ca2:	88db      	ldrh	r3, [r3, #6]
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d101      	bne.n	3cac <udc_reqstd+0x1c>
			return false; // Error for USB host
    3ca8:	2300      	movs	r3, #0
    3caa:	e082      	b.n	3db2 <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3cac:	4b42      	ldr	r3, [pc, #264]	; (3db8 <udc_reqstd+0x128>)
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	1c1a      	adds	r2, r3, #0
    3cb2:	231f      	movs	r3, #31
    3cb4:	4013      	ands	r3, r2
    3cb6:	d114      	bne.n	3ce2 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3cb8:	4b3f      	ldr	r3, [pc, #252]	; (3db8 <udc_reqstd+0x128>)
    3cba:	785b      	ldrb	r3, [r3, #1]
    3cbc:	2b06      	cmp	r3, #6
    3cbe:	d008      	beq.n	3cd2 <udc_reqstd+0x42>
    3cc0:	2b08      	cmp	r3, #8
    3cc2:	d00a      	beq.n	3cda <udc_reqstd+0x4a>
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d000      	beq.n	3cca <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    3cc8:	e00b      	b.n	3ce2 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    3cca:	4b3c      	ldr	r3, [pc, #240]	; (3dbc <udc_reqstd+0x12c>)
    3ccc:	4798      	blx	r3
    3cce:	1c03      	adds	r3, r0, #0
    3cd0:	e06f      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    3cd2:	4b3b      	ldr	r3, [pc, #236]	; (3dc0 <udc_reqstd+0x130>)
    3cd4:	4798      	blx	r3
    3cd6:	1c03      	adds	r3, r0, #0
    3cd8:	e06b      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    3cda:	4b3a      	ldr	r3, [pc, #232]	; (3dc4 <udc_reqstd+0x134>)
    3cdc:	4798      	blx	r3
    3cde:	1c03      	adds	r3, r0, #0
    3ce0:	e067      	b.n	3db2 <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3ce2:	4b35      	ldr	r3, [pc, #212]	; (3db8 <udc_reqstd+0x128>)
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	1c1a      	adds	r2, r3, #0
    3ce8:	231f      	movs	r3, #31
    3cea:	4013      	ands	r3, r2
    3cec:	2b01      	cmp	r3, #1
    3cee:	d108      	bne.n	3d02 <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3cf0:	4b31      	ldr	r3, [pc, #196]	; (3db8 <udc_reqstd+0x128>)
    3cf2:	785b      	ldrb	r3, [r3, #1]
    3cf4:	2b0a      	cmp	r3, #10
    3cf6:	d000      	beq.n	3cfa <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    3cf8:	e003      	b.n	3d02 <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    3cfa:	4b33      	ldr	r3, [pc, #204]	; (3dc8 <udc_reqstd+0x138>)
    3cfc:	4798      	blx	r3
    3cfe:	1c03      	adds	r3, r0, #0
    3d00:	e057      	b.n	3db2 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3d02:	4b2d      	ldr	r3, [pc, #180]	; (3db8 <udc_reqstd+0x128>)
    3d04:	781b      	ldrb	r3, [r3, #0]
    3d06:	1c1a      	adds	r2, r3, #0
    3d08:	231f      	movs	r3, #31
    3d0a:	4013      	ands	r3, r2
    3d0c:	2b02      	cmp	r3, #2
    3d0e:	d14f      	bne.n	3db0 <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3d10:	4b29      	ldr	r3, [pc, #164]	; (3db8 <udc_reqstd+0x128>)
    3d12:	785b      	ldrb	r3, [r3, #1]
    3d14:	2b00      	cmp	r3, #0
    3d16:	d001      	beq.n	3d1c <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    3d18:	46c0      	nop			; (mov r8, r8)
    3d1a:	e049      	b.n	3db0 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    3d1c:	4b2b      	ldr	r3, [pc, #172]	; (3dcc <udc_reqstd+0x13c>)
    3d1e:	4798      	blx	r3
    3d20:	1c03      	adds	r3, r0, #0
    3d22:	e046      	b.n	3db2 <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3d24:	4b24      	ldr	r3, [pc, #144]	; (3db8 <udc_reqstd+0x128>)
    3d26:	781b      	ldrb	r3, [r3, #0]
    3d28:	1c1a      	adds	r2, r3, #0
    3d2a:	231f      	movs	r3, #31
    3d2c:	4013      	ands	r3, r2
    3d2e:	d119      	bne.n	3d64 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3d30:	4b21      	ldr	r3, [pc, #132]	; (3db8 <udc_reqstd+0x128>)
    3d32:	785b      	ldrb	r3, [r3, #1]
    3d34:	2b09      	cmp	r3, #9
    3d36:	d814      	bhi.n	3d62 <udc_reqstd+0xd2>
    3d38:	009a      	lsls	r2, r3, #2
    3d3a:	4b25      	ldr	r3, [pc, #148]	; (3dd0 <udc_reqstd+0x140>)
    3d3c:	18d3      	adds	r3, r2, r3
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    3d42:	4b24      	ldr	r3, [pc, #144]	; (3dd4 <udc_reqstd+0x144>)
    3d44:	4798      	blx	r3
    3d46:	1c03      	adds	r3, r0, #0
    3d48:	e033      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    3d4a:	4b23      	ldr	r3, [pc, #140]	; (3dd8 <udc_reqstd+0x148>)
    3d4c:	4798      	blx	r3
    3d4e:	1c03      	adds	r3, r0, #0
    3d50:	e02f      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    3d52:	4b22      	ldr	r3, [pc, #136]	; (3ddc <udc_reqstd+0x14c>)
    3d54:	4798      	blx	r3
    3d56:	1c03      	adds	r3, r0, #0
    3d58:	e02b      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    3d5a:	4b21      	ldr	r3, [pc, #132]	; (3de0 <udc_reqstd+0x150>)
    3d5c:	4798      	blx	r3
    3d5e:	1c03      	adds	r3, r0, #0
    3d60:	e027      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    3d62:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3d64:	4b14      	ldr	r3, [pc, #80]	; (3db8 <udc_reqstd+0x128>)
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	1c1a      	adds	r2, r3, #0
    3d6a:	231f      	movs	r3, #31
    3d6c:	4013      	ands	r3, r2
    3d6e:	2b01      	cmp	r3, #1
    3d70:	d108      	bne.n	3d84 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3d72:	4b11      	ldr	r3, [pc, #68]	; (3db8 <udc_reqstd+0x128>)
    3d74:	785b      	ldrb	r3, [r3, #1]
    3d76:	2b0b      	cmp	r3, #11
    3d78:	d000      	beq.n	3d7c <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    3d7a:	e003      	b.n	3d84 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    3d7c:	4b19      	ldr	r3, [pc, #100]	; (3de4 <udc_reqstd+0x154>)
    3d7e:	4798      	blx	r3
    3d80:	1c03      	adds	r3, r0, #0
    3d82:	e016      	b.n	3db2 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    3d84:	4b0c      	ldr	r3, [pc, #48]	; (3db8 <udc_reqstd+0x128>)
    3d86:	781b      	ldrb	r3, [r3, #0]
    3d88:	1c1a      	adds	r2, r3, #0
    3d8a:	231f      	movs	r3, #31
    3d8c:	4013      	ands	r3, r2
    3d8e:	2b02      	cmp	r3, #2
    3d90:	d10e      	bne.n	3db0 <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3d92:	4b09      	ldr	r3, [pc, #36]	; (3db8 <udc_reqstd+0x128>)
    3d94:	785b      	ldrb	r3, [r3, #1]
    3d96:	2b01      	cmp	r3, #1
    3d98:	d002      	beq.n	3da0 <udc_reqstd+0x110>
    3d9a:	2b03      	cmp	r3, #3
    3d9c:	d004      	beq.n	3da8 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    3d9e:	e007      	b.n	3db0 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    3da0:	4b11      	ldr	r3, [pc, #68]	; (3de8 <udc_reqstd+0x158>)
    3da2:	4798      	blx	r3
    3da4:	1c03      	adds	r3, r0, #0
    3da6:	e004      	b.n	3db2 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    3da8:	4b10      	ldr	r3, [pc, #64]	; (3dec <udc_reqstd+0x15c>)
    3daa:	4798      	blx	r3
    3dac:	1c03      	adds	r3, r0, #0
    3dae:	e000      	b.n	3db2 <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    3db0:	2300      	movs	r3, #0
}
    3db2:	1c18      	adds	r0, r3, #0
    3db4:	46bd      	mov	sp, r7
    3db6:	bd80      	pop	{r7, pc}
    3db8:	20003adc 	.word	0x20003adc
    3dbc:	000036b1 	.word	0x000036b1
    3dc0:	0000397d 	.word	0x0000397d
    3dc4:	00003a79 	.word	0x00003a79
    3dc8:	00003b79 	.word	0x00003b79
    3dcc:	000036e1 	.word	0x000036e1
    3dd0:	0000ab5c 	.word	0x0000ab5c
    3dd4:	00003855 	.word	0x00003855
    3dd8:	00003729 	.word	0x00003729
    3ddc:	000037a5 	.word	0x000037a5
    3de0:	00003aa9 	.word	0x00003aa9
    3de4:	00003c1d 	.word	0x00003c1d
    3de8:	0000376d 	.word	0x0000376d
    3dec:	000037e9 	.word	0x000037e9

00003df0 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b082      	sub	sp, #8
    3df4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3df6:	4b22      	ldr	r3, [pc, #136]	; (3e80 <udc_req_iface+0x90>)
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d101      	bne.n	3e02 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    3dfe:	2300      	movs	r3, #0
    3e00:	e03a      	b.n	3e78 <udc_req_iface+0x88>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3e02:	4b20      	ldr	r3, [pc, #128]	; (3e84 <udc_req_iface+0x94>)
    3e04:	889a      	ldrh	r2, [r3, #4]
    3e06:	1dfb      	adds	r3, r7, #7
    3e08:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3e0a:	4b1f      	ldr	r3, [pc, #124]	; (3e88 <udc_req_iface+0x98>)
    3e0c:	681b      	ldr	r3, [r3, #0]
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	791b      	ldrb	r3, [r3, #4]
    3e12:	1dfa      	adds	r2, r7, #7
    3e14:	7812      	ldrb	r2, [r2, #0]
    3e16:	429a      	cmp	r2, r3
    3e18:	d301      	bcc.n	3e1e <udc_req_iface+0x2e>
		return false;
    3e1a:	2300      	movs	r3, #0
    3e1c:	e02c      	b.n	3e78 <udc_req_iface+0x88>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3e1e:	1dfb      	adds	r3, r7, #7
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	1c18      	adds	r0, r3, #0
    3e24:	2100      	movs	r1, #0
    3e26:	4b19      	ldr	r3, [pc, #100]	; (3e8c <udc_req_iface+0x9c>)
    3e28:	4798      	blx	r3
    3e2a:	1c03      	adds	r3, r0, #0
    3e2c:	2201      	movs	r2, #1
    3e2e:	4053      	eors	r3, r2
    3e30:	b2db      	uxtb	r3, r3
    3e32:	2b00      	cmp	r3, #0
    3e34:	d001      	beq.n	3e3a <udc_req_iface+0x4a>
		return false;
    3e36:	2300      	movs	r3, #0
    3e38:	e01e      	b.n	3e78 <udc_req_iface+0x88>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3e3a:	4b13      	ldr	r3, [pc, #76]	; (3e88 <udc_req_iface+0x98>)
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	685a      	ldr	r2, [r3, #4]
    3e40:	1dfb      	adds	r3, r7, #7
    3e42:	781b      	ldrb	r3, [r3, #0]
    3e44:	009b      	lsls	r3, r3, #2
    3e46:	18d3      	adds	r3, r2, r3
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3e4c:	683b      	ldr	r3, [r7, #0]
    3e4e:	68db      	ldr	r3, [r3, #12]
    3e50:	4798      	blx	r3
    3e52:	1c03      	adds	r3, r0, #0
    3e54:	1dfa      	adds	r2, r7, #7
    3e56:	7812      	ldrb	r2, [r2, #0]
    3e58:	1c10      	adds	r0, r2, #0
    3e5a:	1c19      	adds	r1, r3, #0
    3e5c:	4b0b      	ldr	r3, [pc, #44]	; (3e8c <udc_req_iface+0x9c>)
    3e5e:	4798      	blx	r3
    3e60:	1c03      	adds	r3, r0, #0
    3e62:	2201      	movs	r2, #1
    3e64:	4053      	eors	r3, r2
    3e66:	b2db      	uxtb	r3, r3
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d001      	beq.n	3e70 <udc_req_iface+0x80>
		return false;
    3e6c:	2300      	movs	r3, #0
    3e6e:	e003      	b.n	3e78 <udc_req_iface+0x88>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    3e70:	683b      	ldr	r3, [r7, #0]
    3e72:	689b      	ldr	r3, [r3, #8]
    3e74:	4798      	blx	r3
    3e76:	1c03      	adds	r3, r0, #0
}
    3e78:	1c18      	adds	r0, r3, #0
    3e7a:	46bd      	mov	sp, r7
    3e7c:	b002      	add	sp, #8
    3e7e:	bd80      	pop	{r7, pc}
    3e80:	20000f3c 	.word	0x20000f3c
    3e84:	20003adc 	.word	0x20003adc
    3e88:	20000f40 	.word	0x20000f40
    3e8c:	000033c1 	.word	0x000033c1

00003e90 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b082      	sub	sp, #8
    3e94:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    3e96:	4b21      	ldr	r3, [pc, #132]	; (3f1c <udc_req_ep+0x8c>)
    3e98:	781b      	ldrb	r3, [r3, #0]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d101      	bne.n	3ea2 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    3e9e:	2300      	movs	r3, #0
    3ea0:	e038      	b.n	3f14 <udc_req_ep+0x84>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3ea2:	4b1f      	ldr	r3, [pc, #124]	; (3f20 <udc_req_ep+0x90>)
    3ea4:	889a      	ldrh	r2, [r3, #4]
    3ea6:	1dfb      	adds	r3, r7, #7
    3ea8:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3eaa:	1dfb      	adds	r3, r7, #7
    3eac:	2200      	movs	r2, #0
    3eae:	701a      	strb	r2, [r3, #0]
    3eb0:	e027      	b.n	3f02 <udc_req_ep+0x72>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    3eb2:	4b1c      	ldr	r3, [pc, #112]	; (3f24 <udc_req_ep+0x94>)
    3eb4:	681b      	ldr	r3, [r3, #0]
    3eb6:	685a      	ldr	r2, [r3, #4]
    3eb8:	1dfb      	adds	r3, r7, #7
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	009b      	lsls	r3, r3, #2
    3ebe:	18d3      	adds	r3, r2, r3
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3ec4:	683b      	ldr	r3, [r7, #0]
    3ec6:	68db      	ldr	r3, [r3, #12]
    3ec8:	4798      	blx	r3
    3eca:	1c03      	adds	r3, r0, #0
    3ecc:	1dfa      	adds	r2, r7, #7
    3ece:	7812      	ldrb	r2, [r2, #0]
    3ed0:	1c10      	adds	r0, r2, #0
    3ed2:	1c19      	adds	r1, r3, #0
    3ed4:	4b14      	ldr	r3, [pc, #80]	; (3f28 <udc_req_ep+0x98>)
    3ed6:	4798      	blx	r3
    3ed8:	1c03      	adds	r3, r0, #0
    3eda:	2201      	movs	r2, #1
    3edc:	4053      	eors	r3, r2
    3ede:	b2db      	uxtb	r3, r3
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d001      	beq.n	3ee8 <udc_req_ep+0x58>
			return false;
    3ee4:	2300      	movs	r3, #0
    3ee6:	e015      	b.n	3f14 <udc_req_ep+0x84>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    3ee8:	683b      	ldr	r3, [r7, #0]
    3eea:	689b      	ldr	r3, [r3, #8]
    3eec:	4798      	blx	r3
    3eee:	1c03      	adds	r3, r0, #0
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d001      	beq.n	3ef8 <udc_req_ep+0x68>
			return true;
    3ef4:	2301      	movs	r3, #1
    3ef6:	e00d      	b.n	3f14 <udc_req_ep+0x84>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3ef8:	1dfb      	adds	r3, r7, #7
    3efa:	781a      	ldrb	r2, [r3, #0]
    3efc:	1dfb      	adds	r3, r7, #7
    3efe:	3201      	adds	r2, #1
    3f00:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f02:	4b08      	ldr	r3, [pc, #32]	; (3f24 <udc_req_ep+0x94>)
    3f04:	681b      	ldr	r3, [r3, #0]
    3f06:	681b      	ldr	r3, [r3, #0]
    3f08:	791b      	ldrb	r3, [r3, #4]
    3f0a:	1dfa      	adds	r2, r7, #7
    3f0c:	7812      	ldrb	r2, [r2, #0]
    3f0e:	429a      	cmp	r2, r3
    3f10:	d3cf      	bcc.n	3eb2 <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    3f12:	2300      	movs	r3, #0
}
    3f14:	1c18      	adds	r0, r3, #0
    3f16:	46bd      	mov	sp, r7
    3f18:	b002      	add	sp, #8
    3f1a:	bd80      	pop	{r7, pc}
    3f1c:	20000f3c 	.word	0x20000f3c
    3f20:	20003adc 	.word	0x20003adc
    3f24:	20000f40 	.word	0x20000f40
    3f28:	000033c1 	.word	0x000033c1

00003f2c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3f30:	4b20      	ldr	r3, [pc, #128]	; (3fb4 <udc_process_setup+0x88>)
    3f32:	2200      	movs	r2, #0
    3f34:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    3f36:	4b1f      	ldr	r3, [pc, #124]	; (3fb4 <udc_process_setup+0x88>)
    3f38:	2200      	movs	r2, #0
    3f3a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    3f3c:	4b1d      	ldr	r3, [pc, #116]	; (3fb4 <udc_process_setup+0x88>)
    3f3e:	2200      	movs	r2, #0
    3f40:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    3f42:	4b1c      	ldr	r3, [pc, #112]	; (3fb4 <udc_process_setup+0x88>)
    3f44:	781b      	ldrb	r3, [r3, #0]
    3f46:	b2db      	uxtb	r3, r3
    3f48:	b25b      	sxtb	r3, r3
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	da05      	bge.n	3f5a <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3f4e:	4b19      	ldr	r3, [pc, #100]	; (3fb4 <udc_process_setup+0x88>)
    3f50:	88db      	ldrh	r3, [r3, #6]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d101      	bne.n	3f5a <udc_process_setup+0x2e>
			return false; // Error from USB host
    3f56:	2300      	movs	r3, #0
    3f58:	e029      	b.n	3fae <udc_process_setup+0x82>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    3f5a:	4b16      	ldr	r3, [pc, #88]	; (3fb4 <udc_process_setup+0x88>)
    3f5c:	781b      	ldrb	r3, [r3, #0]
    3f5e:	1c1a      	adds	r2, r3, #0
    3f60:	2360      	movs	r3, #96	; 0x60
    3f62:	4013      	ands	r3, r2
    3f64:	d106      	bne.n	3f74 <udc_process_setup+0x48>
		if (udc_reqstd()) {
    3f66:	4b14      	ldr	r3, [pc, #80]	; (3fb8 <udc_process_setup+0x8c>)
    3f68:	4798      	blx	r3
    3f6a:	1c03      	adds	r3, r0, #0
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d001      	beq.n	3f74 <udc_process_setup+0x48>
			return true;
    3f70:	2301      	movs	r3, #1
    3f72:	e01c      	b.n	3fae <udc_process_setup+0x82>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    3f74:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <udc_process_setup+0x88>)
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	1c1a      	adds	r2, r3, #0
    3f7a:	231f      	movs	r3, #31
    3f7c:	4013      	ands	r3, r2
    3f7e:	2b01      	cmp	r3, #1
    3f80:	d106      	bne.n	3f90 <udc_process_setup+0x64>
		if (udc_req_iface()) {
    3f82:	4b0e      	ldr	r3, [pc, #56]	; (3fbc <udc_process_setup+0x90>)
    3f84:	4798      	blx	r3
    3f86:	1c03      	adds	r3, r0, #0
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d001      	beq.n	3f90 <udc_process_setup+0x64>
			return true;
    3f8c:	2301      	movs	r3, #1
    3f8e:	e00e      	b.n	3fae <udc_process_setup+0x82>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    3f90:	4b08      	ldr	r3, [pc, #32]	; (3fb4 <udc_process_setup+0x88>)
    3f92:	781b      	ldrb	r3, [r3, #0]
    3f94:	1c1a      	adds	r2, r3, #0
    3f96:	231f      	movs	r3, #31
    3f98:	4013      	ands	r3, r2
    3f9a:	2b02      	cmp	r3, #2
    3f9c:	d106      	bne.n	3fac <udc_process_setup+0x80>
		if (udc_req_ep()) {
    3f9e:	4b08      	ldr	r3, [pc, #32]	; (3fc0 <udc_process_setup+0x94>)
    3fa0:	4798      	blx	r3
    3fa2:	1c03      	adds	r3, r0, #0
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d001      	beq.n	3fac <udc_process_setup+0x80>
			return true;
    3fa8:	2301      	movs	r3, #1
    3faa:	e000      	b.n	3fae <udc_process_setup+0x82>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    3fac:	2300      	movs	r3, #0
#endif
}
    3fae:	1c18      	adds	r0, r3, #0
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	20003adc 	.word	0x20003adc
    3fb8:	00003c91 	.word	0x00003c91
    3fbc:	00003df1 	.word	0x00003df1
    3fc0:	00003e91 	.word	0x00003e91

00003fc4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3fc4:	b580      	push	{r7, lr}
    3fc6:	b082      	sub	sp, #8
    3fc8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3fca:	4b0f      	ldr	r3, [pc, #60]	; (4008 <cpu_irq_enter_critical+0x44>)
    3fcc:	681b      	ldr	r3, [r3, #0]
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d112      	bne.n	3ff8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3fd2:	f3ef 8310 	mrs	r3, PRIMASK
    3fd6:	607b      	str	r3, [r7, #4]
  return(result);
    3fd8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d109      	bne.n	3ff2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3fde:	b672      	cpsid	i
    3fe0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3fe4:	4b09      	ldr	r3, [pc, #36]	; (400c <cpu_irq_enter_critical+0x48>)
    3fe6:	2200      	movs	r2, #0
    3fe8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3fea:	4b09      	ldr	r3, [pc, #36]	; (4010 <cpu_irq_enter_critical+0x4c>)
    3fec:	2201      	movs	r2, #1
    3fee:	701a      	strb	r2, [r3, #0]
    3ff0:	e002      	b.n	3ff8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3ff2:	4b07      	ldr	r3, [pc, #28]	; (4010 <cpu_irq_enter_critical+0x4c>)
    3ff4:	2200      	movs	r2, #0
    3ff6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3ff8:	4b03      	ldr	r3, [pc, #12]	; (4008 <cpu_irq_enter_critical+0x44>)
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	1c5a      	adds	r2, r3, #1
    3ffe:	4b02      	ldr	r3, [pc, #8]	; (4008 <cpu_irq_enter_critical+0x44>)
    4000:	601a      	str	r2, [r3, #0]
}
    4002:	46bd      	mov	sp, r7
    4004:	b002      	add	sp, #8
    4006:	bd80      	pop	{r7, pc}
    4008:	20000f4c 	.word	0x20000f4c
    400c:	20000254 	.word	0x20000254
    4010:	20000f50 	.word	0x20000f50

00004014 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4014:	b580      	push	{r7, lr}
    4016:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4018:	4b0a      	ldr	r3, [pc, #40]	; (4044 <cpu_irq_leave_critical+0x30>)
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	1e5a      	subs	r2, r3, #1
    401e:	4b09      	ldr	r3, [pc, #36]	; (4044 <cpu_irq_leave_critical+0x30>)
    4020:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4022:	4b08      	ldr	r3, [pc, #32]	; (4044 <cpu_irq_leave_critical+0x30>)
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	2b00      	cmp	r3, #0
    4028:	d10a      	bne.n	4040 <cpu_irq_leave_critical+0x2c>
    402a:	4b07      	ldr	r3, [pc, #28]	; (4048 <cpu_irq_leave_critical+0x34>)
    402c:	781b      	ldrb	r3, [r3, #0]
    402e:	b2db      	uxtb	r3, r3
    4030:	2b00      	cmp	r3, #0
    4032:	d005      	beq.n	4040 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4034:	4b05      	ldr	r3, [pc, #20]	; (404c <cpu_irq_leave_critical+0x38>)
    4036:	2201      	movs	r2, #1
    4038:	701a      	strb	r2, [r3, #0]
    403a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    403e:	b662      	cpsie	i
	}
}
    4040:	46bd      	mov	sp, r7
    4042:	bd80      	pop	{r7, pc}
    4044:	20000f4c 	.word	0x20000f4c
    4048:	20000f50 	.word	0x20000f50
    404c:	20000254 	.word	0x20000254

00004050 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4050:	b580      	push	{r7, lr}
    4052:	b084      	sub	sp, #16
    4054:	af00      	add	r7, sp, #0
    4056:	1c02      	adds	r2, r0, #0
    4058:	1dfb      	adds	r3, r7, #7
    405a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    405c:	1c3b      	adds	r3, r7, #0
    405e:	330f      	adds	r3, #15
    4060:	1dfa      	adds	r2, r7, #7
    4062:	7812      	ldrb	r2, [r2, #0]
    4064:	09d2      	lsrs	r2, r2, #7
    4066:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4068:	1c3b      	adds	r3, r7, #0
    406a:	330e      	adds	r3, #14
    406c:	1dfa      	adds	r2, r7, #7
    406e:	7812      	ldrb	r2, [r2, #0]
    4070:	0952      	lsrs	r2, r2, #5
    4072:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4074:	4b0d      	ldr	r3, [pc, #52]	; (40ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4076:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4078:	1c3b      	adds	r3, r7, #0
    407a:	330f      	adds	r3, #15
    407c:	781b      	ldrb	r3, [r3, #0]
    407e:	2b00      	cmp	r3, #0
    4080:	d10e      	bne.n	40a0 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    4082:	1c3b      	adds	r3, r7, #0
    4084:	330f      	adds	r3, #15
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	009b      	lsls	r3, r3, #2
    408a:	2210      	movs	r2, #16
    408c:	19d2      	adds	r2, r2, r7
    408e:	18d3      	adds	r3, r2, r3
    4090:	3b08      	subs	r3, #8
    4092:	681a      	ldr	r2, [r3, #0]
    4094:	1c3b      	adds	r3, r7, #0
    4096:	330e      	adds	r3, #14
    4098:	781b      	ldrb	r3, [r3, #0]
    409a:	01db      	lsls	r3, r3, #7
    409c:	18d3      	adds	r3, r2, r3
    409e:	e000      	b.n	40a2 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    40a0:	2300      	movs	r3, #0
	}
}
    40a2:	1c18      	adds	r0, r3, #0
    40a4:	46bd      	mov	sp, r7
    40a6:	b004      	add	sp, #16
    40a8:	bd80      	pop	{r7, pc}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	41004400 	.word	0x41004400

000040b0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
    40b6:	1c02      	adds	r2, r0, #0
    40b8:	1dfb      	adds	r3, r7, #7
    40ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    40bc:	1dfb      	adds	r3, r7, #7
    40be:	781b      	ldrb	r3, [r3, #0]
    40c0:	1c18      	adds	r0, r3, #0
    40c2:	4b03      	ldr	r3, [pc, #12]	; (40d0 <port_get_group_from_gpio_pin+0x20>)
    40c4:	4798      	blx	r3
    40c6:	1c03      	adds	r3, r0, #0
}
    40c8:	1c18      	adds	r0, r3, #0
    40ca:	46bd      	mov	sp, r7
    40cc:	b002      	add	sp, #8
    40ce:	bd80      	pop	{r7, pc}
    40d0:	00004051 	.word	0x00004051

000040d4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    40d4:	b580      	push	{r7, lr}
    40d6:	b082      	sub	sp, #8
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    40dc:	687b      	ldr	r3, [r7, #4]
    40de:	2200      	movs	r2, #0
    40e0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	2201      	movs	r2, #1
    40e6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	2200      	movs	r2, #0
    40ec:	709a      	strb	r2, [r3, #2]
}
    40ee:	46bd      	mov	sp, r7
    40f0:	b002      	add	sp, #8
    40f2:	bd80      	pop	{r7, pc}

000040f4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    40f4:	b580      	push	{r7, lr}
    40f6:	b084      	sub	sp, #16
    40f8:	af00      	add	r7, sp, #0
    40fa:	1c0a      	adds	r2, r1, #0
    40fc:	1dfb      	adds	r3, r7, #7
    40fe:	1c01      	adds	r1, r0, #0
    4100:	7019      	strb	r1, [r3, #0]
    4102:	1dbb      	adds	r3, r7, #6
    4104:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	1c18      	adds	r0, r3, #0
    410c:	4b0d      	ldr	r3, [pc, #52]	; (4144 <port_pin_set_output_level+0x50>)
    410e:	4798      	blx	r3
    4110:	1c03      	adds	r3, r0, #0
    4112:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4114:	1dfb      	adds	r3, r7, #7
    4116:	781a      	ldrb	r2, [r3, #0]
    4118:	231f      	movs	r3, #31
    411a:	4013      	ands	r3, r2
    411c:	2201      	movs	r2, #1
    411e:	1c11      	adds	r1, r2, #0
    4120:	4099      	lsls	r1, r3
    4122:	1c0b      	adds	r3, r1, #0
    4124:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4126:	1dbb      	adds	r3, r7, #6
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	2b00      	cmp	r3, #0
    412c:	d003      	beq.n	4136 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	68ba      	ldr	r2, [r7, #8]
    4132:	619a      	str	r2, [r3, #24]
    4134:	e002      	b.n	413c <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	68ba      	ldr	r2, [r7, #8]
    413a:	615a      	str	r2, [r3, #20]
	}
}
    413c:	46bd      	mov	sp, r7
    413e:	b004      	add	sp, #16
    4140:	bd80      	pop	{r7, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	000040b1 	.word	0x000040b1

00004148 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4148:	b580      	push	{r7, lr}
    414a:	b082      	sub	sp, #8
    414c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    414e:	1d3b      	adds	r3, r7, #4
    4150:	1c18      	adds	r0, r3, #0
    4152:	4b0e      	ldr	r3, [pc, #56]	; (418c <system_board_init+0x44>)
    4154:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4156:	1d3b      	adds	r3, r7, #4
    4158:	2201      	movs	r2, #1
    415a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    415c:	1d3b      	adds	r3, r7, #4
    415e:	203e      	movs	r0, #62	; 0x3e
    4160:	1c19      	adds	r1, r3, #0
    4162:	4b0b      	ldr	r3, [pc, #44]	; (4190 <system_board_init+0x48>)
    4164:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    4166:	203e      	movs	r0, #62	; 0x3e
    4168:	2101      	movs	r1, #1
    416a:	4b0a      	ldr	r3, [pc, #40]	; (4194 <system_board_init+0x4c>)
    416c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    416e:	1d3b      	adds	r3, r7, #4
    4170:	2200      	movs	r2, #0
    4172:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4174:	1d3b      	adds	r3, r7, #4
    4176:	2201      	movs	r2, #1
    4178:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    417a:	1d3b      	adds	r3, r7, #4
    417c:	200f      	movs	r0, #15
    417e:	1c19      	adds	r1, r3, #0
    4180:	4b03      	ldr	r3, [pc, #12]	; (4190 <system_board_init+0x48>)
    4182:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    4184:	46bd      	mov	sp, r7
    4186:	b002      	add	sp, #8
    4188:	bd80      	pop	{r7, pc}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	000040d5 	.word	0x000040d5
    4190:	000047a9 	.word	0x000047a9
    4194:	000040f5 	.word	0x000040f5

00004198 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4198:	b580      	push	{r7, lr}
    419a:	b084      	sub	sp, #16
    419c:	af00      	add	r7, sp, #0
    419e:	1c02      	adds	r2, r0, #0
    41a0:	1dfb      	adds	r3, r7, #7
    41a2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    41a4:	1c3b      	adds	r3, r7, #0
    41a6:	330f      	adds	r3, #15
    41a8:	1dfa      	adds	r2, r7, #7
    41aa:	7812      	ldrb	r2, [r2, #0]
    41ac:	0952      	lsrs	r2, r2, #5
    41ae:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    41b0:	1c3b      	adds	r3, r7, #0
    41b2:	330f      	adds	r3, #15
    41b4:	781b      	ldrb	r3, [r3, #0]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d10b      	bne.n	41d2 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    41ba:	4b08      	ldr	r3, [pc, #32]	; (41dc <_extint_get_eic_from_channel+0x44>)
    41bc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    41be:	1c3b      	adds	r3, r7, #0
    41c0:	330f      	adds	r3, #15
    41c2:	781b      	ldrb	r3, [r3, #0]
    41c4:	009b      	lsls	r3, r3, #2
    41c6:	2210      	movs	r2, #16
    41c8:	19d2      	adds	r2, r2, r7
    41ca:	18d3      	adds	r3, r2, r3
    41cc:	3b08      	subs	r3, #8
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	e000      	b.n	41d4 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    41d2:	2300      	movs	r3, #0
	}
}
    41d4:	1c18      	adds	r0, r3, #0
    41d6:	46bd      	mov	sp, r7
    41d8:	b004      	add	sp, #16
    41da:	bd80      	pop	{r7, pc}
    41dc:	40001800 	.word	0x40001800

000041e0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b084      	sub	sp, #16
    41e4:	af00      	add	r7, sp, #0
    41e6:	1c02      	adds	r2, r0, #0
    41e8:	1dfb      	adds	r3, r7, #7
    41ea:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    41ec:	1dfb      	adds	r3, r7, #7
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	1c18      	adds	r0, r3, #0
    41f2:	4b0c      	ldr	r3, [pc, #48]	; (4224 <extint_chan_is_detected+0x44>)
    41f4:	4798      	blx	r3
    41f6:	1c03      	adds	r3, r0, #0
    41f8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    41fa:	1dfb      	adds	r3, r7, #7
    41fc:	781a      	ldrb	r2, [r3, #0]
    41fe:	231f      	movs	r3, #31
    4200:	4013      	ands	r3, r2
    4202:	2201      	movs	r2, #1
    4204:	1c11      	adds	r1, r2, #0
    4206:	4099      	lsls	r1, r3
    4208:	1c0b      	adds	r3, r1, #0
    420a:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    420c:	68fb      	ldr	r3, [r7, #12]
    420e:	691b      	ldr	r3, [r3, #16]
    4210:	68ba      	ldr	r2, [r7, #8]
    4212:	4013      	ands	r3, r2
    4214:	1e5a      	subs	r2, r3, #1
    4216:	4193      	sbcs	r3, r2
    4218:	b2db      	uxtb	r3, r3
}
    421a:	1c18      	adds	r0, r3, #0
    421c:	46bd      	mov	sp, r7
    421e:	b004      	add	sp, #16
    4220:	bd80      	pop	{r7, pc}
    4222:	46c0      	nop			; (mov r8, r8)
    4224:	00004199 	.word	0x00004199

00004228 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    4228:	b580      	push	{r7, lr}
    422a:	b084      	sub	sp, #16
    422c:	af00      	add	r7, sp, #0
    422e:	1c02      	adds	r2, r0, #0
    4230:	1dfb      	adds	r3, r7, #7
    4232:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4234:	1dfb      	adds	r3, r7, #7
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	1c18      	adds	r0, r3, #0
    423a:	4b09      	ldr	r3, [pc, #36]	; (4260 <extint_chan_clear_detected+0x38>)
    423c:	4798      	blx	r3
    423e:	1c03      	adds	r3, r0, #0
    4240:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4242:	1dfb      	adds	r3, r7, #7
    4244:	781a      	ldrb	r2, [r3, #0]
    4246:	231f      	movs	r3, #31
    4248:	4013      	ands	r3, r2
    424a:	2201      	movs	r2, #1
    424c:	1c11      	adds	r1, r2, #0
    424e:	4099      	lsls	r1, r3
    4250:	1c0b      	adds	r3, r1, #0
    4252:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	68ba      	ldr	r2, [r7, #8]
    4258:	611a      	str	r2, [r3, #16]
}
    425a:	46bd      	mov	sp, r7
    425c:	b004      	add	sp, #16
    425e:	bd80      	pop	{r7, pc}
    4260:	00004199 	.word	0x00004199

00004264 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4264:	b580      	push	{r7, lr}
    4266:	b082      	sub	sp, #8
    4268:	af00      	add	r7, sp, #0
    426a:	6078      	str	r0, [r7, #4]
    426c:	1cfb      	adds	r3, r7, #3
    426e:	7019      	strb	r1, [r3, #0]
    4270:	1cbb      	adds	r3, r7, #2
    4272:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4274:	1cbb      	adds	r3, r7, #2
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	2b00      	cmp	r3, #0
    427a:	d001      	beq.n	4280 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    427c:	2317      	movs	r3, #23
    427e:	e019      	b.n	42b4 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4280:	1cfb      	adds	r3, r7, #3
    4282:	781a      	ldrb	r2, [r3, #0]
    4284:	4b0d      	ldr	r3, [pc, #52]	; (42bc <extint_register_callback+0x58>)
    4286:	0092      	lsls	r2, r2, #2
    4288:	58d3      	ldr	r3, [r2, r3]
    428a:	2b00      	cmp	r3, #0
    428c:	d107      	bne.n	429e <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    428e:	1cfb      	adds	r3, r7, #3
    4290:	781a      	ldrb	r2, [r3, #0]
    4292:	4b0a      	ldr	r3, [pc, #40]	; (42bc <extint_register_callback+0x58>)
    4294:	0092      	lsls	r2, r2, #2
    4296:	6879      	ldr	r1, [r7, #4]
    4298:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    429a:	2300      	movs	r3, #0
    429c:	e00a      	b.n	42b4 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    429e:	1cfb      	adds	r3, r7, #3
    42a0:	781a      	ldrb	r2, [r3, #0]
    42a2:	4b06      	ldr	r3, [pc, #24]	; (42bc <extint_register_callback+0x58>)
    42a4:	0092      	lsls	r2, r2, #2
    42a6:	58d2      	ldr	r2, [r2, r3]
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	429a      	cmp	r2, r3
    42ac:	d101      	bne.n	42b2 <extint_register_callback+0x4e>
		return STATUS_OK;
    42ae:	2300      	movs	r3, #0
    42b0:	e000      	b.n	42b4 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    42b2:	231d      	movs	r3, #29
}
    42b4:	1c18      	adds	r0, r3, #0
    42b6:	46bd      	mov	sp, r7
    42b8:	b002      	add	sp, #8
    42ba:	bd80      	pop	{r7, pc}
    42bc:	200038e4 	.word	0x200038e4

000042c0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b084      	sub	sp, #16
    42c4:	af00      	add	r7, sp, #0
    42c6:	1c0a      	adds	r2, r1, #0
    42c8:	1dfb      	adds	r3, r7, #7
    42ca:	1c01      	adds	r1, r0, #0
    42cc:	7019      	strb	r1, [r3, #0]
    42ce:	1dbb      	adds	r3, r7, #6
    42d0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    42d2:	1dbb      	adds	r3, r7, #6
    42d4:	781b      	ldrb	r3, [r3, #0]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d10e      	bne.n	42f8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    42da:	1dfb      	adds	r3, r7, #7
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	1c18      	adds	r0, r3, #0
    42e0:	4b08      	ldr	r3, [pc, #32]	; (4304 <extint_chan_enable_callback+0x44>)
    42e2:	4798      	blx	r3
    42e4:	1c03      	adds	r3, r0, #0
    42e6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    42e8:	1dfb      	adds	r3, r7, #7
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	2201      	movs	r2, #1
    42ee:	409a      	lsls	r2, r3
    42f0:	68fb      	ldr	r3, [r7, #12]
    42f2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    42f4:	2300      	movs	r3, #0
    42f6:	e000      	b.n	42fa <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    42f8:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    42fa:	1c18      	adds	r0, r3, #0
    42fc:	46bd      	mov	sp, r7
    42fe:	b004      	add	sp, #16
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	00004199 	.word	0x00004199

00004308 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4308:	b580      	push	{r7, lr}
    430a:	b084      	sub	sp, #16
    430c:	af00      	add	r7, sp, #0
    430e:	1c0a      	adds	r2, r1, #0
    4310:	1dfb      	adds	r3, r7, #7
    4312:	1c01      	adds	r1, r0, #0
    4314:	7019      	strb	r1, [r3, #0]
    4316:	1dbb      	adds	r3, r7, #6
    4318:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    431a:	1dbb      	adds	r3, r7, #6
    431c:	781b      	ldrb	r3, [r3, #0]
    431e:	2b00      	cmp	r3, #0
    4320:	d10e      	bne.n	4340 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4322:	1dfb      	adds	r3, r7, #7
    4324:	781b      	ldrb	r3, [r3, #0]
    4326:	1c18      	adds	r0, r3, #0
    4328:	4b08      	ldr	r3, [pc, #32]	; (434c <extint_chan_disable_callback+0x44>)
    432a:	4798      	blx	r3
    432c:	1c03      	adds	r3, r0, #0
    432e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4330:	1dfb      	adds	r3, r7, #7
    4332:	781b      	ldrb	r3, [r3, #0]
    4334:	2201      	movs	r2, #1
    4336:	409a      	lsls	r2, r3
    4338:	68fb      	ldr	r3, [r7, #12]
    433a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    433c:	2300      	movs	r3, #0
    433e:	e000      	b.n	4342 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4340:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4342:	1c18      	adds	r0, r3, #0
    4344:	46bd      	mov	sp, r7
    4346:	b004      	add	sp, #16
    4348:	bd80      	pop	{r7, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	00004199 	.word	0x00004199

00004350 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4350:	b580      	push	{r7, lr}
    4352:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4354:	4b15      	ldr	r3, [pc, #84]	; (43ac <EIC_Handler+0x5c>)
    4356:	2200      	movs	r2, #0
    4358:	701a      	strb	r2, [r3, #0]
    435a:	e021      	b.n	43a0 <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    435c:	4b13      	ldr	r3, [pc, #76]	; (43ac <EIC_Handler+0x5c>)
    435e:	781b      	ldrb	r3, [r3, #0]
    4360:	1c18      	adds	r0, r3, #0
    4362:	4b13      	ldr	r3, [pc, #76]	; (43b0 <EIC_Handler+0x60>)
    4364:	4798      	blx	r3
    4366:	1c03      	adds	r3, r0, #0
    4368:	2b00      	cmp	r3, #0
    436a:	d013      	beq.n	4394 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    436c:	4b0f      	ldr	r3, [pc, #60]	; (43ac <EIC_Handler+0x5c>)
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	1c18      	adds	r0, r3, #0
    4372:	4b10      	ldr	r3, [pc, #64]	; (43b4 <EIC_Handler+0x64>)
    4374:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4376:	4b0d      	ldr	r3, [pc, #52]	; (43ac <EIC_Handler+0x5c>)
    4378:	781b      	ldrb	r3, [r3, #0]
    437a:	1c1a      	adds	r2, r3, #0
    437c:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <EIC_Handler+0x68>)
    437e:	0092      	lsls	r2, r2, #2
    4380:	58d3      	ldr	r3, [r2, r3]
    4382:	2b00      	cmp	r3, #0
    4384:	d006      	beq.n	4394 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4386:	4b09      	ldr	r3, [pc, #36]	; (43ac <EIC_Handler+0x5c>)
    4388:	781b      	ldrb	r3, [r3, #0]
    438a:	1c1a      	adds	r2, r3, #0
    438c:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <EIC_Handler+0x68>)
    438e:	0092      	lsls	r2, r2, #2
    4390:	58d3      	ldr	r3, [r2, r3]
    4392:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4394:	4b05      	ldr	r3, [pc, #20]	; (43ac <EIC_Handler+0x5c>)
    4396:	781b      	ldrb	r3, [r3, #0]
    4398:	3301      	adds	r3, #1
    439a:	b2da      	uxtb	r2, r3
    439c:	4b03      	ldr	r3, [pc, #12]	; (43ac <EIC_Handler+0x5c>)
    439e:	701a      	strb	r2, [r3, #0]
    43a0:	4b02      	ldr	r3, [pc, #8]	; (43ac <EIC_Handler+0x5c>)
    43a2:	781b      	ldrb	r3, [r3, #0]
    43a4:	2b0f      	cmp	r3, #15
    43a6:	d9d9      	bls.n	435c <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    43a8:	46bd      	mov	sp, r7
    43aa:	bd80      	pop	{r7, pc}
    43ac:	200038e1 	.word	0x200038e1
    43b0:	000041e1 	.word	0x000041e1
    43b4:	00004229 	.word	0x00004229
    43b8:	200038e4 	.word	0x200038e4

000043bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    43bc:	b580      	push	{r7, lr}
    43be:	b082      	sub	sp, #8
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	2200      	movs	r2, #0
    43c8:	701a      	strb	r2, [r3, #0]
}
    43ca:	46bd      	mov	sp, r7
    43cc:	b002      	add	sp, #8
    43ce:	bd80      	pop	{r7, pc}

000043d0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    43d0:	b580      	push	{r7, lr}
    43d2:	b082      	sub	sp, #8
    43d4:	af00      	add	r7, sp, #0
    43d6:	1c02      	adds	r2, r0, #0
    43d8:	6039      	str	r1, [r7, #0]
    43da:	1dfb      	adds	r3, r7, #7
    43dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    43de:	1dfb      	adds	r3, r7, #7
    43e0:	781b      	ldrb	r3, [r3, #0]
    43e2:	2b01      	cmp	r3, #1
    43e4:	d00a      	beq.n	43fc <system_apb_clock_set_mask+0x2c>
    43e6:	2b02      	cmp	r3, #2
    43e8:	d00f      	beq.n	440a <system_apb_clock_set_mask+0x3a>
    43ea:	2b00      	cmp	r3, #0
    43ec:	d114      	bne.n	4418 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    43ee:	4b0e      	ldr	r3, [pc, #56]	; (4428 <system_apb_clock_set_mask+0x58>)
    43f0:	4a0d      	ldr	r2, [pc, #52]	; (4428 <system_apb_clock_set_mask+0x58>)
    43f2:	6991      	ldr	r1, [r2, #24]
    43f4:	683a      	ldr	r2, [r7, #0]
    43f6:	430a      	orrs	r2, r1
    43f8:	619a      	str	r2, [r3, #24]
			break;
    43fa:	e00f      	b.n	441c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    43fc:	4b0a      	ldr	r3, [pc, #40]	; (4428 <system_apb_clock_set_mask+0x58>)
    43fe:	4a0a      	ldr	r2, [pc, #40]	; (4428 <system_apb_clock_set_mask+0x58>)
    4400:	69d1      	ldr	r1, [r2, #28]
    4402:	683a      	ldr	r2, [r7, #0]
    4404:	430a      	orrs	r2, r1
    4406:	61da      	str	r2, [r3, #28]
			break;
    4408:	e008      	b.n	441c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    440a:	4b07      	ldr	r3, [pc, #28]	; (4428 <system_apb_clock_set_mask+0x58>)
    440c:	4a06      	ldr	r2, [pc, #24]	; (4428 <system_apb_clock_set_mask+0x58>)
    440e:	6a11      	ldr	r1, [r2, #32]
    4410:	683a      	ldr	r2, [r7, #0]
    4412:	430a      	orrs	r2, r1
    4414:	621a      	str	r2, [r3, #32]
			break;
    4416:	e001      	b.n	441c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4418:	2317      	movs	r3, #23
    441a:	e000      	b.n	441e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    441c:	2300      	movs	r3, #0
}
    441e:	1c18      	adds	r0, r3, #0
    4420:	46bd      	mov	sp, r7
    4422:	b002      	add	sp, #8
    4424:	bd80      	pop	{r7, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	40000400 	.word	0x40000400

0000442c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    442c:	b580      	push	{r7, lr}
    442e:	b082      	sub	sp, #8
    4430:	af00      	add	r7, sp, #0
    4432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4434:	687b      	ldr	r3, [r7, #4]
    4436:	2280      	movs	r2, #128	; 0x80
    4438:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	2200      	movs	r2, #0
    443e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	2201      	movs	r2, #1
    4444:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	2200      	movs	r2, #0
    444a:	70da      	strb	r2, [r3, #3]
}
    444c:	46bd      	mov	sp, r7
    444e:	b002      	add	sp, #8
    4450:	bd80      	pop	{r7, pc}
    4452:	46c0      	nop			; (mov r8, r8)

00004454 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4454:	b580      	push	{r7, lr}
    4456:	b082      	sub	sp, #8
    4458:	af00      	add	r7, sp, #0
    445a:	1c02      	adds	r2, r0, #0
    445c:	1dfb      	adds	r3, r7, #7
    445e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4460:	4b06      	ldr	r3, [pc, #24]	; (447c <system_interrupt_enable+0x28>)
    4462:	1dfa      	adds	r2, r7, #7
    4464:	7812      	ldrb	r2, [r2, #0]
    4466:	1c11      	adds	r1, r2, #0
    4468:	221f      	movs	r2, #31
    446a:	400a      	ands	r2, r1
    446c:	2101      	movs	r1, #1
    446e:	1c08      	adds	r0, r1, #0
    4470:	4090      	lsls	r0, r2
    4472:	1c02      	adds	r2, r0, #0
    4474:	601a      	str	r2, [r3, #0]
}
    4476:	46bd      	mov	sp, r7
    4478:	b002      	add	sp, #8
    447a:	bd80      	pop	{r7, pc}
    447c:	e000e100 	.word	0xe000e100

00004480 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4480:	b580      	push	{r7, lr}
    4482:	b084      	sub	sp, #16
    4484:	af00      	add	r7, sp, #0
    4486:	1c02      	adds	r2, r0, #0
    4488:	1dfb      	adds	r3, r7, #7
    448a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    448c:	1c3b      	adds	r3, r7, #0
    448e:	330f      	adds	r3, #15
    4490:	1dfa      	adds	r2, r7, #7
    4492:	7812      	ldrb	r2, [r2, #0]
    4494:	0952      	lsrs	r2, r2, #5
    4496:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4498:	1c3b      	adds	r3, r7, #0
    449a:	330f      	adds	r3, #15
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	2b00      	cmp	r3, #0
    44a0:	d10b      	bne.n	44ba <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    44a2:	4b08      	ldr	r3, [pc, #32]	; (44c4 <_extint_get_eic_from_channel+0x44>)
    44a4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    44a6:	1c3b      	adds	r3, r7, #0
    44a8:	330f      	adds	r3, #15
    44aa:	781b      	ldrb	r3, [r3, #0]
    44ac:	009b      	lsls	r3, r3, #2
    44ae:	2210      	movs	r2, #16
    44b0:	19d2      	adds	r2, r2, r7
    44b2:	18d3      	adds	r3, r2, r3
    44b4:	3b08      	subs	r3, #8
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	e000      	b.n	44bc <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    44ba:	2300      	movs	r3, #0
	}
}
    44bc:	1c18      	adds	r0, r3, #0
    44be:	46bd      	mov	sp, r7
    44c0:	b004      	add	sp, #16
    44c2:	bd80      	pop	{r7, pc}
    44c4:	40001800 	.word	0x40001800

000044c8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b082      	sub	sp, #8
    44cc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    44ce:	4b0f      	ldr	r3, [pc, #60]	; (450c <extint_is_syncing+0x44>)
    44d0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    44d2:	2300      	movs	r3, #0
    44d4:	607b      	str	r3, [r7, #4]
    44d6:	e011      	b.n	44fc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	009b      	lsls	r3, r3, #2
    44dc:	2208      	movs	r2, #8
    44de:	19d2      	adds	r2, r2, r7
    44e0:	18d3      	adds	r3, r2, r3
    44e2:	3b08      	subs	r3, #8
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	785b      	ldrb	r3, [r3, #1]
    44e8:	b2db      	uxtb	r3, r3
    44ea:	b2db      	uxtb	r3, r3
    44ec:	b25b      	sxtb	r3, r3
    44ee:	2b00      	cmp	r3, #0
    44f0:	da01      	bge.n	44f6 <extint_is_syncing+0x2e>
			return true;
    44f2:	2301      	movs	r3, #1
    44f4:	e006      	b.n	4504 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    44f6:	687b      	ldr	r3, [r7, #4]
    44f8:	3301      	adds	r3, #1
    44fa:	607b      	str	r3, [r7, #4]
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	2b00      	cmp	r3, #0
    4500:	d0ea      	beq.n	44d8 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4502:	2300      	movs	r3, #0
}
    4504:	1c18      	adds	r0, r3, #0
    4506:	46bd      	mov	sp, r7
    4508:	b002      	add	sp, #8
    450a:	bd80      	pop	{r7, pc}
    450c:	40001800 	.word	0x40001800

00004510 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4510:	b580      	push	{r7, lr}
    4512:	b084      	sub	sp, #16
    4514:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4516:	4b2c      	ldr	r3, [pc, #176]	; (45c8 <_system_extint_init+0xb8>)
    4518:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    451a:	2000      	movs	r0, #0
    451c:	2140      	movs	r1, #64	; 0x40
    451e:	4b2b      	ldr	r3, [pc, #172]	; (45cc <_system_extint_init+0xbc>)
    4520:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4522:	1c3b      	adds	r3, r7, #0
    4524:	1c18      	adds	r0, r3, #0
    4526:	4b2a      	ldr	r3, [pc, #168]	; (45d0 <_system_extint_init+0xc0>)
    4528:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    452a:	1c3b      	adds	r3, r7, #0
    452c:	2200      	movs	r2, #0
    452e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4530:	1c3b      	adds	r3, r7, #0
    4532:	2005      	movs	r0, #5
    4534:	1c19      	adds	r1, r3, #0
    4536:	4b27      	ldr	r3, [pc, #156]	; (45d4 <_system_extint_init+0xc4>)
    4538:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    453a:	2005      	movs	r0, #5
    453c:	4b26      	ldr	r3, [pc, #152]	; (45d8 <_system_extint_init+0xc8>)
    453e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4540:	2300      	movs	r3, #0
    4542:	60fb      	str	r3, [r7, #12]
    4544:	e016      	b.n	4574 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	009b      	lsls	r3, r3, #2
    454a:	2110      	movs	r1, #16
    454c:	19c9      	adds	r1, r1, r7
    454e:	18cb      	adds	r3, r1, r3
    4550:	3b0c      	subs	r3, #12
    4552:	681a      	ldr	r2, [r3, #0]
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	009b      	lsls	r3, r3, #2
    4558:	2110      	movs	r1, #16
    455a:	19c9      	adds	r1, r1, r7
    455c:	18cb      	adds	r3, r1, r3
    455e:	3b0c      	subs	r3, #12
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	781b      	ldrb	r3, [r3, #0]
    4564:	b2db      	uxtb	r3, r3
    4566:	2101      	movs	r1, #1
    4568:	430b      	orrs	r3, r1
    456a:	b2db      	uxtb	r3, r3
    456c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	3301      	adds	r3, #1
    4572:	60fb      	str	r3, [r7, #12]
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	2b00      	cmp	r3, #0
    4578:	d0e5      	beq.n	4546 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	4b17      	ldr	r3, [pc, #92]	; (45dc <_system_extint_init+0xcc>)
    457e:	4798      	blx	r3
    4580:	1c03      	adds	r3, r0, #0
    4582:	2b00      	cmp	r3, #0
    4584:	d1fa      	bne.n	457c <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4586:	1c3b      	adds	r3, r7, #0
    4588:	330b      	adds	r3, #11
    458a:	2200      	movs	r2, #0
    458c:	701a      	strb	r2, [r3, #0]
    458e:	e00d      	b.n	45ac <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    4590:	1c3b      	adds	r3, r7, #0
    4592:	330b      	adds	r3, #11
    4594:	781a      	ldrb	r2, [r3, #0]
    4596:	4b12      	ldr	r3, [pc, #72]	; (45e0 <_system_extint_init+0xd0>)
    4598:	0092      	lsls	r2, r2, #2
    459a:	2100      	movs	r1, #0
    459c:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    459e:	1c3b      	adds	r3, r7, #0
    45a0:	330b      	adds	r3, #11
    45a2:	781a      	ldrb	r2, [r3, #0]
    45a4:	1c3b      	adds	r3, r7, #0
    45a6:	330b      	adds	r3, #11
    45a8:	3201      	adds	r2, #1
    45aa:	701a      	strb	r2, [r3, #0]
    45ac:	1c3b      	adds	r3, r7, #0
    45ae:	330b      	adds	r3, #11
    45b0:	781b      	ldrb	r3, [r3, #0]
    45b2:	2b0f      	cmp	r3, #15
    45b4:	d9ec      	bls.n	4590 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    45b6:	2004      	movs	r0, #4
    45b8:	4b0a      	ldr	r3, [pc, #40]	; (45e4 <_system_extint_init+0xd4>)
    45ba:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    45bc:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <_system_extint_init+0xd8>)
    45be:	4798      	blx	r3
}
    45c0:	46bd      	mov	sp, r7
    45c2:	b004      	add	sp, #16
    45c4:	bd80      	pop	{r7, pc}
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	40001800 	.word	0x40001800
    45cc:	000043d1 	.word	0x000043d1
    45d0:	000043bd 	.word	0x000043bd
    45d4:	000064f5 	.word	0x000064f5
    45d8:	00006535 	.word	0x00006535
    45dc:	000044c9 	.word	0x000044c9
    45e0:	200038e4 	.word	0x200038e4
    45e4:	00004455 	.word	0x00004455
    45e8:	000045ed 	.word	0x000045ed

000045ec <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b082      	sub	sp, #8
    45f0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    45f2:	4b14      	ldr	r3, [pc, #80]	; (4644 <_extint_enable+0x58>)
    45f4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    45f6:	2300      	movs	r3, #0
    45f8:	607b      	str	r3, [r7, #4]
    45fa:	e016      	b.n	462a <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	009b      	lsls	r3, r3, #2
    4600:	2108      	movs	r1, #8
    4602:	19c9      	adds	r1, r1, r7
    4604:	18cb      	adds	r3, r1, r3
    4606:	3b08      	subs	r3, #8
    4608:	681a      	ldr	r2, [r3, #0]
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	009b      	lsls	r3, r3, #2
    460e:	2108      	movs	r1, #8
    4610:	19c9      	adds	r1, r1, r7
    4612:	18cb      	adds	r3, r1, r3
    4614:	3b08      	subs	r3, #8
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	b2db      	uxtb	r3, r3
    461c:	2102      	movs	r1, #2
    461e:	430b      	orrs	r3, r1
    4620:	b2db      	uxtb	r3, r3
    4622:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	3301      	adds	r3, #1
    4628:	607b      	str	r3, [r7, #4]
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	2b00      	cmp	r3, #0
    462e:	d0e5      	beq.n	45fc <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4630:	46c0      	nop			; (mov r8, r8)
    4632:	4b05      	ldr	r3, [pc, #20]	; (4648 <_extint_enable+0x5c>)
    4634:	4798      	blx	r3
    4636:	1c03      	adds	r3, r0, #0
    4638:	2b00      	cmp	r3, #0
    463a:	d1fa      	bne.n	4632 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    463c:	46bd      	mov	sp, r7
    463e:	b002      	add	sp, #8
    4640:	bd80      	pop	{r7, pc}
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	40001800 	.word	0x40001800
    4648:	000044c9 	.word	0x000044c9

0000464c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    464c:	b580      	push	{r7, lr}
    464e:	b082      	sub	sp, #8
    4650:	af00      	add	r7, sp, #0
    4652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	2200      	movs	r2, #0
    4658:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	2200      	movs	r2, #0
    465e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	2201      	movs	r2, #1
    4664:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	2201      	movs	r2, #1
    466a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    466c:	687b      	ldr	r3, [r7, #4]
    466e:	2200      	movs	r2, #0
    4670:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4672:	687b      	ldr	r3, [r7, #4]
    4674:	2202      	movs	r2, #2
    4676:	72da      	strb	r2, [r3, #11]
}
    4678:	46bd      	mov	sp, r7
    467a:	b002      	add	sp, #8
    467c:	bd80      	pop	{r7, pc}
    467e:	46c0      	nop			; (mov r8, r8)

00004680 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4680:	b590      	push	{r4, r7, lr}
    4682:	b087      	sub	sp, #28
    4684:	af00      	add	r7, sp, #0
    4686:	1c02      	adds	r2, r0, #0
    4688:	6039      	str	r1, [r7, #0]
    468a:	1dfb      	adds	r3, r7, #7
    468c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    468e:	1c3b      	adds	r3, r7, #0
    4690:	3308      	adds	r3, #8
    4692:	1c18      	adds	r0, r3, #0
    4694:	4b37      	ldr	r3, [pc, #220]	; (4774 <extint_chan_set_config+0xf4>)
    4696:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	685b      	ldr	r3, [r3, #4]
    469c:	b2da      	uxtb	r2, r3
    469e:	1c3b      	adds	r3, r7, #0
    46a0:	3308      	adds	r3, #8
    46a2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    46a4:	1c3b      	adds	r3, r7, #0
    46a6:	3308      	adds	r3, #8
    46a8:	2200      	movs	r2, #0
    46aa:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    46ac:	683b      	ldr	r3, [r7, #0]
    46ae:	7a1a      	ldrb	r2, [r3, #8]
    46b0:	1c3b      	adds	r3, r7, #0
    46b2:	3308      	adds	r3, #8
    46b4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    46b6:	683b      	ldr	r3, [r7, #0]
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	b2da      	uxtb	r2, r3
    46bc:	1c3b      	adds	r3, r7, #0
    46be:	3308      	adds	r3, #8
    46c0:	1c10      	adds	r0, r2, #0
    46c2:	1c19      	adds	r1, r3, #0
    46c4:	4b2c      	ldr	r3, [pc, #176]	; (4778 <extint_chan_set_config+0xf8>)
    46c6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    46c8:	1dfb      	adds	r3, r7, #7
    46ca:	781b      	ldrb	r3, [r3, #0]
    46cc:	1c18      	adds	r0, r3, #0
    46ce:	4b2b      	ldr	r3, [pc, #172]	; (477c <extint_chan_set_config+0xfc>)
    46d0:	4798      	blx	r3
    46d2:	1c03      	adds	r3, r0, #0
    46d4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    46d6:	1dfb      	adds	r3, r7, #7
    46d8:	781a      	ldrb	r2, [r3, #0]
    46da:	2307      	movs	r3, #7
    46dc:	4013      	ands	r3, r2
    46de:	009b      	lsls	r3, r3, #2
    46e0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    46e2:	683b      	ldr	r3, [r7, #0]
    46e4:	7adb      	ldrb	r3, [r3, #11]
    46e6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    46e8:	683b      	ldr	r3, [r7, #0]
    46ea:	7a9b      	ldrb	r3, [r3, #10]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d003      	beq.n	46f8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	2208      	movs	r2, #8
    46f4:	4313      	orrs	r3, r2
    46f6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    46f8:	1dfb      	adds	r3, r7, #7
    46fa:	781b      	ldrb	r3, [r3, #0]
    46fc:	08db      	lsrs	r3, r3, #3
    46fe:	b2db      	uxtb	r3, r3
    4700:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    4702:	1dfb      	adds	r3, r7, #7
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	08db      	lsrs	r3, r3, #3
    4708:	b2db      	uxtb	r3, r3
    470a:	1c19      	adds	r1, r3, #0
    470c:	693b      	ldr	r3, [r7, #16]
    470e:	3106      	adds	r1, #6
    4710:	0089      	lsls	r1, r1, #2
    4712:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4714:	68f9      	ldr	r1, [r7, #12]
    4716:	200f      	movs	r0, #15
    4718:	1c04      	adds	r4, r0, #0
    471a:	408c      	lsls	r4, r1
    471c:	1c21      	adds	r1, r4, #0
    471e:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4720:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	6978      	ldr	r0, [r7, #20]
    4726:	1c04      	adds	r4, r0, #0
    4728:	409c      	lsls	r4, r3
    472a:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    472c:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    472e:	693b      	ldr	r3, [r7, #16]
    4730:	3206      	adds	r2, #6
    4732:	0092      	lsls	r2, r2, #2
    4734:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4736:	683b      	ldr	r3, [r7, #0]
    4738:	7a5b      	ldrb	r3, [r3, #9]
    473a:	2b00      	cmp	r3, #0
    473c:	d00b      	beq.n	4756 <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    473e:	693b      	ldr	r3, [r7, #16]
    4740:	695a      	ldr	r2, [r3, #20]
    4742:	1dfb      	adds	r3, r7, #7
    4744:	781b      	ldrb	r3, [r3, #0]
    4746:	2101      	movs	r1, #1
    4748:	1c08      	adds	r0, r1, #0
    474a:	4098      	lsls	r0, r3
    474c:	1c03      	adds	r3, r0, #0
    474e:	431a      	orrs	r2, r3
    4750:	693b      	ldr	r3, [r7, #16]
    4752:	615a      	str	r2, [r3, #20]
    4754:	e00b      	b.n	476e <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4756:	693b      	ldr	r3, [r7, #16]
    4758:	695b      	ldr	r3, [r3, #20]
    475a:	1dfa      	adds	r2, r7, #7
    475c:	7812      	ldrb	r2, [r2, #0]
    475e:	2101      	movs	r1, #1
    4760:	1c0c      	adds	r4, r1, #0
    4762:	4094      	lsls	r4, r2
    4764:	1c22      	adds	r2, r4, #0
    4766:	43d2      	mvns	r2, r2
    4768:	401a      	ands	r2, r3
    476a:	693b      	ldr	r3, [r7, #16]
    476c:	615a      	str	r2, [r3, #20]
	}
}
    476e:	46bd      	mov	sp, r7
    4770:	b007      	add	sp, #28
    4772:	bd90      	pop	{r4, r7, pc}
    4774:	0000442d 	.word	0x0000442d
    4778:	000067d9 	.word	0x000067d9
    477c:	00004481 	.word	0x00004481

00004780 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4780:	b580      	push	{r7, lr}
    4782:	b082      	sub	sp, #8
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	2280      	movs	r2, #128	; 0x80
    478c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	2200      	movs	r2, #0
    4792:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	2201      	movs	r2, #1
    4798:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    479a:	687b      	ldr	r3, [r7, #4]
    479c:	2200      	movs	r2, #0
    479e:	70da      	strb	r2, [r3, #3]
}
    47a0:	46bd      	mov	sp, r7
    47a2:	b002      	add	sp, #8
    47a4:	bd80      	pop	{r7, pc}
    47a6:	46c0      	nop			; (mov r8, r8)

000047a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    47a8:	b580      	push	{r7, lr}
    47aa:	b084      	sub	sp, #16
    47ac:	af00      	add	r7, sp, #0
    47ae:	1c02      	adds	r2, r0, #0
    47b0:	6039      	str	r1, [r7, #0]
    47b2:	1dfb      	adds	r3, r7, #7
    47b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    47b6:	1c3b      	adds	r3, r7, #0
    47b8:	330c      	adds	r3, #12
    47ba:	1c18      	adds	r0, r3, #0
    47bc:	4b0f      	ldr	r3, [pc, #60]	; (47fc <port_pin_set_config+0x54>)
    47be:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    47c0:	1c3b      	adds	r3, r7, #0
    47c2:	330c      	adds	r3, #12
    47c4:	2280      	movs	r2, #128	; 0x80
    47c6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    47c8:	683b      	ldr	r3, [r7, #0]
    47ca:	781a      	ldrb	r2, [r3, #0]
    47cc:	1c3b      	adds	r3, r7, #0
    47ce:	330c      	adds	r3, #12
    47d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    47d2:	683b      	ldr	r3, [r7, #0]
    47d4:	785a      	ldrb	r2, [r3, #1]
    47d6:	1c3b      	adds	r3, r7, #0
    47d8:	330c      	adds	r3, #12
    47da:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    47dc:	683b      	ldr	r3, [r7, #0]
    47de:	789a      	ldrb	r2, [r3, #2]
    47e0:	1c3b      	adds	r3, r7, #0
    47e2:	330c      	adds	r3, #12
    47e4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    47e6:	1dfb      	adds	r3, r7, #7
    47e8:	781a      	ldrb	r2, [r3, #0]
    47ea:	1c3b      	adds	r3, r7, #0
    47ec:	330c      	adds	r3, #12
    47ee:	1c10      	adds	r0, r2, #0
    47f0:	1c19      	adds	r1, r3, #0
    47f2:	4b03      	ldr	r3, [pc, #12]	; (4800 <port_pin_set_config+0x58>)
    47f4:	4798      	blx	r3
}
    47f6:	46bd      	mov	sp, r7
    47f8:	b004      	add	sp, #16
    47fa:	bd80      	pop	{r7, pc}
    47fc:	00004781 	.word	0x00004781
    4800:	000067d9 	.word	0x000067d9

00004804 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4804:	b580      	push	{r7, lr}
    4806:	b082      	sub	sp, #8
    4808:	af00      	add	r7, sp, #0
    480a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	2200      	movs	r2, #0
    4810:	701a      	strb	r2, [r3, #0]
}
    4812:	46bd      	mov	sp, r7
    4814:	b002      	add	sp, #8
    4816:	bd80      	pop	{r7, pc}

00004818 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4818:	b5b0      	push	{r4, r5, r7, lr}
    481a:	b08e      	sub	sp, #56	; 0x38
    481c:	af00      	add	r7, sp, #0
    481e:	6138      	str	r0, [r7, #16]
    4820:	6179      	str	r1, [r7, #20]
    4822:	60ba      	str	r2, [r7, #8]
    4824:	60fb      	str	r3, [r7, #12]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4826:	2200      	movs	r2, #0
    4828:	2300      	movs	r3, #0
    482a:	62ba      	str	r2, [r7, #40]	; 0x28
    482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    482e:	2200      	movs	r2, #0
    4830:	2300      	movs	r3, #0
    4832:	623a      	str	r2, [r7, #32]
    4834:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    4836:	233f      	movs	r3, #63	; 0x3f
    4838:	637b      	str	r3, [r7, #52]	; 0x34
    483a:	e05b      	b.n	48f4 <long_division+0xdc>
		bit_shift = (uint64_t)1 << i;
    483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    483e:	3b20      	subs	r3, #32
    4840:	2b00      	cmp	r3, #0
    4842:	db05      	blt.n	4850 <long_division+0x38>
    4844:	2201      	movs	r2, #1
    4846:	1c10      	adds	r0, r2, #0
    4848:	4098      	lsls	r0, r3
    484a:	1c03      	adds	r3, r0, #0
    484c:	61fb      	str	r3, [r7, #28]
    484e:	e00d      	b.n	486c <long_division+0x54>
    4850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4852:	2220      	movs	r2, #32
    4854:	1ad3      	subs	r3, r2, r3
    4856:	2201      	movs	r2, #1
    4858:	1c11      	adds	r1, r2, #0
    485a:	40d9      	lsrs	r1, r3
    485c:	1c0b      	adds	r3, r1, #0
    485e:	2100      	movs	r1, #0
    4860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4862:	1c08      	adds	r0, r1, #0
    4864:	4090      	lsls	r0, r2
    4866:	1c02      	adds	r2, r0, #0
    4868:	4313      	orrs	r3, r2
    486a:	61fb      	str	r3, [r7, #28]
    486c:	2201      	movs	r2, #1
    486e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4870:	1c11      	adds	r1, r2, #0
    4872:	4099      	lsls	r1, r3
    4874:	1c0b      	adds	r3, r1, #0
    4876:	61bb      	str	r3, [r7, #24]

		r = r << 1;
    4878:	6a3a      	ldr	r2, [r7, #32]
    487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    487c:	1892      	adds	r2, r2, r2
    487e:	415b      	adcs	r3, r3
    4880:	623a      	str	r2, [r7, #32]
    4882:	627b      	str	r3, [r7, #36]	; 0x24

		if (n & bit_shift) {
    4884:	693b      	ldr	r3, [r7, #16]
    4886:	69ba      	ldr	r2, [r7, #24]
    4888:	1c14      	adds	r4, r2, #0
    488a:	401c      	ands	r4, r3
    488c:	697b      	ldr	r3, [r7, #20]
    488e:	69fa      	ldr	r2, [r7, #28]
    4890:	1c15      	adds	r5, r2, #0
    4892:	401d      	ands	r5, r3
    4894:	1c23      	adds	r3, r4, #0
    4896:	432b      	orrs	r3, r5
    4898:	d007      	beq.n	48aa <long_division+0x92>
			r |= 0x01;
    489a:	6a3b      	ldr	r3, [r7, #32]
    489c:	2201      	movs	r2, #1
    489e:	4313      	orrs	r3, r2
    48a0:	623b      	str	r3, [r7, #32]
    48a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48a4:	2200      	movs	r2, #0
    48a6:	4313      	orrs	r3, r2
    48a8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (r >= d) {
    48aa:	68fa      	ldr	r2, [r7, #12]
    48ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48ae:	429a      	cmp	r2, r3
    48b0:	d81d      	bhi.n	48ee <long_division+0xd6>
    48b2:	68fa      	ldr	r2, [r7, #12]
    48b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48b6:	429a      	cmp	r2, r3
    48b8:	d103      	bne.n	48c2 <long_division+0xaa>
    48ba:	68ba      	ldr	r2, [r7, #8]
    48bc:	6a3b      	ldr	r3, [r7, #32]
    48be:	429a      	cmp	r2, r3
    48c0:	d815      	bhi.n	48ee <long_division+0xd6>
			r = r - d;
    48c2:	6a3a      	ldr	r2, [r7, #32]
    48c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    48c6:	603a      	str	r2, [r7, #0]
    48c8:	607b      	str	r3, [r7, #4]
    48ca:	68ba      	ldr	r2, [r7, #8]
    48cc:	68fb      	ldr	r3, [r7, #12]
    48ce:	6838      	ldr	r0, [r7, #0]
    48d0:	6879      	ldr	r1, [r7, #4]
    48d2:	1a80      	subs	r0, r0, r2
    48d4:	4199      	sbcs	r1, r3
    48d6:	1c02      	adds	r2, r0, #0
    48d8:	1c0b      	adds	r3, r1, #0
    48da:	623a      	str	r2, [r7, #32]
    48dc:	627b      	str	r3, [r7, #36]	; 0x24
			q |= bit_shift;
    48de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    48e0:	69bb      	ldr	r3, [r7, #24]
    48e2:	4313      	orrs	r3, r2
    48e4:	62bb      	str	r3, [r7, #40]	; 0x28
    48e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    48e8:	69fb      	ldr	r3, [r7, #28]
    48ea:	4313      	orrs	r3, r2
    48ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    48ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48f0:	3b01      	subs	r3, #1
    48f2:	637b      	str	r3, [r7, #52]	; 0x34
    48f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48f6:	2b00      	cmp	r3, #0
    48f8:	daa0      	bge.n	483c <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    48fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48fc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
    48fe:	1c18      	adds	r0, r3, #0
    4900:	1c21      	adds	r1, r4, #0
    4902:	46bd      	mov	sp, r7
    4904:	b00e      	add	sp, #56	; 0x38
    4906:	bdb0      	pop	{r4, r5, r7, pc}

00004908 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4908:	b580      	push	{r7, lr}
    490a:	b086      	sub	sp, #24
    490c:	af00      	add	r7, sp, #0
    490e:	60f8      	str	r0, [r7, #12]
    4910:	60b9      	str	r1, [r7, #8]
    4912:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4914:	1c3b      	adds	r3, r7, #0
    4916:	3316      	adds	r3, #22
    4918:	2200      	movs	r2, #0
    491a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    491c:	68bb      	ldr	r3, [r7, #8]
    491e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    4920:	68bb      	ldr	r3, [r7, #8]
    4922:	085a      	lsrs	r2, r3, #1
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	429a      	cmp	r2, r3
    4928:	d201      	bcs.n	492e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    492a:	2340      	movs	r3, #64	; 0x40
    492c:	e026      	b.n	497c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    492e:	68bb      	ldr	r3, [r7, #8]
    4930:	085b      	lsrs	r3, r3, #1
    4932:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4934:	e00a      	b.n	494c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4936:	693a      	ldr	r2, [r7, #16]
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	1ad3      	subs	r3, r2, r3
    493c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    493e:	1c3b      	adds	r3, r7, #0
    4940:	3316      	adds	r3, #22
    4942:	881a      	ldrh	r2, [r3, #0]
    4944:	1c3b      	adds	r3, r7, #0
    4946:	3316      	adds	r3, #22
    4948:	3201      	adds	r2, #1
    494a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    494c:	693a      	ldr	r2, [r7, #16]
    494e:	68fb      	ldr	r3, [r7, #12]
    4950:	429a      	cmp	r2, r3
    4952:	d2f0      	bcs.n	4936 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    4954:	1c3b      	adds	r3, r7, #0
    4956:	3316      	adds	r3, #22
    4958:	1c3a      	adds	r2, r7, #0
    495a:	3216      	adds	r2, #22
    495c:	8812      	ldrh	r2, [r2, #0]
    495e:	3a01      	subs	r2, #1
    4960:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4962:	1c3b      	adds	r3, r7, #0
    4964:	3316      	adds	r3, #22
    4966:	881b      	ldrh	r3, [r3, #0]
    4968:	2bff      	cmp	r3, #255	; 0xff
    496a:	d901      	bls.n	4970 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    496c:	2340      	movs	r3, #64	; 0x40
    496e:	e005      	b.n	497c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	1c3a      	adds	r2, r7, #0
    4974:	3216      	adds	r2, #22
    4976:	8812      	ldrh	r2, [r2, #0]
    4978:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    497a:	2300      	movs	r3, #0
	}
}
    497c:	1c18      	adds	r0, r3, #0
    497e:	46bd      	mov	sp, r7
    4980:	b006      	add	sp, #24
    4982:	bd80      	pop	{r7, pc}
    4984:	0000      	movs	r0, r0
	...

00004988 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4988:	b5f0      	push	{r4, r5, r6, r7, lr}
    498a:	b09d      	sub	sp, #116	; 0x74
    498c:	af00      	add	r7, sp, #0
    498e:	63f8      	str	r0, [r7, #60]	; 0x3c
    4990:	63b9      	str	r1, [r7, #56]	; 0x38
    4992:	637a      	str	r2, [r7, #52]	; 0x34
    4994:	1c3a      	adds	r2, r7, #0
    4996:	3233      	adds	r2, #51	; 0x33
    4998:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    499a:	2300      	movs	r3, #0
    499c:	2400      	movs	r4, #0
    499e:	65bb      	str	r3, [r7, #88]	; 0x58
    49a0:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    49a2:	2300      	movs	r3, #0
    49a4:	2400      	movs	r4, #0
    49a6:	653b      	str	r3, [r7, #80]	; 0x50
    49a8:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    49aa:	2300      	movs	r3, #0
    49ac:	2400      	movs	r4, #0
    49ae:	66bb      	str	r3, [r7, #104]	; 0x68
    49b0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    49b2:	2300      	movs	r3, #0
    49b4:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    49b6:	1c3b      	adds	r3, r7, #0
    49b8:	3388      	adds	r3, #136	; 0x88
    49ba:	781a      	ldrb	r2, [r3, #0]
    49bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    49be:	435a      	muls	r2, r3
    49c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49c2:	429a      	cmp	r2, r3
    49c4:	d901      	bls.n	49ca <_sercom_get_async_baud_val+0x42>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    49c6:	2340      	movs	r3, #64	; 0x40
    49c8:	e0af      	b.n	4b2a <_sercom_get_async_baud_val+0x1a2>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    49ca:	1c3b      	adds	r3, r7, #0
    49cc:	3333      	adds	r3, #51	; 0x33
    49ce:	781b      	ldrb	r3, [r3, #0]
    49d0:	2b00      	cmp	r3, #0
    49d2:	d143      	bne.n	4a5c <_sercom_get_async_baud_val+0xd4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    49d4:	1c3b      	adds	r3, r7, #0
    49d6:	3388      	adds	r3, #136	; 0x88
    49d8:	781b      	ldrb	r3, [r3, #0]
    49da:	b2db      	uxtb	r3, r3
    49dc:	62bb      	str	r3, [r7, #40]	; 0x28
    49de:	2300      	movs	r3, #0
    49e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    49e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    49e4:	623b      	str	r3, [r7, #32]
    49e6:	2300      	movs	r3, #0
    49e8:	627b      	str	r3, [r7, #36]	; 0x24
    49ea:	4c55      	ldr	r4, [pc, #340]	; (4b40 <_sercom_get_async_baud_val+0x1b8>)
    49ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    49ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    49f0:	6a3a      	ldr	r2, [r7, #32]
    49f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49f4:	47a0      	blx	r4
    49f6:	1c03      	adds	r3, r0, #0
    49f8:	1c0c      	adds	r4, r1, #0
    49fa:	001b      	movs	r3, r3
    49fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    49fe:	2300      	movs	r3, #0
    4a00:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    4a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4a04:	61bb      	str	r3, [r7, #24]
    4a06:	2300      	movs	r3, #0
    4a08:	61fb      	str	r3, [r7, #28]
    4a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4a0c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    4a0e:	1c18      	adds	r0, r3, #0
    4a10:	1c21      	adds	r1, r4, #0
    4a12:	69ba      	ldr	r2, [r7, #24]
    4a14:	69fb      	ldr	r3, [r7, #28]
    4a16:	4c4b      	ldr	r4, [pc, #300]	; (4b44 <_sercom_get_async_baud_val+0x1bc>)
    4a18:	47a0      	blx	r4
    4a1a:	1c03      	adds	r3, r0, #0
    4a1c:	1c0c      	adds	r4, r1, #0
    4a1e:	65bb      	str	r3, [r7, #88]	; 0x58
    4a20:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4a22:	4a46      	ldr	r2, [pc, #280]	; (4b3c <_sercom_get_async_baud_val+0x1b4>)
    4a24:	4944      	ldr	r1, [pc, #272]	; (4b38 <_sercom_get_async_baud_val+0x1b0>)
    4a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4a28:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4a2a:	1c0d      	adds	r5, r1, #0
    4a2c:	1c16      	adds	r6, r2, #0
    4a2e:	1aed      	subs	r5, r5, r3
    4a30:	41a6      	sbcs	r6, r4
    4a32:	1c2b      	adds	r3, r5, #0
    4a34:	1c34      	adds	r4, r6, #0
    4a36:	653b      	str	r3, [r7, #80]	; 0x50
    4a38:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    4a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4a3c:	0c1b      	lsrs	r3, r3, #16
    4a3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4a40:	0412      	lsls	r2, r2, #16
    4a42:	617a      	str	r2, [r7, #20]
    4a44:	697e      	ldr	r6, [r7, #20]
    4a46:	431e      	orrs	r6, r3
    4a48:	617e      	str	r6, [r7, #20]
    4a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4a4c:	041b      	lsls	r3, r3, #16
    4a4e:	613b      	str	r3, [r7, #16]
    4a50:	697a      	ldr	r2, [r7, #20]
    4a52:	0013      	movs	r3, r2
    4a54:	66bb      	str	r3, [r7, #104]	; 0x68
    4a56:	2300      	movs	r3, #0
    4a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    4a5a:	e060      	b.n	4b1e <_sercom_get_async_baud_val+0x196>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4a5c:	1c3b      	adds	r3, r7, #0
    4a5e:	3333      	adds	r3, #51	; 0x33
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	2b01      	cmp	r3, #1
    4a64:	d15b      	bne.n	4b1e <_sercom_get_async_baud_val+0x196>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4a66:	1c3b      	adds	r3, r7, #0
    4a68:	3367      	adds	r3, #103	; 0x67
    4a6a:	2200      	movs	r2, #0
    4a6c:	701a      	strb	r2, [r3, #0]
    4a6e:	e040      	b.n	4af2 <_sercom_get_async_baud_val+0x16a>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    4a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4a72:	1c1d      	adds	r5, r3, #0
    4a74:	2300      	movs	r3, #0
    4a76:	1c1e      	adds	r6, r3, #0
    4a78:	0f6b      	lsrs	r3, r5, #29
    4a7a:	00f2      	lsls	r2, r6, #3
    4a7c:	4313      	orrs	r3, r2
    4a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    4a80:	00eb      	lsls	r3, r5, #3
    4a82:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    4a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4a86:	60bb      	str	r3, [r7, #8]
    4a88:	2300      	movs	r3, #0
    4a8a:	60fb      	str	r3, [r7, #12]
    4a8c:	1c3b      	adds	r3, r7, #0
    4a8e:	3388      	adds	r3, #136	; 0x88
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	b2db      	uxtb	r3, r3
    4a94:	603b      	str	r3, [r7, #0]
    4a96:	2300      	movs	r3, #0
    4a98:	607b      	str	r3, [r7, #4]
    4a9a:	4c29      	ldr	r4, [pc, #164]	; (4b40 <_sercom_get_async_baud_val+0x1b8>)
    4a9c:	68b8      	ldr	r0, [r7, #8]
    4a9e:	68f9      	ldr	r1, [r7, #12]
    4aa0:	683a      	ldr	r2, [r7, #0]
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	47a0      	blx	r4
    4aa6:	1c03      	adds	r3, r0, #0
    4aa8:	1c0c      	adds	r4, r1, #0
    4aaa:	643b      	str	r3, [r7, #64]	; 0x40
    4aac:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    4aae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    4ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ab4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    4ab6:	1c08      	adds	r0, r1, #0
    4ab8:	1c11      	adds	r1, r2, #0
    4aba:	1c1a      	adds	r2, r3, #0
    4abc:	1c23      	adds	r3, r4, #0
    4abe:	4c21      	ldr	r4, [pc, #132]	; (4b44 <_sercom_get_async_baud_val+0x1bc>)
    4ac0:	47a0      	blx	r4
    4ac2:	1c03      	adds	r3, r0, #0
    4ac4:	1c0c      	adds	r4, r1, #0
    4ac6:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    4ac8:	1c3b      	adds	r3, r7, #0
    4aca:	3367      	adds	r3, #103	; 0x67
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4ad0:	1ad3      	subs	r3, r2, r3
    4ad2:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    4ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4ad6:	08db      	lsrs	r3, r3, #3
    4ad8:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    4ada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4adc:	4b1a      	ldr	r3, [pc, #104]	; (4b48 <_sercom_get_async_baud_val+0x1c0>)
    4ade:	429a      	cmp	r2, r3
    4ae0:	d800      	bhi.n	4ae4 <_sercom_get_async_baud_val+0x15c>
				break;
    4ae2:	e00b      	b.n	4afc <_sercom_get_async_baud_val+0x174>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4ae4:	1c3b      	adds	r3, r7, #0
    4ae6:	3367      	adds	r3, #103	; 0x67
    4ae8:	781a      	ldrb	r2, [r3, #0]
    4aea:	1c3b      	adds	r3, r7, #0
    4aec:	3367      	adds	r3, #103	; 0x67
    4aee:	3201      	adds	r2, #1
    4af0:	701a      	strb	r2, [r3, #0]
    4af2:	1c3b      	adds	r3, r7, #0
    4af4:	3367      	adds	r3, #103	; 0x67
    4af6:	781b      	ldrb	r3, [r3, #0]
    4af8:	2b07      	cmp	r3, #7
    4afa:	d9b9      	bls.n	4a70 <_sercom_get_async_baud_val+0xe8>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    4afc:	1c3b      	adds	r3, r7, #0
    4afe:	3367      	adds	r3, #103	; 0x67
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	2b08      	cmp	r3, #8
    4b04:	d101      	bne.n	4b0a <_sercom_get_async_baud_val+0x182>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b06:	2340      	movs	r3, #64	; 0x40
    4b08:	e00f      	b.n	4b2a <_sercom_get_async_baud_val+0x1a2>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    4b0a:	1c3b      	adds	r3, r7, #0
    4b0c:	3367      	adds	r3, #103	; 0x67
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	035b      	lsls	r3, r3, #13
    4b12:	1c1a      	adds	r2, r3, #0
    4b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4b16:	4313      	orrs	r3, r2
    4b18:	66bb      	str	r3, [r7, #104]	; 0x68
    4b1a:	2300      	movs	r3, #0
    4b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    4b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4b20:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    4b22:	b29a      	uxth	r2, r3
    4b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b26:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4b28:	2300      	movs	r3, #0
}
    4b2a:	1c18      	adds	r0, r3, #0
    4b2c:	46bd      	mov	sp, r7
    4b2e:	b01d      	add	sp, #116	; 0x74
    4b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b32:	46c0      	nop			; (mov r8, r8)
    4b34:	46c0      	nop			; (mov r8, r8)
    4b36:	46c0      	nop			; (mov r8, r8)
    4b38:	00000000 	.word	0x00000000
    4b3c:	00000001 	.word	0x00000001
    4b40:	0000aa99 	.word	0x0000aa99
    4b44:	00004819 	.word	0x00004819
    4b48:	00001fff 	.word	0x00001fff
    4b4c:	46c0      	nop			; (mov r8, r8)
    4b4e:	46c0      	nop			; (mov r8, r8)

00004b50 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b084      	sub	sp, #16
    4b54:	af00      	add	r7, sp, #0
    4b56:	1c0a      	adds	r2, r1, #0
    4b58:	1dfb      	adds	r3, r7, #7
    4b5a:	1c01      	adds	r1, r0, #0
    4b5c:	7019      	strb	r1, [r3, #0]
    4b5e:	1dbb      	adds	r3, r7, #6
    4b60:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    4b62:	4b1a      	ldr	r3, [pc, #104]	; (4bcc <sercom_set_gclk_generator+0x7c>)
    4b64:	781b      	ldrb	r3, [r3, #0]
    4b66:	2201      	movs	r2, #1
    4b68:	4053      	eors	r3, r2
    4b6a:	b2db      	uxtb	r3, r3
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d103      	bne.n	4b78 <sercom_set_gclk_generator+0x28>
    4b70:	1dbb      	adds	r3, r7, #6
    4b72:	781b      	ldrb	r3, [r3, #0]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d01b      	beq.n	4bb0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4b78:	1c3b      	adds	r3, r7, #0
    4b7a:	330c      	adds	r3, #12
    4b7c:	1c18      	adds	r0, r3, #0
    4b7e:	4b14      	ldr	r3, [pc, #80]	; (4bd0 <sercom_set_gclk_generator+0x80>)
    4b80:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4b82:	1c3b      	adds	r3, r7, #0
    4b84:	330c      	adds	r3, #12
    4b86:	1dfa      	adds	r2, r7, #7
    4b88:	7812      	ldrb	r2, [r2, #0]
    4b8a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4b8c:	1c3b      	adds	r3, r7, #0
    4b8e:	330c      	adds	r3, #12
    4b90:	2013      	movs	r0, #19
    4b92:	1c19      	adds	r1, r3, #0
    4b94:	4b0f      	ldr	r3, [pc, #60]	; (4bd4 <sercom_set_gclk_generator+0x84>)
    4b96:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4b98:	2013      	movs	r0, #19
    4b9a:	4b0f      	ldr	r3, [pc, #60]	; (4bd8 <sercom_set_gclk_generator+0x88>)
    4b9c:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    4b9e:	4b0b      	ldr	r3, [pc, #44]	; (4bcc <sercom_set_gclk_generator+0x7c>)
    4ba0:	1dfa      	adds	r2, r7, #7
    4ba2:	7812      	ldrb	r2, [r2, #0]
    4ba4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4ba6:	4b09      	ldr	r3, [pc, #36]	; (4bcc <sercom_set_gclk_generator+0x7c>)
    4ba8:	2201      	movs	r2, #1
    4baa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4bac:	2300      	movs	r3, #0
    4bae:	e008      	b.n	4bc2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4bb0:	4b06      	ldr	r3, [pc, #24]	; (4bcc <sercom_set_gclk_generator+0x7c>)
    4bb2:	785b      	ldrb	r3, [r3, #1]
    4bb4:	1dfa      	adds	r2, r7, #7
    4bb6:	7812      	ldrb	r2, [r2, #0]
    4bb8:	429a      	cmp	r2, r3
    4bba:	d101      	bne.n	4bc0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    4bbc:	2300      	movs	r3, #0
    4bbe:	e000      	b.n	4bc2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4bc0:	231d      	movs	r3, #29
}
    4bc2:	1c18      	adds	r0, r3, #0
    4bc4:	46bd      	mov	sp, r7
    4bc6:	b004      	add	sp, #16
    4bc8:	bd80      	pop	{r7, pc}
    4bca:	46c0      	nop			; (mov r8, r8)
    4bcc:	20000f54 	.word	0x20000f54
    4bd0:	00004805 	.word	0x00004805
    4bd4:	000064f5 	.word	0x000064f5
    4bd8:	00006535 	.word	0x00006535

00004bdc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4bdc:	b580      	push	{r7, lr}
    4bde:	b082      	sub	sp, #8
    4be0:	af00      	add	r7, sp, #0
    4be2:	6078      	str	r0, [r7, #4]
    4be4:	1c0a      	adds	r2, r1, #0
    4be6:	1cfb      	adds	r3, r7, #3
    4be8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	4a4d      	ldr	r2, [pc, #308]	; (4d24 <_sercom_get_default_pad+0x148>)
    4bee:	4293      	cmp	r3, r2
    4bf0:	d03f      	beq.n	4c72 <_sercom_get_default_pad+0x96>
    4bf2:	4a4c      	ldr	r2, [pc, #304]	; (4d24 <_sercom_get_default_pad+0x148>)
    4bf4:	4293      	cmp	r3, r2
    4bf6:	d806      	bhi.n	4c06 <_sercom_get_default_pad+0x2a>
    4bf8:	4a4b      	ldr	r2, [pc, #300]	; (4d28 <_sercom_get_default_pad+0x14c>)
    4bfa:	4293      	cmp	r3, r2
    4bfc:	d00f      	beq.n	4c1e <_sercom_get_default_pad+0x42>
    4bfe:	4a4b      	ldr	r2, [pc, #300]	; (4d2c <_sercom_get_default_pad+0x150>)
    4c00:	4293      	cmp	r3, r2
    4c02:	d021      	beq.n	4c48 <_sercom_get_default_pad+0x6c>
    4c04:	e089      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c06:	4a4a      	ldr	r2, [pc, #296]	; (4d30 <_sercom_get_default_pad+0x154>)
    4c08:	4293      	cmp	r3, r2
    4c0a:	d100      	bne.n	4c0e <_sercom_get_default_pad+0x32>
    4c0c:	e05b      	b.n	4cc6 <_sercom_get_default_pad+0xea>
    4c0e:	4a49      	ldr	r2, [pc, #292]	; (4d34 <_sercom_get_default_pad+0x158>)
    4c10:	4293      	cmp	r3, r2
    4c12:	d100      	bne.n	4c16 <_sercom_get_default_pad+0x3a>
    4c14:	e06c      	b.n	4cf0 <_sercom_get_default_pad+0x114>
    4c16:	4a48      	ldr	r2, [pc, #288]	; (4d38 <_sercom_get_default_pad+0x15c>)
    4c18:	4293      	cmp	r3, r2
    4c1a:	d03f      	beq.n	4c9c <_sercom_get_default_pad+0xc0>
    4c1c:	e07d      	b.n	4d1a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c1e:	1cfb      	adds	r3, r7, #3
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	2b01      	cmp	r3, #1
    4c24:	d00a      	beq.n	4c3c <_sercom_get_default_pad+0x60>
    4c26:	dc02      	bgt.n	4c2e <_sercom_get_default_pad+0x52>
    4c28:	2b00      	cmp	r3, #0
    4c2a:	d005      	beq.n	4c38 <_sercom_get_default_pad+0x5c>
    4c2c:	e075      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c2e:	2b02      	cmp	r3, #2
    4c30:	d006      	beq.n	4c40 <_sercom_get_default_pad+0x64>
    4c32:	2b03      	cmp	r3, #3
    4c34:	d006      	beq.n	4c44 <_sercom_get_default_pad+0x68>
    4c36:	e070      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c38:	4b40      	ldr	r3, [pc, #256]	; (4d3c <_sercom_get_default_pad+0x160>)
    4c3a:	e06f      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c3c:	4b40      	ldr	r3, [pc, #256]	; (4d40 <_sercom_get_default_pad+0x164>)
    4c3e:	e06d      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c40:	4b40      	ldr	r3, [pc, #256]	; (4d44 <_sercom_get_default_pad+0x168>)
    4c42:	e06b      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c44:	4b40      	ldr	r3, [pc, #256]	; (4d48 <_sercom_get_default_pad+0x16c>)
    4c46:	e069      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c48:	1cfb      	adds	r3, r7, #3
    4c4a:	781b      	ldrb	r3, [r3, #0]
    4c4c:	2b01      	cmp	r3, #1
    4c4e:	d00a      	beq.n	4c66 <_sercom_get_default_pad+0x8a>
    4c50:	dc02      	bgt.n	4c58 <_sercom_get_default_pad+0x7c>
    4c52:	2b00      	cmp	r3, #0
    4c54:	d005      	beq.n	4c62 <_sercom_get_default_pad+0x86>
    4c56:	e060      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d006      	beq.n	4c6a <_sercom_get_default_pad+0x8e>
    4c5c:	2b03      	cmp	r3, #3
    4c5e:	d006      	beq.n	4c6e <_sercom_get_default_pad+0x92>
    4c60:	e05b      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c62:	2303      	movs	r3, #3
    4c64:	e05a      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c66:	4b39      	ldr	r3, [pc, #228]	; (4d4c <_sercom_get_default_pad+0x170>)
    4c68:	e058      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c6a:	4b39      	ldr	r3, [pc, #228]	; (4d50 <_sercom_get_default_pad+0x174>)
    4c6c:	e056      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c6e:	4b39      	ldr	r3, [pc, #228]	; (4d54 <_sercom_get_default_pad+0x178>)
    4c70:	e054      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c72:	1cfb      	adds	r3, r7, #3
    4c74:	781b      	ldrb	r3, [r3, #0]
    4c76:	2b01      	cmp	r3, #1
    4c78:	d00a      	beq.n	4c90 <_sercom_get_default_pad+0xb4>
    4c7a:	dc02      	bgt.n	4c82 <_sercom_get_default_pad+0xa6>
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d005      	beq.n	4c8c <_sercom_get_default_pad+0xb0>
    4c80:	e04b      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c82:	2b02      	cmp	r3, #2
    4c84:	d006      	beq.n	4c94 <_sercom_get_default_pad+0xb8>
    4c86:	2b03      	cmp	r3, #3
    4c88:	d006      	beq.n	4c98 <_sercom_get_default_pad+0xbc>
    4c8a:	e046      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4c8c:	4b32      	ldr	r3, [pc, #200]	; (4d58 <_sercom_get_default_pad+0x17c>)
    4c8e:	e045      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c90:	4b32      	ldr	r3, [pc, #200]	; (4d5c <_sercom_get_default_pad+0x180>)
    4c92:	e043      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c94:	4b32      	ldr	r3, [pc, #200]	; (4d60 <_sercom_get_default_pad+0x184>)
    4c96:	e041      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c98:	4b32      	ldr	r3, [pc, #200]	; (4d64 <_sercom_get_default_pad+0x188>)
    4c9a:	e03f      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4c9c:	1cfb      	adds	r3, r7, #3
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	2b01      	cmp	r3, #1
    4ca2:	d00a      	beq.n	4cba <_sercom_get_default_pad+0xde>
    4ca4:	dc02      	bgt.n	4cac <_sercom_get_default_pad+0xd0>
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d005      	beq.n	4cb6 <_sercom_get_default_pad+0xda>
    4caa:	e036      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4cac:	2b02      	cmp	r3, #2
    4cae:	d006      	beq.n	4cbe <_sercom_get_default_pad+0xe2>
    4cb0:	2b03      	cmp	r3, #3
    4cb2:	d006      	beq.n	4cc2 <_sercom_get_default_pad+0xe6>
    4cb4:	e031      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4cb6:	4b2c      	ldr	r3, [pc, #176]	; (4d68 <_sercom_get_default_pad+0x18c>)
    4cb8:	e030      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cba:	4b2c      	ldr	r3, [pc, #176]	; (4d6c <_sercom_get_default_pad+0x190>)
    4cbc:	e02e      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cbe:	4b2c      	ldr	r3, [pc, #176]	; (4d70 <_sercom_get_default_pad+0x194>)
    4cc0:	e02c      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cc2:	4b2c      	ldr	r3, [pc, #176]	; (4d74 <_sercom_get_default_pad+0x198>)
    4cc4:	e02a      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cc6:	1cfb      	adds	r3, r7, #3
    4cc8:	781b      	ldrb	r3, [r3, #0]
    4cca:	2b01      	cmp	r3, #1
    4ccc:	d00a      	beq.n	4ce4 <_sercom_get_default_pad+0x108>
    4cce:	dc02      	bgt.n	4cd6 <_sercom_get_default_pad+0xfa>
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d005      	beq.n	4ce0 <_sercom_get_default_pad+0x104>
    4cd4:	e021      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4cd6:	2b02      	cmp	r3, #2
    4cd8:	d006      	beq.n	4ce8 <_sercom_get_default_pad+0x10c>
    4cda:	2b03      	cmp	r3, #3
    4cdc:	d006      	beq.n	4cec <_sercom_get_default_pad+0x110>
    4cde:	e01c      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4ce0:	4b25      	ldr	r3, [pc, #148]	; (4d78 <_sercom_get_default_pad+0x19c>)
    4ce2:	e01b      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4ce4:	4b25      	ldr	r3, [pc, #148]	; (4d7c <_sercom_get_default_pad+0x1a0>)
    4ce6:	e019      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4ce8:	4b25      	ldr	r3, [pc, #148]	; (4d80 <_sercom_get_default_pad+0x1a4>)
    4cea:	e017      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cec:	4b25      	ldr	r3, [pc, #148]	; (4d84 <_sercom_get_default_pad+0x1a8>)
    4cee:	e015      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4cf0:	1cfb      	adds	r3, r7, #3
    4cf2:	781b      	ldrb	r3, [r3, #0]
    4cf4:	2b01      	cmp	r3, #1
    4cf6:	d00a      	beq.n	4d0e <_sercom_get_default_pad+0x132>
    4cf8:	dc02      	bgt.n	4d00 <_sercom_get_default_pad+0x124>
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d005      	beq.n	4d0a <_sercom_get_default_pad+0x12e>
    4cfe:	e00c      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4d00:	2b02      	cmp	r3, #2
    4d02:	d006      	beq.n	4d12 <_sercom_get_default_pad+0x136>
    4d04:	2b03      	cmp	r3, #3
    4d06:	d006      	beq.n	4d16 <_sercom_get_default_pad+0x13a>
    4d08:	e007      	b.n	4d1a <_sercom_get_default_pad+0x13e>
    4d0a:	4b1f      	ldr	r3, [pc, #124]	; (4d88 <_sercom_get_default_pad+0x1ac>)
    4d0c:	e006      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4d0e:	4b1f      	ldr	r3, [pc, #124]	; (4d8c <_sercom_get_default_pad+0x1b0>)
    4d10:	e004      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4d12:	4b1f      	ldr	r3, [pc, #124]	; (4d90 <_sercom_get_default_pad+0x1b4>)
    4d14:	e002      	b.n	4d1c <_sercom_get_default_pad+0x140>
    4d16:	4b1f      	ldr	r3, [pc, #124]	; (4d94 <_sercom_get_default_pad+0x1b8>)
    4d18:	e000      	b.n	4d1c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4d1a:	2300      	movs	r3, #0
}
    4d1c:	1c18      	adds	r0, r3, #0
    4d1e:	46bd      	mov	sp, r7
    4d20:	b002      	add	sp, #8
    4d22:	bd80      	pop	{r7, pc}
    4d24:	42001000 	.word	0x42001000
    4d28:	42000800 	.word	0x42000800
    4d2c:	42000c00 	.word	0x42000c00
    4d30:	42001800 	.word	0x42001800
    4d34:	42001c00 	.word	0x42001c00
    4d38:	42001400 	.word	0x42001400
    4d3c:	00040003 	.word	0x00040003
    4d40:	00050003 	.word	0x00050003
    4d44:	00060003 	.word	0x00060003
    4d48:	00070003 	.word	0x00070003
    4d4c:	00010003 	.word	0x00010003
    4d50:	001e0003 	.word	0x001e0003
    4d54:	001f0003 	.word	0x001f0003
    4d58:	00080003 	.word	0x00080003
    4d5c:	00090003 	.word	0x00090003
    4d60:	000a0003 	.word	0x000a0003
    4d64:	000b0003 	.word	0x000b0003
    4d68:	00100003 	.word	0x00100003
    4d6c:	00110003 	.word	0x00110003
    4d70:	00120003 	.word	0x00120003
    4d74:	00130003 	.word	0x00130003
    4d78:	000c0003 	.word	0x000c0003
    4d7c:	000d0003 	.word	0x000d0003
    4d80:	000e0003 	.word	0x000e0003
    4d84:	000f0003 	.word	0x000f0003
    4d88:	00160003 	.word	0x00160003
    4d8c:	00170003 	.word	0x00170003
    4d90:	00180003 	.word	0x00180003
    4d94:	00190003 	.word	0x00190003

00004d98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4d98:	b590      	push	{r4, r7, lr}
    4d9a:	b08b      	sub	sp, #44	; 0x2c
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4da0:	1c3b      	adds	r3, r7, #0
    4da2:	330c      	adds	r3, #12
    4da4:	4a0e      	ldr	r2, [pc, #56]	; (4de0 <_sercom_get_sercom_inst_index+0x48>)
    4da6:	ca13      	ldmia	r2!, {r0, r1, r4}
    4da8:	c313      	stmia	r3!, {r0, r1, r4}
    4daa:	ca13      	ldmia	r2!, {r0, r1, r4}
    4dac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4dae:	2300      	movs	r3, #0
    4db0:	627b      	str	r3, [r7, #36]	; 0x24
    4db2:	e00d      	b.n	4dd0 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4db4:	687a      	ldr	r2, [r7, #4]
    4db6:	1c3b      	adds	r3, r7, #0
    4db8:	330c      	adds	r3, #12
    4dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4dbc:	0089      	lsls	r1, r1, #2
    4dbe:	58cb      	ldr	r3, [r1, r3]
    4dc0:	429a      	cmp	r2, r3
    4dc2:	d102      	bne.n	4dca <_sercom_get_sercom_inst_index+0x32>
			return i;
    4dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dc6:	b2db      	uxtb	r3, r3
    4dc8:	e006      	b.n	4dd8 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dcc:	3301      	adds	r3, #1
    4dce:	627b      	str	r3, [r7, #36]	; 0x24
    4dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dd2:	2b05      	cmp	r3, #5
    4dd4:	d9ee      	bls.n	4db4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4dd6:	2300      	movs	r3, #0
}
    4dd8:	1c18      	adds	r0, r3, #0
    4dda:	46bd      	mov	sp, r7
    4ddc:	b00b      	add	sp, #44	; 0x2c
    4dde:	bd90      	pop	{r4, r7, pc}
    4de0:	0000ab84 	.word	0x0000ab84

00004de4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4de4:	b580      	push	{r7, lr}
    4de6:	b082      	sub	sp, #8
    4de8:	af00      	add	r7, sp, #0
    4dea:	1c02      	adds	r2, r0, #0
    4dec:	1dfb      	adds	r3, r7, #7
    4dee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4df0:	46bd      	mov	sp, r7
    4df2:	b002      	add	sp, #8
    4df4:	bd80      	pop	{r7, pc}
    4df6:	46c0      	nop			; (mov r8, r8)

00004df8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b084      	sub	sp, #16
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	1c02      	adds	r2, r0, #0
    4e00:	6039      	str	r1, [r7, #0]
    4e02:	1dfb      	adds	r3, r7, #7
    4e04:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    4e06:	4b13      	ldr	r3, [pc, #76]	; (4e54 <_sercom_set_handler+0x5c>)
    4e08:	781b      	ldrb	r3, [r3, #0]
    4e0a:	2201      	movs	r2, #1
    4e0c:	4053      	eors	r3, r2
    4e0e:	b2db      	uxtb	r3, r3
    4e10:	2b00      	cmp	r3, #0
    4e12:	d015      	beq.n	4e40 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4e14:	2300      	movs	r3, #0
    4e16:	60fb      	str	r3, [r7, #12]
    4e18:	e00c      	b.n	4e34 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4e1a:	4b0f      	ldr	r3, [pc, #60]	; (4e58 <_sercom_set_handler+0x60>)
    4e1c:	68fa      	ldr	r2, [r7, #12]
    4e1e:	0092      	lsls	r2, r2, #2
    4e20:	490e      	ldr	r1, [pc, #56]	; (4e5c <_sercom_set_handler+0x64>)
    4e22:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4e24:	4b0e      	ldr	r3, [pc, #56]	; (4e60 <_sercom_set_handler+0x68>)
    4e26:	68fa      	ldr	r2, [r7, #12]
    4e28:	0092      	lsls	r2, r2, #2
    4e2a:	2100      	movs	r1, #0
    4e2c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4e2e:	68fb      	ldr	r3, [r7, #12]
    4e30:	3301      	adds	r3, #1
    4e32:	60fb      	str	r3, [r7, #12]
    4e34:	68fb      	ldr	r3, [r7, #12]
    4e36:	2b05      	cmp	r3, #5
    4e38:	d9ef      	bls.n	4e1a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4e3a:	4b06      	ldr	r3, [pc, #24]	; (4e54 <_sercom_set_handler+0x5c>)
    4e3c:	2201      	movs	r2, #1
    4e3e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4e40:	1dfb      	adds	r3, r7, #7
    4e42:	781a      	ldrb	r2, [r3, #0]
    4e44:	4b04      	ldr	r3, [pc, #16]	; (4e58 <_sercom_set_handler+0x60>)
    4e46:	0092      	lsls	r2, r2, #2
    4e48:	6839      	ldr	r1, [r7, #0]
    4e4a:	50d1      	str	r1, [r2, r3]
}
    4e4c:	46bd      	mov	sp, r7
    4e4e:	b004      	add	sp, #16
    4e50:	bd80      	pop	{r7, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	20000f58 	.word	0x20000f58
    4e58:	20000f5c 	.word	0x20000f5c
    4e5c:	00004de5 	.word	0x00004de5
    4e60:	20003924 	.word	0x20003924

00004e64 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4e64:	b590      	push	{r4, r7, lr}
    4e66:	b085      	sub	sp, #20
    4e68:	af00      	add	r7, sp, #0
    4e6a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4e6c:	1c3a      	adds	r2, r7, #0
    4e6e:	3208      	adds	r2, #8
    4e70:	4b0e      	ldr	r3, [pc, #56]	; (4eac <_sercom_get_interrupt_vector+0x48>)
    4e72:	1c11      	adds	r1, r2, #0
    4e74:	1c1a      	adds	r2, r3, #0
    4e76:	2306      	movs	r3, #6
    4e78:	1c08      	adds	r0, r1, #0
    4e7a:	1c11      	adds	r1, r2, #0
    4e7c:	1c1a      	adds	r2, r3, #0
    4e7e:	4b0c      	ldr	r3, [pc, #48]	; (4eb0 <_sercom_get_interrupt_vector+0x4c>)
    4e80:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4e82:	1c3c      	adds	r4, r7, #0
    4e84:	340f      	adds	r4, #15
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	1c18      	adds	r0, r3, #0
    4e8a:	4b0a      	ldr	r3, [pc, #40]	; (4eb4 <_sercom_get_interrupt_vector+0x50>)
    4e8c:	4798      	blx	r3
    4e8e:	1c03      	adds	r3, r0, #0
    4e90:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4e92:	1c3b      	adds	r3, r7, #0
    4e94:	330f      	adds	r3, #15
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	1c3a      	adds	r2, r7, #0
    4e9a:	3208      	adds	r2, #8
    4e9c:	5cd3      	ldrb	r3, [r2, r3]
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	b25b      	sxtb	r3, r3
}
    4ea2:	1c18      	adds	r0, r3, #0
    4ea4:	46bd      	mov	sp, r7
    4ea6:	b005      	add	sp, #20
    4ea8:	bd90      	pop	{r4, r7, pc}
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	0000ab9c 	.word	0x0000ab9c
    4eb0:	0000ab29 	.word	0x0000ab29
    4eb4:	00004d99 	.word	0x00004d99

00004eb8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4eb8:	b580      	push	{r7, lr}
    4eba:	af00      	add	r7, sp, #0
    4ebc:	4b02      	ldr	r3, [pc, #8]	; (4ec8 <SERCOM0_Handler+0x10>)
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	2000      	movs	r0, #0
    4ec2:	4798      	blx	r3
    4ec4:	46bd      	mov	sp, r7
    4ec6:	bd80      	pop	{r7, pc}
    4ec8:	20000f5c 	.word	0x20000f5c

00004ecc <SERCOM1_Handler>:
    4ecc:	b580      	push	{r7, lr}
    4ece:	af00      	add	r7, sp, #0
    4ed0:	4b02      	ldr	r3, [pc, #8]	; (4edc <SERCOM1_Handler+0x10>)
    4ed2:	685b      	ldr	r3, [r3, #4]
    4ed4:	2001      	movs	r0, #1
    4ed6:	4798      	blx	r3
    4ed8:	46bd      	mov	sp, r7
    4eda:	bd80      	pop	{r7, pc}
    4edc:	20000f5c 	.word	0x20000f5c

00004ee0 <SERCOM2_Handler>:
    4ee0:	b580      	push	{r7, lr}
    4ee2:	af00      	add	r7, sp, #0
    4ee4:	4b02      	ldr	r3, [pc, #8]	; (4ef0 <SERCOM2_Handler+0x10>)
    4ee6:	689b      	ldr	r3, [r3, #8]
    4ee8:	2002      	movs	r0, #2
    4eea:	4798      	blx	r3
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}
    4ef0:	20000f5c 	.word	0x20000f5c

00004ef4 <SERCOM3_Handler>:
    4ef4:	b580      	push	{r7, lr}
    4ef6:	af00      	add	r7, sp, #0
    4ef8:	4b02      	ldr	r3, [pc, #8]	; (4f04 <SERCOM3_Handler+0x10>)
    4efa:	68db      	ldr	r3, [r3, #12]
    4efc:	2003      	movs	r0, #3
    4efe:	4798      	blx	r3
    4f00:	46bd      	mov	sp, r7
    4f02:	bd80      	pop	{r7, pc}
    4f04:	20000f5c 	.word	0x20000f5c

00004f08 <SERCOM4_Handler>:
    4f08:	b580      	push	{r7, lr}
    4f0a:	af00      	add	r7, sp, #0
    4f0c:	4b02      	ldr	r3, [pc, #8]	; (4f18 <SERCOM4_Handler+0x10>)
    4f0e:	691b      	ldr	r3, [r3, #16]
    4f10:	2004      	movs	r0, #4
    4f12:	4798      	blx	r3
    4f14:	46bd      	mov	sp, r7
    4f16:	bd80      	pop	{r7, pc}
    4f18:	20000f5c 	.word	0x20000f5c

00004f1c <SERCOM5_Handler>:
    4f1c:	b580      	push	{r7, lr}
    4f1e:	af00      	add	r7, sp, #0
    4f20:	4b02      	ldr	r3, [pc, #8]	; (4f2c <SERCOM5_Handler+0x10>)
    4f22:	695b      	ldr	r3, [r3, #20]
    4f24:	2005      	movs	r0, #5
    4f26:	4798      	blx	r3
    4f28:	46bd      	mov	sp, r7
    4f2a:	bd80      	pop	{r7, pc}
    4f2c:	20000f5c 	.word	0x20000f5c

00004f30 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4f30:	b580      	push	{r7, lr}
    4f32:	b082      	sub	sp, #8
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	2200      	movs	r2, #0
    4f3c:	701a      	strb	r2, [r3, #0]
}
    4f3e:	46bd      	mov	sp, r7
    4f40:	b002      	add	sp, #8
    4f42:	bd80      	pop	{r7, pc}

00004f44 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4f44:	b580      	push	{r7, lr}
    4f46:	b082      	sub	sp, #8
    4f48:	af00      	add	r7, sp, #0
    4f4a:	1c02      	adds	r2, r0, #0
    4f4c:	6039      	str	r1, [r7, #0]
    4f4e:	1dfb      	adds	r3, r7, #7
    4f50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4f52:	1dfb      	adds	r3, r7, #7
    4f54:	781b      	ldrb	r3, [r3, #0]
    4f56:	2b01      	cmp	r3, #1
    4f58:	d00a      	beq.n	4f70 <system_apb_clock_set_mask+0x2c>
    4f5a:	2b02      	cmp	r3, #2
    4f5c:	d00f      	beq.n	4f7e <system_apb_clock_set_mask+0x3a>
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d114      	bne.n	4f8c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4f62:	4b0e      	ldr	r3, [pc, #56]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f64:	4a0d      	ldr	r2, [pc, #52]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f66:	6991      	ldr	r1, [r2, #24]
    4f68:	683a      	ldr	r2, [r7, #0]
    4f6a:	430a      	orrs	r2, r1
    4f6c:	619a      	str	r2, [r3, #24]
			break;
    4f6e:	e00f      	b.n	4f90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4f70:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f72:	4a0a      	ldr	r2, [pc, #40]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f74:	69d1      	ldr	r1, [r2, #28]
    4f76:	683a      	ldr	r2, [r7, #0]
    4f78:	430a      	orrs	r2, r1
    4f7a:	61da      	str	r2, [r3, #28]
			break;
    4f7c:	e008      	b.n	4f90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4f7e:	4b07      	ldr	r3, [pc, #28]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f80:	4a06      	ldr	r2, [pc, #24]	; (4f9c <system_apb_clock_set_mask+0x58>)
    4f82:	6a11      	ldr	r1, [r2, #32]
    4f84:	683a      	ldr	r2, [r7, #0]
    4f86:	430a      	orrs	r2, r1
    4f88:	621a      	str	r2, [r3, #32]
			break;
    4f8a:	e001      	b.n	4f90 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4f8c:	2317      	movs	r3, #23
    4f8e:	e000      	b.n	4f92 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4f90:	2300      	movs	r3, #0
}
    4f92:	1c18      	adds	r0, r3, #0
    4f94:	46bd      	mov	sp, r7
    4f96:	b002      	add	sp, #8
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	40000400 	.word	0x40000400

00004fa0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b082      	sub	sp, #8
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	2280      	movs	r2, #128	; 0x80
    4fac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fae:	687b      	ldr	r3, [r7, #4]
    4fb0:	2200      	movs	r2, #0
    4fb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4fb4:	687b      	ldr	r3, [r7, #4]
    4fb6:	2201      	movs	r2, #1
    4fb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	2200      	movs	r2, #0
    4fbe:	70da      	strb	r2, [r3, #3]
}
    4fc0:	46bd      	mov	sp, r7
    4fc2:	b002      	add	sp, #8
    4fc4:	bd80      	pop	{r7, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)

00004fc8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4fc8:	b580      	push	{r7, lr}
    4fca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4fcc:	4b05      	ldr	r3, [pc, #20]	; (4fe4 <system_is_debugger_present+0x1c>)
    4fce:	789b      	ldrb	r3, [r3, #2]
    4fd0:	b2db      	uxtb	r3, r3
    4fd2:	1c1a      	adds	r2, r3, #0
    4fd4:	2302      	movs	r3, #2
    4fd6:	4013      	ands	r3, r2
    4fd8:	1e5a      	subs	r2, r3, #1
    4fda:	4193      	sbcs	r3, r2
    4fdc:	b2db      	uxtb	r3, r3
}
    4fde:	1c18      	adds	r0, r3, #0
    4fe0:	46bd      	mov	sp, r7
    4fe2:	bd80      	pop	{r7, pc}
    4fe4:	41002000 	.word	0x41002000

00004fe8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4fe8:	b580      	push	{r7, lr}
    4fea:	b084      	sub	sp, #16
    4fec:	af00      	add	r7, sp, #0
    4fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4ff6:	68fb      	ldr	r3, [r7, #12]
    4ff8:	69db      	ldr	r3, [r3, #28]
    4ffa:	1e5a      	subs	r2, r3, #1
    4ffc:	4193      	sbcs	r3, r2
    4ffe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5000:	1c18      	adds	r0, r3, #0
    5002:	46bd      	mov	sp, r7
    5004:	b004      	add	sp, #16
    5006:	bd80      	pop	{r7, pc}

00005008 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5008:	b580      	push	{r7, lr}
    500a:	b082      	sub	sp, #8
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5010:	46c0      	nop			; (mov r8, r8)
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	1c18      	adds	r0, r3, #0
    5016:	4b04      	ldr	r3, [pc, #16]	; (5028 <_usart_wait_for_sync+0x20>)
    5018:	4798      	blx	r3
    501a:	1c03      	adds	r3, r0, #0
    501c:	2b00      	cmp	r3, #0
    501e:	d1f8      	bne.n	5012 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5020:	46bd      	mov	sp, r7
    5022:	b002      	add	sp, #8
    5024:	bd80      	pop	{r7, pc}
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	00004fe9 	.word	0x00004fe9

0000502c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    502c:	b5b0      	push	{r4, r5, r7, lr}
    502e:	b08c      	sub	sp, #48	; 0x30
    5030:	af02      	add	r7, sp, #8
    5032:	6078      	str	r0, [r7, #4]
    5034:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5036:	687b      	ldr	r3, [r7, #4]
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	681b      	ldr	r3, [r3, #0]
    5040:	1c18      	adds	r0, r3, #0
    5042:	4bad      	ldr	r3, [pc, #692]	; (52f8 <_usart_set_config+0x2cc>)
    5044:	4798      	blx	r3
    5046:	1c03      	adds	r3, r0, #0
    5048:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    504a:	697b      	ldr	r3, [r7, #20]
    504c:	3314      	adds	r3, #20
    504e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5050:	2300      	movs	r3, #0
    5052:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5054:	2300      	movs	r3, #0
    5056:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    5058:	1c3b      	adds	r3, r7, #0
    505a:	330e      	adds	r3, #14
    505c:	2200      	movs	r2, #0
    505e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5060:	1c3b      	adds	r3, r7, #0
    5062:	331f      	adds	r3, #31
    5064:	2200      	movs	r2, #0
    5066:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5068:	1c3b      	adds	r3, r7, #0
    506a:	331e      	adds	r3, #30
    506c:	2210      	movs	r2, #16
    506e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5070:	683b      	ldr	r3, [r7, #0]
    5072:	8a1b      	ldrh	r3, [r3, #16]
    5074:	2280      	movs	r2, #128	; 0x80
    5076:	01d2      	lsls	r2, r2, #7
    5078:	4293      	cmp	r3, r2
    507a:	d01c      	beq.n	50b6 <_usart_set_config+0x8a>
    507c:	2280      	movs	r2, #128	; 0x80
    507e:	01d2      	lsls	r2, r2, #7
    5080:	4293      	cmp	r3, r2
    5082:	dc06      	bgt.n	5092 <_usart_set_config+0x66>
    5084:	2b00      	cmp	r3, #0
    5086:	d00d      	beq.n	50a4 <_usart_set_config+0x78>
    5088:	2280      	movs	r2, #128	; 0x80
    508a:	0192      	lsls	r2, r2, #6
    508c:	4293      	cmp	r3, r2
    508e:	d024      	beq.n	50da <_usart_set_config+0xae>
    5090:	e035      	b.n	50fe <_usart_set_config+0xd2>
    5092:	22c0      	movs	r2, #192	; 0xc0
    5094:	01d2      	lsls	r2, r2, #7
    5096:	4293      	cmp	r3, r2
    5098:	d028      	beq.n	50ec <_usart_set_config+0xc0>
    509a:	2280      	movs	r2, #128	; 0x80
    509c:	0212      	lsls	r2, r2, #8
    509e:	4293      	cmp	r3, r2
    50a0:	d012      	beq.n	50c8 <_usart_set_config+0x9c>
    50a2:	e02c      	b.n	50fe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    50a4:	1c3b      	adds	r3, r7, #0
    50a6:	331f      	adds	r3, #31
    50a8:	2200      	movs	r2, #0
    50aa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    50ac:	1c3b      	adds	r3, r7, #0
    50ae:	331e      	adds	r3, #30
    50b0:	2210      	movs	r2, #16
    50b2:	701a      	strb	r2, [r3, #0]
			break;
    50b4:	e023      	b.n	50fe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    50b6:	1c3b      	adds	r3, r7, #0
    50b8:	331f      	adds	r3, #31
    50ba:	2200      	movs	r2, #0
    50bc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    50be:	1c3b      	adds	r3, r7, #0
    50c0:	331e      	adds	r3, #30
    50c2:	2208      	movs	r2, #8
    50c4:	701a      	strb	r2, [r3, #0]
			break;
    50c6:	e01a      	b.n	50fe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    50c8:	1c3b      	adds	r3, r7, #0
    50ca:	331f      	adds	r3, #31
    50cc:	2200      	movs	r2, #0
    50ce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    50d0:	1c3b      	adds	r3, r7, #0
    50d2:	331e      	adds	r3, #30
    50d4:	2203      	movs	r2, #3
    50d6:	701a      	strb	r2, [r3, #0]
			break;
    50d8:	e011      	b.n	50fe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    50da:	1c3b      	adds	r3, r7, #0
    50dc:	331f      	adds	r3, #31
    50de:	2201      	movs	r2, #1
    50e0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    50e2:	1c3b      	adds	r3, r7, #0
    50e4:	331e      	adds	r3, #30
    50e6:	2210      	movs	r2, #16
    50e8:	701a      	strb	r2, [r3, #0]
			break;
    50ea:	e008      	b.n	50fe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    50ec:	1c3b      	adds	r3, r7, #0
    50ee:	331f      	adds	r3, #31
    50f0:	2201      	movs	r2, #1
    50f2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    50f4:	1c3b      	adds	r3, r7, #0
    50f6:	331e      	adds	r3, #30
    50f8:	2208      	movs	r2, #8
    50fa:	701a      	strb	r2, [r3, #0]
			break;
    50fc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    50fe:	683b      	ldr	r3, [r7, #0]
    5100:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5102:	683b      	ldr	r3, [r7, #0]
    5104:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5106:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5108:	683b      	ldr	r3, [r7, #0]
    510a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    510c:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    510e:	683b      	ldr	r3, [r7, #0]
    5110:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5112:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5114:	683b      	ldr	r3, [r7, #0]
    5116:	7e1b      	ldrb	r3, [r3, #24]
    5118:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    511a:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    511c:	6839      	ldr	r1, [r7, #0]
    511e:	2326      	movs	r3, #38	; 0x26
    5120:	5ccb      	ldrb	r3, [r1, r3]
    5122:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5124:	4313      	orrs	r3, r2
    5126:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    5128:	1c3b      	adds	r3, r7, #0
    512a:	331d      	adds	r3, #29
    512c:	2200      	movs	r2, #0
    512e:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    5130:	683b      	ldr	r3, [r7, #0]
    5132:	685b      	ldr	r3, [r3, #4]
    5134:	2b00      	cmp	r3, #0
    5136:	d020      	beq.n	517a <_usart_set_config+0x14e>
    5138:	2280      	movs	r2, #128	; 0x80
    513a:	0552      	lsls	r2, r2, #21
    513c:	4293      	cmp	r3, r2
    513e:	d14e      	bne.n	51de <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5140:	683a      	ldr	r2, [r7, #0]
    5142:	2327      	movs	r3, #39	; 0x27
    5144:	5cd3      	ldrb	r3, [r2, r3]
    5146:	2201      	movs	r2, #1
    5148:	4053      	eors	r3, r2
    514a:	b2db      	uxtb	r3, r3
    514c:	2b00      	cmp	r3, #0
    514e:	d013      	beq.n	5178 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5150:	683b      	ldr	r3, [r7, #0]
    5152:	6a1d      	ldr	r5, [r3, #32]
    5154:	693b      	ldr	r3, [r7, #16]
    5156:	b2db      	uxtb	r3, r3
    5158:	1c18      	adds	r0, r3, #0
    515a:	4b68      	ldr	r3, [pc, #416]	; (52fc <_usart_set_config+0x2d0>)
    515c:	4798      	blx	r3
    515e:	1c02      	adds	r2, r0, #0
    5160:	1c3c      	adds	r4, r7, #0
    5162:	341d      	adds	r4, #29
    5164:	1c3b      	adds	r3, r7, #0
    5166:	330e      	adds	r3, #14
    5168:	1c28      	adds	r0, r5, #0
    516a:	1c11      	adds	r1, r2, #0
    516c:	1c1a      	adds	r2, r3, #0
    516e:	4b64      	ldr	r3, [pc, #400]	; (5300 <_usart_set_config+0x2d4>)
    5170:	4798      	blx	r3
    5172:	1c03      	adds	r3, r0, #0
    5174:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5176:	e032      	b.n	51de <_usart_set_config+0x1b2>
    5178:	e031      	b.n	51de <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    517a:	683a      	ldr	r2, [r7, #0]
    517c:	2327      	movs	r3, #39	; 0x27
    517e:	5cd3      	ldrb	r3, [r2, r3]
    5180:	2b00      	cmp	r3, #0
    5182:	d013      	beq.n	51ac <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5184:	683b      	ldr	r3, [r7, #0]
    5186:	6a18      	ldr	r0, [r3, #32]
    5188:	683b      	ldr	r3, [r7, #0]
    518a:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    518c:	1c3c      	adds	r4, r7, #0
    518e:	341d      	adds	r4, #29
    5190:	1c3a      	adds	r2, r7, #0
    5192:	320e      	adds	r2, #14
    5194:	1c3b      	adds	r3, r7, #0
    5196:	331f      	adds	r3, #31
    5198:	781b      	ldrb	r3, [r3, #0]
    519a:	1c3d      	adds	r5, r7, #0
    519c:	351e      	adds	r5, #30
    519e:	782d      	ldrb	r5, [r5, #0]
    51a0:	9500      	str	r5, [sp, #0]
    51a2:	4d58      	ldr	r5, [pc, #352]	; (5304 <_usart_set_config+0x2d8>)
    51a4:	47a8      	blx	r5
    51a6:	1c03      	adds	r3, r0, #0
    51a8:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    51aa:	e017      	b.n	51dc <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    51ac:	683b      	ldr	r3, [r7, #0]
    51ae:	6a1d      	ldr	r5, [r3, #32]
    51b0:	693b      	ldr	r3, [r7, #16]
    51b2:	b2db      	uxtb	r3, r3
    51b4:	1c18      	adds	r0, r3, #0
    51b6:	4b51      	ldr	r3, [pc, #324]	; (52fc <_usart_set_config+0x2d0>)
    51b8:	4798      	blx	r3
    51ba:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    51bc:	1c3c      	adds	r4, r7, #0
    51be:	341d      	adds	r4, #29
    51c0:	1c3a      	adds	r2, r7, #0
    51c2:	320e      	adds	r2, #14
    51c4:	1c3b      	adds	r3, r7, #0
    51c6:	331f      	adds	r3, #31
    51c8:	781b      	ldrb	r3, [r3, #0]
    51ca:	1c38      	adds	r0, r7, #0
    51cc:	301e      	adds	r0, #30
    51ce:	7800      	ldrb	r0, [r0, #0]
    51d0:	9000      	str	r0, [sp, #0]
    51d2:	1c28      	adds	r0, r5, #0
    51d4:	4d4b      	ldr	r5, [pc, #300]	; (5304 <_usart_set_config+0x2d8>)
    51d6:	47a8      	blx	r5
    51d8:	1c03      	adds	r3, r0, #0
    51da:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    51dc:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    51de:	1c3b      	adds	r3, r7, #0
    51e0:	331d      	adds	r3, #29
    51e2:	781b      	ldrb	r3, [r3, #0]
    51e4:	2b00      	cmp	r3, #0
    51e6:	d003      	beq.n	51f0 <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    51e8:	1c3b      	adds	r3, r7, #0
    51ea:	331d      	adds	r3, #29
    51ec:	781b      	ldrb	r3, [r3, #0]
    51ee:	e07e      	b.n	52ee <_usart_set_config+0x2c2>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    51f0:	683b      	ldr	r3, [r7, #0]
    51f2:	7e5b      	ldrb	r3, [r3, #25]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d003      	beq.n	5200 <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	7e9a      	ldrb	r2, [r3, #26]
    51fc:	69bb      	ldr	r3, [r7, #24]
    51fe:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	1c18      	adds	r0, r3, #0
    5204:	4b40      	ldr	r3, [pc, #256]	; (5308 <_usart_set_config+0x2dc>)
    5206:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5208:	1c3b      	adds	r3, r7, #0
    520a:	330e      	adds	r3, #14
    520c:	881a      	ldrh	r2, [r3, #0]
    520e:	69bb      	ldr	r3, [r7, #24]
    5210:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    5212:	683b      	ldr	r3, [r7, #0]
    5214:	685b      	ldr	r3, [r3, #4]
    5216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5218:	4313      	orrs	r3, r2
    521a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    521c:	683a      	ldr	r2, [r7, #0]
    521e:	2327      	movs	r3, #39	; 0x27
    5220:	5cd3      	ldrb	r3, [r2, r3]
    5222:	2201      	movs	r2, #1
    5224:	4053      	eors	r3, r2
    5226:	b2db      	uxtb	r3, r3
    5228:	2b00      	cmp	r3, #0
    522a:	d003      	beq.n	5234 <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    522e:	2204      	movs	r2, #4
    5230:	4313      	orrs	r3, r2
    5232:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5234:	683b      	ldr	r3, [r7, #0]
    5236:	7a9a      	ldrb	r2, [r3, #10]
    5238:	683b      	ldr	r3, [r7, #0]
    523a:	7adb      	ldrb	r3, [r3, #11]
    523c:	4313      	orrs	r3, r2
    523e:	b2db      	uxtb	r3, r3
    5240:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5242:	683b      	ldr	r3, [r7, #0]
    5244:	7e5b      	ldrb	r3, [r3, #25]
    5246:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    5248:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    524a:	683b      	ldr	r3, [r7, #0]
    524c:	7f1b      	ldrb	r3, [r3, #28]
    524e:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5250:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	7f5b      	ldrb	r3, [r3, #29]
    5256:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5258:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    525a:	6839      	ldr	r1, [r7, #0]
    525c:	2324      	movs	r3, #36	; 0x24
    525e:	5ccb      	ldrb	r3, [r1, r3]
    5260:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5262:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5264:	6839      	ldr	r1, [r7, #0]
    5266:	2325      	movs	r3, #37	; 0x25
    5268:	5ccb      	ldrb	r3, [r1, r3]
    526a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    526c:	4313      	orrs	r3, r2
    526e:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5270:	683b      	ldr	r3, [r7, #0]
    5272:	891b      	ldrh	r3, [r3, #8]
    5274:	2bff      	cmp	r3, #255	; 0xff
    5276:	d014      	beq.n	52a2 <_usart_set_config+0x276>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5278:	683b      	ldr	r3, [r7, #0]
    527a:	7edb      	ldrb	r3, [r3, #27]
    527c:	2b00      	cmp	r3, #0
    527e:	d005      	beq.n	528c <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    5280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5282:	22a0      	movs	r2, #160	; 0xa0
    5284:	04d2      	lsls	r2, r2, #19
    5286:	4313      	orrs	r3, r2
    5288:	627b      	str	r3, [r7, #36]	; 0x24
    528a:	e004      	b.n	5296 <_usart_set_config+0x26a>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    528e:	2280      	movs	r2, #128	; 0x80
    5290:	0452      	lsls	r2, r2, #17
    5292:	4313      	orrs	r3, r2
    5294:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    5296:	683b      	ldr	r3, [r7, #0]
    5298:	891b      	ldrh	r3, [r3, #8]
    529a:	6a3a      	ldr	r2, [r7, #32]
    529c:	4313      	orrs	r3, r2
    529e:	623b      	str	r3, [r7, #32]
    52a0:	e008      	b.n	52b4 <_usart_set_config+0x288>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	7edb      	ldrb	r3, [r3, #27]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d004      	beq.n	52b4 <_usart_set_config+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    52aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52ac:	2280      	movs	r2, #128	; 0x80
    52ae:	04d2      	lsls	r2, r2, #19
    52b0:	4313      	orrs	r3, r2
    52b2:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    52b4:	683a      	ldr	r2, [r7, #0]
    52b6:	232c      	movs	r3, #44	; 0x2c
    52b8:	5cd3      	ldrb	r3, [r2, r3]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d104      	bne.n	52c8 <_usart_set_config+0x29c>
    52be:	4b13      	ldr	r3, [pc, #76]	; (530c <_usart_set_config+0x2e0>)
    52c0:	4798      	blx	r3
    52c2:	1c03      	adds	r3, r0, #0
    52c4:	2b00      	cmp	r3, #0
    52c6:	d003      	beq.n	52d0 <_usart_set_config+0x2a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    52c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52ca:	2280      	movs	r2, #128	; 0x80
    52cc:	4313      	orrs	r3, r2
    52ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	1c18      	adds	r0, r3, #0
    52d4:	4b0c      	ldr	r3, [pc, #48]	; (5308 <_usart_set_config+0x2dc>)
    52d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    52d8:	69bb      	ldr	r3, [r7, #24]
    52da:	6a3a      	ldr	r2, [r7, #32]
    52dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	1c18      	adds	r0, r3, #0
    52e2:	4b09      	ldr	r3, [pc, #36]	; (5308 <_usart_set_config+0x2dc>)
    52e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    52e6:	69bb      	ldr	r3, [r7, #24]
    52e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    52ea:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    52ec:	2300      	movs	r3, #0
}
    52ee:	1c18      	adds	r0, r3, #0
    52f0:	46bd      	mov	sp, r7
    52f2:	b00a      	add	sp, #40	; 0x28
    52f4:	bdb0      	pop	{r4, r5, r7, pc}
    52f6:	46c0      	nop			; (mov r8, r8)
    52f8:	00004d99 	.word	0x00004d99
    52fc:	00006611 	.word	0x00006611
    5300:	00004909 	.word	0x00004909
    5304:	00004989 	.word	0x00004989
    5308:	00005009 	.word	0x00005009
    530c:	00004fc9 	.word	0x00004fc9

00005310 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5310:	b590      	push	{r4, r7, lr}
    5312:	b093      	sub	sp, #76	; 0x4c
    5314:	af00      	add	r7, sp, #0
    5316:	60f8      	str	r0, [r7, #12]
    5318:	60b9      	str	r1, [r7, #8]
    531a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    531c:	1c3b      	adds	r3, r7, #0
    531e:	333b      	adds	r3, #59	; 0x3b
    5320:	2200      	movs	r2, #0
    5322:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5324:	68fb      	ldr	r3, [r7, #12]
    5326:	68ba      	ldr	r2, [r7, #8]
    5328:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    532a:	68fb      	ldr	r3, [r7, #12]
    532c:	681b      	ldr	r3, [r3, #0]
    532e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	1c18      	adds	r0, r3, #0
    5336:	4b86      	ldr	r3, [pc, #536]	; (5550 <usart_init+0x240>)
    5338:	4798      	blx	r3
    533a:	1c03      	adds	r3, r0, #0
    533c:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5340:	3302      	adds	r3, #2
    5342:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5346:	3314      	adds	r3, #20
    5348:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    534c:	681a      	ldr	r2, [r3, #0]
    534e:	2301      	movs	r3, #1
    5350:	4013      	ands	r3, r2
    5352:	d001      	beq.n	5358 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5354:	2305      	movs	r3, #5
    5356:	e0f6      	b.n	5546 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    535a:	681a      	ldr	r2, [r3, #0]
    535c:	2302      	movs	r3, #2
    535e:	4013      	ands	r3, r2
    5360:	d001      	beq.n	5366 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5362:	231c      	movs	r3, #28
    5364:	e0ef      	b.n	5546 <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5368:	2201      	movs	r2, #1
    536a:	1c11      	adds	r1, r2, #0
    536c:	4099      	lsls	r1, r3
    536e:	1c0b      	adds	r3, r1, #0
    5370:	2002      	movs	r0, #2
    5372:	1c19      	adds	r1, r3, #0
    5374:	4b77      	ldr	r3, [pc, #476]	; (5554 <usart_init+0x244>)
    5376:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5378:	1c3b      	adds	r3, r7, #0
    537a:	3324      	adds	r3, #36	; 0x24
    537c:	1c18      	adds	r0, r3, #0
    537e:	4b76      	ldr	r3, [pc, #472]	; (5558 <usart_init+0x248>)
    5380:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5382:	687a      	ldr	r2, [r7, #4]
    5384:	232d      	movs	r3, #45	; 0x2d
    5386:	5cd2      	ldrb	r2, [r2, r3]
    5388:	1c3b      	adds	r3, r7, #0
    538a:	3324      	adds	r3, #36	; 0x24
    538c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5390:	b2da      	uxtb	r2, r3
    5392:	1c3b      	adds	r3, r7, #0
    5394:	3324      	adds	r3, #36	; 0x24
    5396:	1c10      	adds	r0, r2, #0
    5398:	1c19      	adds	r1, r3, #0
    539a:	4b70      	ldr	r3, [pc, #448]	; (555c <usart_init+0x24c>)
    539c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    53a0:	b2db      	uxtb	r3, r3
    53a2:	1c18      	adds	r0, r3, #0
    53a4:	4b6e      	ldr	r3, [pc, #440]	; (5560 <usart_init+0x250>)
    53a6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    53a8:	687a      	ldr	r2, [r7, #4]
    53aa:	232d      	movs	r3, #45	; 0x2d
    53ac:	5cd3      	ldrb	r3, [r2, r3]
    53ae:	1c18      	adds	r0, r3, #0
    53b0:	2100      	movs	r1, #0
    53b2:	4b6c      	ldr	r3, [pc, #432]	; (5564 <usart_init+0x254>)
    53b4:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	7ada      	ldrb	r2, [r3, #11]
    53ba:	68fb      	ldr	r3, [r7, #12]
    53bc:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    53be:	687a      	ldr	r2, [r7, #4]
    53c0:	2324      	movs	r3, #36	; 0x24
    53c2:	5cd2      	ldrb	r2, [r2, r3]
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    53c8:	687a      	ldr	r2, [r7, #4]
    53ca:	2325      	movs	r3, #37	; 0x25
    53cc:	5cd2      	ldrb	r2, [r2, r3]
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    53d2:	687b      	ldr	r3, [r7, #4]
    53d4:	7eda      	ldrb	r2, [r3, #27]
    53d6:	68fb      	ldr	r3, [r7, #12]
    53d8:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    53da:	687b      	ldr	r3, [r7, #4]
    53dc:	7f1a      	ldrb	r2, [r3, #28]
    53de:	68fb      	ldr	r3, [r7, #12]
    53e0:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    53e2:	1c3c      	adds	r4, r7, #0
    53e4:	343b      	adds	r4, #59	; 0x3b
    53e6:	68fa      	ldr	r2, [r7, #12]
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	1c10      	adds	r0, r2, #0
    53ec:	1c19      	adds	r1, r3, #0
    53ee:	4b5e      	ldr	r3, [pc, #376]	; (5568 <usart_init+0x258>)
    53f0:	4798      	blx	r3
    53f2:	1c03      	adds	r3, r0, #0
    53f4:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    53f6:	1c3b      	adds	r3, r7, #0
    53f8:	333b      	adds	r3, #59	; 0x3b
    53fa:	781b      	ldrb	r3, [r3, #0]
    53fc:	2b00      	cmp	r3, #0
    53fe:	d003      	beq.n	5408 <usart_init+0xf8>
		return status_code;
    5400:	1c3b      	adds	r3, r7, #0
    5402:	333b      	adds	r3, #59	; 0x3b
    5404:	781b      	ldrb	r3, [r3, #0]
    5406:	e09e      	b.n	5546 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5408:	1c3b      	adds	r3, r7, #0
    540a:	3320      	adds	r3, #32
    540c:	1c18      	adds	r0, r3, #0
    540e:	4b57      	ldr	r3, [pc, #348]	; (556c <usart_init+0x25c>)
    5410:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5412:	1c3b      	adds	r3, r7, #0
    5414:	3320      	adds	r3, #32
    5416:	2200      	movs	r2, #0
    5418:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    541a:	1c3b      	adds	r3, r7, #0
    541c:	3320      	adds	r3, #32
    541e:	2200      	movs	r2, #0
    5420:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5426:	1c3b      	adds	r3, r7, #0
    5428:	3310      	adds	r3, #16
    542a:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5430:	1c3b      	adds	r3, r7, #0
    5432:	3310      	adds	r3, #16
    5434:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    543a:	1c3b      	adds	r3, r7, #0
    543c:	3310      	adds	r3, #16
    543e:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5440:	687b      	ldr	r3, [r7, #4]
    5442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5444:	1c3b      	adds	r3, r7, #0
    5446:	3310      	adds	r3, #16
    5448:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    544a:	1c3b      	adds	r3, r7, #0
    544c:	3347      	adds	r3, #71	; 0x47
    544e:	2200      	movs	r2, #0
    5450:	701a      	strb	r2, [r3, #0]
    5452:	e02c      	b.n	54ae <usart_init+0x19e>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5454:	1c3b      	adds	r3, r7, #0
    5456:	3347      	adds	r3, #71	; 0x47
    5458:	781a      	ldrb	r2, [r3, #0]
    545a:	1c3b      	adds	r3, r7, #0
    545c:	3310      	adds	r3, #16
    545e:	0092      	lsls	r2, r2, #2
    5460:	58d3      	ldr	r3, [r2, r3]
    5462:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5466:	2b00      	cmp	r3, #0
    5468:	d109      	bne.n	547e <usart_init+0x16e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    546a:	68ba      	ldr	r2, [r7, #8]
    546c:	1c3b      	adds	r3, r7, #0
    546e:	3347      	adds	r3, #71	; 0x47
    5470:	781b      	ldrb	r3, [r3, #0]
    5472:	1c10      	adds	r0, r2, #0
    5474:	1c19      	adds	r1, r3, #0
    5476:	4b3e      	ldr	r3, [pc, #248]	; (5570 <usart_init+0x260>)
    5478:	4798      	blx	r3
    547a:	1c03      	adds	r3, r0, #0
    547c:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    547e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5480:	3301      	adds	r3, #1
    5482:	d00d      	beq.n	54a0 <usart_init+0x190>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5486:	b2da      	uxtb	r2, r3
    5488:	1c3b      	adds	r3, r7, #0
    548a:	3320      	adds	r3, #32
    548c:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    548e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5490:	0c1b      	lsrs	r3, r3, #16
    5492:	b2da      	uxtb	r2, r3
    5494:	1c3b      	adds	r3, r7, #0
    5496:	3320      	adds	r3, #32
    5498:	1c10      	adds	r0, r2, #0
    549a:	1c19      	adds	r1, r3, #0
    549c:	4b35      	ldr	r3, [pc, #212]	; (5574 <usart_init+0x264>)
    549e:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    54a0:	1c3b      	adds	r3, r7, #0
    54a2:	3347      	adds	r3, #71	; 0x47
    54a4:	781a      	ldrb	r2, [r3, #0]
    54a6:	1c3b      	adds	r3, r7, #0
    54a8:	3347      	adds	r3, #71	; 0x47
    54aa:	3201      	adds	r2, #1
    54ac:	701a      	strb	r2, [r3, #0]
    54ae:	1c3b      	adds	r3, r7, #0
    54b0:	3347      	adds	r3, #71	; 0x47
    54b2:	781b      	ldrb	r3, [r3, #0]
    54b4:	2b03      	cmp	r3, #3
    54b6:	d9cd      	bls.n	5454 <usart_init+0x144>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    54b8:	2300      	movs	r3, #0
    54ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    54bc:	e009      	b.n	54d2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    54be:	68fa      	ldr	r2, [r7, #12]
    54c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54c2:	3302      	adds	r3, #2
    54c4:	009b      	lsls	r3, r3, #2
    54c6:	18d3      	adds	r3, r2, r3
    54c8:	2200      	movs	r2, #0
    54ca:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    54cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54ce:	3301      	adds	r3, #1
    54d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    54d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    54d4:	2b05      	cmp	r3, #5
    54d6:	d9f2      	bls.n	54be <usart_init+0x1ae>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    54d8:	68fb      	ldr	r3, [r7, #12]
    54da:	2200      	movs	r2, #0
    54dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	2200      	movs	r2, #0
    54e2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    54e4:	68fb      	ldr	r3, [r7, #12]
    54e6:	2200      	movs	r2, #0
    54e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	2200      	movs	r2, #0
    54ee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    54f0:	68fa      	ldr	r2, [r7, #12]
    54f2:	2330      	movs	r3, #48	; 0x30
    54f4:	2100      	movs	r1, #0
    54f6:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    54f8:	68fa      	ldr	r2, [r7, #12]
    54fa:	2331      	movs	r3, #49	; 0x31
    54fc:	2100      	movs	r1, #0
    54fe:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    5500:	68fa      	ldr	r2, [r7, #12]
    5502:	2332      	movs	r3, #50	; 0x32
    5504:	2100      	movs	r1, #0
    5506:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    5508:	68fa      	ldr	r2, [r7, #12]
    550a:	2333      	movs	r3, #51	; 0x33
    550c:	2100      	movs	r1, #0
    550e:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5510:	68fb      	ldr	r3, [r7, #12]
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	1c3c      	adds	r4, r7, #0
    5516:	3427      	adds	r4, #39	; 0x27
    5518:	1c18      	adds	r0, r3, #0
    551a:	4b0d      	ldr	r3, [pc, #52]	; (5550 <usart_init+0x240>)
    551c:	4798      	blx	r3
    551e:	1c03      	adds	r3, r0, #0
    5520:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5522:	1c3b      	adds	r3, r7, #0
    5524:	3327      	adds	r3, #39	; 0x27
    5526:	781a      	ldrb	r2, [r3, #0]
    5528:	4b13      	ldr	r3, [pc, #76]	; (5578 <usart_init+0x268>)
    552a:	1c10      	adds	r0, r2, #0
    552c:	1c19      	adds	r1, r3, #0
    552e:	4b13      	ldr	r3, [pc, #76]	; (557c <usart_init+0x26c>)
    5530:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5532:	1c3b      	adds	r3, r7, #0
    5534:	3327      	adds	r3, #39	; 0x27
    5536:	781a      	ldrb	r2, [r3, #0]
    5538:	4b11      	ldr	r3, [pc, #68]	; (5580 <usart_init+0x270>)
    553a:	0092      	lsls	r2, r2, #2
    553c:	68f9      	ldr	r1, [r7, #12]
    553e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5540:	1c3b      	adds	r3, r7, #0
    5542:	333b      	adds	r3, #59	; 0x3b
    5544:	781b      	ldrb	r3, [r3, #0]
}
    5546:	1c18      	adds	r0, r3, #0
    5548:	46bd      	mov	sp, r7
    554a:	b013      	add	sp, #76	; 0x4c
    554c:	bd90      	pop	{r4, r7, pc}
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	00004d99 	.word	0x00004d99
    5554:	00004f45 	.word	0x00004f45
    5558:	00004f31 	.word	0x00004f31
    555c:	000064f5 	.word	0x000064f5
    5560:	00006535 	.word	0x00006535
    5564:	00004b51 	.word	0x00004b51
    5568:	0000502d 	.word	0x0000502d
    556c:	00004fa1 	.word	0x00004fa1
    5570:	00004bdd 	.word	0x00004bdd
    5574:	000067d9 	.word	0x000067d9
    5578:	0000579d 	.word	0x0000579d
    557c:	00004df9 	.word	0x00004df9
    5580:	20003924 	.word	0x20003924

00005584 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5584:	b580      	push	{r7, lr}
    5586:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5588:	4b01      	ldr	r3, [pc, #4]	; (5590 <system_interrupt_enter_critical_section+0xc>)
    558a:	4798      	blx	r3
}
    558c:	46bd      	mov	sp, r7
    558e:	bd80      	pop	{r7, pc}
    5590:	00003fc5 	.word	0x00003fc5

00005594 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5594:	b580      	push	{r7, lr}
    5596:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5598:	4b01      	ldr	r3, [pc, #4]	; (55a0 <system_interrupt_leave_critical_section+0xc>)
    559a:	4798      	blx	r3
}
    559c:	46bd      	mov	sp, r7
    559e:	bd80      	pop	{r7, pc}
    55a0:	00004015 	.word	0x00004015

000055a4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    55a4:	b580      	push	{r7, lr}
    55a6:	b084      	sub	sp, #16
    55a8:	af00      	add	r7, sp, #0
    55aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    55b2:	68fb      	ldr	r3, [r7, #12]
    55b4:	69db      	ldr	r3, [r3, #28]
    55b6:	1e5a      	subs	r2, r3, #1
    55b8:	4193      	sbcs	r3, r2
    55ba:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    55bc:	1c18      	adds	r0, r3, #0
    55be:	46bd      	mov	sp, r7
    55c0:	b004      	add	sp, #16
    55c2:	bd80      	pop	{r7, pc}

000055c4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    55c4:	b580      	push	{r7, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    55cc:	46c0      	nop			; (mov r8, r8)
    55ce:	687b      	ldr	r3, [r7, #4]
    55d0:	1c18      	adds	r0, r3, #0
    55d2:	4b04      	ldr	r3, [pc, #16]	; (55e4 <_usart_wait_for_sync+0x20>)
    55d4:	4798      	blx	r3
    55d6:	1c03      	adds	r3, r0, #0
    55d8:	2b00      	cmp	r3, #0
    55da:	d1f8      	bne.n	55ce <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    55dc:	46bd      	mov	sp, r7
    55de:	b002      	add	sp, #8
    55e0:	bd80      	pop	{r7, pc}
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	000055a5 	.word	0x000055a5

000055e8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    55e8:	b580      	push	{r7, lr}
    55ea:	b086      	sub	sp, #24
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	60b9      	str	r1, [r7, #8]
    55f2:	1dbb      	adds	r3, r7, #6
    55f4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    55f6:	68fb      	ldr	r3, [r7, #12]
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    55fc:	4b0f      	ldr	r3, [pc, #60]	; (563c <_usart_write_buffer+0x54>)
    55fe:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5600:	68fb      	ldr	r3, [r7, #12]
    5602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5604:	b29b      	uxth	r3, r3
    5606:	2b00      	cmp	r3, #0
    5608:	d003      	beq.n	5612 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    560a:	4b0d      	ldr	r3, [pc, #52]	; (5640 <_usart_write_buffer+0x58>)
    560c:	4798      	blx	r3
		return STATUS_BUSY;
    560e:	2305      	movs	r3, #5
    5610:	e010      	b.n	5634 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5612:	68fb      	ldr	r3, [r7, #12]
    5614:	1dba      	adds	r2, r7, #6
    5616:	8812      	ldrh	r2, [r2, #0]
    5618:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    561a:	4b09      	ldr	r3, [pc, #36]	; (5640 <_usart_write_buffer+0x58>)
    561c:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    561e:	68fb      	ldr	r3, [r7, #12]
    5620:	68ba      	ldr	r2, [r7, #8]
    5622:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5624:	68fa      	ldr	r2, [r7, #12]
    5626:	2333      	movs	r3, #51	; 0x33
    5628:	2105      	movs	r1, #5
    562a:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    562c:	697b      	ldr	r3, [r7, #20]
    562e:	2201      	movs	r2, #1
    5630:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5632:	2300      	movs	r3, #0
}
    5634:	1c18      	adds	r0, r3, #0
    5636:	46bd      	mov	sp, r7
    5638:	b006      	add	sp, #24
    563a:	bd80      	pop	{r7, pc}
    563c:	00005585 	.word	0x00005585
    5640:	00005595 	.word	0x00005595

00005644 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5644:	b580      	push	{r7, lr}
    5646:	b086      	sub	sp, #24
    5648:	af00      	add	r7, sp, #0
    564a:	60f8      	str	r0, [r7, #12]
    564c:	60b9      	str	r1, [r7, #8]
    564e:	1dbb      	adds	r3, r7, #6
    5650:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5652:	68fb      	ldr	r3, [r7, #12]
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5658:	4b16      	ldr	r3, [pc, #88]	; (56b4 <_usart_read_buffer+0x70>)
    565a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5660:	b29b      	uxth	r3, r3
    5662:	2b00      	cmp	r3, #0
    5664:	d003      	beq.n	566e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5666:	4b14      	ldr	r3, [pc, #80]	; (56b8 <_usart_read_buffer+0x74>)
    5668:	4798      	blx	r3
		return STATUS_BUSY;
    566a:	2305      	movs	r3, #5
    566c:	e01e      	b.n	56ac <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    566e:	68fb      	ldr	r3, [r7, #12]
    5670:	1dba      	adds	r2, r7, #6
    5672:	8812      	ldrh	r2, [r2, #0]
    5674:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5676:	4b10      	ldr	r3, [pc, #64]	; (56b8 <_usart_read_buffer+0x74>)
    5678:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    567a:	68fb      	ldr	r3, [r7, #12]
    567c:	68ba      	ldr	r2, [r7, #8]
    567e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5680:	68fa      	ldr	r2, [r7, #12]
    5682:	2332      	movs	r3, #50	; 0x32
    5684:	2105      	movs	r1, #5
    5686:	54d1      	strb	r1, [r2, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5688:	697b      	ldr	r3, [r7, #20]
    568a:	2204      	movs	r2, #4
    568c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	7a1b      	ldrb	r3, [r3, #8]
    5692:	2b00      	cmp	r3, #0
    5694:	d002      	beq.n	569c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5696:	697b      	ldr	r3, [r7, #20]
    5698:	2220      	movs	r2, #32
    569a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    569c:	68fb      	ldr	r3, [r7, #12]
    569e:	7a5b      	ldrb	r3, [r3, #9]
    56a0:	2b00      	cmp	r3, #0
    56a2:	d002      	beq.n	56aa <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    56a4:	697b      	ldr	r3, [r7, #20]
    56a6:	2208      	movs	r2, #8
    56a8:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    56aa:	2300      	movs	r3, #0
}
    56ac:	1c18      	adds	r0, r3, #0
    56ae:	46bd      	mov	sp, r7
    56b0:	b006      	add	sp, #24
    56b2:	bd80      	pop	{r7, pc}
    56b4:	00005585 	.word	0x00005585
    56b8:	00005595 	.word	0x00005595

000056bc <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b084      	sub	sp, #16
    56c0:	af00      	add	r7, sp, #0
    56c2:	60f8      	str	r0, [r7, #12]
    56c4:	60b9      	str	r1, [r7, #8]
    56c6:	1dfb      	adds	r3, r7, #7
    56c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    56ca:	1dfb      	adds	r3, r7, #7
    56cc:	781b      	ldrb	r3, [r3, #0]
    56ce:	68fa      	ldr	r2, [r7, #12]
    56d0:	3302      	adds	r3, #2
    56d2:	009b      	lsls	r3, r3, #2
    56d4:	18d3      	adds	r3, r2, r3
    56d6:	68ba      	ldr	r2, [r7, #8]
    56d8:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    56da:	68fa      	ldr	r2, [r7, #12]
    56dc:	2330      	movs	r3, #48	; 0x30
    56de:	5cd3      	ldrb	r3, [r2, r3]
    56e0:	b2da      	uxtb	r2, r3
    56e2:	1dfb      	adds	r3, r7, #7
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	2101      	movs	r1, #1
    56e8:	1c08      	adds	r0, r1, #0
    56ea:	4098      	lsls	r0, r3
    56ec:	1c03      	adds	r3, r0, #0
    56ee:	b2db      	uxtb	r3, r3
    56f0:	4313      	orrs	r3, r2
    56f2:	b2db      	uxtb	r3, r3
    56f4:	b2d9      	uxtb	r1, r3
    56f6:	68fa      	ldr	r2, [r7, #12]
    56f8:	2330      	movs	r3, #48	; 0x30
    56fa:	54d1      	strb	r1, [r2, r3]
}
    56fc:	46bd      	mov	sp, r7
    56fe:	b004      	add	sp, #16
    5700:	bd80      	pop	{r7, pc}
    5702:	46c0      	nop			; (mov r8, r8)

00005704 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5704:	b580      	push	{r7, lr}
    5706:	b084      	sub	sp, #16
    5708:	af00      	add	r7, sp, #0
    570a:	60f8      	str	r0, [r7, #12]
    570c:	60b9      	str	r1, [r7, #8]
    570e:	1dbb      	adds	r3, r7, #6
    5710:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5712:	1dbb      	adds	r3, r7, #6
    5714:	881b      	ldrh	r3, [r3, #0]
    5716:	2b00      	cmp	r3, #0
    5718:	d101      	bne.n	571e <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    571a:	2317      	movs	r3, #23
    571c:	e012      	b.n	5744 <usart_write_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    571e:	68fb      	ldr	r3, [r7, #12]
    5720:	79db      	ldrb	r3, [r3, #7]
    5722:	2201      	movs	r2, #1
    5724:	4053      	eors	r3, r2
    5726:	b2db      	uxtb	r3, r3
    5728:	2b00      	cmp	r3, #0
    572a:	d001      	beq.n	5730 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    572c:	231c      	movs	r3, #28
    572e:	e009      	b.n	5744 <usart_write_buffer_job+0x40>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5730:	68f9      	ldr	r1, [r7, #12]
    5732:	68ba      	ldr	r2, [r7, #8]
    5734:	1dbb      	adds	r3, r7, #6
    5736:	881b      	ldrh	r3, [r3, #0]
    5738:	1c08      	adds	r0, r1, #0
    573a:	1c11      	adds	r1, r2, #0
    573c:	1c1a      	adds	r2, r3, #0
    573e:	4b03      	ldr	r3, [pc, #12]	; (574c <usart_write_buffer_job+0x48>)
    5740:	4798      	blx	r3
    5742:	1c03      	adds	r3, r0, #0
}
    5744:	1c18      	adds	r0, r3, #0
    5746:	46bd      	mov	sp, r7
    5748:	b004      	add	sp, #16
    574a:	bd80      	pop	{r7, pc}
    574c:	000055e9 	.word	0x000055e9

00005750 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5750:	b580      	push	{r7, lr}
    5752:	b084      	sub	sp, #16
    5754:	af00      	add	r7, sp, #0
    5756:	60f8      	str	r0, [r7, #12]
    5758:	60b9      	str	r1, [r7, #8]
    575a:	1dbb      	adds	r3, r7, #6
    575c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    575e:	1dbb      	adds	r3, r7, #6
    5760:	881b      	ldrh	r3, [r3, #0]
    5762:	2b00      	cmp	r3, #0
    5764:	d101      	bne.n	576a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5766:	2317      	movs	r3, #23
    5768:	e012      	b.n	5790 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    576a:	68fb      	ldr	r3, [r7, #12]
    576c:	799b      	ldrb	r3, [r3, #6]
    576e:	2201      	movs	r2, #1
    5770:	4053      	eors	r3, r2
    5772:	b2db      	uxtb	r3, r3
    5774:	2b00      	cmp	r3, #0
    5776:	d001      	beq.n	577c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5778:	231c      	movs	r3, #28
    577a:	e009      	b.n	5790 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    577c:	68f9      	ldr	r1, [r7, #12]
    577e:	68ba      	ldr	r2, [r7, #8]
    5780:	1dbb      	adds	r3, r7, #6
    5782:	881b      	ldrh	r3, [r3, #0]
    5784:	1c08      	adds	r0, r1, #0
    5786:	1c11      	adds	r1, r2, #0
    5788:	1c1a      	adds	r2, r3, #0
    578a:	4b03      	ldr	r3, [pc, #12]	; (5798 <usart_read_buffer_job+0x48>)
    578c:	4798      	blx	r3
    578e:	1c03      	adds	r3, r0, #0
}
    5790:	1c18      	adds	r0, r3, #0
    5792:	46bd      	mov	sp, r7
    5794:	b004      	add	sp, #16
    5796:	bd80      	pop	{r7, pc}
    5798:	00005645 	.word	0x00005645

0000579c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    579c:	b580      	push	{r7, lr}
    579e:	b088      	sub	sp, #32
    57a0:	af00      	add	r7, sp, #0
    57a2:	1c02      	adds	r2, r0, #0
    57a4:	1dfb      	adds	r3, r7, #7
    57a6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    57a8:	1dfb      	adds	r3, r7, #7
    57aa:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    57ac:	4bb0      	ldr	r3, [pc, #704]	; (5a70 <_usart_interrupt_handler+0x2d4>)
    57ae:	0092      	lsls	r2, r2, #2
    57b0:	58d3      	ldr	r3, [r2, r3]
    57b2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    57b4:	69bb      	ldr	r3, [r7, #24]
    57b6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    57b8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    57ba:	69bb      	ldr	r3, [r7, #24]
    57bc:	1c18      	adds	r0, r3, #0
    57be:	4bad      	ldr	r3, [pc, #692]	; (5a74 <_usart_interrupt_handler+0x2d8>)
    57c0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    57c2:	697b      	ldr	r3, [r7, #20]
    57c4:	7e1b      	ldrb	r3, [r3, #24]
    57c6:	b2da      	uxtb	r2, r3
    57c8:	1c3b      	adds	r3, r7, #0
    57ca:	3312      	adds	r3, #18
    57cc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    57ce:	697b      	ldr	r3, [r7, #20]
    57d0:	7d9b      	ldrb	r3, [r3, #22]
    57d2:	b2db      	uxtb	r3, r3
    57d4:	1c1a      	adds	r2, r3, #0
    57d6:	1c3b      	adds	r3, r7, #0
    57d8:	3312      	adds	r3, #18
    57da:	1c39      	adds	r1, r7, #0
    57dc:	3112      	adds	r1, #18
    57de:	8809      	ldrh	r1, [r1, #0]
    57e0:	400a      	ands	r2, r1
    57e2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    57e4:	69ba      	ldr	r2, [r7, #24]
    57e6:	2330      	movs	r3, #48	; 0x30
    57e8:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    57ea:	69b9      	ldr	r1, [r7, #24]
    57ec:	2231      	movs	r2, #49	; 0x31
    57ee:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    57f0:	4013      	ands	r3, r2
    57f2:	b2da      	uxtb	r2, r3
    57f4:	1c3b      	adds	r3, r7, #0
    57f6:	3310      	adds	r3, #16
    57f8:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    57fa:	1c3b      	adds	r3, r7, #0
    57fc:	3312      	adds	r3, #18
    57fe:	881a      	ldrh	r2, [r3, #0]
    5800:	2301      	movs	r3, #1
    5802:	4013      	ands	r3, r2
    5804:	d044      	beq.n	5890 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5806:	69bb      	ldr	r3, [r7, #24]
    5808:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    580a:	b29b      	uxth	r3, r3
    580c:	2b00      	cmp	r3, #0
    580e:	d03c      	beq.n	588a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5810:	69bb      	ldr	r3, [r7, #24]
    5812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	b2da      	uxtb	r2, r3
    5818:	1c3b      	adds	r3, r7, #0
    581a:	331c      	adds	r3, #28
    581c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    581e:	69bb      	ldr	r3, [r7, #24]
    5820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5822:	1c5a      	adds	r2, r3, #1
    5824:	69bb      	ldr	r3, [r7, #24]
    5826:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5828:	69bb      	ldr	r3, [r7, #24]
    582a:	795b      	ldrb	r3, [r3, #5]
    582c:	2b01      	cmp	r3, #1
    582e:	d112      	bne.n	5856 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5830:	69bb      	ldr	r3, [r7, #24]
    5832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	b2db      	uxtb	r3, r3
    5838:	021b      	lsls	r3, r3, #8
    583a:	b29a      	uxth	r2, r3
    583c:	1c3b      	adds	r3, r7, #0
    583e:	331c      	adds	r3, #28
    5840:	881b      	ldrh	r3, [r3, #0]
    5842:	4313      	orrs	r3, r2
    5844:	b29a      	uxth	r2, r3
    5846:	1c3b      	adds	r3, r7, #0
    5848:	331c      	adds	r3, #28
    584a:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    584c:	69bb      	ldr	r3, [r7, #24]
    584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5850:	1c5a      	adds	r2, r3, #1
    5852:	69bb      	ldr	r3, [r7, #24]
    5854:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5856:	1c3b      	adds	r3, r7, #0
    5858:	331c      	adds	r3, #28
    585a:	881b      	ldrh	r3, [r3, #0]
    585c:	05db      	lsls	r3, r3, #23
    585e:	0ddb      	lsrs	r3, r3, #23
    5860:	b29a      	uxth	r2, r3
    5862:	697b      	ldr	r3, [r7, #20]
    5864:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5866:	69bb      	ldr	r3, [r7, #24]
    5868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    586a:	b29b      	uxth	r3, r3
    586c:	3b01      	subs	r3, #1
    586e:	b29b      	uxth	r3, r3
    5870:	69ba      	ldr	r2, [r7, #24]
    5872:	1c19      	adds	r1, r3, #0
    5874:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5876:	2b00      	cmp	r3, #0
    5878:	d106      	bne.n	5888 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    587a:	697b      	ldr	r3, [r7, #20]
    587c:	2201      	movs	r2, #1
    587e:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5880:	697b      	ldr	r3, [r7, #20]
    5882:	2202      	movs	r2, #2
    5884:	759a      	strb	r2, [r3, #22]
    5886:	e003      	b.n	5890 <_usart_interrupt_handler+0xf4>
    5888:	e002      	b.n	5890 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    588a:	697b      	ldr	r3, [r7, #20]
    588c:	2201      	movs	r2, #1
    588e:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5890:	1c3b      	adds	r3, r7, #0
    5892:	3312      	adds	r3, #18
    5894:	881a      	ldrh	r2, [r3, #0]
    5896:	2302      	movs	r3, #2
    5898:	4013      	ands	r3, r2
    589a:	d011      	beq.n	58c0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    589c:	697b      	ldr	r3, [r7, #20]
    589e:	2202      	movs	r2, #2
    58a0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    58a2:	69ba      	ldr	r2, [r7, #24]
    58a4:	2333      	movs	r3, #51	; 0x33
    58a6:	2100      	movs	r1, #0
    58a8:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    58aa:	1c3b      	adds	r3, r7, #0
    58ac:	3310      	adds	r3, #16
    58ae:	881a      	ldrh	r2, [r3, #0]
    58b0:	2301      	movs	r3, #1
    58b2:	4013      	ands	r3, r2
    58b4:	d004      	beq.n	58c0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    58b6:	69bb      	ldr	r3, [r7, #24]
    58b8:	68db      	ldr	r3, [r3, #12]
    58ba:	69ba      	ldr	r2, [r7, #24]
    58bc:	1c10      	adds	r0, r2, #0
    58be:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    58c0:	1c3b      	adds	r3, r7, #0
    58c2:	3312      	adds	r3, #18
    58c4:	881a      	ldrh	r2, [r3, #0]
    58c6:	2304      	movs	r3, #4
    58c8:	4013      	ands	r3, r2
    58ca:	d100      	bne.n	58ce <_usart_interrupt_handler+0x132>
    58cc:	e0d7      	b.n	5a7e <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    58ce:	69bb      	ldr	r3, [r7, #24]
    58d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    58d2:	b29b      	uxth	r3, r3
    58d4:	2b00      	cmp	r3, #0
    58d6:	d100      	bne.n	58da <_usart_interrupt_handler+0x13e>
    58d8:	e0ce      	b.n	5a78 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    58da:	697b      	ldr	r3, [r7, #20]
    58dc:	8b5b      	ldrh	r3, [r3, #26]
    58de:	b29b      	uxth	r3, r3
    58e0:	b2d9      	uxtb	r1, r3
    58e2:	1c3b      	adds	r3, r7, #0
    58e4:	331f      	adds	r3, #31
    58e6:	223f      	movs	r2, #63	; 0x3f
    58e8:	400a      	ands	r2, r1
    58ea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    58ec:	1c3b      	adds	r3, r7, #0
    58ee:	331f      	adds	r3, #31
    58f0:	781a      	ldrb	r2, [r3, #0]
    58f2:	2308      	movs	r3, #8
    58f4:	4013      	ands	r3, r2
    58f6:	d007      	beq.n	5908 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    58f8:	1c3b      	adds	r3, r7, #0
    58fa:	331f      	adds	r3, #31
    58fc:	1c3a      	adds	r2, r7, #0
    58fe:	321f      	adds	r2, #31
    5900:	7812      	ldrb	r2, [r2, #0]
    5902:	2108      	movs	r1, #8
    5904:	438a      	bics	r2, r1
    5906:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5908:	1c3b      	adds	r3, r7, #0
    590a:	331f      	adds	r3, #31
    590c:	781b      	ldrb	r3, [r3, #0]
    590e:	2b00      	cmp	r3, #0
    5910:	d100      	bne.n	5914 <_usart_interrupt_handler+0x178>
    5912:	e069      	b.n	59e8 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5914:	1c3b      	adds	r3, r7, #0
    5916:	331f      	adds	r3, #31
    5918:	781a      	ldrb	r2, [r3, #0]
    591a:	2302      	movs	r3, #2
    591c:	4013      	ands	r3, r2
    591e:	d00c      	beq.n	593a <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5920:	69ba      	ldr	r2, [r7, #24]
    5922:	2332      	movs	r3, #50	; 0x32
    5924:	211a      	movs	r1, #26
    5926:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    5928:	697b      	ldr	r3, [r7, #20]
    592a:	8b5b      	ldrh	r3, [r3, #26]
    592c:	b29b      	uxth	r3, r3
    592e:	2202      	movs	r2, #2
    5930:	4313      	orrs	r3, r2
    5932:	b29a      	uxth	r2, r3
    5934:	697b      	ldr	r3, [r7, #20]
    5936:	835a      	strh	r2, [r3, #26]
    5938:	e04a      	b.n	59d0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    593a:	1c3b      	adds	r3, r7, #0
    593c:	331f      	adds	r3, #31
    593e:	781a      	ldrb	r2, [r3, #0]
    5940:	2304      	movs	r3, #4
    5942:	4013      	ands	r3, r2
    5944:	d00c      	beq.n	5960 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5946:	69ba      	ldr	r2, [r7, #24]
    5948:	2332      	movs	r3, #50	; 0x32
    594a:	211e      	movs	r1, #30
    594c:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    594e:	697b      	ldr	r3, [r7, #20]
    5950:	8b5b      	ldrh	r3, [r3, #26]
    5952:	b29b      	uxth	r3, r3
    5954:	2204      	movs	r2, #4
    5956:	4313      	orrs	r3, r2
    5958:	b29a      	uxth	r2, r3
    595a:	697b      	ldr	r3, [r7, #20]
    595c:	835a      	strh	r2, [r3, #26]
    595e:	e037      	b.n	59d0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5960:	1c3b      	adds	r3, r7, #0
    5962:	331f      	adds	r3, #31
    5964:	781a      	ldrb	r2, [r3, #0]
    5966:	2301      	movs	r3, #1
    5968:	4013      	ands	r3, r2
    596a:	d00c      	beq.n	5986 <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    596c:	69ba      	ldr	r2, [r7, #24]
    596e:	2332      	movs	r3, #50	; 0x32
    5970:	2113      	movs	r1, #19
    5972:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5974:	697b      	ldr	r3, [r7, #20]
    5976:	8b5b      	ldrh	r3, [r3, #26]
    5978:	b29b      	uxth	r3, r3
    597a:	2201      	movs	r2, #1
    597c:	4313      	orrs	r3, r2
    597e:	b29a      	uxth	r2, r3
    5980:	697b      	ldr	r3, [r7, #20]
    5982:	835a      	strh	r2, [r3, #26]
    5984:	e024      	b.n	59d0 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5986:	1c3b      	adds	r3, r7, #0
    5988:	331f      	adds	r3, #31
    598a:	781a      	ldrb	r2, [r3, #0]
    598c:	2310      	movs	r3, #16
    598e:	4013      	ands	r3, r2
    5990:	d00c      	beq.n	59ac <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5992:	69ba      	ldr	r2, [r7, #24]
    5994:	2332      	movs	r3, #50	; 0x32
    5996:	2142      	movs	r1, #66	; 0x42
    5998:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    599a:	697b      	ldr	r3, [r7, #20]
    599c:	8b5b      	ldrh	r3, [r3, #26]
    599e:	b29b      	uxth	r3, r3
    59a0:	2210      	movs	r2, #16
    59a2:	4313      	orrs	r3, r2
    59a4:	b29a      	uxth	r2, r3
    59a6:	697b      	ldr	r3, [r7, #20]
    59a8:	835a      	strh	r2, [r3, #26]
    59aa:	e011      	b.n	59d0 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    59ac:	1c3b      	adds	r3, r7, #0
    59ae:	331f      	adds	r3, #31
    59b0:	781a      	ldrb	r2, [r3, #0]
    59b2:	2320      	movs	r3, #32
    59b4:	4013      	ands	r3, r2
    59b6:	d00b      	beq.n	59d0 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    59b8:	69ba      	ldr	r2, [r7, #24]
    59ba:	2332      	movs	r3, #50	; 0x32
    59bc:	2141      	movs	r1, #65	; 0x41
    59be:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    59c0:	697b      	ldr	r3, [r7, #20]
    59c2:	8b5b      	ldrh	r3, [r3, #26]
    59c4:	b29b      	uxth	r3, r3
    59c6:	2220      	movs	r2, #32
    59c8:	4313      	orrs	r3, r2
    59ca:	b29a      	uxth	r2, r3
    59cc:	697b      	ldr	r3, [r7, #20]
    59ce:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    59d0:	1c3b      	adds	r3, r7, #0
    59d2:	3310      	adds	r3, #16
    59d4:	881a      	ldrh	r2, [r3, #0]
    59d6:	2304      	movs	r3, #4
    59d8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    59da:	d050      	beq.n	5a7e <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    59dc:	69bb      	ldr	r3, [r7, #24]
    59de:	695b      	ldr	r3, [r3, #20]
    59e0:	69ba      	ldr	r2, [r7, #24]
    59e2:	1c10      	adds	r0, r2, #0
    59e4:	4798      	blx	r3
    59e6:	e04a      	b.n	5a7e <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    59e8:	697b      	ldr	r3, [r7, #20]
    59ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    59ec:	b29a      	uxth	r2, r3
    59ee:	1c3b      	adds	r3, r7, #0
    59f0:	330e      	adds	r3, #14
    59f2:	05d2      	lsls	r2, r2, #23
    59f4:	0dd2      	lsrs	r2, r2, #23
    59f6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    59f8:	69bb      	ldr	r3, [r7, #24]
    59fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    59fc:	1c3a      	adds	r2, r7, #0
    59fe:	320e      	adds	r2, #14
    5a00:	8812      	ldrh	r2, [r2, #0]
    5a02:	b2d2      	uxtb	r2, r2
    5a04:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5a06:	69bb      	ldr	r3, [r7, #24]
    5a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a0a:	1c5a      	adds	r2, r3, #1
    5a0c:	69bb      	ldr	r3, [r7, #24]
    5a0e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5a10:	69bb      	ldr	r3, [r7, #24]
    5a12:	795b      	ldrb	r3, [r3, #5]
    5a14:	2b01      	cmp	r3, #1
    5a16:	d10d      	bne.n	5a34 <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5a18:	69bb      	ldr	r3, [r7, #24]
    5a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a1c:	1c3a      	adds	r2, r7, #0
    5a1e:	320e      	adds	r2, #14
    5a20:	8812      	ldrh	r2, [r2, #0]
    5a22:	0a12      	lsrs	r2, r2, #8
    5a24:	b292      	uxth	r2, r2
    5a26:	b2d2      	uxtb	r2, r2
    5a28:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5a2a:	69bb      	ldr	r3, [r7, #24]
    5a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a2e:	1c5a      	adds	r2, r3, #1
    5a30:	69bb      	ldr	r3, [r7, #24]
    5a32:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5a34:	69bb      	ldr	r3, [r7, #24]
    5a36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5a38:	b29b      	uxth	r3, r3
    5a3a:	3b01      	subs	r3, #1
    5a3c:	b29b      	uxth	r3, r3
    5a3e:	69ba      	ldr	r2, [r7, #24]
    5a40:	1c19      	adds	r1, r3, #0
    5a42:	8591      	strh	r1, [r2, #44]	; 0x2c
    5a44:	2b00      	cmp	r3, #0
    5a46:	d112      	bne.n	5a6e <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a48:	697b      	ldr	r3, [r7, #20]
    5a4a:	2204      	movs	r2, #4
    5a4c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5a4e:	69ba      	ldr	r2, [r7, #24]
    5a50:	2332      	movs	r3, #50	; 0x32
    5a52:	2100      	movs	r1, #0
    5a54:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5a56:	1c3b      	adds	r3, r7, #0
    5a58:	3310      	adds	r3, #16
    5a5a:	881a      	ldrh	r2, [r3, #0]
    5a5c:	2302      	movs	r3, #2
    5a5e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    5a60:	d005      	beq.n	5a6e <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5a62:	69bb      	ldr	r3, [r7, #24]
    5a64:	691b      	ldr	r3, [r3, #16]
    5a66:	69ba      	ldr	r2, [r7, #24]
    5a68:	1c10      	adds	r0, r2, #0
    5a6a:	4798      	blx	r3
    5a6c:	e007      	b.n	5a7e <_usart_interrupt_handler+0x2e2>
    5a6e:	e006      	b.n	5a7e <_usart_interrupt_handler+0x2e2>
    5a70:	20003924 	.word	0x20003924
    5a74:	000055c5 	.word	0x000055c5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5a78:	697b      	ldr	r3, [r7, #20]
    5a7a:	2204      	movs	r2, #4
    5a7c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5a7e:	1c3b      	adds	r3, r7, #0
    5a80:	3312      	adds	r3, #18
    5a82:	881a      	ldrh	r2, [r3, #0]
    5a84:	2310      	movs	r3, #16
    5a86:	4013      	ands	r3, r2
    5a88:	d010      	beq.n	5aac <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5a8a:	697b      	ldr	r3, [r7, #20]
    5a8c:	2210      	movs	r2, #16
    5a8e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5a90:	697b      	ldr	r3, [r7, #20]
    5a92:	2210      	movs	r2, #16
    5a94:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5a96:	1c3b      	adds	r3, r7, #0
    5a98:	3310      	adds	r3, #16
    5a9a:	881a      	ldrh	r2, [r3, #0]
    5a9c:	2310      	movs	r3, #16
    5a9e:	4013      	ands	r3, r2
    5aa0:	d004      	beq.n	5aac <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5aa2:	69bb      	ldr	r3, [r7, #24]
    5aa4:	69db      	ldr	r3, [r3, #28]
    5aa6:	69ba      	ldr	r2, [r7, #24]
    5aa8:	1c10      	adds	r0, r2, #0
    5aaa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5aac:	1c3b      	adds	r3, r7, #0
    5aae:	3312      	adds	r3, #18
    5ab0:	881a      	ldrh	r2, [r3, #0]
    5ab2:	2320      	movs	r3, #32
    5ab4:	4013      	ands	r3, r2
    5ab6:	d010      	beq.n	5ada <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5ab8:	697b      	ldr	r3, [r7, #20]
    5aba:	2220      	movs	r2, #32
    5abc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5abe:	697b      	ldr	r3, [r7, #20]
    5ac0:	2220      	movs	r2, #32
    5ac2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5ac4:	1c3b      	adds	r3, r7, #0
    5ac6:	3310      	adds	r3, #16
    5ac8:	881a      	ldrh	r2, [r3, #0]
    5aca:	2308      	movs	r3, #8
    5acc:	4013      	ands	r3, r2
    5ace:	d004      	beq.n	5ada <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5ad0:	69bb      	ldr	r3, [r7, #24]
    5ad2:	699b      	ldr	r3, [r3, #24]
    5ad4:	69ba      	ldr	r2, [r7, #24]
    5ad6:	1c10      	adds	r0, r2, #0
    5ad8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5ada:	1c3b      	adds	r3, r7, #0
    5adc:	3312      	adds	r3, #18
    5ade:	881a      	ldrh	r2, [r3, #0]
    5ae0:	2308      	movs	r3, #8
    5ae2:	4013      	ands	r3, r2
    5ae4:	d010      	beq.n	5b08 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5ae6:	697b      	ldr	r3, [r7, #20]
    5ae8:	2208      	movs	r2, #8
    5aea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5aec:	697b      	ldr	r3, [r7, #20]
    5aee:	2208      	movs	r2, #8
    5af0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5af2:	1c3b      	adds	r3, r7, #0
    5af4:	3310      	adds	r3, #16
    5af6:	881a      	ldrh	r2, [r3, #0]
    5af8:	2320      	movs	r3, #32
    5afa:	4013      	ands	r3, r2
    5afc:	d004      	beq.n	5b08 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5afe:	69bb      	ldr	r3, [r7, #24]
    5b00:	6a1b      	ldr	r3, [r3, #32]
    5b02:	69ba      	ldr	r2, [r7, #24]
    5b04:	1c10      	adds	r0, r2, #0
    5b06:	4798      	blx	r3
		}
	}
#endif
}
    5b08:	46bd      	mov	sp, r7
    5b0a:	b008      	add	sp, #32
    5b0c:	bd80      	pop	{r7, pc}
    5b0e:	46c0      	nop			; (mov r8, r8)

00005b10 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    5b10:	b580      	push	{r7, lr}
    5b12:	b082      	sub	sp, #8
    5b14:	af00      	add	r7, sp, #0
    5b16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	2201      	movs	r2, #1
    5b1c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	2200      	movs	r2, #0
    5b22:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5b24:	687b      	ldr	r3, [r7, #4]
    5b26:	2206      	movs	r2, #6
    5b28:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    5b2a:	687b      	ldr	r3, [r7, #4]
    5b2c:	2200      	movs	r2, #0
    5b2e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5b30:	687b      	ldr	r3, [r7, #4]
    5b32:	2200      	movs	r2, #0
    5b34:	725a      	strb	r2, [r3, #9]
}
    5b36:	46bd      	mov	sp, r7
    5b38:	b002      	add	sp, #8
    5b3a:	bd80      	pop	{r7, pc}

00005b3c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    5b3c:	b580      	push	{r7, lr}
    5b3e:	b082      	sub	sp, #8
    5b40:	af00      	add	r7, sp, #0
    5b42:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	2203      	movs	r2, #3
    5b48:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	2200      	movs	r2, #0
    5b4e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	2201      	movs	r2, #1
    5b54:	709a      	strb	r2, [r3, #2]
}
    5b56:	46bd      	mov	sp, r7
    5b58:	b002      	add	sp, #8
    5b5a:	bd80      	pop	{r7, pc}

00005b5c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5b5c:	b580      	push	{r7, lr}
    5b5e:	b082      	sub	sp, #8
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	2200      	movs	r2, #0
    5b68:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5b6a:	687b      	ldr	r3, [r7, #4]
    5b6c:	2200      	movs	r2, #0
    5b6e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	2200      	movs	r2, #0
    5b74:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5b76:	687b      	ldr	r3, [r7, #4]
    5b78:	2200      	movs	r2, #0
    5b7a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	2200      	movs	r2, #0
    5b80:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	2201      	movs	r2, #1
    5b86:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5b88:	687b      	ldr	r3, [r7, #4]
    5b8a:	2207      	movs	r2, #7
    5b8c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	223f      	movs	r2, #63	; 0x3f
    5b92:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	2201      	movs	r2, #1
    5b98:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5b9a:	687b      	ldr	r3, [r7, #4]
    5b9c:	2201      	movs	r2, #1
    5b9e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	2206      	movs	r2, #6
    5ba4:	821a      	strh	r2, [r3, #16]
}
    5ba6:	46bd      	mov	sp, r7
    5ba8:	b002      	add	sp, #8
    5baa:	bd80      	pop	{r7, pc}

00005bac <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b082      	sub	sp, #8
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	1c02      	adds	r2, r0, #0
    5bb4:	1dfb      	adds	r3, r7, #7
    5bb6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5bb8:	4b03      	ldr	r3, [pc, #12]	; (5bc8 <system_cpu_clock_set_divider+0x1c>)
    5bba:	1dfa      	adds	r2, r7, #7
    5bbc:	7812      	ldrb	r2, [r2, #0]
    5bbe:	721a      	strb	r2, [r3, #8]
}
    5bc0:	46bd      	mov	sp, r7
    5bc2:	b002      	add	sp, #8
    5bc4:	bd80      	pop	{r7, pc}
    5bc6:	46c0      	nop			; (mov r8, r8)
    5bc8:	40000400 	.word	0x40000400

00005bcc <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b082      	sub	sp, #8
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	1c0a      	adds	r2, r1, #0
    5bd4:	1dfb      	adds	r3, r7, #7
    5bd6:	1c01      	adds	r1, r0, #0
    5bd8:	7019      	strb	r1, [r3, #0]
    5bda:	1dbb      	adds	r3, r7, #6
    5bdc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5bde:	1dfb      	adds	r3, r7, #7
    5be0:	781b      	ldrb	r3, [r3, #0]
    5be2:	2b01      	cmp	r3, #1
    5be4:	d008      	beq.n	5bf8 <system_apb_clock_set_divider+0x2c>
    5be6:	2b02      	cmp	r3, #2
    5be8:	d00b      	beq.n	5c02 <system_apb_clock_set_divider+0x36>
    5bea:	2b00      	cmp	r3, #0
    5bec:	d10e      	bne.n	5c0c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5bee:	4b0b      	ldr	r3, [pc, #44]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5bf0:	1dba      	adds	r2, r7, #6
    5bf2:	7812      	ldrb	r2, [r2, #0]
    5bf4:	725a      	strb	r2, [r3, #9]
			break;
    5bf6:	e00b      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5bf8:	4b08      	ldr	r3, [pc, #32]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5bfa:	1dba      	adds	r2, r7, #6
    5bfc:	7812      	ldrb	r2, [r2, #0]
    5bfe:	729a      	strb	r2, [r3, #10]
			break;
    5c00:	e006      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5c02:	4b06      	ldr	r3, [pc, #24]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5c04:	1dba      	adds	r2, r7, #6
    5c06:	7812      	ldrb	r2, [r2, #0]
    5c08:	72da      	strb	r2, [r3, #11]
			break;
    5c0a:	e001      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5c0c:	2317      	movs	r3, #23
    5c0e:	e000      	b.n	5c12 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5c10:	2300      	movs	r3, #0
}
    5c12:	1c18      	adds	r0, r3, #0
    5c14:	46bd      	mov	sp, r7
    5c16:	b002      	add	sp, #8
    5c18:	bd80      	pop	{r7, pc}
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	40000400 	.word	0x40000400

00005c20 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b082      	sub	sp, #8
    5c24:	af00      	add	r7, sp, #0
    5c26:	1c02      	adds	r2, r0, #0
    5c28:	1dfb      	adds	r3, r7, #7
    5c2a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5c2c:	4b08      	ldr	r3, [pc, #32]	; (5c50 <system_flash_set_waitstates+0x30>)
    5c2e:	1dfa      	adds	r2, r7, #7
    5c30:	7811      	ldrb	r1, [r2, #0]
    5c32:	220f      	movs	r2, #15
    5c34:	400a      	ands	r2, r1
    5c36:	b2d1      	uxtb	r1, r2
    5c38:	220f      	movs	r2, #15
    5c3a:	400a      	ands	r2, r1
    5c3c:	0052      	lsls	r2, r2, #1
    5c3e:	6859      	ldr	r1, [r3, #4]
    5c40:	201e      	movs	r0, #30
    5c42:	4381      	bics	r1, r0
    5c44:	430a      	orrs	r2, r1
    5c46:	605a      	str	r2, [r3, #4]
}
    5c48:	46bd      	mov	sp, r7
    5c4a:	b002      	add	sp, #8
    5c4c:	bd80      	pop	{r7, pc}
    5c4e:	46c0      	nop			; (mov r8, r8)
    5c50:	41004000 	.word	0x41004000

00005c54 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5c54:	b580      	push	{r7, lr}
    5c56:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5c58:	46c0      	nop			; (mov r8, r8)
    5c5a:	4b03      	ldr	r3, [pc, #12]	; (5c68 <_system_dfll_wait_for_sync+0x14>)
    5c5c:	68da      	ldr	r2, [r3, #12]
    5c5e:	2310      	movs	r3, #16
    5c60:	4013      	ands	r3, r2
    5c62:	d0fa      	beq.n	5c5a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5c64:	46bd      	mov	sp, r7
    5c66:	bd80      	pop	{r7, pc}
    5c68:	40000800 	.word	0x40000800

00005c6c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    5c70:	4a0c      	ldr	r2, [pc, #48]	; (5ca4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c72:	4b0d      	ldr	r3, [pc, #52]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	b29b      	uxth	r3, r3
    5c78:	2180      	movs	r1, #128	; 0x80
    5c7a:	438b      	bics	r3, r1
    5c7c:	b29b      	uxth	r3, r3
    5c7e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5c80:	4b0a      	ldr	r3, [pc, #40]	; (5cac <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5c82:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5c84:	4b07      	ldr	r3, [pc, #28]	; (5ca4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c86:	4a08      	ldr	r2, [pc, #32]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c88:	6892      	ldr	r2, [r2, #8]
    5c8a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5c8c:	4b05      	ldr	r3, [pc, #20]	; (5ca4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c8e:	4a06      	ldr	r2, [pc, #24]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c90:	6852      	ldr	r2, [r2, #4]
    5c92:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5c94:	4a03      	ldr	r2, [pc, #12]	; (5ca4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c96:	4b04      	ldr	r3, [pc, #16]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c98:	681b      	ldr	r3, [r3, #0]
    5c9a:	b29b      	uxth	r3, r3
    5c9c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5c9e:	46bd      	mov	sp, r7
    5ca0:	bd80      	pop	{r7, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	40000800 	.word	0x40000800
    5ca8:	20000f74 	.word	0x20000f74
    5cac:	00005c55 	.word	0x00005c55

00005cb0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5cb0:	b580      	push	{r7, lr}
    5cb2:	b082      	sub	sp, #8
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	1c02      	adds	r2, r0, #0
    5cb8:	1dfb      	adds	r3, r7, #7
    5cba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5cbc:	1dfb      	adds	r3, r7, #7
    5cbe:	781b      	ldrb	r3, [r3, #0]
    5cc0:	2b08      	cmp	r3, #8
    5cc2:	d843      	bhi.n	5d4c <system_clock_source_get_hz+0x9c>
    5cc4:	009a      	lsls	r2, r3, #2
    5cc6:	4b24      	ldr	r3, [pc, #144]	; (5d58 <system_clock_source_get_hz+0xa8>)
    5cc8:	18d3      	adds	r3, r2, r3
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5cce:	4b23      	ldr	r3, [pc, #140]	; (5d5c <system_clock_source_get_hz+0xac>)
    5cd0:	691b      	ldr	r3, [r3, #16]
    5cd2:	e03c      	b.n	5d4e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5cd4:	4b22      	ldr	r3, [pc, #136]	; (5d60 <system_clock_source_get_hz+0xb0>)
    5cd6:	6a1b      	ldr	r3, [r3, #32]
    5cd8:	0a1b      	lsrs	r3, r3, #8
    5cda:	1c1a      	adds	r2, r3, #0
    5cdc:	2303      	movs	r3, #3
    5cde:	4013      	ands	r3, r2
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	4a20      	ldr	r2, [pc, #128]	; (5d64 <system_clock_source_get_hz+0xb4>)
    5ce4:	1c11      	adds	r1, r2, #0
    5ce6:	40d9      	lsrs	r1, r3
    5ce8:	1c0b      	adds	r3, r1, #0
    5cea:	e030      	b.n	5d4e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5cec:	2380      	movs	r3, #128	; 0x80
    5cee:	021b      	lsls	r3, r3, #8
    5cf0:	e02d      	b.n	5d4e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5cf2:	2380      	movs	r3, #128	; 0x80
    5cf4:	021b      	lsls	r3, r3, #8
    5cf6:	e02a      	b.n	5d4e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5cf8:	4b18      	ldr	r3, [pc, #96]	; (5d5c <system_clock_source_get_hz+0xac>)
    5cfa:	695b      	ldr	r3, [r3, #20]
    5cfc:	e027      	b.n	5d4e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5cfe:	4b17      	ldr	r3, [pc, #92]	; (5d5c <system_clock_source_get_hz+0xac>)
    5d00:	681a      	ldr	r2, [r3, #0]
    5d02:	2302      	movs	r3, #2
    5d04:	4013      	ands	r3, r2
    5d06:	d101      	bne.n	5d0c <system_clock_source_get_hz+0x5c>
			return 0;
    5d08:	2300      	movs	r3, #0
    5d0a:	e020      	b.n	5d4e <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5d0c:	4b16      	ldr	r3, [pc, #88]	; (5d68 <system_clock_source_get_hz+0xb8>)
    5d0e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5d10:	4b12      	ldr	r3, [pc, #72]	; (5d5c <system_clock_source_get_hz+0xac>)
    5d12:	681a      	ldr	r2, [r3, #0]
    5d14:	2304      	movs	r3, #4
    5d16:	4013      	ands	r3, r2
    5d18:	d009      	beq.n	5d2e <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5d1a:	2000      	movs	r0, #0
    5d1c:	4b13      	ldr	r3, [pc, #76]	; (5d6c <system_clock_source_get_hz+0xbc>)
    5d1e:	4798      	blx	r3
    5d20:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    5d22:	4b0e      	ldr	r3, [pc, #56]	; (5d5c <system_clock_source_get_hz+0xac>)
    5d24:	689b      	ldr	r3, [r3, #8]
    5d26:	041b      	lsls	r3, r3, #16
    5d28:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5d2a:	4353      	muls	r3, r2
    5d2c:	e00f      	b.n	5d4e <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5d2e:	4b10      	ldr	r3, [pc, #64]	; (5d70 <system_clock_source_get_hz+0xc0>)
    5d30:	e00d      	b.n	5d4e <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5d32:	4a0b      	ldr	r2, [pc, #44]	; (5d60 <system_clock_source_get_hz+0xb0>)
    5d34:	2350      	movs	r3, #80	; 0x50
    5d36:	5cd3      	ldrb	r3, [r2, r3]
    5d38:	b2db      	uxtb	r3, r3
    5d3a:	1c1a      	adds	r2, r3, #0
    5d3c:	2304      	movs	r3, #4
    5d3e:	4013      	ands	r3, r2
    5d40:	d101      	bne.n	5d46 <system_clock_source_get_hz+0x96>
			return 0;
    5d42:	2300      	movs	r3, #0
    5d44:	e003      	b.n	5d4e <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    5d46:	4b05      	ldr	r3, [pc, #20]	; (5d5c <system_clock_source_get_hz+0xac>)
    5d48:	68db      	ldr	r3, [r3, #12]
    5d4a:	e000      	b.n	5d4e <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    5d4c:	2300      	movs	r3, #0
	}
}
    5d4e:	1c18      	adds	r0, r3, #0
    5d50:	46bd      	mov	sp, r7
    5d52:	b002      	add	sp, #8
    5d54:	bd80      	pop	{r7, pc}
    5d56:	46c0      	nop			; (mov r8, r8)
    5d58:	0000aba4 	.word	0x0000aba4
    5d5c:	20000f74 	.word	0x20000f74
    5d60:	40000800 	.word	0x40000800
    5d64:	007a1200 	.word	0x007a1200
    5d68:	00005c55 	.word	0x00005c55
    5d6c:	00006611 	.word	0x00006611
    5d70:	02dc6c00 	.word	0x02dc6c00

00005d74 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b084      	sub	sp, #16
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5d7c:	4b16      	ldr	r3, [pc, #88]	; (5dd8 <system_clock_source_osc8m_set_config+0x64>)
    5d7e:	6a1b      	ldr	r3, [r3, #32]
    5d80:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5d82:	687b      	ldr	r3, [r7, #4]
    5d84:	781b      	ldrb	r3, [r3, #0]
    5d86:	1c1a      	adds	r2, r3, #0
    5d88:	2303      	movs	r3, #3
    5d8a:	4013      	ands	r3, r2
    5d8c:	b2d9      	uxtb	r1, r3
    5d8e:	1c3b      	adds	r3, r7, #0
    5d90:	330d      	adds	r3, #13
    5d92:	2203      	movs	r2, #3
    5d94:	400a      	ands	r2, r1
    5d96:	7819      	ldrb	r1, [r3, #0]
    5d98:	2003      	movs	r0, #3
    5d9a:	4381      	bics	r1, r0
    5d9c:	430a      	orrs	r2, r1
    5d9e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	789a      	ldrb	r2, [r3, #2]
    5da4:	1c3b      	adds	r3, r7, #0
    5da6:	330c      	adds	r3, #12
    5da8:	01d2      	lsls	r2, r2, #7
    5daa:	7818      	ldrb	r0, [r3, #0]
    5dac:	217f      	movs	r1, #127	; 0x7f
    5dae:	4001      	ands	r1, r0
    5db0:	430a      	orrs	r2, r1
    5db2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5db4:	687b      	ldr	r3, [r7, #4]
    5db6:	7859      	ldrb	r1, [r3, #1]
    5db8:	1c3b      	adds	r3, r7, #0
    5dba:	330c      	adds	r3, #12
    5dbc:	2201      	movs	r2, #1
    5dbe:	400a      	ands	r2, r1
    5dc0:	0192      	lsls	r2, r2, #6
    5dc2:	7819      	ldrb	r1, [r3, #0]
    5dc4:	2040      	movs	r0, #64	; 0x40
    5dc6:	4381      	bics	r1, r0
    5dc8:	430a      	orrs	r2, r1
    5dca:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5dcc:	4b02      	ldr	r3, [pc, #8]	; (5dd8 <system_clock_source_osc8m_set_config+0x64>)
    5dce:	68fa      	ldr	r2, [r7, #12]
    5dd0:	621a      	str	r2, [r3, #32]
}
    5dd2:	46bd      	mov	sp, r7
    5dd4:	b004      	add	sp, #16
    5dd6:	bd80      	pop	{r7, pc}
    5dd8:	40000800 	.word	0x40000800

00005ddc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	7a1b      	ldrb	r3, [r3, #8]
    5de8:	029b      	lsls	r3, r3, #10
    5dea:	041b      	lsls	r3, r3, #16
    5dec:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5dee:	687b      	ldr	r3, [r7, #4]
    5df0:	895b      	ldrh	r3, [r3, #10]
    5df2:	059b      	lsls	r3, r3, #22
    5df4:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5df6:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5df8:	4b22      	ldr	r3, [pc, #136]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5dfa:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5e04:	4313      	orrs	r3, r2
    5e06:	b2db      	uxtb	r3, r3
    5e08:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5e0a:	687b      	ldr	r3, [r7, #4]
    5e0c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    5e0e:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5e10:	687b      	ldr	r3, [r7, #4]
    5e12:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5e14:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	785b      	ldrb	r3, [r3, #1]
    5e1a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5e1c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    5e1e:	4b19      	ldr	r3, [pc, #100]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e20:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	2b04      	cmp	r3, #4
    5e28:	d116      	bne.n	5e58 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	7b1b      	ldrb	r3, [r3, #12]
    5e2e:	069b      	lsls	r3, r3, #26
    5e30:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e32:	687b      	ldr	r3, [r7, #4]
    5e34:	89db      	ldrh	r3, [r3, #14]
    5e36:	041b      	lsls	r3, r3, #16
    5e38:	1c19      	adds	r1, r3, #0
    5e3a:	4b13      	ldr	r3, [pc, #76]	; (5e88 <system_clock_source_dfll_set_config+0xac>)
    5e3c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5e3e:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e44:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    5e46:	4b0f      	ldr	r3, [pc, #60]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e48:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5e4a:	4b0e      	ldr	r3, [pc, #56]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e4c:	681a      	ldr	r2, [r3, #0]
    5e4e:	687b      	ldr	r3, [r7, #4]
    5e50:	781b      	ldrb	r3, [r3, #0]
    5e52:	431a      	orrs	r2, r3
    5e54:	4b0b      	ldr	r3, [pc, #44]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e56:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	781b      	ldrb	r3, [r3, #0]
    5e5c:	2b20      	cmp	r3, #32
    5e5e:	d10e      	bne.n	5e7e <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	8a1b      	ldrh	r3, [r3, #16]
    5e64:	1c1a      	adds	r2, r3, #0
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    5e66:	4b07      	ldr	r3, [pc, #28]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e68:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5e6a:	4b06      	ldr	r3, [pc, #24]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e6c:	681a      	ldr	r2, [r3, #0]
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	781b      	ldrb	r3, [r3, #0]
    5e72:	4313      	orrs	r3, r2
    5e74:	2280      	movs	r2, #128	; 0x80
    5e76:	00d2      	lsls	r2, r2, #3
    5e78:	431a      	orrs	r2, r3
    5e7a:	4b02      	ldr	r3, [pc, #8]	; (5e84 <system_clock_source_dfll_set_config+0xa8>)
    5e7c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5e7e:	46bd      	mov	sp, r7
    5e80:	b002      	add	sp, #8
    5e82:	bd80      	pop	{r7, pc}
    5e84:	20000f74 	.word	0x20000f74
    5e88:	03ff0000 	.word	0x03ff0000

00005e8c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5e8c:	b580      	push	{r7, lr}
    5e8e:	b082      	sub	sp, #8
    5e90:	af00      	add	r7, sp, #0
    5e92:	1c02      	adds	r2, r0, #0
    5e94:	1dfb      	adds	r3, r7, #7
    5e96:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5e98:	1dfb      	adds	r3, r7, #7
    5e9a:	781b      	ldrb	r3, [r3, #0]
    5e9c:	2b08      	cmp	r3, #8
    5e9e:	d83b      	bhi.n	5f18 <system_clock_source_enable+0x8c>
    5ea0:	009a      	lsls	r2, r3, #2
    5ea2:	4b21      	ldr	r3, [pc, #132]	; (5f28 <system_clock_source_enable+0x9c>)
    5ea4:	18d3      	adds	r3, r2, r3
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5eaa:	4b20      	ldr	r3, [pc, #128]	; (5f2c <system_clock_source_enable+0xa0>)
    5eac:	4a1f      	ldr	r2, [pc, #124]	; (5f2c <system_clock_source_enable+0xa0>)
    5eae:	6a12      	ldr	r2, [r2, #32]
    5eb0:	2102      	movs	r1, #2
    5eb2:	430a      	orrs	r2, r1
    5eb4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5eb6:	2300      	movs	r3, #0
    5eb8:	e031      	b.n	5f1e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5eba:	4b1c      	ldr	r3, [pc, #112]	; (5f2c <system_clock_source_enable+0xa0>)
    5ebc:	4a1b      	ldr	r2, [pc, #108]	; (5f2c <system_clock_source_enable+0xa0>)
    5ebe:	6992      	ldr	r2, [r2, #24]
    5ec0:	2102      	movs	r1, #2
    5ec2:	430a      	orrs	r2, r1
    5ec4:	619a      	str	r2, [r3, #24]
		break;
    5ec6:	e029      	b.n	5f1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5ec8:	4b18      	ldr	r3, [pc, #96]	; (5f2c <system_clock_source_enable+0xa0>)
    5eca:	4a18      	ldr	r2, [pc, #96]	; (5f2c <system_clock_source_enable+0xa0>)
    5ecc:	8a12      	ldrh	r2, [r2, #16]
    5ece:	b292      	uxth	r2, r2
    5ed0:	2102      	movs	r1, #2
    5ed2:	430a      	orrs	r2, r1
    5ed4:	b292      	uxth	r2, r2
    5ed6:	821a      	strh	r2, [r3, #16]
		break;
    5ed8:	e020      	b.n	5f1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5eda:	4b14      	ldr	r3, [pc, #80]	; (5f2c <system_clock_source_enable+0xa0>)
    5edc:	4a13      	ldr	r2, [pc, #76]	; (5f2c <system_clock_source_enable+0xa0>)
    5ede:	8a92      	ldrh	r2, [r2, #20]
    5ee0:	b292      	uxth	r2, r2
    5ee2:	2102      	movs	r1, #2
    5ee4:	430a      	orrs	r2, r1
    5ee6:	b292      	uxth	r2, r2
    5ee8:	829a      	strh	r2, [r3, #20]
		break;
    5eea:	e017      	b.n	5f1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5eec:	4b10      	ldr	r3, [pc, #64]	; (5f30 <system_clock_source_enable+0xa4>)
    5eee:	681b      	ldr	r3, [r3, #0]
    5ef0:	2202      	movs	r2, #2
    5ef2:	431a      	orrs	r2, r3
    5ef4:	4b0e      	ldr	r3, [pc, #56]	; (5f30 <system_clock_source_enable+0xa4>)
    5ef6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5ef8:	4b0e      	ldr	r3, [pc, #56]	; (5f34 <system_clock_source_enable+0xa8>)
    5efa:	4798      	blx	r3
		break;
    5efc:	e00e      	b.n	5f1c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5efe:	4a0b      	ldr	r2, [pc, #44]	; (5f2c <system_clock_source_enable+0xa0>)
    5f00:	490a      	ldr	r1, [pc, #40]	; (5f2c <system_clock_source_enable+0xa0>)
    5f02:	2344      	movs	r3, #68	; 0x44
    5f04:	5ccb      	ldrb	r3, [r1, r3]
    5f06:	b2db      	uxtb	r3, r3
    5f08:	2102      	movs	r1, #2
    5f0a:	430b      	orrs	r3, r1
    5f0c:	b2d9      	uxtb	r1, r3
    5f0e:	2344      	movs	r3, #68	; 0x44
    5f10:	54d1      	strb	r1, [r2, r3]
		break;
    5f12:	e003      	b.n	5f1c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5f14:	2300      	movs	r3, #0
    5f16:	e002      	b.n	5f1e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5f18:	2317      	movs	r3, #23
    5f1a:	e000      	b.n	5f1e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5f1c:	2300      	movs	r3, #0
}
    5f1e:	1c18      	adds	r0, r3, #0
    5f20:	46bd      	mov	sp, r7
    5f22:	b002      	add	sp, #8
    5f24:	bd80      	pop	{r7, pc}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	0000abc8 	.word	0x0000abc8
    5f2c:	40000800 	.word	0x40000800
    5f30:	20000f74 	.word	0x20000f74
    5f34:	00005c6d 	.word	0x00005c6d

00005f38 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5f38:	b580      	push	{r7, lr}
    5f3a:	b084      	sub	sp, #16
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	1c02      	adds	r2, r0, #0
    5f40:	1dfb      	adds	r3, r7, #7
    5f42:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5f44:	2300      	movs	r3, #0
    5f46:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5f48:	1dfb      	adds	r3, r7, #7
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	2b08      	cmp	r3, #8
    5f4e:	d821      	bhi.n	5f94 <system_clock_source_is_ready+0x5c>
    5f50:	009a      	lsls	r2, r3, #2
    5f52:	4b18      	ldr	r3, [pc, #96]	; (5fb4 <system_clock_source_is_ready+0x7c>)
    5f54:	18d3      	adds	r3, r2, r3
    5f56:	681b      	ldr	r3, [r3, #0]
    5f58:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5f5a:	2308      	movs	r3, #8
    5f5c:	60fb      	str	r3, [r7, #12]
		break;
    5f5e:	e01b      	b.n	5f98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5f60:	2304      	movs	r3, #4
    5f62:	60fb      	str	r3, [r7, #12]
		break;
    5f64:	e018      	b.n	5f98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5f66:	2301      	movs	r3, #1
    5f68:	60fb      	str	r3, [r7, #12]
		break;
    5f6a:	e015      	b.n	5f98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5f6c:	2302      	movs	r3, #2
    5f6e:	60fb      	str	r3, [r7, #12]
		break;
    5f70:	e012      	b.n	5f98 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    5f72:	2310      	movs	r3, #16
    5f74:	60fb      	str	r3, [r7, #12]
		}
		break;
    5f76:	e00f      	b.n	5f98 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5f78:	4a0f      	ldr	r2, [pc, #60]	; (5fb8 <system_clock_source_is_ready+0x80>)
    5f7a:	2350      	movs	r3, #80	; 0x50
    5f7c:	5cd3      	ldrb	r3, [r2, r3]
    5f7e:	b2db      	uxtb	r3, r3
    5f80:	1c1a      	adds	r2, r3, #0
    5f82:	2303      	movs	r3, #3
    5f84:	4013      	ands	r3, r2
    5f86:	3b03      	subs	r3, #3
    5f88:	425a      	negs	r2, r3
    5f8a:	4153      	adcs	r3, r2
    5f8c:	b2db      	uxtb	r3, r3
    5f8e:	e00c      	b.n	5faa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5f90:	2301      	movs	r3, #1
    5f92:	e00a      	b.n	5faa <system_clock_source_is_ready+0x72>

	default:
		return false;
    5f94:	2300      	movs	r3, #0
    5f96:	e008      	b.n	5faa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5f98:	4b07      	ldr	r3, [pc, #28]	; (5fb8 <system_clock_source_is_ready+0x80>)
    5f9a:	68db      	ldr	r3, [r3, #12]
    5f9c:	68fa      	ldr	r2, [r7, #12]
    5f9e:	401a      	ands	r2, r3
    5fa0:	68fb      	ldr	r3, [r7, #12]
    5fa2:	1ad3      	subs	r3, r2, r3
    5fa4:	425a      	negs	r2, r3
    5fa6:	4153      	adcs	r3, r2
    5fa8:	b2db      	uxtb	r3, r3
}
    5faa:	1c18      	adds	r0, r3, #0
    5fac:	46bd      	mov	sp, r7
    5fae:	b004      	add	sp, #16
    5fb0:	bd80      	pop	{r7, pc}
    5fb2:	46c0      	nop			; (mov r8, r8)
    5fb4:	0000abec 	.word	0x0000abec
    5fb8:	40000800 	.word	0x40000800

00005fbc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    5fc2:	1c3b      	adds	r3, r7, #0
    5fc4:	2201      	movs	r2, #1
    5fc6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5fc8:	2300      	movs	r3, #0
    5fca:	607b      	str	r3, [r7, #4]
    5fcc:	e009      	b.n	5fe2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5fce:	687b      	ldr	r3, [r7, #4]
    5fd0:	b2da      	uxtb	r2, r3
    5fd2:	1c3b      	adds	r3, r7, #0
    5fd4:	1c10      	adds	r0, r2, #0
    5fd6:	1c19      	adds	r1, r3, #0
    5fd8:	4b05      	ldr	r3, [pc, #20]	; (5ff0 <_switch_peripheral_gclk+0x34>)
    5fda:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5fdc:	687b      	ldr	r3, [r7, #4]
    5fde:	3301      	adds	r3, #1
    5fe0:	607b      	str	r3, [r7, #4]
    5fe2:	687b      	ldr	r3, [r7, #4]
    5fe4:	2b24      	cmp	r3, #36	; 0x24
    5fe6:	d9f2      	bls.n	5fce <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    5fe8:	46bd      	mov	sp, r7
    5fea:	b002      	add	sp, #8
    5fec:	bd80      	pop	{r7, pc}
    5fee:	46c0      	nop			; (mov r8, r8)
    5ff0:	000064f5 	.word	0x000064f5

00005ff4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	b0a6      	sub	sp, #152	; 0x98
    5ff8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5ffa:	4b5c      	ldr	r3, [pc, #368]	; (616c <system_clock_init+0x178>)
    5ffc:	22c2      	movs	r2, #194	; 0xc2
    5ffe:	00d2      	lsls	r2, r2, #3
    6000:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6002:	2002      	movs	r0, #2
    6004:	4b5a      	ldr	r3, [pc, #360]	; (6170 <system_clock_init+0x17c>)
    6006:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6008:	4b5a      	ldr	r3, [pc, #360]	; (6174 <system_clock_init+0x180>)
    600a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    600c:	1c3b      	adds	r3, r7, #0
    600e:	3380      	adds	r3, #128	; 0x80
    6010:	1c18      	adds	r0, r3, #0
    6012:	4b59      	ldr	r3, [pc, #356]	; (6178 <system_clock_init+0x184>)
    6014:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6016:	1c3b      	adds	r3, r7, #0
    6018:	3380      	adds	r3, #128	; 0x80
    601a:	2220      	movs	r2, #32
    601c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    601e:	1c3b      	adds	r3, r7, #0
    6020:	3380      	adds	r3, #128	; 0x80
    6022:	2200      	movs	r2, #0
    6024:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE and FINE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL. COARSE and DFLL.FINE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6026:	4b55      	ldr	r3, [pc, #340]	; (617c <system_clock_init+0x188>)
    6028:	681b      	ldr	r3, [r3, #0]
    602a:	0e9b      	lsrs	r3, r3, #26
    602c:	2294      	movs	r2, #148	; 0x94
    602e:	19d2      	adds	r2, r2, r7
    6030:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6032:	2294      	movs	r2, #148	; 0x94
    6034:	19d2      	adds	r2, r2, r7
    6036:	6813      	ldr	r3, [r2, #0]
    6038:	2b3f      	cmp	r3, #63	; 0x3f
    603a:	d103      	bne.n	6044 <system_clock_init+0x50>
		coarse = 0x1f;
    603c:	231f      	movs	r3, #31
    603e:	2294      	movs	r2, #148	; 0x94
    6040:	19d2      	adds	r2, r2, r7
    6042:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6044:	2294      	movs	r2, #148	; 0x94
    6046:	19d2      	adds	r2, r2, r7
    6048:	6813      	ldr	r3, [r2, #0]
    604a:	b2da      	uxtb	r2, r3
    604c:	1c3b      	adds	r3, r7, #0
    604e:	3380      	adds	r3, #128	; 0x80
    6050:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6052:	1c3b      	adds	r3, r7, #0
    6054:	3380      	adds	r3, #128	; 0x80
    6056:	2200      	movs	r2, #0
    6058:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    605a:	1c3b      	adds	r3, r7, #0
    605c:	3380      	adds	r3, #128	; 0x80
    605e:	2200      	movs	r2, #0
    6060:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6062:	1c3b      	adds	r3, r7, #0
    6064:	3380      	adds	r3, #128	; 0x80
    6066:	2200      	movs	r2, #0
    6068:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    606a:	1c3b      	adds	r3, r7, #0
    606c:	3380      	adds	r3, #128	; 0x80
    606e:	2200      	movs	r2, #0
    6070:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6072:	1c3b      	adds	r3, r7, #0
    6074:	3380      	adds	r3, #128	; 0x80
    6076:	2207      	movs	r2, #7
    6078:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    607a:	1c3b      	adds	r3, r7, #0
    607c:	3380      	adds	r3, #128	; 0x80
    607e:	223f      	movs	r2, #63	; 0x3f
    6080:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_value   = 0x1ff;
    6082:	1c3b      	adds	r3, r7, #0
    6084:	3380      	adds	r3, #128	; 0x80
    6086:	4a3e      	ldr	r2, [pc, #248]	; (6180 <system_clock_init+0x18c>)
    6088:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    608a:	1c3b      	adds	r3, r7, #0
    608c:	3380      	adds	r3, #128	; 0x80
    608e:	2200      	movs	r2, #0
    6090:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
    6092:	1c3b      	adds	r3, r7, #0
    6094:	3380      	adds	r3, #128	; 0x80
    6096:	2208      	movs	r2, #8
    6098:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    609a:	1c3b      	adds	r3, r7, #0
    609c:	3380      	adds	r3, #128	; 0x80
    609e:	2200      	movs	r2, #0
    60a0:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    60a2:	1c3b      	adds	r3, r7, #0
    60a4:	3380      	adds	r3, #128	; 0x80
    60a6:	2280      	movs	r2, #128	; 0x80
    60a8:	0052      	lsls	r2, r2, #1
    60aa:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    60ac:	1c3b      	adds	r3, r7, #0
    60ae:	3380      	adds	r3, #128	; 0x80
    60b0:	4a34      	ldr	r2, [pc, #208]	; (6184 <system_clock_init+0x190>)
    60b2:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    60b4:	1c3b      	adds	r3, r7, #0
    60b6:	3380      	adds	r3, #128	; 0x80
    60b8:	1c18      	adds	r0, r3, #0
    60ba:	4b33      	ldr	r3, [pc, #204]	; (6188 <system_clock_init+0x194>)
    60bc:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    60be:	1c3b      	adds	r3, r7, #0
    60c0:	337c      	adds	r3, #124	; 0x7c
    60c2:	1c18      	adds	r0, r3, #0
    60c4:	4b31      	ldr	r3, [pc, #196]	; (618c <system_clock_init+0x198>)
    60c6:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    60c8:	1c3b      	adds	r3, r7, #0
    60ca:	337c      	adds	r3, #124	; 0x7c
    60cc:	2200      	movs	r2, #0
    60ce:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    60d0:	1c3b      	adds	r3, r7, #0
    60d2:	337c      	adds	r3, #124	; 0x7c
    60d4:	2201      	movs	r2, #1
    60d6:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    60d8:	1c3b      	adds	r3, r7, #0
    60da:	337c      	adds	r3, #124	; 0x7c
    60dc:	2200      	movs	r2, #0
    60de:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    60e0:	1c3b      	adds	r3, r7, #0
    60e2:	337c      	adds	r3, #124	; 0x7c
    60e4:	1c18      	adds	r0, r3, #0
    60e6:	4b2a      	ldr	r3, [pc, #168]	; (6190 <system_clock_init+0x19c>)
    60e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    60ea:	2006      	movs	r0, #6
    60ec:	4b29      	ldr	r3, [pc, #164]	; (6194 <system_clock_init+0x1a0>)
    60ee:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    60f0:	4b29      	ldr	r3, [pc, #164]	; (6198 <system_clock_init+0x1a4>)
    60f2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    60f4:	2007      	movs	r0, #7
    60f6:	4b27      	ldr	r3, [pc, #156]	; (6194 <system_clock_init+0x1a0>)
    60f8:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    60fa:	46c0      	nop			; (mov r8, r8)
    60fc:	2007      	movs	r0, #7
    60fe:	4b27      	ldr	r3, [pc, #156]	; (619c <system_clock_init+0x1a8>)
    6100:	4798      	blx	r3
    6102:	1c03      	adds	r3, r0, #0
    6104:	2201      	movs	r2, #1
    6106:	4053      	eors	r3, r2
    6108:	b2db      	uxtb	r3, r3
    610a:	2b00      	cmp	r3, #0
    610c:	d1f6      	bne.n	60fc <system_clock_init+0x108>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    610e:	4b17      	ldr	r3, [pc, #92]	; (616c <system_clock_init+0x178>)
    6110:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6112:	2180      	movs	r1, #128	; 0x80
    6114:	430a      	orrs	r2, r1
    6116:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6118:	2000      	movs	r0, #0
    611a:	4b21      	ldr	r3, [pc, #132]	; (61a0 <system_clock_init+0x1ac>)
    611c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    611e:	2000      	movs	r0, #0
    6120:	2100      	movs	r1, #0
    6122:	4b20      	ldr	r3, [pc, #128]	; (61a4 <system_clock_init+0x1b0>)
    6124:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6126:	2001      	movs	r0, #1
    6128:	2100      	movs	r1, #0
    612a:	4b1e      	ldr	r3, [pc, #120]	; (61a4 <system_clock_init+0x1b0>)
    612c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    612e:	2002      	movs	r0, #2
    6130:	2100      	movs	r1, #0
    6132:	4b1c      	ldr	r3, [pc, #112]	; (61a4 <system_clock_init+0x1b0>)
    6134:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6136:	1c3b      	adds	r3, r7, #0
    6138:	1c18      	adds	r0, r3, #0
    613a:	4b1b      	ldr	r3, [pc, #108]	; (61a8 <system_clock_init+0x1b4>)
    613c:	4798      	blx	r3
    613e:	1c3b      	adds	r3, r7, #0
    6140:	2207      	movs	r2, #7
    6142:	701a      	strb	r2, [r3, #0]
    6144:	1c3b      	adds	r3, r7, #0
    6146:	2201      	movs	r2, #1
    6148:	605a      	str	r2, [r3, #4]
    614a:	1c3b      	adds	r3, r7, #0
    614c:	2201      	movs	r2, #1
    614e:	721a      	strb	r2, [r3, #8]
    6150:	1c3b      	adds	r3, r7, #0
    6152:	2200      	movs	r2, #0
    6154:	725a      	strb	r2, [r3, #9]
    6156:	1c3b      	adds	r3, r7, #0
    6158:	2000      	movs	r0, #0
    615a:	1c19      	adds	r1, r3, #0
    615c:	4b13      	ldr	r3, [pc, #76]	; (61ac <system_clock_init+0x1b8>)
    615e:	4798      	blx	r3
    6160:	2000      	movs	r0, #0
    6162:	4b13      	ldr	r3, [pc, #76]	; (61b0 <system_clock_init+0x1bc>)
    6164:	4798      	blx	r3
#endif
}
    6166:	46bd      	mov	sp, r7
    6168:	b026      	add	sp, #152	; 0x98
    616a:	bd80      	pop	{r7, pc}
    616c:	40000800 	.word	0x40000800
    6170:	00005c21 	.word	0x00005c21
    6174:	00005fbd 	.word	0x00005fbd
    6178:	00005b5d 	.word	0x00005b5d
    617c:	00806024 	.word	0x00806024
    6180:	000001ff 	.word	0x000001ff
    6184:	ffffbb80 	.word	0xffffbb80
    6188:	00005ddd 	.word	0x00005ddd
    618c:	00005b3d 	.word	0x00005b3d
    6190:	00005d75 	.word	0x00005d75
    6194:	00005e8d 	.word	0x00005e8d
    6198:	00006255 	.word	0x00006255
    619c:	00005f39 	.word	0x00005f39
    61a0:	00005bad 	.word	0x00005bad
    61a4:	00005bcd 	.word	0x00005bcd
    61a8:	00005b11 	.word	0x00005b11
    61ac:	00006285 	.word	0x00006285
    61b0:	000063ad 	.word	0x000063ad

000061b4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b082      	sub	sp, #8
    61b8:	af00      	add	r7, sp, #0
    61ba:	1c02      	adds	r2, r0, #0
    61bc:	6039      	str	r1, [r7, #0]
    61be:	1dfb      	adds	r3, r7, #7
    61c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    61c2:	1dfb      	adds	r3, r7, #7
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2b01      	cmp	r3, #1
    61c8:	d00a      	beq.n	61e0 <system_apb_clock_set_mask+0x2c>
    61ca:	2b02      	cmp	r3, #2
    61cc:	d00f      	beq.n	61ee <system_apb_clock_set_mask+0x3a>
    61ce:	2b00      	cmp	r3, #0
    61d0:	d114      	bne.n	61fc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    61d2:	4b0e      	ldr	r3, [pc, #56]	; (620c <system_apb_clock_set_mask+0x58>)
    61d4:	4a0d      	ldr	r2, [pc, #52]	; (620c <system_apb_clock_set_mask+0x58>)
    61d6:	6991      	ldr	r1, [r2, #24]
    61d8:	683a      	ldr	r2, [r7, #0]
    61da:	430a      	orrs	r2, r1
    61dc:	619a      	str	r2, [r3, #24]
			break;
    61de:	e00f      	b.n	6200 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    61e0:	4b0a      	ldr	r3, [pc, #40]	; (620c <system_apb_clock_set_mask+0x58>)
    61e2:	4a0a      	ldr	r2, [pc, #40]	; (620c <system_apb_clock_set_mask+0x58>)
    61e4:	69d1      	ldr	r1, [r2, #28]
    61e6:	683a      	ldr	r2, [r7, #0]
    61e8:	430a      	orrs	r2, r1
    61ea:	61da      	str	r2, [r3, #28]
			break;
    61ec:	e008      	b.n	6200 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    61ee:	4b07      	ldr	r3, [pc, #28]	; (620c <system_apb_clock_set_mask+0x58>)
    61f0:	4a06      	ldr	r2, [pc, #24]	; (620c <system_apb_clock_set_mask+0x58>)
    61f2:	6a11      	ldr	r1, [r2, #32]
    61f4:	683a      	ldr	r2, [r7, #0]
    61f6:	430a      	orrs	r2, r1
    61f8:	621a      	str	r2, [r3, #32]
			break;
    61fa:	e001      	b.n	6200 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    61fc:	2317      	movs	r3, #23
    61fe:	e000      	b.n	6202 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6200:	2300      	movs	r3, #0
}
    6202:	1c18      	adds	r0, r3, #0
    6204:	46bd      	mov	sp, r7
    6206:	b002      	add	sp, #8
    6208:	bd80      	pop	{r7, pc}
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	40000400 	.word	0x40000400

00006210 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6210:	b580      	push	{r7, lr}
    6212:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6214:	4b01      	ldr	r3, [pc, #4]	; (621c <system_interrupt_enter_critical_section+0xc>)
    6216:	4798      	blx	r3
}
    6218:	46bd      	mov	sp, r7
    621a:	bd80      	pop	{r7, pc}
    621c:	00003fc5 	.word	0x00003fc5

00006220 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6220:	b580      	push	{r7, lr}
    6222:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6224:	4b01      	ldr	r3, [pc, #4]	; (622c <system_interrupt_leave_critical_section+0xc>)
    6226:	4798      	blx	r3
}
    6228:	46bd      	mov	sp, r7
    622a:	bd80      	pop	{r7, pc}
    622c:	00004015 	.word	0x00004015

00006230 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6230:	b580      	push	{r7, lr}
    6232:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6234:	4b06      	ldr	r3, [pc, #24]	; (6250 <system_gclk_is_syncing+0x20>)
    6236:	785b      	ldrb	r3, [r3, #1]
    6238:	b2db      	uxtb	r3, r3
    623a:	b2db      	uxtb	r3, r3
    623c:	b25b      	sxtb	r3, r3
    623e:	2b00      	cmp	r3, #0
    6240:	da01      	bge.n	6246 <system_gclk_is_syncing+0x16>
		return true;
    6242:	2301      	movs	r3, #1
    6244:	e000      	b.n	6248 <system_gclk_is_syncing+0x18>
	}

	return false;
    6246:	2300      	movs	r3, #0
}
    6248:	1c18      	adds	r0, r3, #0
    624a:	46bd      	mov	sp, r7
    624c:	bd80      	pop	{r7, pc}
    624e:	46c0      	nop			; (mov r8, r8)
    6250:	40000c00 	.word	0x40000c00

00006254 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6254:	b580      	push	{r7, lr}
    6256:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6258:	2000      	movs	r0, #0
    625a:	2108      	movs	r1, #8
    625c:	4b07      	ldr	r3, [pc, #28]	; (627c <system_gclk_init+0x28>)
    625e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6260:	4b07      	ldr	r3, [pc, #28]	; (6280 <system_gclk_init+0x2c>)
    6262:	2201      	movs	r2, #1
    6264:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	4b05      	ldr	r3, [pc, #20]	; (6280 <system_gclk_init+0x2c>)
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	b2db      	uxtb	r3, r3
    626e:	1c1a      	adds	r2, r3, #0
    6270:	2301      	movs	r3, #1
    6272:	4013      	ands	r3, r2
    6274:	d1f8      	bne.n	6268 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6276:	46bd      	mov	sp, r7
    6278:	bd80      	pop	{r7, pc}
    627a:	46c0      	nop			; (mov r8, r8)
    627c:	000061b5 	.word	0x000061b5
    6280:	40000c00 	.word	0x40000c00

00006284 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6284:	b580      	push	{r7, lr}
    6286:	b086      	sub	sp, #24
    6288:	af00      	add	r7, sp, #0
    628a:	1c02      	adds	r2, r0, #0
    628c:	6039      	str	r1, [r7, #0]
    628e:	1dfb      	adds	r3, r7, #7
    6290:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6292:	1dfb      	adds	r3, r7, #7
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6298:	1dfb      	adds	r3, r7, #7
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    629e:	683b      	ldr	r3, [r7, #0]
    62a0:	781b      	ldrb	r3, [r3, #0]
    62a2:	021b      	lsls	r3, r3, #8
    62a4:	697a      	ldr	r2, [r7, #20]
    62a6:	4313      	orrs	r3, r2
    62a8:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    62aa:	683b      	ldr	r3, [r7, #0]
    62ac:	785b      	ldrb	r3, [r3, #1]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d004      	beq.n	62bc <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    62b2:	697b      	ldr	r3, [r7, #20]
    62b4:	2280      	movs	r2, #128	; 0x80
    62b6:	02d2      	lsls	r2, r2, #11
    62b8:	4313      	orrs	r3, r2
    62ba:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    62bc:	683b      	ldr	r3, [r7, #0]
    62be:	7a5b      	ldrb	r3, [r3, #9]
    62c0:	2b00      	cmp	r3, #0
    62c2:	d004      	beq.n	62ce <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    62c4:	697b      	ldr	r3, [r7, #20]
    62c6:	2280      	movs	r2, #128	; 0x80
    62c8:	0312      	lsls	r2, r2, #12
    62ca:	4313      	orrs	r3, r2
    62cc:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    62ce:	683b      	ldr	r3, [r7, #0]
    62d0:	685b      	ldr	r3, [r3, #4]
    62d2:	2b01      	cmp	r3, #1
    62d4:	d92c      	bls.n	6330 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	685a      	ldr	r2, [r3, #4]
    62da:	683b      	ldr	r3, [r7, #0]
    62dc:	685b      	ldr	r3, [r3, #4]
    62de:	3b01      	subs	r3, #1
    62e0:	4013      	ands	r3, r2
    62e2:	d11a      	bne.n	631a <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    62e4:	2300      	movs	r3, #0
    62e6:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    62e8:	2302      	movs	r3, #2
    62ea:	60bb      	str	r3, [r7, #8]
    62ec:	e005      	b.n	62fa <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    62ee:	68fb      	ldr	r3, [r7, #12]
    62f0:	3301      	adds	r3, #1
    62f2:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    62f4:	68bb      	ldr	r3, [r7, #8]
    62f6:	005b      	lsls	r3, r3, #1
    62f8:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    62fa:	683b      	ldr	r3, [r7, #0]
    62fc:	685a      	ldr	r2, [r3, #4]
    62fe:	68bb      	ldr	r3, [r7, #8]
    6300:	429a      	cmp	r2, r3
    6302:	d8f4      	bhi.n	62ee <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6304:	68fb      	ldr	r3, [r7, #12]
    6306:	021b      	lsls	r3, r3, #8
    6308:	693a      	ldr	r2, [r7, #16]
    630a:	4313      	orrs	r3, r2
    630c:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    630e:	697b      	ldr	r3, [r7, #20]
    6310:	2280      	movs	r2, #128	; 0x80
    6312:	0352      	lsls	r2, r2, #13
    6314:	4313      	orrs	r3, r2
    6316:	617b      	str	r3, [r7, #20]
    6318:	e00a      	b.n	6330 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    631a:	683b      	ldr	r3, [r7, #0]
    631c:	685b      	ldr	r3, [r3, #4]
    631e:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6320:	693a      	ldr	r2, [r7, #16]
    6322:	4313      	orrs	r3, r2
    6324:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6326:	697b      	ldr	r3, [r7, #20]
    6328:	2280      	movs	r2, #128	; 0x80
    632a:	0292      	lsls	r2, r2, #10
    632c:	4313      	orrs	r3, r2
    632e:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	7a1b      	ldrb	r3, [r3, #8]
    6334:	2b00      	cmp	r3, #0
    6336:	d005      	beq.n	6344 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6338:	697b      	ldr	r3, [r7, #20]
    633a:	2280      	movs	r2, #128	; 0x80
    633c:	0392      	lsls	r2, r2, #14
    633e:	4313      	orrs	r3, r2
    6340:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6342:	e7ff      	b.n	6344 <system_gclk_gen_set_config+0xc0>
    6344:	46c0      	nop			; (mov r8, r8)
    6346:	4b14      	ldr	r3, [pc, #80]	; (6398 <system_gclk_gen_set_config+0x114>)
    6348:	4798      	blx	r3
    634a:	1c03      	adds	r3, r0, #0
    634c:	2b00      	cmp	r3, #0
    634e:	d1fa      	bne.n	6346 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6350:	4b12      	ldr	r3, [pc, #72]	; (639c <system_gclk_gen_set_config+0x118>)
    6352:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6354:	4b12      	ldr	r3, [pc, #72]	; (63a0 <system_gclk_gen_set_config+0x11c>)
    6356:	1dfa      	adds	r2, r7, #7
    6358:	7812      	ldrb	r2, [r2, #0]
    635a:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    635c:	46c0      	nop			; (mov r8, r8)
    635e:	4b0e      	ldr	r3, [pc, #56]	; (6398 <system_gclk_gen_set_config+0x114>)
    6360:	4798      	blx	r3
    6362:	1c03      	adds	r3, r0, #0
    6364:	2b00      	cmp	r3, #0
    6366:	d1fa      	bne.n	635e <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6368:	4b0e      	ldr	r3, [pc, #56]	; (63a4 <system_gclk_gen_set_config+0x120>)
    636a:	693a      	ldr	r2, [r7, #16]
    636c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	4b09      	ldr	r3, [pc, #36]	; (6398 <system_gclk_gen_set_config+0x114>)
    6372:	4798      	blx	r3
    6374:	1c03      	adds	r3, r0, #0
    6376:	2b00      	cmp	r3, #0
    6378:	d1fa      	bne.n	6370 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    637a:	4b0a      	ldr	r3, [pc, #40]	; (63a4 <system_gclk_gen_set_config+0x120>)
    637c:	4a09      	ldr	r2, [pc, #36]	; (63a4 <system_gclk_gen_set_config+0x120>)
    637e:	6851      	ldr	r1, [r2, #4]
    6380:	2280      	movs	r2, #128	; 0x80
    6382:	0252      	lsls	r2, r2, #9
    6384:	4011      	ands	r1, r2
    6386:	697a      	ldr	r2, [r7, #20]
    6388:	430a      	orrs	r2, r1
    638a:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    638c:	4b06      	ldr	r3, [pc, #24]	; (63a8 <system_gclk_gen_set_config+0x124>)
    638e:	4798      	blx	r3
}
    6390:	46bd      	mov	sp, r7
    6392:	b006      	add	sp, #24
    6394:	bd80      	pop	{r7, pc}
    6396:	46c0      	nop			; (mov r8, r8)
    6398:	00006231 	.word	0x00006231
    639c:	00006211 	.word	0x00006211
    63a0:	40000c08 	.word	0x40000c08
    63a4:	40000c00 	.word	0x40000c00
    63a8:	00006221 	.word	0x00006221

000063ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b082      	sub	sp, #8
    63b0:	af00      	add	r7, sp, #0
    63b2:	1c02      	adds	r2, r0, #0
    63b4:	1dfb      	adds	r3, r7, #7
    63b6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    63b8:	46c0      	nop			; (mov r8, r8)
    63ba:	4b0e      	ldr	r3, [pc, #56]	; (63f4 <system_gclk_gen_enable+0x48>)
    63bc:	4798      	blx	r3
    63be:	1c03      	adds	r3, r0, #0
    63c0:	2b00      	cmp	r3, #0
    63c2:	d1fa      	bne.n	63ba <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    63c4:	4b0c      	ldr	r3, [pc, #48]	; (63f8 <system_gclk_gen_enable+0x4c>)
    63c6:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    63c8:	4b0c      	ldr	r3, [pc, #48]	; (63fc <system_gclk_gen_enable+0x50>)
    63ca:	1dfa      	adds	r2, r7, #7
    63cc:	7812      	ldrb	r2, [r2, #0]
    63ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    63d0:	46c0      	nop			; (mov r8, r8)
    63d2:	4b08      	ldr	r3, [pc, #32]	; (63f4 <system_gclk_gen_enable+0x48>)
    63d4:	4798      	blx	r3
    63d6:	1c03      	adds	r3, r0, #0
    63d8:	2b00      	cmp	r3, #0
    63da:	d1fa      	bne.n	63d2 <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    63dc:	4b08      	ldr	r3, [pc, #32]	; (6400 <system_gclk_gen_enable+0x54>)
    63de:	4a08      	ldr	r2, [pc, #32]	; (6400 <system_gclk_gen_enable+0x54>)
    63e0:	6852      	ldr	r2, [r2, #4]
    63e2:	2180      	movs	r1, #128	; 0x80
    63e4:	0249      	lsls	r1, r1, #9
    63e6:	430a      	orrs	r2, r1
    63e8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    63ea:	4b06      	ldr	r3, [pc, #24]	; (6404 <system_gclk_gen_enable+0x58>)
    63ec:	4798      	blx	r3
}
    63ee:	46bd      	mov	sp, r7
    63f0:	b002      	add	sp, #8
    63f2:	bd80      	pop	{r7, pc}
    63f4:	00006231 	.word	0x00006231
    63f8:	00006211 	.word	0x00006211
    63fc:	40000c04 	.word	0x40000c04
    6400:	40000c00 	.word	0x40000c00
    6404:	00006221 	.word	0x00006221

00006408 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6408:	b580      	push	{r7, lr}
    640a:	b086      	sub	sp, #24
    640c:	af00      	add	r7, sp, #0
    640e:	1c02      	adds	r2, r0, #0
    6410:	1dfb      	adds	r3, r7, #7
    6412:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6414:	46c0      	nop			; (mov r8, r8)
    6416:	4b2f      	ldr	r3, [pc, #188]	; (64d4 <system_gclk_gen_get_hz+0xcc>)
    6418:	4798      	blx	r3
    641a:	1c03      	adds	r3, r0, #0
    641c:	2b00      	cmp	r3, #0
    641e:	d1fa      	bne.n	6416 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6420:	4b2d      	ldr	r3, [pc, #180]	; (64d8 <system_gclk_gen_get_hz+0xd0>)
    6422:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6424:	4b2d      	ldr	r3, [pc, #180]	; (64dc <system_gclk_gen_get_hz+0xd4>)
    6426:	1dfa      	adds	r2, r7, #7
    6428:	7812      	ldrb	r2, [r2, #0]
    642a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    642c:	46c0      	nop			; (mov r8, r8)
    642e:	4b29      	ldr	r3, [pc, #164]	; (64d4 <system_gclk_gen_get_hz+0xcc>)
    6430:	4798      	blx	r3
    6432:	1c03      	adds	r3, r0, #0
    6434:	2b00      	cmp	r3, #0
    6436:	d1fa      	bne.n	642e <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6438:	4b29      	ldr	r3, [pc, #164]	; (64e0 <system_gclk_gen_get_hz+0xd8>)
    643a:	685b      	ldr	r3, [r3, #4]
    643c:	0a1b      	lsrs	r3, r3, #8
    643e:	1c1a      	adds	r2, r3, #0
    6440:	231f      	movs	r3, #31
    6442:	4013      	ands	r3, r2
    6444:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6446:	1c18      	adds	r0, r3, #0
    6448:	4b26      	ldr	r3, [pc, #152]	; (64e4 <system_gclk_gen_get_hz+0xdc>)
    644a:	4798      	blx	r3
    644c:	1c03      	adds	r3, r0, #0
    644e:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6450:	4b22      	ldr	r3, [pc, #136]	; (64dc <system_gclk_gen_get_hz+0xd4>)
    6452:	1dfa      	adds	r2, r7, #7
    6454:	7812      	ldrb	r2, [r2, #0]
    6456:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6458:	4b21      	ldr	r3, [pc, #132]	; (64e0 <system_gclk_gen_get_hz+0xd8>)
    645a:	685b      	ldr	r3, [r3, #4]
    645c:	0d1b      	lsrs	r3, r3, #20
    645e:	1c1a      	adds	r2, r3, #0
    6460:	2301      	movs	r3, #1
    6462:	4013      	ands	r3, r2
    6464:	b2da      	uxtb	r2, r3
    6466:	1c3b      	adds	r3, r7, #0
    6468:	3313      	adds	r3, #19
    646a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    646c:	4b1e      	ldr	r3, [pc, #120]	; (64e8 <system_gclk_gen_get_hz+0xe0>)
    646e:	1dfa      	adds	r2, r7, #7
    6470:	7812      	ldrb	r2, [r2, #0]
    6472:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6474:	46c0      	nop			; (mov r8, r8)
    6476:	4b17      	ldr	r3, [pc, #92]	; (64d4 <system_gclk_gen_get_hz+0xcc>)
    6478:	4798      	blx	r3
    647a:	1c03      	adds	r3, r0, #0
    647c:	2b00      	cmp	r3, #0
    647e:	d1fa      	bne.n	6476 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6480:	4b17      	ldr	r3, [pc, #92]	; (64e0 <system_gclk_gen_get_hz+0xd8>)
    6482:	689b      	ldr	r3, [r3, #8]
    6484:	0a1b      	lsrs	r3, r3, #8
    6486:	2200      	movs	r2, #0
    6488:	4393      	bics	r3, r2
    648a:	b29b      	uxth	r3, r3
    648c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    648e:	4b17      	ldr	r3, [pc, #92]	; (64ec <system_gclk_gen_get_hz+0xe4>)
    6490:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6492:	1c3b      	adds	r3, r7, #0
    6494:	3313      	adds	r3, #19
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	2b00      	cmp	r3, #0
    649a:	d109      	bne.n	64b0 <system_gclk_gen_get_hz+0xa8>
    649c:	68fb      	ldr	r3, [r7, #12]
    649e:	2b01      	cmp	r3, #1
    64a0:	d906      	bls.n	64b0 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    64a2:	4b13      	ldr	r3, [pc, #76]	; (64f0 <system_gclk_gen_get_hz+0xe8>)
    64a4:	6978      	ldr	r0, [r7, #20]
    64a6:	68f9      	ldr	r1, [r7, #12]
    64a8:	4798      	blx	r3
    64aa:	1c03      	adds	r3, r0, #0
    64ac:	617b      	str	r3, [r7, #20]
    64ae:	e00b      	b.n	64c8 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    64b0:	1c3b      	adds	r3, r7, #0
    64b2:	3313      	adds	r3, #19
    64b4:	781b      	ldrb	r3, [r3, #0]
    64b6:	2b00      	cmp	r3, #0
    64b8:	d006      	beq.n	64c8 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	3301      	adds	r3, #1
    64be:	697a      	ldr	r2, [r7, #20]
    64c0:	1c11      	adds	r1, r2, #0
    64c2:	40d9      	lsrs	r1, r3
    64c4:	1c0b      	adds	r3, r1, #0
    64c6:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    64c8:	697b      	ldr	r3, [r7, #20]
}
    64ca:	1c18      	adds	r0, r3, #0
    64cc:	46bd      	mov	sp, r7
    64ce:	b006      	add	sp, #24
    64d0:	bd80      	pop	{r7, pc}
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	00006231 	.word	0x00006231
    64d8:	00006211 	.word	0x00006211
    64dc:	40000c04 	.word	0x40000c04
    64e0:	40000c00 	.word	0x40000c00
    64e4:	00005cb1 	.word	0x00005cb1
    64e8:	40000c08 	.word	0x40000c08
    64ec:	00006221 	.word	0x00006221
    64f0:	0000a8f9 	.word	0x0000a8f9

000064f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b084      	sub	sp, #16
    64f8:	af00      	add	r7, sp, #0
    64fa:	1c02      	adds	r2, r0, #0
    64fc:	6039      	str	r1, [r7, #0]
    64fe:	1dfb      	adds	r3, r7, #7
    6500:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6502:	1dfb      	adds	r3, r7, #7
    6504:	781b      	ldrb	r3, [r3, #0]
    6506:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6508:	683b      	ldr	r3, [r7, #0]
    650a:	781b      	ldrb	r3, [r3, #0]
    650c:	021b      	lsls	r3, r3, #8
    650e:	68fa      	ldr	r2, [r7, #12]
    6510:	4313      	orrs	r3, r2
    6512:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6514:	1dfb      	adds	r3, r7, #7
    6516:	781b      	ldrb	r3, [r3, #0]
    6518:	1c18      	adds	r0, r3, #0
    651a:	4b04      	ldr	r3, [pc, #16]	; (652c <system_gclk_chan_set_config+0x38>)
    651c:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    651e:	4b04      	ldr	r3, [pc, #16]	; (6530 <system_gclk_chan_set_config+0x3c>)
    6520:	68fa      	ldr	r2, [r7, #12]
    6522:	b292      	uxth	r2, r2
    6524:	805a      	strh	r2, [r3, #2]
}
    6526:	46bd      	mov	sp, r7
    6528:	b004      	add	sp, #16
    652a:	bd80      	pop	{r7, pc}
    652c:	00006579 	.word	0x00006579
    6530:	40000c00 	.word	0x40000c00

00006534 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6534:	b580      	push	{r7, lr}
    6536:	b082      	sub	sp, #8
    6538:	af00      	add	r7, sp, #0
    653a:	1c02      	adds	r2, r0, #0
    653c:	1dfb      	adds	r3, r7, #7
    653e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6540:	4b09      	ldr	r3, [pc, #36]	; (6568 <system_gclk_chan_enable+0x34>)
    6542:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6544:	4b09      	ldr	r3, [pc, #36]	; (656c <system_gclk_chan_enable+0x38>)
    6546:	1dfa      	adds	r2, r7, #7
    6548:	7812      	ldrb	r2, [r2, #0]
    654a:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    654c:	4b08      	ldr	r3, [pc, #32]	; (6570 <system_gclk_chan_enable+0x3c>)
    654e:	4a08      	ldr	r2, [pc, #32]	; (6570 <system_gclk_chan_enable+0x3c>)
    6550:	8852      	ldrh	r2, [r2, #2]
    6552:	b292      	uxth	r2, r2
    6554:	2180      	movs	r1, #128	; 0x80
    6556:	01c9      	lsls	r1, r1, #7
    6558:	430a      	orrs	r2, r1
    655a:	b292      	uxth	r2, r2
    655c:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    655e:	4b05      	ldr	r3, [pc, #20]	; (6574 <system_gclk_chan_enable+0x40>)
    6560:	4798      	blx	r3
}
    6562:	46bd      	mov	sp, r7
    6564:	b002      	add	sp, #8
    6566:	bd80      	pop	{r7, pc}
    6568:	00006211 	.word	0x00006211
    656c:	40000c02 	.word	0x40000c02
    6570:	40000c00 	.word	0x40000c00
    6574:	00006221 	.word	0x00006221

00006578 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6578:	b580      	push	{r7, lr}
    657a:	b084      	sub	sp, #16
    657c:	af00      	add	r7, sp, #0
    657e:	1c02      	adds	r2, r0, #0
    6580:	1dfb      	adds	r3, r7, #7
    6582:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6584:	4b1c      	ldr	r3, [pc, #112]	; (65f8 <system_gclk_chan_disable+0x80>)
    6586:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6588:	4b1c      	ldr	r3, [pc, #112]	; (65fc <system_gclk_chan_disable+0x84>)
    658a:	1dfa      	adds	r2, r7, #7
    658c:	7812      	ldrb	r2, [r2, #0]
    658e:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6590:	4b1b      	ldr	r3, [pc, #108]	; (6600 <system_gclk_chan_disable+0x88>)
    6592:	885b      	ldrh	r3, [r3, #2]
    6594:	b29b      	uxth	r3, r3
    6596:	0a1b      	lsrs	r3, r3, #8
    6598:	1c1a      	adds	r2, r3, #0
    659a:	230f      	movs	r3, #15
    659c:	4013      	ands	r3, r2
    659e:	b2db      	uxtb	r3, r3
    65a0:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    65a2:	4b17      	ldr	r3, [pc, #92]	; (6600 <system_gclk_chan_disable+0x88>)
    65a4:	8859      	ldrh	r1, [r3, #2]
    65a6:	4a17      	ldr	r2, [pc, #92]	; (6604 <system_gclk_chan_disable+0x8c>)
    65a8:	400a      	ands	r2, r1
    65aa:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    65ac:	4b14      	ldr	r3, [pc, #80]	; (6600 <system_gclk_chan_disable+0x88>)
    65ae:	4a14      	ldr	r2, [pc, #80]	; (6600 <system_gclk_chan_disable+0x88>)
    65b0:	8852      	ldrh	r2, [r2, #2]
    65b2:	b291      	uxth	r1, r2
    65b4:	4a14      	ldr	r2, [pc, #80]	; (6608 <system_gclk_chan_disable+0x90>)
    65b6:	400a      	ands	r2, r1
    65b8:	b292      	uxth	r2, r2
    65ba:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    65bc:	46c0      	nop			; (mov r8, r8)
    65be:	4b10      	ldr	r3, [pc, #64]	; (6600 <system_gclk_chan_disable+0x88>)
    65c0:	885b      	ldrh	r3, [r3, #2]
    65c2:	b29b      	uxth	r3, r3
    65c4:	1c1a      	adds	r2, r3, #0
    65c6:	2380      	movs	r3, #128	; 0x80
    65c8:	01db      	lsls	r3, r3, #7
    65ca:	4013      	ands	r3, r2
    65cc:	d1f7      	bne.n	65be <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    65ce:	4b0c      	ldr	r3, [pc, #48]	; (6600 <system_gclk_chan_disable+0x88>)
    65d0:	68fa      	ldr	r2, [r7, #12]
    65d2:	b2d2      	uxtb	r2, r2
    65d4:	1c11      	adds	r1, r2, #0
    65d6:	220f      	movs	r2, #15
    65d8:	400a      	ands	r2, r1
    65da:	b2d1      	uxtb	r1, r2
    65dc:	220f      	movs	r2, #15
    65de:	400a      	ands	r2, r1
    65e0:	0212      	lsls	r2, r2, #8
    65e2:	8858      	ldrh	r0, [r3, #2]
    65e4:	4907      	ldr	r1, [pc, #28]	; (6604 <system_gclk_chan_disable+0x8c>)
    65e6:	4001      	ands	r1, r0
    65e8:	430a      	orrs	r2, r1
    65ea:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    65ec:	4b07      	ldr	r3, [pc, #28]	; (660c <system_gclk_chan_disable+0x94>)
    65ee:	4798      	blx	r3
}
    65f0:	46bd      	mov	sp, r7
    65f2:	b004      	add	sp, #16
    65f4:	bd80      	pop	{r7, pc}
    65f6:	46c0      	nop			; (mov r8, r8)
    65f8:	00006211 	.word	0x00006211
    65fc:	40000c02 	.word	0x40000c02
    6600:	40000c00 	.word	0x40000c00
    6604:	fffff0ff 	.word	0xfffff0ff
    6608:	ffffbfff 	.word	0xffffbfff
    660c:	00006221 	.word	0x00006221

00006610 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6610:	b580      	push	{r7, lr}
    6612:	b084      	sub	sp, #16
    6614:	af00      	add	r7, sp, #0
    6616:	1c02      	adds	r2, r0, #0
    6618:	1dfb      	adds	r3, r7, #7
    661a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    661c:	4b0e      	ldr	r3, [pc, #56]	; (6658 <system_gclk_chan_get_hz+0x48>)
    661e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6620:	4b0e      	ldr	r3, [pc, #56]	; (665c <system_gclk_chan_get_hz+0x4c>)
    6622:	1dfa      	adds	r2, r7, #7
    6624:	7812      	ldrb	r2, [r2, #0]
    6626:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6628:	4b0d      	ldr	r3, [pc, #52]	; (6660 <system_gclk_chan_get_hz+0x50>)
    662a:	885b      	ldrh	r3, [r3, #2]
    662c:	b29b      	uxth	r3, r3
    662e:	0a1b      	lsrs	r3, r3, #8
    6630:	1c1a      	adds	r2, r3, #0
    6632:	230f      	movs	r3, #15
    6634:	4013      	ands	r3, r2
    6636:	b2da      	uxtb	r2, r3
    6638:	1c3b      	adds	r3, r7, #0
    663a:	330f      	adds	r3, #15
    663c:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    663e:	4b09      	ldr	r3, [pc, #36]	; (6664 <system_gclk_chan_get_hz+0x54>)
    6640:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6642:	1c3b      	adds	r3, r7, #0
    6644:	330f      	adds	r3, #15
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	1c18      	adds	r0, r3, #0
    664a:	4b07      	ldr	r3, [pc, #28]	; (6668 <system_gclk_chan_get_hz+0x58>)
    664c:	4798      	blx	r3
    664e:	1c03      	adds	r3, r0, #0
}
    6650:	1c18      	adds	r0, r3, #0
    6652:	46bd      	mov	sp, r7
    6654:	b004      	add	sp, #16
    6656:	bd80      	pop	{r7, pc}
    6658:	00006211 	.word	0x00006211
    665c:	40000c02 	.word	0x40000c02
    6660:	40000c00 	.word	0x40000c00
    6664:	00006221 	.word	0x00006221
    6668:	00006409 	.word	0x00006409

0000666c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    666c:	b580      	push	{r7, lr}
    666e:	b084      	sub	sp, #16
    6670:	af00      	add	r7, sp, #0
    6672:	1c02      	adds	r2, r0, #0
    6674:	1dfb      	adds	r3, r7, #7
    6676:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6678:	1c3b      	adds	r3, r7, #0
    667a:	330f      	adds	r3, #15
    667c:	1dfa      	adds	r2, r7, #7
    667e:	7812      	ldrb	r2, [r2, #0]
    6680:	09d2      	lsrs	r2, r2, #7
    6682:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6684:	1c3b      	adds	r3, r7, #0
    6686:	330e      	adds	r3, #14
    6688:	1dfa      	adds	r2, r7, #7
    668a:	7812      	ldrb	r2, [r2, #0]
    668c:	0952      	lsrs	r2, r2, #5
    668e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6690:	4b0d      	ldr	r3, [pc, #52]	; (66c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6692:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6694:	1c3b      	adds	r3, r7, #0
    6696:	330f      	adds	r3, #15
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	2b00      	cmp	r3, #0
    669c:	d10e      	bne.n	66bc <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    669e:	1c3b      	adds	r3, r7, #0
    66a0:	330f      	adds	r3, #15
    66a2:	781b      	ldrb	r3, [r3, #0]
    66a4:	009b      	lsls	r3, r3, #2
    66a6:	2210      	movs	r2, #16
    66a8:	19d2      	adds	r2, r2, r7
    66aa:	18d3      	adds	r3, r2, r3
    66ac:	3b08      	subs	r3, #8
    66ae:	681a      	ldr	r2, [r3, #0]
    66b0:	1c3b      	adds	r3, r7, #0
    66b2:	330e      	adds	r3, #14
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	01db      	lsls	r3, r3, #7
    66b8:	18d3      	adds	r3, r2, r3
    66ba:	e000      	b.n	66be <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    66bc:	2300      	movs	r3, #0
	}
}
    66be:	1c18      	adds	r0, r3, #0
    66c0:	46bd      	mov	sp, r7
    66c2:	b004      	add	sp, #16
    66c4:	bd80      	pop	{r7, pc}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	41004400 	.word	0x41004400

000066cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b088      	sub	sp, #32
    66d0:	af00      	add	r7, sp, #0
    66d2:	60f8      	str	r0, [r7, #12]
    66d4:	60b9      	str	r1, [r7, #8]
    66d6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    66d8:	2300      	movs	r3, #0
    66da:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    66dc:	687b      	ldr	r3, [r7, #4]
    66de:	78db      	ldrb	r3, [r3, #3]
    66e0:	2201      	movs	r2, #1
    66e2:	4053      	eors	r3, r2
    66e4:	b2db      	uxtb	r3, r3
    66e6:	2b00      	cmp	r3, #0
    66e8:	d034      	beq.n	6754 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    66ea:	687b      	ldr	r3, [r7, #4]
    66ec:	781b      	ldrb	r3, [r3, #0]
    66ee:	2b80      	cmp	r3, #128	; 0x80
    66f0:	d00a      	beq.n	6708 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    66f2:	69fb      	ldr	r3, [r7, #28]
    66f4:	2280      	movs	r2, #128	; 0x80
    66f6:	0252      	lsls	r2, r2, #9
    66f8:	4313      	orrs	r3, r2
    66fa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	061b      	lsls	r3, r3, #24
    6702:	69fa      	ldr	r2, [r7, #28]
    6704:	4313      	orrs	r3, r2
    6706:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	785b      	ldrb	r3, [r3, #1]
    670c:	2b00      	cmp	r3, #0
    670e:	d003      	beq.n	6718 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6714:	2b02      	cmp	r3, #2
    6716:	d110      	bne.n	673a <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6718:	69fb      	ldr	r3, [r7, #28]
    671a:	2280      	movs	r2, #128	; 0x80
    671c:	0292      	lsls	r2, r2, #10
    671e:	4313      	orrs	r3, r2
    6720:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	789b      	ldrb	r3, [r3, #2]
    6726:	2b00      	cmp	r3, #0
    6728:	d004      	beq.n	6734 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    672a:	69fb      	ldr	r3, [r7, #28]
    672c:	2280      	movs	r2, #128	; 0x80
    672e:	02d2      	lsls	r2, r2, #11
    6730:	4313      	orrs	r3, r2
    6732:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6734:	68fb      	ldr	r3, [r7, #12]
    6736:	68ba      	ldr	r2, [r7, #8]
    6738:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    673a:	687b      	ldr	r3, [r7, #4]
    673c:	785b      	ldrb	r3, [r3, #1]
    673e:	2b01      	cmp	r3, #1
    6740:	d003      	beq.n	674a <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6746:	2b02      	cmp	r3, #2
    6748:	d107      	bne.n	675a <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    674a:	69fa      	ldr	r2, [r7, #28]
    674c:	4b21      	ldr	r3, [pc, #132]	; (67d4 <_system_pinmux_config+0x108>)
    674e:	4013      	ands	r3, r2
    6750:	61fb      	str	r3, [r7, #28]
    6752:	e002      	b.n	675a <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6754:	68fb      	ldr	r3, [r7, #12]
    6756:	68ba      	ldr	r2, [r7, #8]
    6758:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    675a:	68bb      	ldr	r3, [r7, #8]
    675c:	041b      	lsls	r3, r3, #16
    675e:	0c1b      	lsrs	r3, r3, #16
    6760:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6762:	68bb      	ldr	r3, [r7, #8]
    6764:	0c1b      	lsrs	r3, r3, #16
    6766:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6768:	69ba      	ldr	r2, [r7, #24]
    676a:	69fb      	ldr	r3, [r7, #28]
    676c:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    676e:	22a0      	movs	r2, #160	; 0xa0
    6770:	05d2      	lsls	r2, r2, #23
    6772:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6774:	68fb      	ldr	r3, [r7, #12]
    6776:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6778:	697a      	ldr	r2, [r7, #20]
    677a:	69fb      	ldr	r3, [r7, #28]
    677c:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    677e:	22d0      	movs	r2, #208	; 0xd0
    6780:	0612      	lsls	r2, r2, #24
    6782:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6784:	68fb      	ldr	r3, [r7, #12]
    6786:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	78db      	ldrb	r3, [r3, #3]
    678c:	2201      	movs	r2, #1
    678e:	4053      	eors	r3, r2
    6790:	b2db      	uxtb	r3, r3
    6792:	2b00      	cmp	r3, #0
    6794:	d01a      	beq.n	67cc <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6796:	69fa      	ldr	r2, [r7, #28]
    6798:	2380      	movs	r3, #128	; 0x80
    679a:	02db      	lsls	r3, r3, #11
    679c:	4013      	ands	r3, r2
    679e:	d00a      	beq.n	67b6 <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    67a0:	687b      	ldr	r3, [r7, #4]
    67a2:	789b      	ldrb	r3, [r3, #2]
    67a4:	2b01      	cmp	r3, #1
    67a6:	d103      	bne.n	67b0 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    67a8:	68fb      	ldr	r3, [r7, #12]
    67aa:	68ba      	ldr	r2, [r7, #8]
    67ac:	619a      	str	r2, [r3, #24]
    67ae:	e002      	b.n	67b6 <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    67b0:	68fb      	ldr	r3, [r7, #12]
    67b2:	68ba      	ldr	r2, [r7, #8]
    67b4:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	785b      	ldrb	r3, [r3, #1]
    67ba:	2b01      	cmp	r3, #1
    67bc:	d003      	beq.n	67c6 <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67c2:	2b02      	cmp	r3, #2
    67c4:	d102      	bne.n	67cc <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    67c6:	68fb      	ldr	r3, [r7, #12]
    67c8:	68ba      	ldr	r2, [r7, #8]
    67ca:	609a      	str	r2, [r3, #8]
		}
	}
}
    67cc:	46bd      	mov	sp, r7
    67ce:	b008      	add	sp, #32
    67d0:	bd80      	pop	{r7, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	fffbffff 	.word	0xfffbffff

000067d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    67d8:	b580      	push	{r7, lr}
    67da:	b084      	sub	sp, #16
    67dc:	af00      	add	r7, sp, #0
    67de:	1c02      	adds	r2, r0, #0
    67e0:	6039      	str	r1, [r7, #0]
    67e2:	1dfb      	adds	r3, r7, #7
    67e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    67e6:	1dfb      	adds	r3, r7, #7
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	1c18      	adds	r0, r3, #0
    67ec:	4b0b      	ldr	r3, [pc, #44]	; (681c <system_pinmux_pin_set_config+0x44>)
    67ee:	4798      	blx	r3
    67f0:	1c03      	adds	r3, r0, #0
    67f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    67f4:	1dfb      	adds	r3, r7, #7
    67f6:	781a      	ldrb	r2, [r3, #0]
    67f8:	231f      	movs	r3, #31
    67fa:	4013      	ands	r3, r2
    67fc:	2201      	movs	r2, #1
    67fe:	1c11      	adds	r1, r2, #0
    6800:	4099      	lsls	r1, r3
    6802:	1c0b      	adds	r3, r1, #0
    6804:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6806:	68f9      	ldr	r1, [r7, #12]
    6808:	68ba      	ldr	r2, [r7, #8]
    680a:	683b      	ldr	r3, [r7, #0]
    680c:	1c08      	adds	r0, r1, #0
    680e:	1c11      	adds	r1, r2, #0
    6810:	1c1a      	adds	r2, r3, #0
    6812:	4b03      	ldr	r3, [pc, #12]	; (6820 <system_pinmux_pin_set_config+0x48>)
    6814:	4798      	blx	r3
}
    6816:	46bd      	mov	sp, r7
    6818:	b004      	add	sp, #16
    681a:	bd80      	pop	{r7, pc}
    681c:	0000666d 	.word	0x0000666d
    6820:	000066cd 	.word	0x000066cd

00006824 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6824:	b580      	push	{r7, lr}
    6826:	af00      	add	r7, sp, #0
	return;
    6828:	46c0      	nop			; (mov r8, r8)
}
    682a:	46bd      	mov	sp, r7
    682c:	bd80      	pop	{r7, pc}
    682e:	46c0      	nop			; (mov r8, r8)

00006830 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6830:	b580      	push	{r7, lr}
    6832:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6834:	4b04      	ldr	r3, [pc, #16]	; (6848 <system_init+0x18>)
    6836:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6838:	4b04      	ldr	r3, [pc, #16]	; (684c <system_init+0x1c>)
    683a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    683c:	4b04      	ldr	r3, [pc, #16]	; (6850 <system_init+0x20>)
    683e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6840:	4b04      	ldr	r3, [pc, #16]	; (6854 <system_init+0x24>)
    6842:	4798      	blx	r3
}
    6844:	46bd      	mov	sp, r7
    6846:	bd80      	pop	{r7, pc}
    6848:	00005ff5 	.word	0x00005ff5
    684c:	00004149 	.word	0x00004149
    6850:	00006825 	.word	0x00006825
    6854:	00004511 	.word	0x00004511

00006858 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    6858:	b580      	push	{r7, lr}
    685a:	b082      	sub	sp, #8
    685c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    685e:	f3ef 8310 	mrs	r3, PRIMASK
    6862:	603b      	str	r3, [r7, #0]
  return(result);
    6864:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    6866:	425a      	negs	r2, r3
    6868:	4153      	adcs	r3, r2
    686a:	b2db      	uxtb	r3, r3
    686c:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    686e:	b672      	cpsid	i
    6870:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6874:	4b03      	ldr	r3, [pc, #12]	; (6884 <cpu_irq_save+0x2c>)
    6876:	2200      	movs	r2, #0
    6878:	701a      	strb	r2, [r3, #0]
	return flags;
    687a:	687b      	ldr	r3, [r7, #4]
}
    687c:	1c18      	adds	r0, r3, #0
    687e:	46bd      	mov	sp, r7
    6880:	b002      	add	sp, #8
    6882:	bd80      	pop	{r7, pc}
    6884:	20000254 	.word	0x20000254

00006888 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    6888:	b580      	push	{r7, lr}
    688a:	b082      	sub	sp, #8
    688c:	af00      	add	r7, sp, #0
    688e:	6078      	str	r0, [r7, #4]
	return (flags);
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	1e5a      	subs	r2, r3, #1
    6894:	4193      	sbcs	r3, r2
    6896:	b2db      	uxtb	r3, r3
}
    6898:	1c18      	adds	r0, r3, #0
    689a:	46bd      	mov	sp, r7
    689c:	b002      	add	sp, #8
    689e:	bd80      	pop	{r7, pc}

000068a0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b082      	sub	sp, #8
    68a4:	af00      	add	r7, sp, #0
    68a6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	1c18      	adds	r0, r3, #0
    68ac:	4b06      	ldr	r3, [pc, #24]	; (68c8 <cpu_irq_restore+0x28>)
    68ae:	4798      	blx	r3
    68b0:	1c03      	adds	r3, r0, #0
    68b2:	2b00      	cmp	r3, #0
    68b4:	d005      	beq.n	68c2 <cpu_irq_restore+0x22>
		cpu_irq_enable();
    68b6:	4b05      	ldr	r3, [pc, #20]	; (68cc <cpu_irq_restore+0x2c>)
    68b8:	2201      	movs	r2, #1
    68ba:	701a      	strb	r2, [r3, #0]
    68bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    68c0:	b662      	cpsie	i
}
    68c2:	46bd      	mov	sp, r7
    68c4:	b002      	add	sp, #8
    68c6:	bd80      	pop	{r7, pc}
    68c8:	00006889 	.word	0x00006889
    68cc:	20000254 	.word	0x20000254

000068d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b084      	sub	sp, #16
    68d4:	af00      	add	r7, sp, #0
    68d6:	1c02      	adds	r2, r0, #0
    68d8:	1dfb      	adds	r3, r7, #7
    68da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    68dc:	1c3b      	adds	r3, r7, #0
    68de:	330f      	adds	r3, #15
    68e0:	1dfa      	adds	r2, r7, #7
    68e2:	7812      	ldrb	r2, [r2, #0]
    68e4:	09d2      	lsrs	r2, r2, #7
    68e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    68e8:	1c3b      	adds	r3, r7, #0
    68ea:	330e      	adds	r3, #14
    68ec:	1dfa      	adds	r2, r7, #7
    68ee:	7812      	ldrb	r2, [r2, #0]
    68f0:	0952      	lsrs	r2, r2, #5
    68f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    68f4:	4b0d      	ldr	r3, [pc, #52]	; (692c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    68f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    68f8:	1c3b      	adds	r3, r7, #0
    68fa:	330f      	adds	r3, #15
    68fc:	781b      	ldrb	r3, [r3, #0]
    68fe:	2b00      	cmp	r3, #0
    6900:	d10e      	bne.n	6920 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6902:	1c3b      	adds	r3, r7, #0
    6904:	330f      	adds	r3, #15
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	009b      	lsls	r3, r3, #2
    690a:	2210      	movs	r2, #16
    690c:	19d2      	adds	r2, r2, r7
    690e:	18d3      	adds	r3, r2, r3
    6910:	3b08      	subs	r3, #8
    6912:	681a      	ldr	r2, [r3, #0]
    6914:	1c3b      	adds	r3, r7, #0
    6916:	330e      	adds	r3, #14
    6918:	781b      	ldrb	r3, [r3, #0]
    691a:	01db      	lsls	r3, r3, #7
    691c:	18d3      	adds	r3, r2, r3
    691e:	e000      	b.n	6922 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6920:	2300      	movs	r3, #0
	}
}
    6922:	1c18      	adds	r0, r3, #0
    6924:	46bd      	mov	sp, r7
    6926:	b004      	add	sp, #16
    6928:	bd80      	pop	{r7, pc}
    692a:	46c0      	nop			; (mov r8, r8)
    692c:	41004400 	.word	0x41004400

00006930 <usb_get_state_machine_status>:
 * \brief Get the status of USB module's state machine
 *
 * \param module_inst Pointer to USB module instance
 */
static inline uint8_t usb_get_state_machine_status(struct usb_module *module_inst)
{
    6930:	b580      	push	{r7, lr}
    6932:	b082      	sub	sp, #8
    6934:	af00      	add	r7, sp, #0
    6936:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	681b      	ldr	r3, [r3, #0]
    693c:	7b5b      	ldrb	r3, [r3, #13]
    693e:	b2db      	uxtb	r3, r3
}
    6940:	1c18      	adds	r0, r3, #0
    6942:	46bd      	mov	sp, r7
    6944:	b002      	add	sp, #8
    6946:	bd80      	pop	{r7, pc}

00006948 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    6948:	b580      	push	{r7, lr}
    694a:	b082      	sub	sp, #8
    694c:	af00      	add	r7, sp, #0
    694e:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    6950:	687b      	ldr	r3, [r7, #4]
    6952:	681a      	ldr	r2, [r3, #0]
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	681b      	ldr	r3, [r3, #0]
    6958:	891b      	ldrh	r3, [r3, #8]
    695a:	b29b      	uxth	r3, r3
    695c:	2101      	movs	r1, #1
    695e:	438b      	bics	r3, r1
    6960:	b29b      	uxth	r3, r3
    6962:	8113      	strh	r3, [r2, #8]
}
    6964:	46bd      	mov	sp, r7
    6966:	b002      	add	sp, #8
    6968:	bd80      	pop	{r7, pc}
    696a:	46c0      	nop			; (mov r8, r8)

0000696c <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    696c:	b580      	push	{r7, lr}
    696e:	b082      	sub	sp, #8
    6970:	af00      	add	r7, sp, #0
    6972:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	681a      	ldr	r2, [r3, #0]
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	891b      	ldrh	r3, [r3, #8]
    697e:	b29b      	uxth	r3, r3
    6980:	2101      	movs	r1, #1
    6982:	430b      	orrs	r3, r1
    6984:	b29b      	uxth	r3, r3
    6986:	8113      	strh	r3, [r2, #8]
}
    6988:	46bd      	mov	sp, r7
    698a:	b002      	add	sp, #8
    698c:	bd80      	pop	{r7, pc}
    698e:	46c0      	nop			; (mov r8, r8)

00006990 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    6990:	b580      	push	{r7, lr}
    6992:	b082      	sub	sp, #8
    6994:	af00      	add	r7, sp, #0
    6996:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    6998:	687b      	ldr	r3, [r7, #4]
    699a:	681b      	ldr	r3, [r3, #0]
    699c:	7a9a      	ldrb	r2, [r3, #10]
    699e:	237f      	movs	r3, #127	; 0x7f
    69a0:	4013      	ands	r3, r2
    69a2:	b2db      	uxtb	r3, r3
}
    69a4:	1c18      	adds	r0, r3, #0
    69a6:	46bd      	mov	sp, r7
    69a8:	b002      	add	sp, #8
    69aa:	bd80      	pop	{r7, pc}

000069ac <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    69ac:	b580      	push	{r7, lr}
    69ae:	b082      	sub	sp, #8
    69b0:	af00      	add	r7, sp, #0
    69b2:	6078      	str	r0, [r7, #4]
    69b4:	1c0a      	adds	r2, r1, #0
    69b6:	1cfb      	adds	r3, r7, #3
    69b8:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    69ba:	687b      	ldr	r3, [r7, #4]
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	1cfa      	adds	r2, r7, #3
    69c0:	7812      	ldrb	r2, [r2, #0]
    69c2:	2180      	movs	r1, #128	; 0x80
    69c4:	4249      	negs	r1, r1
    69c6:	430a      	orrs	r2, r1
    69c8:	b2d2      	uxtb	r2, r2
    69ca:	729a      	strb	r2, [r3, #10]
}
    69cc:	46bd      	mov	sp, r7
    69ce:	b002      	add	sp, #8
    69d0:	bd80      	pop	{r7, pc}
    69d2:	46c0      	nop			; (mov r8, r8)

000069d4 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    69d4:	b580      	push	{r7, lr}
    69d6:	b082      	sub	sp, #8
    69d8:	af00      	add	r7, sp, #0
    69da:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    69dc:	687b      	ldr	r3, [r7, #4]
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	8a1b      	ldrh	r3, [r3, #16]
    69e2:	b29b      	uxth	r3, r3
    69e4:	08db      	lsrs	r3, r3, #3
    69e6:	055b      	lsls	r3, r3, #21
    69e8:	0d5b      	lsrs	r3, r3, #21
    69ea:	b29b      	uxth	r3, r3
}
    69ec:	1c18      	adds	r0, r3, #0
    69ee:	46bd      	mov	sp, r7
    69f0:	b002      	add	sp, #8
    69f2:	bd80      	pop	{r7, pc}

000069f4 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b082      	sub	sp, #8
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    69fc:	687b      	ldr	r3, [r7, #4]
    69fe:	681b      	ldr	r3, [r3, #0]
    6a00:	8a1b      	ldrh	r3, [r3, #16]
    6a02:	b29b      	uxth	r3, r3
}
    6a04:	1c18      	adds	r0, r3, #0
    6a06:	46bd      	mov	sp, r7
    6a08:	b002      	add	sp, #8
    6a0a:	bd80      	pop	{r7, pc}

00006a0c <usb_device_send_remote_wake_up>:
 * \brief USB device send the resume wakeup
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
    6a0c:	b580      	push	{r7, lr}
    6a0e:	b082      	sub	sp, #8
    6a10:	af00      	add	r7, sp, #0
    6a12:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	681a      	ldr	r2, [r3, #0]
    6a18:	687b      	ldr	r3, [r7, #4]
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	891b      	ldrh	r3, [r3, #8]
    6a1e:	b29b      	uxth	r3, r3
    6a20:	2102      	movs	r1, #2
    6a22:	430b      	orrs	r3, r1
    6a24:	b29b      	uxth	r3, r3
    6a26:	8113      	strh	r3, [r2, #8]
}
    6a28:	46bd      	mov	sp, r7
    6a2a:	b002      	add	sp, #8
    6a2c:	bd80      	pop	{r7, pc}
    6a2e:	46c0      	nop			; (mov r8, r8)

00006a30 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    6a30:	b580      	push	{r7, lr}
    6a32:	b082      	sub	sp, #8
    6a34:	af00      	add	r7, sp, #0
    6a36:	6078      	str	r0, [r7, #4]
    6a38:	1c0a      	adds	r2, r1, #0
    6a3a:	1cfb      	adds	r3, r7, #3
    6a3c:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    6a3e:	687b      	ldr	r3, [r7, #4]
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	1cfa      	adds	r2, r7, #3
    6a44:	7811      	ldrb	r1, [r2, #0]
    6a46:	2203      	movs	r2, #3
    6a48:	400a      	ands	r2, r1
    6a4a:	b2d1      	uxtb	r1, r2
    6a4c:	2203      	movs	r2, #3
    6a4e:	400a      	ands	r2, r1
    6a50:	0292      	lsls	r2, r2, #10
    6a52:	8918      	ldrh	r0, [r3, #8]
    6a54:	4903      	ldr	r1, [pc, #12]	; (6a64 <usb_device_set_lpm_mode+0x34>)
    6a56:	4001      	ands	r1, r0
    6a58:	430a      	orrs	r2, r1
    6a5a:	811a      	strh	r2, [r3, #8]
}
    6a5c:	46bd      	mov	sp, r7
    6a5e:	b002      	add	sp, #8
    6a60:	bd80      	pop	{r7, pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	fffff3ff 	.word	0xfffff3ff

00006a68 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6a68:	b580      	push	{r7, lr}
    6a6a:	b082      	sub	sp, #8
    6a6c:	af00      	add	r7, sp, #0
    6a6e:	1c02      	adds	r2, r0, #0
    6a70:	1dfb      	adds	r3, r7, #7
    6a72:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6a74:	1dfb      	adds	r3, r7, #7
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	1c18      	adds	r0, r3, #0
    6a7a:	4b03      	ldr	r3, [pc, #12]	; (6a88 <port_get_group_from_gpio_pin+0x20>)
    6a7c:	4798      	blx	r3
    6a7e:	1c03      	adds	r3, r0, #0
}
    6a80:	1c18      	adds	r0, r3, #0
    6a82:	46bd      	mov	sp, r7
    6a84:	b002      	add	sp, #8
    6a86:	bd80      	pop	{r7, pc}
    6a88:	000068d1 	.word	0x000068d1

00006a8c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b084      	sub	sp, #16
    6a90:	af00      	add	r7, sp, #0
    6a92:	1c02      	adds	r2, r0, #0
    6a94:	1dfb      	adds	r3, r7, #7
    6a96:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6a98:	1dfb      	adds	r3, r7, #7
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	1c18      	adds	r0, r3, #0
    6a9e:	4b0c      	ldr	r3, [pc, #48]	; (6ad0 <port_pin_get_input_level+0x44>)
    6aa0:	4798      	blx	r3
    6aa2:	1c03      	adds	r3, r0, #0
    6aa4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6aa6:	1dfb      	adds	r3, r7, #7
    6aa8:	781a      	ldrb	r2, [r3, #0]
    6aaa:	231f      	movs	r3, #31
    6aac:	4013      	ands	r3, r2
    6aae:	2201      	movs	r2, #1
    6ab0:	1c11      	adds	r1, r2, #0
    6ab2:	4099      	lsls	r1, r3
    6ab4:	1c0b      	adds	r3, r1, #0
    6ab6:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    6ab8:	68fb      	ldr	r3, [r7, #12]
    6aba:	6a1b      	ldr	r3, [r3, #32]
    6abc:	68ba      	ldr	r2, [r7, #8]
    6abe:	4013      	ands	r3, r2
    6ac0:	1e5a      	subs	r2, r3, #1
    6ac2:	4193      	sbcs	r3, r2
    6ac4:	b2db      	uxtb	r3, r3
}
    6ac6:	1c18      	adds	r0, r3, #0
    6ac8:	46bd      	mov	sp, r7
    6aca:	b004      	add	sp, #16
    6acc:	bd80      	pop	{r7, pc}
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	00006a69 	.word	0x00006a69

00006ad4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b084      	sub	sp, #16
    6ad8:	af00      	add	r7, sp, #0
    6ada:	1c02      	adds	r2, r0, #0
    6adc:	1dfb      	adds	r3, r7, #7
    6ade:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    6ae0:	1dfb      	adds	r3, r7, #7
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	4a0b      	ldr	r2, [pc, #44]	; (6b14 <sleepmgr_lock_mode+0x40>)
    6ae6:	5cd3      	ldrb	r3, [r2, r3]
    6ae8:	2bff      	cmp	r3, #255	; 0xff
    6aea:	d100      	bne.n	6aee <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    6aec:	e7fe      	b.n	6aec <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    6aee:	4b0a      	ldr	r3, [pc, #40]	; (6b18 <sleepmgr_lock_mode+0x44>)
    6af0:	4798      	blx	r3
    6af2:	1c03      	adds	r3, r0, #0
    6af4:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    6af6:	1dfb      	adds	r3, r7, #7
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	4a06      	ldr	r2, [pc, #24]	; (6b14 <sleepmgr_lock_mode+0x40>)
    6afc:	5cd2      	ldrb	r2, [r2, r3]
    6afe:	3201      	adds	r2, #1
    6b00:	b2d1      	uxtb	r1, r2
    6b02:	4a04      	ldr	r2, [pc, #16]	; (6b14 <sleepmgr_lock_mode+0x40>)
    6b04:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    6b06:	68fb      	ldr	r3, [r7, #12]
    6b08:	1c18      	adds	r0, r3, #0
    6b0a:	4b04      	ldr	r3, [pc, #16]	; (6b1c <sleepmgr_lock_mode+0x48>)
    6b0c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    6b0e:	46bd      	mov	sp, r7
    6b10:	b004      	add	sp, #16
    6b12:	bd80      	pop	{r7, pc}
    6b14:	200038dc 	.word	0x200038dc
    6b18:	00006859 	.word	0x00006859
    6b1c:	000068a1 	.word	0x000068a1

00006b20 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	b084      	sub	sp, #16
    6b24:	af00      	add	r7, sp, #0
    6b26:	1c02      	adds	r2, r0, #0
    6b28:	1dfb      	adds	r3, r7, #7
    6b2a:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    6b2c:	1dfb      	adds	r3, r7, #7
    6b2e:	781b      	ldrb	r3, [r3, #0]
    6b30:	4a0b      	ldr	r2, [pc, #44]	; (6b60 <sleepmgr_unlock_mode+0x40>)
    6b32:	5cd3      	ldrb	r3, [r2, r3]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d100      	bne.n	6b3a <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    6b38:	e7fe      	b.n	6b38 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    6b3a:	4b0a      	ldr	r3, [pc, #40]	; (6b64 <sleepmgr_unlock_mode+0x44>)
    6b3c:	4798      	blx	r3
    6b3e:	1c03      	adds	r3, r0, #0
    6b40:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    6b42:	1dfb      	adds	r3, r7, #7
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	4a06      	ldr	r2, [pc, #24]	; (6b60 <sleepmgr_unlock_mode+0x40>)
    6b48:	5cd2      	ldrb	r2, [r2, r3]
    6b4a:	3a01      	subs	r2, #1
    6b4c:	b2d1      	uxtb	r1, r2
    6b4e:	4a04      	ldr	r2, [pc, #16]	; (6b60 <sleepmgr_unlock_mode+0x40>)
    6b50:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    6b52:	68fb      	ldr	r3, [r7, #12]
    6b54:	1c18      	adds	r0, r3, #0
    6b56:	4b04      	ldr	r3, [pc, #16]	; (6b68 <sleepmgr_unlock_mode+0x48>)
    6b58:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    6b5a:	46bd      	mov	sp, r7
    6b5c:	b004      	add	sp, #16
    6b5e:	bd80      	pop	{r7, pc}
    6b60:	200038dc 	.word	0x200038dc
    6b64:	00006859 	.word	0x00006859
    6b68:	000068a1 	.word	0x000068a1

00006b6c <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    6b6c:	b580      	push	{r7, lr}
    6b6e:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    6b70:	4b0b      	ldr	r3, [pc, #44]	; (6ba0 <udd_wait_clock_ready+0x34>)
    6b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6b74:	b29b      	uxth	r3, r3
    6b76:	1c1a      	adds	r2, r3, #0
    6b78:	2320      	movs	r3, #32
    6b7a:	4013      	ands	r3, r2
    6b7c:	d107      	bne.n	6b8e <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	4b07      	ldr	r3, [pc, #28]	; (6ba0 <udd_wait_clock_ready+0x34>)
    6b82:	68da      	ldr	r2, [r3, #12]
    6b84:	23d0      	movs	r3, #208	; 0xd0
    6b86:	4013      	ands	r3, r2
    6b88:	2bd0      	cmp	r3, #208	; 0xd0
    6b8a:	d1f9      	bne.n	6b80 <udd_wait_clock_ready+0x14>
    6b8c:	e005      	b.n	6b9a <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	4b03      	ldr	r3, [pc, #12]	; (6ba0 <udd_wait_clock_ready+0x34>)
    6b92:	68da      	ldr	r2, [r3, #12]
    6b94:	2310      	movs	r3, #16
    6b96:	4013      	ands	r3, r2
    6b98:	d0fa      	beq.n	6b90 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    6b9a:	46bd      	mov	sp, r7
    6b9c:	bd80      	pop	{r7, pc}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	40000800 	.word	0x40000800

00006ba4 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b084      	sub	sp, #16
    6ba8:	af00      	add	r7, sp, #0
    6baa:	1c02      	adds	r2, r0, #0
    6bac:	1dfb      	adds	r3, r7, #7
    6bae:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    6bb0:	1c3a      	adds	r2, r7, #0
    6bb2:	320c      	adds	r2, #12
    6bb4:	4b16      	ldr	r3, [pc, #88]	; (6c10 <udd_sleep_mode+0x6c>)
    6bb6:	1c11      	adds	r1, r2, #0
    6bb8:	1c1a      	adds	r2, r3, #0
    6bba:	2304      	movs	r3, #4
    6bbc:	1c08      	adds	r0, r1, #0
    6bbe:	1c11      	adds	r1, r2, #0
    6bc0:	1c1a      	adds	r2, r3, #0
    6bc2:	4b14      	ldr	r3, [pc, #80]	; (6c14 <udd_sleep_mode+0x70>)
    6bc4:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    6bc6:	4b14      	ldr	r3, [pc, #80]	; (6c18 <udd_sleep_mode+0x74>)
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	1dfa      	adds	r2, r7, #7
    6bcc:	7812      	ldrb	r2, [r2, #0]
    6bce:	429a      	cmp	r2, r3
    6bd0:	d01b      	beq.n	6c0a <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    6bd2:	1dfb      	adds	r3, r7, #7
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d007      	beq.n	6bea <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    6bda:	1dfb      	adds	r3, r7, #7
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	1c3a      	adds	r2, r7, #0
    6be0:	320c      	adds	r2, #12
    6be2:	5cd3      	ldrb	r3, [r2, r3]
    6be4:	1c18      	adds	r0, r3, #0
    6be6:	4b0d      	ldr	r3, [pc, #52]	; (6c1c <udd_sleep_mode+0x78>)
    6be8:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    6bea:	4b0b      	ldr	r3, [pc, #44]	; (6c18 <udd_sleep_mode+0x74>)
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d007      	beq.n	6c02 <udd_sleep_mode+0x5e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    6bf2:	4b09      	ldr	r3, [pc, #36]	; (6c18 <udd_sleep_mode+0x74>)
    6bf4:	781b      	ldrb	r3, [r3, #0]
    6bf6:	1c3a      	adds	r2, r7, #0
    6bf8:	320c      	adds	r2, #12
    6bfa:	5cd3      	ldrb	r3, [r2, r3]
    6bfc:	1c18      	adds	r0, r3, #0
    6bfe:	4b08      	ldr	r3, [pc, #32]	; (6c20 <udd_sleep_mode+0x7c>)
    6c00:	4798      	blx	r3
	}
	udd_state = new_state;
    6c02:	4b05      	ldr	r3, [pc, #20]	; (6c18 <udd_sleep_mode+0x74>)
    6c04:	1dfa      	adds	r2, r7, #7
    6c06:	7812      	ldrb	r2, [r2, #0]
    6c08:	701a      	strb	r2, [r3, #0]
}
    6c0a:	46bd      	mov	sp, r7
    6c0c:	b004      	add	sp, #16
    6c0e:	bd80      	pop	{r7, pc}
    6c10:	0000ac10 	.word	0x0000ac10
    6c14:	0000ab29 	.word	0x0000ab29
    6c18:	200010ac 	.word	0x200010ac
    6c1c:	00006ad5 	.word	0x00006ad5
    6c20:	00006b21 	.word	0x00006b21

00006c24 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	b082      	sub	sp, #8
    6c28:	af00      	add	r7, sp, #0
    6c2a:	1c02      	adds	r2, r0, #0
    6c2c:	1dfb      	adds	r3, r7, #7
    6c2e:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    6c30:	1dfb      	adds	r3, r7, #7
    6c32:	781a      	ldrb	r2, [r3, #0]
    6c34:	230f      	movs	r3, #15
    6c36:	4013      	ands	r3, r2
    6c38:	005a      	lsls	r2, r3, #1
    6c3a:	1dfb      	adds	r3, r7, #7
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	09db      	lsrs	r3, r3, #7
    6c40:	b2db      	uxtb	r3, r3
    6c42:	18d3      	adds	r3, r2, r3
    6c44:	1e9a      	subs	r2, r3, #2
    6c46:	1c13      	adds	r3, r2, #0
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	189b      	adds	r3, r3, r2
    6c4c:	009b      	lsls	r3, r3, #2
    6c4e:	4a03      	ldr	r2, [pc, #12]	; (6c5c <udd_ep_get_job+0x38>)
    6c50:	189b      	adds	r3, r3, r2
}
    6c52:	1c18      	adds	r0, r3, #0
    6c54:	46bd      	mov	sp, r7
    6c56:	b002      	add	sp, #8
    6c58:	bd80      	pop	{r7, pc}
    6c5a:	46c0      	nop			; (mov r8, r8)
    6c5c:	20000f94 	.word	0x20000f94

00006c60 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    6c60:	b590      	push	{r4, r7, lr}
    6c62:	b089      	sub	sp, #36	; 0x24
    6c64:	af00      	add	r7, sp, #0
    6c66:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6c68:	687b      	ldr	r3, [r7, #4]
    6c6a:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    6c6c:	1c3b      	adds	r3, r7, #0
    6c6e:	3317      	adds	r3, #23
    6c70:	69ba      	ldr	r2, [r7, #24]
    6c72:	7992      	ldrb	r2, [r2, #6]
    6c74:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    6c76:	1c3b      	adds	r3, r7, #0
    6c78:	3317      	adds	r3, #23
    6c7a:	781b      	ldrb	r3, [r3, #0]
    6c7c:	1c18      	adds	r0, r3, #0
    6c7e:	4b55      	ldr	r3, [pc, #340]	; (6dd4 <udd_ep_trans_in_next+0x174>)
    6c80:	4798      	blx	r3
    6c82:	1c03      	adds	r3, r0, #0
    6c84:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    6c86:	1c3b      	adds	r3, r7, #0
    6c88:	330f      	adds	r3, #15
    6c8a:	1c3a      	adds	r2, r7, #0
    6c8c:	3217      	adds	r2, #23
    6c8e:	7811      	ldrb	r1, [r2, #0]
    6c90:	220f      	movs	r2, #15
    6c92:	400a      	ands	r2, r1
    6c94:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    6c96:	1c3b      	adds	r3, r7, #0
    6c98:	330c      	adds	r3, #12
    6c9a:	693a      	ldr	r2, [r7, #16]
    6c9c:	8a12      	ldrh	r2, [r2, #16]
    6c9e:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    6ca0:	1c3b      	adds	r3, r7, #0
    6ca2:	330a      	adds	r3, #10
    6ca4:	69ba      	ldr	r2, [r7, #24]
    6ca6:	8852      	ldrh	r2, [r2, #2]
    6ca8:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    6caa:	693b      	ldr	r3, [r7, #16]
    6cac:	68da      	ldr	r2, [r3, #12]
    6cae:	1c3b      	adds	r3, r7, #0
    6cb0:	330a      	adds	r3, #10
    6cb2:	881b      	ldrh	r3, [r3, #0]
    6cb4:	18d2      	adds	r2, r2, r3
    6cb6:	693b      	ldr	r3, [r7, #16]
    6cb8:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    6cba:	693b      	ldr	r3, [r7, #16]
    6cbc:	68da      	ldr	r2, [r3, #12]
    6cbe:	693b      	ldr	r3, [r7, #16]
    6cc0:	689b      	ldr	r3, [r3, #8]
    6cc2:	429a      	cmp	r2, r3
    6cc4:	d053      	beq.n	6d6e <udd_ep_trans_in_next+0x10e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    6cc6:	693b      	ldr	r3, [r7, #16]
    6cc8:	689b      	ldr	r3, [r3, #8]
    6cca:	b299      	uxth	r1, r3
    6ccc:	693b      	ldr	r3, [r7, #16]
    6cce:	68db      	ldr	r3, [r3, #12]
    6cd0:	b29a      	uxth	r2, r3
    6cd2:	1c3b      	adds	r3, r7, #0
    6cd4:	331e      	adds	r3, #30
    6cd6:	1a8a      	subs	r2, r1, r2
    6cd8:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    6cda:	1c3b      	adds	r3, r7, #0
    6cdc:	331e      	adds	r3, #30
    6cde:	881a      	ldrh	r2, [r3, #0]
    6ce0:	4b3d      	ldr	r3, [pc, #244]	; (6dd8 <udd_ep_trans_in_next+0x178>)
    6ce2:	429a      	cmp	r2, r3
    6ce4:	d90e      	bls.n	6d04 <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    6ce6:	1c3b      	adds	r3, r7, #0
    6ce8:	330c      	adds	r3, #12
    6cea:	881a      	ldrh	r2, [r3, #0]
    6cec:	493a      	ldr	r1, [pc, #232]	; (6dd8 <udd_ep_trans_in_next+0x178>)
    6cee:	4b3b      	ldr	r3, [pc, #236]	; (6ddc <udd_ep_trans_in_next+0x17c>)
    6cf0:	1c08      	adds	r0, r1, #0
    6cf2:	1c11      	adds	r1, r2, #0
    6cf4:	4798      	blx	r3
    6cf6:	1c0b      	adds	r3, r1, #0
    6cf8:	b29a      	uxth	r2, r3
    6cfa:	1c3b      	adds	r3, r7, #0
    6cfc:	331e      	adds	r3, #30
    6cfe:	4936      	ldr	r1, [pc, #216]	; (6dd8 <udd_ep_trans_in_next+0x178>)
    6d00:	1a8a      	subs	r2, r1, r2
    6d02:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    6d04:	693b      	ldr	r3, [r7, #16]
    6d06:	7c9b      	ldrb	r3, [r3, #18]
    6d08:	079b      	lsls	r3, r3, #30
    6d0a:	0fdb      	lsrs	r3, r3, #31
    6d0c:	b2db      	uxtb	r3, r3
    6d0e:	2b00      	cmp	r3, #0
    6d10:	d00f      	beq.n	6d32 <udd_ep_trans_in_next+0xd2>
    6d12:	1c3a      	adds	r2, r7, #0
    6d14:	321e      	adds	r2, #30
    6d16:	1c3b      	adds	r3, r7, #0
    6d18:	330c      	adds	r3, #12
    6d1a:	8811      	ldrh	r1, [r2, #0]
    6d1c:	881a      	ldrh	r2, [r3, #0]
    6d1e:	4b30      	ldr	r3, [pc, #192]	; (6de0 <udd_ep_trans_in_next+0x180>)
    6d20:	1c08      	adds	r0, r1, #0
    6d22:	1c11      	adds	r1, r2, #0
    6d24:	4798      	blx	r3
    6d26:	1c0b      	adds	r3, r1, #0
    6d28:	b29b      	uxth	r3, r3
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d101      	bne.n	6d32 <udd_ep_trans_in_next+0xd2>
    6d2e:	2301      	movs	r3, #1
    6d30:	e000      	b.n	6d34 <udd_ep_trans_in_next+0xd4>
    6d32:	2300      	movs	r3, #0
    6d34:	b2db      	uxtb	r3, r3
    6d36:	1c1a      	adds	r2, r3, #0
    6d38:	2301      	movs	r3, #1
    6d3a:	4013      	ands	r3, r2
    6d3c:	b2d9      	uxtb	r1, r3
    6d3e:	693b      	ldr	r3, [r7, #16]
    6d40:	2201      	movs	r2, #1
    6d42:	400a      	ands	r2, r1
    6d44:	1892      	adds	r2, r2, r2
    6d46:	7c99      	ldrb	r1, [r3, #18]
    6d48:	2002      	movs	r0, #2
    6d4a:	4381      	bics	r1, r0
    6d4c:	430a      	orrs	r2, r1
    6d4e:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    6d50:	693b      	ldr	r3, [r7, #16]
    6d52:	685a      	ldr	r2, [r3, #4]
    6d54:	693b      	ldr	r3, [r7, #16]
    6d56:	68db      	ldr	r3, [r3, #12]
    6d58:	18d2      	adds	r2, r2, r3
    6d5a:	1c3b      	adds	r3, r7, #0
    6d5c:	331e      	adds	r3, #30
    6d5e:	881b      	ldrh	r3, [r3, #0]
    6d60:	4820      	ldr	r0, [pc, #128]	; (6de4 <udd_ep_trans_in_next+0x184>)
    6d62:	1c39      	adds	r1, r7, #0
    6d64:	310f      	adds	r1, #15
    6d66:	7809      	ldrb	r1, [r1, #0]
    6d68:	4c1f      	ldr	r4, [pc, #124]	; (6de8 <udd_ep_trans_in_next+0x188>)
    6d6a:	47a0      	blx	r4
		return;
    6d6c:	e02f      	b.n	6dce <udd_ep_trans_in_next+0x16e>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    6d6e:	693b      	ldr	r3, [r7, #16]
    6d70:	7c9b      	ldrb	r3, [r3, #18]
    6d72:	079b      	lsls	r3, r3, #30
    6d74:	0fdb      	lsrs	r3, r3, #31
    6d76:	b2db      	uxtb	r3, r3
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d014      	beq.n	6da6 <udd_ep_trans_in_next+0x146>
		ptr_job->b_shortpacket = false;
    6d7c:	693b      	ldr	r3, [r7, #16]
    6d7e:	7c9a      	ldrb	r2, [r3, #18]
    6d80:	2102      	movs	r1, #2
    6d82:	438a      	bics	r2, r1
    6d84:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    6d86:	693b      	ldr	r3, [r7, #16]
    6d88:	685a      	ldr	r2, [r3, #4]
    6d8a:	693b      	ldr	r3, [r7, #16]
    6d8c:	68db      	ldr	r3, [r3, #12]
    6d8e:	18d3      	adds	r3, r2, r3
    6d90:	4914      	ldr	r1, [pc, #80]	; (6de4 <udd_ep_trans_in_next+0x184>)
    6d92:	1c3a      	adds	r2, r7, #0
    6d94:	320f      	adds	r2, #15
    6d96:	7812      	ldrb	r2, [r2, #0]
    6d98:	1c08      	adds	r0, r1, #0
    6d9a:	1c11      	adds	r1, r2, #0
    6d9c:	1c1a      	adds	r2, r3, #0
    6d9e:	2300      	movs	r3, #0
    6da0:	4c11      	ldr	r4, [pc, #68]	; (6de8 <udd_ep_trans_in_next+0x188>)
    6da2:	47a0      	blx	r4
		return;
    6da4:	e013      	b.n	6dce <udd_ep_trans_in_next+0x16e>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    6da6:	693b      	ldr	r3, [r7, #16]
    6da8:	7c9a      	ldrb	r2, [r3, #18]
    6daa:	2101      	movs	r1, #1
    6dac:	438a      	bics	r2, r1
    6dae:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    6db0:	693b      	ldr	r3, [r7, #16]
    6db2:	681b      	ldr	r3, [r3, #0]
    6db4:	2b00      	cmp	r3, #0
    6db6:	d00a      	beq.n	6dce <udd_ep_trans_in_next+0x16e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    6db8:	693b      	ldr	r3, [r7, #16]
    6dba:	681c      	ldr	r4, [r3, #0]
    6dbc:	693b      	ldr	r3, [r7, #16]
    6dbe:	68da      	ldr	r2, [r3, #12]
    6dc0:	1c3b      	adds	r3, r7, #0
    6dc2:	3317      	adds	r3, #23
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	2000      	movs	r0, #0
    6dc8:	1c11      	adds	r1, r2, #0
    6dca:	1c1a      	adds	r2, r3, #0
    6dcc:	47a0      	blx	r4
	}
}
    6dce:	46bd      	mov	sp, r7
    6dd0:	b009      	add	sp, #36	; 0x24
    6dd2:	bd90      	pop	{r4, r7, pc}
    6dd4:	00006c25 	.word	0x00006c25
    6dd8:	00001fff 	.word	0x00001fff
    6ddc:	0000aa41 	.word	0x0000aa41
    6de0:	0000a981 	.word	0x0000a981
    6de4:	20003974 	.word	0x20003974
    6de8:	000092dd 	.word	0x000092dd

00006dec <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    6dec:	b5b0      	push	{r4, r5, r7, lr}
    6dee:	b088      	sub	sp, #32
    6df0:	af00      	add	r7, sp, #0
    6df2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6df4:	687b      	ldr	r3, [r7, #4]
    6df6:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    6df8:	1c3b      	adds	r3, r7, #0
    6dfa:	3317      	adds	r3, #23
    6dfc:	69ba      	ldr	r2, [r7, #24]
    6dfe:	7992      	ldrb	r2, [r2, #6]
    6e00:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    6e02:	1c3b      	adds	r3, r7, #0
    6e04:	3317      	adds	r3, #23
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	1c18      	adds	r0, r3, #0
    6e0a:	4b67      	ldr	r3, [pc, #412]	; (6fa8 <udd_ep_trans_out_next+0x1bc>)
    6e0c:	4798      	blx	r3
    6e0e:	1c03      	adds	r3, r0, #0
    6e10:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    6e12:	1c3b      	adds	r3, r7, #0
    6e14:	330f      	adds	r3, #15
    6e16:	1c3a      	adds	r2, r7, #0
    6e18:	3217      	adds	r2, #23
    6e1a:	7811      	ldrb	r1, [r2, #0]
    6e1c:	220f      	movs	r2, #15
    6e1e:	400a      	ands	r2, r1
    6e20:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    6e22:	1c3b      	adds	r3, r7, #0
    6e24:	330c      	adds	r3, #12
    6e26:	693a      	ldr	r2, [r7, #16]
    6e28:	8a12      	ldrh	r2, [r2, #16]
    6e2a:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    6e2c:	1c3b      	adds	r3, r7, #0
    6e2e:	330a      	adds	r3, #10
    6e30:	69ba      	ldr	r2, [r7, #24]
    6e32:	8812      	ldrh	r2, [r2, #0]
    6e34:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    6e36:	693b      	ldr	r3, [r7, #16]
    6e38:	7c9b      	ldrb	r3, [r3, #18]
    6e3a:	075b      	lsls	r3, r3, #29
    6e3c:	0fdb      	lsrs	r3, r3, #31
    6e3e:	b2db      	uxtb	r3, r3
    6e40:	2b00      	cmp	r3, #0
    6e42:	d01a      	beq.n	6e7a <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    6e44:	693b      	ldr	r3, [r7, #16]
    6e46:	685a      	ldr	r2, [r3, #4]
    6e48:	693b      	ldr	r3, [r7, #16]
    6e4a:	68db      	ldr	r3, [r3, #12]
    6e4c:	18d5      	adds	r5, r2, r3
    6e4e:	1c3b      	adds	r3, r7, #0
    6e50:	330f      	adds	r3, #15
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	3b01      	subs	r3, #1
    6e56:	00da      	lsls	r2, r3, #3
    6e58:	4b54      	ldr	r3, [pc, #336]	; (6fac <udd_ep_trans_out_next+0x1c0>)
    6e5a:	18d4      	adds	r4, r2, r3
    6e5c:	693b      	ldr	r3, [r7, #16]
    6e5e:	6899      	ldr	r1, [r3, #8]
    6e60:	1c3b      	adds	r3, r7, #0
    6e62:	330c      	adds	r3, #12
    6e64:	881a      	ldrh	r2, [r3, #0]
    6e66:	4b52      	ldr	r3, [pc, #328]	; (6fb0 <udd_ep_trans_out_next+0x1c4>)
    6e68:	1c08      	adds	r0, r1, #0
    6e6a:	1c11      	adds	r1, r2, #0
    6e6c:	4798      	blx	r3
    6e6e:	1c0b      	adds	r3, r1, #0
    6e70:	1c28      	adds	r0, r5, #0
    6e72:	1c21      	adds	r1, r4, #0
    6e74:	1c1a      	adds	r2, r3, #0
    6e76:	4b4f      	ldr	r3, [pc, #316]	; (6fb4 <udd_ep_trans_out_next+0x1c8>)
    6e78:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    6e7a:	693b      	ldr	r3, [r7, #16]
    6e7c:	68da      	ldr	r2, [r3, #12]
    6e7e:	1c3b      	adds	r3, r7, #0
    6e80:	330a      	adds	r3, #10
    6e82:	881b      	ldrh	r3, [r3, #0]
    6e84:	18d2      	adds	r2, r2, r3
    6e86:	693b      	ldr	r3, [r7, #16]
    6e88:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    6e8a:	693b      	ldr	r3, [r7, #16]
    6e8c:	68da      	ldr	r2, [r3, #12]
    6e8e:	693b      	ldr	r3, [r7, #16]
    6e90:	689b      	ldr	r3, [r3, #8]
    6e92:	429a      	cmp	r2, r3
    6e94:	d903      	bls.n	6e9e <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    6e96:	693b      	ldr	r3, [r7, #16]
    6e98:	689a      	ldr	r2, [r3, #8]
    6e9a:	693b      	ldr	r3, [r7, #16]
    6e9c:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    6e9e:	69bb      	ldr	r3, [r7, #24]
    6ea0:	889b      	ldrh	r3, [r3, #4]
    6ea2:	1c3a      	adds	r2, r7, #0
    6ea4:	320a      	adds	r2, #10
    6ea6:	8812      	ldrh	r2, [r2, #0]
    6ea8:	429a      	cmp	r2, r3
    6eaa:	d165      	bne.n	6f78 <udd_ep_trans_out_next+0x18c>
    6eac:	693b      	ldr	r3, [r7, #16]
    6eae:	68da      	ldr	r2, [r3, #12]
    6eb0:	693b      	ldr	r3, [r7, #16]
    6eb2:	689b      	ldr	r3, [r3, #8]
    6eb4:	429a      	cmp	r2, r3
    6eb6:	d05f      	beq.n	6f78 <udd_ep_trans_out_next+0x18c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    6eb8:	693b      	ldr	r3, [r7, #16]
    6eba:	689b      	ldr	r3, [r3, #8]
    6ebc:	b299      	uxth	r1, r3
    6ebe:	693b      	ldr	r3, [r7, #16]
    6ec0:	68db      	ldr	r3, [r3, #12]
    6ec2:	b29a      	uxth	r2, r3
    6ec4:	1c3b      	adds	r3, r7, #0
    6ec6:	331e      	adds	r3, #30
    6ec8:	1a8a      	subs	r2, r1, r2
    6eca:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    6ecc:	1c3b      	adds	r3, r7, #0
    6ece:	331e      	adds	r3, #30
    6ed0:	881a      	ldrh	r2, [r3, #0]
    6ed2:	4b39      	ldr	r3, [pc, #228]	; (6fb8 <udd_ep_trans_out_next+0x1cc>)
    6ed4:	429a      	cmp	r2, r3
    6ed6:	d90f      	bls.n	6ef8 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    6ed8:	1c3b      	adds	r3, r7, #0
    6eda:	330c      	adds	r3, #12
    6edc:	881a      	ldrh	r2, [r3, #0]
    6ede:	4936      	ldr	r1, [pc, #216]	; (6fb8 <udd_ep_trans_out_next+0x1cc>)
    6ee0:	4b36      	ldr	r3, [pc, #216]	; (6fbc <udd_ep_trans_out_next+0x1d0>)
    6ee2:	1c08      	adds	r0, r1, #0
    6ee4:	1c11      	adds	r1, r2, #0
    6ee6:	4798      	blx	r3
    6ee8:	1c0b      	adds	r3, r1, #0
    6eea:	b29a      	uxth	r2, r3
    6eec:	1c3b      	adds	r3, r7, #0
    6eee:	331e      	adds	r3, #30
    6ef0:	4931      	ldr	r1, [pc, #196]	; (6fb8 <udd_ep_trans_out_next+0x1cc>)
    6ef2:	1a8a      	subs	r2, r1, r2
    6ef4:	801a      	strh	r2, [r3, #0]
    6ef6:	e012      	b.n	6f1e <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    6ef8:	1c3a      	adds	r2, r7, #0
    6efa:	321e      	adds	r2, #30
    6efc:	1c3b      	adds	r3, r7, #0
    6efe:	330c      	adds	r3, #12
    6f00:	8811      	ldrh	r1, [r2, #0]
    6f02:	881a      	ldrh	r2, [r3, #0]
    6f04:	4b2a      	ldr	r3, [pc, #168]	; (6fb0 <udd_ep_trans_out_next+0x1c4>)
    6f06:	1c08      	adds	r0, r1, #0
    6f08:	1c11      	adds	r1, r2, #0
    6f0a:	4798      	blx	r3
    6f0c:	1c0b      	adds	r3, r1, #0
    6f0e:	b29a      	uxth	r2, r3
    6f10:	1c3b      	adds	r3, r7, #0
    6f12:	331e      	adds	r3, #30
    6f14:	1c39      	adds	r1, r7, #0
    6f16:	311e      	adds	r1, #30
    6f18:	8809      	ldrh	r1, [r1, #0]
    6f1a:	1a8a      	subs	r2, r1, r2
    6f1c:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    6f1e:	1c3a      	adds	r2, r7, #0
    6f20:	321e      	adds	r2, #30
    6f22:	1c3b      	adds	r3, r7, #0
    6f24:	330c      	adds	r3, #12
    6f26:	8812      	ldrh	r2, [r2, #0]
    6f28:	881b      	ldrh	r3, [r3, #0]
    6f2a:	429a      	cmp	r2, r3
    6f2c:	d215      	bcs.n	6f5a <udd_ep_trans_out_next+0x16e>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    6f2e:	693b      	ldr	r3, [r7, #16]
    6f30:	7c9a      	ldrb	r2, [r3, #18]
    6f32:	2104      	movs	r1, #4
    6f34:	430a      	orrs	r2, r1
    6f36:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    6f38:	1c3b      	adds	r3, r7, #0
    6f3a:	330f      	adds	r3, #15
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	3b01      	subs	r3, #1
    6f40:	00da      	lsls	r2, r3, #3
    6f42:	4b1a      	ldr	r3, [pc, #104]	; (6fac <udd_ep_trans_out_next+0x1c0>)
    6f44:	18d2      	adds	r2, r2, r3
    6f46:	1c3b      	adds	r3, r7, #0
    6f48:	330c      	adds	r3, #12
    6f4a:	881b      	ldrh	r3, [r3, #0]
    6f4c:	481c      	ldr	r0, [pc, #112]	; (6fc0 <udd_ep_trans_out_next+0x1d4>)
    6f4e:	1c39      	adds	r1, r7, #0
    6f50:	310f      	adds	r1, #15
    6f52:	7809      	ldrb	r1, [r1, #0]
    6f54:	4c1b      	ldr	r4, [pc, #108]	; (6fc4 <udd_ep_trans_out_next+0x1d8>)
    6f56:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    6f58:	e022      	b.n	6fa0 <udd_ep_trans_out_next+0x1b4>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    6f5a:	693b      	ldr	r3, [r7, #16]
    6f5c:	685a      	ldr	r2, [r3, #4]
    6f5e:	693b      	ldr	r3, [r7, #16]
    6f60:	68db      	ldr	r3, [r3, #12]
    6f62:	18d2      	adds	r2, r2, r3
    6f64:	1c3b      	adds	r3, r7, #0
    6f66:	331e      	adds	r3, #30
    6f68:	881b      	ldrh	r3, [r3, #0]
    6f6a:	4815      	ldr	r0, [pc, #84]	; (6fc0 <udd_ep_trans_out_next+0x1d4>)
    6f6c:	1c39      	adds	r1, r7, #0
    6f6e:	310f      	adds	r1, #15
    6f70:	7809      	ldrb	r1, [r1, #0]
    6f72:	4c14      	ldr	r4, [pc, #80]	; (6fc4 <udd_ep_trans_out_next+0x1d8>)
    6f74:	47a0      	blx	r4
		}
		return;
    6f76:	e013      	b.n	6fa0 <udd_ep_trans_out_next+0x1b4>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    6f78:	693b      	ldr	r3, [r7, #16]
    6f7a:	7c9a      	ldrb	r2, [r3, #18]
    6f7c:	2101      	movs	r1, #1
    6f7e:	438a      	bics	r2, r1
    6f80:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    6f82:	693b      	ldr	r3, [r7, #16]
    6f84:	681b      	ldr	r3, [r3, #0]
    6f86:	2b00      	cmp	r3, #0
    6f88:	d00a      	beq.n	6fa0 <udd_ep_trans_out_next+0x1b4>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    6f8a:	693b      	ldr	r3, [r7, #16]
    6f8c:	681c      	ldr	r4, [r3, #0]
    6f8e:	693b      	ldr	r3, [r7, #16]
    6f90:	68da      	ldr	r2, [r3, #12]
    6f92:	1c3b      	adds	r3, r7, #0
    6f94:	3317      	adds	r3, #23
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	2000      	movs	r0, #0
    6f9a:	1c11      	adds	r1, r2, #0
    6f9c:	1c1a      	adds	r2, r3, #0
    6f9e:	47a0      	blx	r4
	}
}
    6fa0:	46bd      	mov	sp, r7
    6fa2:	b008      	add	sp, #32
    6fa4:	bdb0      	pop	{r4, r5, r7, pc}
    6fa6:	46c0      	nop			; (mov r8, r8)
    6fa8:	00006c25 	.word	0x00006c25
    6fac:	2000393c 	.word	0x2000393c
    6fb0:	0000a981 	.word	0x0000a981
    6fb4:	0000ab29 	.word	0x0000ab29
    6fb8:	00001fff 	.word	0x00001fff
    6fbc:	0000aa41 	.word	0x0000aa41
    6fc0:	20003974 	.word	0x20003974
    6fc4:	00009395 	.word	0x00009395

00006fc8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    6fc8:	b580      	push	{r7, lr}
    6fca:	b084      	sub	sp, #16
    6fcc:	af00      	add	r7, sp, #0
    6fce:	6078      	str	r0, [r7, #4]
    6fd0:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    6fd2:	683b      	ldr	r3, [r7, #0]
    6fd4:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    6fd6:	1c3b      	adds	r3, r7, #0
    6fd8:	330b      	adds	r3, #11
    6fda:	68fa      	ldr	r2, [r7, #12]
    6fdc:	7992      	ldrb	r2, [r2, #6]
    6fde:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    6fe0:	1c3b      	adds	r3, r7, #0
    6fe2:	330b      	adds	r3, #11
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	b25b      	sxtb	r3, r3
    6fe8:	2b00      	cmp	r3, #0
    6fea:	da04      	bge.n	6ff6 <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    6fec:	683b      	ldr	r3, [r7, #0]
    6fee:	1c18      	adds	r0, r3, #0
    6ff0:	4b04      	ldr	r3, [pc, #16]	; (7004 <udd_ep_transfer_process+0x3c>)
    6ff2:	4798      	blx	r3
    6ff4:	e003      	b.n	6ffe <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    6ff6:	683b      	ldr	r3, [r7, #0]
    6ff8:	1c18      	adds	r0, r3, #0
    6ffa:	4b03      	ldr	r3, [pc, #12]	; (7008 <udd_ep_transfer_process+0x40>)
    6ffc:	4798      	blx	r3
	}
}
    6ffe:	46bd      	mov	sp, r7
    7000:	b004      	add	sp, #16
    7002:	bd80      	pop	{r7, pc}
    7004:	00006c61 	.word	0x00006c61
    7008:	00006ded 	.word	0x00006ded

0000700c <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    700c:	b590      	push	{r4, r7, lr}
    700e:	b085      	sub	sp, #20
    7010:	af00      	add	r7, sp, #0
    7012:	1c02      	adds	r2, r0, #0
    7014:	1dfb      	adds	r3, r7, #7
    7016:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    7018:	4a15      	ldr	r2, [pc, #84]	; (7070 <udd_ep_abort+0x64>)
    701a:	1dfb      	adds	r3, r7, #7
    701c:	781b      	ldrb	r3, [r3, #0]
    701e:	1c10      	adds	r0, r2, #0
    7020:	1c19      	adds	r1, r3, #0
    7022:	4b14      	ldr	r3, [pc, #80]	; (7074 <udd_ep_abort+0x68>)
    7024:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    7026:	1dfb      	adds	r3, r7, #7
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	1c18      	adds	r0, r3, #0
    702c:	4b12      	ldr	r3, [pc, #72]	; (7078 <udd_ep_abort+0x6c>)
    702e:	4798      	blx	r3
    7030:	1c03      	adds	r3, r0, #0
    7032:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    7034:	68fb      	ldr	r3, [r7, #12]
    7036:	7c9b      	ldrb	r3, [r3, #18]
    7038:	07db      	lsls	r3, r3, #31
    703a:	0fdb      	lsrs	r3, r3, #31
    703c:	b2db      	uxtb	r3, r3
    703e:	2b00      	cmp	r3, #0
    7040:	d100      	bne.n	7044 <udd_ep_abort+0x38>
		return;
    7042:	e012      	b.n	706a <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    7044:	68fb      	ldr	r3, [r7, #12]
    7046:	7c9a      	ldrb	r2, [r3, #18]
    7048:	2101      	movs	r1, #1
    704a:	438a      	bics	r2, r1
    704c:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    704e:	68fb      	ldr	r3, [r7, #12]
    7050:	681b      	ldr	r3, [r3, #0]
    7052:	2b00      	cmp	r3, #0
    7054:	d009      	beq.n	706a <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    7056:	68fb      	ldr	r3, [r7, #12]
    7058:	681c      	ldr	r4, [r3, #0]
    705a:	68fb      	ldr	r3, [r7, #12]
    705c:	68da      	ldr	r2, [r3, #12]
    705e:	1dfb      	adds	r3, r7, #7
    7060:	781b      	ldrb	r3, [r3, #0]
    7062:	2001      	movs	r0, #1
    7064:	1c11      	adds	r1, r2, #0
    7066:	1c1a      	adds	r2, r3, #0
    7068:	47a0      	blx	r4
	}
}
    706a:	46bd      	mov	sp, r7
    706c:	b005      	add	sp, #20
    706e:	bd90      	pop	{r4, r7, pc}
    7070:	20003974 	.word	0x20003974
    7074:	0000907d 	.word	0x0000907d
    7078:	00006c25 	.word	0x00006c25

0000707c <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    707c:	b580      	push	{r7, lr}
    707e:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21
	return false;
    7080:	2300      	movs	r3, #0
#endif
}
    7082:	1c18      	adds	r0, r3, #0
    7084:	46bd      	mov	sp, r7
    7086:	bd80      	pop	{r7, pc}

00007088 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    7088:	b580      	push	{r7, lr}
    708a:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <udd_get_frame_number+0x14>)
    708e:	1c18      	adds	r0, r3, #0
    7090:	4b03      	ldr	r3, [pc, #12]	; (70a0 <udd_get_frame_number+0x18>)
    7092:	4798      	blx	r3
    7094:	1c03      	adds	r3, r0, #0
}
    7096:	1c18      	adds	r0, r3, #0
    7098:	46bd      	mov	sp, r7
    709a:	bd80      	pop	{r7, pc}
    709c:	20003974 	.word	0x20003974
    70a0:	000069d5 	.word	0x000069d5

000070a4 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    70a4:	b580      	push	{r7, lr}
    70a6:	af00      	add	r7, sp, #0
	return usb_device_get_micro_frame_number(&usb_device);
    70a8:	4b03      	ldr	r3, [pc, #12]	; (70b8 <udd_get_micro_frame_number+0x14>)
    70aa:	1c18      	adds	r0, r3, #0
    70ac:	4b03      	ldr	r3, [pc, #12]	; (70bc <udd_get_micro_frame_number+0x18>)
    70ae:	4798      	blx	r3
    70b0:	1c03      	adds	r3, r0, #0
}
    70b2:	1c18      	adds	r0, r3, #0
    70b4:	46bd      	mov	sp, r7
    70b6:	bd80      	pop	{r7, pc}
    70b8:	20003974 	.word	0x20003974
    70bc:	000069f5 	.word	0x000069f5

000070c0 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b084      	sub	sp, #16
    70c4:	af00      	add	r7, sp, #0
    70c6:	1c02      	adds	r2, r0, #0
    70c8:	1dfb      	adds	r3, r7, #7
    70ca:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    70cc:	1c3b      	adds	r3, r7, #0
    70ce:	3308      	adds	r3, #8
    70d0:	1c18      	adds	r0, r3, #0
    70d2:	4b19      	ldr	r3, [pc, #100]	; (7138 <udd_ep_free+0x78>)
    70d4:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    70d6:	1c3b      	adds	r3, r7, #0
    70d8:	330f      	adds	r3, #15
    70da:	1dfa      	adds	r2, r7, #7
    70dc:	7811      	ldrb	r1, [r2, #0]
    70de:	220f      	movs	r2, #15
    70e0:	400a      	ands	r2, r1
    70e2:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    70e4:	1dfb      	adds	r3, r7, #7
    70e6:	781b      	ldrb	r3, [r3, #0]
    70e8:	1c18      	adds	r0, r3, #0
    70ea:	4b14      	ldr	r3, [pc, #80]	; (713c <udd_ep_free+0x7c>)
    70ec:	4798      	blx	r3

	config_ep.ep_address = ep;
    70ee:	1c3b      	adds	r3, r7, #0
    70f0:	3308      	adds	r3, #8
    70f2:	1dfa      	adds	r2, r7, #7
    70f4:	7812      	ldrb	r2, [r2, #0]
    70f6:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    70f8:	1c3b      	adds	r3, r7, #0
    70fa:	3308      	adds	r3, #8
    70fc:	2200      	movs	r2, #0
    70fe:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    7100:	4a0f      	ldr	r2, [pc, #60]	; (7140 <udd_ep_free+0x80>)
    7102:	1c3b      	adds	r3, r7, #0
    7104:	3308      	adds	r3, #8
    7106:	1c10      	adds	r0, r2, #0
    7108:	1c19      	adds	r1, r3, #0
    710a:	4b0e      	ldr	r3, [pc, #56]	; (7144 <udd_ep_free+0x84>)
    710c:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    710e:	4a0c      	ldr	r2, [pc, #48]	; (7140 <udd_ep_free+0x80>)
    7110:	1c3b      	adds	r3, r7, #0
    7112:	330f      	adds	r3, #15
    7114:	781b      	ldrb	r3, [r3, #0]
    7116:	1c10      	adds	r0, r2, #0
    7118:	1c19      	adds	r1, r3, #0
    711a:	2200      	movs	r2, #0
    711c:	4b0a      	ldr	r3, [pc, #40]	; (7148 <udd_ep_free+0x88>)
    711e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7120:	4a07      	ldr	r2, [pc, #28]	; (7140 <udd_ep_free+0x80>)
    7122:	1dfb      	adds	r3, r7, #7
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	1c10      	adds	r0, r2, #0
    7128:	1c19      	adds	r1, r3, #0
    712a:	2200      	movs	r2, #0
    712c:	4b07      	ldr	r3, [pc, #28]	; (714c <udd_ep_free+0x8c>)
    712e:	4798      	blx	r3
}
    7130:	46bd      	mov	sp, r7
    7132:	b004      	add	sp, #16
    7134:	bd80      	pop	{r7, pc}
    7136:	46c0      	nop			; (mov r8, r8)
    7138:	00008b81 	.word	0x00008b81
    713c:	0000700d 	.word	0x0000700d
    7140:	20003974 	.word	0x20003974
    7144:	00008ba9 	.word	0x00008ba9
    7148:	000087e9 	.word	0x000087e9
    714c:	000089e5 	.word	0x000089e5

00007150 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    7150:	b590      	push	{r4, r7, lr}
    7152:	b087      	sub	sp, #28
    7154:	af00      	add	r7, sp, #0
    7156:	1dfb      	adds	r3, r7, #7
    7158:	7018      	strb	r0, [r3, #0]
    715a:	1dbb      	adds	r3, r7, #6
    715c:	7019      	strb	r1, [r3, #0]
    715e:	1d3b      	adds	r3, r7, #4
    7160:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    7162:	1c3b      	adds	r3, r7, #0
    7164:	330c      	adds	r3, #12
    7166:	1c18      	adds	r0, r3, #0
    7168:	4b5a      	ldr	r3, [pc, #360]	; (72d4 <udd_ep_alloc+0x184>)
    716a:	4798      	blx	r3

	config_ep.ep_address = ep;
    716c:	1c3b      	adds	r3, r7, #0
    716e:	330c      	adds	r3, #12
    7170:	1dfa      	adds	r2, r7, #7
    7172:	7812      	ldrb	r2, [r2, #0]
    7174:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    7176:	1d3b      	adds	r3, r7, #4
    7178:	881b      	ldrh	r3, [r3, #0]
    717a:	2b08      	cmp	r3, #8
    717c:	d804      	bhi.n	7188 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    717e:	1c3b      	adds	r3, r7, #0
    7180:	330c      	adds	r3, #12
    7182:	2200      	movs	r2, #0
    7184:	705a      	strb	r2, [r3, #1]
    7186:	e045      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 16) {
    7188:	1d3b      	adds	r3, r7, #4
    718a:	881b      	ldrh	r3, [r3, #0]
    718c:	2b10      	cmp	r3, #16
    718e:	d804      	bhi.n	719a <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    7190:	1c3b      	adds	r3, r7, #0
    7192:	330c      	adds	r3, #12
    7194:	2201      	movs	r2, #1
    7196:	705a      	strb	r2, [r3, #1]
    7198:	e03c      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 32) {
    719a:	1d3b      	adds	r3, r7, #4
    719c:	881b      	ldrh	r3, [r3, #0]
    719e:	2b20      	cmp	r3, #32
    71a0:	d804      	bhi.n	71ac <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    71a2:	1c3b      	adds	r3, r7, #0
    71a4:	330c      	adds	r3, #12
    71a6:	2202      	movs	r2, #2
    71a8:	705a      	strb	r2, [r3, #1]
    71aa:	e033      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 64) {
    71ac:	1d3b      	adds	r3, r7, #4
    71ae:	881b      	ldrh	r3, [r3, #0]
    71b0:	2b40      	cmp	r3, #64	; 0x40
    71b2:	d804      	bhi.n	71be <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    71b4:	1c3b      	adds	r3, r7, #0
    71b6:	330c      	adds	r3, #12
    71b8:	2203      	movs	r2, #3
    71ba:	705a      	strb	r2, [r3, #1]
    71bc:	e02a      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 128) {
    71be:	1d3b      	adds	r3, r7, #4
    71c0:	881b      	ldrh	r3, [r3, #0]
    71c2:	2b80      	cmp	r3, #128	; 0x80
    71c4:	d804      	bhi.n	71d0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    71c6:	1c3b      	adds	r3, r7, #0
    71c8:	330c      	adds	r3, #12
    71ca:	2204      	movs	r2, #4
    71cc:	705a      	strb	r2, [r3, #1]
    71ce:	e021      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 256) {
    71d0:	1d3b      	adds	r3, r7, #4
    71d2:	881a      	ldrh	r2, [r3, #0]
    71d4:	2380      	movs	r3, #128	; 0x80
    71d6:	005b      	lsls	r3, r3, #1
    71d8:	429a      	cmp	r2, r3
    71da:	d804      	bhi.n	71e6 <udd_ep_alloc+0x96>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    71dc:	1c3b      	adds	r3, r7, #0
    71de:	330c      	adds	r3, #12
    71e0:	2205      	movs	r2, #5
    71e2:	705a      	strb	r2, [r3, #1]
    71e4:	e016      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 512) {
    71e6:	1d3b      	adds	r3, r7, #4
    71e8:	881a      	ldrh	r2, [r3, #0]
    71ea:	2380      	movs	r3, #128	; 0x80
    71ec:	009b      	lsls	r3, r3, #2
    71ee:	429a      	cmp	r2, r3
    71f0:	d804      	bhi.n	71fc <udd_ep_alloc+0xac>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    71f2:	1c3b      	adds	r3, r7, #0
    71f4:	330c      	adds	r3, #12
    71f6:	2206      	movs	r2, #6
    71f8:	705a      	strb	r2, [r3, #1]
    71fa:	e00b      	b.n	7214 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 1023) {
    71fc:	1d3b      	adds	r3, r7, #4
    71fe:	881a      	ldrh	r2, [r3, #0]
    7200:	4b35      	ldr	r3, [pc, #212]	; (72d8 <udd_ep_alloc+0x188>)
    7202:	429a      	cmp	r2, r3
    7204:	d804      	bhi.n	7210 <udd_ep_alloc+0xc0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    7206:	1c3b      	adds	r3, r7, #0
    7208:	330c      	adds	r3, #12
    720a:	2207      	movs	r2, #7
    720c:	705a      	strb	r2, [r3, #1]
    720e:	e001      	b.n	7214 <udd_ep_alloc+0xc4>
	} else {
		return false;
    7210:	2300      	movs	r3, #0
    7212:	e05b      	b.n	72cc <udd_ep_alloc+0x17c>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    7214:	1dfb      	adds	r3, r7, #7
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	1c18      	adds	r0, r3, #0
    721a:	4b30      	ldr	r3, [pc, #192]	; (72dc <udd_ep_alloc+0x18c>)
    721c:	4798      	blx	r3
    721e:	1c03      	adds	r3, r0, #0
    7220:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    7222:	697b      	ldr	r3, [r7, #20]
    7224:	1d3a      	adds	r2, r7, #4
    7226:	8812      	ldrh	r2, [r2, #0]
    7228:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    722a:	1dbb      	adds	r3, r7, #6
    722c:	1dba      	adds	r2, r7, #6
    722e:	7811      	ldrb	r1, [r2, #0]
    7230:	2203      	movs	r2, #3
    7232:	400a      	ands	r2, r1
    7234:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    7236:	1dbb      	adds	r3, r7, #6
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	2b01      	cmp	r3, #1
    723c:	d104      	bne.n	7248 <udd_ep_alloc+0xf8>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    723e:	1c3b      	adds	r3, r7, #0
    7240:	330c      	adds	r3, #12
    7242:	2202      	movs	r2, #2
    7244:	70da      	strb	r2, [r3, #3]
    7246:	e013      	b.n	7270 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    7248:	1dbb      	adds	r3, r7, #6
    724a:	781b      	ldrb	r3, [r3, #0]
    724c:	2b02      	cmp	r3, #2
    724e:	d104      	bne.n	725a <udd_ep_alloc+0x10a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    7250:	1c3b      	adds	r3, r7, #0
    7252:	330c      	adds	r3, #12
    7254:	2203      	movs	r2, #3
    7256:	70da      	strb	r2, [r3, #3]
    7258:	e00a      	b.n	7270 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    725a:	1dbb      	adds	r3, r7, #6
    725c:	781b      	ldrb	r3, [r3, #0]
    725e:	2b03      	cmp	r3, #3
    7260:	d104      	bne.n	726c <udd_ep_alloc+0x11c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    7262:	1c3b      	adds	r3, r7, #0
    7264:	330c      	adds	r3, #12
    7266:	2204      	movs	r2, #4
    7268:	70da      	strb	r2, [r3, #3]
    726a:	e001      	b.n	7270 <udd_ep_alloc+0x120>
	} else {
		return false;
    726c:	2300      	movs	r3, #0
    726e:	e02d      	b.n	72cc <udd_ep_alloc+0x17c>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7270:	1c3b      	adds	r3, r7, #0
    7272:	3313      	adds	r3, #19
    7274:	1dfa      	adds	r2, r7, #7
    7276:	7811      	ldrb	r1, [r2, #0]
    7278:	220f      	movs	r2, #15
    727a:	400a      	ands	r2, r1
    727c:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    727e:	4a18      	ldr	r2, [pc, #96]	; (72e0 <udd_ep_alloc+0x190>)
    7280:	1c3b      	adds	r3, r7, #0
    7282:	330c      	adds	r3, #12
    7284:	1c10      	adds	r0, r2, #0
    7286:	1c19      	adds	r1, r3, #0
    7288:	4b16      	ldr	r3, [pc, #88]	; (72e4 <udd_ep_alloc+0x194>)
    728a:	4798      	blx	r3
    728c:	1c03      	adds	r3, r0, #0
    728e:	2b00      	cmp	r3, #0
    7290:	d001      	beq.n	7296 <udd_ep_alloc+0x146>
		return false;
    7292:	2300      	movs	r3, #0
    7294:	e01a      	b.n	72cc <udd_ep_alloc+0x17c>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    7296:	4912      	ldr	r1, [pc, #72]	; (72e0 <udd_ep_alloc+0x190>)
    7298:	1c3b      	adds	r3, r7, #0
    729a:	3313      	adds	r3, #19
    729c:	781a      	ldrb	r2, [r3, #0]
    729e:	4b12      	ldr	r3, [pc, #72]	; (72e8 <udd_ep_alloc+0x198>)
    72a0:	1c08      	adds	r0, r1, #0
    72a2:	1c11      	adds	r1, r2, #0
    72a4:	2200      	movs	r2, #0
    72a6:	4c11      	ldr	r4, [pc, #68]	; (72ec <udd_ep_alloc+0x19c>)
    72a8:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    72aa:	4a0d      	ldr	r2, [pc, #52]	; (72e0 <udd_ep_alloc+0x190>)
    72ac:	1dfb      	adds	r3, r7, #7
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	1c10      	adds	r0, r2, #0
    72b2:	1c19      	adds	r1, r3, #0
    72b4:	2200      	movs	r2, #0
    72b6:	4b0e      	ldr	r3, [pc, #56]	; (72f0 <udd_ep_alloc+0x1a0>)
    72b8:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    72ba:	4a09      	ldr	r2, [pc, #36]	; (72e0 <udd_ep_alloc+0x190>)
    72bc:	1dfb      	adds	r3, r7, #7
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	1c10      	adds	r0, r2, #0
    72c2:	1c19      	adds	r1, r3, #0
    72c4:	2201      	movs	r2, #1
    72c6:	4b0a      	ldr	r3, [pc, #40]	; (72f0 <udd_ep_alloc+0x1a0>)
    72c8:	4798      	blx	r3

	return true;
    72ca:	2301      	movs	r3, #1
}
    72cc:	1c18      	adds	r0, r3, #0
    72ce:	46bd      	mov	sp, r7
    72d0:	b007      	add	sp, #28
    72d2:	bd90      	pop	{r4, r7, pc}
    72d4:	00008b81 	.word	0x00008b81
    72d8:	000003ff 	.word	0x000003ff
    72dc:	00006c25 	.word	0x00006c25
    72e0:	20003974 	.word	0x20003974
    72e4:	00008ba9 	.word	0x00008ba9
    72e8:	00006fc9 	.word	0x00006fc9
    72ec:	00008775 	.word	0x00008775
    72f0:	00008855 	.word	0x00008855

000072f4 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    72f4:	b580      	push	{r7, lr}
    72f6:	b082      	sub	sp, #8
    72f8:	af00      	add	r7, sp, #0
    72fa:	1c02      	adds	r2, r0, #0
    72fc:	1dfb      	adds	r3, r7, #7
    72fe:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    7300:	4a05      	ldr	r2, [pc, #20]	; (7318 <udd_ep_is_halted+0x24>)
    7302:	1dfb      	adds	r3, r7, #7
    7304:	781b      	ldrb	r3, [r3, #0]
    7306:	1c10      	adds	r0, r2, #0
    7308:	1c19      	adds	r1, r3, #0
    730a:	4b04      	ldr	r3, [pc, #16]	; (731c <udd_ep_is_halted+0x28>)
    730c:	4798      	blx	r3
    730e:	1c03      	adds	r3, r0, #0
}
    7310:	1c18      	adds	r0, r3, #0
    7312:	46bd      	mov	sp, r7
    7314:	b002      	add	sp, #8
    7316:	bd80      	pop	{r7, pc}
    7318:	20003974 	.word	0x20003974
    731c:	000090fd 	.word	0x000090fd

00007320 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    7320:	b580      	push	{r7, lr}
    7322:	b084      	sub	sp, #16
    7324:	af00      	add	r7, sp, #0
    7326:	1c02      	adds	r2, r0, #0
    7328:	1dfb      	adds	r3, r7, #7
    732a:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    732c:	1c3b      	adds	r3, r7, #0
    732e:	330f      	adds	r3, #15
    7330:	1dfa      	adds	r2, r7, #7
    7332:	7811      	ldrb	r1, [r2, #0]
    7334:	220f      	movs	r2, #15
    7336:	400a      	ands	r2, r1
    7338:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    733a:	1c3b      	adds	r3, r7, #0
    733c:	330f      	adds	r3, #15
    733e:	781b      	ldrb	r3, [r3, #0]
    7340:	2b07      	cmp	r3, #7
    7342:	d901      	bls.n	7348 <udd_ep_set_halt+0x28>
		return false;
    7344:	2300      	movs	r3, #0
    7346:	e00c      	b.n	7362 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    7348:	4a08      	ldr	r2, [pc, #32]	; (736c <udd_ep_set_halt+0x4c>)
    734a:	1dfb      	adds	r3, r7, #7
    734c:	781b      	ldrb	r3, [r3, #0]
    734e:	1c10      	adds	r0, r2, #0
    7350:	1c19      	adds	r1, r3, #0
    7352:	4b07      	ldr	r3, [pc, #28]	; (7370 <udd_ep_set_halt+0x50>)
    7354:	4798      	blx	r3

	udd_ep_abort(ep);
    7356:	1dfb      	adds	r3, r7, #7
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	1c18      	adds	r0, r3, #0
    735c:	4b05      	ldr	r3, [pc, #20]	; (7374 <udd_ep_set_halt+0x54>)
    735e:	4798      	blx	r3
	return true;
    7360:	2301      	movs	r3, #1
}
    7362:	1c18      	adds	r0, r3, #0
    7364:	46bd      	mov	sp, r7
    7366:	b004      	add	sp, #16
    7368:	bd80      	pop	{r7, pc}
    736a:	46c0      	nop			; (mov r8, r8)
    736c:	20003974 	.word	0x20003974
    7370:	0000916d 	.word	0x0000916d
    7374:	0000700d 	.word	0x0000700d

00007378 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    7378:	b580      	push	{r7, lr}
    737a:	b084      	sub	sp, #16
    737c:	af00      	add	r7, sp, #0
    737e:	1c02      	adds	r2, r0, #0
    7380:	1dfb      	adds	r3, r7, #7
    7382:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7384:	1c3b      	adds	r3, r7, #0
    7386:	330f      	adds	r3, #15
    7388:	1dfa      	adds	r2, r7, #7
    738a:	7811      	ldrb	r1, [r2, #0]
    738c:	220f      	movs	r2, #15
    738e:	400a      	ands	r2, r1
    7390:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7392:	1c3b      	adds	r3, r7, #0
    7394:	330f      	adds	r3, #15
    7396:	781b      	ldrb	r3, [r3, #0]
    7398:	2b07      	cmp	r3, #7
    739a:	d901      	bls.n	73a0 <udd_ep_clear_halt+0x28>
		return false;
    739c:	2300      	movs	r3, #0
    739e:	e01d      	b.n	73dc <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    73a0:	1dfb      	adds	r3, r7, #7
    73a2:	781b      	ldrb	r3, [r3, #0]
    73a4:	1c18      	adds	r0, r3, #0
    73a6:	4b0f      	ldr	r3, [pc, #60]	; (73e4 <udd_ep_clear_halt+0x6c>)
    73a8:	4798      	blx	r3
    73aa:	1c03      	adds	r3, r0, #0
    73ac:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    73ae:	4a0e      	ldr	r2, [pc, #56]	; (73e8 <udd_ep_clear_halt+0x70>)
    73b0:	1dfb      	adds	r3, r7, #7
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	1c10      	adds	r0, r2, #0
    73b6:	1c19      	adds	r1, r3, #0
    73b8:	4b0c      	ldr	r3, [pc, #48]	; (73ec <udd_ep_clear_halt+0x74>)
    73ba:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    73bc:	68bb      	ldr	r3, [r7, #8]
    73be:	7c9b      	ldrb	r3, [r3, #18]
    73c0:	07db      	lsls	r3, r3, #31
    73c2:	0fdb      	lsrs	r3, r3, #31
    73c4:	b2db      	uxtb	r3, r3
    73c6:	2b01      	cmp	r3, #1
    73c8:	d107      	bne.n	73da <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    73ca:	68bb      	ldr	r3, [r7, #8]
    73cc:	7c9a      	ldrb	r2, [r3, #18]
    73ce:	2101      	movs	r1, #1
    73d0:	438a      	bics	r2, r1
    73d2:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    73d4:	68bb      	ldr	r3, [r7, #8]
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	4798      	blx	r3
	}

	return true;
    73da:	2301      	movs	r3, #1
}
    73dc:	1c18      	adds	r0, r3, #0
    73de:	46bd      	mov	sp, r7
    73e0:	b004      	add	sp, #16
    73e2:	bd80      	pop	{r7, pc}
    73e4:	00006c25 	.word	0x00006c25
    73e8:	20003974 	.word	0x20003974
    73ec:	000091c5 	.word	0x000091c5

000073f0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    73f0:	b580      	push	{r7, lr}
    73f2:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    73f4:	4b07      	ldr	r3, [pc, #28]	; (7414 <udd_ctrl_stall_data+0x24>)
    73f6:	2205      	movs	r2, #5
    73f8:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    73fa:	4b07      	ldr	r3, [pc, #28]	; (7418 <udd_ctrl_stall_data+0x28>)
    73fc:	1c18      	adds	r0, r3, #0
    73fe:	2180      	movs	r1, #128	; 0x80
    7400:	4b06      	ldr	r3, [pc, #24]	; (741c <udd_ctrl_stall_data+0x2c>)
    7402:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    7404:	4b04      	ldr	r3, [pc, #16]	; (7418 <udd_ctrl_stall_data+0x28>)
    7406:	1c18      	adds	r0, r3, #0
    7408:	2100      	movs	r1, #0
    740a:	4b05      	ldr	r3, [pc, #20]	; (7420 <udd_ctrl_stall_data+0x30>)
    740c:	4798      	blx	r3
}
    740e:	46bd      	mov	sp, r7
    7410:	bd80      	pop	{r7, pc}
    7412:	46c0      	nop			; (mov r8, r8)
    7414:	20000f8c 	.word	0x20000f8c
    7418:	20003974 	.word	0x20003974
    741c:	0000916d 	.word	0x0000916d
    7420:	000091c5 	.word	0x000091c5

00007424 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    7424:	b590      	push	{r4, r7, lr}
    7426:	b089      	sub	sp, #36	; 0x24
    7428:	af00      	add	r7, sp, #0
    742a:	60ba      	str	r2, [r7, #8]
    742c:	607b      	str	r3, [r7, #4]
    742e:	1c3b      	adds	r3, r7, #0
    7430:	330f      	adds	r3, #15
    7432:	1c02      	adds	r2, r0, #0
    7434:	701a      	strb	r2, [r3, #0]
    7436:	1c3b      	adds	r3, r7, #0
    7438:	330e      	adds	r3, #14
    743a:	1c0a      	adds	r2, r1, #0
    743c:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    743e:	1c3b      	adds	r3, r7, #0
    7440:	331d      	adds	r3, #29
    7442:	1c3a      	adds	r2, r7, #0
    7444:	320f      	adds	r2, #15
    7446:	7811      	ldrb	r1, [r2, #0]
    7448:	220f      	movs	r2, #15
    744a:	400a      	ands	r2, r1
    744c:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    744e:	1c3b      	adds	r3, r7, #0
    7450:	331d      	adds	r3, #29
    7452:	781b      	ldrb	r3, [r3, #0]
    7454:	2b07      	cmp	r3, #7
    7456:	d808      	bhi.n	746a <udd_ep_run+0x46>
    7458:	1c3b      	adds	r3, r7, #0
    745a:	330f      	adds	r3, #15
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	1c18      	adds	r0, r3, #0
    7460:	4b9d      	ldr	r3, [pc, #628]	; (76d8 <udd_ep_run+0x2b4>)
    7462:	4798      	blx	r3
    7464:	1c03      	adds	r3, r0, #0
    7466:	2b00      	cmp	r3, #0
    7468:	d001      	beq.n	746e <udd_ep_run+0x4a>
		return false;
    746a:	2300      	movs	r3, #0
    746c:	e130      	b.n	76d0 <udd_ep_run+0x2ac>
	}

	ptr_job = udd_ep_get_job(ep);
    746e:	1c3b      	adds	r3, r7, #0
    7470:	330f      	adds	r3, #15
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	1c18      	adds	r0, r3, #0
    7476:	4b99      	ldr	r3, [pc, #612]	; (76dc <udd_ep_run+0x2b8>)
    7478:	4798      	blx	r3
    747a:	1c03      	adds	r3, r0, #0
    747c:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    747e:	4b98      	ldr	r3, [pc, #608]	; (76e0 <udd_ep_run+0x2bc>)
    7480:	4798      	blx	r3
    7482:	1c03      	adds	r3, r0, #0
    7484:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    7486:	69bb      	ldr	r3, [r7, #24]
    7488:	7c9b      	ldrb	r3, [r3, #18]
    748a:	07db      	lsls	r3, r3, #31
    748c:	0fdb      	lsrs	r3, r3, #31
    748e:	b2db      	uxtb	r3, r3
    7490:	2b01      	cmp	r3, #1
    7492:	d105      	bne.n	74a0 <udd_ep_run+0x7c>
		cpu_irq_restore(flags);
    7494:	697b      	ldr	r3, [r7, #20]
    7496:	1c18      	adds	r0, r3, #0
    7498:	4b92      	ldr	r3, [pc, #584]	; (76e4 <udd_ep_run+0x2c0>)
    749a:	4798      	blx	r3
		return false; /* Job already on going */
    749c:	2300      	movs	r3, #0
    749e:	e117      	b.n	76d0 <udd_ep_run+0x2ac>
	}
	ptr_job->busy = true;
    74a0:	69bb      	ldr	r3, [r7, #24]
    74a2:	7c9a      	ldrb	r2, [r3, #18]
    74a4:	2101      	movs	r1, #1
    74a6:	430a      	orrs	r2, r1
    74a8:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    74aa:	697b      	ldr	r3, [r7, #20]
    74ac:	1c18      	adds	r0, r3, #0
    74ae:	4b8d      	ldr	r3, [pc, #564]	; (76e4 <udd_ep_run+0x2c0>)
    74b0:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    74b2:	69bb      	ldr	r3, [r7, #24]
    74b4:	68ba      	ldr	r2, [r7, #8]
    74b6:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    74b8:	69bb      	ldr	r3, [r7, #24]
    74ba:	687a      	ldr	r2, [r7, #4]
    74bc:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    74be:	69bb      	ldr	r3, [r7, #24]
    74c0:	2200      	movs	r2, #0
    74c2:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    74c4:	69bb      	ldr	r3, [r7, #24]
    74c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    74c8:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    74ca:	69bb      	ldr	r3, [r7, #24]
    74cc:	1c3a      	adds	r2, r7, #0
    74ce:	320e      	adds	r2, #14
    74d0:	7811      	ldrb	r1, [r2, #0]
    74d2:	2201      	movs	r2, #1
    74d4:	400a      	ands	r2, r1
    74d6:	1892      	adds	r2, r2, r2
    74d8:	7c99      	ldrb	r1, [r3, #18]
    74da:	2002      	movs	r0, #2
    74dc:	4381      	bics	r1, r0
    74de:	430a      	orrs	r2, r1
    74e0:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    74e2:	69bb      	ldr	r3, [r7, #24]
    74e4:	7c9a      	ldrb	r2, [r3, #18]
    74e6:	2104      	movs	r1, #4
    74e8:	438a      	bics	r2, r1
    74ea:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    74ec:	1c3b      	adds	r3, r7, #0
    74ee:	330f      	adds	r3, #15
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	b25b      	sxtb	r3, r3
    74f4:	2b00      	cmp	r3, #0
    74f6:	db00      	blt.n	74fa <udd_ep_run+0xd6>
    74f8:	e077      	b.n	75ea <udd_ep_run+0x1c6>
		if (0 != ptr_job->buf_size) {
    74fa:	69bb      	ldr	r3, [r7, #24]
    74fc:	689b      	ldr	r3, [r3, #8]
    74fe:	2b00      	cmp	r3, #0
    7500:	d03f      	beq.n	7582 <udd_ep_run+0x15e>
			next_trans = ptr_job->buf_size;
    7502:	69bb      	ldr	r3, [r7, #24]
    7504:	689a      	ldr	r2, [r3, #8]
    7506:	1c3b      	adds	r3, r7, #0
    7508:	331e      	adds	r3, #30
    750a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    750c:	1c3b      	adds	r3, r7, #0
    750e:	331e      	adds	r3, #30
    7510:	881a      	ldrh	r2, [r3, #0]
    7512:	4b75      	ldr	r3, [pc, #468]	; (76e8 <udd_ep_run+0x2c4>)
    7514:	429a      	cmp	r2, r3
    7516:	d90e      	bls.n	7536 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7518:	69bb      	ldr	r3, [r7, #24]
    751a:	8a1b      	ldrh	r3, [r3, #16]
    751c:	1c1a      	adds	r2, r3, #0
    751e:	4972      	ldr	r1, [pc, #456]	; (76e8 <udd_ep_run+0x2c4>)
    7520:	4b72      	ldr	r3, [pc, #456]	; (76ec <udd_ep_run+0x2c8>)
    7522:	1c08      	adds	r0, r1, #0
    7524:	1c11      	adds	r1, r2, #0
    7526:	4798      	blx	r3
    7528:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    752a:	b29a      	uxth	r2, r3
    752c:	1c3b      	adds	r3, r7, #0
    752e:	331e      	adds	r3, #30
    7530:	496d      	ldr	r1, [pc, #436]	; (76e8 <udd_ep_run+0x2c4>)
    7532:	1a8a      	subs	r2, r1, r2
    7534:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    7536:	69bb      	ldr	r3, [r7, #24]
    7538:	7c9b      	ldrb	r3, [r3, #18]
    753a:	079b      	lsls	r3, r3, #30
    753c:	0fdb      	lsrs	r3, r3, #31
    753e:	b2db      	uxtb	r3, r3
    7540:	2b00      	cmp	r3, #0
    7542:	d00e      	beq.n	7562 <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    7544:	69bb      	ldr	r3, [r7, #24]
    7546:	8a1a      	ldrh	r2, [r3, #16]
    7548:	1c3b      	adds	r3, r7, #0
    754a:	331e      	adds	r3, #30
    754c:	8819      	ldrh	r1, [r3, #0]
    754e:	4b68      	ldr	r3, [pc, #416]	; (76f0 <udd_ep_run+0x2cc>)
    7550:	1c08      	adds	r0, r1, #0
    7552:	1c11      	adds	r1, r2, #0
    7554:	4798      	blx	r3
    7556:	1c0b      	adds	r3, r1, #0
    7558:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    755a:	2b00      	cmp	r3, #0
    755c:	d101      	bne.n	7562 <udd_ep_run+0x13e>
    755e:	2301      	movs	r3, #1
    7560:	e000      	b.n	7564 <udd_ep_run+0x140>
    7562:	2300      	movs	r3, #0
    7564:	b2db      	uxtb	r3, r3
    7566:	1c1a      	adds	r2, r3, #0
    7568:	2301      	movs	r3, #1
    756a:	4013      	ands	r3, r2
    756c:	b2d9      	uxtb	r1, r3
    756e:	69bb      	ldr	r3, [r7, #24]
    7570:	2201      	movs	r2, #1
    7572:	400a      	ands	r2, r1
    7574:	1892      	adds	r2, r2, r2
    7576:	7c99      	ldrb	r1, [r3, #18]
    7578:	2002      	movs	r0, #2
    757a:	4381      	bics	r1, r0
    757c:	430a      	orrs	r2, r1
    757e:	749a      	strb	r2, [r3, #18]
    7580:	e023      	b.n	75ca <udd_ep_run+0x1a6>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    7582:	69bb      	ldr	r3, [r7, #24]
    7584:	7c9b      	ldrb	r3, [r3, #18]
    7586:	079b      	lsls	r3, r3, #30
    7588:	0fdb      	lsrs	r3, r3, #31
    758a:	b2db      	uxtb	r3, r3
    758c:	2b01      	cmp	r3, #1
    758e:	d109      	bne.n	75a4 <udd_ep_run+0x180>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    7590:	69bb      	ldr	r3, [r7, #24]
    7592:	7c9a      	ldrb	r2, [r3, #18]
    7594:	2102      	movs	r1, #2
    7596:	438a      	bics	r2, r1
    7598:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    759a:	1c3b      	adds	r3, r7, #0
    759c:	331e      	adds	r3, #30
    759e:	2200      	movs	r2, #0
    75a0:	801a      	strh	r2, [r3, #0]
    75a2:	e012      	b.n	75ca <udd_ep_run+0x1a6>
		} else {
			ptr_job->busy = false;
    75a4:	69bb      	ldr	r3, [r7, #24]
    75a6:	7c9a      	ldrb	r2, [r3, #18]
    75a8:	2101      	movs	r1, #1
    75aa:	438a      	bics	r2, r1
    75ac:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    75ae:	69bb      	ldr	r3, [r7, #24]
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	2b00      	cmp	r3, #0
    75b4:	d007      	beq.n	75c6 <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    75b6:	69bb      	ldr	r3, [r7, #24]
    75b8:	681b      	ldr	r3, [r3, #0]
    75ba:	1c3a      	adds	r2, r7, #0
    75bc:	320f      	adds	r2, #15
    75be:	7812      	ldrb	r2, [r2, #0]
    75c0:	2000      	movs	r0, #0
    75c2:	2100      	movs	r1, #0
    75c4:	4798      	blx	r3
			}
			return true;
    75c6:	2301      	movs	r3, #1
    75c8:	e082      	b.n	76d0 <udd_ep_run+0x2ac>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    75ca:	69bb      	ldr	r3, [r7, #24]
    75cc:	685a      	ldr	r2, [r3, #4]
    75ce:	1c3b      	adds	r3, r7, #0
    75d0:	331e      	adds	r3, #30
    75d2:	881b      	ldrh	r3, [r3, #0]
    75d4:	4847      	ldr	r0, [pc, #284]	; (76f4 <udd_ep_run+0x2d0>)
    75d6:	1c39      	adds	r1, r7, #0
    75d8:	311d      	adds	r1, #29
    75da:	7809      	ldrb	r1, [r1, #0]
    75dc:	4c46      	ldr	r4, [pc, #280]	; (76f8 <udd_ep_run+0x2d4>)
    75de:	47a0      	blx	r4
    75e0:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    75e2:	425a      	negs	r2, r3
    75e4:	4153      	adcs	r3, r2
    75e6:	b2db      	uxtb	r3, r3
    75e8:	e072      	b.n	76d0 <udd_ep_run+0x2ac>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    75ea:	69bb      	ldr	r3, [r7, #24]
    75ec:	689b      	ldr	r3, [r3, #8]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d05c      	beq.n	76ac <udd_ep_run+0x288>
			next_trans = ptr_job->buf_size;
    75f2:	69bb      	ldr	r3, [r7, #24]
    75f4:	689a      	ldr	r2, [r3, #8]
    75f6:	1c3b      	adds	r3, r7, #0
    75f8:	331e      	adds	r3, #30
    75fa:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    75fc:	1c3b      	adds	r3, r7, #0
    75fe:	331e      	adds	r3, #30
    7600:	881a      	ldrh	r2, [r3, #0]
    7602:	4b39      	ldr	r3, [pc, #228]	; (76e8 <udd_ep_run+0x2c4>)
    7604:	429a      	cmp	r2, r3
    7606:	d90f      	bls.n	7628 <udd_ep_run+0x204>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7608:	69bb      	ldr	r3, [r7, #24]
    760a:	8a1b      	ldrh	r3, [r3, #16]
    760c:	1c1a      	adds	r2, r3, #0
    760e:	4936      	ldr	r1, [pc, #216]	; (76e8 <udd_ep_run+0x2c4>)
    7610:	4b36      	ldr	r3, [pc, #216]	; (76ec <udd_ep_run+0x2c8>)
    7612:	1c08      	adds	r0, r1, #0
    7614:	1c11      	adds	r1, r2, #0
    7616:	4798      	blx	r3
    7618:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    761a:	b29a      	uxth	r2, r3
    761c:	1c3b      	adds	r3, r7, #0
    761e:	331e      	adds	r3, #30
    7620:	4931      	ldr	r1, [pc, #196]	; (76e8 <udd_ep_run+0x2c4>)
    7622:	1a8a      	subs	r2, r1, r2
    7624:	801a      	strh	r2, [r3, #0]
    7626:	e011      	b.n	764c <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    7628:	69bb      	ldr	r3, [r7, #24]
    762a:	8a1a      	ldrh	r2, [r3, #16]
    762c:	1c3b      	adds	r3, r7, #0
    762e:	331e      	adds	r3, #30
    7630:	8819      	ldrh	r1, [r3, #0]
    7632:	4b2f      	ldr	r3, [pc, #188]	; (76f0 <udd_ep_run+0x2cc>)
    7634:	1c08      	adds	r0, r1, #0
    7636:	1c11      	adds	r1, r2, #0
    7638:	4798      	blx	r3
    763a:	1c0b      	adds	r3, r1, #0
    763c:	b29a      	uxth	r2, r3
    763e:	1c3b      	adds	r3, r7, #0
    7640:	331e      	adds	r3, #30
    7642:	1c39      	adds	r1, r7, #0
    7644:	311e      	adds	r1, #30
    7646:	8809      	ldrh	r1, [r1, #0]
    7648:	1a8a      	subs	r2, r1, r2
    764a:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    764c:	69bb      	ldr	r3, [r7, #24]
    764e:	8a1b      	ldrh	r3, [r3, #16]
    7650:	1c3a      	adds	r2, r7, #0
    7652:	321e      	adds	r2, #30
    7654:	8812      	ldrh	r2, [r2, #0]
    7656:	429a      	cmp	r2, r3
    7658:	d218      	bcs.n	768c <udd_ep_run+0x268>
				ptr_job->b_use_out_cache_buffer = true;
    765a:	69bb      	ldr	r3, [r7, #24]
    765c:	7c9a      	ldrb	r2, [r3, #18]
    765e:	2104      	movs	r1, #4
    7660:	430a      	orrs	r2, r1
    7662:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    7664:	1c3b      	adds	r3, r7, #0
    7666:	331d      	adds	r3, #29
    7668:	781b      	ldrb	r3, [r3, #0]
    766a:	3b01      	subs	r3, #1
    766c:	00da      	lsls	r2, r3, #3
    766e:	4b23      	ldr	r3, [pc, #140]	; (76fc <udd_ep_run+0x2d8>)
    7670:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    7672:	69bb      	ldr	r3, [r7, #24]
    7674:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    7676:	481f      	ldr	r0, [pc, #124]	; (76f4 <udd_ep_run+0x2d0>)
    7678:	1c39      	adds	r1, r7, #0
    767a:	311d      	adds	r1, #29
    767c:	7809      	ldrb	r1, [r1, #0]
    767e:	4c20      	ldr	r4, [pc, #128]	; (7700 <udd_ep_run+0x2dc>)
    7680:	47a0      	blx	r4
    7682:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    7684:	425a      	negs	r2, r3
    7686:	4153      	adcs	r3, r2
    7688:	b2db      	uxtb	r3, r3
    768a:	e021      	b.n	76d0 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    768c:	69bb      	ldr	r3, [r7, #24]
    768e:	685a      	ldr	r2, [r3, #4]
    7690:	1c3b      	adds	r3, r7, #0
    7692:	331e      	adds	r3, #30
    7694:	881b      	ldrh	r3, [r3, #0]
    7696:	4817      	ldr	r0, [pc, #92]	; (76f4 <udd_ep_run+0x2d0>)
    7698:	1c39      	adds	r1, r7, #0
    769a:	311d      	adds	r1, #29
    769c:	7809      	ldrb	r1, [r1, #0]
    769e:	4c18      	ldr	r4, [pc, #96]	; (7700 <udd_ep_run+0x2dc>)
    76a0:	47a0      	blx	r4
    76a2:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    76a4:	425a      	negs	r2, r3
    76a6:	4153      	adcs	r3, r2
    76a8:	b2db      	uxtb	r3, r3
    76aa:	e011      	b.n	76d0 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    76ac:	69bb      	ldr	r3, [r7, #24]
    76ae:	7c9a      	ldrb	r2, [r3, #18]
    76b0:	2101      	movs	r1, #1
    76b2:	438a      	bics	r2, r1
    76b4:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    76b6:	69bb      	ldr	r3, [r7, #24]
    76b8:	681b      	ldr	r3, [r3, #0]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d007      	beq.n	76ce <udd_ep_run+0x2aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    76be:	69bb      	ldr	r3, [r7, #24]
    76c0:	681b      	ldr	r3, [r3, #0]
    76c2:	1c3a      	adds	r2, r7, #0
    76c4:	320f      	adds	r2, #15
    76c6:	7812      	ldrb	r2, [r2, #0]
    76c8:	2000      	movs	r0, #0
    76ca:	2100      	movs	r1, #0
    76cc:	4798      	blx	r3
			}
			return true;
    76ce:	2301      	movs	r3, #1
		}
	}
}
    76d0:	1c18      	adds	r0, r3, #0
    76d2:	46bd      	mov	sp, r7
    76d4:	b009      	add	sp, #36	; 0x24
    76d6:	bd90      	pop	{r4, r7, pc}
    76d8:	000072f5 	.word	0x000072f5
    76dc:	00006c25 	.word	0x00006c25
    76e0:	00006859 	.word	0x00006859
    76e4:	000068a1 	.word	0x000068a1
    76e8:	00001fff 	.word	0x00001fff
    76ec:	0000aa41 	.word	0x0000aa41
    76f0:	0000a981 	.word	0x0000a981
    76f4:	20003974 	.word	0x20003974
    76f8:	000092dd 	.word	0x000092dd
    76fc:	2000393c 	.word	0x2000393c
    7700:	00009395 	.word	0x00009395

00007704 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    7704:	b580      	push	{r7, lr}
    7706:	b082      	sub	sp, #8
    7708:	af00      	add	r7, sp, #0
    770a:	1c02      	adds	r2, r0, #0
    770c:	1dfb      	adds	r3, r7, #7
    770e:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    7710:	4a04      	ldr	r2, [pc, #16]	; (7724 <udd_set_address+0x20>)
    7712:	1dfb      	adds	r3, r7, #7
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	1c10      	adds	r0, r2, #0
    7718:	1c19      	adds	r1, r3, #0
    771a:	4b03      	ldr	r3, [pc, #12]	; (7728 <udd_set_address+0x24>)
    771c:	4798      	blx	r3
}
    771e:	46bd      	mov	sp, r7
    7720:	b002      	add	sp, #8
    7722:	bd80      	pop	{r7, pc}
    7724:	20003974 	.word	0x20003974
    7728:	000069ad 	.word	0x000069ad

0000772c <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    772c:	b580      	push	{r7, lr}
    772e:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    7730:	4b03      	ldr	r3, [pc, #12]	; (7740 <udd_getaddress+0x14>)
    7732:	1c18      	adds	r0, r3, #0
    7734:	4b03      	ldr	r3, [pc, #12]	; (7744 <udd_getaddress+0x18>)
    7736:	4798      	blx	r3
    7738:	1c03      	adds	r3, r0, #0
}
    773a:	1c18      	adds	r0, r3, #0
    773c:	46bd      	mov	sp, r7
    773e:	bd80      	pop	{r7, pc}
    7740:	20003974 	.word	0x20003974
    7744:	00006991 	.word	0x00006991

00007748 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    7748:	b580      	push	{r7, lr}
    774a:	b082      	sub	sp, #8
    774c:	af00      	add	r7, sp, #0
	uint32_t try = 5;
    774e:	2305      	movs	r3, #5
    7750:	607b      	str	r3, [r7, #4]
	udd_wait_clock_ready();
    7752:	4b0c      	ldr	r3, [pc, #48]	; (7784 <udd_send_remotewakeup+0x3c>)
    7754:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_IDLE);
    7756:	2003      	movs	r0, #3
    7758:	4b0b      	ldr	r3, [pc, #44]	; (7788 <udd_send_remotewakeup+0x40>)
    775a:	4798      	blx	r3
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    775c:	e003      	b.n	7766 <udd_send_remotewakeup+0x1e>
		usb_device_send_remote_wake_up(&usb_device);
    775e:	4b0b      	ldr	r3, [pc, #44]	; (778c <udd_send_remotewakeup+0x44>)
    7760:	1c18      	adds	r0, r3, #0
    7762:	4b0b      	ldr	r3, [pc, #44]	; (7790 <udd_send_remotewakeup+0x48>)
    7764:	4798      	blx	r3
void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    7766:	4b09      	ldr	r3, [pc, #36]	; (778c <udd_send_remotewakeup+0x44>)
    7768:	1c18      	adds	r0, r3, #0
    776a:	4b0a      	ldr	r3, [pc, #40]	; (7794 <udd_send_remotewakeup+0x4c>)
    776c:	4798      	blx	r3
    776e:	1c03      	adds	r3, r0, #0
    7770:	2b02      	cmp	r3, #2
    7772:	d004      	beq.n	777e <udd_send_remotewakeup+0x36>
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	1e5a      	subs	r2, r3, #1
    7778:	607a      	str	r2, [r7, #4]
    777a:	2b00      	cmp	r3, #0
    777c:	d1ef      	bne.n	775e <udd_send_remotewakeup+0x16>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    777e:	46bd      	mov	sp, r7
    7780:	b002      	add	sp, #8
    7782:	bd80      	pop	{r7, pc}
    7784:	00006b6d 	.word	0x00006b6d
    7788:	00006ba5 	.word	0x00006ba5
    778c:	20003974 	.word	0x20003974
    7790:	00006a0d 	.word	0x00006a0d
    7794:	00006931 	.word	0x00006931

00007798 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    7798:	b580      	push	{r7, lr}
    779a:	b082      	sub	sp, #8
    779c:	af00      	add	r7, sp, #0
    779e:	6078      	str	r0, [r7, #4]
    77a0:	1c0a      	adds	r2, r1, #0
    77a2:	1cbb      	adds	r3, r7, #2
    77a4:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    77a6:	4b05      	ldr	r3, [pc, #20]	; (77bc <udd_set_setup_payload+0x24>)
    77a8:	687a      	ldr	r2, [r7, #4]
    77aa:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    77ac:	4b03      	ldr	r3, [pc, #12]	; (77bc <udd_set_setup_payload+0x24>)
    77ae:	1cba      	adds	r2, r7, #2
    77b0:	8812      	ldrh	r2, [r2, #0]
    77b2:	819a      	strh	r2, [r3, #12]
}
    77b4:	46bd      	mov	sp, r7
    77b6:	b002      	add	sp, #8
    77b8:	bd80      	pop	{r7, pc}
    77ba:	46c0      	nop			; (mov r8, r8)
    77bc:	20003adc 	.word	0x20003adc

000077c0 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    77c0:	b580      	push	{r7, lr}
    77c2:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    77c4:	4b13      	ldr	r3, [pc, #76]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77c6:	781a      	ldrb	r2, [r3, #0]
    77c8:	4b13      	ldr	r3, [pc, #76]	; (7818 <udd_ctrl_fetch_ram+0x58>)
    77ca:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    77cc:	4b11      	ldr	r3, [pc, #68]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77ce:	785a      	ldrb	r2, [r3, #1]
    77d0:	4b11      	ldr	r3, [pc, #68]	; (7818 <udd_ctrl_fetch_ram+0x58>)
    77d2:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    77d4:	4b0f      	ldr	r3, [pc, #60]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77d6:	78db      	ldrb	r3, [r3, #3]
    77d8:	021b      	lsls	r3, r3, #8
    77da:	b29a      	uxth	r2, r3
    77dc:	4b0d      	ldr	r3, [pc, #52]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77de:	789b      	ldrb	r3, [r3, #2]
    77e0:	18d3      	adds	r3, r2, r3
    77e2:	b29a      	uxth	r2, r3
    77e4:	4b0c      	ldr	r3, [pc, #48]	; (7818 <udd_ctrl_fetch_ram+0x58>)
    77e6:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    77e8:	4b0a      	ldr	r3, [pc, #40]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77ea:	795b      	ldrb	r3, [r3, #5]
    77ec:	021b      	lsls	r3, r3, #8
    77ee:	b29a      	uxth	r2, r3
    77f0:	4b08      	ldr	r3, [pc, #32]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77f2:	791b      	ldrb	r3, [r3, #4]
    77f4:	18d3      	adds	r3, r2, r3
    77f6:	b29a      	uxth	r2, r3
    77f8:	4b07      	ldr	r3, [pc, #28]	; (7818 <udd_ctrl_fetch_ram+0x58>)
    77fa:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    77fc:	4b05      	ldr	r3, [pc, #20]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    77fe:	79db      	ldrb	r3, [r3, #7]
    7800:	021b      	lsls	r3, r3, #8
    7802:	b29a      	uxth	r2, r3
    7804:	4b03      	ldr	r3, [pc, #12]	; (7814 <udd_ctrl_fetch_ram+0x54>)
    7806:	799b      	ldrb	r3, [r3, #6]
    7808:	18d3      	adds	r3, r2, r3
    780a:	b29a      	uxth	r2, r3
    780c:	4b02      	ldr	r3, [pc, #8]	; (7818 <udd_ctrl_fetch_ram+0x58>)
    780e:	80da      	strh	r2, [r3, #6]
}
    7810:	46bd      	mov	sp, r7
    7812:	bd80      	pop	{r7, pc}
    7814:	20003af4 	.word	0x20003af4
    7818:	20003adc 	.word	0x20003adc

0000781c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    781c:	b598      	push	{r3, r4, r7, lr}
    781e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    7820:	4b09      	ldr	r3, [pc, #36]	; (7848 <udd_ctrl_send_zlp_in+0x2c>)
    7822:	2203      	movs	r2, #3
    7824:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7826:	4a09      	ldr	r2, [pc, #36]	; (784c <udd_ctrl_send_zlp_in+0x30>)
    7828:	4b09      	ldr	r3, [pc, #36]	; (7850 <udd_ctrl_send_zlp_in+0x34>)
    782a:	1c10      	adds	r0, r2, #0
    782c:	1c19      	adds	r1, r3, #0
    782e:	4b09      	ldr	r3, [pc, #36]	; (7854 <udd_ctrl_send_zlp_in+0x38>)
    7830:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    7832:	4b09      	ldr	r3, [pc, #36]	; (7858 <udd_ctrl_send_zlp_in+0x3c>)
    7834:	689b      	ldr	r3, [r3, #8]
    7836:	4a05      	ldr	r2, [pc, #20]	; (784c <udd_ctrl_send_zlp_in+0x30>)
    7838:	1c10      	adds	r0, r2, #0
    783a:	2100      	movs	r1, #0
    783c:	1c1a      	adds	r2, r3, #0
    783e:	2300      	movs	r3, #0
    7840:	4c06      	ldr	r4, [pc, #24]	; (785c <udd_ctrl_send_zlp_in+0x40>)
    7842:	47a0      	blx	r4
}
    7844:	46bd      	mov	sp, r7
    7846:	bd98      	pop	{r3, r4, r7, pc}
    7848:	20000f8c 	.word	0x20000f8c
    784c:	20003974 	.word	0x20003974
    7850:	20003af4 	.word	0x20003af4
    7854:	00009441 	.word	0x00009441
    7858:	20003adc 	.word	0x20003adc
    785c:	000092dd 	.word	0x000092dd

00007860 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    7860:	b590      	push	{r4, r7, lr}
    7862:	b083      	sub	sp, #12
    7864:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7866:	4b30      	ldr	r3, [pc, #192]	; (7928 <udd_ctrl_in_sent+0xc8>)
    7868:	8999      	ldrh	r1, [r3, #12]
    786a:	4b30      	ldr	r3, [pc, #192]	; (792c <udd_ctrl_in_sent+0xcc>)
    786c:	881a      	ldrh	r2, [r3, #0]
    786e:	1dbb      	adds	r3, r7, #6
    7870:	1a8a      	subs	r2, r1, r2
    7872:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    7874:	1dbb      	adds	r3, r7, #6
    7876:	881b      	ldrh	r3, [r3, #0]
    7878:	2b00      	cmp	r3, #0
    787a:	d12f      	bne.n	78dc <udd_ctrl_in_sent+0x7c>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    787c:	4b2c      	ldr	r3, [pc, #176]	; (7930 <udd_ctrl_in_sent+0xd0>)
    787e:	881a      	ldrh	r2, [r3, #0]
    7880:	4b2a      	ldr	r3, [pc, #168]	; (792c <udd_ctrl_in_sent+0xcc>)
    7882:	881b      	ldrh	r3, [r3, #0]
    7884:	18d3      	adds	r3, r2, r3
    7886:	b29a      	uxth	r2, r3
    7888:	4b29      	ldr	r3, [pc, #164]	; (7930 <udd_ctrl_in_sent+0xd0>)
    788a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    788c:	4b26      	ldr	r3, [pc, #152]	; (7928 <udd_ctrl_in_sent+0xc8>)
    788e:	88da      	ldrh	r2, [r3, #6]
    7890:	4b27      	ldr	r3, [pc, #156]	; (7930 <udd_ctrl_in_sent+0xd0>)
    7892:	881b      	ldrh	r3, [r3, #0]
    7894:	429a      	cmp	r2, r3
    7896:	d003      	beq.n	78a0 <udd_ctrl_in_sent+0x40>
    7898:	4b26      	ldr	r3, [pc, #152]	; (7934 <udd_ctrl_in_sent+0xd4>)
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	2b00      	cmp	r3, #0
    789e:	d009      	beq.n	78b4 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    78a0:	4b25      	ldr	r3, [pc, #148]	; (7938 <udd_ctrl_in_sent+0xd8>)
    78a2:	2204      	movs	r2, #4
    78a4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    78a6:	4a25      	ldr	r2, [pc, #148]	; (793c <udd_ctrl_in_sent+0xdc>)
    78a8:	4b25      	ldr	r3, [pc, #148]	; (7940 <udd_ctrl_in_sent+0xe0>)
    78aa:	1c10      	adds	r0, r2, #0
    78ac:	1c19      	adds	r1, r3, #0
    78ae:	4b25      	ldr	r3, [pc, #148]	; (7944 <udd_ctrl_in_sent+0xe4>)
    78b0:	4798      	blx	r3
			return;
    78b2:	e035      	b.n	7920 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    78b4:	4b1c      	ldr	r3, [pc, #112]	; (7928 <udd_ctrl_in_sent+0xc8>)
    78b6:	695b      	ldr	r3, [r3, #20]
    78b8:	2b00      	cmp	r3, #0
    78ba:	d00f      	beq.n	78dc <udd_ctrl_in_sent+0x7c>
    78bc:	4b1a      	ldr	r3, [pc, #104]	; (7928 <udd_ctrl_in_sent+0xc8>)
    78be:	695b      	ldr	r3, [r3, #20]
    78c0:	4798      	blx	r3
    78c2:	1c03      	adds	r3, r0, #0
    78c4:	2201      	movs	r2, #1
    78c6:	4053      	eors	r3, r2
    78c8:	b2db      	uxtb	r3, r3
    78ca:	2b00      	cmp	r3, #0
    78cc:	d106      	bne.n	78dc <udd_ctrl_in_sent+0x7c>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    78ce:	4b17      	ldr	r3, [pc, #92]	; (792c <udd_ctrl_in_sent+0xcc>)
    78d0:	2200      	movs	r2, #0
    78d2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    78d4:	1dbb      	adds	r3, r7, #6
    78d6:	4a14      	ldr	r2, [pc, #80]	; (7928 <udd_ctrl_in_sent+0xc8>)
    78d8:	8992      	ldrh	r2, [r2, #12]
    78da:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    78dc:	1dbb      	adds	r3, r7, #6
    78de:	881b      	ldrh	r3, [r3, #0]
    78e0:	2b3f      	cmp	r3, #63	; 0x3f
    78e2:	d906      	bls.n	78f2 <udd_ctrl_in_sent+0x92>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    78e4:	1dbb      	adds	r3, r7, #6
    78e6:	2240      	movs	r2, #64	; 0x40
    78e8:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    78ea:	4b12      	ldr	r3, [pc, #72]	; (7934 <udd_ctrl_in_sent+0xd4>)
    78ec:	2200      	movs	r2, #0
    78ee:	701a      	strb	r2, [r3, #0]
    78f0:	e002      	b.n	78f8 <udd_ctrl_in_sent+0x98>
	} else {
		b_shortpacket = true;
    78f2:	4b10      	ldr	r3, [pc, #64]	; (7934 <udd_ctrl_in_sent+0xd4>)
    78f4:	2201      	movs	r2, #1
    78f6:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    78f8:	4b0b      	ldr	r3, [pc, #44]	; (7928 <udd_ctrl_in_sent+0xc8>)
    78fa:	689a      	ldr	r2, [r3, #8]
    78fc:	4b0b      	ldr	r3, [pc, #44]	; (792c <udd_ctrl_in_sent+0xcc>)
    78fe:	881b      	ldrh	r3, [r3, #0]
    7900:	18d2      	adds	r2, r2, r3
    7902:	1dbb      	adds	r3, r7, #6
    7904:	881b      	ldrh	r3, [r3, #0]
    7906:	490d      	ldr	r1, [pc, #52]	; (793c <udd_ctrl_in_sent+0xdc>)
    7908:	1c08      	adds	r0, r1, #0
    790a:	2100      	movs	r1, #0
    790c:	4c0e      	ldr	r4, [pc, #56]	; (7948 <udd_ctrl_in_sent+0xe8>)
    790e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    7910:	4b06      	ldr	r3, [pc, #24]	; (792c <udd_ctrl_in_sent+0xcc>)
    7912:	881a      	ldrh	r2, [r3, #0]
    7914:	1dbb      	adds	r3, r7, #6
    7916:	881b      	ldrh	r3, [r3, #0]
    7918:	18d3      	adds	r3, r2, r3
    791a:	b29a      	uxth	r2, r3
    791c:	4b03      	ldr	r3, [pc, #12]	; (792c <udd_ctrl_in_sent+0xcc>)
    791e:	801a      	strh	r2, [r3, #0]
}
    7920:	46bd      	mov	sp, r7
    7922:	b003      	add	sp, #12
    7924:	bd90      	pop	{r4, r7, pc}
    7926:	46c0      	nop			; (mov r8, r8)
    7928:	20003adc 	.word	0x20003adc
    792c:	20000f90 	.word	0x20000f90
    7930:	20000f8e 	.word	0x20000f8e
    7934:	200010ad 	.word	0x200010ad
    7938:	20000f8c 	.word	0x20000f8c
    793c:	20003974 	.word	0x20003974
    7940:	20003af4 	.word	0x20003af4
    7944:	00009441 	.word	0x00009441
    7948:	000092dd 	.word	0x000092dd

0000794c <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    794c:	b590      	push	{r4, r7, lr}
    794e:	b085      	sub	sp, #20
    7950:	af00      	add	r7, sp, #0
    7952:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7954:	687b      	ldr	r3, [r7, #4]
    7956:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    7958:	1c3b      	adds	r3, r7, #0
    795a:	330e      	adds	r3, #14
    795c:	68ba      	ldr	r2, [r7, #8]
    795e:	8812      	ldrh	r2, [r2, #0]
    7960:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    7962:	4b46      	ldr	r3, [pc, #280]	; (7a7c <udd_ctrl_out_received+0x130>)
    7964:	899b      	ldrh	r3, [r3, #12]
    7966:	1c1a      	adds	r2, r3, #0
    7968:	4b45      	ldr	r3, [pc, #276]	; (7a80 <udd_ctrl_out_received+0x134>)
    796a:	881b      	ldrh	r3, [r3, #0]
    796c:	1c19      	adds	r1, r3, #0
    796e:	1c3b      	adds	r3, r7, #0
    7970:	330e      	adds	r3, #14
    7972:	881b      	ldrh	r3, [r3, #0]
    7974:	18cb      	adds	r3, r1, r3
    7976:	429a      	cmp	r2, r3
    7978:	da07      	bge.n	798a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    797a:	4b40      	ldr	r3, [pc, #256]	; (7a7c <udd_ctrl_out_received+0x130>)
    797c:	8999      	ldrh	r1, [r3, #12]
    797e:	4b40      	ldr	r3, [pc, #256]	; (7a80 <udd_ctrl_out_received+0x134>)
    7980:	881a      	ldrh	r2, [r3, #0]
    7982:	1c3b      	adds	r3, r7, #0
    7984:	330e      	adds	r3, #14
    7986:	1a8a      	subs	r2, r1, r2
    7988:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    798a:	4b3c      	ldr	r3, [pc, #240]	; (7a7c <udd_ctrl_out_received+0x130>)
    798c:	689a      	ldr	r2, [r3, #8]
    798e:	4b3c      	ldr	r3, [pc, #240]	; (7a80 <udd_ctrl_out_received+0x134>)
    7990:	881b      	ldrh	r3, [r3, #0]
    7992:	18d1      	adds	r1, r2, r3
    7994:	1c3b      	adds	r3, r7, #0
    7996:	330e      	adds	r3, #14
    7998:	881b      	ldrh	r3, [r3, #0]
    799a:	4a3a      	ldr	r2, [pc, #232]	; (7a84 <udd_ctrl_out_received+0x138>)
    799c:	1c08      	adds	r0, r1, #0
    799e:	1c11      	adds	r1, r2, #0
    79a0:	1c1a      	adds	r2, r3, #0
    79a2:	4b39      	ldr	r3, [pc, #228]	; (7a88 <udd_ctrl_out_received+0x13c>)
    79a4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    79a6:	4b36      	ldr	r3, [pc, #216]	; (7a80 <udd_ctrl_out_received+0x134>)
    79a8:	881a      	ldrh	r2, [r3, #0]
    79aa:	1c3b      	adds	r3, r7, #0
    79ac:	330e      	adds	r3, #14
    79ae:	881b      	ldrh	r3, [r3, #0]
    79b0:	18d3      	adds	r3, r2, r3
    79b2:	b29a      	uxth	r2, r3
    79b4:	4b32      	ldr	r3, [pc, #200]	; (7a80 <udd_ctrl_out_received+0x134>)
    79b6:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    79b8:	1c3b      	adds	r3, r7, #0
    79ba:	330e      	adds	r3, #14
    79bc:	881b      	ldrh	r3, [r3, #0]
    79be:	2b40      	cmp	r3, #64	; 0x40
    79c0:	d10a      	bne.n	79d8 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    79c2:	4b2e      	ldr	r3, [pc, #184]	; (7a7c <udd_ctrl_out_received+0x130>)
    79c4:	88db      	ldrh	r3, [r3, #6]
    79c6:	1c1a      	adds	r2, r3, #0
    79c8:	4b30      	ldr	r3, [pc, #192]	; (7a8c <udd_ctrl_out_received+0x140>)
    79ca:	881b      	ldrh	r3, [r3, #0]
    79cc:	1c19      	adds	r1, r3, #0
    79ce:	4b2c      	ldr	r3, [pc, #176]	; (7a80 <udd_ctrl_out_received+0x134>)
    79d0:	881b      	ldrh	r3, [r3, #0]
    79d2:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    79d4:	429a      	cmp	r2, r3
    79d6:	dc1a      	bgt.n	7a0e <udd_ctrl_out_received+0xc2>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    79d8:	4b29      	ldr	r3, [pc, #164]	; (7a80 <udd_ctrl_out_received+0x134>)
    79da:	881a      	ldrh	r2, [r3, #0]
    79dc:	4b27      	ldr	r3, [pc, #156]	; (7a7c <udd_ctrl_out_received+0x130>)
    79de:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    79e0:	4b26      	ldr	r3, [pc, #152]	; (7a7c <udd_ctrl_out_received+0x130>)
    79e2:	695b      	ldr	r3, [r3, #20]
    79e4:	2b00      	cmp	r3, #0
    79e6:	d00f      	beq.n	7a08 <udd_ctrl_out_received+0xbc>
			if (!udd_g_ctrlreq.over_under_run()) {
    79e8:	4b24      	ldr	r3, [pc, #144]	; (7a7c <udd_ctrl_out_received+0x130>)
    79ea:	695b      	ldr	r3, [r3, #20]
    79ec:	4798      	blx	r3
    79ee:	1c03      	adds	r3, r0, #0
    79f0:	2201      	movs	r2, #1
    79f2:	4053      	eors	r3, r2
    79f4:	b2db      	uxtb	r3, r3
    79f6:	2b00      	cmp	r3, #0
    79f8:	d006      	beq.n	7a08 <udd_ctrl_out_received+0xbc>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    79fa:	4b25      	ldr	r3, [pc, #148]	; (7a90 <udd_ctrl_out_received+0x144>)
    79fc:	2205      	movs	r2, #5
    79fe:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    7a00:	2000      	movs	r0, #0
    7a02:	4b24      	ldr	r3, [pc, #144]	; (7a94 <udd_ctrl_out_received+0x148>)
    7a04:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    7a06:	e036      	b.n	7a76 <udd_ctrl_out_received+0x12a>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    7a08:	4b23      	ldr	r3, [pc, #140]	; (7a98 <udd_ctrl_out_received+0x14c>)
    7a0a:	4798      	blx	r3
		return;
    7a0c:	e033      	b.n	7a76 <udd_ctrl_out_received+0x12a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    7a0e:	4b1b      	ldr	r3, [pc, #108]	; (7a7c <udd_ctrl_out_received+0x130>)
    7a10:	899a      	ldrh	r2, [r3, #12]
    7a12:	4b1b      	ldr	r3, [pc, #108]	; (7a80 <udd_ctrl_out_received+0x134>)
    7a14:	881b      	ldrh	r3, [r3, #0]
    7a16:	429a      	cmp	r2, r3
    7a18:	d125      	bne.n	7a66 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    7a1a:	4b18      	ldr	r3, [pc, #96]	; (7a7c <udd_ctrl_out_received+0x130>)
    7a1c:	695b      	ldr	r3, [r3, #20]
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d106      	bne.n	7a30 <udd_ctrl_out_received+0xe4>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7a22:	4b1b      	ldr	r3, [pc, #108]	; (7a90 <udd_ctrl_out_received+0x144>)
    7a24:	2205      	movs	r2, #5
    7a26:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    7a28:	2000      	movs	r0, #0
    7a2a:	4b1a      	ldr	r3, [pc, #104]	; (7a94 <udd_ctrl_out_received+0x148>)
    7a2c:	4798      	blx	r3
			return;
    7a2e:	e022      	b.n	7a76 <udd_ctrl_out_received+0x12a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    7a30:	4b12      	ldr	r3, [pc, #72]	; (7a7c <udd_ctrl_out_received+0x130>)
    7a32:	695b      	ldr	r3, [r3, #20]
    7a34:	4798      	blx	r3
    7a36:	1c03      	adds	r3, r0, #0
    7a38:	2201      	movs	r2, #1
    7a3a:	4053      	eors	r3, r2
    7a3c:	b2db      	uxtb	r3, r3
    7a3e:	2b00      	cmp	r3, #0
    7a40:	d006      	beq.n	7a50 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7a42:	4b13      	ldr	r3, [pc, #76]	; (7a90 <udd_ctrl_out_received+0x144>)
    7a44:	2205      	movs	r2, #5
    7a46:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    7a48:	2000      	movs	r0, #0
    7a4a:	4b12      	ldr	r3, [pc, #72]	; (7a94 <udd_ctrl_out_received+0x148>)
    7a4c:	4798      	blx	r3
			return;
    7a4e:	e012      	b.n	7a76 <udd_ctrl_out_received+0x12a>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    7a50:	4b0e      	ldr	r3, [pc, #56]	; (7a8c <udd_ctrl_out_received+0x140>)
    7a52:	881a      	ldrh	r2, [r3, #0]
    7a54:	4b0a      	ldr	r3, [pc, #40]	; (7a80 <udd_ctrl_out_received+0x134>)
    7a56:	881b      	ldrh	r3, [r3, #0]
    7a58:	18d3      	adds	r3, r2, r3
    7a5a:	b29a      	uxth	r2, r3
    7a5c:	4b0b      	ldr	r3, [pc, #44]	; (7a8c <udd_ctrl_out_received+0x140>)
    7a5e:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    7a60:	4b07      	ldr	r3, [pc, #28]	; (7a80 <udd_ctrl_out_received+0x134>)
    7a62:	2200      	movs	r2, #0
    7a64:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7a66:	4a0d      	ldr	r2, [pc, #52]	; (7a9c <udd_ctrl_out_received+0x150>)
    7a68:	4b06      	ldr	r3, [pc, #24]	; (7a84 <udd_ctrl_out_received+0x138>)
    7a6a:	1c10      	adds	r0, r2, #0
    7a6c:	2100      	movs	r1, #0
    7a6e:	1c1a      	adds	r2, r3, #0
    7a70:	2340      	movs	r3, #64	; 0x40
    7a72:	4c0b      	ldr	r4, [pc, #44]	; (7aa0 <udd_ctrl_out_received+0x154>)
    7a74:	47a0      	blx	r4
}
    7a76:	46bd      	mov	sp, r7
    7a78:	b005      	add	sp, #20
    7a7a:	bd90      	pop	{r4, r7, pc}
    7a7c:	20003adc 	.word	0x20003adc
    7a80:	20000f90 	.word	0x20000f90
    7a84:	20003af4 	.word	0x20003af4
    7a88:	0000ab29 	.word	0x0000ab29
    7a8c:	20000f8e 	.word	0x20000f8e
    7a90:	20000f8c 	.word	0x20000f8c
    7a94:	00007321 	.word	0x00007321
    7a98:	0000781d 	.word	0x0000781d
    7a9c:	20003974 	.word	0x20003974
    7aa0:	00009395 	.word	0x00009395

00007aa4 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    7aa4:	b590      	push	{r4, r7, lr}
    7aa6:	b085      	sub	sp, #20
    7aa8:	af00      	add	r7, sp, #0
    7aaa:	6078      	str	r0, [r7, #4]
    7aac:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7aae:	683b      	ldr	r3, [r7, #0]
    7ab0:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    7ab2:	4b2b      	ldr	r3, [pc, #172]	; (7b60 <_usb_ep0_on_setup+0xbc>)
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d009      	beq.n	7ace <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    7aba:	4b2a      	ldr	r3, [pc, #168]	; (7b64 <_usb_ep0_on_setup+0xc0>)
    7abc:	691b      	ldr	r3, [r3, #16]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d002      	beq.n	7ac8 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    7ac2:	4b28      	ldr	r3, [pc, #160]	; (7b64 <_usb_ep0_on_setup+0xc0>)
    7ac4:	691b      	ldr	r3, [r3, #16]
    7ac6:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    7ac8:	4b25      	ldr	r3, [pc, #148]	; (7b60 <_usb_ep0_on_setup+0xbc>)
    7aca:	2200      	movs	r2, #0
    7acc:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    7ace:	68fb      	ldr	r3, [r7, #12]
    7ad0:	881b      	ldrh	r3, [r3, #0]
    7ad2:	2b08      	cmp	r3, #8
    7ad4:	d002      	beq.n	7adc <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    7ad6:	4b24      	ldr	r3, [pc, #144]	; (7b68 <_usb_ep0_on_setup+0xc4>)
    7ad8:	4798      	blx	r3
		return;
    7ada:	e03e      	b.n	7b5a <_usb_ep0_on_setup+0xb6>
	} else {
		udd_ctrl_fetch_ram();
    7adc:	4b23      	ldr	r3, [pc, #140]	; (7b6c <_usb_ep0_on_setup+0xc8>)
    7ade:	4798      	blx	r3
		if (false == udc_process_setup()) {
    7ae0:	4b23      	ldr	r3, [pc, #140]	; (7b70 <_usb_ep0_on_setup+0xcc>)
    7ae2:	4798      	blx	r3
    7ae4:	1c03      	adds	r3, r0, #0
    7ae6:	2201      	movs	r2, #1
    7ae8:	4053      	eors	r3, r2
    7aea:	b2db      	uxtb	r3, r3
    7aec:	2b00      	cmp	r3, #0
    7aee:	d002      	beq.n	7af6 <_usb_ep0_on_setup+0x52>
			udd_ctrl_stall_data();
    7af0:	4b1d      	ldr	r3, [pc, #116]	; (7b68 <_usb_ep0_on_setup+0xc4>)
    7af2:	4798      	blx	r3
			return;
    7af4:	e031      	b.n	7b5a <_usb_ep0_on_setup+0xb6>
		} else if (Udd_setup_is_in()) {
    7af6:	4b1b      	ldr	r3, [pc, #108]	; (7b64 <_usb_ep0_on_setup+0xc0>)
    7af8:	781b      	ldrb	r3, [r3, #0]
    7afa:	b2db      	uxtb	r3, r3
    7afc:	b25b      	sxtb	r3, r3
    7afe:	2b00      	cmp	r3, #0
    7b00:	da13      	bge.n	7b2a <_usb_ep0_on_setup+0x86>
			udd_ctrl_prev_payload_nb_trans = 0;
    7b02:	4b1c      	ldr	r3, [pc, #112]	; (7b74 <_usb_ep0_on_setup+0xd0>)
    7b04:	2200      	movs	r2, #0
    7b06:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    7b08:	4b1b      	ldr	r3, [pc, #108]	; (7b78 <_usb_ep0_on_setup+0xd4>)
    7b0a:	2200      	movs	r2, #0
    7b0c:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    7b0e:	4b14      	ldr	r3, [pc, #80]	; (7b60 <_usb_ep0_on_setup+0xbc>)
    7b10:	2202      	movs	r2, #2
    7b12:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7b14:	4a19      	ldr	r2, [pc, #100]	; (7b7c <_usb_ep0_on_setup+0xd8>)
    7b16:	4b1a      	ldr	r3, [pc, #104]	; (7b80 <_usb_ep0_on_setup+0xdc>)
    7b18:	1c10      	adds	r0, r2, #0
    7b1a:	2100      	movs	r1, #0
    7b1c:	1c1a      	adds	r2, r3, #0
    7b1e:	2340      	movs	r3, #64	; 0x40
    7b20:	4c18      	ldr	r4, [pc, #96]	; (7b84 <_usb_ep0_on_setup+0xe0>)
    7b22:	47a0      	blx	r4
			udd_ctrl_in_sent();
    7b24:	4b18      	ldr	r3, [pc, #96]	; (7b88 <_usb_ep0_on_setup+0xe4>)
    7b26:	4798      	blx	r3
    7b28:	e017      	b.n	7b5a <_usb_ep0_on_setup+0xb6>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    7b2a:	4b0e      	ldr	r3, [pc, #56]	; (7b64 <_usb_ep0_on_setup+0xc0>)
    7b2c:	88db      	ldrh	r3, [r3, #6]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d102      	bne.n	7b38 <_usb_ep0_on_setup+0x94>
				udd_ctrl_send_zlp_in();
    7b32:	4b16      	ldr	r3, [pc, #88]	; (7b8c <_usb_ep0_on_setup+0xe8>)
    7b34:	4798      	blx	r3
				return;
    7b36:	e010      	b.n	7b5a <_usb_ep0_on_setup+0xb6>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    7b38:	4b0e      	ldr	r3, [pc, #56]	; (7b74 <_usb_ep0_on_setup+0xd0>)
    7b3a:	2200      	movs	r2, #0
    7b3c:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    7b3e:	4b0e      	ldr	r3, [pc, #56]	; (7b78 <_usb_ep0_on_setup+0xd4>)
    7b40:	2200      	movs	r2, #0
    7b42:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    7b44:	4b06      	ldr	r3, [pc, #24]	; (7b60 <_usb_ep0_on_setup+0xbc>)
    7b46:	2201      	movs	r2, #1
    7b48:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7b4a:	4a0c      	ldr	r2, [pc, #48]	; (7b7c <_usb_ep0_on_setup+0xd8>)
    7b4c:	4b0c      	ldr	r3, [pc, #48]	; (7b80 <_usb_ep0_on_setup+0xdc>)
    7b4e:	1c10      	adds	r0, r2, #0
    7b50:	2100      	movs	r1, #0
    7b52:	1c1a      	adds	r2, r3, #0
    7b54:	2340      	movs	r3, #64	; 0x40
    7b56:	4c0b      	ldr	r4, [pc, #44]	; (7b84 <_usb_ep0_on_setup+0xe0>)
    7b58:	47a0      	blx	r4
			}
		}
	}
}
    7b5a:	46bd      	mov	sp, r7
    7b5c:	b005      	add	sp, #20
    7b5e:	bd90      	pop	{r4, r7, pc}
    7b60:	20000f8c 	.word	0x20000f8c
    7b64:	20003adc 	.word	0x20003adc
    7b68:	000073f1 	.word	0x000073f1
    7b6c:	000077c1 	.word	0x000077c1
    7b70:	00003f2d 	.word	0x00003f2d
    7b74:	20000f8e 	.word	0x20000f8e
    7b78:	20000f90 	.word	0x20000f90
    7b7c:	20003974 	.word	0x20003974
    7b80:	20003af4 	.word	0x20003af4
    7b84:	00009395 	.word	0x00009395
    7b88:	00007861 	.word	0x00007861
    7b8c:	0000781d 	.word	0x0000781d

00007b90 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    7b90:	b580      	push	{r7, lr}
    7b92:	b084      	sub	sp, #16
    7b94:	af00      	add	r7, sp, #0
    7b96:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    7b9c:	4b0a      	ldr	r3, [pc, #40]	; (7bc8 <udd_ctrl_underflow+0x38>)
    7b9e:	781b      	ldrb	r3, [r3, #0]
    7ba0:	2b01      	cmp	r3, #1
    7ba2:	d102      	bne.n	7baa <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    7ba4:	4b09      	ldr	r3, [pc, #36]	; (7bcc <udd_ctrl_underflow+0x3c>)
    7ba6:	4798      	blx	r3
    7ba8:	e00a      	b.n	7bc0 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    7baa:	4b07      	ldr	r3, [pc, #28]	; (7bc8 <udd_ctrl_underflow+0x38>)
    7bac:	781b      	ldrb	r3, [r3, #0]
    7bae:	2b04      	cmp	r3, #4
    7bb0:	d106      	bne.n	7bc0 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    7bb2:	68fb      	ldr	r3, [r7, #12]
    7bb4:	799b      	ldrb	r3, [r3, #6]
    7bb6:	4a06      	ldr	r2, [pc, #24]	; (7bd0 <udd_ctrl_underflow+0x40>)
    7bb8:	1c10      	adds	r0, r2, #0
    7bba:	1c19      	adds	r1, r3, #0
    7bbc:	4b05      	ldr	r3, [pc, #20]	; (7bd4 <udd_ctrl_underflow+0x44>)
    7bbe:	4798      	blx	r3
	}
}
    7bc0:	46bd      	mov	sp, r7
    7bc2:	b004      	add	sp, #16
    7bc4:	bd80      	pop	{r7, pc}
    7bc6:	46c0      	nop			; (mov r8, r8)
    7bc8:	20000f8c 	.word	0x20000f8c
    7bcc:	0000781d 	.word	0x0000781d
    7bd0:	20003974 	.word	0x20003974
    7bd4:	0000916d 	.word	0x0000916d

00007bd8 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    7bd8:	b580      	push	{r7, lr}
    7bda:	b084      	sub	sp, #16
    7bdc:	af00      	add	r7, sp, #0
    7bde:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7be0:	687b      	ldr	r3, [r7, #4]
    7be2:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    7be4:	4b0a      	ldr	r3, [pc, #40]	; (7c10 <udd_ctrl_overflow+0x38>)
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	2b02      	cmp	r3, #2
    7bea:	d103      	bne.n	7bf4 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    7bec:	4b08      	ldr	r3, [pc, #32]	; (7c10 <udd_ctrl_overflow+0x38>)
    7bee:	2204      	movs	r2, #4
    7bf0:	701a      	strb	r2, [r3, #0]
    7bf2:	e00a      	b.n	7c0a <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    7bf4:	4b06      	ldr	r3, [pc, #24]	; (7c10 <udd_ctrl_overflow+0x38>)
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	2b03      	cmp	r3, #3
    7bfa:	d106      	bne.n	7c0a <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    7bfc:	68fb      	ldr	r3, [r7, #12]
    7bfe:	799b      	ldrb	r3, [r3, #6]
    7c00:	4a04      	ldr	r2, [pc, #16]	; (7c14 <udd_ctrl_overflow+0x3c>)
    7c02:	1c10      	adds	r0, r2, #0
    7c04:	1c19      	adds	r1, r3, #0
    7c06:	4b04      	ldr	r3, [pc, #16]	; (7c18 <udd_ctrl_overflow+0x40>)
    7c08:	4798      	blx	r3
	}
}
    7c0a:	46bd      	mov	sp, r7
    7c0c:	b004      	add	sp, #16
    7c0e:	bd80      	pop	{r7, pc}
    7c10:	20000f8c 	.word	0x20000f8c
    7c14:	20003974 	.word	0x20003974
    7c18:	0000916d 	.word	0x0000916d

00007c1c <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b084      	sub	sp, #16
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
    7c24:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7c26:	683b      	ldr	r3, [r7, #0]
    7c28:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    7c2a:	68fb      	ldr	r3, [r7, #12]
    7c2c:	799b      	ldrb	r3, [r3, #6]
    7c2e:	b2db      	uxtb	r3, r3
    7c30:	b25b      	sxtb	r3, r3
    7c32:	2b00      	cmp	r3, #0
    7c34:	da04      	bge.n	7c40 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    7c36:	683b      	ldr	r3, [r7, #0]
    7c38:	1c18      	adds	r0, r3, #0
    7c3a:	4b05      	ldr	r3, [pc, #20]	; (7c50 <_usb_ep0_on_tansfer_fail+0x34>)
    7c3c:	4798      	blx	r3
    7c3e:	e003      	b.n	7c48 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    7c40:	683b      	ldr	r3, [r7, #0]
    7c42:	1c18      	adds	r0, r3, #0
    7c44:	4b03      	ldr	r3, [pc, #12]	; (7c54 <_usb_ep0_on_tansfer_fail+0x38>)
    7c46:	4798      	blx	r3
	}
}
    7c48:	46bd      	mov	sp, r7
    7c4a:	b004      	add	sp, #16
    7c4c:	bd80      	pop	{r7, pc}
    7c4e:	46c0      	nop			; (mov r8, r8)
    7c50:	00007b91 	.word	0x00007b91
    7c54:	00007bd9 	.word	0x00007bd9

00007c58 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    7c58:	b580      	push	{r7, lr}
    7c5a:	b082      	sub	sp, #8
    7c5c:	af00      	add	r7, sp, #0
    7c5e:	6078      	str	r0, [r7, #4]
    7c60:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    7c62:	4b0e      	ldr	r3, [pc, #56]	; (7c9c <_usb_ep0_on_tansfer_ok+0x44>)
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	2b01      	cmp	r3, #1
    7c68:	d104      	bne.n	7c74 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    7c6a:	683b      	ldr	r3, [r7, #0]
    7c6c:	1c18      	adds	r0, r3, #0
    7c6e:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <_usb_ep0_on_tansfer_ok+0x48>)
    7c70:	4798      	blx	r3
    7c72:	e010      	b.n	7c96 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    7c74:	4b09      	ldr	r3, [pc, #36]	; (7c9c <_usb_ep0_on_tansfer_ok+0x44>)
    7c76:	781b      	ldrb	r3, [r3, #0]
    7c78:	2b02      	cmp	r3, #2
    7c7a:	d102      	bne.n	7c82 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    7c7c:	4b09      	ldr	r3, [pc, #36]	; (7ca4 <_usb_ep0_on_tansfer_ok+0x4c>)
    7c7e:	4798      	blx	r3
    7c80:	e009      	b.n	7c96 <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    7c82:	4b09      	ldr	r3, [pc, #36]	; (7ca8 <_usb_ep0_on_tansfer_ok+0x50>)
    7c84:	691b      	ldr	r3, [r3, #16]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d002      	beq.n	7c90 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    7c8a:	4b07      	ldr	r3, [pc, #28]	; (7ca8 <_usb_ep0_on_tansfer_ok+0x50>)
    7c8c:	691b      	ldr	r3, [r3, #16]
    7c8e:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    7c90:	4b02      	ldr	r3, [pc, #8]	; (7c9c <_usb_ep0_on_tansfer_ok+0x44>)
    7c92:	2200      	movs	r2, #0
    7c94:	701a      	strb	r2, [r3, #0]
		}
}
    7c96:	46bd      	mov	sp, r7
    7c98:	b002      	add	sp, #8
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	20000f8c 	.word	0x20000f8c
    7ca0:	0000794d 	.word	0x0000794d
    7ca4:	00007861 	.word	0x00007861
    7ca8:	20003adc 	.word	0x20003adc

00007cac <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    7cac:	b590      	push	{r4, r7, lr}
    7cae:	b085      	sub	sp, #20
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    7cb4:	1c3b      	adds	r3, r7, #0
    7cb6:	330c      	adds	r3, #12
    7cb8:	1c18      	adds	r0, r3, #0
    7cba:	4b22      	ldr	r3, [pc, #136]	; (7d44 <udd_ctrl_ep_enable+0x98>)
    7cbc:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    7cbe:	1c3b      	adds	r3, r7, #0
    7cc0:	330c      	adds	r3, #12
    7cc2:	2203      	movs	r2, #3
    7cc4:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    7cc6:	687a      	ldr	r2, [r7, #4]
    7cc8:	1c3b      	adds	r3, r7, #0
    7cca:	330c      	adds	r3, #12
    7ccc:	1c10      	adds	r0, r2, #0
    7cce:	1c19      	adds	r1, r3, #0
    7cd0:	4b1d      	ldr	r3, [pc, #116]	; (7d48 <udd_ctrl_ep_enable+0x9c>)
    7cd2:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    7cd4:	687a      	ldr	r2, [r7, #4]
    7cd6:	4b1d      	ldr	r3, [pc, #116]	; (7d4c <udd_ctrl_ep_enable+0xa0>)
    7cd8:	1c10      	adds	r0, r2, #0
    7cda:	1c19      	adds	r1, r3, #0
    7cdc:	4b1c      	ldr	r3, [pc, #112]	; (7d50 <udd_ctrl_ep_enable+0xa4>)
    7cde:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    7ce0:	687a      	ldr	r2, [r7, #4]
    7ce2:	4b1c      	ldr	r3, [pc, #112]	; (7d54 <udd_ctrl_ep_enable+0xa8>)
    7ce4:	1c10      	adds	r0, r2, #0
    7ce6:	2100      	movs	r1, #0
    7ce8:	2202      	movs	r2, #2
    7cea:	4c1b      	ldr	r4, [pc, #108]	; (7d58 <udd_ctrl_ep_enable+0xac>)
    7cec:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    7cee:	687a      	ldr	r2, [r7, #4]
    7cf0:	4b1a      	ldr	r3, [pc, #104]	; (7d5c <udd_ctrl_ep_enable+0xb0>)
    7cf2:	1c10      	adds	r0, r2, #0
    7cf4:	2100      	movs	r1, #0
    7cf6:	2200      	movs	r2, #0
    7cf8:	4c17      	ldr	r4, [pc, #92]	; (7d58 <udd_ctrl_ep_enable+0xac>)
    7cfa:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    7cfc:	687a      	ldr	r2, [r7, #4]
    7cfe:	4b18      	ldr	r3, [pc, #96]	; (7d60 <udd_ctrl_ep_enable+0xb4>)
    7d00:	1c10      	adds	r0, r2, #0
    7d02:	2100      	movs	r1, #0
    7d04:	2201      	movs	r2, #1
    7d06:	4c14      	ldr	r4, [pc, #80]	; (7d58 <udd_ctrl_ep_enable+0xac>)
    7d08:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    7d0a:	687b      	ldr	r3, [r7, #4]
    7d0c:	1c18      	adds	r0, r3, #0
    7d0e:	2100      	movs	r1, #0
    7d10:	2202      	movs	r2, #2
    7d12:	4b14      	ldr	r3, [pc, #80]	; (7d64 <udd_ctrl_ep_enable+0xb8>)
    7d14:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	1c18      	adds	r0, r3, #0
    7d1a:	2100      	movs	r1, #0
    7d1c:	2200      	movs	r2, #0
    7d1e:	4b11      	ldr	r3, [pc, #68]	; (7d64 <udd_ctrl_ep_enable+0xb8>)
    7d20:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	1c18      	adds	r0, r3, #0
    7d26:	2100      	movs	r1, #0
    7d28:	2201      	movs	r2, #1
    7d2a:	4b0e      	ldr	r3, [pc, #56]	; (7d64 <udd_ctrl_ep_enable+0xb8>)
    7d2c:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    7d2e:	687b      	ldr	r3, [r7, #4]
    7d30:	1c18      	adds	r0, r3, #0
    7d32:	2101      	movs	r1, #1
    7d34:	4b0c      	ldr	r3, [pc, #48]	; (7d68 <udd_ctrl_ep_enable+0xbc>)
    7d36:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    7d38:	4b0c      	ldr	r3, [pc, #48]	; (7d6c <udd_ctrl_ep_enable+0xc0>)
    7d3a:	2200      	movs	r2, #0
    7d3c:	701a      	strb	r2, [r3, #0]
}
    7d3e:	46bd      	mov	sp, r7
    7d40:	b005      	add	sp, #20
    7d42:	bd90      	pop	{r4, r7, pc}
    7d44:	00008b81 	.word	0x00008b81
    7d48:	00008ba9 	.word	0x00008ba9
    7d4c:	20003af4 	.word	0x20003af4
    7d50:	00009441 	.word	0x00009441
    7d54:	00007aa5 	.word	0x00007aa5
    7d58:	00008775 	.word	0x00008775
    7d5c:	00007c59 	.word	0x00007c59
    7d60:	00007c1d 	.word	0x00007c1d
    7d64:	00008855 	.word	0x00008855
    7d68:	00006a31 	.word	0x00006a31
    7d6c:	20000f8c 	.word	0x20000f8c

00007d70 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b082      	sub	sp, #8
    7d74:	af00      	add	r7, sp, #0
    7d76:	6078      	str	r0, [r7, #4]
    7d78:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7d7a:	4b09      	ldr	r3, [pc, #36]	; (7da0 <_usb_on_suspend+0x30>)
    7d7c:	1c18      	adds	r0, r3, #0
    7d7e:	2104      	movs	r1, #4
    7d80:	4b08      	ldr	r3, [pc, #32]	; (7da4 <_usb_on_suspend+0x34>)
    7d82:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7d84:	4b06      	ldr	r3, [pc, #24]	; (7da0 <_usb_on_suspend+0x30>)
    7d86:	1c18      	adds	r0, r3, #0
    7d88:	2102      	movs	r1, #2
    7d8a:	4b07      	ldr	r3, [pc, #28]	; (7da8 <_usb_on_suspend+0x38>)
    7d8c:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    7d8e:	2001      	movs	r0, #1
    7d90:	4b06      	ldr	r3, [pc, #24]	; (7dac <_usb_on_suspend+0x3c>)
    7d92:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    7d94:	4b06      	ldr	r3, [pc, #24]	; (7db0 <_usb_on_suspend+0x40>)
    7d96:	4798      	blx	r3
#endif
}
    7d98:	46bd      	mov	sp, r7
    7d9a:	b002      	add	sp, #8
    7d9c:	bd80      	pop	{r7, pc}
    7d9e:	46c0      	nop			; (mov r8, r8)
    7da0:	20003974 	.word	0x20003974
    7da4:	00008721 	.word	0x00008721
    7da8:	000086c5 	.word	0x000086c5
    7dac:	00006ba5 	.word	0x00006ba5
    7db0:	0000a0e5 	.word	0x0000a0e5

00007db4 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    7db4:	b580      	push	{r7, lr}
    7db6:	b084      	sub	sp, #16
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
    7dbc:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    7dbe:	683b      	ldr	r3, [r7, #0]
    7dc0:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7dc2:	4b0a      	ldr	r3, [pc, #40]	; (7dec <_usb_device_lpm_suspend+0x38>)
    7dc4:	1c18      	adds	r0, r3, #0
    7dc6:	2106      	movs	r1, #6
    7dc8:	4b09      	ldr	r3, [pc, #36]	; (7df0 <_usb_device_lpm_suspend+0x3c>)
    7dca:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7dcc:	4b07      	ldr	r3, [pc, #28]	; (7dec <_usb_device_lpm_suspend+0x38>)
    7dce:	1c18      	adds	r0, r3, #0
    7dd0:	2104      	movs	r1, #4
    7dd2:	4b07      	ldr	r3, [pc, #28]	; (7df0 <_usb_device_lpm_suspend+0x3c>)
    7dd4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7dd6:	4b05      	ldr	r3, [pc, #20]	; (7dec <_usb_device_lpm_suspend+0x38>)
    7dd8:	1c18      	adds	r0, r3, #0
    7dda:	2102      	movs	r1, #2
    7ddc:	4b05      	ldr	r3, [pc, #20]	; (7df4 <_usb_device_lpm_suspend+0x40>)
    7dde:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    7de0:	2002      	movs	r0, #2
    7de2:	4b05      	ldr	r3, [pc, #20]	; (7df8 <_usb_device_lpm_suspend+0x44>)
    7de4:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    7de6:	46bd      	mov	sp, r7
    7de8:	b004      	add	sp, #16
    7dea:	bd80      	pop	{r7, pc}
    7dec:	20003974 	.word	0x20003974
    7df0:	00008721 	.word	0x00008721
    7df4:	000086c5 	.word	0x000086c5
    7df8:	00006ba5 	.word	0x00006ba5

00007dfc <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    7dfc:	b580      	push	{r7, lr}
    7dfe:	b082      	sub	sp, #8
    7e00:	af00      	add	r7, sp, #0
    7e02:	6078      	str	r0, [r7, #4]
    7e04:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    7e06:	4b03      	ldr	r3, [pc, #12]	; (7e14 <_usb_on_sof_notify+0x18>)
    7e08:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    7e0a:	4b03      	ldr	r3, [pc, #12]	; (7e18 <_usb_on_sof_notify+0x1c>)
    7e0c:	4798      	blx	r3
#endif
}
    7e0e:	46bd      	mov	sp, r7
    7e10:	b002      	add	sp, #8
    7e12:	bd80      	pop	{r7, pc}
    7e14:	00003649 	.word	0x00003649
    7e18:	0000a105 	.word	0x0000a105

00007e1c <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    7e1c:	b580      	push	{r7, lr}
    7e1e:	b082      	sub	sp, #8
    7e20:	af00      	add	r7, sp, #0
    7e22:	6078      	str	r0, [r7, #4]
    7e24:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    7e26:	4b07      	ldr	r3, [pc, #28]	; (7e44 <_usb_on_bus_reset+0x28>)
    7e28:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	1c18      	adds	r0, r3, #0
    7e2e:	2100      	movs	r1, #0
    7e30:	4b05      	ldr	r3, [pc, #20]	; (7e48 <_usb_on_bus_reset+0x2c>)
    7e32:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	1c18      	adds	r0, r3, #0
    7e38:	4b04      	ldr	r3, [pc, #16]	; (7e4c <_usb_on_bus_reset+0x30>)
    7e3a:	4798      	blx	r3
}
    7e3c:	46bd      	mov	sp, r7
    7e3e:	b002      	add	sp, #8
    7e40:	bd80      	pop	{r7, pc}
    7e42:	46c0      	nop			; (mov r8, r8)
    7e44:	000035d5 	.word	0x000035d5
    7e48:	000069ad 	.word	0x000069ad
    7e4c:	00007cad 	.word	0x00007cad

00007e50 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    7e50:	b580      	push	{r7, lr}
    7e52:	b082      	sub	sp, #8
    7e54:	af00      	add	r7, sp, #0
    7e56:	6078      	str	r0, [r7, #4]
    7e58:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    7e5a:	4b10      	ldr	r3, [pc, #64]	; (7e9c <_usb_on_wakeup+0x4c>)
    7e5c:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7e5e:	4b10      	ldr	r3, [pc, #64]	; (7ea0 <_usb_on_wakeup+0x50>)
    7e60:	1c18      	adds	r0, r3, #0
    7e62:	2102      	movs	r1, #2
    7e64:	4b0f      	ldr	r3, [pc, #60]	; (7ea4 <_usb_on_wakeup+0x54>)
    7e66:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7e68:	4b0d      	ldr	r3, [pc, #52]	; (7ea0 <_usb_on_wakeup+0x50>)
    7e6a:	1c18      	adds	r0, r3, #0
    7e6c:	2104      	movs	r1, #4
    7e6e:	4b0e      	ldr	r3, [pc, #56]	; (7ea8 <_usb_on_wakeup+0x58>)
    7e70:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    7e72:	4a0b      	ldr	r2, [pc, #44]	; (7ea0 <_usb_on_wakeup+0x50>)
    7e74:	4b0d      	ldr	r3, [pc, #52]	; (7eac <_usb_on_wakeup+0x5c>)
    7e76:	1c10      	adds	r0, r2, #0
    7e78:	2106      	movs	r1, #6
    7e7a:	1c1a      	adds	r2, r3, #0
    7e7c:	4b0c      	ldr	r3, [pc, #48]	; (7eb0 <_usb_on_wakeup+0x60>)
    7e7e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7e80:	4b07      	ldr	r3, [pc, #28]	; (7ea0 <_usb_on_wakeup+0x50>)
    7e82:	1c18      	adds	r0, r3, #0
    7e84:	2106      	movs	r1, #6
    7e86:	4b08      	ldr	r3, [pc, #32]	; (7ea8 <_usb_on_wakeup+0x58>)
    7e88:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    7e8a:	2003      	movs	r0, #3
    7e8c:	4b09      	ldr	r3, [pc, #36]	; (7eb4 <_usb_on_wakeup+0x64>)
    7e8e:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    7e90:	4b09      	ldr	r3, [pc, #36]	; (7eb8 <_usb_on_wakeup+0x68>)
    7e92:	4798      	blx	r3
#endif
}
    7e94:	46bd      	mov	sp, r7
    7e96:	b002      	add	sp, #8
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	00006b6d 	.word	0x00006b6d
    7ea0:	20003974 	.word	0x20003974
    7ea4:	00008721 	.word	0x00008721
    7ea8:	000086c5 	.word	0x000086c5
    7eac:	00007db5 	.word	0x00007db5
    7eb0:	00008675 	.word	0x00008675
    7eb4:	00006ba5 	.word	0x00006ba5
    7eb8:	0000a0f5 	.word	0x0000a0f5

00007ebc <udd_detach>:

void udd_detach(void)
{
    7ebc:	b580      	push	{r7, lr}
    7ebe:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    7ec0:	4b04      	ldr	r3, [pc, #16]	; (7ed4 <udd_detach+0x18>)
    7ec2:	1c18      	adds	r0, r3, #0
    7ec4:	4b04      	ldr	r3, [pc, #16]	; (7ed8 <udd_detach+0x1c>)
    7ec6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    7ec8:	2001      	movs	r0, #1
    7eca:	4b04      	ldr	r3, [pc, #16]	; (7edc <udd_detach+0x20>)
    7ecc:	4798      	blx	r3
}
    7ece:	46bd      	mov	sp, r7
    7ed0:	bd80      	pop	{r7, pc}
    7ed2:	46c0      	nop			; (mov r8, r8)
    7ed4:	20003974 	.word	0x20003974
    7ed8:	0000696d 	.word	0x0000696d
    7edc:	00006ba5 	.word	0x00006ba5

00007ee0 <udd_attach>:

void udd_attach(void)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    7ee4:	2003      	movs	r0, #3
    7ee6:	4b22      	ldr	r3, [pc, #136]	; (7f70 <udd_attach+0x90>)
    7ee8:	4798      	blx	r3
	usb_device_attach(&usb_device);
    7eea:	4b22      	ldr	r3, [pc, #136]	; (7f74 <udd_attach+0x94>)
    7eec:	1c18      	adds	r0, r3, #0
    7eee:	4b22      	ldr	r3, [pc, #136]	; (7f78 <udd_attach+0x98>)
    7ef0:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    7ef2:	4a20      	ldr	r2, [pc, #128]	; (7f74 <udd_attach+0x94>)
    7ef4:	4b21      	ldr	r3, [pc, #132]	; (7f7c <udd_attach+0x9c>)
    7ef6:	1c10      	adds	r0, r2, #0
    7ef8:	2104      	movs	r1, #4
    7efa:	1c1a      	adds	r2, r3, #0
    7efc:	4b20      	ldr	r3, [pc, #128]	; (7f80 <udd_attach+0xa0>)
    7efe:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    7f00:	4a1c      	ldr	r2, [pc, #112]	; (7f74 <udd_attach+0x94>)
    7f02:	4b20      	ldr	r3, [pc, #128]	; (7f84 <udd_attach+0xa4>)
    7f04:	1c10      	adds	r0, r2, #0
    7f06:	2100      	movs	r1, #0
    7f08:	1c1a      	adds	r2, r3, #0
    7f0a:	4b1d      	ldr	r3, [pc, #116]	; (7f80 <udd_attach+0xa0>)
    7f0c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    7f0e:	4a19      	ldr	r2, [pc, #100]	; (7f74 <udd_attach+0x94>)
    7f10:	4b1d      	ldr	r3, [pc, #116]	; (7f88 <udd_attach+0xa8>)
    7f12:	1c10      	adds	r0, r2, #0
    7f14:	2101      	movs	r1, #1
    7f16:	1c1a      	adds	r2, r3, #0
    7f18:	4b19      	ldr	r3, [pc, #100]	; (7f80 <udd_attach+0xa0>)
    7f1a:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    7f1c:	4a15      	ldr	r2, [pc, #84]	; (7f74 <udd_attach+0x94>)
    7f1e:	4b1b      	ldr	r3, [pc, #108]	; (7f8c <udd_attach+0xac>)
    7f20:	1c10      	adds	r0, r2, #0
    7f22:	2102      	movs	r1, #2
    7f24:	1c1a      	adds	r2, r3, #0
    7f26:	4b16      	ldr	r3, [pc, #88]	; (7f80 <udd_attach+0xa0>)
    7f28:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    7f2a:	4b12      	ldr	r3, [pc, #72]	; (7f74 <udd_attach+0x94>)
    7f2c:	1c18      	adds	r0, r3, #0
    7f2e:	2104      	movs	r1, #4
    7f30:	4b17      	ldr	r3, [pc, #92]	; (7f90 <udd_attach+0xb0>)
    7f32:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    7f34:	4b0f      	ldr	r3, [pc, #60]	; (7f74 <udd_attach+0x94>)
    7f36:	1c18      	adds	r0, r3, #0
    7f38:	2100      	movs	r1, #0
    7f3a:	4b15      	ldr	r3, [pc, #84]	; (7f90 <udd_attach+0xb0>)
    7f3c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    7f3e:	4b0d      	ldr	r3, [pc, #52]	; (7f74 <udd_attach+0x94>)
    7f40:	1c18      	adds	r0, r3, #0
    7f42:	2101      	movs	r1, #1
    7f44:	4b12      	ldr	r3, [pc, #72]	; (7f90 <udd_attach+0xb0>)
    7f46:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    7f48:	4b0a      	ldr	r3, [pc, #40]	; (7f74 <udd_attach+0x94>)
    7f4a:	1c18      	adds	r0, r3, #0
    7f4c:	2102      	movs	r1, #2
    7f4e:	4b10      	ldr	r3, [pc, #64]	; (7f90 <udd_attach+0xb0>)
    7f50:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    7f52:	4a08      	ldr	r2, [pc, #32]	; (7f74 <udd_attach+0x94>)
    7f54:	4b0f      	ldr	r3, [pc, #60]	; (7f94 <udd_attach+0xb4>)
    7f56:	1c10      	adds	r0, r2, #0
    7f58:	2106      	movs	r1, #6
    7f5a:	1c1a      	adds	r2, r3, #0
    7f5c:	4b08      	ldr	r3, [pc, #32]	; (7f80 <udd_attach+0xa0>)
    7f5e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    7f60:	4b04      	ldr	r3, [pc, #16]	; (7f74 <udd_attach+0x94>)
    7f62:	1c18      	adds	r0, r3, #0
    7f64:	2106      	movs	r1, #6
    7f66:	4b0a      	ldr	r3, [pc, #40]	; (7f90 <udd_attach+0xb0>)
    7f68:	4798      	blx	r3
#endif
}
    7f6a:	46bd      	mov	sp, r7
    7f6c:	bd80      	pop	{r7, pc}
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	00006ba5 	.word	0x00006ba5
    7f74:	20003974 	.word	0x20003974
    7f78:	00006949 	.word	0x00006949
    7f7c:	00007d71 	.word	0x00007d71
    7f80:	00008675 	.word	0x00008675
    7f84:	00007dfd 	.word	0x00007dfd
    7f88:	00007e1d 	.word	0x00007e1d
    7f8c:	00007e51 	.word	0x00007e51
    7f90:	000086c5 	.word	0x000086c5
    7f94:	00007db5 	.word	0x00007db5

00007f98 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    7f9c:	200e      	movs	r0, #14
    7f9e:	2100      	movs	r1, #0
    7fa0:	4b09      	ldr	r3, [pc, #36]	; (7fc8 <_uhd_vbus_handler+0x30>)
    7fa2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    7fa4:	200e      	movs	r0, #14
    7fa6:	4b09      	ldr	r3, [pc, #36]	; (7fcc <_uhd_vbus_handler+0x34>)
    7fa8:	4798      	blx	r3
    7faa:	1c03      	adds	r3, r0, #0
    7fac:	2b00      	cmp	r3, #0
    7fae:	d002      	beq.n	7fb6 <_uhd_vbus_handler+0x1e>
		udd_attach();
    7fb0:	4b07      	ldr	r3, [pc, #28]	; (7fd0 <_uhd_vbus_handler+0x38>)
    7fb2:	4798      	blx	r3
    7fb4:	e001      	b.n	7fba <_uhd_vbus_handler+0x22>
	} else {
		udd_detach();
    7fb6:	4b07      	ldr	r3, [pc, #28]	; (7fd4 <_uhd_vbus_handler+0x3c>)
    7fb8:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    7fba:	200e      	movs	r0, #14
    7fbc:	2100      	movs	r1, #0
    7fbe:	4b06      	ldr	r3, [pc, #24]	; (7fd8 <_uhd_vbus_handler+0x40>)
    7fc0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    7fc2:	46bd      	mov	sp, r7
    7fc4:	bd80      	pop	{r7, pc}
    7fc6:	46c0      	nop			; (mov r8, r8)
    7fc8:	00004309 	.word	0x00004309
    7fcc:	00006a8d 	.word	0x00006a8d
    7fd0:	00007ee1 	.word	0x00007ee1
    7fd4:	00007ebd 	.word	0x00007ebd
    7fd8:	000042c1 	.word	0x000042c1

00007fdc <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	b084      	sub	sp, #16
    7fe0:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    7fe2:	1d3b      	adds	r3, r7, #4
    7fe4:	1c18      	adds	r0, r3, #0
    7fe6:	4b13      	ldr	r3, [pc, #76]	; (8034 <_usb_vbus_config+0x58>)
    7fe8:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    7fea:	1d3b      	adds	r3, r7, #4
    7fec:	220e      	movs	r2, #14
    7fee:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    7ff0:	1d3b      	adds	r3, r7, #4
    7ff2:	2200      	movs	r2, #0
    7ff4:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    7ff6:	1d3b      	adds	r3, r7, #4
    7ff8:	2200      	movs	r2, #0
    7ffa:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    7ffc:	1d3b      	adds	r3, r7, #4
    7ffe:	2203      	movs	r2, #3
    8000:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    8002:	1d3b      	adds	r3, r7, #4
    8004:	2201      	movs	r2, #1
    8006:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    8008:	200e      	movs	r0, #14
    800a:	2100      	movs	r1, #0
    800c:	4b0a      	ldr	r3, [pc, #40]	; (8038 <_usb_vbus_config+0x5c>)
    800e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    8010:	1d3b      	adds	r3, r7, #4
    8012:	200e      	movs	r0, #14
    8014:	1c19      	adds	r1, r3, #0
    8016:	4b09      	ldr	r3, [pc, #36]	; (803c <_usb_vbus_config+0x60>)
    8018:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    801a:	4b09      	ldr	r3, [pc, #36]	; (8040 <_usb_vbus_config+0x64>)
    801c:	1c18      	adds	r0, r3, #0
    801e:	210e      	movs	r1, #14
    8020:	2200      	movs	r2, #0
    8022:	4b08      	ldr	r3, [pc, #32]	; (8044 <_usb_vbus_config+0x68>)
    8024:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    8026:	200e      	movs	r0, #14
    8028:	2100      	movs	r1, #0
    802a:	4b07      	ldr	r3, [pc, #28]	; (8048 <_usb_vbus_config+0x6c>)
    802c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    802e:	46bd      	mov	sp, r7
    8030:	b004      	add	sp, #16
    8032:	bd80      	pop	{r7, pc}
    8034:	0000464d 	.word	0x0000464d
    8038:	00004309 	.word	0x00004309
    803c:	00004681 	.word	0x00004681
    8040:	00007f99 	.word	0x00007f99
    8044:	00004265 	.word	0x00004265
    8048:	000042c1 	.word	0x000042c1

0000804c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    804c:	b580      	push	{r7, lr}
    804e:	b082      	sub	sp, #8
    8050:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    8052:	4b16      	ldr	r3, [pc, #88]	; (80ac <udd_enable+0x60>)
    8054:	4798      	blx	r3
    8056:	1c03      	adds	r3, r0, #0
    8058:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    805a:	1c3b      	adds	r3, r7, #0
    805c:	1c18      	adds	r0, r3, #0
    805e:	4b14      	ldr	r3, [pc, #80]	; (80b0 <udd_enable+0x64>)
    8060:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    8062:	1c3b      	adds	r3, r7, #0
    8064:	2200      	movs	r2, #0
    8066:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    8068:	4912      	ldr	r1, [pc, #72]	; (80b4 <udd_enable+0x68>)
    806a:	4a13      	ldr	r2, [pc, #76]	; (80b8 <udd_enable+0x6c>)
    806c:	1c3b      	adds	r3, r7, #0
    806e:	1c08      	adds	r0, r1, #0
    8070:	1c11      	adds	r1, r2, #0
    8072:	1c1a      	adds	r2, r3, #0
    8074:	4b11      	ldr	r3, [pc, #68]	; (80bc <udd_enable+0x70>)
    8076:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    8078:	4b0e      	ldr	r3, [pc, #56]	; (80b4 <udd_enable+0x68>)
    807a:	1c18      	adds	r0, r3, #0
    807c:	4b10      	ldr	r3, [pc, #64]	; (80c0 <udd_enable+0x74>)
    807e:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    8080:	4b10      	ldr	r3, [pc, #64]	; (80c4 <udd_enable+0x78>)
    8082:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    8084:	2001      	movs	r0, #1
    8086:	4b10      	ldr	r3, [pc, #64]	; (80c8 <udd_enable+0x7c>)
    8088:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    808a:	4b10      	ldr	r3, [pc, #64]	; (80cc <udd_enable+0x80>)
    808c:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    808e:	200e      	movs	r0, #14
    8090:	4b0f      	ldr	r3, [pc, #60]	; (80d0 <udd_enable+0x84>)
    8092:	4798      	blx	r3
    8094:	1c03      	adds	r3, r0, #0
    8096:	2b00      	cmp	r3, #0
    8098:	d001      	beq.n	809e <udd_enable+0x52>
		/* USB Attach */
		_uhd_vbus_handler();
    809a:	4b0e      	ldr	r3, [pc, #56]	; (80d4 <udd_enable+0x88>)
    809c:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    809e:	687b      	ldr	r3, [r7, #4]
    80a0:	1c18      	adds	r0, r3, #0
    80a2:	4b0d      	ldr	r3, [pc, #52]	; (80d8 <udd_enable+0x8c>)
    80a4:	4798      	blx	r3
}
    80a6:	46bd      	mov	sp, r7
    80a8:	b002      	add	sp, #8
    80aa:	bd80      	pop	{r7, pc}
    80ac:	00006859 	.word	0x00006859
    80b0:	00009a41 	.word	0x00009a41
    80b4:	20003974 	.word	0x20003974
    80b8:	41005000 	.word	0x41005000
    80bc:	00009a69 	.word	0x00009a69
    80c0:	000099e1 	.word	0x000099e1
    80c4:	00006b6d 	.word	0x00006b6d
    80c8:	00006ba5 	.word	0x00006ba5
    80cc:	00007fdd 	.word	0x00007fdd
    80d0:	00006a8d 	.word	0x00006a8d
    80d4:	00007f99 	.word	0x00007f99
    80d8:	000068a1 	.word	0x000068a1

000080dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    80dc:	b580      	push	{r7, lr}
    80de:	b082      	sub	sp, #8
    80e0:	af00      	add	r7, sp, #0
    80e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	2200      	movs	r2, #0
    80e8:	701a      	strb	r2, [r3, #0]
}
    80ea:	46bd      	mov	sp, r7
    80ec:	b002      	add	sp, #8
    80ee:	bd80      	pop	{r7, pc}

000080f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b082      	sub	sp, #8
    80f4:	af00      	add	r7, sp, #0
    80f6:	1c02      	adds	r2, r0, #0
    80f8:	6039      	str	r1, [r7, #0]
    80fa:	1dfb      	adds	r3, r7, #7
    80fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    80fe:	1dfb      	adds	r3, r7, #7
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	2b01      	cmp	r3, #1
    8104:	d00a      	beq.n	811c <system_apb_clock_set_mask+0x2c>
    8106:	2b02      	cmp	r3, #2
    8108:	d00f      	beq.n	812a <system_apb_clock_set_mask+0x3a>
    810a:	2b00      	cmp	r3, #0
    810c:	d114      	bne.n	8138 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    810e:	4b0e      	ldr	r3, [pc, #56]	; (8148 <system_apb_clock_set_mask+0x58>)
    8110:	4a0d      	ldr	r2, [pc, #52]	; (8148 <system_apb_clock_set_mask+0x58>)
    8112:	6991      	ldr	r1, [r2, #24]
    8114:	683a      	ldr	r2, [r7, #0]
    8116:	430a      	orrs	r2, r1
    8118:	619a      	str	r2, [r3, #24]
			break;
    811a:	e00f      	b.n	813c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    811c:	4b0a      	ldr	r3, [pc, #40]	; (8148 <system_apb_clock_set_mask+0x58>)
    811e:	4a0a      	ldr	r2, [pc, #40]	; (8148 <system_apb_clock_set_mask+0x58>)
    8120:	69d1      	ldr	r1, [r2, #28]
    8122:	683a      	ldr	r2, [r7, #0]
    8124:	430a      	orrs	r2, r1
    8126:	61da      	str	r2, [r3, #28]
			break;
    8128:	e008      	b.n	813c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    812a:	4b07      	ldr	r3, [pc, #28]	; (8148 <system_apb_clock_set_mask+0x58>)
    812c:	4a06      	ldr	r2, [pc, #24]	; (8148 <system_apb_clock_set_mask+0x58>)
    812e:	6a11      	ldr	r1, [r2, #32]
    8130:	683a      	ldr	r2, [r7, #0]
    8132:	430a      	orrs	r2, r1
    8134:	621a      	str	r2, [r3, #32]
			break;
    8136:	e001      	b.n	813c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8138:	2317      	movs	r3, #23
    813a:	e000      	b.n	813e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    813c:	2300      	movs	r3, #0
}
    813e:	1c18      	adds	r0, r3, #0
    8140:	46bd      	mov	sp, r7
    8142:	b002      	add	sp, #8
    8144:	bd80      	pop	{r7, pc}
    8146:	46c0      	nop			; (mov r8, r8)
    8148:	40000400 	.word	0x40000400

0000814c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    814c:	b580      	push	{r7, lr}
    814e:	b082      	sub	sp, #8
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8154:	687b      	ldr	r3, [r7, #4]
    8156:	2280      	movs	r2, #128	; 0x80
    8158:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	2200      	movs	r2, #0
    815e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	2201      	movs	r2, #1
    8164:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	2200      	movs	r2, #0
    816a:	70da      	strb	r2, [r3, #3]
}
    816c:	46bd      	mov	sp, r7
    816e:	b002      	add	sp, #8
    8170:	bd80      	pop	{r7, pc}
    8172:	46c0      	nop			; (mov r8, r8)

00008174 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
    817a:	1c02      	adds	r2, r0, #0
    817c:	1dfb      	adds	r3, r7, #7
    817e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8180:	4b06      	ldr	r3, [pc, #24]	; (819c <system_interrupt_enable+0x28>)
    8182:	1dfa      	adds	r2, r7, #7
    8184:	7812      	ldrb	r2, [r2, #0]
    8186:	1c11      	adds	r1, r2, #0
    8188:	221f      	movs	r2, #31
    818a:	400a      	ands	r2, r1
    818c:	2101      	movs	r1, #1
    818e:	1c08      	adds	r0, r1, #0
    8190:	4090      	lsls	r0, r2
    8192:	1c02      	adds	r2, r0, #0
    8194:	601a      	str	r2, [r3, #0]
}
    8196:	46bd      	mov	sp, r7
    8198:	b002      	add	sp, #8
    819a:	bd80      	pop	{r7, pc}
    819c:	e000e100 	.word	0xe000e100

000081a0 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    81a0:	b580      	push	{r7, lr}
    81a2:	b082      	sub	sp, #8
    81a4:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    81a6:	4bbe      	ldr	r3, [pc, #760]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    81a8:	681b      	ldr	r3, [r3, #0]
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	8c1b      	ldrh	r3, [r3, #32]
    81ae:	b29b      	uxth	r3, r3
    81b0:	1c1a      	adds	r2, r3, #0
    81b2:	4bbc      	ldr	r3, [pc, #752]	; (84a4 <_usb_host_interrupt_handler+0x304>)
    81b4:	1c10      	adds	r0, r2, #0
    81b6:	4798      	blx	r3
    81b8:	1c03      	adds	r3, r0, #0
    81ba:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	2b1f      	cmp	r3, #31
    81c0:	d900      	bls.n	81c4 <_usb_host_interrupt_handler+0x24>
    81c2:	e179      	b.n	84b8 <_usb_host_interrupt_handler+0x318>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    81c4:	4bb6      	ldr	r3, [pc, #728]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    81c6:	681b      	ldr	r3, [r3, #0]
    81c8:	681a      	ldr	r2, [r3, #0]
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	3308      	adds	r3, #8
    81ce:	015b      	lsls	r3, r3, #5
    81d0:	18d3      	adds	r3, r2, r3
    81d2:	79db      	ldrb	r3, [r3, #7]
    81d4:	b2db      	uxtb	r3, r3
    81d6:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    81d8:	683a      	ldr	r2, [r7, #0]
    81da:	2303      	movs	r3, #3
    81dc:	4013      	ands	r3, r2
    81de:	d100      	bne.n	81e2 <_usb_host_interrupt_handler+0x42>
    81e0:	e08a      	b.n	82f8 <_usb_host_interrupt_handler+0x158>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	2201      	movs	r2, #1
    81e6:	1c11      	adds	r1, r2, #0
    81e8:	4099      	lsls	r1, r3
    81ea:	1c0b      	adds	r3, r1, #0
    81ec:	43db      	mvns	r3, r3
    81ee:	1c1a      	adds	r2, r3, #0
    81f0:	4bad      	ldr	r3, [pc, #692]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    81f2:	681b      	ldr	r3, [r3, #0]
    81f4:	401a      	ands	r2, r3
    81f6:	4bac      	ldr	r3, [pc, #688]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    81f8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    81fa:	4ba9      	ldr	r3, [pc, #676]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    81fc:	681b      	ldr	r3, [r3, #0]
    81fe:	681a      	ldr	r2, [r3, #0]
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	3308      	adds	r3, #8
    8204:	015b      	lsls	r3, r3, #5
    8206:	18d3      	adds	r3, r2, r3
    8208:	2203      	movs	r2, #3
    820a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    820c:	4ba4      	ldr	r3, [pc, #656]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    820e:	6819      	ldr	r1, [r3, #0]
    8210:	23a8      	movs	r3, #168	; 0xa8
    8212:	687a      	ldr	r2, [r7, #4]
    8214:	188a      	adds	r2, r1, r2
    8216:	18d3      	adds	r3, r2, r3
    8218:	799b      	ldrb	r3, [r3, #6]
    821a:	1c1a      	adds	r2, r3, #0
    821c:	2301      	movs	r3, #1
    821e:	4013      	ands	r3, r2
    8220:	d06a      	beq.n	82f8 <_usb_host_interrupt_handler+0x158>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	b2da      	uxtb	r2, r3
    8226:	4ba1      	ldr	r3, [pc, #644]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8228:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    822a:	4b9d      	ldr	r3, [pc, #628]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    822c:	681b      	ldr	r3, [r3, #0]
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	687a      	ldr	r2, [r7, #4]
    8232:	3208      	adds	r2, #8
    8234:	0152      	lsls	r2, r2, #5
    8236:	5cd2      	ldrb	r2, [r2, r3]
    8238:	2303      	movs	r3, #3
    823a:	4013      	ands	r3, r2
    823c:	b2db      	uxtb	r3, r3
    823e:	2b01      	cmp	r3, #1
    8240:	d11f      	bne.n	8282 <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    8242:	4a9b      	ldr	r2, [pc, #620]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    8244:	687b      	ldr	r3, [r7, #4]
    8246:	015b      	lsls	r3, r3, #5
    8248:	18d3      	adds	r3, r2, r3
    824a:	685b      	ldr	r3, [r3, #4]
    824c:	049b      	lsls	r3, r3, #18
    824e:	0c9b      	lsrs	r3, r3, #18
    8250:	b29b      	uxth	r3, r3
    8252:	1c1a      	adds	r2, r3, #0
    8254:	4b95      	ldr	r3, [pc, #596]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8256:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8258:	4a95      	ldr	r2, [pc, #596]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	015b      	lsls	r3, r3, #5
    825e:	18d3      	adds	r3, r2, r3
    8260:	685b      	ldr	r3, [r3, #4]
    8262:	0b9b      	lsrs	r3, r3, #14
    8264:	049b      	lsls	r3, r3, #18
    8266:	0c9b      	lsrs	r3, r3, #18
    8268:	b29b      	uxth	r3, r3
    826a:	1c1a      	adds	r2, r3, #0
    826c:	4b8f      	ldr	r3, [pc, #572]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    826e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    8270:	4a8f      	ldr	r2, [pc, #572]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	015b      	lsls	r3, r3, #5
    8276:	18d3      	adds	r3, r2, r3
    8278:	685a      	ldr	r2, [r3, #4]
    827a:	0b92      	lsrs	r2, r2, #14
    827c:	0392      	lsls	r2, r2, #14
    827e:	605a      	str	r2, [r3, #4]
    8280:	e02d      	b.n	82de <_usb_host_interrupt_handler+0x13e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8282:	4a8b      	ldr	r2, [pc, #556]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	015b      	lsls	r3, r3, #5
    8288:	18d3      	adds	r3, r2, r3
    828a:	685b      	ldr	r3, [r3, #4]
    828c:	0b9b      	lsrs	r3, r3, #14
    828e:	049b      	lsls	r3, r3, #18
    8290:	0c9b      	lsrs	r3, r3, #18
    8292:	b29b      	uxth	r3, r3
    8294:	1c1a      	adds	r2, r3, #0
    8296:	4b85      	ldr	r3, [pc, #532]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8298:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    829a:	4a85      	ldr	r2, [pc, #532]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	015b      	lsls	r3, r3, #5
    82a0:	18d3      	adds	r3, r2, r3
    82a2:	685b      	ldr	r3, [r3, #4]
    82a4:	049b      	lsls	r3, r3, #18
    82a6:	0c9b      	lsrs	r3, r3, #18
    82a8:	b29b      	uxth	r3, r3
    82aa:	1c1a      	adds	r2, r3, #0
    82ac:	4b7f      	ldr	r3, [pc, #508]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    82ae:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    82b0:	4a7f      	ldr	r2, [pc, #508]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	015b      	lsls	r3, r3, #5
    82b6:	18d3      	adds	r3, r2, r3
    82b8:	6859      	ldr	r1, [r3, #4]
    82ba:	4a7e      	ldr	r2, [pc, #504]	; (84b4 <_usb_host_interrupt_handler+0x314>)
    82bc:	400a      	ands	r2, r1
    82be:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    82c0:	4b7a      	ldr	r3, [pc, #488]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    82c2:	885b      	ldrh	r3, [r3, #2]
    82c4:	2b00      	cmp	r3, #0
    82c6:	d10a      	bne.n	82de <_usb_host_interrupt_handler+0x13e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    82c8:	4a79      	ldr	r2, [pc, #484]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	015b      	lsls	r3, r3, #5
    82ce:	18d3      	adds	r3, r2, r3
    82d0:	685b      	ldr	r3, [r3, #4]
    82d2:	049b      	lsls	r3, r3, #18
    82d4:	0c9b      	lsrs	r3, r3, #18
    82d6:	b29b      	uxth	r3, r3
    82d8:	1c1a      	adds	r2, r3, #0
    82da:	4b74      	ldr	r3, [pc, #464]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    82dc:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    82de:	4b70      	ldr	r3, [pc, #448]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    82e0:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    82e2:	687b      	ldr	r3, [r7, #4]
    82e4:	3302      	adds	r3, #2
    82e6:	011b      	lsls	r3, r3, #4
    82e8:	18d3      	adds	r3, r2, r3
    82ea:	685a      	ldr	r2, [r3, #4]
    82ec:	4b6c      	ldr	r3, [pc, #432]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    82ee:	6819      	ldr	r1, [r3, #0]
    82f0:	4b6e      	ldr	r3, [pc, #440]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    82f2:	1c08      	adds	r0, r1, #0
    82f4:	1c19      	adds	r1, r3, #0
    82f6:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    82f8:	683a      	ldr	r2, [r7, #0]
    82fa:	2304      	movs	r3, #4
    82fc:	4013      	ands	r3, r2
    82fe:	d014      	beq.n	832a <_usb_host_interrupt_handler+0x18a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	2201      	movs	r2, #1
    8304:	1c11      	adds	r1, r2, #0
    8306:	4099      	lsls	r1, r3
    8308:	1c0b      	adds	r3, r1, #0
    830a:	43db      	mvns	r3, r3
    830c:	1c1a      	adds	r2, r3, #0
    830e:	4b66      	ldr	r3, [pc, #408]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	401a      	ands	r2, r3
    8314:	4b64      	ldr	r3, [pc, #400]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    8316:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8318:	4b61      	ldr	r3, [pc, #388]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	681a      	ldr	r2, [r3, #0]
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	3308      	adds	r3, #8
    8322:	015b      	lsls	r3, r3, #5
    8324:	18d3      	adds	r3, r2, r3
    8326:	2204      	movs	r2, #4
    8328:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    832a:	683a      	ldr	r2, [r7, #0]
    832c:	2308      	movs	r3, #8
    832e:	4013      	ands	r3, r2
    8330:	d03d      	beq.n	83ae <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	2201      	movs	r2, #1
    8336:	1c11      	adds	r1, r2, #0
    8338:	4099      	lsls	r1, r3
    833a:	1c0b      	adds	r3, r1, #0
    833c:	43db      	mvns	r3, r3
    833e:	1c1a      	adds	r2, r3, #0
    8340:	4b59      	ldr	r3, [pc, #356]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    8342:	681b      	ldr	r3, [r3, #0]
    8344:	401a      	ands	r2, r3
    8346:	4b58      	ldr	r3, [pc, #352]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    8348:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    834a:	4b55      	ldr	r3, [pc, #340]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	681a      	ldr	r2, [r3, #0]
    8350:	687b      	ldr	r3, [r7, #4]
    8352:	3308      	adds	r3, #8
    8354:	015b      	lsls	r3, r3, #5
    8356:	18d3      	adds	r3, r2, r3
    8358:	2208      	movs	r2, #8
    835a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    835c:	4b50      	ldr	r3, [pc, #320]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    835e:	6819      	ldr	r1, [r3, #0]
    8360:	23a8      	movs	r3, #168	; 0xa8
    8362:	687a      	ldr	r2, [r7, #4]
    8364:	188a      	adds	r2, r1, r2
    8366:	18d3      	adds	r3, r2, r3
    8368:	799b      	ldrb	r3, [r3, #6]
    836a:	1c1a      	adds	r2, r3, #0
    836c:	2302      	movs	r3, #2
    836e:	4013      	ands	r3, r2
    8370:	d01d      	beq.n	83ae <_usb_host_interrupt_handler+0x20e>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    8372:	687b      	ldr	r3, [r7, #4]
    8374:	b2da      	uxtb	r2, r3
    8376:	4b4d      	ldr	r3, [pc, #308]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8378:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    837a:	4a4d      	ldr	r2, [pc, #308]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    837c:	687b      	ldr	r3, [r7, #4]
    837e:	015b      	lsls	r3, r3, #5
    8380:	18d3      	adds	r3, r2, r3
    8382:	3308      	adds	r3, #8
    8384:	88db      	ldrh	r3, [r3, #6]
    8386:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    8388:	b2da      	uxtb	r2, r3
    838a:	231f      	movs	r3, #31
    838c:	4013      	ands	r3, r2
    838e:	b2da      	uxtb	r2, r3
    8390:	4b46      	ldr	r3, [pc, #280]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8392:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    8394:	4b42      	ldr	r3, [pc, #264]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8396:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	011b      	lsls	r3, r3, #4
    839c:	18d3      	adds	r3, r2, r3
    839e:	3324      	adds	r3, #36	; 0x24
    83a0:	685a      	ldr	r2, [r3, #4]
    83a2:	4b3f      	ldr	r3, [pc, #252]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    83a4:	6819      	ldr	r1, [r3, #0]
    83a6:	4b41      	ldr	r3, [pc, #260]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    83a8:	1c08      	adds	r0, r1, #0
    83aa:	1c19      	adds	r1, r3, #0
    83ac:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    83ae:	683a      	ldr	r2, [r7, #0]
    83b0:	2310      	movs	r3, #16
    83b2:	4013      	ands	r3, r2
    83b4:	d03b      	beq.n	842e <_usb_host_interrupt_handler+0x28e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    83b6:	687b      	ldr	r3, [r7, #4]
    83b8:	2201      	movs	r2, #1
    83ba:	1c11      	adds	r1, r2, #0
    83bc:	4099      	lsls	r1, r3
    83be:	1c0b      	adds	r3, r1, #0
    83c0:	43db      	mvns	r3, r3
    83c2:	1c1a      	adds	r2, r3, #0
    83c4:	4b38      	ldr	r3, [pc, #224]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	401a      	ands	r2, r3
    83ca:	4b37      	ldr	r3, [pc, #220]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    83cc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    83ce:	4b34      	ldr	r3, [pc, #208]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    83d0:	681b      	ldr	r3, [r3, #0]
    83d2:	681a      	ldr	r2, [r3, #0]
    83d4:	687b      	ldr	r3, [r7, #4]
    83d6:	3308      	adds	r3, #8
    83d8:	015b      	lsls	r3, r3, #5
    83da:	18d3      	adds	r3, r2, r3
    83dc:	2210      	movs	r2, #16
    83de:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    83e0:	4b2f      	ldr	r3, [pc, #188]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    83e2:	6819      	ldr	r1, [r3, #0]
    83e4:	23a8      	movs	r3, #168	; 0xa8
    83e6:	687a      	ldr	r2, [r7, #4]
    83e8:	188a      	adds	r2, r1, r2
    83ea:	18d3      	adds	r3, r2, r3
    83ec:	799b      	ldrb	r3, [r3, #6]
    83ee:	1c1a      	adds	r2, r3, #0
    83f0:	2304      	movs	r3, #4
    83f2:	4013      	ands	r3, r2
    83f4:	d01b      	beq.n	842e <_usb_host_interrupt_handler+0x28e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    83f6:	687b      	ldr	r3, [r7, #4]
    83f8:	b2da      	uxtb	r2, r3
    83fa:	4b2c      	ldr	r3, [pc, #176]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    83fc:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    83fe:	4a2c      	ldr	r2, [pc, #176]	; (84b0 <_usb_host_interrupt_handler+0x310>)
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	015b      	lsls	r3, r3, #5
    8404:	18d3      	adds	r3, r2, r3
    8406:	685b      	ldr	r3, [r3, #4]
    8408:	0b9b      	lsrs	r3, r3, #14
    840a:	049b      	lsls	r3, r3, #18
    840c:	0c9b      	lsrs	r3, r3, #18
    840e:	b29b      	uxth	r3, r3
    8410:	1c1a      	adds	r2, r3, #0
    8412:	4b26      	ldr	r3, [pc, #152]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8414:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    8416:	4b22      	ldr	r3, [pc, #136]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8418:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    841a:	687b      	ldr	r3, [r7, #4]
    841c:	011b      	lsls	r3, r3, #4
    841e:	18d3      	adds	r3, r2, r3
    8420:	3328      	adds	r3, #40	; 0x28
    8422:	685a      	ldr	r2, [r3, #4]
    8424:	4b1e      	ldr	r3, [pc, #120]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8426:	681b      	ldr	r3, [r3, #0]
    8428:	1c18      	adds	r0, r3, #0
    842a:	2100      	movs	r1, #0
    842c:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    842e:	683a      	ldr	r2, [r7, #0]
    8430:	2320      	movs	r3, #32
    8432:	4013      	ands	r3, r2
    8434:	d100      	bne.n	8438 <_usb_host_interrupt_handler+0x298>
    8436:	e115      	b.n	8664 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	2201      	movs	r2, #1
    843c:	1c11      	adds	r1, r2, #0
    843e:	4099      	lsls	r1, r3
    8440:	1c0b      	adds	r3, r1, #0
    8442:	43db      	mvns	r3, r3
    8444:	1c1a      	adds	r2, r3, #0
    8446:	4b18      	ldr	r3, [pc, #96]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    8448:	681b      	ldr	r3, [r3, #0]
    844a:	401a      	ands	r2, r3
    844c:	4b16      	ldr	r3, [pc, #88]	; (84a8 <_usb_host_interrupt_handler+0x308>)
    844e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8450:	4b13      	ldr	r3, [pc, #76]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8452:	681b      	ldr	r3, [r3, #0]
    8454:	681a      	ldr	r2, [r3, #0]
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	3308      	adds	r3, #8
    845a:	015b      	lsls	r3, r3, #5
    845c:	18d3      	adds	r3, r2, r3
    845e:	2220      	movs	r2, #32
    8460:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8462:	4b0f      	ldr	r3, [pc, #60]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8464:	6819      	ldr	r1, [r3, #0]
    8466:	23a8      	movs	r3, #168	; 0xa8
    8468:	687a      	ldr	r2, [r7, #4]
    846a:	188a      	adds	r2, r1, r2
    846c:	18d3      	adds	r3, r2, r3
    846e:	799b      	ldrb	r3, [r3, #6]
    8470:	1c1a      	adds	r2, r3, #0
    8472:	2308      	movs	r3, #8
    8474:	4013      	ands	r3, r2
    8476:	d100      	bne.n	847a <_usb_host_interrupt_handler+0x2da>
    8478:	e0f4      	b.n	8664 <_usb_host_interrupt_handler+0x4c4>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    847a:	687b      	ldr	r3, [r7, #4]
    847c:	b2da      	uxtb	r2, r3
    847e:	4b0b      	ldr	r3, [pc, #44]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8480:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    8482:	4b07      	ldr	r3, [pc, #28]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8484:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	011b      	lsls	r3, r3, #4
    848a:	18d3      	adds	r3, r2, r3
    848c:	332c      	adds	r3, #44	; 0x2c
    848e:	685a      	ldr	r2, [r3, #4]
    8490:	4b03      	ldr	r3, [pc, #12]	; (84a0 <_usb_host_interrupt_handler+0x300>)
    8492:	6819      	ldr	r1, [r3, #0]
    8494:	4b05      	ldr	r3, [pc, #20]	; (84ac <_usb_host_interrupt_handler+0x30c>)
    8496:	1c08      	adds	r0, r1, #0
    8498:	1c19      	adds	r1, r3, #0
    849a:	4790      	blx	r2
    849c:	e0e2      	b.n	8664 <_usb_host_interrupt_handler+0x4c4>
    849e:	46c0      	nop			; (mov r8, r8)
    84a0:	200010b0 	.word	0x200010b0
    84a4:	0000aa59 	.word	0x0000aa59
    84a8:	200010c8 	.word	0x200010c8
    84ac:	200010b4 	.word	0x200010b4
    84b0:	20003b34 	.word	0x20003b34
    84b4:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    84b8:	4b6c      	ldr	r3, [pc, #432]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    84ba:	681b      	ldr	r3, [r3, #0]
    84bc:	681b      	ldr	r3, [r3, #0]
    84be:	8b9b      	ldrh	r3, [r3, #28]
    84c0:	b29b      	uxth	r3, r3
    84c2:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    84c4:	683a      	ldr	r2, [r7, #0]
    84c6:	2304      	movs	r3, #4
    84c8:	4013      	ands	r3, r2
    84ca:	d013      	beq.n	84f4 <_usb_host_interrupt_handler+0x354>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    84cc:	4b67      	ldr	r3, [pc, #412]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    84ce:	681b      	ldr	r3, [r3, #0]
    84d0:	681b      	ldr	r3, [r3, #0]
    84d2:	2204      	movs	r2, #4
    84d4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    84d6:	4b65      	ldr	r3, [pc, #404]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    84d8:	681a      	ldr	r2, [r3, #0]
    84da:	23a5      	movs	r3, #165	; 0xa5
    84dc:	5cd3      	ldrb	r3, [r2, r3]
    84de:	1c1a      	adds	r2, r3, #0
    84e0:	2301      	movs	r3, #1
    84e2:	4013      	ands	r3, r2
    84e4:	d006      	beq.n	84f4 <_usb_host_interrupt_handler+0x354>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    84e6:	4b61      	ldr	r3, [pc, #388]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    84e8:	681b      	ldr	r3, [r3, #0]
    84ea:	685a      	ldr	r2, [r3, #4]
    84ec:	4b5f      	ldr	r3, [pc, #380]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    84ee:	681b      	ldr	r3, [r3, #0]
    84f0:	1c18      	adds	r0, r3, #0
    84f2:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    84f4:	683a      	ldr	r2, [r7, #0]
    84f6:	2308      	movs	r3, #8
    84f8:	4013      	ands	r3, r2
    84fa:	d016      	beq.n	852a <_usb_host_interrupt_handler+0x38a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    84fc:	4b5c      	ldr	r3, [pc, #368]	; (8670 <_usb_host_interrupt_handler+0x4d0>)
    84fe:	2200      	movs	r2, #0
    8500:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    8502:	4b5a      	ldr	r3, [pc, #360]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8504:	681b      	ldr	r3, [r3, #0]
    8506:	681b      	ldr	r3, [r3, #0]
    8508:	2208      	movs	r2, #8
    850a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    850c:	4b57      	ldr	r3, [pc, #348]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    850e:	681a      	ldr	r2, [r3, #0]
    8510:	23a5      	movs	r3, #165	; 0xa5
    8512:	5cd3      	ldrb	r3, [r2, r3]
    8514:	1c1a      	adds	r2, r3, #0
    8516:	2302      	movs	r3, #2
    8518:	4013      	ands	r3, r2
    851a:	d006      	beq.n	852a <_usb_host_interrupt_handler+0x38a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    851c:	4b53      	ldr	r3, [pc, #332]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    851e:	681b      	ldr	r3, [r3, #0]
    8520:	689a      	ldr	r2, [r3, #8]
    8522:	4b52      	ldr	r3, [pc, #328]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8524:	681b      	ldr	r3, [r3, #0]
    8526:	1c18      	adds	r0, r3, #0
    8528:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    852a:	683a      	ldr	r2, [r7, #0]
    852c:	2340      	movs	r3, #64	; 0x40
    852e:	4013      	ands	r3, r2
    8530:	d013      	beq.n	855a <_usb_host_interrupt_handler+0x3ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    8532:	4b4e      	ldr	r3, [pc, #312]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8534:	681b      	ldr	r3, [r3, #0]
    8536:	681b      	ldr	r3, [r3, #0]
    8538:	2240      	movs	r2, #64	; 0x40
    853a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    853c:	4b4b      	ldr	r3, [pc, #300]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    853e:	681a      	ldr	r2, [r3, #0]
    8540:	23a5      	movs	r3, #165	; 0xa5
    8542:	5cd3      	ldrb	r3, [r2, r3]
    8544:	1c1a      	adds	r2, r3, #0
    8546:	2310      	movs	r3, #16
    8548:	4013      	ands	r3, r2
    854a:	d006      	beq.n	855a <_usb_host_interrupt_handler+0x3ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    854c:	4b47      	ldr	r3, [pc, #284]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    854e:	681b      	ldr	r3, [r3, #0]
    8550:	695a      	ldr	r2, [r3, #20]
    8552:	4b46      	ldr	r3, [pc, #280]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	1c18      	adds	r0, r3, #0
    8558:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    855a:	683a      	ldr	r2, [r7, #0]
    855c:	2320      	movs	r3, #32
    855e:	4013      	ands	r3, r2
    8560:	d013      	beq.n	858a <_usb_host_interrupt_handler+0x3ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    8562:	4b42      	ldr	r3, [pc, #264]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	681b      	ldr	r3, [r3, #0]
    8568:	2220      	movs	r2, #32
    856a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    856c:	4b3f      	ldr	r3, [pc, #252]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    856e:	681a      	ldr	r2, [r3, #0]
    8570:	23a5      	movs	r3, #165	; 0xa5
    8572:	5cd3      	ldrb	r3, [r2, r3]
    8574:	1c1a      	adds	r2, r3, #0
    8576:	2308      	movs	r3, #8
    8578:	4013      	ands	r3, r2
    857a:	d006      	beq.n	858a <_usb_host_interrupt_handler+0x3ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    857c:	4b3b      	ldr	r3, [pc, #236]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	691a      	ldr	r2, [r3, #16]
    8582:	4b3a      	ldr	r3, [pc, #232]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8584:	681b      	ldr	r3, [r3, #0]
    8586:	1c18      	adds	r0, r3, #0
    8588:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    858a:	683a      	ldr	r2, [r7, #0]
    858c:	2310      	movs	r3, #16
    858e:	4013      	ands	r3, r2
    8590:	d013      	beq.n	85ba <_usb_host_interrupt_handler+0x41a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    8592:	4b36      	ldr	r3, [pc, #216]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8594:	681b      	ldr	r3, [r3, #0]
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	2210      	movs	r2, #16
    859a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    859c:	4b33      	ldr	r3, [pc, #204]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    859e:	681a      	ldr	r2, [r3, #0]
    85a0:	23a5      	movs	r3, #165	; 0xa5
    85a2:	5cd3      	ldrb	r3, [r2, r3]
    85a4:	1c1a      	adds	r2, r3, #0
    85a6:	2304      	movs	r3, #4
    85a8:	4013      	ands	r3, r2
    85aa:	d006      	beq.n	85ba <_usb_host_interrupt_handler+0x41a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    85ac:	4b2f      	ldr	r3, [pc, #188]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85ae:	681b      	ldr	r3, [r3, #0]
    85b0:	68da      	ldr	r2, [r3, #12]
    85b2:	4b2e      	ldr	r3, [pc, #184]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	1c18      	adds	r0, r3, #0
    85b8:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    85ba:	683a      	ldr	r2, [r7, #0]
    85bc:	2380      	movs	r3, #128	; 0x80
    85be:	4013      	ands	r3, r2
    85c0:	d016      	beq.n	85f0 <_usb_host_interrupt_handler+0x450>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    85c2:	4b2b      	ldr	r3, [pc, #172]	; (8670 <_usb_host_interrupt_handler+0x4d0>)
    85c4:	2200      	movs	r2, #0
    85c6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    85c8:	4b28      	ldr	r3, [pc, #160]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85ca:	681b      	ldr	r3, [r3, #0]
    85cc:	681b      	ldr	r3, [r3, #0]
    85ce:	2280      	movs	r2, #128	; 0x80
    85d0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    85d2:	4b26      	ldr	r3, [pc, #152]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85d4:	681a      	ldr	r2, [r3, #0]
    85d6:	23a5      	movs	r3, #165	; 0xa5
    85d8:	5cd3      	ldrb	r3, [r2, r3]
    85da:	1c1a      	adds	r2, r3, #0
    85dc:	2320      	movs	r3, #32
    85de:	4013      	ands	r3, r2
    85e0:	d006      	beq.n	85f0 <_usb_host_interrupt_handler+0x450>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    85e2:	4b22      	ldr	r3, [pc, #136]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85e4:	681b      	ldr	r3, [r3, #0]
    85e6:	699a      	ldr	r2, [r3, #24]
    85e8:	4b20      	ldr	r3, [pc, #128]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    85ea:	681b      	ldr	r3, [r3, #0]
    85ec:	1c18      	adds	r0, r3, #0
    85ee:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    85f0:	683a      	ldr	r2, [r7, #0]
    85f2:	2380      	movs	r3, #128	; 0x80
    85f4:	005b      	lsls	r3, r3, #1
    85f6:	4013      	ands	r3, r2
    85f8:	d017      	beq.n	862a <_usb_host_interrupt_handler+0x48a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    85fa:	4b1d      	ldr	r3, [pc, #116]	; (8670 <_usb_host_interrupt_handler+0x4d0>)
    85fc:	2200      	movs	r2, #0
    85fe:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    8600:	4b1a      	ldr	r3, [pc, #104]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8602:	681b      	ldr	r3, [r3, #0]
    8604:	681b      	ldr	r3, [r3, #0]
    8606:	2280      	movs	r2, #128	; 0x80
    8608:	0052      	lsls	r2, r2, #1
    860a:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    860c:	4b17      	ldr	r3, [pc, #92]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    860e:	681a      	ldr	r2, [r3, #0]
    8610:	23a5      	movs	r3, #165	; 0xa5
    8612:	5cd3      	ldrb	r3, [r2, r3]
    8614:	1c1a      	adds	r2, r3, #0
    8616:	2340      	movs	r3, #64	; 0x40
    8618:	4013      	ands	r3, r2
    861a:	d006      	beq.n	862a <_usb_host_interrupt_handler+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    861c:	4b13      	ldr	r3, [pc, #76]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    861e:	681b      	ldr	r3, [r3, #0]
    8620:	69da      	ldr	r2, [r3, #28]
    8622:	4b12      	ldr	r3, [pc, #72]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8624:	681b      	ldr	r3, [r3, #0]
    8626:	1c18      	adds	r0, r3, #0
    8628:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    862a:	683a      	ldr	r2, [r7, #0]
    862c:	2380      	movs	r3, #128	; 0x80
    862e:	009b      	lsls	r3, r3, #2
    8630:	4013      	ands	r3, r2
    8632:	d017      	beq.n	8664 <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8634:	4b0e      	ldr	r3, [pc, #56]	; (8670 <_usb_host_interrupt_handler+0x4d0>)
    8636:	2200      	movs	r2, #0
    8638:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    863a:	4b0c      	ldr	r3, [pc, #48]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    863c:	681b      	ldr	r3, [r3, #0]
    863e:	681b      	ldr	r3, [r3, #0]
    8640:	2280      	movs	r2, #128	; 0x80
    8642:	0092      	lsls	r2, r2, #2
    8644:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    8646:	4b09      	ldr	r3, [pc, #36]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8648:	681a      	ldr	r2, [r3, #0]
    864a:	23a5      	movs	r3, #165	; 0xa5
    864c:	5cd3      	ldrb	r3, [r2, r3]
    864e:	b2db      	uxtb	r3, r3
    8650:	b25b      	sxtb	r3, r3
    8652:	2b00      	cmp	r3, #0
    8654:	da06      	bge.n	8664 <_usb_host_interrupt_handler+0x4c4>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    8656:	4b05      	ldr	r3, [pc, #20]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    8658:	681b      	ldr	r3, [r3, #0]
    865a:	6a1a      	ldr	r2, [r3, #32]
    865c:	4b03      	ldr	r3, [pc, #12]	; (866c <_usb_host_interrupt_handler+0x4cc>)
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	1c18      	adds	r0, r3, #0
    8662:	4790      	blx	r2
			}
		}

	}
}
    8664:	46bd      	mov	sp, r7
    8666:	b002      	add	sp, #8
    8668:	bd80      	pop	{r7, pc}
    866a:	46c0      	nop			; (mov r8, r8)
    866c:	200010b0 	.word	0x200010b0
    8670:	200010c8 	.word	0x200010c8

00008674 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    8674:	b580      	push	{r7, lr}
    8676:	b084      	sub	sp, #16
    8678:	af00      	add	r7, sp, #0
    867a:	60f8      	str	r0, [r7, #12]
    867c:	607a      	str	r2, [r7, #4]
    867e:	1c3b      	adds	r3, r7, #0
    8680:	330b      	adds	r3, #11
    8682:	1c0a      	adds	r2, r1, #0
    8684:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    8686:	1c3b      	adds	r3, r7, #0
    8688:	330b      	adds	r3, #11
    868a:	781a      	ldrb	r2, [r3, #0]
    868c:	68fb      	ldr	r3, [r7, #12]
    868e:	322e      	adds	r2, #46	; 0x2e
    8690:	0092      	lsls	r2, r2, #2
    8692:	6879      	ldr	r1, [r7, #4]
    8694:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    8696:	68fa      	ldr	r2, [r7, #12]
    8698:	23aa      	movs	r3, #170	; 0xaa
    869a:	005b      	lsls	r3, r3, #1
    869c:	5ad2      	ldrh	r2, [r2, r3]
    869e:	1c3b      	adds	r3, r7, #0
    86a0:	330b      	adds	r3, #11
    86a2:	7819      	ldrb	r1, [r3, #0]
    86a4:	4b06      	ldr	r3, [pc, #24]	; (86c0 <usb_device_register_callback+0x4c>)
    86a6:	0049      	lsls	r1, r1, #1
    86a8:	5acb      	ldrh	r3, [r1, r3]
    86aa:	4313      	orrs	r3, r2
    86ac:	b299      	uxth	r1, r3
    86ae:	68fa      	ldr	r2, [r7, #12]
    86b0:	23aa      	movs	r3, #170	; 0xaa
    86b2:	005b      	lsls	r3, r3, #1
    86b4:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    86b6:	2300      	movs	r3, #0
}
    86b8:	1c18      	adds	r0, r3, #0
    86ba:	46bd      	mov	sp, r7
    86bc:	b004      	add	sp, #16
    86be:	bd80      	pop	{r7, pc}
    86c0:	0000ac14 	.word	0x0000ac14

000086c4 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b082      	sub	sp, #8
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
    86cc:	1c0a      	adds	r2, r1, #0
    86ce:	1cfb      	adds	r3, r7, #3
    86d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	681b      	ldr	r3, [r3, #0]
    86d6:	1cfa      	adds	r2, r7, #3
    86d8:	7811      	ldrb	r1, [r2, #0]
    86da:	4a10      	ldr	r2, [pc, #64]	; (871c <usb_device_enable_callback+0x58>)
    86dc:	0049      	lsls	r1, r1, #1
    86de:	5a8a      	ldrh	r2, [r1, r2]
    86e0:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    86e2:	687a      	ldr	r2, [r7, #4]
    86e4:	23ab      	movs	r3, #171	; 0xab
    86e6:	005b      	lsls	r3, r3, #1
    86e8:	5ad2      	ldrh	r2, [r2, r3]
    86ea:	1cfb      	adds	r3, r7, #3
    86ec:	7819      	ldrb	r1, [r3, #0]
    86ee:	4b0b      	ldr	r3, [pc, #44]	; (871c <usb_device_enable_callback+0x58>)
    86f0:	0049      	lsls	r1, r1, #1
    86f2:	5acb      	ldrh	r3, [r1, r3]
    86f4:	4313      	orrs	r3, r2
    86f6:	b299      	uxth	r1, r3
    86f8:	687a      	ldr	r2, [r7, #4]
    86fa:	23ab      	movs	r3, #171	; 0xab
    86fc:	005b      	lsls	r3, r3, #1
    86fe:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	1cfa      	adds	r2, r7, #3
    8706:	7811      	ldrb	r1, [r2, #0]
    8708:	4a04      	ldr	r2, [pc, #16]	; (871c <usb_device_enable_callback+0x58>)
    870a:	0049      	lsls	r1, r1, #1
    870c:	5a8a      	ldrh	r2, [r1, r2]
    870e:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    8710:	2300      	movs	r3, #0
}
    8712:	1c18      	adds	r0, r3, #0
    8714:	46bd      	mov	sp, r7
    8716:	b002      	add	sp, #8
    8718:	bd80      	pop	{r7, pc}
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	0000ac14 	.word	0x0000ac14

00008720 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    8720:	b580      	push	{r7, lr}
    8722:	b082      	sub	sp, #8
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
    8728:	1c0a      	adds	r2, r1, #0
    872a:	1cfb      	adds	r3, r7, #3
    872c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    872e:	687a      	ldr	r2, [r7, #4]
    8730:	23ab      	movs	r3, #171	; 0xab
    8732:	005b      	lsls	r3, r3, #1
    8734:	5ad3      	ldrh	r3, [r2, r3]
    8736:	b29b      	uxth	r3, r3
    8738:	1cfa      	adds	r2, r7, #3
    873a:	7811      	ldrb	r1, [r2, #0]
    873c:	4a0c      	ldr	r2, [pc, #48]	; (8770 <usb_device_disable_callback+0x50>)
    873e:	0049      	lsls	r1, r1, #1
    8740:	5a8a      	ldrh	r2, [r1, r2]
    8742:	b292      	uxth	r2, r2
    8744:	43d2      	mvns	r2, r2
    8746:	b292      	uxth	r2, r2
    8748:	4013      	ands	r3, r2
    874a:	b29b      	uxth	r3, r3
    874c:	b299      	uxth	r1, r3
    874e:	687a      	ldr	r2, [r7, #4]
    8750:	23ab      	movs	r3, #171	; 0xab
    8752:	005b      	lsls	r3, r3, #1
    8754:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	681b      	ldr	r3, [r3, #0]
    875a:	1cfa      	adds	r2, r7, #3
    875c:	7811      	ldrb	r1, [r2, #0]
    875e:	4a04      	ldr	r2, [pc, #16]	; (8770 <usb_device_disable_callback+0x50>)
    8760:	0049      	lsls	r1, r1, #1
    8762:	5a8a      	ldrh	r2, [r1, r2]
    8764:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    8766:	2300      	movs	r3, #0
}
    8768:	1c18      	adds	r0, r3, #0
    876a:	46bd      	mov	sp, r7
    876c:	b002      	add	sp, #8
    876e:	bd80      	pop	{r7, pc}
    8770:	0000ac14 	.word	0x0000ac14

00008774 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    8774:	b580      	push	{r7, lr}
    8776:	b084      	sub	sp, #16
    8778:	af00      	add	r7, sp, #0
    877a:	60f8      	str	r0, [r7, #12]
    877c:	607b      	str	r3, [r7, #4]
    877e:	1c3b      	adds	r3, r7, #0
    8780:	330b      	adds	r3, #11
    8782:	7019      	strb	r1, [r3, #0]
    8784:	1c3b      	adds	r3, r7, #0
    8786:	330a      	adds	r3, #10
    8788:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    878a:	1c3b      	adds	r3, r7, #0
    878c:	330b      	adds	r3, #11
    878e:	7819      	ldrb	r1, [r3, #0]
    8790:	1c3b      	adds	r3, r7, #0
    8792:	330a      	adds	r3, #10
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	68fa      	ldr	r2, [r7, #12]
    8798:	0089      	lsls	r1, r1, #2
    879a:	18cb      	adds	r3, r1, r3
    879c:	3334      	adds	r3, #52	; 0x34
    879e:	009b      	lsls	r3, r3, #2
    87a0:	18d3      	adds	r3, r2, r3
    87a2:	687a      	ldr	r2, [r7, #4]
    87a4:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    87a6:	1c3b      	adds	r3, r7, #0
    87a8:	330b      	adds	r3, #11
    87aa:	7819      	ldrb	r1, [r3, #0]
    87ac:	1c3b      	adds	r3, r7, #0
    87ae:	330b      	adds	r3, #11
    87b0:	781a      	ldrb	r2, [r3, #0]
    87b2:	68f8      	ldr	r0, [r7, #12]
    87b4:	23ac      	movs	r3, #172	; 0xac
    87b6:	005b      	lsls	r3, r3, #1
    87b8:	1882      	adds	r2, r0, r2
    87ba:	18d3      	adds	r3, r2, r3
    87bc:	781a      	ldrb	r2, [r3, #0]
    87be:	1c3b      	adds	r3, r7, #0
    87c0:	330a      	adds	r3, #10
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	4807      	ldr	r0, [pc, #28]	; (87e4 <usb_device_endpoint_register_callback+0x70>)
    87c6:	5cc3      	ldrb	r3, [r0, r3]
    87c8:	4313      	orrs	r3, r2
    87ca:	b2da      	uxtb	r2, r3
    87cc:	68f8      	ldr	r0, [r7, #12]
    87ce:	23ac      	movs	r3, #172	; 0xac
    87d0:	005b      	lsls	r3, r3, #1
    87d2:	1841      	adds	r1, r0, r1
    87d4:	18cb      	adds	r3, r1, r3
    87d6:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    87d8:	2300      	movs	r3, #0
}
    87da:	1c18      	adds	r0, r3, #0
    87dc:	46bd      	mov	sp, r7
    87de:	b004      	add	sp, #16
    87e0:	bd80      	pop	{r7, pc}
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	0000ac24 	.word	0x0000ac24

000087e8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
    87f0:	1cfb      	adds	r3, r7, #3
    87f2:	7019      	strb	r1, [r3, #0]
    87f4:	1cbb      	adds	r3, r7, #2
    87f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    87f8:	1cfb      	adds	r3, r7, #3
    87fa:	7819      	ldrb	r1, [r3, #0]
    87fc:	1cbb      	adds	r3, r7, #2
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	687a      	ldr	r2, [r7, #4]
    8802:	0089      	lsls	r1, r1, #2
    8804:	18cb      	adds	r3, r1, r3
    8806:	3334      	adds	r3, #52	; 0x34
    8808:	009b      	lsls	r3, r3, #2
    880a:	18d3      	adds	r3, r2, r3
    880c:	2200      	movs	r2, #0
    880e:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8810:	1cfb      	adds	r3, r7, #3
    8812:	7819      	ldrb	r1, [r3, #0]
    8814:	1cfb      	adds	r3, r7, #3
    8816:	781a      	ldrb	r2, [r3, #0]
    8818:	6878      	ldr	r0, [r7, #4]
    881a:	23ac      	movs	r3, #172	; 0xac
    881c:	005b      	lsls	r3, r3, #1
    881e:	1882      	adds	r2, r0, r2
    8820:	18d3      	adds	r3, r2, r3
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	b2db      	uxtb	r3, r3
    8826:	1cba      	adds	r2, r7, #2
    8828:	7812      	ldrb	r2, [r2, #0]
    882a:	4809      	ldr	r0, [pc, #36]	; (8850 <usb_device_endpoint_unregister_callback+0x68>)
    882c:	5c82      	ldrb	r2, [r0, r2]
    882e:	b2d2      	uxtb	r2, r2
    8830:	43d2      	mvns	r2, r2
    8832:	b2d2      	uxtb	r2, r2
    8834:	4013      	ands	r3, r2
    8836:	b2db      	uxtb	r3, r3
    8838:	b2da      	uxtb	r2, r3
    883a:	6878      	ldr	r0, [r7, #4]
    883c:	23ac      	movs	r3, #172	; 0xac
    883e:	005b      	lsls	r3, r3, #1
    8840:	1841      	adds	r1, r0, r1
    8842:	18cb      	adds	r3, r1, r3
    8844:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8846:	2300      	movs	r3, #0
}
    8848:	1c18      	adds	r0, r3, #0
    884a:	46bd      	mov	sp, r7
    884c:	b002      	add	sp, #8
    884e:	bd80      	pop	{r7, pc}
    8850:	0000ac24 	.word	0x0000ac24

00008854 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    8854:	b580      	push	{r7, lr}
    8856:	b084      	sub	sp, #16
    8858:	af00      	add	r7, sp, #0
    885a:	6078      	str	r0, [r7, #4]
    885c:	1cfb      	adds	r3, r7, #3
    885e:	7019      	strb	r1, [r3, #0]
    8860:	1cbb      	adds	r3, r7, #2
    8862:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8864:	1c3b      	adds	r3, r7, #0
    8866:	330f      	adds	r3, #15
    8868:	1cfa      	adds	r2, r7, #3
    886a:	7811      	ldrb	r1, [r2, #0]
    886c:	220f      	movs	r2, #15
    886e:	400a      	ands	r2, r1
    8870:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8872:	1c3b      	adds	r3, r7, #0
    8874:	330f      	adds	r3, #15
    8876:	7819      	ldrb	r1, [r3, #0]
    8878:	1c3b      	adds	r3, r7, #0
    887a:	330f      	adds	r3, #15
    887c:	781a      	ldrb	r2, [r3, #0]
    887e:	6878      	ldr	r0, [r7, #4]
    8880:	23b0      	movs	r3, #176	; 0xb0
    8882:	005b      	lsls	r3, r3, #1
    8884:	1882      	adds	r2, r0, r2
    8886:	18d3      	adds	r3, r2, r3
    8888:	781a      	ldrb	r2, [r3, #0]
    888a:	1cbb      	adds	r3, r7, #2
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	4854      	ldr	r0, [pc, #336]	; (89e0 <usb_device_endpoint_enable_callback+0x18c>)
    8890:	5cc3      	ldrb	r3, [r0, r3]
    8892:	4313      	orrs	r3, r2
    8894:	b2da      	uxtb	r2, r3
    8896:	6878      	ldr	r0, [r7, #4]
    8898:	23b0      	movs	r3, #176	; 0xb0
    889a:	005b      	lsls	r3, r3, #1
    889c:	1841      	adds	r1, r0, r1
    889e:	18cb      	adds	r3, r1, r3
    88a0:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    88a2:	1cbb      	adds	r3, r7, #2
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	2b00      	cmp	r3, #0
    88a8:	d12f      	bne.n	890a <usb_device_endpoint_enable_callback+0xb6>
		if (ep_num == 0) { // control endpoint
    88aa:	1c3b      	adds	r3, r7, #0
    88ac:	330f      	adds	r3, #15
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	2b00      	cmp	r3, #0
    88b2:	d10c      	bne.n	88ce <usb_device_endpoint_enable_callback+0x7a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	6819      	ldr	r1, [r3, #0]
    88b8:	1c3b      	adds	r3, r7, #0
    88ba:	330f      	adds	r3, #15
    88bc:	781a      	ldrb	r2, [r3, #0]
    88be:	2384      	movs	r3, #132	; 0x84
    88c0:	005b      	lsls	r3, r3, #1
    88c2:	0152      	lsls	r2, r2, #5
    88c4:	188a      	adds	r2, r1, r2
    88c6:	18d3      	adds	r3, r2, r3
    88c8:	2203      	movs	r2, #3
    88ca:	705a      	strb	r2, [r3, #1]
    88cc:	e01d      	b.n	890a <usb_device_endpoint_enable_callback+0xb6>
		} else if (ep & USB_EP_DIR_IN) {
    88ce:	1cfb      	adds	r3, r7, #3
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	b25b      	sxtb	r3, r3
    88d4:	2b00      	cmp	r3, #0
    88d6:	da0c      	bge.n	88f2 <usb_device_endpoint_enable_callback+0x9e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    88d8:	687b      	ldr	r3, [r7, #4]
    88da:	6819      	ldr	r1, [r3, #0]
    88dc:	1c3b      	adds	r3, r7, #0
    88de:	330f      	adds	r3, #15
    88e0:	781a      	ldrb	r2, [r3, #0]
    88e2:	2384      	movs	r3, #132	; 0x84
    88e4:	005b      	lsls	r3, r3, #1
    88e6:	0152      	lsls	r2, r2, #5
    88e8:	188a      	adds	r2, r1, r2
    88ea:	18d3      	adds	r3, r2, r3
    88ec:	2202      	movs	r2, #2
    88ee:	705a      	strb	r2, [r3, #1]
    88f0:	e00b      	b.n	890a <usb_device_endpoint_enable_callback+0xb6>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	6819      	ldr	r1, [r3, #0]
    88f6:	1c3b      	adds	r3, r7, #0
    88f8:	330f      	adds	r3, #15
    88fa:	781a      	ldrb	r2, [r3, #0]
    88fc:	2384      	movs	r3, #132	; 0x84
    88fe:	005b      	lsls	r3, r3, #1
    8900:	0152      	lsls	r2, r2, #5
    8902:	188a      	adds	r2, r1, r2
    8904:	18d3      	adds	r3, r2, r3
    8906:	2201      	movs	r2, #1
    8908:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    890a:	1cbb      	adds	r3, r7, #2
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	2b01      	cmp	r3, #1
    8910:	d12f      	bne.n	8972 <usb_device_endpoint_enable_callback+0x11e>
		if (ep_num == 0) { // control endpoint
    8912:	1c3b      	adds	r3, r7, #0
    8914:	330f      	adds	r3, #15
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	2b00      	cmp	r3, #0
    891a:	d10c      	bne.n	8936 <usb_device_endpoint_enable_callback+0xe2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	6819      	ldr	r1, [r3, #0]
    8920:	1c3b      	adds	r3, r7, #0
    8922:	330f      	adds	r3, #15
    8924:	781a      	ldrb	r2, [r3, #0]
    8926:	2384      	movs	r3, #132	; 0x84
    8928:	005b      	lsls	r3, r3, #1
    892a:	0152      	lsls	r2, r2, #5
    892c:	188a      	adds	r2, r1, r2
    892e:	18d3      	adds	r3, r2, r3
    8930:	220c      	movs	r2, #12
    8932:	705a      	strb	r2, [r3, #1]
    8934:	e01d      	b.n	8972 <usb_device_endpoint_enable_callback+0x11e>
		} else if (ep & USB_EP_DIR_IN) {
    8936:	1cfb      	adds	r3, r7, #3
    8938:	781b      	ldrb	r3, [r3, #0]
    893a:	b25b      	sxtb	r3, r3
    893c:	2b00      	cmp	r3, #0
    893e:	da0c      	bge.n	895a <usb_device_endpoint_enable_callback+0x106>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	6819      	ldr	r1, [r3, #0]
    8944:	1c3b      	adds	r3, r7, #0
    8946:	330f      	adds	r3, #15
    8948:	781a      	ldrb	r2, [r3, #0]
    894a:	2384      	movs	r3, #132	; 0x84
    894c:	005b      	lsls	r3, r3, #1
    894e:	0152      	lsls	r2, r2, #5
    8950:	188a      	adds	r2, r1, r2
    8952:	18d3      	adds	r3, r2, r3
    8954:	2208      	movs	r2, #8
    8956:	705a      	strb	r2, [r3, #1]
    8958:	e00b      	b.n	8972 <usb_device_endpoint_enable_callback+0x11e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    895a:	687b      	ldr	r3, [r7, #4]
    895c:	6819      	ldr	r1, [r3, #0]
    895e:	1c3b      	adds	r3, r7, #0
    8960:	330f      	adds	r3, #15
    8962:	781a      	ldrb	r2, [r3, #0]
    8964:	2384      	movs	r3, #132	; 0x84
    8966:	005b      	lsls	r3, r3, #1
    8968:	0152      	lsls	r2, r2, #5
    896a:	188a      	adds	r2, r1, r2
    896c:	18d3      	adds	r3, r2, r3
    896e:	2204      	movs	r2, #4
    8970:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    8972:	1cbb      	adds	r3, r7, #2
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	2b02      	cmp	r3, #2
    8978:	d10b      	bne.n	8992 <usb_device_endpoint_enable_callback+0x13e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	6819      	ldr	r1, [r3, #0]
    897e:	1c3b      	adds	r3, r7, #0
    8980:	330f      	adds	r3, #15
    8982:	781a      	ldrb	r2, [r3, #0]
    8984:	2384      	movs	r3, #132	; 0x84
    8986:	005b      	lsls	r3, r3, #1
    8988:	0152      	lsls	r2, r2, #5
    898a:	188a      	adds	r2, r1, r2
    898c:	18d3      	adds	r3, r2, r3
    898e:	2210      	movs	r2, #16
    8990:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    8992:	1cbb      	adds	r3, r7, #2
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	2b03      	cmp	r3, #3
    8998:	d11d      	bne.n	89d6 <usb_device_endpoint_enable_callback+0x182>
		if (ep & USB_EP_DIR_IN) {
    899a:	1cfb      	adds	r3, r7, #3
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	b25b      	sxtb	r3, r3
    89a0:	2b00      	cmp	r3, #0
    89a2:	da0c      	bge.n	89be <usb_device_endpoint_enable_callback+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    89a4:	687b      	ldr	r3, [r7, #4]
    89a6:	6819      	ldr	r1, [r3, #0]
    89a8:	1c3b      	adds	r3, r7, #0
    89aa:	330f      	adds	r3, #15
    89ac:	781a      	ldrb	r2, [r3, #0]
    89ae:	2384      	movs	r3, #132	; 0x84
    89b0:	005b      	lsls	r3, r3, #1
    89b2:	0152      	lsls	r2, r2, #5
    89b4:	188a      	adds	r2, r1, r2
    89b6:	18d3      	adds	r3, r2, r3
    89b8:	2240      	movs	r2, #64	; 0x40
    89ba:	705a      	strb	r2, [r3, #1]
    89bc:	e00b      	b.n	89d6 <usb_device_endpoint_enable_callback+0x182>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	6819      	ldr	r1, [r3, #0]
    89c2:	1c3b      	adds	r3, r7, #0
    89c4:	330f      	adds	r3, #15
    89c6:	781a      	ldrb	r2, [r3, #0]
    89c8:	2384      	movs	r3, #132	; 0x84
    89ca:	005b      	lsls	r3, r3, #1
    89cc:	0152      	lsls	r2, r2, #5
    89ce:	188a      	adds	r2, r1, r2
    89d0:	18d3      	adds	r3, r2, r3
    89d2:	2220      	movs	r2, #32
    89d4:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    89d6:	2300      	movs	r3, #0
}
    89d8:	1c18      	adds	r0, r3, #0
    89da:	46bd      	mov	sp, r7
    89dc:	b004      	add	sp, #16
    89de:	bd80      	pop	{r7, pc}
    89e0:	0000ac24 	.word	0x0000ac24

000089e4 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    89e4:	b580      	push	{r7, lr}
    89e6:	b084      	sub	sp, #16
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
    89ec:	1cfb      	adds	r3, r7, #3
    89ee:	7019      	strb	r1, [r3, #0]
    89f0:	1cbb      	adds	r3, r7, #2
    89f2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    89f4:	1c3b      	adds	r3, r7, #0
    89f6:	330f      	adds	r3, #15
    89f8:	1cfa      	adds	r2, r7, #3
    89fa:	7811      	ldrb	r1, [r2, #0]
    89fc:	220f      	movs	r2, #15
    89fe:	400a      	ands	r2, r1
    8a00:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8a02:	1c3b      	adds	r3, r7, #0
    8a04:	330f      	adds	r3, #15
    8a06:	7819      	ldrb	r1, [r3, #0]
    8a08:	1c3b      	adds	r3, r7, #0
    8a0a:	330f      	adds	r3, #15
    8a0c:	781a      	ldrb	r2, [r3, #0]
    8a0e:	6878      	ldr	r0, [r7, #4]
    8a10:	23b0      	movs	r3, #176	; 0xb0
    8a12:	005b      	lsls	r3, r3, #1
    8a14:	1882      	adds	r2, r0, r2
    8a16:	18d3      	adds	r3, r2, r3
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	b2db      	uxtb	r3, r3
    8a1c:	1cba      	adds	r2, r7, #2
    8a1e:	7812      	ldrb	r2, [r2, #0]
    8a20:	4856      	ldr	r0, [pc, #344]	; (8b7c <usb_device_endpoint_disable_callback+0x198>)
    8a22:	5c82      	ldrb	r2, [r0, r2]
    8a24:	b2d2      	uxtb	r2, r2
    8a26:	43d2      	mvns	r2, r2
    8a28:	b2d2      	uxtb	r2, r2
    8a2a:	4013      	ands	r3, r2
    8a2c:	b2db      	uxtb	r3, r3
    8a2e:	b2da      	uxtb	r2, r3
    8a30:	6878      	ldr	r0, [r7, #4]
    8a32:	23b0      	movs	r3, #176	; 0xb0
    8a34:	005b      	lsls	r3, r3, #1
    8a36:	1841      	adds	r1, r0, r1
    8a38:	18cb      	adds	r3, r1, r3
    8a3a:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    8a3c:	1cbb      	adds	r3, r7, #2
    8a3e:	781b      	ldrb	r3, [r3, #0]
    8a40:	2b00      	cmp	r3, #0
    8a42:	d12f      	bne.n	8aa4 <usb_device_endpoint_disable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    8a44:	1c3b      	adds	r3, r7, #0
    8a46:	330f      	adds	r3, #15
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d10c      	bne.n	8a68 <usb_device_endpoint_disable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    8a4e:	687b      	ldr	r3, [r7, #4]
    8a50:	6819      	ldr	r1, [r3, #0]
    8a52:	1c3b      	adds	r3, r7, #0
    8a54:	330f      	adds	r3, #15
    8a56:	781a      	ldrb	r2, [r3, #0]
    8a58:	2384      	movs	r3, #132	; 0x84
    8a5a:	005b      	lsls	r3, r3, #1
    8a5c:	0152      	lsls	r2, r2, #5
    8a5e:	188a      	adds	r2, r1, r2
    8a60:	18d3      	adds	r3, r2, r3
    8a62:	2203      	movs	r2, #3
    8a64:	701a      	strb	r2, [r3, #0]
    8a66:	e01d      	b.n	8aa4 <usb_device_endpoint_disable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    8a68:	1cfb      	adds	r3, r7, #3
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	b25b      	sxtb	r3, r3
    8a6e:	2b00      	cmp	r3, #0
    8a70:	da0c      	bge.n	8a8c <usb_device_endpoint_disable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	6819      	ldr	r1, [r3, #0]
    8a76:	1c3b      	adds	r3, r7, #0
    8a78:	330f      	adds	r3, #15
    8a7a:	781a      	ldrb	r2, [r3, #0]
    8a7c:	2384      	movs	r3, #132	; 0x84
    8a7e:	005b      	lsls	r3, r3, #1
    8a80:	0152      	lsls	r2, r2, #5
    8a82:	188a      	adds	r2, r1, r2
    8a84:	18d3      	adds	r3, r2, r3
    8a86:	2202      	movs	r2, #2
    8a88:	701a      	strb	r2, [r3, #0]
    8a8a:	e00b      	b.n	8aa4 <usb_device_endpoint_disable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	6819      	ldr	r1, [r3, #0]
    8a90:	1c3b      	adds	r3, r7, #0
    8a92:	330f      	adds	r3, #15
    8a94:	781a      	ldrb	r2, [r3, #0]
    8a96:	2384      	movs	r3, #132	; 0x84
    8a98:	005b      	lsls	r3, r3, #1
    8a9a:	0152      	lsls	r2, r2, #5
    8a9c:	188a      	adds	r2, r1, r2
    8a9e:	18d3      	adds	r3, r2, r3
    8aa0:	2201      	movs	r2, #1
    8aa2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    8aa4:	1cbb      	adds	r3, r7, #2
    8aa6:	781b      	ldrb	r3, [r3, #0]
    8aa8:	2b01      	cmp	r3, #1
    8aaa:	d12f      	bne.n	8b0c <usb_device_endpoint_disable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    8aac:	1c3b      	adds	r3, r7, #0
    8aae:	330f      	adds	r3, #15
    8ab0:	781b      	ldrb	r3, [r3, #0]
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d10c      	bne.n	8ad0 <usb_device_endpoint_disable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    8ab6:	687b      	ldr	r3, [r7, #4]
    8ab8:	6819      	ldr	r1, [r3, #0]
    8aba:	1c3b      	adds	r3, r7, #0
    8abc:	330f      	adds	r3, #15
    8abe:	781a      	ldrb	r2, [r3, #0]
    8ac0:	2384      	movs	r3, #132	; 0x84
    8ac2:	005b      	lsls	r3, r3, #1
    8ac4:	0152      	lsls	r2, r2, #5
    8ac6:	188a      	adds	r2, r1, r2
    8ac8:	18d3      	adds	r3, r2, r3
    8aca:	220c      	movs	r2, #12
    8acc:	701a      	strb	r2, [r3, #0]
    8ace:	e01d      	b.n	8b0c <usb_device_endpoint_disable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    8ad0:	1cfb      	adds	r3, r7, #3
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	b25b      	sxtb	r3, r3
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	da0c      	bge.n	8af4 <usb_device_endpoint_disable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    8ada:	687b      	ldr	r3, [r7, #4]
    8adc:	6819      	ldr	r1, [r3, #0]
    8ade:	1c3b      	adds	r3, r7, #0
    8ae0:	330f      	adds	r3, #15
    8ae2:	781a      	ldrb	r2, [r3, #0]
    8ae4:	2384      	movs	r3, #132	; 0x84
    8ae6:	005b      	lsls	r3, r3, #1
    8ae8:	0152      	lsls	r2, r2, #5
    8aea:	188a      	adds	r2, r1, r2
    8aec:	18d3      	adds	r3, r2, r3
    8aee:	2208      	movs	r2, #8
    8af0:	701a      	strb	r2, [r3, #0]
    8af2:	e00b      	b.n	8b0c <usb_device_endpoint_disable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	6819      	ldr	r1, [r3, #0]
    8af8:	1c3b      	adds	r3, r7, #0
    8afa:	330f      	adds	r3, #15
    8afc:	781a      	ldrb	r2, [r3, #0]
    8afe:	2384      	movs	r3, #132	; 0x84
    8b00:	005b      	lsls	r3, r3, #1
    8b02:	0152      	lsls	r2, r2, #5
    8b04:	188a      	adds	r2, r1, r2
    8b06:	18d3      	adds	r3, r2, r3
    8b08:	2204      	movs	r2, #4
    8b0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    8b0c:	1cbb      	adds	r3, r7, #2
    8b0e:	781b      	ldrb	r3, [r3, #0]
    8b10:	2b02      	cmp	r3, #2
    8b12:	d10b      	bne.n	8b2c <usb_device_endpoint_disable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	6819      	ldr	r1, [r3, #0]
    8b18:	1c3b      	adds	r3, r7, #0
    8b1a:	330f      	adds	r3, #15
    8b1c:	781a      	ldrb	r2, [r3, #0]
    8b1e:	2384      	movs	r3, #132	; 0x84
    8b20:	005b      	lsls	r3, r3, #1
    8b22:	0152      	lsls	r2, r2, #5
    8b24:	188a      	adds	r2, r1, r2
    8b26:	18d3      	adds	r3, r2, r3
    8b28:	2210      	movs	r2, #16
    8b2a:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    8b2c:	1cbb      	adds	r3, r7, #2
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	2b03      	cmp	r3, #3
    8b32:	d11d      	bne.n	8b70 <usb_device_endpoint_disable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    8b34:	1cfb      	adds	r3, r7, #3
    8b36:	781b      	ldrb	r3, [r3, #0]
    8b38:	b25b      	sxtb	r3, r3
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	da0c      	bge.n	8b58 <usb_device_endpoint_disable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	6819      	ldr	r1, [r3, #0]
    8b42:	1c3b      	adds	r3, r7, #0
    8b44:	330f      	adds	r3, #15
    8b46:	781a      	ldrb	r2, [r3, #0]
    8b48:	2384      	movs	r3, #132	; 0x84
    8b4a:	005b      	lsls	r3, r3, #1
    8b4c:	0152      	lsls	r2, r2, #5
    8b4e:	188a      	adds	r2, r1, r2
    8b50:	18d3      	adds	r3, r2, r3
    8b52:	2240      	movs	r2, #64	; 0x40
    8b54:	701a      	strb	r2, [r3, #0]
    8b56:	e00b      	b.n	8b70 <usb_device_endpoint_disable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	6819      	ldr	r1, [r3, #0]
    8b5c:	1c3b      	adds	r3, r7, #0
    8b5e:	330f      	adds	r3, #15
    8b60:	781a      	ldrb	r2, [r3, #0]
    8b62:	2384      	movs	r3, #132	; 0x84
    8b64:	005b      	lsls	r3, r3, #1
    8b66:	0152      	lsls	r2, r2, #5
    8b68:	188a      	adds	r2, r1, r2
    8b6a:	18d3      	adds	r3, r2, r3
    8b6c:	2220      	movs	r2, #32
    8b6e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    8b70:	2300      	movs	r3, #0
}
    8b72:	1c18      	adds	r0, r3, #0
    8b74:	46bd      	mov	sp, r7
    8b76:	b004      	add	sp, #16
    8b78:	bd80      	pop	{r7, pc}
    8b7a:	46c0      	nop			; (mov r8, r8)
    8b7c:	0000ac24 	.word	0x0000ac24

00008b80 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    8b88:	687b      	ldr	r3, [r7, #4]
    8b8a:	2200      	movs	r2, #0
    8b8c:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	2200      	movs	r2, #0
    8b92:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	2200      	movs	r2, #0
    8b98:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    8b9a:	687b      	ldr	r3, [r7, #4]
    8b9c:	2201      	movs	r2, #1
    8b9e:	70da      	strb	r2, [r3, #3]
}
    8ba0:	46bd      	mov	sp, r7
    8ba2:	b002      	add	sp, #8
    8ba4:	bd80      	pop	{r7, pc}
    8ba6:	46c0      	nop			; (mov r8, r8)

00008ba8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    8ba8:	b590      	push	{r4, r7, lr}
    8baa:	b085      	sub	sp, #20
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    8bb2:	683b      	ldr	r3, [r7, #0]
    8bb4:	7819      	ldrb	r1, [r3, #0]
    8bb6:	1c3b      	adds	r3, r7, #0
    8bb8:	330f      	adds	r3, #15
    8bba:	220f      	movs	r2, #15
    8bbc:	400a      	ands	r2, r1
    8bbe:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    8bc0:	683b      	ldr	r3, [r7, #0]
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	b2db      	uxtb	r3, r3
    8bc6:	09db      	lsrs	r3, r3, #7
    8bc8:	b2da      	uxtb	r2, r3
    8bca:	1c3b      	adds	r3, r7, #0
    8bcc:	330e      	adds	r3, #14
    8bce:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    8bd0:	683b      	ldr	r3, [r7, #0]
    8bd2:	78db      	ldrb	r3, [r3, #3]
    8bd4:	2b04      	cmp	r3, #4
    8bd6:	d900      	bls.n	8bda <usb_device_endpoint_set_config+0x32>
    8bd8:	e1f2      	b.n	8fc0 <usb_device_endpoint_set_config+0x418>
    8bda:	009a      	lsls	r2, r3, #2
    8bdc:	4bdd      	ldr	r3, [pc, #884]	; (8f54 <usb_device_endpoint_set_config+0x3ac>)
    8bde:	18d3      	adds	r3, r2, r3
    8be0:	681b      	ldr	r3, [r3, #0]
    8be2:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	681b      	ldr	r3, [r3, #0]
    8be8:	1c3a      	adds	r2, r7, #0
    8bea:	320f      	adds	r2, #15
    8bec:	7812      	ldrb	r2, [r2, #0]
    8bee:	3208      	adds	r2, #8
    8bf0:	0152      	lsls	r2, r2, #5
    8bf2:	2100      	movs	r1, #0
    8bf4:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    8bf6:	2300      	movs	r3, #0
    8bf8:	e237      	b.n	906a <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	681b      	ldr	r3, [r3, #0]
    8bfe:	1c3a      	adds	r2, r7, #0
    8c00:	320f      	adds	r2, #15
    8c02:	7812      	ldrb	r2, [r2, #0]
    8c04:	3208      	adds	r2, #8
    8c06:	0152      	lsls	r2, r2, #5
    8c08:	5cd3      	ldrb	r3, [r2, r3]
    8c0a:	b2db      	uxtb	r3, r3
    8c0c:	1c1a      	adds	r2, r3, #0
    8c0e:	2307      	movs	r3, #7
    8c10:	4013      	ands	r3, r2
    8c12:	d12e      	bne.n	8c72 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	1c3a      	adds	r2, r7, #0
    8c1a:	320f      	adds	r2, #15
    8c1c:	7812      	ldrb	r2, [r2, #0]
    8c1e:	3208      	adds	r2, #8
    8c20:	0152      	lsls	r2, r2, #5
    8c22:	5cd3      	ldrb	r3, [r2, r3]
    8c24:	b2db      	uxtb	r3, r3
    8c26:	1c1a      	adds	r2, r3, #0
    8c28:	2370      	movs	r3, #112	; 0x70
    8c2a:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    8c2c:	d121      	bne.n	8c72 <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	681b      	ldr	r3, [r3, #0]
    8c32:	1c3a      	adds	r2, r7, #0
    8c34:	320f      	adds	r2, #15
    8c36:	7812      	ldrb	r2, [r2, #0]
    8c38:	3208      	adds	r2, #8
    8c3a:	0152      	lsls	r2, r2, #5
    8c3c:	2111      	movs	r1, #17
    8c3e:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	681a      	ldr	r2, [r3, #0]
    8c44:	1c3b      	adds	r3, r7, #0
    8c46:	330f      	adds	r3, #15
    8c48:	781b      	ldrb	r3, [r3, #0]
    8c4a:	3308      	adds	r3, #8
    8c4c:	015b      	lsls	r3, r3, #5
    8c4e:	18d3      	adds	r3, r2, r3
    8c50:	2240      	movs	r2, #64	; 0x40
    8c52:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	681a      	ldr	r2, [r3, #0]
    8c58:	1c3b      	adds	r3, r7, #0
    8c5a:	330f      	adds	r3, #15
    8c5c:	781b      	ldrb	r3, [r3, #0]
    8c5e:	3308      	adds	r3, #8
    8c60:	015b      	lsls	r3, r3, #5
    8c62:	18d3      	adds	r3, r2, r3
    8c64:	2280      	movs	r2, #128	; 0x80
    8c66:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    8c68:	683b      	ldr	r3, [r7, #0]
    8c6a:	789b      	ldrb	r3, [r3, #2]
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d102      	bne.n	8c76 <usb_device_endpoint_set_config+0xce>
    8c70:	e026      	b.n	8cc0 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    8c72:	231c      	movs	r3, #28
    8c74:	e1f9      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8c76:	1c3b      	adds	r3, r7, #0
    8c78:	330f      	adds	r3, #15
    8c7a:	7818      	ldrb	r0, [r3, #0]
    8c7c:	1c3b      	adds	r3, r7, #0
    8c7e:	330f      	adds	r3, #15
    8c80:	781b      	ldrb	r3, [r3, #0]
    8c82:	4ab5      	ldr	r2, [pc, #724]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8c84:	015b      	lsls	r3, r3, #5
    8c86:	18d3      	adds	r3, r2, r3
    8c88:	685b      	ldr	r3, [r3, #4]
    8c8a:	2280      	movs	r2, #128	; 0x80
    8c8c:	0612      	lsls	r2, r2, #24
    8c8e:	431a      	orrs	r2, r3
    8c90:	49b1      	ldr	r1, [pc, #708]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8c92:	0143      	lsls	r3, r0, #5
    8c94:	18cb      	adds	r3, r1, r3
    8c96:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8c98:	1c3b      	adds	r3, r7, #0
    8c9a:	330f      	adds	r3, #15
    8c9c:	7818      	ldrb	r0, [r3, #0]
    8c9e:	1c3b      	adds	r3, r7, #0
    8ca0:	330f      	adds	r3, #15
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	4aac      	ldr	r2, [pc, #688]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8ca6:	015b      	lsls	r3, r3, #5
    8ca8:	18d3      	adds	r3, r2, r3
    8caa:	3310      	adds	r3, #16
    8cac:	685b      	ldr	r3, [r3, #4]
    8cae:	2280      	movs	r2, #128	; 0x80
    8cb0:	0612      	lsls	r2, r2, #24
    8cb2:	431a      	orrs	r2, r3
    8cb4:	49a8      	ldr	r1, [pc, #672]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8cb6:	0143      	lsls	r3, r0, #5
    8cb8:	18cb      	adds	r3, r1, r3
    8cba:	3310      	adds	r3, #16
    8cbc:	605a      	str	r2, [r3, #4]
    8cbe:	e021      	b.n	8d04 <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8cc0:	1c3b      	adds	r3, r7, #0
    8cc2:	330f      	adds	r3, #15
    8cc4:	7818      	ldrb	r0, [r3, #0]
    8cc6:	1c3b      	adds	r3, r7, #0
    8cc8:	330f      	adds	r3, #15
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	4aa2      	ldr	r2, [pc, #648]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8cce:	015b      	lsls	r3, r3, #5
    8cd0:	18d3      	adds	r3, r2, r3
    8cd2:	685b      	ldr	r3, [r3, #4]
    8cd4:	005b      	lsls	r3, r3, #1
    8cd6:	085a      	lsrs	r2, r3, #1
    8cd8:	499f      	ldr	r1, [pc, #636]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8cda:	0143      	lsls	r3, r0, #5
    8cdc:	18cb      	adds	r3, r1, r3
    8cde:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8ce0:	1c3b      	adds	r3, r7, #0
    8ce2:	330f      	adds	r3, #15
    8ce4:	7818      	ldrb	r0, [r3, #0]
    8ce6:	1c3b      	adds	r3, r7, #0
    8ce8:	330f      	adds	r3, #15
    8cea:	781b      	ldrb	r3, [r3, #0]
    8cec:	4a9a      	ldr	r2, [pc, #616]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8cee:	015b      	lsls	r3, r3, #5
    8cf0:	18d3      	adds	r3, r2, r3
    8cf2:	3310      	adds	r3, #16
    8cf4:	685b      	ldr	r3, [r3, #4]
    8cf6:	005b      	lsls	r3, r3, #1
    8cf8:	085a      	lsrs	r2, r3, #1
    8cfa:	4997      	ldr	r1, [pc, #604]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8cfc:	0143      	lsls	r3, r0, #5
    8cfe:	18cb      	adds	r3, r1, r3
    8d00:	3310      	adds	r3, #16
    8d02:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8d04:	1c3b      	adds	r3, r7, #0
    8d06:	330f      	adds	r3, #15
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	683a      	ldr	r2, [r7, #0]
    8d0c:	7852      	ldrb	r2, [r2, #1]
    8d0e:	1c11      	adds	r1, r2, #0
    8d10:	2207      	movs	r2, #7
    8d12:	400a      	ands	r2, r1
    8d14:	b2d1      	uxtb	r1, r2
    8d16:	4a90      	ldr	r2, [pc, #576]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8d18:	015b      	lsls	r3, r3, #5
    8d1a:	18d3      	adds	r3, r2, r3
    8d1c:	2207      	movs	r2, #7
    8d1e:	400a      	ands	r2, r1
    8d20:	0712      	lsls	r2, r2, #28
    8d22:	6858      	ldr	r0, [r3, #4]
    8d24:	498d      	ldr	r1, [pc, #564]	; (8f5c <usb_device_endpoint_set_config+0x3b4>)
    8d26:	4001      	ands	r1, r0
    8d28:	430a      	orrs	r2, r1
    8d2a:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8d2c:	1c3b      	adds	r3, r7, #0
    8d2e:	330f      	adds	r3, #15
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	683a      	ldr	r2, [r7, #0]
    8d34:	7852      	ldrb	r2, [r2, #1]
    8d36:	1c11      	adds	r1, r2, #0
    8d38:	2207      	movs	r2, #7
    8d3a:	400a      	ands	r2, r1
    8d3c:	b2d1      	uxtb	r1, r2
    8d3e:	4a86      	ldr	r2, [pc, #536]	; (8f58 <usb_device_endpoint_set_config+0x3b0>)
    8d40:	015b      	lsls	r3, r3, #5
    8d42:	18d3      	adds	r3, r2, r3
    8d44:	3310      	adds	r3, #16
    8d46:	2207      	movs	r2, #7
    8d48:	400a      	ands	r2, r1
    8d4a:	0712      	lsls	r2, r2, #28
    8d4c:	6858      	ldr	r0, [r3, #4]
    8d4e:	4983      	ldr	r1, [pc, #524]	; (8f5c <usb_device_endpoint_set_config+0x3b4>)
    8d50:	4001      	ands	r1, r0
    8d52:	430a      	orrs	r2, r1
    8d54:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    8d56:	2300      	movs	r3, #0
    8d58:	e187      	b.n	906a <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    8d5a:	1c3b      	adds	r3, r7, #0
    8d5c:	330e      	adds	r3, #14
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	2b00      	cmp	r3, #0
    8d62:	d02e      	beq.n	8dc2 <usb_device_endpoint_set_config+0x21a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	681b      	ldr	r3, [r3, #0]
    8d68:	1c3a      	adds	r2, r7, #0
    8d6a:	320f      	adds	r2, #15
    8d6c:	7812      	ldrb	r2, [r2, #0]
    8d6e:	3208      	adds	r2, #8
    8d70:	0152      	lsls	r2, r2, #5
    8d72:	5cd3      	ldrb	r3, [r2, r3]
    8d74:	b2db      	uxtb	r3, r3
    8d76:	1c1a      	adds	r2, r3, #0
    8d78:	2370      	movs	r3, #112	; 0x70
    8d7a:	4013      	ands	r3, r2
    8d7c:	d11f      	bne.n	8dbe <usb_device_endpoint_set_config+0x216>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    8d7e:	687b      	ldr	r3, [r7, #4]
    8d80:	681a      	ldr	r2, [r3, #0]
    8d82:	1c3b      	adds	r3, r7, #0
    8d84:	330f      	adds	r3, #15
    8d86:	7818      	ldrb	r0, [r3, #0]
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	681b      	ldr	r3, [r3, #0]
    8d8c:	1c39      	adds	r1, r7, #0
    8d8e:	310f      	adds	r1, #15
    8d90:	7809      	ldrb	r1, [r1, #0]
    8d92:	3108      	adds	r1, #8
    8d94:	0149      	lsls	r1, r1, #5
    8d96:	5ccb      	ldrb	r3, [r1, r3]
    8d98:	b2db      	uxtb	r3, r3
    8d9a:	2120      	movs	r1, #32
    8d9c:	430b      	orrs	r3, r1
    8d9e:	b2d9      	uxtb	r1, r3
    8da0:	1c03      	adds	r3, r0, #0
    8da2:	3308      	adds	r3, #8
    8da4:	015b      	lsls	r3, r3, #5
    8da6:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	681a      	ldr	r2, [r3, #0]
    8dac:	1c3b      	adds	r3, r7, #0
    8dae:	330f      	adds	r3, #15
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	3308      	adds	r3, #8
    8db4:	015b      	lsls	r3, r3, #5
    8db6:	18d3      	adds	r3, r2, r3
    8db8:	2280      	movs	r2, #128	; 0x80
    8dba:	711a      	strb	r2, [r3, #4]
    8dbc:	e030      	b.n	8e20 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    8dbe:	231c      	movs	r3, #28
    8dc0:	e153      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	1c3a      	adds	r2, r7, #0
    8dc8:	320f      	adds	r2, #15
    8dca:	7812      	ldrb	r2, [r2, #0]
    8dcc:	3208      	adds	r2, #8
    8dce:	0152      	lsls	r2, r2, #5
    8dd0:	5cd3      	ldrb	r3, [r2, r3]
    8dd2:	b2db      	uxtb	r3, r3
    8dd4:	1c1a      	adds	r2, r3, #0
    8dd6:	2307      	movs	r3, #7
    8dd8:	4013      	ands	r3, r2
    8dda:	d11f      	bne.n	8e1c <usb_device_endpoint_set_config+0x274>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	681a      	ldr	r2, [r3, #0]
    8de0:	1c3b      	adds	r3, r7, #0
    8de2:	330f      	adds	r3, #15
    8de4:	7818      	ldrb	r0, [r3, #0]
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	1c39      	adds	r1, r7, #0
    8dec:	310f      	adds	r1, #15
    8dee:	7809      	ldrb	r1, [r1, #0]
    8df0:	3108      	adds	r1, #8
    8df2:	0149      	lsls	r1, r1, #5
    8df4:	5ccb      	ldrb	r3, [r1, r3]
    8df6:	b2db      	uxtb	r3, r3
    8df8:	2102      	movs	r1, #2
    8dfa:	430b      	orrs	r3, r1
    8dfc:	b2d9      	uxtb	r1, r3
    8dfe:	1c03      	adds	r3, r0, #0
    8e00:	3308      	adds	r3, #8
    8e02:	015b      	lsls	r3, r3, #5
    8e04:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	681a      	ldr	r2, [r3, #0]
    8e0a:	1c3b      	adds	r3, r7, #0
    8e0c:	330f      	adds	r3, #15
    8e0e:	781b      	ldrb	r3, [r3, #0]
    8e10:	3308      	adds	r3, #8
    8e12:	015b      	lsls	r3, r3, #5
    8e14:	18d3      	adds	r3, r2, r3
    8e16:	2240      	movs	r2, #64	; 0x40
    8e18:	715a      	strb	r2, [r3, #5]
    8e1a:	e001      	b.n	8e20 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    8e1c:	231c      	movs	r3, #28
    8e1e:	e124      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    8e20:	e0cf      	b.n	8fc2 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    8e22:	1c3b      	adds	r3, r7, #0
    8e24:	330e      	adds	r3, #14
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d02e      	beq.n	8e8a <usb_device_endpoint_set_config+0x2e2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	681b      	ldr	r3, [r3, #0]
    8e30:	1c3a      	adds	r2, r7, #0
    8e32:	320f      	adds	r2, #15
    8e34:	7812      	ldrb	r2, [r2, #0]
    8e36:	3208      	adds	r2, #8
    8e38:	0152      	lsls	r2, r2, #5
    8e3a:	5cd3      	ldrb	r3, [r2, r3]
    8e3c:	b2db      	uxtb	r3, r3
    8e3e:	1c1a      	adds	r2, r3, #0
    8e40:	2370      	movs	r3, #112	; 0x70
    8e42:	4013      	ands	r3, r2
    8e44:	d11f      	bne.n	8e86 <usb_device_endpoint_set_config+0x2de>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    8e46:	687b      	ldr	r3, [r7, #4]
    8e48:	681a      	ldr	r2, [r3, #0]
    8e4a:	1c3b      	adds	r3, r7, #0
    8e4c:	330f      	adds	r3, #15
    8e4e:	7818      	ldrb	r0, [r3, #0]
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	681b      	ldr	r3, [r3, #0]
    8e54:	1c39      	adds	r1, r7, #0
    8e56:	310f      	adds	r1, #15
    8e58:	7809      	ldrb	r1, [r1, #0]
    8e5a:	3108      	adds	r1, #8
    8e5c:	0149      	lsls	r1, r1, #5
    8e5e:	5ccb      	ldrb	r3, [r1, r3]
    8e60:	b2db      	uxtb	r3, r3
    8e62:	2130      	movs	r1, #48	; 0x30
    8e64:	430b      	orrs	r3, r1
    8e66:	b2d9      	uxtb	r1, r3
    8e68:	1c03      	adds	r3, r0, #0
    8e6a:	3308      	adds	r3, #8
    8e6c:	015b      	lsls	r3, r3, #5
    8e6e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8e70:	687b      	ldr	r3, [r7, #4]
    8e72:	681a      	ldr	r2, [r3, #0]
    8e74:	1c3b      	adds	r3, r7, #0
    8e76:	330f      	adds	r3, #15
    8e78:	781b      	ldrb	r3, [r3, #0]
    8e7a:	3308      	adds	r3, #8
    8e7c:	015b      	lsls	r3, r3, #5
    8e7e:	18d3      	adds	r3, r2, r3
    8e80:	2280      	movs	r2, #128	; 0x80
    8e82:	711a      	strb	r2, [r3, #4]
    8e84:	e030      	b.n	8ee8 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    8e86:	231c      	movs	r3, #28
    8e88:	e0ef      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	681b      	ldr	r3, [r3, #0]
    8e8e:	1c3a      	adds	r2, r7, #0
    8e90:	320f      	adds	r2, #15
    8e92:	7812      	ldrb	r2, [r2, #0]
    8e94:	3208      	adds	r2, #8
    8e96:	0152      	lsls	r2, r2, #5
    8e98:	5cd3      	ldrb	r3, [r2, r3]
    8e9a:	b2db      	uxtb	r3, r3
    8e9c:	1c1a      	adds	r2, r3, #0
    8e9e:	2307      	movs	r3, #7
    8ea0:	4013      	ands	r3, r2
    8ea2:	d11f      	bne.n	8ee4 <usb_device_endpoint_set_config+0x33c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	681a      	ldr	r2, [r3, #0]
    8ea8:	1c3b      	adds	r3, r7, #0
    8eaa:	330f      	adds	r3, #15
    8eac:	7818      	ldrb	r0, [r3, #0]
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	681b      	ldr	r3, [r3, #0]
    8eb2:	1c39      	adds	r1, r7, #0
    8eb4:	310f      	adds	r1, #15
    8eb6:	7809      	ldrb	r1, [r1, #0]
    8eb8:	3108      	adds	r1, #8
    8eba:	0149      	lsls	r1, r1, #5
    8ebc:	5ccb      	ldrb	r3, [r1, r3]
    8ebe:	b2db      	uxtb	r3, r3
    8ec0:	2103      	movs	r1, #3
    8ec2:	430b      	orrs	r3, r1
    8ec4:	b2d9      	uxtb	r1, r3
    8ec6:	1c03      	adds	r3, r0, #0
    8ec8:	3308      	adds	r3, #8
    8eca:	015b      	lsls	r3, r3, #5
    8ecc:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	681a      	ldr	r2, [r3, #0]
    8ed2:	1c3b      	adds	r3, r7, #0
    8ed4:	330f      	adds	r3, #15
    8ed6:	781b      	ldrb	r3, [r3, #0]
    8ed8:	3308      	adds	r3, #8
    8eda:	015b      	lsls	r3, r3, #5
    8edc:	18d3      	adds	r3, r2, r3
    8ede:	2240      	movs	r2, #64	; 0x40
    8ee0:	715a      	strb	r2, [r3, #5]
    8ee2:	e001      	b.n	8ee8 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    8ee4:	231c      	movs	r3, #28
    8ee6:	e0c0      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    8ee8:	e06b      	b.n	8fc2 <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    8eea:	1c3b      	adds	r3, r7, #0
    8eec:	330e      	adds	r3, #14
    8eee:	781b      	ldrb	r3, [r3, #0]
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	d035      	beq.n	8f60 <usb_device_endpoint_set_config+0x3b8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	681b      	ldr	r3, [r3, #0]
    8ef8:	1c3a      	adds	r2, r7, #0
    8efa:	320f      	adds	r2, #15
    8efc:	7812      	ldrb	r2, [r2, #0]
    8efe:	3208      	adds	r2, #8
    8f00:	0152      	lsls	r2, r2, #5
    8f02:	5cd3      	ldrb	r3, [r2, r3]
    8f04:	b2db      	uxtb	r3, r3
    8f06:	1c1a      	adds	r2, r3, #0
    8f08:	2370      	movs	r3, #112	; 0x70
    8f0a:	4013      	ands	r3, r2
    8f0c:	d11f      	bne.n	8f4e <usb_device_endpoint_set_config+0x3a6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	681a      	ldr	r2, [r3, #0]
    8f12:	1c3b      	adds	r3, r7, #0
    8f14:	330f      	adds	r3, #15
    8f16:	7818      	ldrb	r0, [r3, #0]
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	681b      	ldr	r3, [r3, #0]
    8f1c:	1c39      	adds	r1, r7, #0
    8f1e:	310f      	adds	r1, #15
    8f20:	7809      	ldrb	r1, [r1, #0]
    8f22:	3108      	adds	r1, #8
    8f24:	0149      	lsls	r1, r1, #5
    8f26:	5ccb      	ldrb	r3, [r1, r3]
    8f28:	b2db      	uxtb	r3, r3
    8f2a:	2140      	movs	r1, #64	; 0x40
    8f2c:	430b      	orrs	r3, r1
    8f2e:	b2d9      	uxtb	r1, r3
    8f30:	1c03      	adds	r3, r0, #0
    8f32:	3308      	adds	r3, #8
    8f34:	015b      	lsls	r3, r3, #5
    8f36:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	681a      	ldr	r2, [r3, #0]
    8f3c:	1c3b      	adds	r3, r7, #0
    8f3e:	330f      	adds	r3, #15
    8f40:	781b      	ldrb	r3, [r3, #0]
    8f42:	3308      	adds	r3, #8
    8f44:	015b      	lsls	r3, r3, #5
    8f46:	18d3      	adds	r3, r2, r3
    8f48:	2280      	movs	r2, #128	; 0x80
    8f4a:	711a      	strb	r2, [r3, #4]
    8f4c:	e037      	b.n	8fbe <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    8f4e:	231c      	movs	r3, #28
    8f50:	e08b      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
    8f52:	46c0      	nop			; (mov r8, r8)
    8f54:	0000ac28 	.word	0x0000ac28
    8f58:	20003b34 	.word	0x20003b34
    8f5c:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	1c3a      	adds	r2, r7, #0
    8f66:	320f      	adds	r2, #15
    8f68:	7812      	ldrb	r2, [r2, #0]
    8f6a:	3208      	adds	r2, #8
    8f6c:	0152      	lsls	r2, r2, #5
    8f6e:	5cd3      	ldrb	r3, [r2, r3]
    8f70:	b2db      	uxtb	r3, r3
    8f72:	1c1a      	adds	r2, r3, #0
    8f74:	2307      	movs	r3, #7
    8f76:	4013      	ands	r3, r2
    8f78:	d11f      	bne.n	8fba <usb_device_endpoint_set_config+0x412>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    8f7a:	687b      	ldr	r3, [r7, #4]
    8f7c:	681a      	ldr	r2, [r3, #0]
    8f7e:	1c3b      	adds	r3, r7, #0
    8f80:	330f      	adds	r3, #15
    8f82:	7818      	ldrb	r0, [r3, #0]
    8f84:	687b      	ldr	r3, [r7, #4]
    8f86:	681b      	ldr	r3, [r3, #0]
    8f88:	1c39      	adds	r1, r7, #0
    8f8a:	310f      	adds	r1, #15
    8f8c:	7809      	ldrb	r1, [r1, #0]
    8f8e:	3108      	adds	r1, #8
    8f90:	0149      	lsls	r1, r1, #5
    8f92:	5ccb      	ldrb	r3, [r1, r3]
    8f94:	b2db      	uxtb	r3, r3
    8f96:	2104      	movs	r1, #4
    8f98:	430b      	orrs	r3, r1
    8f9a:	b2d9      	uxtb	r1, r3
    8f9c:	1c03      	adds	r3, r0, #0
    8f9e:	3308      	adds	r3, #8
    8fa0:	015b      	lsls	r3, r3, #5
    8fa2:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	681a      	ldr	r2, [r3, #0]
    8fa8:	1c3b      	adds	r3, r7, #0
    8faa:	330f      	adds	r3, #15
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	3308      	adds	r3, #8
    8fb0:	015b      	lsls	r3, r3, #5
    8fb2:	18d3      	adds	r3, r2, r3
    8fb4:	2240      	movs	r2, #64	; 0x40
    8fb6:	715a      	strb	r2, [r3, #5]
    8fb8:	e001      	b.n	8fbe <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    8fba:	231c      	movs	r3, #28
    8fbc:	e055      	b.n	906a <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    8fbe:	e000      	b.n	8fc2 <usb_device_endpoint_set_config+0x41a>

		default:
			break;
    8fc0:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    8fc2:	1c3b      	adds	r3, r7, #0
    8fc4:	330f      	adds	r3, #15
    8fc6:	7818      	ldrb	r0, [r3, #0]
    8fc8:	1c3b      	adds	r3, r7, #0
    8fca:	330e      	adds	r3, #14
    8fcc:	781b      	ldrb	r3, [r3, #0]
    8fce:	683a      	ldr	r2, [r7, #0]
    8fd0:	7852      	ldrb	r2, [r2, #1]
    8fd2:	1c11      	adds	r1, r2, #0
    8fd4:	2207      	movs	r2, #7
    8fd6:	400a      	ands	r2, r1
    8fd8:	b2d1      	uxtb	r1, r2
    8fda:	4a26      	ldr	r2, [pc, #152]	; (9074 <usb_device_endpoint_set_config+0x4cc>)
    8fdc:	0040      	lsls	r0, r0, #1
    8fde:	18c3      	adds	r3, r0, r3
    8fe0:	011b      	lsls	r3, r3, #4
    8fe2:	18d3      	adds	r3, r2, r3
    8fe4:	2207      	movs	r2, #7
    8fe6:	400a      	ands	r2, r1
    8fe8:	0712      	lsls	r2, r2, #28
    8fea:	6858      	ldr	r0, [r3, #4]
    8fec:	4922      	ldr	r1, [pc, #136]	; (9078 <usb_device_endpoint_set_config+0x4d0>)
    8fee:	4001      	ands	r1, r0
    8ff0:	430a      	orrs	r2, r1
    8ff2:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    8ff4:	683b      	ldr	r3, [r7, #0]
    8ff6:	789b      	ldrb	r3, [r3, #2]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d01b      	beq.n	9034 <usb_device_endpoint_set_config+0x48c>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    8ffc:	1c3b      	adds	r3, r7, #0
    8ffe:	330f      	adds	r3, #15
    9000:	781c      	ldrb	r4, [r3, #0]
    9002:	1c3b      	adds	r3, r7, #0
    9004:	330e      	adds	r3, #14
    9006:	7818      	ldrb	r0, [r3, #0]
    9008:	1c3b      	adds	r3, r7, #0
    900a:	330f      	adds	r3, #15
    900c:	7819      	ldrb	r1, [r3, #0]
    900e:	1c3b      	adds	r3, r7, #0
    9010:	330e      	adds	r3, #14
    9012:	781b      	ldrb	r3, [r3, #0]
    9014:	4a17      	ldr	r2, [pc, #92]	; (9074 <usb_device_endpoint_set_config+0x4cc>)
    9016:	0049      	lsls	r1, r1, #1
    9018:	18cb      	adds	r3, r1, r3
    901a:	011b      	lsls	r3, r3, #4
    901c:	18d3      	adds	r3, r2, r3
    901e:	685b      	ldr	r3, [r3, #4]
    9020:	2280      	movs	r2, #128	; 0x80
    9022:	0612      	lsls	r2, r2, #24
    9024:	431a      	orrs	r2, r3
    9026:	4913      	ldr	r1, [pc, #76]	; (9074 <usb_device_endpoint_set_config+0x4cc>)
    9028:	0063      	lsls	r3, r4, #1
    902a:	181b      	adds	r3, r3, r0
    902c:	011b      	lsls	r3, r3, #4
    902e:	18cb      	adds	r3, r1, r3
    9030:	605a      	str	r2, [r3, #4]
    9032:	e019      	b.n	9068 <usb_device_endpoint_set_config+0x4c0>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9034:	1c3b      	adds	r3, r7, #0
    9036:	330f      	adds	r3, #15
    9038:	781c      	ldrb	r4, [r3, #0]
    903a:	1c3b      	adds	r3, r7, #0
    903c:	330e      	adds	r3, #14
    903e:	7818      	ldrb	r0, [r3, #0]
    9040:	1c3b      	adds	r3, r7, #0
    9042:	330f      	adds	r3, #15
    9044:	7819      	ldrb	r1, [r3, #0]
    9046:	1c3b      	adds	r3, r7, #0
    9048:	330e      	adds	r3, #14
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	4a09      	ldr	r2, [pc, #36]	; (9074 <usb_device_endpoint_set_config+0x4cc>)
    904e:	0049      	lsls	r1, r1, #1
    9050:	18cb      	adds	r3, r1, r3
    9052:	011b      	lsls	r3, r3, #4
    9054:	18d3      	adds	r3, r2, r3
    9056:	685b      	ldr	r3, [r3, #4]
    9058:	005b      	lsls	r3, r3, #1
    905a:	085a      	lsrs	r2, r3, #1
    905c:	4905      	ldr	r1, [pc, #20]	; (9074 <usb_device_endpoint_set_config+0x4cc>)
    905e:	0063      	lsls	r3, r4, #1
    9060:	181b      	adds	r3, r3, r0
    9062:	011b      	lsls	r3, r3, #4
    9064:	18cb      	adds	r3, r1, r3
    9066:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    9068:	2300      	movs	r3, #0
}
    906a:	1c18      	adds	r0, r3, #0
    906c:	46bd      	mov	sp, r7
    906e:	b005      	add	sp, #20
    9070:	bd90      	pop	{r4, r7, pc}
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	20003b34 	.word	0x20003b34
    9078:	8fffffff 	.word	0x8fffffff

0000907c <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    907c:	b580      	push	{r7, lr}
    907e:	b084      	sub	sp, #16
    9080:	af00      	add	r7, sp, #0
    9082:	6078      	str	r0, [r7, #4]
    9084:	1c0a      	adds	r2, r1, #0
    9086:	1cfb      	adds	r3, r7, #3
    9088:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    908a:	1c3b      	adds	r3, r7, #0
    908c:	330f      	adds	r3, #15
    908e:	1cfa      	adds	r2, r7, #3
    9090:	7811      	ldrb	r1, [r2, #0]
    9092:	220f      	movs	r2, #15
    9094:	400a      	ands	r2, r1
    9096:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    9098:	1cfb      	adds	r3, r7, #3
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	b25b      	sxtb	r3, r3
    909e:	2b00      	cmp	r3, #0
    90a0:	da14      	bge.n	90cc <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    90a2:	687b      	ldr	r3, [r7, #4]
    90a4:	681a      	ldr	r2, [r3, #0]
    90a6:	1c3b      	adds	r3, r7, #0
    90a8:	330f      	adds	r3, #15
    90aa:	781b      	ldrb	r3, [r3, #0]
    90ac:	3308      	adds	r3, #8
    90ae:	015b      	lsls	r3, r3, #5
    90b0:	18d3      	adds	r3, r2, r3
    90b2:	2280      	movs	r2, #128	; 0x80
    90b4:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    90b6:	687b      	ldr	r3, [r7, #4]
    90b8:	681a      	ldr	r2, [r3, #0]
    90ba:	1c3b      	adds	r3, r7, #0
    90bc:	330f      	adds	r3, #15
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	3308      	adds	r3, #8
    90c2:	015b      	lsls	r3, r3, #5
    90c4:	18d3      	adds	r3, r2, r3
    90c6:	2202      	movs	r2, #2
    90c8:	71da      	strb	r2, [r3, #7]
    90ca:	e013      	b.n	90f4 <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	681a      	ldr	r2, [r3, #0]
    90d0:	1c3b      	adds	r3, r7, #0
    90d2:	330f      	adds	r3, #15
    90d4:	781b      	ldrb	r3, [r3, #0]
    90d6:	3308      	adds	r3, #8
    90d8:	015b      	lsls	r3, r3, #5
    90da:	18d3      	adds	r3, r2, r3
    90dc:	2240      	movs	r2, #64	; 0x40
    90de:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    90e0:	687b      	ldr	r3, [r7, #4]
    90e2:	681a      	ldr	r2, [r3, #0]
    90e4:	1c3b      	adds	r3, r7, #0
    90e6:	330f      	adds	r3, #15
    90e8:	781b      	ldrb	r3, [r3, #0]
    90ea:	3308      	adds	r3, #8
    90ec:	015b      	lsls	r3, r3, #5
    90ee:	18d3      	adds	r3, r2, r3
    90f0:	2201      	movs	r2, #1
    90f2:	71da      	strb	r2, [r3, #7]
	}
}
    90f4:	46bd      	mov	sp, r7
    90f6:	b004      	add	sp, #16
    90f8:	bd80      	pop	{r7, pc}
    90fa:	46c0      	nop			; (mov r8, r8)

000090fc <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    90fc:	b580      	push	{r7, lr}
    90fe:	b084      	sub	sp, #16
    9100:	af00      	add	r7, sp, #0
    9102:	6078      	str	r0, [r7, #4]
    9104:	1c0a      	adds	r2, r1, #0
    9106:	1cfb      	adds	r3, r7, #3
    9108:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    910a:	1c3b      	adds	r3, r7, #0
    910c:	330f      	adds	r3, #15
    910e:	1cfa      	adds	r2, r7, #3
    9110:	7811      	ldrb	r1, [r2, #0]
    9112:	220f      	movs	r2, #15
    9114:	400a      	ands	r2, r1
    9116:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    9118:	1cfb      	adds	r3, r7, #3
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	b25b      	sxtb	r3, r3
    911e:	2b00      	cmp	r3, #0
    9120:	da10      	bge.n	9144 <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    9122:	687b      	ldr	r3, [r7, #4]
    9124:	681a      	ldr	r2, [r3, #0]
    9126:	1c3b      	adds	r3, r7, #0
    9128:	330f      	adds	r3, #15
    912a:	781b      	ldrb	r3, [r3, #0]
    912c:	3308      	adds	r3, #8
    912e:	015b      	lsls	r3, r3, #5
    9130:	18d3      	adds	r3, r2, r3
    9132:	799b      	ldrb	r3, [r3, #6]
    9134:	b2db      	uxtb	r3, r3
    9136:	1c1a      	adds	r2, r3, #0
    9138:	2320      	movs	r3, #32
    913a:	4013      	ands	r3, r2
    913c:	1e5a      	subs	r2, r3, #1
    913e:	4193      	sbcs	r3, r2
    9140:	b2db      	uxtb	r3, r3
    9142:	e00f      	b.n	9164 <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    9144:	687b      	ldr	r3, [r7, #4]
    9146:	681a      	ldr	r2, [r3, #0]
    9148:	1c3b      	adds	r3, r7, #0
    914a:	330f      	adds	r3, #15
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	3308      	adds	r3, #8
    9150:	015b      	lsls	r3, r3, #5
    9152:	18d3      	adds	r3, r2, r3
    9154:	799b      	ldrb	r3, [r3, #6]
    9156:	b2db      	uxtb	r3, r3
    9158:	1c1a      	adds	r2, r3, #0
    915a:	2310      	movs	r3, #16
    915c:	4013      	ands	r3, r2
    915e:	1e5a      	subs	r2, r3, #1
    9160:	4193      	sbcs	r3, r2
    9162:	b2db      	uxtb	r3, r3
	}
}
    9164:	1c18      	adds	r0, r3, #0
    9166:	46bd      	mov	sp, r7
    9168:	b004      	add	sp, #16
    916a:	bd80      	pop	{r7, pc}

0000916c <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    916c:	b580      	push	{r7, lr}
    916e:	b084      	sub	sp, #16
    9170:	af00      	add	r7, sp, #0
    9172:	6078      	str	r0, [r7, #4]
    9174:	1c0a      	adds	r2, r1, #0
    9176:	1cfb      	adds	r3, r7, #3
    9178:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    917a:	1c3b      	adds	r3, r7, #0
    917c:	330f      	adds	r3, #15
    917e:	1cfa      	adds	r2, r7, #3
    9180:	7811      	ldrb	r1, [r2, #0]
    9182:	220f      	movs	r2, #15
    9184:	400a      	ands	r2, r1
    9186:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    9188:	1cfb      	adds	r3, r7, #3
    918a:	781b      	ldrb	r3, [r3, #0]
    918c:	b25b      	sxtb	r3, r3
    918e:	2b00      	cmp	r3, #0
    9190:	da0a      	bge.n	91a8 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9192:	687b      	ldr	r3, [r7, #4]
    9194:	681a      	ldr	r2, [r3, #0]
    9196:	1c3b      	adds	r3, r7, #0
    9198:	330f      	adds	r3, #15
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	3308      	adds	r3, #8
    919e:	015b      	lsls	r3, r3, #5
    91a0:	18d3      	adds	r3, r2, r3
    91a2:	2220      	movs	r2, #32
    91a4:	715a      	strb	r2, [r3, #5]
    91a6:	e009      	b.n	91bc <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	681a      	ldr	r2, [r3, #0]
    91ac:	1c3b      	adds	r3, r7, #0
    91ae:	330f      	adds	r3, #15
    91b0:	781b      	ldrb	r3, [r3, #0]
    91b2:	3308      	adds	r3, #8
    91b4:	015b      	lsls	r3, r3, #5
    91b6:	18d3      	adds	r3, r2, r3
    91b8:	2210      	movs	r2, #16
    91ba:	715a      	strb	r2, [r3, #5]
	}
}
    91bc:	46bd      	mov	sp, r7
    91be:	b004      	add	sp, #16
    91c0:	bd80      	pop	{r7, pc}
    91c2:	46c0      	nop			; (mov r8, r8)

000091c4 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    91c4:	b580      	push	{r7, lr}
    91c6:	b084      	sub	sp, #16
    91c8:	af00      	add	r7, sp, #0
    91ca:	6078      	str	r0, [r7, #4]
    91cc:	1c0a      	adds	r2, r1, #0
    91ce:	1cfb      	adds	r3, r7, #3
    91d0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    91d2:	1c3b      	adds	r3, r7, #0
    91d4:	330f      	adds	r3, #15
    91d6:	1cfa      	adds	r2, r7, #3
    91d8:	7811      	ldrb	r1, [r2, #0]
    91da:	220f      	movs	r2, #15
    91dc:	400a      	ands	r2, r1
    91de:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    91e0:	1cfb      	adds	r3, r7, #3
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	b25b      	sxtb	r3, r3
    91e6:	2b00      	cmp	r3, #0
    91e8:	da3a      	bge.n	9260 <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    91ea:	687b      	ldr	r3, [r7, #4]
    91ec:	681a      	ldr	r2, [r3, #0]
    91ee:	1c3b      	adds	r3, r7, #0
    91f0:	330f      	adds	r3, #15
    91f2:	781b      	ldrb	r3, [r3, #0]
    91f4:	3308      	adds	r3, #8
    91f6:	015b      	lsls	r3, r3, #5
    91f8:	18d3      	adds	r3, r2, r3
    91fa:	799b      	ldrb	r3, [r3, #6]
    91fc:	b2db      	uxtb	r3, r3
    91fe:	1c1a      	adds	r2, r3, #0
    9200:	2320      	movs	r3, #32
    9202:	4013      	ands	r3, r2
    9204:	d066      	beq.n	92d4 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    9206:	687b      	ldr	r3, [r7, #4]
    9208:	681a      	ldr	r2, [r3, #0]
    920a:	1c3b      	adds	r3, r7, #0
    920c:	330f      	adds	r3, #15
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	3308      	adds	r3, #8
    9212:	015b      	lsls	r3, r3, #5
    9214:	18d3      	adds	r3, r2, r3
    9216:	2220      	movs	r2, #32
    9218:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    921a:	687b      	ldr	r3, [r7, #4]
    921c:	681a      	ldr	r2, [r3, #0]
    921e:	1c3b      	adds	r3, r7, #0
    9220:	330f      	adds	r3, #15
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	3308      	adds	r3, #8
    9226:	015b      	lsls	r3, r3, #5
    9228:	18d3      	adds	r3, r2, r3
    922a:	79db      	ldrb	r3, [r3, #7]
    922c:	b2db      	uxtb	r3, r3
    922e:	1c1a      	adds	r2, r3, #0
    9230:	2340      	movs	r3, #64	; 0x40
    9232:	4013      	ands	r3, r2
    9234:	d04e      	beq.n	92d4 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9236:	687b      	ldr	r3, [r7, #4]
    9238:	681a      	ldr	r2, [r3, #0]
    923a:	1c3b      	adds	r3, r7, #0
    923c:	330f      	adds	r3, #15
    923e:	781b      	ldrb	r3, [r3, #0]
    9240:	3308      	adds	r3, #8
    9242:	015b      	lsls	r3, r3, #5
    9244:	18d3      	adds	r3, r2, r3
    9246:	2240      	movs	r2, #64	; 0x40
    9248:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    924a:	687b      	ldr	r3, [r7, #4]
    924c:	681a      	ldr	r2, [r3, #0]
    924e:	1c3b      	adds	r3, r7, #0
    9250:	330f      	adds	r3, #15
    9252:	781b      	ldrb	r3, [r3, #0]
    9254:	3308      	adds	r3, #8
    9256:	015b      	lsls	r3, r3, #5
    9258:	18d3      	adds	r3, r2, r3
    925a:	2202      	movs	r2, #2
    925c:	711a      	strb	r2, [r3, #4]
    925e:	e039      	b.n	92d4 <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    9260:	687b      	ldr	r3, [r7, #4]
    9262:	681a      	ldr	r2, [r3, #0]
    9264:	1c3b      	adds	r3, r7, #0
    9266:	330f      	adds	r3, #15
    9268:	781b      	ldrb	r3, [r3, #0]
    926a:	3308      	adds	r3, #8
    926c:	015b      	lsls	r3, r3, #5
    926e:	18d3      	adds	r3, r2, r3
    9270:	799b      	ldrb	r3, [r3, #6]
    9272:	b2db      	uxtb	r3, r3
    9274:	1c1a      	adds	r2, r3, #0
    9276:	2310      	movs	r3, #16
    9278:	4013      	ands	r3, r2
    927a:	d02b      	beq.n	92d4 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	681a      	ldr	r2, [r3, #0]
    9280:	1c3b      	adds	r3, r7, #0
    9282:	330f      	adds	r3, #15
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	3308      	adds	r3, #8
    9288:	015b      	lsls	r3, r3, #5
    928a:	18d3      	adds	r3, r2, r3
    928c:	2210      	movs	r2, #16
    928e:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	681a      	ldr	r2, [r3, #0]
    9294:	1c3b      	adds	r3, r7, #0
    9296:	330f      	adds	r3, #15
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	3308      	adds	r3, #8
    929c:	015b      	lsls	r3, r3, #5
    929e:	18d3      	adds	r3, r2, r3
    92a0:	79db      	ldrb	r3, [r3, #7]
    92a2:	b2db      	uxtb	r3, r3
    92a4:	1c1a      	adds	r2, r3, #0
    92a6:	2320      	movs	r3, #32
    92a8:	4013      	ands	r3, r2
    92aa:	d013      	beq.n	92d4 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	681a      	ldr	r2, [r3, #0]
    92b0:	1c3b      	adds	r3, r7, #0
    92b2:	330f      	adds	r3, #15
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	3308      	adds	r3, #8
    92b8:	015b      	lsls	r3, r3, #5
    92ba:	18d3      	adds	r3, r2, r3
    92bc:	2220      	movs	r2, #32
    92be:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    92c0:	687b      	ldr	r3, [r7, #4]
    92c2:	681a      	ldr	r2, [r3, #0]
    92c4:	1c3b      	adds	r3, r7, #0
    92c6:	330f      	adds	r3, #15
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	3308      	adds	r3, #8
    92cc:	015b      	lsls	r3, r3, #5
    92ce:	18d3      	adds	r3, r2, r3
    92d0:	2201      	movs	r2, #1
    92d2:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    92d4:	46bd      	mov	sp, r7
    92d6:	b004      	add	sp, #16
    92d8:	bd80      	pop	{r7, pc}
    92da:	46c0      	nop			; (mov r8, r8)

000092dc <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    92dc:	b580      	push	{r7, lr}
    92de:	b086      	sub	sp, #24
    92e0:	af00      	add	r7, sp, #0
    92e2:	60f8      	str	r0, [r7, #12]
    92e4:	607a      	str	r2, [r7, #4]
    92e6:	603b      	str	r3, [r7, #0]
    92e8:	1c3b      	adds	r3, r7, #0
    92ea:	330b      	adds	r3, #11
    92ec:	1c0a      	adds	r2, r1, #0
    92ee:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    92f0:	68fb      	ldr	r3, [r7, #12]
    92f2:	681b      	ldr	r3, [r3, #0]
    92f4:	1c3a      	adds	r2, r7, #0
    92f6:	320b      	adds	r2, #11
    92f8:	7812      	ldrb	r2, [r2, #0]
    92fa:	3208      	adds	r2, #8
    92fc:	0152      	lsls	r2, r2, #5
    92fe:	5cd3      	ldrb	r3, [r2, r3]
    9300:	b2db      	uxtb	r3, r3
    9302:	091b      	lsrs	r3, r3, #4
    9304:	1c1a      	adds	r2, r3, #0
    9306:	2307      	movs	r3, #7
    9308:	4013      	ands	r3, r2
    930a:	b2da      	uxtb	r2, r3
    930c:	1c3b      	adds	r3, r7, #0
    930e:	3317      	adds	r3, #23
    9310:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    9312:	1c3b      	adds	r3, r7, #0
    9314:	3317      	adds	r3, #23
    9316:	781b      	ldrb	r3, [r3, #0]
    9318:	2b00      	cmp	r3, #0
    931a:	d101      	bne.n	9320 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    931c:	231c      	movs	r3, #28
    931e:	e031      	b.n	9384 <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    9320:	1c3b      	adds	r3, r7, #0
    9322:	330b      	adds	r3, #11
    9324:	781b      	ldrb	r3, [r3, #0]
    9326:	687a      	ldr	r2, [r7, #4]
    9328:	4918      	ldr	r1, [pc, #96]	; (938c <usb_device_endpoint_write_buffer_job+0xb0>)
    932a:	015b      	lsls	r3, r3, #5
    932c:	18cb      	adds	r3, r1, r3
    932e:	3310      	adds	r3, #16
    9330:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    9332:	1c3b      	adds	r3, r7, #0
    9334:	330b      	adds	r3, #11
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	4a14      	ldr	r2, [pc, #80]	; (938c <usb_device_endpoint_write_buffer_job+0xb0>)
    933a:	015b      	lsls	r3, r3, #5
    933c:	18d3      	adds	r3, r2, r3
    933e:	3310      	adds	r3, #16
    9340:	6859      	ldr	r1, [r3, #4]
    9342:	4a13      	ldr	r2, [pc, #76]	; (9390 <usb_device_endpoint_write_buffer_job+0xb4>)
    9344:	400a      	ands	r2, r1
    9346:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    9348:	1c3b      	adds	r3, r7, #0
    934a:	330b      	adds	r3, #11
    934c:	781b      	ldrb	r3, [r3, #0]
    934e:	683a      	ldr	r2, [r7, #0]
    9350:	b292      	uxth	r2, r2
    9352:	0492      	lsls	r2, r2, #18
    9354:	0c92      	lsrs	r2, r2, #18
    9356:	b292      	uxth	r2, r2
    9358:	490c      	ldr	r1, [pc, #48]	; (938c <usb_device_endpoint_write_buffer_job+0xb0>)
    935a:	015b      	lsls	r3, r3, #5
    935c:	18cb      	adds	r3, r1, r3
    935e:	3310      	adds	r3, #16
    9360:	0492      	lsls	r2, r2, #18
    9362:	0c92      	lsrs	r2, r2, #18
    9364:	6859      	ldr	r1, [r3, #4]
    9366:	0b89      	lsrs	r1, r1, #14
    9368:	0389      	lsls	r1, r1, #14
    936a:	430a      	orrs	r2, r1
    936c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    936e:	68fb      	ldr	r3, [r7, #12]
    9370:	681a      	ldr	r2, [r3, #0]
    9372:	1c3b      	adds	r3, r7, #0
    9374:	330b      	adds	r3, #11
    9376:	781b      	ldrb	r3, [r3, #0]
    9378:	3308      	adds	r3, #8
    937a:	015b      	lsls	r3, r3, #5
    937c:	18d3      	adds	r3, r2, r3
    937e:	2280      	movs	r2, #128	; 0x80
    9380:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    9382:	2300      	movs	r3, #0
}
    9384:	1c18      	adds	r0, r3, #0
    9386:	46bd      	mov	sp, r7
    9388:	b006      	add	sp, #24
    938a:	bd80      	pop	{r7, pc}
    938c:	20003b34 	.word	0x20003b34
    9390:	f0003fff 	.word	0xf0003fff

00009394 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9394:	b580      	push	{r7, lr}
    9396:	b086      	sub	sp, #24
    9398:	af00      	add	r7, sp, #0
    939a:	60f8      	str	r0, [r7, #12]
    939c:	607a      	str	r2, [r7, #4]
    939e:	603b      	str	r3, [r7, #0]
    93a0:	1c3b      	adds	r3, r7, #0
    93a2:	330b      	adds	r3, #11
    93a4:	1c0a      	adds	r2, r1, #0
    93a6:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	681b      	ldr	r3, [r3, #0]
    93ac:	1c3a      	adds	r2, r7, #0
    93ae:	320b      	adds	r2, #11
    93b0:	7812      	ldrb	r2, [r2, #0]
    93b2:	3208      	adds	r2, #8
    93b4:	0152      	lsls	r2, r2, #5
    93b6:	5cd2      	ldrb	r2, [r2, r3]
    93b8:	2307      	movs	r3, #7
    93ba:	4013      	ands	r3, r2
    93bc:	b2da      	uxtb	r2, r3
    93be:	1c3b      	adds	r3, r7, #0
    93c0:	3317      	adds	r3, #23
    93c2:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    93c4:	1c3b      	adds	r3, r7, #0
    93c6:	3317      	adds	r3, #23
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	2b00      	cmp	r3, #0
    93cc:	d101      	bne.n	93d2 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    93ce:	231c      	movs	r3, #28
    93d0:	e02e      	b.n	9430 <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    93d2:	1c3b      	adds	r3, r7, #0
    93d4:	330b      	adds	r3, #11
    93d6:	781a      	ldrb	r2, [r3, #0]
    93d8:	6879      	ldr	r1, [r7, #4]
    93da:	4b17      	ldr	r3, [pc, #92]	; (9438 <usb_device_endpoint_read_buffer_job+0xa4>)
    93dc:	0152      	lsls	r2, r2, #5
    93de:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    93e0:	1c3b      	adds	r3, r7, #0
    93e2:	330b      	adds	r3, #11
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	683a      	ldr	r2, [r7, #0]
    93e8:	b292      	uxth	r2, r2
    93ea:	0492      	lsls	r2, r2, #18
    93ec:	0c92      	lsrs	r2, r2, #18
    93ee:	b292      	uxth	r2, r2
    93f0:	4911      	ldr	r1, [pc, #68]	; (9438 <usb_device_endpoint_read_buffer_job+0xa4>)
    93f2:	015b      	lsls	r3, r3, #5
    93f4:	18cb      	adds	r3, r1, r3
    93f6:	0492      	lsls	r2, r2, #18
    93f8:	0c92      	lsrs	r2, r2, #18
    93fa:	0392      	lsls	r2, r2, #14
    93fc:	6858      	ldr	r0, [r3, #4]
    93fe:	490f      	ldr	r1, [pc, #60]	; (943c <usb_device_endpoint_read_buffer_job+0xa8>)
    9400:	4001      	ands	r1, r0
    9402:	430a      	orrs	r2, r1
    9404:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9406:	1c3b      	adds	r3, r7, #0
    9408:	330b      	adds	r3, #11
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	4a0a      	ldr	r2, [pc, #40]	; (9438 <usb_device_endpoint_read_buffer_job+0xa4>)
    940e:	015b      	lsls	r3, r3, #5
    9410:	18d3      	adds	r3, r2, r3
    9412:	685a      	ldr	r2, [r3, #4]
    9414:	0b92      	lsrs	r2, r2, #14
    9416:	0392      	lsls	r2, r2, #14
    9418:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    941a:	68fb      	ldr	r3, [r7, #12]
    941c:	681a      	ldr	r2, [r3, #0]
    941e:	1c3b      	adds	r3, r7, #0
    9420:	330b      	adds	r3, #11
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	3308      	adds	r3, #8
    9426:	015b      	lsls	r3, r3, #5
    9428:	18d3      	adds	r3, r2, r3
    942a:	2240      	movs	r2, #64	; 0x40
    942c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    942e:	2300      	movs	r3, #0
}
    9430:	1c18      	adds	r0, r3, #0
    9432:	46bd      	mov	sp, r7
    9434:	b006      	add	sp, #24
    9436:	bd80      	pop	{r7, pc}
    9438:	20003b34 	.word	0x20003b34
    943c:	f0003fff 	.word	0xf0003fff

00009440 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    9440:	b580      	push	{r7, lr}
    9442:	b082      	sub	sp, #8
    9444:	af00      	add	r7, sp, #0
    9446:	6078      	str	r0, [r7, #4]
    9448:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    944a:	683a      	ldr	r2, [r7, #0]
    944c:	4b0c      	ldr	r3, [pc, #48]	; (9480 <usb_device_endpoint_setup_buffer_job+0x40>)
    944e:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    9450:	4b0b      	ldr	r3, [pc, #44]	; (9480 <usb_device_endpoint_setup_buffer_job+0x40>)
    9452:	6859      	ldr	r1, [r3, #4]
    9454:	4a0b      	ldr	r2, [pc, #44]	; (9484 <usb_device_endpoint_setup_buffer_job+0x44>)
    9456:	400a      	ands	r2, r1
    9458:	2180      	movs	r1, #128	; 0x80
    945a:	0289      	lsls	r1, r1, #10
    945c:	430a      	orrs	r2, r1
    945e:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    9460:	4b07      	ldr	r3, [pc, #28]	; (9480 <usb_device_endpoint_setup_buffer_job+0x40>)
    9462:	685a      	ldr	r2, [r3, #4]
    9464:	0b92      	lsrs	r2, r2, #14
    9466:	0392      	lsls	r2, r2, #14
    9468:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	681a      	ldr	r2, [r3, #0]
    946e:	2382      	movs	r3, #130	; 0x82
    9470:	005b      	lsls	r3, r3, #1
    9472:	2140      	movs	r1, #64	; 0x40
    9474:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    9476:	2300      	movs	r3, #0
}
    9478:	1c18      	adds	r0, r3, #0
    947a:	46bd      	mov	sp, r7
    947c:	b002      	add	sp, #8
    947e:	bd80      	pop	{r7, pc}
    9480:	20003b34 	.word	0x20003b34
    9484:	f0003fff 	.word	0xf0003fff

00009488 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    9488:	b580      	push	{r7, lr}
    948a:	b084      	sub	sp, #16
    948c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    948e:	4bcc      	ldr	r3, [pc, #816]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9490:	681b      	ldr	r3, [r3, #0]
    9492:	681a      	ldr	r2, [r3, #0]
    9494:	1c3b      	adds	r3, r7, #0
    9496:	3308      	adds	r3, #8
    9498:	8c12      	ldrh	r2, [r2, #32]
    949a:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    949c:	1c3b      	adds	r3, r7, #0
    949e:	3308      	adds	r3, #8
    94a0:	881b      	ldrh	r3, [r3, #0]
    94a2:	2b00      	cmp	r3, #0
    94a4:	d158      	bne.n	9558 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    94a6:	4bc6      	ldr	r3, [pc, #792]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    94a8:	681b      	ldr	r3, [r3, #0]
    94aa:	681a      	ldr	r2, [r3, #0]
    94ac:	1dbb      	adds	r3, r7, #6
    94ae:	8b92      	ldrh	r2, [r2, #28]
    94b0:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    94b2:	4bc3      	ldr	r3, [pc, #780]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    94b4:	681a      	ldr	r2, [r3, #0]
    94b6:	23ab      	movs	r3, #171	; 0xab
    94b8:	005b      	lsls	r3, r3, #1
    94ba:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    94bc:	1dba      	adds	r2, r7, #6
    94be:	8812      	ldrh	r2, [r2, #0]
    94c0:	4013      	ands	r3, r2
    94c2:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    94c4:	4bbe      	ldr	r3, [pc, #760]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    94c6:	6819      	ldr	r1, [r3, #0]
    94c8:	23aa      	movs	r3, #170	; 0xaa
    94ca:	005b      	lsls	r3, r3, #1
    94cc:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    94ce:	1d3b      	adds	r3, r7, #4
    94d0:	400a      	ands	r2, r1
    94d2:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    94d4:	2300      	movs	r3, #0
    94d6:	60fb      	str	r3, [r7, #12]
    94d8:	e03a      	b.n	9550 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    94da:	4bba      	ldr	r3, [pc, #744]	; (97c4 <_usb_device_interrupt_handler+0x33c>)
    94dc:	68fa      	ldr	r2, [r7, #12]
    94de:	0052      	lsls	r2, r2, #1
    94e0:	5ad3      	ldrh	r3, [r2, r3]
    94e2:	1dba      	adds	r2, r7, #6
    94e4:	8812      	ldrh	r2, [r2, #0]
    94e6:	4013      	ands	r3, r2
    94e8:	b29b      	uxth	r3, r3
    94ea:	2b00      	cmp	r3, #0
    94ec:	d007      	beq.n	94fe <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    94ee:	4bb4      	ldr	r3, [pc, #720]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    94f4:	4ab3      	ldr	r2, [pc, #716]	; (97c4 <_usb_device_interrupt_handler+0x33c>)
    94f6:	68f9      	ldr	r1, [r7, #12]
    94f8:	0049      	lsls	r1, r1, #1
    94fa:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    94fc:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    94fe:	4bb1      	ldr	r3, [pc, #708]	; (97c4 <_usb_device_interrupt_handler+0x33c>)
    9500:	68fa      	ldr	r2, [r7, #12]
    9502:	0052      	lsls	r2, r2, #1
    9504:	5ad3      	ldrh	r3, [r2, r3]
    9506:	1d3a      	adds	r2, r7, #4
    9508:	8812      	ldrh	r2, [r2, #0]
    950a:	4013      	ands	r3, r2
    950c:	b29b      	uxth	r3, r3
    950e:	2b00      	cmp	r3, #0
    9510:	d01b      	beq.n	954a <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    9512:	68fb      	ldr	r3, [r7, #12]
    9514:	2b06      	cmp	r3, #6
    9516:	d10c      	bne.n	9532 <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    9518:	4bab      	ldr	r3, [pc, #684]	; (97c8 <_usb_device_interrupt_handler+0x340>)
    951a:	891b      	ldrh	r3, [r3, #8]
    951c:	b29b      	uxth	r3, r3
    951e:	091b      	lsrs	r3, r3, #4
    9520:	055b      	lsls	r3, r3, #21
    9522:	0d5b      	lsrs	r3, r3, #21
    9524:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    9526:	1c1a      	adds	r2, r3, #0
    9528:	2380      	movs	r3, #128	; 0x80
    952a:	005b      	lsls	r3, r3, #1
    952c:	401a      	ands	r2, r3
    952e:	4ba7      	ldr	r3, [pc, #668]	; (97cc <_usb_device_interrupt_handler+0x344>)
    9530:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    9532:	4ba3      	ldr	r3, [pc, #652]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9534:	681b      	ldr	r3, [r3, #0]
    9536:	68fa      	ldr	r2, [r7, #12]
    9538:	322e      	adds	r2, #46	; 0x2e
    953a:	0092      	lsls	r2, r2, #2
    953c:	58d2      	ldr	r2, [r2, r3]
    953e:	4ba0      	ldr	r3, [pc, #640]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9540:	6819      	ldr	r1, [r3, #0]
    9542:	4ba2      	ldr	r3, [pc, #648]	; (97cc <_usb_device_interrupt_handler+0x344>)
    9544:	1c08      	adds	r0, r1, #0
    9546:	1c19      	adds	r1, r3, #0
    9548:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    954a:	68fb      	ldr	r3, [r7, #12]
    954c:	3301      	adds	r3, #1
    954e:	60fb      	str	r3, [r7, #12]
    9550:	68fb      	ldr	r3, [r7, #12]
    9552:	2b06      	cmp	r3, #6
    9554:	ddc1      	ble.n	94da <_usb_device_interrupt_handler+0x52>
    9556:	e239      	b.n	99cc <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    9558:	1c3b      	adds	r3, r7, #0
    955a:	330b      	adds	r3, #11
    955c:	2200      	movs	r2, #0
    955e:	701a      	strb	r2, [r3, #0]
    9560:	e22e      	b.n	99c0 <_usb_device_interrupt_handler+0x538>

			if (ep_inst & (1 << i)) {
    9562:	1c3b      	adds	r3, r7, #0
    9564:	3308      	adds	r3, #8
    9566:	881a      	ldrh	r2, [r3, #0]
    9568:	1c3b      	adds	r3, r7, #0
    956a:	330b      	adds	r3, #11
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	411a      	asrs	r2, r3
    9570:	2301      	movs	r3, #1
    9572:	4013      	ands	r3, r2
    9574:	d100      	bne.n	9578 <_usb_device_interrupt_handler+0xf0>
    9576:	e21c      	b.n	99b2 <_usb_device_interrupt_handler+0x52a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    9578:	4b91      	ldr	r3, [pc, #580]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    957a:	681b      	ldr	r3, [r3, #0]
    957c:	681a      	ldr	r2, [r3, #0]
    957e:	1c3b      	adds	r3, r7, #0
    9580:	330b      	adds	r3, #11
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	3308      	adds	r3, #8
    9586:	015b      	lsls	r3, r3, #5
    9588:	18d3      	adds	r3, r2, r3
    958a:	79db      	ldrb	r3, [r3, #7]
    958c:	b2da      	uxtb	r2, r3
    958e:	1dbb      	adds	r3, r7, #6
    9590:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    9592:	4b8b      	ldr	r3, [pc, #556]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9594:	6819      	ldr	r1, [r3, #0]
    9596:	1c3b      	adds	r3, r7, #0
    9598:	330b      	adds	r3, #11
    959a:	781a      	ldrb	r2, [r3, #0]
    959c:	23b0      	movs	r3, #176	; 0xb0
    959e:	005b      	lsls	r3, r3, #1
    95a0:	188a      	adds	r2, r1, r2
    95a2:	18d3      	adds	r3, r2, r3
    95a4:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    95a6:	1dba      	adds	r2, r7, #6
    95a8:	8812      	ldrh	r2, [r2, #0]
    95aa:	4013      	ands	r3, r2
    95ac:	b29b      	uxth	r3, r3
    95ae:	b299      	uxth	r1, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    95b0:	4b83      	ldr	r3, [pc, #524]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    95b2:	6818      	ldr	r0, [r3, #0]
    95b4:	1c3b      	adds	r3, r7, #0
    95b6:	330b      	adds	r3, #11
    95b8:	781a      	ldrb	r2, [r3, #0]
    95ba:	23ac      	movs	r3, #172	; 0xac
    95bc:	005b      	lsls	r3, r3, #1
    95be:	1882      	adds	r2, r0, r2
    95c0:	18d3      	adds	r3, r2, r3
    95c2:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    95c4:	1c1a      	adds	r2, r3, #0
    95c6:	1c0b      	adds	r3, r1, #0
    95c8:	4013      	ands	r3, r2
    95ca:	b29a      	uxth	r2, r3
    95cc:	1d3b      	adds	r3, r7, #4
    95ce:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    95d0:	1dbb      	adds	r3, r7, #6
    95d2:	881a      	ldrh	r2, [r3, #0]
    95d4:	2360      	movs	r3, #96	; 0x60
    95d6:	4013      	ands	r3, r2
    95d8:	d059      	beq.n	968e <_usb_device_interrupt_handler+0x206>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    95da:	4b79      	ldr	r3, [pc, #484]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    95dc:	681b      	ldr	r3, [r3, #0]
    95de:	681a      	ldr	r2, [r3, #0]
    95e0:	1c3b      	adds	r3, r7, #0
    95e2:	330b      	adds	r3, #11
    95e4:	781b      	ldrb	r3, [r3, #0]
    95e6:	3308      	adds	r3, #8
    95e8:	015b      	lsls	r3, r3, #5
    95ea:	18d3      	adds	r3, r2, r3
    95ec:	79db      	ldrb	r3, [r3, #7]
    95ee:	b2db      	uxtb	r3, r3
    95f0:	1c1a      	adds	r2, r3, #0
    95f2:	2340      	movs	r3, #64	; 0x40
    95f4:	4013      	ands	r3, r2
    95f6:	d014      	beq.n	9622 <_usb_device_interrupt_handler+0x19a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    95f8:	4b71      	ldr	r3, [pc, #452]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    95fa:	681b      	ldr	r3, [r3, #0]
    95fc:	681a      	ldr	r2, [r3, #0]
    95fe:	1c3b      	adds	r3, r7, #0
    9600:	330b      	adds	r3, #11
    9602:	781b      	ldrb	r3, [r3, #0]
    9604:	3308      	adds	r3, #8
    9606:	015b      	lsls	r3, r3, #5
    9608:	18d3      	adds	r3, r2, r3
    960a:	2240      	movs	r2, #64	; 0x40
    960c:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    960e:	1c3b      	adds	r3, r7, #0
    9610:	330b      	adds	r3, #11
    9612:	781b      	ldrb	r3, [r3, #0]
    9614:	2280      	movs	r2, #128	; 0x80
    9616:	4252      	negs	r2, r2
    9618:	4313      	orrs	r3, r2
    961a:	b2da      	uxtb	r2, r3
    961c:	4b6c      	ldr	r3, [pc, #432]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    961e:	719a      	strb	r2, [r3, #6]
    9620:	e01e      	b.n	9660 <_usb_device_interrupt_handler+0x1d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9622:	4b67      	ldr	r3, [pc, #412]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9624:	681b      	ldr	r3, [r3, #0]
    9626:	681a      	ldr	r2, [r3, #0]
    9628:	1c3b      	adds	r3, r7, #0
    962a:	330b      	adds	r3, #11
    962c:	781b      	ldrb	r3, [r3, #0]
    962e:	3308      	adds	r3, #8
    9630:	015b      	lsls	r3, r3, #5
    9632:	18d3      	adds	r3, r2, r3
    9634:	79db      	ldrb	r3, [r3, #7]
    9636:	b2db      	uxtb	r3, r3
    9638:	1c1a      	adds	r2, r3, #0
    963a:	2320      	movs	r3, #32
    963c:	4013      	ands	r3, r2
    963e:	d00f      	beq.n	9660 <_usb_device_interrupt_handler+0x1d8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9640:	4b5f      	ldr	r3, [pc, #380]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9642:	681b      	ldr	r3, [r3, #0]
    9644:	681a      	ldr	r2, [r3, #0]
    9646:	1c3b      	adds	r3, r7, #0
    9648:	330b      	adds	r3, #11
    964a:	781b      	ldrb	r3, [r3, #0]
    964c:	3308      	adds	r3, #8
    964e:	015b      	lsls	r3, r3, #5
    9650:	18d3      	adds	r3, r2, r3
    9652:	2220      	movs	r2, #32
    9654:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9656:	4b5e      	ldr	r3, [pc, #376]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    9658:	1c3a      	adds	r2, r7, #0
    965a:	320b      	adds	r2, #11
    965c:	7812      	ldrb	r2, [r2, #0]
    965e:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9660:	1d3b      	adds	r3, r7, #4
    9662:	881a      	ldrh	r2, [r3, #0]
    9664:	2360      	movs	r3, #96	; 0x60
    9666:	4013      	ands	r3, r2
    9668:	d010      	beq.n	968c <_usb_device_interrupt_handler+0x204>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    966a:	4b55      	ldr	r3, [pc, #340]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    966c:	6819      	ldr	r1, [r3, #0]
    966e:	1c3b      	adds	r3, r7, #0
    9670:	330b      	adds	r3, #11
    9672:	781a      	ldrb	r2, [r3, #0]
    9674:	23dc      	movs	r3, #220	; 0xdc
    9676:	0112      	lsls	r2, r2, #4
    9678:	188a      	adds	r2, r1, r2
    967a:	18d3      	adds	r3, r2, r3
    967c:	685a      	ldr	r2, [r3, #4]
    967e:	4b50      	ldr	r3, [pc, #320]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9680:	6819      	ldr	r1, [r3, #0]
    9682:	4b53      	ldr	r3, [pc, #332]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    9684:	1c08      	adds	r0, r1, #0
    9686:	1c19      	adds	r1, r3, #0
    9688:	4790      	blx	r2
					}
					return;
    968a:	e19f      	b.n	99cc <_usb_device_interrupt_handler+0x544>
    968c:	e19e      	b.n	99cc <_usb_device_interrupt_handler+0x544>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    968e:	1dbb      	adds	r3, r7, #6
    9690:	881a      	ldrh	r2, [r3, #0]
    9692:	2310      	movs	r3, #16
    9694:	4013      	ands	r3, r2
    9696:	d038      	beq.n	970a <_usb_device_interrupt_handler+0x282>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    9698:	4b49      	ldr	r3, [pc, #292]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    969a:	681b      	ldr	r3, [r3, #0]
    969c:	681a      	ldr	r2, [r3, #0]
    969e:	1c3b      	adds	r3, r7, #0
    96a0:	330b      	adds	r3, #11
    96a2:	781b      	ldrb	r3, [r3, #0]
    96a4:	3308      	adds	r3, #8
    96a6:	015b      	lsls	r3, r3, #5
    96a8:	18d3      	adds	r3, r2, r3
    96aa:	2210      	movs	r2, #16
    96ac:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    96ae:	4b44      	ldr	r3, [pc, #272]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    96b0:	6819      	ldr	r1, [r3, #0]
    96b2:	1c3b      	adds	r3, r7, #0
    96b4:	330b      	adds	r3, #11
    96b6:	781a      	ldrb	r2, [r3, #0]
    96b8:	23b0      	movs	r3, #176	; 0xb0
    96ba:	005b      	lsls	r3, r3, #1
    96bc:	188a      	adds	r2, r1, r2
    96be:	18d3      	adds	r3, r2, r3
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	2210      	movs	r2, #16
    96c4:	4013      	ands	r3, r2
    96c6:	b2db      	uxtb	r3, r3
    96c8:	2b00      	cmp	r3, #0
    96ca:	d01d      	beq.n	9708 <_usb_device_interrupt_handler+0x280>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    96cc:	1c3b      	adds	r3, r7, #0
    96ce:	330b      	adds	r3, #11
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	4a3d      	ldr	r2, [pc, #244]	; (97c8 <_usb_device_interrupt_handler+0x340>)
    96d4:	015b      	lsls	r3, r3, #5
    96d6:	18d3      	adds	r3, r2, r3
    96d8:	685b      	ldr	r3, [r3, #4]
    96da:	049b      	lsls	r3, r3, #18
    96dc:	0c9b      	lsrs	r3, r3, #18
    96de:	b29b      	uxth	r3, r3
    96e0:	1c1a      	adds	r2, r3, #0
    96e2:	4b3b      	ldr	r3, [pc, #236]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    96e4:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    96e6:	4b36      	ldr	r3, [pc, #216]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    96e8:	6819      	ldr	r1, [r3, #0]
    96ea:	1c3b      	adds	r3, r7, #0
    96ec:	330b      	adds	r3, #11
    96ee:	781a      	ldrb	r2, [r3, #0]
    96f0:	23d8      	movs	r3, #216	; 0xd8
    96f2:	0112      	lsls	r2, r2, #4
    96f4:	188a      	adds	r2, r1, r2
    96f6:	18d3      	adds	r3, r2, r3
    96f8:	685a      	ldr	r2, [r3, #4]
    96fa:	4b31      	ldr	r3, [pc, #196]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    96fc:	6819      	ldr	r1, [r3, #0]
    96fe:	4b34      	ldr	r3, [pc, #208]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    9700:	1c08      	adds	r0, r1, #0
    9702:	1c19      	adds	r1, r3, #0
    9704:	4790      	blx	r2
					}
					return;
    9706:	e161      	b.n	99cc <_usb_device_interrupt_handler+0x544>
    9708:	e160      	b.n	99cc <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    970a:	1dbb      	adds	r3, r7, #6
    970c:	881a      	ldrh	r2, [r3, #0]
    970e:	230c      	movs	r3, #12
    9710:	4013      	ands	r3, r2
    9712:	d100      	bne.n	9716 <_usb_device_interrupt_handler+0x28e>
    9714:	e0c5      	b.n	98a2 <_usb_device_interrupt_handler+0x41a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9716:	4b2a      	ldr	r3, [pc, #168]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9718:	681b      	ldr	r3, [r3, #0]
    971a:	681a      	ldr	r2, [r3, #0]
    971c:	1c3b      	adds	r3, r7, #0
    971e:	330b      	adds	r3, #11
    9720:	781b      	ldrb	r3, [r3, #0]
    9722:	3308      	adds	r3, #8
    9724:	015b      	lsls	r3, r3, #5
    9726:	18d3      	adds	r3, r2, r3
    9728:	79db      	ldrb	r3, [r3, #7]
    972a:	b2db      	uxtb	r3, r3
    972c:	1c1a      	adds	r2, r3, #0
    972e:	2308      	movs	r3, #8
    9730:	4013      	ands	r3, r2
    9732:	d04f      	beq.n	97d4 <_usb_device_interrupt_handler+0x34c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    9734:	4b22      	ldr	r3, [pc, #136]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    9736:	681b      	ldr	r3, [r3, #0]
    9738:	681a      	ldr	r2, [r3, #0]
    973a:	1c3b      	adds	r3, r7, #0
    973c:	330b      	adds	r3, #11
    973e:	781b      	ldrb	r3, [r3, #0]
    9740:	3308      	adds	r3, #8
    9742:	015b      	lsls	r3, r3, #5
    9744:	18d3      	adds	r3, r2, r3
    9746:	2208      	movs	r2, #8
    9748:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    974a:	1c3b      	adds	r3, r7, #0
    974c:	330b      	adds	r3, #11
    974e:	781b      	ldrb	r3, [r3, #0]
    9750:	4a1d      	ldr	r2, [pc, #116]	; (97c8 <_usb_device_interrupt_handler+0x340>)
    9752:	015b      	lsls	r3, r3, #5
    9754:	18d3      	adds	r3, r2, r3
    9756:	3318      	adds	r3, #24
    9758:	789b      	ldrb	r3, [r3, #2]
    975a:	b2db      	uxtb	r3, r3
    975c:	1c1a      	adds	r2, r3, #0
    975e:	2302      	movs	r3, #2
    9760:	4013      	ands	r3, r2
    9762:	d013      	beq.n	978c <_usb_device_interrupt_handler+0x304>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9764:	1c3b      	adds	r3, r7, #0
    9766:	330b      	adds	r3, #11
    9768:	781b      	ldrb	r3, [r3, #0]
    976a:	1c3a      	adds	r2, r7, #0
    976c:	320b      	adds	r2, #11
    976e:	7812      	ldrb	r2, [r2, #0]
    9770:	4915      	ldr	r1, [pc, #84]	; (97c8 <_usb_device_interrupt_handler+0x340>)
    9772:	0152      	lsls	r2, r2, #5
    9774:	188a      	adds	r2, r1, r2
    9776:	3218      	adds	r2, #24
    9778:	7892      	ldrb	r2, [r2, #2]
    977a:	b2d2      	uxtb	r2, r2
    977c:	2102      	movs	r1, #2
    977e:	438a      	bics	r2, r1
    9780:	b2d2      	uxtb	r2, r2
    9782:	4911      	ldr	r1, [pc, #68]	; (97c8 <_usb_device_interrupt_handler+0x340>)
    9784:	015b      	lsls	r3, r3, #5
    9786:	18cb      	adds	r3, r1, r3
    9788:	3318      	adds	r3, #24
    978a:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    978c:	1c3b      	adds	r3, r7, #0
    978e:	330b      	adds	r3, #11
    9790:	781b      	ldrb	r3, [r3, #0]
    9792:	2280      	movs	r2, #128	; 0x80
    9794:	4252      	negs	r2, r2
    9796:	4313      	orrs	r3, r2
    9798:	b2da      	uxtb	r2, r3
    979a:	4b0d      	ldr	r3, [pc, #52]	; (97d0 <_usb_device_interrupt_handler+0x348>)
    979c:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    979e:	4b08      	ldr	r3, [pc, #32]	; (97c0 <_usb_device_interrupt_handler+0x338>)
    97a0:	681b      	ldr	r3, [r3, #0]
    97a2:	681a      	ldr	r2, [r3, #0]
    97a4:	1c3b      	adds	r3, r7, #0
    97a6:	330b      	adds	r3, #11
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	3308      	adds	r3, #8
    97ac:	015b      	lsls	r3, r3, #5
    97ae:	18d3      	adds	r3, r2, r3
    97b0:	79db      	ldrb	r3, [r3, #7]
    97b2:	b2db      	uxtb	r3, r3
    97b4:	1c1a      	adds	r2, r3, #0
    97b6:	2302      	movs	r3, #2
    97b8:	4013      	ands	r3, r2
    97ba:	d05b      	beq.n	9874 <_usb_device_interrupt_handler+0x3ec>
							return;
    97bc:	e106      	b.n	99cc <_usb_device_interrupt_handler+0x544>
    97be:	46c0      	nop			; (mov r8, r8)
    97c0:	200010b0 	.word	0x200010b0
    97c4:	0000ac14 	.word	0x0000ac14
    97c8:	20003b34 	.word	0x20003b34
    97cc:	200010bc 	.word	0x200010bc
    97d0:	200010c0 	.word	0x200010c0
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    97d4:	4b7f      	ldr	r3, [pc, #508]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    97d6:	681b      	ldr	r3, [r3, #0]
    97d8:	681a      	ldr	r2, [r3, #0]
    97da:	1c3b      	adds	r3, r7, #0
    97dc:	330b      	adds	r3, #11
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	3308      	adds	r3, #8
    97e2:	015b      	lsls	r3, r3, #5
    97e4:	18d3      	adds	r3, r2, r3
    97e6:	79db      	ldrb	r3, [r3, #7]
    97e8:	b2db      	uxtb	r3, r3
    97ea:	1c1a      	adds	r2, r3, #0
    97ec:	2304      	movs	r3, #4
    97ee:	4013      	ands	r3, r2
    97f0:	d040      	beq.n	9874 <_usb_device_interrupt_handler+0x3ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    97f2:	4b78      	ldr	r3, [pc, #480]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    97f4:	681b      	ldr	r3, [r3, #0]
    97f6:	681a      	ldr	r2, [r3, #0]
    97f8:	1c3b      	adds	r3, r7, #0
    97fa:	330b      	adds	r3, #11
    97fc:	781b      	ldrb	r3, [r3, #0]
    97fe:	3308      	adds	r3, #8
    9800:	015b      	lsls	r3, r3, #5
    9802:	18d3      	adds	r3, r2, r3
    9804:	2204      	movs	r2, #4
    9806:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    9808:	1c3b      	adds	r3, r7, #0
    980a:	330b      	adds	r3, #11
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	4a72      	ldr	r2, [pc, #456]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    9810:	015b      	lsls	r3, r3, #5
    9812:	18d3      	adds	r3, r2, r3
    9814:	3308      	adds	r3, #8
    9816:	789b      	ldrb	r3, [r3, #2]
    9818:	b2db      	uxtb	r3, r3
    981a:	1c1a      	adds	r2, r3, #0
    981c:	2302      	movs	r3, #2
    981e:	4013      	ands	r3, r2
    9820:	d013      	beq.n	984a <_usb_device_interrupt_handler+0x3c2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9822:	1c3b      	adds	r3, r7, #0
    9824:	330b      	adds	r3, #11
    9826:	781b      	ldrb	r3, [r3, #0]
    9828:	1c3a      	adds	r2, r7, #0
    982a:	320b      	adds	r2, #11
    982c:	7812      	ldrb	r2, [r2, #0]
    982e:	496a      	ldr	r1, [pc, #424]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    9830:	0152      	lsls	r2, r2, #5
    9832:	188a      	adds	r2, r1, r2
    9834:	3208      	adds	r2, #8
    9836:	7892      	ldrb	r2, [r2, #2]
    9838:	b2d2      	uxtb	r2, r2
    983a:	2102      	movs	r1, #2
    983c:	438a      	bics	r2, r1
    983e:	b2d2      	uxtb	r2, r2
    9840:	4965      	ldr	r1, [pc, #404]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    9842:	015b      	lsls	r3, r3, #5
    9844:	18cb      	adds	r3, r1, r3
    9846:	3308      	adds	r3, #8
    9848:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    984a:	4b64      	ldr	r3, [pc, #400]	; (99dc <_usb_device_interrupt_handler+0x554>)
    984c:	1c3a      	adds	r2, r7, #0
    984e:	320b      	adds	r2, #11
    9850:	7812      	ldrb	r2, [r2, #0]
    9852:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9854:	4b5f      	ldr	r3, [pc, #380]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	681a      	ldr	r2, [r3, #0]
    985a:	1c3b      	adds	r3, r7, #0
    985c:	330b      	adds	r3, #11
    985e:	781b      	ldrb	r3, [r3, #0]
    9860:	3308      	adds	r3, #8
    9862:	015b      	lsls	r3, r3, #5
    9864:	18d3      	adds	r3, r2, r3
    9866:	79db      	ldrb	r3, [r3, #7]
    9868:	b2db      	uxtb	r3, r3
    986a:	1c1a      	adds	r2, r3, #0
    986c:	2301      	movs	r3, #1
    986e:	4013      	ands	r3, r2
    9870:	d000      	beq.n	9874 <_usb_device_interrupt_handler+0x3ec>
							return;
    9872:	e0ab      	b.n	99cc <_usb_device_interrupt_handler+0x544>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9874:	1d3b      	adds	r3, r7, #4
    9876:	881a      	ldrh	r2, [r3, #0]
    9878:	230c      	movs	r3, #12
    987a:	4013      	ands	r3, r2
    987c:	d010      	beq.n	98a0 <_usb_device_interrupt_handler+0x418>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    987e:	4b55      	ldr	r3, [pc, #340]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9880:	6819      	ldr	r1, [r3, #0]
    9882:	1c3b      	adds	r3, r7, #0
    9884:	330b      	adds	r3, #11
    9886:	781a      	ldrb	r2, [r3, #0]
    9888:	23d4      	movs	r3, #212	; 0xd4
    988a:	0112      	lsls	r2, r2, #4
    988c:	188a      	adds	r2, r1, r2
    988e:	18d3      	adds	r3, r2, r3
    9890:	685a      	ldr	r2, [r3, #4]
    9892:	4b50      	ldr	r3, [pc, #320]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9894:	6819      	ldr	r1, [r3, #0]
    9896:	4b51      	ldr	r3, [pc, #324]	; (99dc <_usb_device_interrupt_handler+0x554>)
    9898:	1c08      	adds	r0, r1, #0
    989a:	1c19      	adds	r1, r3, #0
    989c:	4790      	blx	r2
					}
					return;
    989e:	e095      	b.n	99cc <_usb_device_interrupt_handler+0x544>
    98a0:	e094      	b.n	99cc <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    98a2:	1dbb      	adds	r3, r7, #6
    98a4:	881a      	ldrh	r2, [r3, #0]
    98a6:	2303      	movs	r3, #3
    98a8:	4013      	ands	r3, r2
    98aa:	d100      	bne.n	98ae <_usb_device_interrupt_handler+0x426>
    98ac:	e081      	b.n	99b2 <_usb_device_interrupt_handler+0x52a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    98ae:	4b49      	ldr	r3, [pc, #292]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    98b0:	681b      	ldr	r3, [r3, #0]
    98b2:	681a      	ldr	r2, [r3, #0]
    98b4:	1c3b      	adds	r3, r7, #0
    98b6:	330b      	adds	r3, #11
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	3308      	adds	r3, #8
    98bc:	015b      	lsls	r3, r3, #5
    98be:	18d3      	adds	r3, r2, r3
    98c0:	79db      	ldrb	r3, [r3, #7]
    98c2:	b2db      	uxtb	r3, r3
    98c4:	1c1a      	adds	r2, r3, #0
    98c6:	2302      	movs	r3, #2
    98c8:	4013      	ands	r3, r2
    98ca:	d022      	beq.n	9912 <_usb_device_interrupt_handler+0x48a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    98cc:	4b41      	ldr	r3, [pc, #260]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	681a      	ldr	r2, [r3, #0]
    98d2:	1c3b      	adds	r3, r7, #0
    98d4:	330b      	adds	r3, #11
    98d6:	781b      	ldrb	r3, [r3, #0]
    98d8:	3308      	adds	r3, #8
    98da:	015b      	lsls	r3, r3, #5
    98dc:	18d3      	adds	r3, r2, r3
    98de:	2202      	movs	r2, #2
    98e0:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    98e2:	1c3b      	adds	r3, r7, #0
    98e4:	330b      	adds	r3, #11
    98e6:	781b      	ldrb	r3, [r3, #0]
    98e8:	2280      	movs	r2, #128	; 0x80
    98ea:	4252      	negs	r2, r2
    98ec:	4313      	orrs	r3, r2
    98ee:	b2da      	uxtb	r2, r3
    98f0:	4b3a      	ldr	r3, [pc, #232]	; (99dc <_usb_device_interrupt_handler+0x554>)
    98f2:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    98f4:	1c3b      	adds	r3, r7, #0
    98f6:	330b      	adds	r3, #11
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	4a37      	ldr	r2, [pc, #220]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    98fc:	015b      	lsls	r3, r3, #5
    98fe:	18d3      	adds	r3, r2, r3
    9900:	3310      	adds	r3, #16
    9902:	685b      	ldr	r3, [r3, #4]
    9904:	049b      	lsls	r3, r3, #18
    9906:	0c9b      	lsrs	r3, r3, #18
    9908:	b29b      	uxth	r3, r3
    990a:	1c1a      	adds	r2, r3, #0
    990c:	4b33      	ldr	r3, [pc, #204]	; (99dc <_usb_device_interrupt_handler+0x554>)
    990e:	805a      	strh	r2, [r3, #2]
    9910:	e039      	b.n	9986 <_usb_device_interrupt_handler+0x4fe>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9912:	4b30      	ldr	r3, [pc, #192]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9914:	681b      	ldr	r3, [r3, #0]
    9916:	681a      	ldr	r2, [r3, #0]
    9918:	1c3b      	adds	r3, r7, #0
    991a:	330b      	adds	r3, #11
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	3308      	adds	r3, #8
    9920:	015b      	lsls	r3, r3, #5
    9922:	18d3      	adds	r3, r2, r3
    9924:	79db      	ldrb	r3, [r3, #7]
    9926:	b2db      	uxtb	r3, r3
    9928:	1c1a      	adds	r2, r3, #0
    992a:	2301      	movs	r3, #1
    992c:	4013      	ands	r3, r2
    992e:	d02a      	beq.n	9986 <_usb_device_interrupt_handler+0x4fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    9930:	4b28      	ldr	r3, [pc, #160]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9932:	681b      	ldr	r3, [r3, #0]
    9934:	681a      	ldr	r2, [r3, #0]
    9936:	1c3b      	adds	r3, r7, #0
    9938:	330b      	adds	r3, #11
    993a:	781b      	ldrb	r3, [r3, #0]
    993c:	3308      	adds	r3, #8
    993e:	015b      	lsls	r3, r3, #5
    9940:	18d3      	adds	r3, r2, r3
    9942:	2201      	movs	r2, #1
    9944:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9946:	4b25      	ldr	r3, [pc, #148]	; (99dc <_usb_device_interrupt_handler+0x554>)
    9948:	1c3a      	adds	r2, r7, #0
    994a:	320b      	adds	r2, #11
    994c:	7812      	ldrb	r2, [r2, #0]
    994e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9950:	1c3b      	adds	r3, r7, #0
    9952:	330b      	adds	r3, #11
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	4a20      	ldr	r2, [pc, #128]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    9958:	015b      	lsls	r3, r3, #5
    995a:	18d3      	adds	r3, r2, r3
    995c:	685b      	ldr	r3, [r3, #4]
    995e:	049b      	lsls	r3, r3, #18
    9960:	0c9b      	lsrs	r3, r3, #18
    9962:	b29b      	uxth	r3, r3
    9964:	1c1a      	adds	r2, r3, #0
    9966:	4b1d      	ldr	r3, [pc, #116]	; (99dc <_usb_device_interrupt_handler+0x554>)
    9968:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    996a:	1c3b      	adds	r3, r7, #0
    996c:	330b      	adds	r3, #11
    996e:	781b      	ldrb	r3, [r3, #0]
    9970:	4a19      	ldr	r2, [pc, #100]	; (99d8 <_usb_device_interrupt_handler+0x550>)
    9972:	015b      	lsls	r3, r3, #5
    9974:	18d3      	adds	r3, r2, r3
    9976:	685b      	ldr	r3, [r3, #4]
    9978:	0b9b      	lsrs	r3, r3, #14
    997a:	049b      	lsls	r3, r3, #18
    997c:	0c9b      	lsrs	r3, r3, #18
    997e:	b29b      	uxth	r3, r3
    9980:	1c1a      	adds	r2, r3, #0
    9982:	4b16      	ldr	r3, [pc, #88]	; (99dc <_usb_device_interrupt_handler+0x554>)
    9984:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    9986:	1d3b      	adds	r3, r7, #4
    9988:	881a      	ldrh	r2, [r3, #0]
    998a:	2303      	movs	r3, #3
    998c:	4013      	ands	r3, r2
    998e:	d00f      	beq.n	99b0 <_usb_device_interrupt_handler+0x528>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    9990:	4b10      	ldr	r3, [pc, #64]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    9992:	681a      	ldr	r2, [r3, #0]
    9994:	1c3b      	adds	r3, r7, #0
    9996:	330b      	adds	r3, #11
    9998:	781b      	ldrb	r3, [r3, #0]
    999a:	330d      	adds	r3, #13
    999c:	011b      	lsls	r3, r3, #4
    999e:	18d3      	adds	r3, r2, r3
    99a0:	685a      	ldr	r2, [r3, #4]
    99a2:	4b0c      	ldr	r3, [pc, #48]	; (99d4 <_usb_device_interrupt_handler+0x54c>)
    99a4:	6819      	ldr	r1, [r3, #0]
    99a6:	4b0d      	ldr	r3, [pc, #52]	; (99dc <_usb_device_interrupt_handler+0x554>)
    99a8:	1c08      	adds	r0, r1, #0
    99aa:	1c19      	adds	r1, r3, #0
    99ac:	4790      	blx	r2
					}
					return;
    99ae:	e00d      	b.n	99cc <_usb_device_interrupt_handler+0x544>
    99b0:	e00c      	b.n	99cc <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    99b2:	1c3b      	adds	r3, r7, #0
    99b4:	330b      	adds	r3, #11
    99b6:	781a      	ldrb	r2, [r3, #0]
    99b8:	1c3b      	adds	r3, r7, #0
    99ba:	330b      	adds	r3, #11
    99bc:	3201      	adds	r2, #1
    99be:	701a      	strb	r2, [r3, #0]
    99c0:	1c3b      	adds	r3, r7, #0
    99c2:	330b      	adds	r3, #11
    99c4:	781b      	ldrb	r3, [r3, #0]
    99c6:	2b07      	cmp	r3, #7
    99c8:	d800      	bhi.n	99cc <_usb_device_interrupt_handler+0x544>
    99ca:	e5ca      	b.n	9562 <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    99cc:	46bd      	mov	sp, r7
    99ce:	b004      	add	sp, #16
    99d0:	bd80      	pop	{r7, pc}
    99d2:	46c0      	nop			; (mov r8, r8)
    99d4:	200010b0 	.word	0x200010b0
    99d8:	20003b34 	.word	0x20003b34
    99dc:	200010c0 	.word	0x200010c0

000099e0 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    99e0:	b580      	push	{r7, lr}
    99e2:	b082      	sub	sp, #8
    99e4:	af00      	add	r7, sp, #0
    99e6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	681a      	ldr	r2, [r3, #0]
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	681b      	ldr	r3, [r3, #0]
    99f0:	781b      	ldrb	r3, [r3, #0]
    99f2:	b2db      	uxtb	r3, r3
    99f4:	2102      	movs	r1, #2
    99f6:	430b      	orrs	r3, r1
    99f8:	b2db      	uxtb	r3, r3
    99fa:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    99fc:	46c0      	nop			; (mov r8, r8)
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	681b      	ldr	r3, [r3, #0]
    9a02:	789b      	ldrb	r3, [r3, #2]
    9a04:	b2db      	uxtb	r3, r3
    9a06:	2b02      	cmp	r3, #2
    9a08:	d0f9      	beq.n	99fe <usb_enable+0x1e>
}
    9a0a:	46bd      	mov	sp, r7
    9a0c:	b002      	add	sp, #8
    9a0e:	bd80      	pop	{r7, pc}

00009a10 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    9a10:	b580      	push	{r7, lr}
    9a12:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    9a14:	4b07      	ldr	r3, [pc, #28]	; (9a34 <USB_Handler+0x24>)
    9a16:	681b      	ldr	r3, [r3, #0]
    9a18:	681b      	ldr	r3, [r3, #0]
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	b2db      	uxtb	r3, r3
    9a1e:	09db      	lsrs	r3, r3, #7
    9a20:	b2db      	uxtb	r3, r3
    9a22:	2b00      	cmp	r3, #0
    9a24:	d002      	beq.n	9a2c <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    9a26:	4b04      	ldr	r3, [pc, #16]	; (9a38 <USB_Handler+0x28>)
    9a28:	4798      	blx	r3
    9a2a:	e001      	b.n	9a30 <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    9a2c:	4b03      	ldr	r3, [pc, #12]	; (9a3c <USB_Handler+0x2c>)
    9a2e:	4798      	blx	r3
	}
}
    9a30:	46bd      	mov	sp, r7
    9a32:	bd80      	pop	{r7, pc}
    9a34:	200010b0 	.word	0x200010b0
    9a38:	000081a1 	.word	0x000081a1
    9a3c:	00009489 	.word	0x00009489

00009a40 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    9a40:	b580      	push	{r7, lr}
    9a42:	b082      	sub	sp, #8
    9a44:	af00      	add	r7, sp, #0
    9a46:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    9a48:	687b      	ldr	r3, [r7, #4]
    9a4a:	2200      	movs	r2, #0
    9a4c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    9a4e:	687b      	ldr	r3, [r7, #4]
    9a50:	2201      	movs	r2, #1
    9a52:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	2200      	movs	r2, #0
    9a58:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	2201      	movs	r2, #1
    9a5e:	70da      	strb	r2, [r3, #3]
}
    9a60:	46bd      	mov	sp, r7
    9a62:	b002      	add	sp, #8
    9a64:	bd80      	pop	{r7, pc}
    9a66:	46c0      	nop			; (mov r8, r8)

00009a68 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    9a68:	b580      	push	{r7, lr}
    9a6a:	b08c      	sub	sp, #48	; 0x30
    9a6c:	af00      	add	r7, sp, #0
    9a6e:	60f8      	str	r0, [r7, #12]
    9a70:	60b9      	str	r1, [r7, #8]
    9a72:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    9a74:	4bbb      	ldr	r3, [pc, #748]	; (9d64 <usb_init+0x2fc>)
    9a76:	2200      	movs	r2, #0
    9a78:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    9a7a:	4bbb      	ldr	r3, [pc, #748]	; (9d68 <usb_init+0x300>)
    9a7c:	68fa      	ldr	r2, [r7, #12]
    9a7e:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    9a80:	68fb      	ldr	r3, [r7, #12]
    9a82:	68ba      	ldr	r2, [r7, #8]
    9a84:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    9a86:	2001      	movs	r0, #1
    9a88:	2120      	movs	r1, #32
    9a8a:	4bb8      	ldr	r3, [pc, #736]	; (9d6c <usb_init+0x304>)
    9a8c:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    9a8e:	1c3b      	adds	r3, r7, #0
    9a90:	3318      	adds	r3, #24
    9a92:	1c18      	adds	r0, r3, #0
    9a94:	4bb6      	ldr	r3, [pc, #728]	; (9d70 <usb_init+0x308>)
    9a96:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    9a98:	1c3b      	adds	r3, r7, #0
    9a9a:	3318      	adds	r3, #24
    9a9c:	2206      	movs	r2, #6
    9a9e:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    9aa0:	1c3b      	adds	r3, r7, #0
    9aa2:	3318      	adds	r3, #24
    9aa4:	2018      	movs	r0, #24
    9aa6:	1c19      	adds	r1, r3, #0
    9aa8:	4bb2      	ldr	r3, [pc, #712]	; (9d74 <usb_init+0x30c>)
    9aaa:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    9aac:	1c3b      	adds	r3, r7, #0
    9aae:	3318      	adds	r3, #24
    9ab0:	2206      	movs	r2, #6
    9ab2:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    9ab4:	1c3b      	adds	r3, r7, #0
    9ab6:	3318      	adds	r3, #24
    9ab8:	2019      	movs	r0, #25
    9aba:	1c19      	adds	r1, r3, #0
    9abc:	4bad      	ldr	r3, [pc, #692]	; (9d74 <usb_init+0x30c>)
    9abe:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    9ac0:	1c3b      	adds	r3, r7, #0
    9ac2:	3314      	adds	r3, #20
    9ac4:	1c18      	adds	r0, r3, #0
    9ac6:	4bac      	ldr	r3, [pc, #688]	; (9d78 <usb_init+0x310>)
    9ac8:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	789a      	ldrb	r2, [r3, #2]
    9ace:	1c3b      	adds	r3, r7, #0
    9ad0:	3314      	adds	r3, #20
    9ad2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    9ad4:	1c3b      	adds	r3, r7, #0
    9ad6:	3314      	adds	r3, #20
    9ad8:	2006      	movs	r0, #6
    9ada:	1c19      	adds	r1, r3, #0
    9adc:	4ba7      	ldr	r3, [pc, #668]	; (9d7c <usb_init+0x314>)
    9ade:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    9ae0:	2006      	movs	r0, #6
    9ae2:	4ba7      	ldr	r3, [pc, #668]	; (9d80 <usb_init+0x318>)
    9ae4:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    9ae6:	68bb      	ldr	r3, [r7, #8]
    9ae8:	781a      	ldrb	r2, [r3, #0]
    9aea:	2101      	movs	r1, #1
    9aec:	430a      	orrs	r2, r1
    9aee:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    9af0:	46c0      	nop			; (mov r8, r8)
    9af2:	68bb      	ldr	r3, [r7, #8]
    9af4:	789a      	ldrb	r2, [r3, #2]
    9af6:	2301      	movs	r3, #1
    9af8:	4013      	ands	r3, r2
    9afa:	b2db      	uxtb	r3, r3
    9afc:	2b00      	cmp	r3, #0
    9afe:	d1f8      	bne.n	9af2 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9b00:	4ba0      	ldr	r3, [pc, #640]	; (9d84 <usb_init+0x31c>)
    9b02:	78da      	ldrb	r2, [r3, #3]
    9b04:	2103      	movs	r1, #3
    9b06:	438a      	bics	r2, r1
    9b08:	2102      	movs	r1, #2
    9b0a:	430a      	orrs	r2, r1
    9b0c:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9b0e:	4b9d      	ldr	r3, [pc, #628]	; (9d84 <usb_init+0x31c>)
    9b10:	78da      	ldrb	r2, [r3, #3]
    9b12:	210c      	movs	r1, #12
    9b14:	438a      	bics	r2, r1
    9b16:	2108      	movs	r1, #8
    9b18:	430a      	orrs	r2, r1
    9b1a:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    9b1c:	4b9a      	ldr	r3, [pc, #616]	; (9d88 <usb_init+0x320>)
    9b1e:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    9b20:	0b5a      	lsrs	r2, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    9b22:	231f      	movs	r3, #31
    9b24:	4013      	ands	r3, r2
    9b26:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    9b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9b2a:	2b1f      	cmp	r3, #31
    9b2c:	d101      	bne.n	9b32 <usb_init+0xca>
		pad_transn = 5;
    9b2e:	2305      	movs	r3, #5
    9b30:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    9b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9b34:	b2db      	uxtb	r3, r3
    9b36:	1c1a      	adds	r2, r3, #0
    9b38:	231f      	movs	r3, #31
    9b3a:	4013      	ands	r3, r2
    9b3c:	b2d9      	uxtb	r1, r3
    9b3e:	68bb      	ldr	r3, [r7, #8]
    9b40:	221f      	movs	r2, #31
    9b42:	400a      	ands	r2, r1
    9b44:	0192      	lsls	r2, r2, #6
    9b46:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    9b48:	4990      	ldr	r1, [pc, #576]	; (9d8c <usb_init+0x324>)
    9b4a:	4001      	ands	r1, r0
    9b4c:	430a      	orrs	r2, r1
    9b4e:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    9b50:	4b8d      	ldr	r3, [pc, #564]	; (9d88 <usb_init+0x320>)
    9b52:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    9b54:	0c9a      	lsrs	r2, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    9b56:	231f      	movs	r3, #31
    9b58:	4013      	ands	r3, r2
    9b5a:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    9b5c:	6a3b      	ldr	r3, [r7, #32]
    9b5e:	2b1f      	cmp	r3, #31
    9b60:	d101      	bne.n	9b66 <usb_init+0xfe>
		pad_transp = 29;
    9b62:	231d      	movs	r3, #29
    9b64:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    9b66:	6a3b      	ldr	r3, [r7, #32]
    9b68:	b2db      	uxtb	r3, r3
    9b6a:	1c1a      	adds	r2, r3, #0
    9b6c:	231f      	movs	r3, #31
    9b6e:	4013      	ands	r3, r2
    9b70:	b2d9      	uxtb	r1, r3
    9b72:	68bb      	ldr	r3, [r7, #8]
    9b74:	221f      	movs	r2, #31
    9b76:	400a      	ands	r2, r1
    9b78:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    9b7a:	201f      	movs	r0, #31
    9b7c:	4381      	bics	r1, r0
    9b7e:	430a      	orrs	r2, r1
    9b80:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    9b82:	4b81      	ldr	r3, [pc, #516]	; (9d88 <usb_init+0x320>)
    9b84:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    9b86:	0dda      	lsrs	r2, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    9b88:	2307      	movs	r3, #7
    9b8a:	4013      	ands	r3, r2
    9b8c:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    9b8e:	69fb      	ldr	r3, [r7, #28]
    9b90:	2b07      	cmp	r3, #7
    9b92:	d101      	bne.n	9b98 <usb_init+0x130>
		pad_trim = 3;
    9b94:	2303      	movs	r3, #3
    9b96:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    9b98:	69fb      	ldr	r3, [r7, #28]
    9b9a:	b2db      	uxtb	r3, r3
    9b9c:	1c1a      	adds	r2, r3, #0
    9b9e:	2307      	movs	r3, #7
    9ba0:	4013      	ands	r3, r2
    9ba2:	b2d9      	uxtb	r1, r3
    9ba4:	68bb      	ldr	r3, [r7, #8]
    9ba6:	2207      	movs	r2, #7
    9ba8:	400a      	ands	r2, r1
    9baa:	0312      	lsls	r2, r2, #12
    9bac:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    9bae:	4978      	ldr	r1, [pc, #480]	; (9d90 <usb_init+0x328>)
    9bb0:	4001      	ands	r1, r0
    9bb2:	430a      	orrs	r2, r1
    9bb4:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	781a      	ldrb	r2, [r3, #0]
    9bba:	68bb      	ldr	r3, [r7, #8]
    9bbc:	01d2      	lsls	r2, r2, #7
    9bbe:	7818      	ldrb	r0, [r3, #0]
    9bc0:	217f      	movs	r1, #127	; 0x7f
    9bc2:	4001      	ands	r1, r0
    9bc4:	430a      	orrs	r2, r1
    9bc6:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	7859      	ldrb	r1, [r3, #1]
    9bcc:	68bb      	ldr	r3, [r7, #8]
    9bce:	2201      	movs	r2, #1
    9bd0:	400a      	ands	r2, r1
    9bd2:	0092      	lsls	r2, r2, #2
    9bd4:	7819      	ldrb	r1, [r3, #0]
    9bd6:	2004      	movs	r0, #4
    9bd8:	4381      	bics	r1, r0
    9bda:	430a      	orrs	r2, r1
    9bdc:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    9bde:	4a6d      	ldr	r2, [pc, #436]	; (9d94 <usb_init+0x32c>)
    9be0:	68bb      	ldr	r3, [r7, #8]
    9be2:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	78db      	ldrb	r3, [r3, #3]
    9be8:	2b01      	cmp	r3, #1
    9bea:	d106      	bne.n	9bfa <usb_init+0x192>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    9bec:	68fb      	ldr	r3, [r7, #12]
    9bee:	681b      	ldr	r3, [r3, #0]
    9bf0:	891a      	ldrh	r2, [r3, #8]
    9bf2:	210c      	movs	r1, #12
    9bf4:	438a      	bics	r2, r1
    9bf6:	811a      	strh	r2, [r3, #8]
    9bf8:	e00b      	b.n	9c12 <usb_init+0x1aa>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    9bfa:	687b      	ldr	r3, [r7, #4]
    9bfc:	78db      	ldrb	r3, [r3, #3]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d107      	bne.n	9c12 <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    9c02:	68fb      	ldr	r3, [r7, #12]
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	891a      	ldrh	r2, [r3, #8]
    9c08:	210c      	movs	r1, #12
    9c0a:	438a      	bics	r2, r1
    9c0c:	2104      	movs	r1, #4
    9c0e:	430a      	orrs	r2, r1
    9c10:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    9c12:	4a60      	ldr	r2, [pc, #384]	; (9d94 <usb_init+0x32c>)
    9c14:	2380      	movs	r3, #128	; 0x80
    9c16:	005b      	lsls	r3, r3, #1
    9c18:	1c10      	adds	r0, r2, #0
    9c1a:	2100      	movs	r1, #0
    9c1c:	1c1a      	adds	r2, r3, #0
    9c1e:	4b5e      	ldr	r3, [pc, #376]	; (9d98 <usb_init+0x330>)
    9c20:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    9c22:	2300      	movs	r3, #0
    9c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c26:	e008      	b.n	9c3a <usb_init+0x1d2>
		module_inst->host_callback[i] = NULL;
    9c28:	68fa      	ldr	r2, [r7, #12]
    9c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c2c:	009b      	lsls	r3, r3, #2
    9c2e:	18d3      	adds	r3, r2, r3
    9c30:	2200      	movs	r2, #0
    9c32:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    9c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c36:	3301      	adds	r3, #1
    9c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c3c:	2b07      	cmp	r3, #7
    9c3e:	d9f3      	bls.n	9c28 <usb_init+0x1c0>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    9c40:	2300      	movs	r3, #0
    9c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c44:	e015      	b.n	9c72 <usb_init+0x20a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    9c46:	2300      	movs	r3, #0
    9c48:	62bb      	str	r3, [r7, #40]	; 0x28
    9c4a:	e00c      	b.n	9c66 <usb_init+0x1fe>
			module_inst->host_pipe_callback[i][j] = NULL;
    9c4c:	68fa      	ldr	r2, [r7, #12]
    9c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c50:	0099      	lsls	r1, r3, #2
    9c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c54:	18cb      	adds	r3, r1, r3
    9c56:	3308      	adds	r3, #8
    9c58:	009b      	lsls	r3, r3, #2
    9c5a:	18d3      	adds	r3, r2, r3
    9c5c:	2200      	movs	r2, #0
    9c5e:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    9c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c62:	3301      	adds	r3, #1
    9c64:	62bb      	str	r3, [r7, #40]	; 0x28
    9c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c68:	2b03      	cmp	r3, #3
    9c6a:	d9ef      	bls.n	9c4c <usb_init+0x1e4>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    9c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c6e:	3301      	adds	r3, #1
    9c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9c74:	2b07      	cmp	r3, #7
    9c76:	d9e6      	bls.n	9c46 <usb_init+0x1de>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    9c78:	68fa      	ldr	r2, [r7, #12]
    9c7a:	23a4      	movs	r3, #164	; 0xa4
    9c7c:	2100      	movs	r1, #0
    9c7e:	54d1      	strb	r1, [r2, r3]
	module_inst->host_enabled_callback_mask = 0;
    9c80:	68fa      	ldr	r2, [r7, #12]
    9c82:	23a5      	movs	r3, #165	; 0xa5
    9c84:	2100      	movs	r1, #0
    9c86:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    9c88:	2300      	movs	r3, #0
    9c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    9c8c:	e010      	b.n	9cb0 <usb_init+0x248>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    9c8e:	68f9      	ldr	r1, [r7, #12]
    9c90:	23a0      	movs	r3, #160	; 0xa0
    9c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9c94:	188a      	adds	r2, r1, r2
    9c96:	18d3      	adds	r3, r2, r3
    9c98:	2200      	movs	r2, #0
    9c9a:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    9c9c:	68f9      	ldr	r1, [r7, #12]
    9c9e:	23a8      	movs	r3, #168	; 0xa8
    9ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9ca2:	188a      	adds	r2, r1, r2
    9ca4:	18d3      	adds	r3, r2, r3
    9ca6:	2200      	movs	r2, #0
    9ca8:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    9caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9cac:	3301      	adds	r3, #1
    9cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    9cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9cb2:	2b07      	cmp	r3, #7
    9cb4:	d9eb      	bls.n	9c8e <usb_init+0x226>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    9cb6:	2300      	movs	r3, #0
    9cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    9cba:	e008      	b.n	9cce <usb_init+0x266>
		module_inst->device_callback[i] = NULL;
    9cbc:	68fb      	ldr	r3, [r7, #12]
    9cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9cc0:	322e      	adds	r2, #46	; 0x2e
    9cc2:	0092      	lsls	r2, r2, #2
    9cc4:	2100      	movs	r1, #0
    9cc6:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    9cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9cca:	3301      	adds	r3, #1
    9ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    9cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9cd0:	2b06      	cmp	r3, #6
    9cd2:	d9f3      	bls.n	9cbc <usb_init+0x254>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    9cd4:	2300      	movs	r3, #0
    9cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    9cd8:	e015      	b.n	9d06 <usb_init+0x29e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    9cda:	2300      	movs	r3, #0
    9cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    9cde:	e00c      	b.n	9cfa <usb_init+0x292>
			module_inst->device_endpoint_callback[i][j] = NULL;
    9ce0:	68fa      	ldr	r2, [r7, #12]
    9ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ce4:	0099      	lsls	r1, r3, #2
    9ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ce8:	18cb      	adds	r3, r1, r3
    9cea:	3334      	adds	r3, #52	; 0x34
    9cec:	009b      	lsls	r3, r3, #2
    9cee:	18d3      	adds	r3, r2, r3
    9cf0:	2200      	movs	r2, #0
    9cf2:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    9cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9cf6:	3301      	adds	r3, #1
    9cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    9cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9cfc:	2b03      	cmp	r3, #3
    9cfe:	d9ef      	bls.n	9ce0 <usb_init+0x278>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    9d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d02:	3301      	adds	r3, #1
    9d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    9d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d08:	2b07      	cmp	r3, #7
    9d0a:	d9e6      	bls.n	9cda <usb_init+0x272>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    9d0c:	68fa      	ldr	r2, [r7, #12]
    9d0e:	23aa      	movs	r3, #170	; 0xaa
    9d10:	005b      	lsls	r3, r3, #1
    9d12:	2100      	movs	r1, #0
    9d14:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    9d16:	68fa      	ldr	r2, [r7, #12]
    9d18:	23ab      	movs	r3, #171	; 0xab
    9d1a:	005b      	lsls	r3, r3, #1
    9d1c:	2100      	movs	r1, #0
    9d1e:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    9d20:	2300      	movs	r3, #0
    9d22:	62bb      	str	r3, [r7, #40]	; 0x28
    9d24:	e012      	b.n	9d4c <usb_init+0x2e4>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    9d26:	68f9      	ldr	r1, [r7, #12]
    9d28:	23ac      	movs	r3, #172	; 0xac
    9d2a:	005b      	lsls	r3, r3, #1
    9d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9d2e:	188a      	adds	r2, r1, r2
    9d30:	18d3      	adds	r3, r2, r3
    9d32:	2200      	movs	r2, #0
    9d34:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    9d36:	68f9      	ldr	r1, [r7, #12]
    9d38:	23b0      	movs	r3, #176	; 0xb0
    9d3a:	005b      	lsls	r3, r3, #1
    9d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9d3e:	188a      	adds	r2, r1, r2
    9d40:	18d3      	adds	r3, r2, r3
    9d42:	2200      	movs	r2, #0
    9d44:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    9d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9d48:	3301      	adds	r3, #1
    9d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    9d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9d4e:	2b07      	cmp	r3, #7
    9d50:	d9e9      	bls.n	9d26 <usb_init+0x2be>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    9d52:	2007      	movs	r0, #7
    9d54:	4b11      	ldr	r3, [pc, #68]	; (9d9c <usb_init+0x334>)
    9d56:	4798      	blx	r3

	return STATUS_OK;
    9d58:	2300      	movs	r3, #0
}
    9d5a:	1c18      	adds	r0, r3, #0
    9d5c:	46bd      	mov	sp, r7
    9d5e:	b00c      	add	sp, #48	; 0x30
    9d60:	bd80      	pop	{r7, pc}
    9d62:	46c0      	nop			; (mov r8, r8)
    9d64:	200010c8 	.word	0x200010c8
    9d68:	200010b0 	.word	0x200010b0
    9d6c:	000080f1 	.word	0x000080f1
    9d70:	0000814d 	.word	0x0000814d
    9d74:	000067d9 	.word	0x000067d9
    9d78:	000080dd 	.word	0x000080dd
    9d7c:	000064f5 	.word	0x000064f5
    9d80:	00006535 	.word	0x00006535
    9d84:	41005000 	.word	0x41005000
    9d88:	00806024 	.word	0x00806024
    9d8c:	fffff83f 	.word	0xfffff83f
    9d90:	ffff8fff 	.word	0xffff8fff
    9d94:	20003b34 	.word	0x20003b34
    9d98:	0000ab3b 	.word	0x0000ab3b
    9d9c:	00008175 	.word	0x00008175

00009da0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9da0:	b580      	push	{r7, lr}
    9da2:	b082      	sub	sp, #8
    9da4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9da6:	4b2d      	ldr	r3, [pc, #180]	; (9e5c <Reset_Handler+0xbc>)
    9da8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9daa:	4b2d      	ldr	r3, [pc, #180]	; (9e60 <Reset_Handler+0xc0>)
    9dac:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9dae:	687a      	ldr	r2, [r7, #4]
    9db0:	683b      	ldr	r3, [r7, #0]
    9db2:	429a      	cmp	r2, r3
    9db4:	d00c      	beq.n	9dd0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9db6:	e007      	b.n	9dc8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9db8:	683b      	ldr	r3, [r7, #0]
    9dba:	1d1a      	adds	r2, r3, #4
    9dbc:	603a      	str	r2, [r7, #0]
    9dbe:	687a      	ldr	r2, [r7, #4]
    9dc0:	1d11      	adds	r1, r2, #4
    9dc2:	6079      	str	r1, [r7, #4]
    9dc4:	6812      	ldr	r2, [r2, #0]
    9dc6:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    9dc8:	683a      	ldr	r2, [r7, #0]
    9dca:	4b26      	ldr	r3, [pc, #152]	; (9e64 <Reset_Handler+0xc4>)
    9dcc:	429a      	cmp	r2, r3
    9dce:	d3f3      	bcc.n	9db8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9dd0:	4b25      	ldr	r3, [pc, #148]	; (9e68 <Reset_Handler+0xc8>)
    9dd2:	603b      	str	r3, [r7, #0]
    9dd4:	e004      	b.n	9de0 <Reset_Handler+0x40>
                *pDest++ = 0;
    9dd6:	683b      	ldr	r3, [r7, #0]
    9dd8:	1d1a      	adds	r2, r3, #4
    9dda:	603a      	str	r2, [r7, #0]
    9ddc:	2200      	movs	r2, #0
    9dde:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9de0:	683a      	ldr	r2, [r7, #0]
    9de2:	4b22      	ldr	r3, [pc, #136]	; (9e6c <Reset_Handler+0xcc>)
    9de4:	429a      	cmp	r2, r3
    9de6:	d3f6      	bcc.n	9dd6 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    9de8:	4b21      	ldr	r3, [pc, #132]	; (9e70 <Reset_Handler+0xd0>)
    9dea:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9dec:	4b21      	ldr	r3, [pc, #132]	; (9e74 <Reset_Handler+0xd4>)
    9dee:	687a      	ldr	r2, [r7, #4]
    9df0:	21ff      	movs	r1, #255	; 0xff
    9df2:	438a      	bics	r2, r1
    9df4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9df6:	4a20      	ldr	r2, [pc, #128]	; (9e78 <Reset_Handler+0xd8>)
    9df8:	2390      	movs	r3, #144	; 0x90
    9dfa:	005b      	lsls	r3, r3, #1
    9dfc:	2102      	movs	r1, #2
    9dfe:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9e00:	4b1e      	ldr	r3, [pc, #120]	; (9e7c <Reset_Handler+0xdc>)
    9e02:	78da      	ldrb	r2, [r3, #3]
    9e04:	2103      	movs	r1, #3
    9e06:	438a      	bics	r2, r1
    9e08:	2102      	movs	r1, #2
    9e0a:	430a      	orrs	r2, r1
    9e0c:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9e0e:	4b1b      	ldr	r3, [pc, #108]	; (9e7c <Reset_Handler+0xdc>)
    9e10:	78da      	ldrb	r2, [r3, #3]
    9e12:	210c      	movs	r1, #12
    9e14:	438a      	bics	r2, r1
    9e16:	2108      	movs	r1, #8
    9e18:	430a      	orrs	r2, r1
    9e1a:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9e1c:	4b18      	ldr	r3, [pc, #96]	; (9e80 <Reset_Handler+0xe0>)
    9e1e:	7b9a      	ldrb	r2, [r3, #14]
    9e20:	2130      	movs	r1, #48	; 0x30
    9e22:	438a      	bics	r2, r1
    9e24:	2120      	movs	r1, #32
    9e26:	430a      	orrs	r2, r1
    9e28:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9e2a:	4b15      	ldr	r3, [pc, #84]	; (9e80 <Reset_Handler+0xe0>)
    9e2c:	7b9a      	ldrb	r2, [r3, #14]
    9e2e:	210c      	movs	r1, #12
    9e30:	438a      	bics	r2, r1
    9e32:	2108      	movs	r1, #8
    9e34:	430a      	orrs	r2, r1
    9e36:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9e38:	4b11      	ldr	r3, [pc, #68]	; (9e80 <Reset_Handler+0xe0>)
    9e3a:	7b9a      	ldrb	r2, [r3, #14]
    9e3c:	2103      	movs	r1, #3
    9e3e:	438a      	bics	r2, r1
    9e40:	2102      	movs	r1, #2
    9e42:	430a      	orrs	r2, r1
    9e44:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9e46:	4b0f      	ldr	r3, [pc, #60]	; (9e84 <Reset_Handler+0xe4>)
    9e48:	685a      	ldr	r2, [r3, #4]
    9e4a:	2180      	movs	r1, #128	; 0x80
    9e4c:	430a      	orrs	r2, r1
    9e4e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    9e50:	4b0d      	ldr	r3, [pc, #52]	; (9e88 <Reset_Handler+0xe8>)
    9e52:	4798      	blx	r3

        /* Branch to main function */
        main();
    9e54:	4b0d      	ldr	r3, [pc, #52]	; (9e8c <Reset_Handler+0xec>)
    9e56:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    9e58:	e7fe      	b.n	9e58 <Reset_Handler+0xb8>
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	0000ac5c 	.word	0x0000ac5c
    9e60:	20000000 	.word	0x20000000
    9e64:	200002d4 	.word	0x200002d4
    9e68:	200002d4 	.word	0x200002d4
    9e6c:	20003ca8 	.word	0x20003ca8
    9e70:	00000000 	.word	0x00000000
    9e74:	e000ed00 	.word	0xe000ed00
    9e78:	41007000 	.word	0x41007000
    9e7c:	41005000 	.word	0x41005000
    9e80:	41004800 	.word	0x41004800
    9e84:	41004000 	.word	0x41004000
    9e88:	0000aadd 	.word	0x0000aadd
    9e8c:	0000a049 	.word	0x0000a049

00009e90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9e90:	b580      	push	{r7, lr}
    9e92:	af00      	add	r7, sp, #0
        while (1) {
        }
    9e94:	e7fe      	b.n	9e94 <Dummy_Handler+0x4>
    9e96:	46c0      	nop			; (mov r8, r8)

00009e98 <initSalloc>:
#define KEY_MEMORY_SIZE  10240

static volatile uint8_t runTimeMemory[KEY_MEMORY_SIZE];
static uint32_t timeMemoryLength = 0;//current length of memory
void initSalloc(void)
{
    9e98:	b580      	push	{r7, lr}
    9e9a:	af00      	add	r7, sp, #0
	memset(runTimeMemory, 0, KEY_MEMORY_SIZE);
    9e9c:	4a04      	ldr	r2, [pc, #16]	; (9eb0 <initSalloc+0x18>)
    9e9e:	23a0      	movs	r3, #160	; 0xa0
    9ea0:	019b      	lsls	r3, r3, #6
    9ea2:	1c10      	adds	r0, r2, #0
    9ea4:	2100      	movs	r1, #0
    9ea6:	1c1a      	adds	r2, r3, #0
    9ea8:	4b02      	ldr	r3, [pc, #8]	; (9eb4 <initSalloc+0x1c>)
    9eaa:	4798      	blx	r3
	
}
    9eac:	46bd      	mov	sp, r7
    9eae:	bd80      	pop	{r7, pc}
    9eb0:	200010cc 	.word	0x200010cc
    9eb4:	0000ab3b 	.word	0x0000ab3b

00009eb8 <salloc>:
uint8_t * salloc(uint32_t size)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b084      	sub	sp, #16
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	6078      	str	r0, [r7, #4]
	uint8_t *memPtr;
	if(timeMemoryLength + size > KEY_MEMORY_SIZE)
    9ec0:	4b0c      	ldr	r3, [pc, #48]	; (9ef4 <salloc+0x3c>)
    9ec2:	681a      	ldr	r2, [r3, #0]
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	18d2      	adds	r2, r2, r3
    9ec8:	23a0      	movs	r3, #160	; 0xa0
    9eca:	019b      	lsls	r3, r3, #6
    9ecc:	429a      	cmp	r2, r3
    9ece:	d901      	bls.n	9ed4 <salloc+0x1c>
	{
		//out of memory 
		return 0;//null
    9ed0:	2300      	movs	r3, #0
    9ed2:	e00b      	b.n	9eec <salloc+0x34>
	}
	memPtr = &runTimeMemory[timeMemoryLength];
    9ed4:	4b07      	ldr	r3, [pc, #28]	; (9ef4 <salloc+0x3c>)
    9ed6:	681a      	ldr	r2, [r3, #0]
    9ed8:	4b07      	ldr	r3, [pc, #28]	; (9ef8 <salloc+0x40>)
    9eda:	18d3      	adds	r3, r2, r3
    9edc:	60fb      	str	r3, [r7, #12]
	timeMemoryLength += size;
    9ede:	4b05      	ldr	r3, [pc, #20]	; (9ef4 <salloc+0x3c>)
    9ee0:	681a      	ldr	r2, [r3, #0]
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	18d2      	adds	r2, r2, r3
    9ee6:	4b03      	ldr	r3, [pc, #12]	; (9ef4 <salloc+0x3c>)
    9ee8:	601a      	str	r2, [r3, #0]
	return memPtr;
    9eea:	68fb      	ldr	r3, [r7, #12]
}
    9eec:	1c18      	adds	r0, r3, #0
    9eee:	46bd      	mov	sp, r7
    9ef0:	b004      	add	sp, #16
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	200038cc 	.word	0x200038cc
    9ef8:	200010cc 	.word	0x200010cc

00009efc <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    9efc:	b580      	push	{r7, lr}
    9efe:	b082      	sub	sp, #8
    9f00:	af00      	add	r7, sp, #0
    9f02:	1c02      	adds	r2, r0, #0
    9f04:	1dfb      	adds	r3, r7, #7
    9f06:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    9f08:	4b13      	ldr	r3, [pc, #76]	; (9f58 <system_set_sleepmode+0x5c>)
    9f0a:	685a      	ldr	r2, [r3, #4]
    9f0c:	21c0      	movs	r1, #192	; 0xc0
    9f0e:	0089      	lsls	r1, r1, #2
    9f10:	430a      	orrs	r2, r1
    9f12:	605a      	str	r2, [r3, #4]
#endif

	switch (sleep_mode) {
    9f14:	1dfb      	adds	r3, r7, #7
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	2b00      	cmp	r3, #0
    9f1a:	db16      	blt.n	9f4a <system_set_sleepmode+0x4e>
    9f1c:	2b02      	cmp	r3, #2
    9f1e:	dd02      	ble.n	9f26 <system_set_sleepmode+0x2a>
    9f20:	2b03      	cmp	r3, #3
    9f22:	d00b      	beq.n	9f3c <system_set_sleepmode+0x40>
    9f24:	e011      	b.n	9f4a <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    9f26:	4b0d      	ldr	r3, [pc, #52]	; (9f5c <system_set_sleepmode+0x60>)
    9f28:	4a0c      	ldr	r2, [pc, #48]	; (9f5c <system_set_sleepmode+0x60>)
    9f2a:	6912      	ldr	r2, [r2, #16]
    9f2c:	2104      	movs	r1, #4
    9f2e:	438a      	bics	r2, r1
    9f30:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    9f32:	4b0b      	ldr	r3, [pc, #44]	; (9f60 <system_set_sleepmode+0x64>)
    9f34:	1dfa      	adds	r2, r7, #7
    9f36:	7812      	ldrb	r2, [r2, #0]
    9f38:	705a      	strb	r2, [r3, #1]
			break;
    9f3a:	e008      	b.n	9f4e <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    9f3c:	4b07      	ldr	r3, [pc, #28]	; (9f5c <system_set_sleepmode+0x60>)
    9f3e:	4a07      	ldr	r2, [pc, #28]	; (9f5c <system_set_sleepmode+0x60>)
    9f40:	6912      	ldr	r2, [r2, #16]
    9f42:	2104      	movs	r1, #4
    9f44:	430a      	orrs	r2, r1
    9f46:	611a      	str	r2, [r3, #16]
			break;
    9f48:	e001      	b.n	9f4e <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    9f4a:	2317      	movs	r3, #23
    9f4c:	e000      	b.n	9f50 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    9f4e:	2300      	movs	r3, #0
}
    9f50:	1c18      	adds	r0, r3, #0
    9f52:	46bd      	mov	sp, r7
    9f54:	b002      	add	sp, #8
    9f56:	bd80      	pop	{r7, pc}
    9f58:	41004000 	.word	0x41004000
    9f5c:	e000ed00 	.word	0xe000ed00
    9f60:	40000400 	.word	0x40000400

00009f64 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    9f68:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    9f6c:	bf30      	wfi
	__DSB();
	__WFI();
}
    9f6e:	46bd      	mov	sp, r7
    9f70:	bd80      	pop	{r7, pc}
    9f72:	46c0      	nop			; (mov r8, r8)

00009f74 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
    9f7a:	1c02      	adds	r2, r0, #0
    9f7c:	1dfb      	adds	r3, r7, #7
    9f7e:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    9f80:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9f82:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    9f86:	4b0a      	ldr	r3, [pc, #40]	; (9fb0 <sleepmgr_sleep+0x3c>)
    9f88:	2200      	movs	r2, #0
    9f8a:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    9f8c:	1dfb      	adds	r3, r7, #7
    9f8e:	781b      	ldrb	r3, [r3, #0]
    9f90:	3b01      	subs	r3, #1
    9f92:	b2db      	uxtb	r3, r3
    9f94:	1c18      	adds	r0, r3, #0
    9f96:	4b07      	ldr	r3, [pc, #28]	; (9fb4 <sleepmgr_sleep+0x40>)
    9f98:	4798      	blx	r3
	cpu_irq_enable();
    9f9a:	4b05      	ldr	r3, [pc, #20]	; (9fb0 <sleepmgr_sleep+0x3c>)
    9f9c:	2201      	movs	r2, #1
    9f9e:	701a      	strb	r2, [r3, #0]
    9fa0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    9fa4:	b662      	cpsie	i
	system_sleep();
    9fa6:	4b04      	ldr	r3, [pc, #16]	; (9fb8 <sleepmgr_sleep+0x44>)
    9fa8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    9faa:	46bd      	mov	sp, r7
    9fac:	b002      	add	sp, #8
    9fae:	bd80      	pop	{r7, pc}
    9fb0:	20000254 	.word	0x20000254
    9fb4:	00009efd 	.word	0x00009efd
    9fb8:	00009f65 	.word	0x00009f65

00009fbc <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	b082      	sub	sp, #8
    9fc0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    9fc2:	1dfb      	adds	r3, r7, #7
    9fc4:	2200      	movs	r2, #0
    9fc6:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    9fc8:	4b0a      	ldr	r3, [pc, #40]	; (9ff4 <sleepmgr_get_sleep_mode+0x38>)
    9fca:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    9fcc:	e007      	b.n	9fde <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    9fce:	683b      	ldr	r3, [r7, #0]
    9fd0:	3301      	adds	r3, #1
    9fd2:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    9fd4:	1dfb      	adds	r3, r7, #7
    9fd6:	1dfa      	adds	r2, r7, #7
    9fd8:	7812      	ldrb	r2, [r2, #0]
    9fda:	3201      	adds	r2, #1
    9fdc:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    9fde:	683b      	ldr	r3, [r7, #0]
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d0f3      	beq.n	9fce <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    9fe6:	1dfb      	adds	r3, r7, #7
    9fe8:	781b      	ldrb	r3, [r3, #0]
}
    9fea:	1c18      	adds	r0, r3, #0
    9fec:	46bd      	mov	sp, r7
    9fee:	b002      	add	sp, #8
    9ff0:	bd80      	pop	{r7, pc}
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	200038dc 	.word	0x200038dc

00009ff8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    9ff8:	b590      	push	{r4, r7, lr}
    9ffa:	b083      	sub	sp, #12
    9ffc:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    9ffe:	b672      	cpsid	i
    a000:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    a004:	4b0d      	ldr	r3, [pc, #52]	; (a03c <sleepmgr_enter_sleep+0x44>)
    a006:	2200      	movs	r2, #0
    a008:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    a00a:	1dfc      	adds	r4, r7, #7
    a00c:	4b0c      	ldr	r3, [pc, #48]	; (a040 <sleepmgr_enter_sleep+0x48>)
    a00e:	4798      	blx	r3
    a010:	1c03      	adds	r3, r0, #0
    a012:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    a014:	1dfb      	adds	r3, r7, #7
    a016:	781b      	ldrb	r3, [r3, #0]
    a018:	2b00      	cmp	r3, #0
    a01a:	d106      	bne.n	a02a <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    a01c:	4b07      	ldr	r3, [pc, #28]	; (a03c <sleepmgr_enter_sleep+0x44>)
    a01e:	2201      	movs	r2, #1
    a020:	701a      	strb	r2, [r3, #0]
    a022:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a026:	b662      	cpsie	i
		return;
    a028:	e004      	b.n	a034 <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    a02a:	1dfb      	adds	r3, r7, #7
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	1c18      	adds	r0, r3, #0
    a030:	4b04      	ldr	r3, [pc, #16]	; (a044 <sleepmgr_enter_sleep+0x4c>)
    a032:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    a034:	46bd      	mov	sp, r7
    a036:	b003      	add	sp, #12
    a038:	bd90      	pop	{r4, r7, pc}
    a03a:	46c0      	nop			; (mov r8, r8)
    a03c:	20000254 	.word	0x20000254
    a040:	00009fbd 	.word	0x00009fbd
    a044:	00009f75 	.word	0x00009f75

0000a048 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)//
{
    a048:	b580      	push	{r7, lr}
    a04a:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    a04c:	4b19      	ldr	r3, [pc, #100]	; (a0b4 <main+0x6c>)
    a04e:	2201      	movs	r2, #1
    a050:	701a      	strb	r2, [r3, #0]
    a052:	f3bf 8f5f 	dmb	sy
    a056:	b662      	cpsie	i
	//sleepmgr_init();
#if !SAMD21 && !SAMR21 && !SAML21
	sysclk_init();
	board_init();
#else
	system_init();
    a058:	4b17      	ldr	r3, [pc, #92]	; (a0b8 <main+0x70>)
    a05a:	4798      	blx	r3
#endif
	ui_init();
    a05c:	4b17      	ldr	r3, [pc, #92]	; (a0bc <main+0x74>)
    a05e:	4798      	blx	r3
	ui_powerdown();
    a060:	4b17      	ldr	r3, [pc, #92]	; (a0c0 <main+0x78>)
    a062:	4798      	blx	r3

	memories_initialization();
    a064:	4b17      	ldr	r3, [pc, #92]	; (a0c4 <main+0x7c>)
    a066:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    a068:	4b17      	ldr	r3, [pc, #92]	; (a0c8 <main+0x80>)
    a06a:	4798      	blx	r3
	while (true) {

	//this is just an attempt to
	static volatile uint16_t virtual_sof_sub = 0;
	
	if (udd_get_frame_number()/500 == virtual_sof_sub++) 
    a06c:	4b17      	ldr	r3, [pc, #92]	; (a0cc <main+0x84>)
    a06e:	4798      	blx	r3
    a070:	1c03      	adds	r3, r0, #0
    a072:	1c1a      	adds	r2, r3, #0
    a074:	4b16      	ldr	r3, [pc, #88]	; (a0d0 <main+0x88>)
    a076:	1c10      	adds	r0, r2, #0
    a078:	22fa      	movs	r2, #250	; 0xfa
    a07a:	0051      	lsls	r1, r2, #1
    a07c:	4798      	blx	r3
    a07e:	1c03      	adds	r3, r0, #0
    a080:	b29a      	uxth	r2, r3
    a082:	4b14      	ldr	r3, [pc, #80]	; (a0d4 <main+0x8c>)
    a084:	881b      	ldrh	r3, [r3, #0]
    a086:	b29b      	uxth	r3, r3
    a088:	1c59      	adds	r1, r3, #1
    a08a:	b288      	uxth	r0, r1
    a08c:	4911      	ldr	r1, [pc, #68]	; (a0d4 <main+0x8c>)
    a08e:	8008      	strh	r0, [r1, #0]
    a090:	429a      	cmp	r2, r3
    a092:	d10b      	bne.n	a0ac <main+0x64>
	{
		virtual_sof_sub = 0;
    a094:	4b0f      	ldr	r3, [pc, #60]	; (a0d4 <main+0x8c>)
    a096:	2200      	movs	r2, #0
    a098:	801a      	strh	r2, [r3, #0]
		static uint16_t virtual_sof = 0;
		ui_process(virtual_sof++);
    a09a:	4b0f      	ldr	r3, [pc, #60]	; (a0d8 <main+0x90>)
    a09c:	881b      	ldrh	r3, [r3, #0]
    a09e:	1c5a      	adds	r2, r3, #1
    a0a0:	b291      	uxth	r1, r2
    a0a2:	4a0d      	ldr	r2, [pc, #52]	; (a0d8 <main+0x90>)
    a0a4:	8011      	strh	r1, [r2, #0]
    a0a6:	1c18      	adds	r0, r3, #0
    a0a8:	4b0c      	ldr	r3, [pc, #48]	; (a0dc <main+0x94>)
    a0aa:	4798      	blx	r3
		//if (main_b_msc_enable) {
			//if (!udi_msc_process_trans()) {
				//sleepmgr_enter_sleep();
			//}
		//}else{
			sleepmgr_enter_sleep();
    a0ac:	4b0c      	ldr	r3, [pc, #48]	; (a0e0 <main+0x98>)
    a0ae:	4798      	blx	r3
		//}
	}
    a0b0:	e7dc      	b.n	a06c <main+0x24>
    a0b2:	46c0      	nop			; (mov r8, r8)
    a0b4:	20000254 	.word	0x20000254
    a0b8:	00006831 	.word	0x00006831
    a0bc:	00000271 	.word	0x00000271
    a0c0:	000002e9 	.word	0x000002e9
    a0c4:	0000a389 	.word	0x0000a389
    a0c8:	000035c5 	.word	0x000035c5
    a0cc:	00007089 	.word	0x00007089
    a0d0:	0000a8f9 	.word	0x0000a8f9
    a0d4:	200038d4 	.word	0x200038d4
    a0d8:	200038d6 	.word	0x200038d6
    a0dc:	00000389 	.word	0x00000389
    a0e0:	00009ff9 	.word	0x00009ff9

0000a0e4 <main_suspend_action>:
}

void main_suspend_action(void)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	af00      	add	r7, sp, #0
	ui_powerdown();
    a0e8:	4b01      	ldr	r3, [pc, #4]	; (a0f0 <main_suspend_action+0xc>)
    a0ea:	4798      	blx	r3
}
    a0ec:	46bd      	mov	sp, r7
    a0ee:	bd80      	pop	{r7, pc}
    a0f0:	000002e9 	.word	0x000002e9

0000a0f4 <main_resume_action>:

void main_resume_action(void)
{
    a0f4:	b580      	push	{r7, lr}
    a0f6:	af00      	add	r7, sp, #0
	ui_wakeup();
    a0f8:	4b01      	ldr	r3, [pc, #4]	; (a100 <main_resume_action+0xc>)
    a0fa:	4798      	blx	r3
}
    a0fc:	46bd      	mov	sp, r7
    a0fe:	bd80      	pop	{r7, pc}
    a100:	00000325 	.word	0x00000325

0000a104 <main_sof_action>:

void main_sof_action(void)
{
    a104:	b580      	push	{r7, lr}
    a106:	af00      	add	r7, sp, #0
	if ((!main_b_mouse_enable) ||
    a108:	4b14      	ldr	r3, [pc, #80]	; (a15c <main_sof_action+0x58>)
    a10a:	781b      	ldrb	r3, [r3, #0]
    a10c:	b2db      	uxtb	r3, r3
    a10e:	2201      	movs	r2, #1
    a110:	4053      	eors	r3, r2
    a112:	b2db      	uxtb	r3, r3
    a114:	2b00      	cmp	r3, #0
    a116:	d117      	bne.n	a148 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
    a118:	4b11      	ldr	r3, [pc, #68]	; (a160 <main_sof_action+0x5c>)
    a11a:	781b      	ldrb	r3, [r3, #0]
    a11c:	b2db      	uxtb	r3, r3
    a11e:	2201      	movs	r2, #1
    a120:	4053      	eors	r3, r2
    a122:	b2db      	uxtb	r3, r3
	ui_wakeup();
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
    a124:	2b00      	cmp	r3, #0
    a126:	d10f      	bne.n	a148 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a128:	4b0e      	ldr	r3, [pc, #56]	; (a164 <main_sof_action+0x60>)
    a12a:	781b      	ldrb	r3, [r3, #0]
    a12c:	b2db      	uxtb	r3, r3
    a12e:	2201      	movs	r2, #1
    a130:	4053      	eors	r3, r2
    a132:	b2db      	uxtb	r3, r3
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
    a134:	2b00      	cmp	r3, #0
    a136:	d107      	bne.n	a148 <main_sof_action+0x44>
		(!main_b_keyboard_enable) ||
		(!main_b_cdc_enable))
    a138:	4b0b      	ldr	r3, [pc, #44]	; (a168 <main_sof_action+0x64>)
    a13a:	781b      	ldrb	r3, [r3, #0]
    a13c:	b2db      	uxtb	r3, r3
    a13e:	2201      	movs	r2, #1
    a140:	4053      	eors	r3, r2
    a142:	b2db      	uxtb	r3, r3

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a144:	2b00      	cmp	r3, #0
    a146:	d000      	beq.n	a14a <main_sof_action+0x46>
		(!main_b_cdc_enable))
		return;
    a148:	e005      	b.n	a156 <main_sof_action+0x52>
	ui_process(udd_get_frame_number());
    a14a:	4b08      	ldr	r3, [pc, #32]	; (a16c <main_sof_action+0x68>)
    a14c:	4798      	blx	r3
    a14e:	1c03      	adds	r3, r0, #0
    a150:	1c18      	adds	r0, r3, #0
    a152:	4b07      	ldr	r3, [pc, #28]	; (a170 <main_sof_action+0x6c>)
    a154:	4798      	blx	r3
}
    a156:	46bd      	mov	sp, r7
    a158:	bd80      	pop	{r7, pc}
    a15a:	46c0      	nop			; (mov r8, r8)
    a15c:	200038d1 	.word	0x200038d1
    a160:	200038d2 	.word	0x200038d2
    a164:	200038d0 	.word	0x200038d0
    a168:	200038d3 	.word	0x200038d3
    a16c:	00007089 	.word	0x00007089
    a170:	00000389 	.word	0x00000389

0000a174 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    a174:	b580      	push	{r7, lr}
    a176:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    a178:	4b01      	ldr	r3, [pc, #4]	; (a180 <main_remotewakeup_enable+0xc>)
    a17a:	4798      	blx	r3
}
    a17c:	46bd      	mov	sp, r7
    a17e:	bd80      	pop	{r7, pc}
    a180:	000002fd 	.word	0x000002fd

0000a184 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    a184:	b580      	push	{r7, lr}
    a186:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    a188:	4b01      	ldr	r3, [pc, #4]	; (a190 <main_remotewakeup_disable+0xc>)
    a18a:	4798      	blx	r3
}
    a18c:	46bd      	mov	sp, r7
    a18e:	bd80      	pop	{r7, pc}
    a190:	00000311 	.word	0x00000311

0000a194 <main_extra_string>:
 * Manufacture, Product and serial number ID.
 *
 * return true, if the string ID requested is know and managed by this functions
 */
bool main_extra_string(void)
{
    a194:	b580      	push	{r7, lr}
    a196:	b084      	sub	sp, #16
    a198:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
    a19a:	1dfb      	adds	r3, r7, #7
    a19c:	2200      	movs	r2, #0
    a19e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    a1a0:	4b36      	ldr	r3, [pc, #216]	; (a27c <main_extra_string+0xe8>)
    a1a2:	885b      	ldrh	r3, [r3, #2]
    a1a4:	1c1a      	adds	r2, r3, #0
    a1a6:	23ff      	movs	r3, #255	; 0xff
    a1a8:	4013      	ands	r3, r2
    a1aa:	2b05      	cmp	r3, #5
    a1ac:	d00e      	beq.n	a1cc <main_extra_string+0x38>
    a1ae:	dc02      	bgt.n	a1b6 <main_extra_string+0x22>
    a1b0:	2b04      	cmp	r3, #4
    a1b2:	d005      	beq.n	a1c0 <main_extra_string+0x2c>
    a1b4:	e01c      	b.n	a1f0 <main_extra_string+0x5c>
    a1b6:	2b06      	cmp	r3, #6
    a1b8:	d00e      	beq.n	a1d8 <main_extra_string+0x44>
    a1ba:	2b07      	cmp	r3, #7
    a1bc:	d012      	beq.n	a1e4 <main_extra_string+0x50>
    a1be:	e017      	b.n	a1f0 <main_extra_string+0x5c>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
    a1c0:	1dfb      	adds	r3, r7, #7
    a1c2:	220d      	movs	r2, #13
    a1c4:	701a      	strb	r2, [r3, #0]
		str = udi_cdc_name;
    a1c6:	4b2e      	ldr	r3, [pc, #184]	; (a280 <main_extra_string+0xec>)
    a1c8:	60bb      	str	r3, [r7, #8]
		break;
    a1ca:	e013      	b.n	a1f4 <main_extra_string+0x60>
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
    a1cc:	1dfb      	adds	r3, r7, #7
    a1ce:	220d      	movs	r2, #13
    a1d0:	701a      	strb	r2, [r3, #0]
		str = udi_msc_name;
    a1d2:	4b2c      	ldr	r3, [pc, #176]	; (a284 <main_extra_string+0xf0>)
    a1d4:	60bb      	str	r3, [r7, #8]
		break;
    a1d6:	e00d      	b.n	a1f4 <main_extra_string+0x60>
	case UDI_HID_MOUSE_STRING_ID:
		str_lgt = sizeof(udi_hid_mouse_name)-1;
    a1d8:	1dfb      	adds	r3, r7, #7
    a1da:	2213      	movs	r2, #19
    a1dc:	701a      	strb	r2, [r3, #0]
		str = udi_hid_mouse_name;
    a1de:	4b2a      	ldr	r3, [pc, #168]	; (a288 <main_extra_string+0xf4>)
    a1e0:	60bb      	str	r3, [r7, #8]
		break;
    a1e2:	e007      	b.n	a1f4 <main_extra_string+0x60>
	case UDI_HID_KBD_STRING_ID:
		str_lgt = sizeof(udi_hid_kbd_name)-1;
    a1e4:	1dfb      	adds	r3, r7, #7
    a1e6:	2216      	movs	r2, #22
    a1e8:	701a      	strb	r2, [r3, #0]
		str = udi_hid_kbd_name;
    a1ea:	4b28      	ldr	r3, [pc, #160]	; (a28c <main_extra_string+0xf8>)
    a1ec:	60bb      	str	r3, [r7, #8]
		break;
    a1ee:	e001      	b.n	a1f4 <main_extra_string+0x60>
	default:
		return false;
    a1f0:	2300      	movs	r3, #0
    a1f2:	e03e      	b.n	a272 <main_extra_string+0xde>
	}

	if (str_lgt!=0) {
    a1f4:	1dfb      	adds	r3, r7, #7
    a1f6:	781b      	ldrb	r3, [r3, #0]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d02f      	beq.n	a25c <main_extra_string+0xc8>
		for( i=0; i<str_lgt; i++) {
    a1fc:	1c3b      	adds	r3, r7, #0
    a1fe:	330f      	adds	r3, #15
    a200:	2200      	movs	r2, #0
    a202:	701a      	strb	r2, [r3, #0]
    a204:	e013      	b.n	a22e <main_extra_string+0x9a>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    a206:	1c3b      	adds	r3, r7, #0
    a208:	330f      	adds	r3, #15
    a20a:	781b      	ldrb	r3, [r3, #0]
    a20c:	1c3a      	adds	r2, r7, #0
    a20e:	320f      	adds	r2, #15
    a210:	7812      	ldrb	r2, [r2, #0]
    a212:	68b9      	ldr	r1, [r7, #8]
    a214:	188a      	adds	r2, r1, r2
    a216:	7812      	ldrb	r2, [r2, #0]
    a218:	491d      	ldr	r1, [pc, #116]	; (a290 <main_extra_string+0xfc>)
    a21a:	005b      	lsls	r3, r3, #1
    a21c:	18cb      	adds	r3, r1, r3
    a21e:	805a      	strh	r2, [r3, #2]
	default:
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
    a220:	1c3b      	adds	r3, r7, #0
    a222:	330f      	adds	r3, #15
    a224:	781a      	ldrb	r2, [r3, #0]
    a226:	1c3b      	adds	r3, r7, #0
    a228:	330f      	adds	r3, #15
    a22a:	3201      	adds	r2, #1
    a22c:	701a      	strb	r2, [r3, #0]
    a22e:	1c3a      	adds	r2, r7, #0
    a230:	320f      	adds	r2, #15
    a232:	1dfb      	adds	r3, r7, #7
    a234:	7812      	ldrb	r2, [r2, #0]
    a236:	781b      	ldrb	r3, [r3, #0]
    a238:	429a      	cmp	r2, r3
    a23a:	d3e4      	bcc.n	a206 <main_extra_string+0x72>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
    a23c:	1dfb      	adds	r3, r7, #7
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	3301      	adds	r3, #1
    a242:	b2db      	uxtb	r3, r3
    a244:	18db      	adds	r3, r3, r3
    a246:	b2da      	uxtb	r2, r3
    a248:	4b11      	ldr	r3, [pc, #68]	; (a290 <main_extra_string+0xfc>)
    a24a:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
    a24c:	4b10      	ldr	r3, [pc, #64]	; (a290 <main_extra_string+0xfc>)
    a24e:	781b      	ldrb	r3, [r3, #0]
    a250:	1c1a      	adds	r2, r3, #0
    a252:	4b0a      	ldr	r3, [pc, #40]	; (a27c <main_extra_string+0xe8>)
    a254:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
    a256:	4b09      	ldr	r3, [pc, #36]	; (a27c <main_extra_string+0xe8>)
    a258:	4a0d      	ldr	r2, [pc, #52]	; (a290 <main_extra_string+0xfc>)
    a25a:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
    a25c:	4b07      	ldr	r3, [pc, #28]	; (a27c <main_extra_string+0xe8>)
    a25e:	899a      	ldrh	r2, [r3, #12]
    a260:	4b06      	ldr	r3, [pc, #24]	; (a27c <main_extra_string+0xe8>)
    a262:	88db      	ldrh	r3, [r3, #6]
    a264:	429a      	cmp	r2, r3
    a266:	d903      	bls.n	a270 <main_extra_string+0xdc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    a268:	4b04      	ldr	r3, [pc, #16]	; (a27c <main_extra_string+0xe8>)
    a26a:	88da      	ldrh	r2, [r3, #6]
    a26c:	4b03      	ldr	r3, [pc, #12]	; (a27c <main_extra_string+0xe8>)
    a26e:	819a      	strh	r2, [r3, #12]
	}
	return true;
    a270:	2301      	movs	r3, #1
}
    a272:	1c18      	adds	r0, r3, #0
    a274:	46bd      	mov	sp, r7
    a276:	b004      	add	sp, #16
    a278:	bd80      	pop	{r7, pc}
    a27a:	46c0      	nop			; (mov r8, r8)
    a27c:	20003adc 	.word	0x20003adc
    a280:	20000258 	.word	0x20000258
    a284:	20000268 	.word	0x20000268
    a288:	20000278 	.word	0x20000278
    a28c:	2000028c 	.word	0x2000028c
    a290:	200002a4 	.word	0x200002a4

0000a294 <main_mouse_enable>:
{
	main_b_msc_enable = false;
}

bool main_mouse_enable(void)
{
    a294:	b580      	push	{r7, lr}
    a296:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    a298:	4b03      	ldr	r3, [pc, #12]	; (a2a8 <main_mouse_enable+0x14>)
    a29a:	2201      	movs	r2, #1
    a29c:	701a      	strb	r2, [r3, #0]
	return true;
    a29e:	2301      	movs	r3, #1
}
    a2a0:	1c18      	adds	r0, r3, #0
    a2a2:	46bd      	mov	sp, r7
    a2a4:	bd80      	pop	{r7, pc}
    a2a6:	46c0      	nop			; (mov r8, r8)
    a2a8:	200038d1 	.word	0x200038d1

0000a2ac <main_mouse_disable>:

void main_mouse_disable(void)
{
    a2ac:	b580      	push	{r7, lr}
    a2ae:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    a2b0:	4b02      	ldr	r3, [pc, #8]	; (a2bc <main_mouse_disable+0x10>)
    a2b2:	2200      	movs	r2, #0
    a2b4:	701a      	strb	r2, [r3, #0]
}
    a2b6:	46bd      	mov	sp, r7
    a2b8:	bd80      	pop	{r7, pc}
    a2ba:	46c0      	nop			; (mov r8, r8)
    a2bc:	200038d1 	.word	0x200038d1

0000a2c0 <main_keyboard_enable>:

bool main_keyboard_enable(void)
{
    a2c0:	b580      	push	{r7, lr}
    a2c2:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = true;
    a2c4:	4b03      	ldr	r3, [pc, #12]	; (a2d4 <main_keyboard_enable+0x14>)
    a2c6:	2201      	movs	r2, #1
    a2c8:	701a      	strb	r2, [r3, #0]
	return true;
    a2ca:	2301      	movs	r3, #1
}
    a2cc:	1c18      	adds	r0, r3, #0
    a2ce:	46bd      	mov	sp, r7
    a2d0:	bd80      	pop	{r7, pc}
    a2d2:	46c0      	nop			; (mov r8, r8)
    a2d4:	200038d0 	.word	0x200038d0

0000a2d8 <main_keyboard_disable>:

void main_keyboard_disable(void)
{
    a2d8:	b580      	push	{r7, lr}
    a2da:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = false;
    a2dc:	4b02      	ldr	r3, [pc, #8]	; (a2e8 <main_keyboard_disable+0x10>)
    a2de:	2200      	movs	r2, #0
    a2e0:	701a      	strb	r2, [r3, #0]
}
    a2e2:	46bd      	mov	sp, r7
    a2e4:	bd80      	pop	{r7, pc}
    a2e6:	46c0      	nop			; (mov r8, r8)
    a2e8:	200038d0 	.word	0x200038d0

0000a2ec <main_cdc_enable>:

bool main_cdc_enable(uint8_t port)
{
    a2ec:	b580      	push	{r7, lr}
    a2ee:	b082      	sub	sp, #8
    a2f0:	af00      	add	r7, sp, #0
    a2f2:	1c02      	adds	r2, r0, #0
    a2f4:	1dfb      	adds	r3, r7, #7
    a2f6:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = true;
    a2f8:	4b06      	ldr	r3, [pc, #24]	; (a314 <main_cdc_enable+0x28>)
    a2fa:	2201      	movs	r2, #1
    a2fc:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    a2fe:	1dfb      	adds	r3, r7, #7
    a300:	781b      	ldrb	r3, [r3, #0]
    a302:	1c18      	adds	r0, r3, #0
    a304:	4b04      	ldr	r3, [pc, #16]	; (a318 <main_cdc_enable+0x2c>)
    a306:	4798      	blx	r3
	return true;
    a308:	2301      	movs	r3, #1
}
    a30a:	1c18      	adds	r0, r3, #0
    a30c:	46bd      	mov	sp, r7
    a30e:	b002      	add	sp, #8
    a310:	bd80      	pop	{r7, pc}
    a312:	46c0      	nop			; (mov r8, r8)
    a314:	200038d3 	.word	0x200038d3
    a318:	0000a8b1 	.word	0x0000a8b1

0000a31c <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    a31c:	b580      	push	{r7, lr}
    a31e:	b082      	sub	sp, #8
    a320:	af00      	add	r7, sp, #0
    a322:	1c02      	adds	r2, r0, #0
    a324:	1dfb      	adds	r3, r7, #7
    a326:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = false;
    a328:	4b05      	ldr	r3, [pc, #20]	; (a340 <main_cdc_disable+0x24>)
    a32a:	2200      	movs	r2, #0
    a32c:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    a32e:	1dfb      	adds	r3, r7, #7
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	1c18      	adds	r0, r3, #0
    a334:	4b03      	ldr	r3, [pc, #12]	; (a344 <main_cdc_disable+0x28>)
    a336:	4798      	blx	r3
}
    a338:	46bd      	mov	sp, r7
    a33a:	b002      	add	sp, #8
    a33c:	bd80      	pop	{r7, pc}
    a33e:	46c0      	nop			; (mov r8, r8)
    a340:	200038d3 	.word	0x200038d3
    a344:	0000a8d5 	.word	0x0000a8d5

0000a348 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    a348:	b580      	push	{r7, lr}
    a34a:	b082      	sub	sp, #8
    a34c:	af00      	add	r7, sp, #0
    a34e:	1c0a      	adds	r2, r1, #0
    a350:	1dfb      	adds	r3, r7, #7
    a352:	1c01      	adds	r1, r0, #0
    a354:	7019      	strb	r1, [r3, #0]
    a356:	1dbb      	adds	r3, r7, #6
    a358:	701a      	strb	r2, [r3, #0]
	if (b_enable) {
    a35a:	1dbb      	adds	r3, r7, #6
    a35c:	781b      	ldrb	r3, [r3, #0]
    a35e:	2b00      	cmp	r3, #0
    a360:	d005      	beq.n	a36e <main_cdc_set_dtr+0x26>
		// Host terminal has open COM
		ui_com_open(port);
    a362:	1dfb      	adds	r3, r7, #7
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	1c18      	adds	r0, r3, #0
    a368:	4b05      	ldr	r3, [pc, #20]	; (a380 <main_cdc_set_dtr+0x38>)
    a36a:	4798      	blx	r3
    a36c:	e004      	b.n	a378 <main_cdc_set_dtr+0x30>
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    a36e:	1dfb      	adds	r3, r7, #7
    a370:	781b      	ldrb	r3, [r3, #0]
    a372:	1c18      	adds	r0, r3, #0
    a374:	4b03      	ldr	r3, [pc, #12]	; (a384 <main_cdc_set_dtr+0x3c>)
    a376:	4798      	blx	r3
	}
}
    a378:	46bd      	mov	sp, r7
    a37a:	b002      	add	sp, #8
    a37c:	bd80      	pop	{r7, pc}
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	00000339 	.word	0x00000339
    a384:	0000034d 	.word	0x0000034d

0000a388 <memories_initialization>:
	   No additional actions to do */
}
#endif

void memories_initialization(void)
{
    a388:	b580      	push	{r7, lr}
    a38a:	af00      	add	r7, sp, #0
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    a38c:	46bd      	mov	sp, r7
    a38e:	bd80      	pop	{r7, pc}

0000a390 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a390:	b580      	push	{r7, lr}
    a392:	b082      	sub	sp, #8
    a394:	af00      	add	r7, sp, #0
    a396:	1c02      	adds	r2, r0, #0
    a398:	1dfb      	adds	r3, r7, #7
    a39a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a39c:	4b06      	ldr	r3, [pc, #24]	; (a3b8 <system_interrupt_enable+0x28>)
    a39e:	1dfa      	adds	r2, r7, #7
    a3a0:	7812      	ldrb	r2, [r2, #0]
    a3a2:	1c11      	adds	r1, r2, #0
    a3a4:	221f      	movs	r2, #31
    a3a6:	400a      	ands	r2, r1
    a3a8:	2101      	movs	r1, #1
    a3aa:	1c08      	adds	r0, r1, #0
    a3ac:	4090      	lsls	r0, r2
    a3ae:	1c02      	adds	r2, r0, #0
    a3b0:	601a      	str	r2, [r3, #0]
}
    a3b2:	46bd      	mov	sp, r7
    a3b4:	b002      	add	sp, #8
    a3b6:	bd80      	pop	{r7, pc}
    a3b8:	e000e100 	.word	0xe000e100

0000a3bc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    a3bc:	b580      	push	{r7, lr}
    a3be:	b082      	sub	sp, #8
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	1c02      	adds	r2, r0, #0
    a3c4:	1dfb      	adds	r3, r7, #7
    a3c6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a3c8:	4a07      	ldr	r2, [pc, #28]	; (a3e8 <system_interrupt_disable+0x2c>)
    a3ca:	1dfb      	adds	r3, r7, #7
    a3cc:	781b      	ldrb	r3, [r3, #0]
    a3ce:	1c19      	adds	r1, r3, #0
    a3d0:	231f      	movs	r3, #31
    a3d2:	400b      	ands	r3, r1
    a3d4:	2101      	movs	r1, #1
    a3d6:	1c08      	adds	r0, r1, #0
    a3d8:	4098      	lsls	r0, r3
    a3da:	1c03      	adds	r3, r0, #0
    a3dc:	1c19      	adds	r1, r3, #0
    a3de:	2380      	movs	r3, #128	; 0x80
    a3e0:	50d1      	str	r1, [r2, r3]
}
    a3e2:	46bd      	mov	sp, r7
    a3e4:	b002      	add	sp, #8
    a3e6:	bd80      	pop	{r7, pc}
    a3e8:	e000e100 	.word	0xe000e100

0000a3ec <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a3ec:	b580      	push	{r7, lr}
    a3ee:	b084      	sub	sp, #16
    a3f0:	af00      	add	r7, sp, #0
    a3f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a3f4:	687b      	ldr	r3, [r7, #4]
    a3f6:	681b      	ldr	r3, [r3, #0]
    a3f8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a3fa:	68fb      	ldr	r3, [r7, #12]
    a3fc:	69db      	ldr	r3, [r3, #28]
    a3fe:	1e5a      	subs	r2, r3, #1
    a400:	4193      	sbcs	r3, r2
    a402:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a404:	1c18      	adds	r0, r3, #0
    a406:	46bd      	mov	sp, r7
    a408:	b004      	add	sp, #16
    a40a:	bd80      	pop	{r7, pc}

0000a40c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b082      	sub	sp, #8
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    a414:	46c0      	nop			; (mov r8, r8)
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	1c18      	adds	r0, r3, #0
    a41a:	4b04      	ldr	r3, [pc, #16]	; (a42c <_usart_wait_for_sync+0x20>)
    a41c:	4798      	blx	r3
    a41e:	1c03      	adds	r3, r0, #0
    a420:	2b00      	cmp	r3, #0
    a422:	d1f8      	bne.n	a416 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a424:	46bd      	mov	sp, r7
    a426:	b002      	add	sp, #8
    a428:	bd80      	pop	{r7, pc}
    a42a:	46c0      	nop			; (mov r8, r8)
    a42c:	0000a3ed 	.word	0x0000a3ed

0000a430 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a430:	b580      	push	{r7, lr}
    a432:	b082      	sub	sp, #8
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a438:	687b      	ldr	r3, [r7, #4]
    a43a:	2280      	movs	r2, #128	; 0x80
    a43c:	05d2      	lsls	r2, r2, #23
    a43e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a440:	687b      	ldr	r3, [r7, #4]
    a442:	2200      	movs	r2, #0
    a444:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a446:	687b      	ldr	r3, [r7, #4]
    a448:	22ff      	movs	r2, #255	; 0xff
    a44a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	2200      	movs	r2, #0
    a450:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a452:	687b      	ldr	r3, [r7, #4]
    a454:	2200      	movs	r2, #0
    a456:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	2296      	movs	r2, #150	; 0x96
    a45c:	0192      	lsls	r2, r2, #6
    a45e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a460:	687a      	ldr	r2, [r7, #4]
    a462:	2324      	movs	r3, #36	; 0x24
    a464:	2101      	movs	r1, #1
    a466:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    a468:	687a      	ldr	r2, [r7, #4]
    a46a:	2325      	movs	r3, #37	; 0x25
    a46c:	2101      	movs	r1, #1
    a46e:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    a470:	687a      	ldr	r2, [r7, #4]
    a472:	2326      	movs	r3, #38	; 0x26
    a474:	2100      	movs	r1, #0
    a476:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    a478:	687a      	ldr	r2, [r7, #4]
    a47a:	2327      	movs	r3, #39	; 0x27
    a47c:	2100      	movs	r1, #0
    a47e:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    a480:	687b      	ldr	r3, [r7, #4]
    a482:	2200      	movs	r2, #0
    a484:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a486:	687b      	ldr	r3, [r7, #4]
    a488:	2288      	movs	r2, #136	; 0x88
    a48a:	0352      	lsls	r2, r2, #13
    a48c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a48e:	687a      	ldr	r2, [r7, #4]
    a490:	232c      	movs	r3, #44	; 0x2c
    a492:	2100      	movs	r1, #0
    a494:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    a496:	687a      	ldr	r2, [r7, #4]
    a498:	232d      	movs	r3, #45	; 0x2d
    a49a:	2100      	movs	r1, #0
    a49c:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a49e:	687b      	ldr	r3, [r7, #4]
    a4a0:	2200      	movs	r2, #0
    a4a2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	2200      	movs	r2, #0
    a4a8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	2200      	movs	r2, #0
    a4ae:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	2200      	movs	r2, #0
    a4b4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	2200      	movs	r2, #0
    a4ba:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	2200      	movs	r2, #0
    a4c0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a4c2:	687b      	ldr	r3, [r7, #4]
    a4c4:	2200      	movs	r2, #0
    a4c6:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	2200      	movs	r2, #0
    a4cc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    a4ce:	687b      	ldr	r3, [r7, #4]
    a4d0:	2200      	movs	r2, #0
    a4d2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	2200      	movs	r2, #0
    a4d8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    a4da:	687b      	ldr	r3, [r7, #4]
    a4dc:	2213      	movs	r2, #19
    a4de:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	2200      	movs	r2, #0
    a4e4:	775a      	strb	r2, [r3, #29]
#endif
}
    a4e6:	46bd      	mov	sp, r7
    a4e8:	b002      	add	sp, #8
    a4ea:	bd80      	pop	{r7, pc}

0000a4ec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	b084      	sub	sp, #16
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a4f4:	687b      	ldr	r3, [r7, #4]
    a4f6:	681b      	ldr	r3, [r3, #0]
    a4f8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a4fa:	687b      	ldr	r3, [r7, #4]
    a4fc:	681b      	ldr	r3, [r3, #0]
    a4fe:	1c18      	adds	r0, r3, #0
    a500:	4b09      	ldr	r3, [pc, #36]	; (a528 <usart_enable+0x3c>)
    a502:	4798      	blx	r3
    a504:	1c03      	adds	r3, r0, #0
    a506:	1c18      	adds	r0, r3, #0
    a508:	4b08      	ldr	r3, [pc, #32]	; (a52c <usart_enable+0x40>)
    a50a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	1c18      	adds	r0, r3, #0
    a510:	4b07      	ldr	r3, [pc, #28]	; (a530 <usart_enable+0x44>)
    a512:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a514:	68fb      	ldr	r3, [r7, #12]
    a516:	681b      	ldr	r3, [r3, #0]
    a518:	2202      	movs	r2, #2
    a51a:	431a      	orrs	r2, r3
    a51c:	68fb      	ldr	r3, [r7, #12]
    a51e:	601a      	str	r2, [r3, #0]
}
    a520:	46bd      	mov	sp, r7
    a522:	b004      	add	sp, #16
    a524:	bd80      	pop	{r7, pc}
    a526:	46c0      	nop			; (mov r8, r8)
    a528:	00004e65 	.word	0x00004e65
    a52c:	0000a391 	.word	0x0000a391
    a530:	0000a40d 	.word	0x0000a40d

0000a534 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    a534:	b580      	push	{r7, lr}
    a536:	b084      	sub	sp, #16
    a538:	af00      	add	r7, sp, #0
    a53a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	681b      	ldr	r3, [r3, #0]
    a546:	1c18      	adds	r0, r3, #0
    a548:	4b0a      	ldr	r3, [pc, #40]	; (a574 <usart_disable+0x40>)
    a54a:	4798      	blx	r3
    a54c:	1c03      	adds	r3, r0, #0
    a54e:	1c18      	adds	r0, r3, #0
    a550:	4b09      	ldr	r3, [pc, #36]	; (a578 <usart_disable+0x44>)
    a552:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	1c18      	adds	r0, r3, #0
    a558:	4b08      	ldr	r3, [pc, #32]	; (a57c <usart_disable+0x48>)
    a55a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    a55c:	68fb      	ldr	r3, [r7, #12]
    a55e:	681b      	ldr	r3, [r3, #0]
    a560:	2202      	movs	r2, #2
    a562:	1c19      	adds	r1, r3, #0
    a564:	4391      	bics	r1, r2
    a566:	1c0a      	adds	r2, r1, #0
    a568:	68fb      	ldr	r3, [r7, #12]
    a56a:	601a      	str	r2, [r3, #0]
}
    a56c:	46bd      	mov	sp, r7
    a56e:	b004      	add	sp, #16
    a570:	bd80      	pop	{r7, pc}
    a572:	46c0      	nop			; (mov r8, r8)
    a574:	00004e65 	.word	0x00004e65
    a578:	0000a3bd 	.word	0x0000a3bd
    a57c:	0000a40d 	.word	0x0000a40d

0000a580 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a580:	b580      	push	{r7, lr}
    a582:	b082      	sub	sp, #8
    a584:	af00      	add	r7, sp, #0
    a586:	6078      	str	r0, [r7, #4]
    a588:	1c0a      	adds	r2, r1, #0
    a58a:	1cfb      	adds	r3, r7, #3
    a58c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a58e:	687a      	ldr	r2, [r7, #4]
    a590:	2331      	movs	r3, #49	; 0x31
    a592:	5cd3      	ldrb	r3, [r2, r3]
    a594:	b2da      	uxtb	r2, r3
    a596:	1cfb      	adds	r3, r7, #3
    a598:	781b      	ldrb	r3, [r3, #0]
    a59a:	2101      	movs	r1, #1
    a59c:	1c08      	adds	r0, r1, #0
    a59e:	4098      	lsls	r0, r3
    a5a0:	1c03      	adds	r3, r0, #0
    a5a2:	b2db      	uxtb	r3, r3
    a5a4:	4313      	orrs	r3, r2
    a5a6:	b2db      	uxtb	r3, r3
    a5a8:	b2d9      	uxtb	r1, r3
    a5aa:	687a      	ldr	r2, [r7, #4]
    a5ac:	2331      	movs	r3, #49	; 0x31
    a5ae:	54d1      	strb	r1, [r2, r3]

}
    a5b0:	46bd      	mov	sp, r7
    a5b2:	b002      	add	sp, #8
    a5b4:	bd80      	pop	{r7, pc}
    a5b6:	46c0      	nop			; (mov r8, r8)

0000a5b8 <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a5b8:	b580      	push	{r7, lr}
    a5ba:	b082      	sub	sp, #8
    a5bc:	af00      	add	r7, sp, #0
    a5be:	6078      	str	r0, [r7, #4]
    a5c0:	1c0a      	adds	r2, r1, #0
    a5c2:	1cfb      	adds	r3, r7, #3
    a5c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a5c6:	687a      	ldr	r2, [r7, #4]
    a5c8:	2331      	movs	r3, #49	; 0x31
    a5ca:	5cd3      	ldrb	r3, [r2, r3]
    a5cc:	b2db      	uxtb	r3, r3
    a5ce:	1cfa      	adds	r2, r7, #3
    a5d0:	7812      	ldrb	r2, [r2, #0]
    a5d2:	2101      	movs	r1, #1
    a5d4:	1c08      	adds	r0, r1, #0
    a5d6:	4090      	lsls	r0, r2
    a5d8:	1c02      	adds	r2, r0, #0
    a5da:	b2d2      	uxtb	r2, r2
    a5dc:	43d2      	mvns	r2, r2
    a5de:	b2d2      	uxtb	r2, r2
    a5e0:	4013      	ands	r3, r2
    a5e2:	b2db      	uxtb	r3, r3
    a5e4:	b2d9      	uxtb	r1, r3
    a5e6:	687a      	ldr	r2, [r7, #4]
    a5e8:	2331      	movs	r3, #49	; 0x31
    a5ea:	54d1      	strb	r1, [r2, r3]
}
    a5ec:	46bd      	mov	sp, r7
    a5ee:	b002      	add	sp, #8
    a5f0:	bd80      	pop	{r7, pc}
    a5f2:	46c0      	nop			; (mov r8, r8)

0000a5f4 <usart_tx_callback>:
 * Called by USART driver when transmit is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_tx_callback(struct usart_module *const module)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b082      	sub	sp, #8
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	6078      	str	r0, [r7, #4]
	/* Data ready to be sent */
	if (udi_cdc_is_rx_ready()) {
    a5fc:	4b0f      	ldr	r3, [pc, #60]	; (a63c <usart_tx_callback+0x48>)
    a5fe:	4798      	blx	r3
    a600:	1c03      	adds	r3, r0, #0
    a602:	2b00      	cmp	r3, #0
    a604:	d00f      	beq.n	a626 <usart_tx_callback+0x32>
		/* Transmit next data */
		ui_com_rx_start();
    a606:	4b0e      	ldr	r3, [pc, #56]	; (a640 <usart_tx_callback+0x4c>)
    a608:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    a60a:	4b0e      	ldr	r3, [pc, #56]	; (a644 <usart_tx_callback+0x50>)
    a60c:	4798      	blx	r3
    a60e:	1c03      	adds	r3, r0, #0
    a610:	b2da      	uxtb	r2, r3
    a612:	4b0d      	ldr	r3, [pc, #52]	; (a648 <usart_tx_callback+0x54>)
    a614:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    a616:	4a0d      	ldr	r2, [pc, #52]	; (a64c <usart_tx_callback+0x58>)
    a618:	4b0b      	ldr	r3, [pc, #44]	; (a648 <usart_tx_callback+0x54>)
    a61a:	1c10      	adds	r0, r2, #0
    a61c:	1c19      	adds	r1, r3, #0
    a61e:	2201      	movs	r2, #1
    a620:	4b0b      	ldr	r3, [pc, #44]	; (a650 <usart_tx_callback+0x5c>)
    a622:	4798      	blx	r3
    a624:	e006      	b.n	a634 <usart_tx_callback+0x40>
	} else {
		/* Fifo empty then Stop UART transmission */
		usart_disable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    a626:	4b09      	ldr	r3, [pc, #36]	; (a64c <usart_tx_callback+0x58>)
    a628:	1c18      	adds	r0, r3, #0
    a62a:	2100      	movs	r1, #0
    a62c:	4b09      	ldr	r3, [pc, #36]	; (a654 <usart_tx_callback+0x60>)
    a62e:	4798      	blx	r3
		ui_com_rx_stop();
    a630:	4b09      	ldr	r3, [pc, #36]	; (a658 <usart_tx_callback+0x64>)
    a632:	4798      	blx	r3
	}
}
    a634:	46bd      	mov	sp, r7
    a636:	b002      	add	sp, #8
    a638:	bd80      	pop	{r7, pc}
    a63a:	46c0      	nop			; (mov r8, r8)
    a63c:	00002891 	.word	0x00002891
    a640:	00000361 	.word	0x00000361
    a644:	000029f1 	.word	0x000029f1
    a648:	200038d8 	.word	0x200038d8
    a64c:	20003c74 	.word	0x20003c74
    a650:	00005705 	.word	0x00005705
    a654:	0000a5b9 	.word	0x0000a5b9
    a658:	00000369 	.word	0x00000369

0000a65c <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    a65c:	b580      	push	{r7, lr}
    a65e:	b082      	sub	sp, #8
    a660:	af00      	add	r7, sp, #0
    a662:	6078      	str	r0, [r7, #4]
	/* Data received */
	ui_com_tx_start();
    a664:	4b10      	ldr	r3, [pc, #64]	; (a6a8 <usart_rx_callback+0x4c>)
    a666:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    a668:	4b10      	ldr	r3, [pc, #64]	; (a6ac <usart_rx_callback+0x50>)
    a66a:	4798      	blx	r3
    a66c:	1c03      	adds	r3, r0, #0
    a66e:	2201      	movs	r2, #1
    a670:	4053      	eors	r3, r2
    a672:	b2db      	uxtb	r3, r3
    a674:	2b00      	cmp	r3, #0
    a676:	d004      	beq.n	a682 <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
    a678:	4b0d      	ldr	r3, [pc, #52]	; (a6b0 <usart_rx_callback+0x54>)
    a67a:	4798      	blx	r3
		ui_com_overflow();
    a67c:	4b0d      	ldr	r3, [pc, #52]	; (a6b4 <usart_rx_callback+0x58>)
    a67e:	4798      	blx	r3
    a680:	e004      	b.n	a68c <usart_rx_callback+0x30>
	} else {
		udi_cdc_putc(rx_data);
    a682:	4b0d      	ldr	r3, [pc, #52]	; (a6b8 <usart_rx_callback+0x5c>)
    a684:	781b      	ldrb	r3, [r3, #0]
    a686:	1c18      	adds	r0, r3, #0
    a688:	4b0c      	ldr	r3, [pc, #48]	; (a6bc <usart_rx_callback+0x60>)
    a68a:	4798      	blx	r3
	}

	ui_com_tx_stop();
    a68c:	4b0c      	ldr	r3, [pc, #48]	; (a6c0 <usart_rx_callback+0x64>)
    a68e:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    a690:	4a0c      	ldr	r2, [pc, #48]	; (a6c4 <usart_rx_callback+0x68>)
    a692:	4b09      	ldr	r3, [pc, #36]	; (a6b8 <usart_rx_callback+0x5c>)
    a694:	1c10      	adds	r0, r2, #0
    a696:	1c19      	adds	r1, r3, #0
    a698:	2201      	movs	r2, #1
    a69a:	4b0b      	ldr	r3, [pc, #44]	; (a6c8 <usart_rx_callback+0x6c>)
    a69c:	4798      	blx	r3

	return;
    a69e:	46c0      	nop			; (mov r8, r8)
}
    a6a0:	46bd      	mov	sp, r7
    a6a2:	b002      	add	sp, #8
    a6a4:	bd80      	pop	{r7, pc}
    a6a6:	46c0      	nop			; (mov r8, r8)
    a6a8:	00000371 	.word	0x00000371
    a6ac:	00002b31 	.word	0x00002b31
    a6b0:	000027cd 	.word	0x000027cd
    a6b4:	00000381 	.word	0x00000381
    a6b8:	200038d9 	.word	0x200038d9
    a6bc:	00002c71 	.word	0x00002c71
    a6c0:	00000379 	.word	0x00000379
    a6c4:	20003c74 	.word	0x20003c74
    a6c8:	00005751 	.word	0x00005751

0000a6cc <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b082      	sub	sp, #8
    a6d0:	af00      	add	r7, sp, #0
    a6d2:	1c02      	adds	r2, r0, #0
    a6d4:	1dfb      	adds	r3, r7, #7
    a6d6:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    a6d8:	4b0b      	ldr	r3, [pc, #44]	; (a708 <uart_rx_notify+0x3c>)
    a6da:	4798      	blx	r3
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    a6dc:	4b0b      	ldr	r3, [pc, #44]	; (a70c <uart_rx_notify+0x40>)
    a6de:	1c18      	adds	r0, r3, #0
    a6e0:	2100      	movs	r1, #0
    a6e2:	4b0b      	ldr	r3, [pc, #44]	; (a710 <uart_rx_notify+0x44>)
    a6e4:	4798      	blx	r3
	tx_data = udi_cdc_getc();
    a6e6:	4b0b      	ldr	r3, [pc, #44]	; (a714 <uart_rx_notify+0x48>)
    a6e8:	4798      	blx	r3
    a6ea:	1c03      	adds	r3, r0, #0
    a6ec:	b2da      	uxtb	r2, r3
    a6ee:	4b0a      	ldr	r3, [pc, #40]	; (a718 <uart_rx_notify+0x4c>)
    a6f0:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    a6f2:	4a06      	ldr	r2, [pc, #24]	; (a70c <uart_rx_notify+0x40>)
    a6f4:	4b08      	ldr	r3, [pc, #32]	; (a718 <uart_rx_notify+0x4c>)
    a6f6:	1c10      	adds	r0, r2, #0
    a6f8:	1c19      	adds	r1, r3, #0
    a6fa:	2201      	movs	r2, #1
    a6fc:	4b07      	ldr	r3, [pc, #28]	; (a71c <uart_rx_notify+0x50>)
    a6fe:	4798      	blx	r3
}
    a700:	46bd      	mov	sp, r7
    a702:	b002      	add	sp, #8
    a704:	bd80      	pop	{r7, pc}
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	00000361 	.word	0x00000361
    a70c:	20003c74 	.word	0x20003c74
    a710:	0000a581 	.word	0x0000a581
    a714:	000029f1 	.word	0x000029f1
    a718:	200038d8 	.word	0x200038d8
    a71c:	00005705 	.word	0x00005705

0000a720 <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    a720:	b580      	push	{r7, lr}
    a722:	b082      	sub	sp, #8
    a724:	af00      	add	r7, sp, #0
    a726:	1c02      	adds	r2, r0, #0
    a728:	6039      	str	r1, [r7, #0]
    a72a:	1dfb      	adds	r3, r7, #7
    a72c:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    a72e:	4b51      	ldr	r3, [pc, #324]	; (a874 <uart_config+0x154>)
    a730:	1c18      	adds	r0, r3, #0
    a732:	4b51      	ldr	r3, [pc, #324]	; (a878 <uart_config+0x158>)
    a734:	4798      	blx	r3

	switch (cfg->bCharFormat) {
    a736:	683b      	ldr	r3, [r7, #0]
    a738:	791b      	ldrb	r3, [r3, #4]
    a73a:	2b01      	cmp	r3, #1
    a73c:	d005      	beq.n	a74a <uart_config+0x2a>
    a73e:	2b02      	cmp	r3, #2
    a740:	d107      	bne.n	a752 <uart_config+0x32>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    a742:	4b4c      	ldr	r3, [pc, #304]	; (a874 <uart_config+0x154>)
    a744:	2240      	movs	r2, #64	; 0x40
    a746:	729a      	strb	r2, [r3, #10]
		break;
    a748:	e007      	b.n	a75a <uart_config+0x3a>

	case CDC_STOP_BITS_1_5:
		usart_conf.stopbits = USART_STOPBITS_1;
    a74a:	4b4a      	ldr	r3, [pc, #296]	; (a874 <uart_config+0x154>)
    a74c:	2200      	movs	r2, #0
    a74e:	729a      	strb	r2, [r3, #10]
		break;
    a750:	e003      	b.n	a75a <uart_config+0x3a>

	case CDC_STOP_BITS_1:
	default:
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
    a752:	4b48      	ldr	r3, [pc, #288]	; (a874 <uart_config+0x154>)
    a754:	2200      	movs	r2, #0
    a756:	729a      	strb	r2, [r3, #10]
		break;
    a758:	46c0      	nop			; (mov r8, r8)
	}

	switch (cfg->bParityType) {
    a75a:	683b      	ldr	r3, [r7, #0]
    a75c:	795b      	ldrb	r3, [r3, #5]
    a75e:	2b02      	cmp	r3, #2
    a760:	d008      	beq.n	a774 <uart_config+0x54>
    a762:	dc02      	bgt.n	a76a <uart_config+0x4a>
    a764:	2b01      	cmp	r3, #1
    a766:	d009      	beq.n	a77c <uart_config+0x5c>
    a768:	e015      	b.n	a796 <uart_config+0x76>
    a76a:	2b03      	cmp	r3, #3
    a76c:	d00b      	beq.n	a786 <uart_config+0x66>
    a76e:	2b04      	cmp	r3, #4
    a770:	d00d      	beq.n	a78e <uart_config+0x6e>
    a772:	e010      	b.n	a796 <uart_config+0x76>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    a774:	4b3f      	ldr	r3, [pc, #252]	; (a874 <uart_config+0x154>)
    a776:	2200      	movs	r2, #0
    a778:	811a      	strh	r2, [r3, #8]
		break;
    a77a:	e010      	b.n	a79e <uart_config+0x7e>

	case CDC_PAR_ODD:
		usart_conf.parity = USART_PARITY_ODD;
    a77c:	4b3d      	ldr	r3, [pc, #244]	; (a874 <uart_config+0x154>)
    a77e:	2280      	movs	r2, #128	; 0x80
    a780:	0192      	lsls	r2, r2, #6
    a782:	811a      	strh	r2, [r3, #8]
		break;
    a784:	e00b      	b.n	a79e <uart_config+0x7e>

	case CDC_PAR_MARK:
		usart_conf.parity = USART_PARITY_NONE;
    a786:	4b3b      	ldr	r3, [pc, #236]	; (a874 <uart_config+0x154>)
    a788:	22ff      	movs	r2, #255	; 0xff
    a78a:	811a      	strh	r2, [r3, #8]
		break;
    a78c:	e007      	b.n	a79e <uart_config+0x7e>

	case CDC_PAR_SPACE:
		usart_conf.parity = USART_PARITY_NONE;
    a78e:	4b39      	ldr	r3, [pc, #228]	; (a874 <uart_config+0x154>)
    a790:	22ff      	movs	r2, #255	; 0xff
    a792:	811a      	strh	r2, [r3, #8]
		break;
    a794:	e003      	b.n	a79e <uart_config+0x7e>

	case CDC_PAR_NONE:
	default:
		usart_conf.parity = USART_PARITY_NONE;
    a796:	4b37      	ldr	r3, [pc, #220]	; (a874 <uart_config+0x154>)
    a798:	22ff      	movs	r2, #255	; 0xff
    a79a:	811a      	strh	r2, [r3, #8]
		break;
    a79c:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg->bDataBits) {
    a79e:	683b      	ldr	r3, [r7, #0]
    a7a0:	799b      	ldrb	r3, [r3, #6]
    a7a2:	2b06      	cmp	r3, #6
    a7a4:	d007      	beq.n	a7b6 <uart_config+0x96>
    a7a6:	2b07      	cmp	r3, #7
    a7a8:	d009      	beq.n	a7be <uart_config+0x9e>
    a7aa:	2b05      	cmp	r3, #5
    a7ac:	d10b      	bne.n	a7c6 <uart_config+0xa6>
	case 5:
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    a7ae:	4b31      	ldr	r3, [pc, #196]	; (a874 <uart_config+0x154>)
    a7b0:	2205      	movs	r2, #5
    a7b2:	72da      	strb	r2, [r3, #11]
		break;
    a7b4:	e00b      	b.n	a7ce <uart_config+0xae>
	case 6:
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    a7b6:	4b2f      	ldr	r3, [pc, #188]	; (a874 <uart_config+0x154>)
    a7b8:	2206      	movs	r2, #6
    a7ba:	72da      	strb	r2, [r3, #11]
		break;
    a7bc:	e007      	b.n	a7ce <uart_config+0xae>
	case 7:
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    a7be:	4b2d      	ldr	r3, [pc, #180]	; (a874 <uart_config+0x154>)
    a7c0:	2207      	movs	r2, #7
    a7c2:	72da      	strb	r2, [r3, #11]
		break;
    a7c4:	e003      	b.n	a7ce <uart_config+0xae>
	case 8:
	default:
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
    a7c6:	4b2b      	ldr	r3, [pc, #172]	; (a874 <uart_config+0x154>)
    a7c8:	2200      	movs	r2, #0
    a7ca:	72da      	strb	r2, [r3, #11]
		break;
    a7cc:	46c0      	nop			; (mov r8, r8)
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    a7ce:	683b      	ldr	r3, [r7, #0]
    a7d0:	781a      	ldrb	r2, [r3, #0]
    a7d2:	7859      	ldrb	r1, [r3, #1]
    a7d4:	0209      	lsls	r1, r1, #8
    a7d6:	430a      	orrs	r2, r1
    a7d8:	7899      	ldrb	r1, [r3, #2]
    a7da:	0409      	lsls	r1, r1, #16
    a7dc:	430a      	orrs	r2, r1
    a7de:	78db      	ldrb	r3, [r3, #3]
    a7e0:	061b      	lsls	r3, r3, #24
    a7e2:	4313      	orrs	r3, r2
    a7e4:	1c1a      	adds	r2, r3, #0
    a7e6:	4b23      	ldr	r3, [pc, #140]	; (a874 <uart_config+0x154>)
    a7e8:	621a      	str	r2, [r3, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    a7ea:	4b22      	ldr	r3, [pc, #136]	; (a874 <uart_config+0x154>)
    a7ec:	2280      	movs	r2, #128	; 0x80
    a7ee:	0352      	lsls	r2, r2, #13
    a7f0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    a7f2:	4b20      	ldr	r3, [pc, #128]	; (a874 <uart_config+0x154>)
    a7f4:	4a21      	ldr	r2, [pc, #132]	; (a87c <uart_config+0x15c>)
    a7f6:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    a7f8:	4b1e      	ldr	r3, [pc, #120]	; (a874 <uart_config+0x154>)
    a7fa:	4a21      	ldr	r2, [pc, #132]	; (a880 <uart_config+0x160>)
    a7fc:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    a7fe:	4b1d      	ldr	r3, [pc, #116]	; (a874 <uart_config+0x154>)
    a800:	2201      	movs	r2, #1
    a802:	4252      	negs	r2, r2
    a804:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    a806:	4b1b      	ldr	r3, [pc, #108]	; (a874 <uart_config+0x154>)
    a808:	2201      	movs	r2, #1
    a80a:	4252      	negs	r2, r2
    a80c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_disable(&usart_module_edbg);
    a80e:	4b1d      	ldr	r3, [pc, #116]	; (a884 <uart_config+0x164>)
    a810:	1c18      	adds	r0, r3, #0
    a812:	4b1d      	ldr	r3, [pc, #116]	; (a888 <uart_config+0x168>)
    a814:	4798      	blx	r3
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    a816:	491b      	ldr	r1, [pc, #108]	; (a884 <uart_config+0x164>)
    a818:	4a1c      	ldr	r2, [pc, #112]	; (a88c <uart_config+0x16c>)
    a81a:	4b16      	ldr	r3, [pc, #88]	; (a874 <uart_config+0x154>)
    a81c:	1c08      	adds	r0, r1, #0
    a81e:	1c11      	adds	r1, r2, #0
    a820:	1c1a      	adds	r2, r3, #0
    a822:	4b1b      	ldr	r3, [pc, #108]	; (a890 <uart_config+0x170>)
    a824:	4798      	blx	r3
	usart_enable(&usart_module_edbg);
    a826:	4b17      	ldr	r3, [pc, #92]	; (a884 <uart_config+0x164>)
    a828:	1c18      	adds	r0, r3, #0
    a82a:	4b1a      	ldr	r3, [pc, #104]	; (a894 <uart_config+0x174>)
    a82c:	4798      	blx	r3

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    a82e:	4a15      	ldr	r2, [pc, #84]	; (a884 <uart_config+0x164>)
    a830:	4b19      	ldr	r3, [pc, #100]	; (a898 <uart_config+0x178>)
    a832:	1c10      	adds	r0, r2, #0
    a834:	1c19      	adds	r1, r3, #0
    a836:	2200      	movs	r2, #0
    a838:	4b18      	ldr	r3, [pc, #96]	; (a89c <uart_config+0x17c>)
    a83a:	4798      	blx	r3
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    a83c:	4b11      	ldr	r3, [pc, #68]	; (a884 <uart_config+0x164>)
    a83e:	1c18      	adds	r0, r3, #0
    a840:	2100      	movs	r1, #0
    a842:	4b17      	ldr	r3, [pc, #92]	; (a8a0 <uart_config+0x180>)
    a844:	4798      	blx	r3
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    a846:	4a0f      	ldr	r2, [pc, #60]	; (a884 <uart_config+0x164>)
    a848:	4b16      	ldr	r3, [pc, #88]	; (a8a4 <uart_config+0x184>)
    a84a:	1c10      	adds	r0, r2, #0
    a84c:	1c19      	adds	r1, r3, #0
    a84e:	2201      	movs	r2, #1
    a850:	4b12      	ldr	r3, [pc, #72]	; (a89c <uart_config+0x17c>)
    a852:	4798      	blx	r3
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
    a854:	4b0b      	ldr	r3, [pc, #44]	; (a884 <uart_config+0x164>)
    a856:	1c18      	adds	r0, r3, #0
    a858:	2101      	movs	r1, #1
    a85a:	4b11      	ldr	r3, [pc, #68]	; (a8a0 <uart_config+0x180>)
    a85c:	4798      	blx	r3
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    a85e:	4a09      	ldr	r2, [pc, #36]	; (a884 <uart_config+0x164>)
    a860:	4b11      	ldr	r3, [pc, #68]	; (a8a8 <uart_config+0x188>)
    a862:	1c10      	adds	r0, r2, #0
    a864:	1c19      	adds	r1, r3, #0
    a866:	2201      	movs	r2, #1
    a868:	4b10      	ldr	r3, [pc, #64]	; (a8ac <uart_config+0x18c>)
    a86a:	4798      	blx	r3
}
    a86c:	46bd      	mov	sp, r7
    a86e:	b002      	add	sp, #8
    a870:	bd80      	pop	{r7, pc}
    a872:	46c0      	nop			; (mov r8, r8)
    a874:	20003c34 	.word	0x20003c34
    a878:	0000a431 	.word	0x0000a431
    a87c:	00160002 	.word	0x00160002
    a880:	00170002 	.word	0x00170002
    a884:	20003c74 	.word	0x20003c74
    a888:	0000a535 	.word	0x0000a535
    a88c:	42001400 	.word	0x42001400
    a890:	00005311 	.word	0x00005311
    a894:	0000a4ed 	.word	0x0000a4ed
    a898:	0000a5f5 	.word	0x0000a5f5
    a89c:	000056bd 	.word	0x000056bd
    a8a0:	0000a581 	.word	0x0000a581
    a8a4:	0000a65d 	.word	0x0000a65d
    a8a8:	200038d9 	.word	0x200038d9
    a8ac:	00005751 	.word	0x00005751

0000a8b0 <uart_open>:

void uart_open(uint8_t port)
{
    a8b0:	b580      	push	{r7, lr}
    a8b2:	b082      	sub	sp, #8
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	1c02      	adds	r2, r0, #0
    a8b8:	1dfb      	adds	r3, r7, #7
    a8ba:	701a      	strb	r2, [r3, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
    a8bc:	4b03      	ldr	r3, [pc, #12]	; (a8cc <uart_open+0x1c>)
    a8be:	1c18      	adds	r0, r3, #0
    a8c0:	4b03      	ldr	r3, [pc, #12]	; (a8d0 <uart_open+0x20>)
    a8c2:	4798      	blx	r3
}
    a8c4:	46bd      	mov	sp, r7
    a8c6:	b002      	add	sp, #8
    a8c8:	bd80      	pop	{r7, pc}
    a8ca:	46c0      	nop			; (mov r8, r8)
    a8cc:	20003c74 	.word	0x20003c74
    a8d0:	0000a4ed 	.word	0x0000a4ed

0000a8d4 <uart_close>:

void uart_close(uint8_t port)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	b082      	sub	sp, #8
    a8d8:	af00      	add	r7, sp, #0
    a8da:	1c02      	adds	r2, r0, #0
    a8dc:	1dfb      	adds	r3, r7, #7
    a8de:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
    a8e0:	4b03      	ldr	r3, [pc, #12]	; (a8f0 <uart_close+0x1c>)
    a8e2:	1c18      	adds	r0, r3, #0
    a8e4:	4b03      	ldr	r3, [pc, #12]	; (a8f4 <uart_close+0x20>)
    a8e6:	4798      	blx	r3
}
    a8e8:	46bd      	mov	sp, r7
    a8ea:	b002      	add	sp, #8
    a8ec:	bd80      	pop	{r7, pc}
    a8ee:	46c0      	nop			; (mov r8, r8)
    a8f0:	20003c74 	.word	0x20003c74
    a8f4:	0000a535 	.word	0x0000a535

0000a8f8 <__aeabi_uidiv>:
    a8f8:	2900      	cmp	r1, #0
    a8fa:	d034      	beq.n	a966 <.udivsi3_skip_div0_test+0x6a>

0000a8fc <.udivsi3_skip_div0_test>:
    a8fc:	2301      	movs	r3, #1
    a8fe:	2200      	movs	r2, #0
    a900:	b410      	push	{r4}
    a902:	4288      	cmp	r0, r1
    a904:	d32c      	bcc.n	a960 <.udivsi3_skip_div0_test+0x64>
    a906:	2401      	movs	r4, #1
    a908:	0724      	lsls	r4, r4, #28
    a90a:	42a1      	cmp	r1, r4
    a90c:	d204      	bcs.n	a918 <.udivsi3_skip_div0_test+0x1c>
    a90e:	4281      	cmp	r1, r0
    a910:	d202      	bcs.n	a918 <.udivsi3_skip_div0_test+0x1c>
    a912:	0109      	lsls	r1, r1, #4
    a914:	011b      	lsls	r3, r3, #4
    a916:	e7f8      	b.n	a90a <.udivsi3_skip_div0_test+0xe>
    a918:	00e4      	lsls	r4, r4, #3
    a91a:	42a1      	cmp	r1, r4
    a91c:	d204      	bcs.n	a928 <.udivsi3_skip_div0_test+0x2c>
    a91e:	4281      	cmp	r1, r0
    a920:	d202      	bcs.n	a928 <.udivsi3_skip_div0_test+0x2c>
    a922:	0049      	lsls	r1, r1, #1
    a924:	005b      	lsls	r3, r3, #1
    a926:	e7f8      	b.n	a91a <.udivsi3_skip_div0_test+0x1e>
    a928:	4288      	cmp	r0, r1
    a92a:	d301      	bcc.n	a930 <.udivsi3_skip_div0_test+0x34>
    a92c:	1a40      	subs	r0, r0, r1
    a92e:	431a      	orrs	r2, r3
    a930:	084c      	lsrs	r4, r1, #1
    a932:	42a0      	cmp	r0, r4
    a934:	d302      	bcc.n	a93c <.udivsi3_skip_div0_test+0x40>
    a936:	1b00      	subs	r0, r0, r4
    a938:	085c      	lsrs	r4, r3, #1
    a93a:	4322      	orrs	r2, r4
    a93c:	088c      	lsrs	r4, r1, #2
    a93e:	42a0      	cmp	r0, r4
    a940:	d302      	bcc.n	a948 <.udivsi3_skip_div0_test+0x4c>
    a942:	1b00      	subs	r0, r0, r4
    a944:	089c      	lsrs	r4, r3, #2
    a946:	4322      	orrs	r2, r4
    a948:	08cc      	lsrs	r4, r1, #3
    a94a:	42a0      	cmp	r0, r4
    a94c:	d302      	bcc.n	a954 <.udivsi3_skip_div0_test+0x58>
    a94e:	1b00      	subs	r0, r0, r4
    a950:	08dc      	lsrs	r4, r3, #3
    a952:	4322      	orrs	r2, r4
    a954:	2800      	cmp	r0, #0
    a956:	d003      	beq.n	a960 <.udivsi3_skip_div0_test+0x64>
    a958:	091b      	lsrs	r3, r3, #4
    a95a:	d001      	beq.n	a960 <.udivsi3_skip_div0_test+0x64>
    a95c:	0909      	lsrs	r1, r1, #4
    a95e:	e7e3      	b.n	a928 <.udivsi3_skip_div0_test+0x2c>
    a960:	1c10      	adds	r0, r2, #0
    a962:	bc10      	pop	{r4}
    a964:	4770      	bx	lr
    a966:	2800      	cmp	r0, #0
    a968:	d001      	beq.n	a96e <.udivsi3_skip_div0_test+0x72>
    a96a:	2000      	movs	r0, #0
    a96c:	43c0      	mvns	r0, r0
    a96e:	b407      	push	{r0, r1, r2}
    a970:	4802      	ldr	r0, [pc, #8]	; (a97c <.udivsi3_skip_div0_test+0x80>)
    a972:	a102      	add	r1, pc, #8	; (adr r1, a97c <.udivsi3_skip_div0_test+0x80>)
    a974:	1840      	adds	r0, r0, r1
    a976:	9002      	str	r0, [sp, #8]
    a978:	bd03      	pop	{r0, r1, pc}
    a97a:	46c0      	nop			; (mov r8, r8)
    a97c:	000000d9 	.word	0x000000d9

0000a980 <__aeabi_uidivmod>:
    a980:	2900      	cmp	r1, #0
    a982:	d0f0      	beq.n	a966 <.udivsi3_skip_div0_test+0x6a>
    a984:	b503      	push	{r0, r1, lr}
    a986:	f7ff ffb9 	bl	a8fc <.udivsi3_skip_div0_test>
    a98a:	bc0e      	pop	{r1, r2, r3}
    a98c:	4342      	muls	r2, r0
    a98e:	1a89      	subs	r1, r1, r2
    a990:	4718      	bx	r3
    a992:	46c0      	nop			; (mov r8, r8)

0000a994 <__aeabi_idiv>:
    a994:	2900      	cmp	r1, #0
    a996:	d041      	beq.n	aa1c <.divsi3_skip_div0_test+0x84>

0000a998 <.divsi3_skip_div0_test>:
    a998:	b410      	push	{r4}
    a99a:	1c04      	adds	r4, r0, #0
    a99c:	404c      	eors	r4, r1
    a99e:	46a4      	mov	ip, r4
    a9a0:	2301      	movs	r3, #1
    a9a2:	2200      	movs	r2, #0
    a9a4:	2900      	cmp	r1, #0
    a9a6:	d500      	bpl.n	a9aa <.divsi3_skip_div0_test+0x12>
    a9a8:	4249      	negs	r1, r1
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d500      	bpl.n	a9b0 <.divsi3_skip_div0_test+0x18>
    a9ae:	4240      	negs	r0, r0
    a9b0:	4288      	cmp	r0, r1
    a9b2:	d32c      	bcc.n	aa0e <.divsi3_skip_div0_test+0x76>
    a9b4:	2401      	movs	r4, #1
    a9b6:	0724      	lsls	r4, r4, #28
    a9b8:	42a1      	cmp	r1, r4
    a9ba:	d204      	bcs.n	a9c6 <.divsi3_skip_div0_test+0x2e>
    a9bc:	4281      	cmp	r1, r0
    a9be:	d202      	bcs.n	a9c6 <.divsi3_skip_div0_test+0x2e>
    a9c0:	0109      	lsls	r1, r1, #4
    a9c2:	011b      	lsls	r3, r3, #4
    a9c4:	e7f8      	b.n	a9b8 <.divsi3_skip_div0_test+0x20>
    a9c6:	00e4      	lsls	r4, r4, #3
    a9c8:	42a1      	cmp	r1, r4
    a9ca:	d204      	bcs.n	a9d6 <.divsi3_skip_div0_test+0x3e>
    a9cc:	4281      	cmp	r1, r0
    a9ce:	d202      	bcs.n	a9d6 <.divsi3_skip_div0_test+0x3e>
    a9d0:	0049      	lsls	r1, r1, #1
    a9d2:	005b      	lsls	r3, r3, #1
    a9d4:	e7f8      	b.n	a9c8 <.divsi3_skip_div0_test+0x30>
    a9d6:	4288      	cmp	r0, r1
    a9d8:	d301      	bcc.n	a9de <.divsi3_skip_div0_test+0x46>
    a9da:	1a40      	subs	r0, r0, r1
    a9dc:	431a      	orrs	r2, r3
    a9de:	084c      	lsrs	r4, r1, #1
    a9e0:	42a0      	cmp	r0, r4
    a9e2:	d302      	bcc.n	a9ea <.divsi3_skip_div0_test+0x52>
    a9e4:	1b00      	subs	r0, r0, r4
    a9e6:	085c      	lsrs	r4, r3, #1
    a9e8:	4322      	orrs	r2, r4
    a9ea:	088c      	lsrs	r4, r1, #2
    a9ec:	42a0      	cmp	r0, r4
    a9ee:	d302      	bcc.n	a9f6 <.divsi3_skip_div0_test+0x5e>
    a9f0:	1b00      	subs	r0, r0, r4
    a9f2:	089c      	lsrs	r4, r3, #2
    a9f4:	4322      	orrs	r2, r4
    a9f6:	08cc      	lsrs	r4, r1, #3
    a9f8:	42a0      	cmp	r0, r4
    a9fa:	d302      	bcc.n	aa02 <.divsi3_skip_div0_test+0x6a>
    a9fc:	1b00      	subs	r0, r0, r4
    a9fe:	08dc      	lsrs	r4, r3, #3
    aa00:	4322      	orrs	r2, r4
    aa02:	2800      	cmp	r0, #0
    aa04:	d003      	beq.n	aa0e <.divsi3_skip_div0_test+0x76>
    aa06:	091b      	lsrs	r3, r3, #4
    aa08:	d001      	beq.n	aa0e <.divsi3_skip_div0_test+0x76>
    aa0a:	0909      	lsrs	r1, r1, #4
    aa0c:	e7e3      	b.n	a9d6 <.divsi3_skip_div0_test+0x3e>
    aa0e:	1c10      	adds	r0, r2, #0
    aa10:	4664      	mov	r4, ip
    aa12:	2c00      	cmp	r4, #0
    aa14:	d500      	bpl.n	aa18 <.divsi3_skip_div0_test+0x80>
    aa16:	4240      	negs	r0, r0
    aa18:	bc10      	pop	{r4}
    aa1a:	4770      	bx	lr
    aa1c:	2800      	cmp	r0, #0
    aa1e:	d006      	beq.n	aa2e <.divsi3_skip_div0_test+0x96>
    aa20:	db03      	blt.n	aa2a <.divsi3_skip_div0_test+0x92>
    aa22:	2000      	movs	r0, #0
    aa24:	43c0      	mvns	r0, r0
    aa26:	0840      	lsrs	r0, r0, #1
    aa28:	e001      	b.n	aa2e <.divsi3_skip_div0_test+0x96>
    aa2a:	2080      	movs	r0, #128	; 0x80
    aa2c:	0600      	lsls	r0, r0, #24
    aa2e:	b407      	push	{r0, r1, r2}
    aa30:	4802      	ldr	r0, [pc, #8]	; (aa3c <.divsi3_skip_div0_test+0xa4>)
    aa32:	a102      	add	r1, pc, #8	; (adr r1, aa3c <.divsi3_skip_div0_test+0xa4>)
    aa34:	1840      	adds	r0, r0, r1
    aa36:	9002      	str	r0, [sp, #8]
    aa38:	bd03      	pop	{r0, r1, pc}
    aa3a:	46c0      	nop			; (mov r8, r8)
    aa3c:	00000019 	.word	0x00000019

0000aa40 <__aeabi_idivmod>:
    aa40:	2900      	cmp	r1, #0
    aa42:	d0eb      	beq.n	aa1c <.divsi3_skip_div0_test+0x84>
    aa44:	b503      	push	{r0, r1, lr}
    aa46:	f7ff ffa7 	bl	a998 <.divsi3_skip_div0_test>
    aa4a:	bc0e      	pop	{r1, r2, r3}
    aa4c:	4342      	muls	r2, r0
    aa4e:	1a89      	subs	r1, r1, r2
    aa50:	4718      	bx	r3
    aa52:	46c0      	nop			; (mov r8, r8)

0000aa54 <__aeabi_idiv0>:
    aa54:	4770      	bx	lr
    aa56:	46c0      	nop			; (mov r8, r8)

0000aa58 <__ctzsi2>:
    aa58:	4241      	negs	r1, r0
    aa5a:	4008      	ands	r0, r1
    aa5c:	211c      	movs	r1, #28
    aa5e:	2301      	movs	r3, #1
    aa60:	041b      	lsls	r3, r3, #16
    aa62:	4298      	cmp	r0, r3
    aa64:	d301      	bcc.n	aa6a <__ctzsi2+0x12>
    aa66:	0c00      	lsrs	r0, r0, #16
    aa68:	3910      	subs	r1, #16
    aa6a:	0a1b      	lsrs	r3, r3, #8
    aa6c:	4298      	cmp	r0, r3
    aa6e:	d301      	bcc.n	aa74 <__ctzsi2+0x1c>
    aa70:	0a00      	lsrs	r0, r0, #8
    aa72:	3908      	subs	r1, #8
    aa74:	091b      	lsrs	r3, r3, #4
    aa76:	4298      	cmp	r0, r3
    aa78:	d301      	bcc.n	aa7e <__ctzsi2+0x26>
    aa7a:	0900      	lsrs	r0, r0, #4
    aa7c:	3904      	subs	r1, #4
    aa7e:	a202      	add	r2, pc, #8	; (adr r2, aa88 <__ctzsi2+0x30>)
    aa80:	5c10      	ldrb	r0, [r2, r0]
    aa82:	1a40      	subs	r0, r0, r1
    aa84:	4770      	bx	lr
    aa86:	46c0      	nop			; (mov r8, r8)
    aa88:	1d1d1c1b 	.word	0x1d1d1c1b
    aa8c:	1e1e1e1e 	.word	0x1e1e1e1e
    aa90:	1f1f1f1f 	.word	0x1f1f1f1f
    aa94:	1f1f1f1f 	.word	0x1f1f1f1f

0000aa98 <__aeabi_lmul>:
    aa98:	469c      	mov	ip, r3
    aa9a:	0403      	lsls	r3, r0, #16
    aa9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa9e:	0c1b      	lsrs	r3, r3, #16
    aaa0:	0417      	lsls	r7, r2, #16
    aaa2:	0c3f      	lsrs	r7, r7, #16
    aaa4:	0c15      	lsrs	r5, r2, #16
    aaa6:	1c1e      	adds	r6, r3, #0
    aaa8:	1c04      	adds	r4, r0, #0
    aaaa:	0c00      	lsrs	r0, r0, #16
    aaac:	437e      	muls	r6, r7
    aaae:	436b      	muls	r3, r5
    aab0:	4347      	muls	r7, r0
    aab2:	4345      	muls	r5, r0
    aab4:	18fb      	adds	r3, r7, r3
    aab6:	0c30      	lsrs	r0, r6, #16
    aab8:	1818      	adds	r0, r3, r0
    aaba:	4287      	cmp	r7, r0
    aabc:	d902      	bls.n	aac4 <__aeabi_lmul+0x2c>
    aabe:	2380      	movs	r3, #128	; 0x80
    aac0:	025b      	lsls	r3, r3, #9
    aac2:	18ed      	adds	r5, r5, r3
    aac4:	0c03      	lsrs	r3, r0, #16
    aac6:	18ed      	adds	r5, r5, r3
    aac8:	4663      	mov	r3, ip
    aaca:	435c      	muls	r4, r3
    aacc:	434a      	muls	r2, r1
    aace:	0436      	lsls	r6, r6, #16
    aad0:	0c36      	lsrs	r6, r6, #16
    aad2:	18a1      	adds	r1, r4, r2
    aad4:	0400      	lsls	r0, r0, #16
    aad6:	1980      	adds	r0, r0, r6
    aad8:	1949      	adds	r1, r1, r5
    aada:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000aadc <__libc_init_array>:
    aadc:	b570      	push	{r4, r5, r6, lr}
    aade:	4b0e      	ldr	r3, [pc, #56]	; (ab18 <__libc_init_array+0x3c>)
    aae0:	4d0e      	ldr	r5, [pc, #56]	; (ab1c <__libc_init_array+0x40>)
    aae2:	2400      	movs	r4, #0
    aae4:	1aed      	subs	r5, r5, r3
    aae6:	10ad      	asrs	r5, r5, #2
    aae8:	1c1e      	adds	r6, r3, #0
    aaea:	42ac      	cmp	r4, r5
    aaec:	d004      	beq.n	aaf8 <__libc_init_array+0x1c>
    aaee:	00a3      	lsls	r3, r4, #2
    aaf0:	58f3      	ldr	r3, [r6, r3]
    aaf2:	4798      	blx	r3
    aaf4:	3401      	adds	r4, #1
    aaf6:	e7f8      	b.n	aaea <__libc_init_array+0xe>
    aaf8:	f000 f8a0 	bl	ac3c <_init>
    aafc:	4b08      	ldr	r3, [pc, #32]	; (ab20 <__libc_init_array+0x44>)
    aafe:	4d09      	ldr	r5, [pc, #36]	; (ab24 <__libc_init_array+0x48>)
    ab00:	2400      	movs	r4, #0
    ab02:	1aed      	subs	r5, r5, r3
    ab04:	10ad      	asrs	r5, r5, #2
    ab06:	1c1e      	adds	r6, r3, #0
    ab08:	42ac      	cmp	r4, r5
    ab0a:	d004      	beq.n	ab16 <__libc_init_array+0x3a>
    ab0c:	00a3      	lsls	r3, r4, #2
    ab0e:	58f3      	ldr	r3, [r6, r3]
    ab10:	4798      	blx	r3
    ab12:	3401      	adds	r4, #1
    ab14:	e7f8      	b.n	ab08 <__libc_init_array+0x2c>
    ab16:	bd70      	pop	{r4, r5, r6, pc}
    ab18:	0000ac48 	.word	0x0000ac48
    ab1c:	0000ac48 	.word	0x0000ac48
    ab20:	0000ac48 	.word	0x0000ac48
    ab24:	0000ac4c 	.word	0x0000ac4c

0000ab28 <memcpy>:
    ab28:	b510      	push	{r4, lr}
    ab2a:	2300      	movs	r3, #0
    ab2c:	4293      	cmp	r3, r2
    ab2e:	d003      	beq.n	ab38 <memcpy+0x10>
    ab30:	5ccc      	ldrb	r4, [r1, r3]
    ab32:	54c4      	strb	r4, [r0, r3]
    ab34:	3301      	adds	r3, #1
    ab36:	e7f9      	b.n	ab2c <memcpy+0x4>
    ab38:	bd10      	pop	{r4, pc}

0000ab3a <memset>:
    ab3a:	1c03      	adds	r3, r0, #0
    ab3c:	1882      	adds	r2, r0, r2
    ab3e:	4293      	cmp	r3, r2
    ab40:	d002      	beq.n	ab48 <memset+0xe>
    ab42:	7019      	strb	r1, [r3, #0]
    ab44:	3301      	adds	r3, #1
    ab46:	e7fa      	b.n	ab3e <memset+0x4>
    ab48:	4770      	bx	lr
    ab4a:	0000      	movs	r0, r0
    ab4c:	31333231 	.word	0x31333231
    ab50:	32313332 	.word	0x32313332
    ab54:	33323133 	.word	0x33323133
    ab58:	00000000 	.word	0x00000000
    ab5c:	00003d62 	.word	0x00003d62
    ab60:	00003d4a 	.word	0x00003d4a
    ab64:	00003d62 	.word	0x00003d62
    ab68:	00003d52 	.word	0x00003d52
    ab6c:	00003d62 	.word	0x00003d62
    ab70:	00003d42 	.word	0x00003d42
    ab74:	00003d62 	.word	0x00003d62
    ab78:	00003d62 	.word	0x00003d62
    ab7c:	00003d62 	.word	0x00003d62
    ab80:	00003d5a 	.word	0x00003d5a
    ab84:	42000800 	.word	0x42000800
    ab88:	42000c00 	.word	0x42000c00
    ab8c:	42001000 	.word	0x42001000
    ab90:	42001400 	.word	0x42001400
    ab94:	42001800 	.word	0x42001800
    ab98:	42001c00 	.word	0x42001c00
    ab9c:	0c0b0a09 	.word	0x0c0b0a09
    aba0:	00000e0d 	.word	0x00000e0d
    aba4:	00005cce 	.word	0x00005cce
    aba8:	00005d4c 	.word	0x00005d4c
    abac:	00005d4c 	.word	0x00005d4c
    abb0:	00005cf2 	.word	0x00005cf2
    abb4:	00005cec 	.word	0x00005cec
    abb8:	00005cf8 	.word	0x00005cf8
    abbc:	00005cd4 	.word	0x00005cd4
    abc0:	00005cfe 	.word	0x00005cfe
    abc4:	00005d32 	.word	0x00005d32
    abc8:	00005ec8 	.word	0x00005ec8
    abcc:	00005f18 	.word	0x00005f18
    abd0:	00005f18 	.word	0x00005f18
    abd4:	00005f14 	.word	0x00005f14
    abd8:	00005eba 	.word	0x00005eba
    abdc:	00005eda 	.word	0x00005eda
    abe0:	00005eaa 	.word	0x00005eaa
    abe4:	00005eec 	.word	0x00005eec
    abe8:	00005efe 	.word	0x00005efe
    abec:	00005f66 	.word	0x00005f66
    abf0:	00005f94 	.word	0x00005f94
    abf4:	00005f94 	.word	0x00005f94
    abf8:	00005f90 	.word	0x00005f90
    abfc:	00005f60 	.word	0x00005f60
    ac00:	00005f6c 	.word	0x00005f6c
    ac04:	00005f5a 	.word	0x00005f5a
    ac08:	00005f72 	.word	0x00005f72
    ac0c:	00005f78 	.word	0x00005f78
    ac10:	01020300 	.word	0x01020300

0000ac14 <_usb_device_irq_bits>:
    ac14:	00080004 00800070 01000001 00000200     ....p...........

0000ac24 <_usb_endpoint_irq_bits>:
    ac24:	60100c03 00008be4 00008bfa 00008d5a     ...`........Z...
    ac34:	00008e22 00008eea                       ".......

0000ac3c <_init>:
    ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac3e:	46c0      	nop			; (mov r8, r8)
    ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac42:	bc08      	pop	{r3}
    ac44:	469e      	mov	lr, r3
    ac46:	4770      	bx	lr

0000ac48 <__init_array_start>:
    ac48:	000000d9 	.word	0x000000d9

0000ac4c <_fini>:
    ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac4e:	46c0      	nop			; (mov r8, r8)
    ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac52:	bc08      	pop	{r3}
    ac54:	469e      	mov	lr, r3
    ac56:	4770      	bx	lr

0000ac58 <__fini_array_start>:
    ac58:	000000b1 	.word	0x000000b1
