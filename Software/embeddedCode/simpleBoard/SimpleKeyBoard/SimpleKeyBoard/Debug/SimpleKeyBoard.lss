
SimpleKeyBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b388  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002dc  20000000  0000b388  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006eb4  200002dc  0000b664  000182dc  2**2
                  ALLOC
  3 .stack        00000b00  20007190  00012518  000182dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000182dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00018304  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c889  00000000  00000000  0001835f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000471a  00000000  00000000  00044be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006383  00000000  00000000  00049302  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001218  00000000  00000000  0004f685  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001038  00000000  00000000  0005089d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021a00  00000000  00000000  000518d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019eb6  00000000  00000000  000732d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096eee  00000000  00000000  0008d18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003d3c  00000000  00000000  0012407c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20007c90 	.word	0x20007c90
       4:	0000a335 	.word	0x0000a335
       8:	0000a425 	.word	0x0000a425
       c:	0000a425 	.word	0x0000a425
	...
      2c:	0000a425 	.word	0x0000a425
	...
      38:	0000a425 	.word	0x0000a425
      3c:	0000a425 	.word	0x0000a425
      40:	0000a425 	.word	0x0000a425
      44:	0000a425 	.word	0x0000a425
      48:	0000a425 	.word	0x0000a425
      4c:	0000a425 	.word	0x0000a425
      50:	000047c5 	.word	0x000047c5
      54:	0000a425 	.word	0x0000a425
      58:	0000a425 	.word	0x0000a425
      5c:	00009fa5 	.word	0x00009fa5
      60:	0000a425 	.word	0x0000a425
      64:	00005329 	.word	0x00005329
      68:	0000533d 	.word	0x0000533d
      6c:	00005351 	.word	0x00005351
      70:	00005365 	.word	0x00005365
      74:	00005379 	.word	0x00005379
      78:	0000538d 	.word	0x0000538d
      7c:	0000a425 	.word	0x0000a425
      80:	0000a425 	.word	0x0000a425
      84:	0000a425 	.word	0x0000a425
      88:	0000a425 	.word	0x0000a425
      8c:	0000a425 	.word	0x0000a425
      90:	0000a425 	.word	0x0000a425
      94:	0000a425 	.word	0x0000a425
      98:	0000a425 	.word	0x0000a425
      9c:	0000a425 	.word	0x0000a425
      a0:	0000a425 	.word	0x0000a425
      a4:	0000a425 	.word	0x0000a425
      a8:	0000a425 	.word	0x0000a425
      ac:	0000a425 	.word	0x0000a425

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200002dc 	.word	0x200002dc
      d0:	00000000 	.word	0x00000000
      d4:	0000b388 	.word	0x0000b388

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	0000b388 	.word	0x0000b388
     104:	200002e0 	.word	0x200002e0
     108:	0000b388 	.word	0x0000b388
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b580      	push	{r7, lr}
     112:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     114:	2000      	movs	r0, #0
     116:	4b10      	ldr	r3, [pc, #64]	; (158 <delay_init+0x48>)
     118:	4798      	blx	r3
     11a:	1c02      	adds	r2, r0, #0
     11c:	4b0f      	ldr	r3, [pc, #60]	; (15c <delay_init+0x4c>)
     11e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     120:	4b0e      	ldr	r3, [pc, #56]	; (15c <delay_init+0x4c>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	4b0e      	ldr	r3, [pc, #56]	; (160 <delay_init+0x50>)
     126:	1c10      	adds	r0, r2, #0
     128:	22fa      	movs	r2, #250	; 0xfa
     12a:	0091      	lsls	r1, r2, #2
     12c:	4798      	blx	r3
     12e:	1c03      	adds	r3, r0, #0
     130:	1c1a      	adds	r2, r3, #0
     132:	4b0a      	ldr	r3, [pc, #40]	; (15c <delay_init+0x4c>)
     134:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <delay_init+0x4c>)
     138:	681a      	ldr	r2, [r3, #0]
     13a:	4b09      	ldr	r3, [pc, #36]	; (160 <delay_init+0x50>)
     13c:	1c10      	adds	r0, r2, #0
     13e:	22fa      	movs	r2, #250	; 0xfa
     140:	0091      	lsls	r1, r2, #2
     142:	4798      	blx	r3
     144:	1c03      	adds	r3, r0, #0
     146:	1c1a      	adds	r2, r3, #0
     148:	4b06      	ldr	r3, [pc, #24]	; (164 <delay_init+0x54>)
     14a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     14c:	4b06      	ldr	r3, [pc, #24]	; (168 <delay_init+0x58>)
     14e:	2205      	movs	r2, #5
     150:	601a      	str	r2, [r3, #0]
}
     152:	46bd      	mov	sp, r7
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00006879 	.word	0x00006879
     15c:	20000000 	.word	0x20000000
     160:	0000ae7d 	.word	0x0000ae7d
     164:	20000004 	.word	0x20000004
     168:	e000e010 	.word	0xe000e010

0000016c <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
     16c:	b580      	push	{r7, lr}
     16e:	b082      	sub	sp, #8
     170:	af00      	add	r7, sp, #0
     172:	6078      	str	r0, [r7, #4]
	return pin >> 5;
     174:	687b      	ldr	r3, [r7, #4]
     176:	095b      	lsrs	r3, r3, #5
}
     178:	1c18      	adds	r0, r3, #0
     17a:	46bd      	mov	sp, r7
     17c:	b002      	add	sp, #8
     17e:	bd80      	pop	{r7, pc}

00000180 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
     180:	b580      	push	{r7, lr}
     182:	b082      	sub	sp, #8
     184:	af00      	add	r7, sp, #0
     186:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
     188:	687b      	ldr	r3, [r7, #4]
     18a:	01db      	lsls	r3, r3, #7
     18c:	4a02      	ldr	r2, [pc, #8]	; (198 <arch_ioport_port_to_base+0x18>)
     18e:	189b      	adds	r3, r3, r2
}
     190:	1c18      	adds	r0, r3, #0
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	41004400 	.word	0x41004400

0000019c <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	1c18      	adds	r0, r3, #0
     1a8:	4b05      	ldr	r3, [pc, #20]	; (1c0 <arch_ioport_pin_to_base+0x24>)
     1aa:	4798      	blx	r3
     1ac:	1c03      	adds	r3, r0, #0
     1ae:	1c18      	adds	r0, r3, #0
     1b0:	4b04      	ldr	r3, [pc, #16]	; (1c4 <arch_ioport_pin_to_base+0x28>)
     1b2:	4798      	blx	r3
     1b4:	1c03      	adds	r3, r0, #0
}
     1b6:	1c18      	adds	r0, r3, #0
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	0000016d 	.word	0x0000016d
     1c4:	00000181 	.word	0x00000181

000001c8 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
     1c8:	b580      	push	{r7, lr}
     1ca:	b082      	sub	sp, #8
     1cc:	af00      	add	r7, sp, #0
     1ce:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
     1d0:	687a      	ldr	r2, [r7, #4]
     1d2:	231f      	movs	r3, #31
     1d4:	4013      	ands	r3, r2
     1d6:	2201      	movs	r2, #1
     1d8:	1c11      	adds	r1, r2, #0
     1da:	4099      	lsls	r1, r3
     1dc:	1c0b      	adds	r3, r1, #0
}
     1de:	1c18      	adds	r0, r3, #0
     1e0:	46bd      	mov	sp, r7
     1e2:	b002      	add	sp, #8
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)

000001e8 <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
     1ec:	46bd      	mov	sp, r7
     1ee:	bd80      	pop	{r7, pc}

000001f0 <arch_ioport_set_port_mode>:
			arch_ioport_pin_to_mask(pin));
}

inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
     1f0:	b580      	push	{r7, lr}
     1f2:	b08a      	sub	sp, #40	; 0x28
     1f4:	af00      	add	r7, sp, #0
     1f6:	60f8      	str	r0, [r7, #12]
     1f8:	60b9      	str	r1, [r7, #8]
     1fa:	607a      	str	r2, [r7, #4]
	PortGroup *base = arch_ioport_port_to_base(port);
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	1c18      	adds	r0, r3, #0
     200:	4b2d      	ldr	r3, [pc, #180]	; (2b8 <arch_ioport_set_port_mode+0xc8>)
     202:	4798      	blx	r3
     204:	1c03      	adds	r3, r0, #0
     206:	623b      	str	r3, [r7, #32]

	uint32_t config_mask = 0;
     208:	2300      	movs	r3, #0
     20a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t config_mux  = 0;
     20c:	2300      	movs	r3, #0
     20e:	61fb      	str	r3, [r7, #28]

	config_mask |= PORT_WRCONFIG_INEN;
     210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     212:	2280      	movs	r2, #128	; 0x80
     214:	0292      	lsls	r2, r2, #10
     216:	4313      	orrs	r3, r2
     218:	627b      	str	r3, [r7, #36]	; 0x24

	if ((mode & IOPORT_MODE_PULLDOWN) || (mode & IOPORT_MODE_PULLUP)) {
     21a:	687a      	ldr	r2, [r7, #4]
     21c:	2320      	movs	r3, #32
     21e:	4013      	ands	r3, r2
     220:	d103      	bne.n	22a <arch_ioport_set_port_mode+0x3a>
     222:	687a      	ldr	r2, [r7, #4]
     224:	2310      	movs	r3, #16
     226:	4013      	ands	r3, r2
     228:	d004      	beq.n	234 <arch_ioport_set_port_mode+0x44>
		config_mask |= PORT_WRCONFIG_PULLEN;
     22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     22c:	2280      	movs	r2, #128	; 0x80
     22e:	02d2      	lsls	r2, r2, #11
     230:	4313      	orrs	r3, r2
     232:	627b      	str	r3, [r7, #36]	; 0x24
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		config_mask |= PORT_WRCONFIG_ODRAIN;
	}
#endif

	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
     234:	687a      	ldr	r2, [r7, #4]
     236:	2380      	movs	r3, #128	; 0x80
     238:	4013      	ands	r3, r2
     23a:	d004      	beq.n	246 <arch_ioport_set_port_mode+0x56>
		config_mask |= PORT_WRCONFIG_DRVSTR;
     23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     23e:	2280      	movs	r2, #128	; 0x80
     240:	03d2      	lsls	r2, r2, #15
     242:	4313      	orrs	r3, r2
     244:	627b      	str	r3, [r7, #36]	; 0x24
	}

	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;
     246:	687a      	ldr	r2, [r7, #4]
     248:	230f      	movs	r3, #15
     24a:	4013      	ands	r3, r2
     24c:	061b      	lsls	r3, r3, #24
     24e:	61fb      	str	r3, [r7, #28]

	uint32_t lower_pin_mask = (mask & 0xFFFF);
     250:	68bb      	ldr	r3, [r7, #8]
     252:	041b      	lsls	r3, r3, #16
     254:	0c1b      	lsrs	r3, r3, #16
     256:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (mask >> 16);
     258:	68bb      	ldr	r3, [r7, #8]
     25a:	0c1b      	lsrs	r3, r3, #16
     25c:	617b      	str	r3, [r7, #20]

	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     25e:	69ba      	ldr	r2, [r7, #24]
     260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     262:	431a      	orrs	r2, r3
			config_mask | config_mux |
     264:	69fb      	ldr	r3, [r7, #28]
     266:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	05d2      	lsls	r2, r2, #23
     26c:	431a      	orrs	r2, r3
	config_mux = (mode & IOPORT_MODE_MUX_MASK) << PORT_WRCONFIG_PMUX_Pos;

	uint32_t lower_pin_mask = (mask & 0xFFFF);
	uint32_t upper_pin_mask = (mask >> 16);

	base->WRCONFIG.reg =
     26e:	6a3b      	ldr	r3, [r7, #32]
     270:	629a      	str	r2, [r3, #40]	; 0x28
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     272:	697a      	ldr	r2, [r7, #20]
     274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     276:	431a      	orrs	r2, r3
			config_mask | config_mux |
     278:	69fb      	ldr	r3, [r7, #28]
     27a:	4313      	orrs	r3, r2
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     27c:	22d0      	movs	r2, #208	; 0xd0
     27e:	0612      	lsls	r2, r2, #24
     280:	431a      	orrs	r2, r3
	base->WRCONFIG.reg =
			(lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	base->WRCONFIG.reg =
     282:	6a3b      	ldr	r3, [r7, #32]
     284:	629a      	str	r2, [r3, #40]	; 0x28
			(upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			config_mask | config_mux |
			PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if (mode & IOPORT_MODE_PULLDOWN) {
     286:	687a      	ldr	r2, [r7, #4]
     288:	2320      	movs	r3, #32
     28a:	4013      	ands	r3, r2
     28c:	d006      	beq.n	29c <arch_ioport_set_port_mode+0xac>
		base->OUTCLR.reg |= mask;
     28e:	6a3b      	ldr	r3, [r7, #32]
     290:	695a      	ldr	r2, [r3, #20]
     292:	68bb      	ldr	r3, [r7, #8]
     294:	431a      	orrs	r2, r3
     296:	6a3b      	ldr	r3, [r7, #32]
     298:	615a      	str	r2, [r3, #20]
     29a:	e009      	b.n	2b0 <arch_ioport_set_port_mode+0xc0>
	}
	else if (mode & IOPORT_MODE_PULLUP) {
     29c:	687a      	ldr	r2, [r7, #4]
     29e:	2310      	movs	r3, #16
     2a0:	4013      	ands	r3, r2
     2a2:	d005      	beq.n	2b0 <arch_ioport_set_port_mode+0xc0>
		base->OUTSET.reg |= mask;
     2a4:	6a3b      	ldr	r3, [r7, #32]
     2a6:	699a      	ldr	r2, [r3, #24]
     2a8:	68bb      	ldr	r3, [r7, #8]
     2aa:	431a      	orrs	r2, r3
     2ac:	6a3b      	ldr	r3, [r7, #32]
     2ae:	619a      	str	r2, [r3, #24]
	}
}
     2b0:	46bd      	mov	sp, r7
     2b2:	b00a      	add	sp, #40	; 0x28
     2b4:	bd80      	pop	{r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00000181 	.word	0x00000181

000002bc <arch_ioport_set_pin_mode>:

inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
     2bc:	b590      	push	{r4, r7, lr}
     2be:	b083      	sub	sp, #12
     2c0:	af00      	add	r7, sp, #0
     2c2:	6078      	str	r0, [r7, #4]
     2c4:	6039      	str	r1, [r7, #0]
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	1c18      	adds	r0, r3, #0
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <arch_ioport_set_pin_mode+0x30>)
     2cc:	4798      	blx	r3
     2ce:	1c04      	adds	r4, r0, #0
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	1c18      	adds	r0, r3, #0
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <arch_ioport_set_pin_mode+0x34>)
     2d6:	4798      	blx	r3
     2d8:	1c02      	adds	r2, r0, #0
     2da:	683b      	ldr	r3, [r7, #0]
     2dc:	1c20      	adds	r0, r4, #0
     2de:	1c11      	adds	r1, r2, #0
     2e0:	1c1a      	adds	r2, r3, #0
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <arch_ioport_set_pin_mode+0x38>)
     2e4:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin), mode);
}
     2e6:	46bd      	mov	sp, r7
     2e8:	b003      	add	sp, #12
     2ea:	bd90      	pop	{r4, r7, pc}
     2ec:	0000016d 	.word	0x0000016d
     2f0:	000001c9 	.word	0x000001c9
     2f4:	000001f1 	.word	0x000001f1

000002f8 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b084      	sub	sp, #16
     2fc:	af00      	add	r7, sp, #0
     2fe:	6078      	str	r0, [r7, #4]
     300:	1c0a      	adds	r2, r1, #0
     302:	1cfb      	adds	r3, r7, #3
     304:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
     306:	687b      	ldr	r3, [r7, #4]
     308:	1c18      	adds	r0, r3, #0
     30a:	4b18      	ldr	r3, [pc, #96]	; (36c <arch_ioport_set_pin_dir+0x74>)
     30c:	4798      	blx	r3
     30e:	1c03      	adds	r3, r0, #0
     310:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
     312:	1cfb      	adds	r3, r7, #3
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b01      	cmp	r3, #1
     318:	d107      	bne.n	32a <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	1c18      	adds	r0, r3, #0
     31e:	4b14      	ldr	r3, [pc, #80]	; (370 <arch_ioport_set_pin_dir+0x78>)
     320:	4798      	blx	r3
     322:	1c02      	adds	r2, r0, #0
     324:	68fb      	ldr	r3, [r7, #12]
     326:	609a      	str	r2, [r3, #8]
     328:	e00a      	b.n	340 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
     32a:	1cfb      	adds	r3, r7, #3
     32c:	781b      	ldrb	r3, [r3, #0]
     32e:	2b00      	cmp	r3, #0
     330:	d106      	bne.n	340 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
     332:	687b      	ldr	r3, [r7, #4]
     334:	1c18      	adds	r0, r3, #0
     336:	4b0e      	ldr	r3, [pc, #56]	; (370 <arch_ioport_set_pin_dir+0x78>)
     338:	4798      	blx	r3
     33a:	1c02      	adds	r2, r0, #0
     33c:	68fb      	ldr	r3, [r7, #12]
     33e:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
     340:	687b      	ldr	r3, [r7, #4]
     342:	1c18      	adds	r0, r3, #0
     344:	4b0b      	ldr	r3, [pc, #44]	; (374 <arch_ioport_set_pin_dir+0x7c>)
     346:	4798      	blx	r3
     348:	1c03      	adds	r3, r0, #0
     34a:	68f9      	ldr	r1, [r7, #12]
     34c:	2240      	movs	r2, #64	; 0x40
     34e:	18c9      	adds	r1, r1, r3
     350:	188a      	adds	r2, r1, r2
     352:	7812      	ldrb	r2, [r2, #0]
     354:	b2d2      	uxtb	r2, r2
     356:	2102      	movs	r1, #2
     358:	430a      	orrs	r2, r1
     35a:	b2d2      	uxtb	r2, r2
     35c:	68f8      	ldr	r0, [r7, #12]
     35e:	2140      	movs	r1, #64	; 0x40
     360:	18c3      	adds	r3, r0, r3
     362:	185b      	adds	r3, r3, r1
     364:	701a      	strb	r2, [r3, #0]
}
     366:	46bd      	mov	sp, r7
     368:	b004      	add	sp, #16
     36a:	bd80      	pop	{r7, pc}
     36c:	0000019d 	.word	0x0000019d
     370:	000001c9 	.word	0x000001c9
     374:	0000016d 	.word	0x0000016d

00000378 <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
     378:	b590      	push	{r4, r7, lr}
     37a:	b083      	sub	sp, #12
     37c:	af00      	add	r7, sp, #0
     37e:	6078      	str	r0, [r7, #4]
     380:	1c0a      	adds	r2, r1, #0
     382:	1cfb      	adds	r3, r7, #3
     384:	701a      	strb	r2, [r3, #0]
	if (level) {
     386:	1cfb      	adds	r3, r7, #3
     388:	781b      	ldrb	r3, [r3, #0]
     38a:	2b00      	cmp	r3, #0
     38c:	d00b      	beq.n	3a6 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     38e:	687b      	ldr	r3, [r7, #4]
     390:	1c18      	adds	r0, r3, #0
     392:	4b0c      	ldr	r3, [pc, #48]	; (3c4 <arch_ioport_set_pin_level+0x4c>)
     394:	4798      	blx	r3
     396:	1c04      	adds	r4, r0, #0
     398:	687b      	ldr	r3, [r7, #4]
     39a:	1c18      	adds	r0, r3, #0
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <arch_ioport_set_pin_level+0x50>)
     39e:	4798      	blx	r3
     3a0:	1c03      	adds	r3, r0, #0
     3a2:	61a3      	str	r3, [r4, #24]
     3a4:	e00a      	b.n	3bc <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	1c18      	adds	r0, r3, #0
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <arch_ioport_set_pin_level+0x4c>)
     3ac:	4798      	blx	r3
     3ae:	1c04      	adds	r4, r0, #0
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	1c18      	adds	r0, r3, #0
     3b4:	4b04      	ldr	r3, [pc, #16]	; (3c8 <arch_ioport_set_pin_level+0x50>)
     3b6:	4798      	blx	r3
     3b8:	1c03      	adds	r3, r0, #0
     3ba:	6163      	str	r3, [r4, #20]
	}
}
     3bc:	46bd      	mov	sp, r7
     3be:	b003      	add	sp, #12
     3c0:	bd90      	pop	{r4, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	0000019d 	.word	0x0000019d
     3c8:	000001c9 	.word	0x000001c9

000003cc <arch_ioport_get_pin_level>:
	base->OUTSET.reg = mask & level;
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
     3cc:	b590      	push	{r4, r7, lr}
     3ce:	b083      	sub	sp, #12
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	1c18      	adds	r0, r3, #0
     3d8:	4b08      	ldr	r3, [pc, #32]	; (3fc <arch_ioport_get_pin_level+0x30>)
     3da:	4798      	blx	r3
     3dc:	1c03      	adds	r3, r0, #0
     3de:	6a1c      	ldr	r4, [r3, #32]
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	1c18      	adds	r0, r3, #0
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <arch_ioport_get_pin_level+0x34>)
     3e6:	4798      	blx	r3
     3e8:	1c03      	adds	r3, r0, #0
     3ea:	4023      	ands	r3, r4
     3ec:	1e5a      	subs	r2, r3, #1
     3ee:	4193      	sbcs	r3, r2
     3f0:	b2db      	uxtb	r3, r3
}
     3f2:	1c18      	adds	r0, r3, #0
     3f4:	46bd      	mov	sp, r7
     3f6:	b003      	add	sp, #12
     3f8:	bd90      	pop	{r4, r7, pc}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	0000019d 	.word	0x0000019d
     400:	000001c9 	.word	0x000001c9

00000404 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
     404:	b580      	push	{r7, lr}
     406:	af00      	add	r7, sp, #0
	arch_ioport_init();
     408:	4b01      	ldr	r3, [pc, #4]	; (410 <ioport_init+0xc>)
     40a:	4798      	blx	r3
}
     40c:	46bd      	mov	sp, r7
     40e:	bd80      	pop	{r7, pc}
     410:	000001e9 	.word	0x000001e9

00000414 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     414:	b580      	push	{r7, lr}
     416:	b082      	sub	sp, #8
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
     41c:	6039      	str	r1, [r7, #0]
	arch_ioport_set_pin_mode(pin, mode);
     41e:	687a      	ldr	r2, [r7, #4]
     420:	683b      	ldr	r3, [r7, #0]
     422:	1c10      	adds	r0, r2, #0
     424:	1c19      	adds	r1, r3, #0
     426:	4b02      	ldr	r3, [pc, #8]	; (430 <ioport_set_pin_mode+0x1c>)
     428:	4798      	blx	r3
}
     42a:	46bd      	mov	sp, r7
     42c:	b002      	add	sp, #8
     42e:	bd80      	pop	{r7, pc}
     430:	000002bd 	.word	0x000002bd

00000434 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
     43a:	6078      	str	r0, [r7, #4]
     43c:	1c0a      	adds	r2, r1, #0
     43e:	1cfb      	adds	r3, r7, #3
     440:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
     442:	687a      	ldr	r2, [r7, #4]
     444:	1cfb      	adds	r3, r7, #3
     446:	781b      	ldrb	r3, [r3, #0]
     448:	1c10      	adds	r0, r2, #0
     44a:	1c19      	adds	r1, r3, #0
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <ioport_set_pin_dir+0x24>)
     44e:	4798      	blx	r3
}
     450:	46bd      	mov	sp, r7
     452:	b002      	add	sp, #8
     454:	bd80      	pop	{r7, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	000002f9 	.word	0x000002f9

0000045c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     45c:	b580      	push	{r7, lr}
     45e:	b082      	sub	sp, #8
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
     464:	1c0a      	adds	r2, r1, #0
     466:	1cfb      	adds	r3, r7, #3
     468:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
     46a:	687a      	ldr	r2, [r7, #4]
     46c:	1cfb      	adds	r3, r7, #3
     46e:	781b      	ldrb	r3, [r3, #0]
     470:	1c10      	adds	r0, r2, #0
     472:	1c19      	adds	r1, r3, #0
     474:	4b02      	ldr	r3, [pc, #8]	; (480 <ioport_set_pin_level+0x24>)
     476:	4798      	blx	r3
}
     478:	46bd      	mov	sp, r7
     47a:	b002      	add	sp, #8
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000379 	.word	0x00000379

00000484 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     484:	b580      	push	{r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
     48c:	687b      	ldr	r3, [r7, #4]
     48e:	1c18      	adds	r0, r3, #0
     490:	4b03      	ldr	r3, [pc, #12]	; (4a0 <ioport_get_pin_level+0x1c>)
     492:	4798      	blx	r3
     494:	1c03      	adds	r3, r0, #0
}
     496:	1c18      	adds	r0, r3, #0
     498:	46bd      	mov	sp, r7
     49a:	b002      	add	sp, #8
     49c:	bd80      	pop	{r7, pc}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	000003cd 	.word	0x000003cd

000004a4 <initKeyBoard>:

static void wakeUpKeyboard(void);


void initKeyBoard(void)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b084      	sub	sp, #16
     4a8:	af00      	add	r7, sp, #0
	//configure pin PB10 as output High
	bool tempPinValue = false;	
     4aa:	1c3b      	adds	r3, r7, #0
     4ac:	330d      	adds	r3, #13
     4ae:	2200      	movs	r2, #0
     4b0:	701a      	strb	r2, [r3, #0]
	//configure pin PB06 as input
	uint8_t i = 0;
     4b2:	1c3b      	adds	r3, r7, #0
     4b4:	330f      	adds	r3, #15
     4b6:	2200      	movs	r2, #0
     4b8:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     4ba:	1c3b      	adds	r3, r7, #0
     4bc:	330e      	adds	r3, #14
     4be:	2200      	movs	r2, #0
     4c0:	701a      	strb	r2, [r3, #0]
	//setup data structure
	
//outputs
	keyboardObj.rowIOArr[0] = ROW_0;
     4c2:	4b5a      	ldr	r3, [pc, #360]	; (62c <initKeyBoard+0x188>)
     4c4:	222f      	movs	r2, #47	; 0x2f
     4c6:	601a      	str	r2, [r3, #0]
	keyboardObj.rowIOArr[1] = ROW_1;
     4c8:	4b58      	ldr	r3, [pc, #352]	; (62c <initKeyBoard+0x188>)
     4ca:	222e      	movs	r2, #46	; 0x2e
     4cc:	605a      	str	r2, [r3, #4]
	keyboardObj.rowIOArr[2] = ROW_2;
     4ce:	4b57      	ldr	r3, [pc, #348]	; (62c <initKeyBoard+0x188>)
     4d0:	222d      	movs	r2, #45	; 0x2d
     4d2:	609a      	str	r2, [r3, #8]
	keyboardObj.rowIOArr[3] = ROW_3;
     4d4:	4b55      	ldr	r3, [pc, #340]	; (62c <initKeyBoard+0x188>)
     4d6:	222c      	movs	r2, #44	; 0x2c
     4d8:	60da      	str	r2, [r3, #12]
	keyboardObj.rowIOArr[4] = ROW_4;
     4da:	4b54      	ldr	r3, [pc, #336]	; (62c <initKeyBoard+0x188>)
     4dc:	222b      	movs	r2, #43	; 0x2b
     4de:	611a      	str	r2, [r3, #16]
	keyboardObj.rowIOArr[5] = ROW_5;
     4e0:	4b52      	ldr	r3, [pc, #328]	; (62c <initKeyBoard+0x188>)
     4e2:	222a      	movs	r2, #42	; 0x2a
     4e4:	615a      	str	r2, [r3, #20]

//input
	keyboardObj.columnIOArr[0] = COLUMN_0;
     4e6:	4b51      	ldr	r3, [pc, #324]	; (62c <initKeyBoard+0x188>)
     4e8:	2226      	movs	r2, #38	; 0x26
     4ea:	619a      	str	r2, [r3, #24]
	keyboardObj.columnIOArr[1] = COLUMN_1;
     4ec:	4b4f      	ldr	r3, [pc, #316]	; (62c <initKeyBoard+0x188>)
     4ee:	2225      	movs	r2, #37	; 0x25
     4f0:	61da      	str	r2, [r3, #28]
	keyboardObj.columnIOArr[2] = COLUMN_2;
     4f2:	4b4e      	ldr	r3, [pc, #312]	; (62c <initKeyBoard+0x188>)
     4f4:	2224      	movs	r2, #36	; 0x24
     4f6:	621a      	str	r2, [r3, #32]
	keyboardObj.columnIOArr[3] = COLUMN_3;
     4f8:	4b4c      	ldr	r3, [pc, #304]	; (62c <initKeyBoard+0x188>)
     4fa:	2223      	movs	r2, #35	; 0x23
     4fc:	625a      	str	r2, [r3, #36]	; 0x24
	keyboardObj.columnIOArr[4] = COLUMN_4;
     4fe:	4b4b      	ldr	r3, [pc, #300]	; (62c <initKeyBoard+0x188>)
     500:	2222      	movs	r2, #34	; 0x22
     502:	629a      	str	r2, [r3, #40]	; 0x28
	keyboardObj.columnIOArr[5] = COLUMN_5;
     504:	4b49      	ldr	r3, [pc, #292]	; (62c <initKeyBoard+0x188>)
     506:	2221      	movs	r2, #33	; 0x21
     508:	62da      	str	r2, [r3, #44]	; 0x2c
	keyboardObj.columnIOArr[6] = COLUMN_6;
     50a:	4b48      	ldr	r3, [pc, #288]	; (62c <initKeyBoard+0x188>)
     50c:	2220      	movs	r2, #32
     50e:	631a      	str	r2, [r3, #48]	; 0x30
// Set all of the output pins high, and
// set the interrupt to trigger when the pin goes high.

	
	struct extint_chan_conf *config_extint_chan;
	uint8_t eicLine = 0;
     510:	1c3b      	adds	r3, r7, #0
     512:	330c      	adds	r3, #12
     514:	2200      	movs	r2, #0
     516:	701a      	strb	r2, [r3, #0]


	for(i = 0; i < 0; i++)
     518:	1c3b      	adds	r3, r7, #0
     51a:	330f      	adds	r3, #15
     51c:	2200      	movs	r2, #0
     51e:	701a      	strb	r2, [r3, #0]
     520:	46c0      	nop			; (mov r8, r8)
	}


//setup all of the pins

	ioport_init();
     522:	4b43      	ldr	r3, [pc, #268]	; (630 <initKeyBoard+0x18c>)
     524:	4798      	blx	r3
	delay_init();
     526:	4b43      	ldr	r3, [pc, #268]	; (634 <initKeyBoard+0x190>)
     528:	4798      	blx	r3
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     52a:	1c3b      	adds	r3, r7, #0
     52c:	330f      	adds	r3, #15
     52e:	2200      	movs	r2, #0
     530:	701a      	strb	r2, [r3, #0]
     532:	e073      	b.n	61c <initKeyBoard+0x178>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     534:	1c3b      	adds	r3, r7, #0
     536:	330f      	adds	r3, #15
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	2274      	movs	r2, #116	; 0x74
     53c:	4353      	muls	r3, r2
     53e:	1c1a      	adds	r2, r3, #0
     540:	3288      	adds	r2, #136	; 0x88
     542:	4b3a      	ldr	r3, [pc, #232]	; (62c <initKeyBoard+0x188>)
     544:	18d3      	adds	r3, r2, r3
     546:	60bb      	str	r3, [r7, #8]
		row->rowIO = keyboardObj.rowIOArr[i];
     548:	1c3b      	adds	r3, r7, #0
     54a:	330f      	adds	r3, #15
     54c:	781a      	ldrb	r2, [r3, #0]
     54e:	4b37      	ldr	r3, [pc, #220]	; (62c <initKeyBoard+0x188>)
     550:	0092      	lsls	r2, r2, #2
     552:	58d2      	ldr	r2, [r2, r3]
     554:	68bb      	ldr	r3, [r7, #8]
     556:	601a      	str	r2, [r3, #0]
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     558:	1c3b      	adds	r3, r7, #0
     55a:	330e      	adds	r3, #14
     55c:	2200      	movs	r2, #0
     55e:	701a      	strb	r2, [r3, #0]
     560:	e044      	b.n	5ec <initKeyBoard+0x148>
		{
			KEY_OBJ *key = &row->keys[j];
     562:	1c3b      	adds	r3, r7, #0
     564:	330e      	adds	r3, #14
     566:	781b      	ldrb	r3, [r3, #0]
     568:	011b      	lsls	r3, r3, #4
     56a:	68ba      	ldr	r2, [r7, #8]
     56c:	18d3      	adds	r3, r2, r3
     56e:	3304      	adds	r3, #4
     570:	607b      	str	r3, [r7, #4]
			key->columnIO = keyboardObj.columnIOArr[j];
     572:	1c3b      	adds	r3, r7, #0
     574:	330e      	adds	r3, #14
     576:	781a      	ldrb	r2, [r3, #0]
     578:	4b2c      	ldr	r3, [pc, #176]	; (62c <initKeyBoard+0x188>)
     57a:	3206      	adds	r2, #6
     57c:	0092      	lsls	r2, r2, #2
     57e:	58d2      	ldr	r2, [r2, r3]
     580:	687b      	ldr	r3, [r7, #4]
     582:	601a      	str	r2, [r3, #0]
			key->currentState = false;
     584:	687b      	ldr	r3, [r7, #4]
     586:	2200      	movs	r2, #0
     588:	715a      	strb	r2, [r3, #5]
			key->previousState = false;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	2200      	movs	r2, #0
     58e:	711a      	strb	r2, [r3, #4]
			key->hidKeyMod = HID_MODIFIER_LEFT_SHIFT;
     590:	687b      	ldr	r3, [r7, #4]
     592:	2202      	movs	r2, #2
     594:	735a      	strb	r2, [r3, #13]
			key->hidKey = HID_A+j+i;//no HID Key
     596:	1c3a      	adds	r2, r7, #0
     598:	320e      	adds	r2, #14
     59a:	1c3b      	adds	r3, r7, #0
     59c:	330f      	adds	r3, #15
     59e:	7812      	ldrb	r2, [r2, #0]
     5a0:	781b      	ldrb	r3, [r3, #0]
     5a2:	18d3      	adds	r3, r2, r3
     5a4:	b2db      	uxtb	r3, r3
     5a6:	3304      	adds	r3, #4
     5a8:	b2da      	uxtb	r2, r3
     5aa:	687b      	ldr	r3, [r7, #4]
     5ac:	731a      	strb	r2, [r3, #12]
			key->keyJustDown = false;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2200      	movs	r2, #0
     5b2:	719a      	strb	r2, [r3, #6]
			key->keyJustRelease = false;
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	2200      	movs	r2, #0
     5b8:	71da      	strb	r2, [r3, #7]
			key->specialKey = 0;//for later use
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	2200      	movs	r2, #0
     5be:	739a      	strb	r2, [r3, #14]
			key->keyHoldCount = 0;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	2200      	movs	r2, #0
     5c4:	609a      	str	r2, [r3, #8]
			
			ioport_set_pin_dir(key->columnIO, IOPORT_DIR_INPUT);
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	681b      	ldr	r3, [r3, #0]
     5ca:	1c18      	adds	r0, r3, #0
     5cc:	2100      	movs	r1, #0
     5ce:	4b1a      	ldr	r3, [pc, #104]	; (638 <initKeyBoard+0x194>)
     5d0:	4798      	blx	r3
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
     5d2:	687b      	ldr	r3, [r7, #4]
     5d4:	681b      	ldr	r3, [r3, #0]
     5d6:	1c18      	adds	r0, r3, #0
     5d8:	2120      	movs	r1, #32
     5da:	4b18      	ldr	r3, [pc, #96]	; (63c <initKeyBoard+0x198>)
     5dc:	4798      	blx	r3
	delay_init();
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		row->rowIO = keyboardObj.rowIOArr[i];
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     5de:	1c3b      	adds	r3, r7, #0
     5e0:	330e      	adds	r3, #14
     5e2:	781a      	ldrb	r2, [r3, #0]
     5e4:	1c3b      	adds	r3, r7, #0
     5e6:	330e      	adds	r3, #14
     5e8:	3201      	adds	r2, #1
     5ea:	701a      	strb	r2, [r3, #0]
     5ec:	1c3b      	adds	r3, r7, #0
     5ee:	330e      	adds	r3, #14
     5f0:	781b      	ldrb	r3, [r3, #0]
     5f2:	2b06      	cmp	r3, #6
     5f4:	d9b5      	bls.n	562 <initKeyBoard+0xbe>
			key->keyHoldCount = 0;
			
			ioport_set_pin_dir(key->columnIO, IOPORT_DIR_INPUT);
			ioport_set_pin_mode(key->columnIO, IOPORT_MODE_PULLDOWN);
		}
		ioport_set_pin_dir(row->rowIO, IOPORT_DIR_OUTPUT);
     5f6:	68bb      	ldr	r3, [r7, #8]
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	1c18      	adds	r0, r3, #0
     5fc:	2101      	movs	r1, #1
     5fe:	4b0e      	ldr	r3, [pc, #56]	; (638 <initKeyBoard+0x194>)
     600:	4798      	blx	r3
		ioport_set_pin_level(row->rowIO, false);//set the pin low
     602:	68bb      	ldr	r3, [r7, #8]
     604:	681b      	ldr	r3, [r3, #0]
     606:	1c18      	adds	r0, r3, #0
     608:	2100      	movs	r1, #0
     60a:	4b0d      	ldr	r3, [pc, #52]	; (640 <initKeyBoard+0x19c>)
     60c:	4798      	blx	r3

//setup all of the pins

	ioport_init();
	delay_init();
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     60e:	1c3b      	adds	r3, r7, #0
     610:	330f      	adds	r3, #15
     612:	781a      	ldrb	r2, [r3, #0]
     614:	1c3b      	adds	r3, r7, #0
     616:	330f      	adds	r3, #15
     618:	3201      	adds	r2, #1
     61a:	701a      	strb	r2, [r3, #0]
     61c:	1c3b      	adds	r3, r7, #0
     61e:	330f      	adds	r3, #15
     620:	781b      	ldrb	r3, [r3, #0]
     622:	2b05      	cmp	r3, #5
     624:	d986      	bls.n	534 <initKeyBoard+0x90>
		ioport_set_pin_dir(row->rowIO, IOPORT_DIR_OUTPUT);
		ioport_set_pin_level(row->rowIO, false);//set the pin low
		
	}
	
}
     626:	46bd      	mov	sp, r7
     628:	b004      	add	sp, #16
     62a:	bd80      	pop	{r7, pc}
     62c:	200002f8 	.word	0x200002f8
     630:	00000405 	.word	0x00000405
     634:	00000111 	.word	0x00000111
     638:	00000435 	.word	0x00000435
     63c:	00000415 	.word	0x00000415
     640:	0000045d 	.word	0x0000045d

00000644 <checkKeys>:

uint8_t checkKeys(void)
{
     644:	b580      	push	{r7, lr}
     646:	b084      	sub	sp, #16
     648:	af00      	add	r7, sp, #0
	uint8_t i = 0;
     64a:	1c3b      	adds	r3, r7, #0
     64c:	330f      	adds	r3, #15
     64e:	2200      	movs	r2, #0
     650:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     652:	1c3b      	adds	r3, r7, #0
     654:	330e      	adds	r3, #14
     656:	2200      	movs	r2, #0
     658:	701a      	strb	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     65a:	1c3b      	adds	r3, r7, #0
     65c:	330f      	adds	r3, #15
     65e:	2200      	movs	r2, #0
     660:	701a      	strb	r2, [r3, #0]
     662:	e085      	b.n	770 <checkKeys+0x12c>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     664:	1c3b      	adds	r3, r7, #0
     666:	330f      	adds	r3, #15
     668:	781b      	ldrb	r3, [r3, #0]
     66a:	2274      	movs	r2, #116	; 0x74
     66c:	4353      	muls	r3, r2
     66e:	1c1a      	adds	r2, r3, #0
     670:	3288      	adds	r2, #136	; 0x88
     672:	4b45      	ldr	r3, [pc, #276]	; (788 <checkKeys+0x144>)
     674:	18d3      	adds	r3, r2, r3
     676:	60bb      	str	r3, [r7, #8]
		
		ioport_set_pin_level(row->rowIO, true);
     678:	68bb      	ldr	r3, [r7, #8]
     67a:	681b      	ldr	r3, [r3, #0]
     67c:	1c18      	adds	r0, r3, #0
     67e:	2101      	movs	r1, #1
     680:	4b42      	ldr	r3, [pc, #264]	; (78c <checkKeys+0x148>)
     682:	4798      	blx	r3
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     684:	1c3b      	adds	r3, r7, #0
     686:	330e      	adds	r3, #14
     688:	2200      	movs	r2, #0
     68a:	701a      	strb	r2, [r3, #0]
     68c:	e05e      	b.n	74c <checkKeys+0x108>
		{
			KEY_OBJ *key = &row->keys[j];
     68e:	1c3b      	adds	r3, r7, #0
     690:	330e      	adds	r3, #14
     692:	781b      	ldrb	r3, [r3, #0]
     694:	011b      	lsls	r3, r3, #4
     696:	68ba      	ldr	r2, [r7, #8]
     698:	18d3      	adds	r3, r2, r3
     69a:	3304      	adds	r3, #4
     69c:	607b      	str	r3, [r7, #4]
		
			key->previousState = key->currentState;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	795a      	ldrb	r2, [r3, #5]
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	711a      	strb	r2, [r3, #4]
			key->currentState = ioport_get_pin_level(key->columnIO);
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	1c18      	adds	r0, r3, #0
     6ac:	4b38      	ldr	r3, [pc, #224]	; (790 <checkKeys+0x14c>)
     6ae:	4798      	blx	r3
     6b0:	1c03      	adds	r3, r0, #0
     6b2:	1c1a      	adds	r2, r3, #0
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	715a      	strb	r2, [r3, #5]
			//delay_ms(KEY_DELAY_MS);
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	795b      	ldrb	r3, [r3, #5]
     6bc:	2b00      	cmp	r3, #0
     6be:	d014      	beq.n	6ea <checkKeys+0xa6>
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	791b      	ldrb	r3, [r3, #4]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d010      	beq.n	6ea <checkKeys+0xa6>
			{
				key->keyHoldCount++;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	689b      	ldr	r3, [r3, #8]
     6cc:	1c5a      	adds	r2, r3, #1
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	609a      	str	r2, [r3, #8]
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	689b      	ldr	r3, [r3, #8]
     6d6:	2b01      	cmp	r3, #1
     6d8:	d103      	bne.n	6e2 <checkKeys+0x9e>
				{
					key->keyJustDown = true;
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	2201      	movs	r2, #1
     6de:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     6e0:	e02d      	b.n	73e <checkKeys+0xfa>
				{
					key->keyJustDown = true;
				}
				else
				{
					key->keyJustDown = false;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	2200      	movs	r2, #0
     6e6:	719a      	strb	r2, [r3, #6]
			//check if there is a just pressed/or just released
			if(key->currentState == true && key->previousState == true)
			{
				key->keyHoldCount++;
				//check if just pressed is true
				if(key->keyHoldCount == 1)
     6e8:	e029      	b.n	73e <checkKeys+0xfa>
				{
					key->keyJustDown = false;
					
				}
			}
			else if(key->currentState == false && key->previousState == false)
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	795b      	ldrb	r3, [r3, #5]
     6ee:	2201      	movs	r2, #1
     6f0:	4053      	eors	r3, r2
     6f2:	b2db      	uxtb	r3, r3
     6f4:	2b00      	cmp	r3, #0
     6f6:	d01c      	beq.n	732 <checkKeys+0xee>
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	791b      	ldrb	r3, [r3, #4]
     6fc:	2201      	movs	r2, #1
     6fe:	4053      	eors	r3, r2
     700:	b2db      	uxtb	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	d015      	beq.n	732 <checkKeys+0xee>
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     706:	687b      	ldr	r3, [r7, #4]
     708:	689b      	ldr	r3, [r3, #8]
     70a:	2b00      	cmp	r3, #0
     70c:	d00a      	beq.n	724 <checkKeys+0xe0>
     70e:	687b      	ldr	r3, [r7, #4]
     710:	79db      	ldrb	r3, [r3, #7]
     712:	2201      	movs	r2, #1
     714:	4053      	eors	r3, r2
     716:	b2db      	uxtb	r3, r3
     718:	2b00      	cmp	r3, #0
     71a:	d003      	beq.n	724 <checkKeys+0xe0>
				{
					key->keyJustRelease = true;
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	2201      	movs	r2, #1
     720:	71da      	strb	r2, [r3, #7]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     722:	e00c      	b.n	73e <checkKeys+0xfa>
					key->keyJustRelease = true;
					
				}
				else
				{
					key->keyJustRelease = false;
     724:	687b      	ldr	r3, [r7, #4]
     726:	2200      	movs	r2, #0
     728:	71da      	strb	r2, [r3, #7]
					key->keyHoldCount = 0;
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	2200      	movs	r2, #0
     72e:	609a      	str	r2, [r3, #8]
				}
			}
			else if(key->currentState == false && key->previousState == false)
			{
				//check that there is a keyHold Count
				if (key->keyHoldCount != 0 && key->keyJustRelease == false)
     730:	e005      	b.n	73e <checkKeys+0xfa>
					key->keyHoldCount = 0;
				}
			}
			else
			{
				key->keyJustRelease = false;
     732:	687b      	ldr	r3, [r7, #4]
     734:	2200      	movs	r2, #0
     736:	71da      	strb	r2, [r3, #7]
				key->keyJustDown = false;
     738:	687b      	ldr	r3, [r7, #4]
     73a:	2200      	movs	r2, #0
     73c:	719a      	strb	r2, [r3, #6]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
		
		ioport_set_pin_level(row->rowIO, true);
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     73e:	1c3b      	adds	r3, r7, #0
     740:	330e      	adds	r3, #14
     742:	781a      	ldrb	r2, [r3, #0]
     744:	1c3b      	adds	r3, r7, #0
     746:	330e      	adds	r3, #14
     748:	3201      	adds	r2, #1
     74a:	701a      	strb	r2, [r3, #0]
     74c:	1c3b      	adds	r3, r7, #0
     74e:	330e      	adds	r3, #14
     750:	781b      	ldrb	r3, [r3, #0]
     752:	2b06      	cmp	r3, #6
     754:	d99b      	bls.n	68e <checkKeys+0x4a>
			{
				key->keyJustRelease = false;
				key->keyJustDown = false;
			}
		}
		ioport_set_pin_level(row->rowIO, false);//set the pin low
     756:	68bb      	ldr	r3, [r7, #8]
     758:	681b      	ldr	r3, [r3, #0]
     75a:	1c18      	adds	r0, r3, #0
     75c:	2100      	movs	r1, #0
     75e:	4b0b      	ldr	r3, [pc, #44]	; (78c <checkKeys+0x148>)
     760:	4798      	blx	r3

uint8_t checkKeys(void)
{
	uint8_t i = 0;
	uint8_t j = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     762:	1c3b      	adds	r3, r7, #0
     764:	330f      	adds	r3, #15
     766:	781a      	ldrb	r2, [r3, #0]
     768:	1c3b      	adds	r3, r7, #0
     76a:	330f      	adds	r3, #15
     76c:	3201      	adds	r2, #1
     76e:	701a      	strb	r2, [r3, #0]
     770:	1c3b      	adds	r3, r7, #0
     772:	330f      	adds	r3, #15
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b05      	cmp	r3, #5
     778:	d800      	bhi.n	77c <checkKeys+0x138>
     77a:	e773      	b.n	664 <checkKeys+0x20>
				key->keyJustDown = false;
			}
		}
		ioport_set_pin_level(row->rowIO, false);//set the pin low
	}
	return 0;
     77c:	2300      	movs	r3, #0
}
     77e:	1c18      	adds	r0, r3, #0
     780:	46bd      	mov	sp, r7
     782:	b004      	add	sp, #16
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	200002f8 	.word	0x200002f8
     78c:	0000045d 	.word	0x0000045d
     790:	00000485 	.word	0x00000485

00000794 <getJustPressedKeys>:


uint8_t getJustPressedKeys(KEY_OBJ **keyArr)
{
     794:	b580      	push	{r7, lr}
     796:	b086      	sub	sp, #24
     798:	af00      	add	r7, sp, #0
     79a:	6078      	str	r0, [r7, #4]
		uint8_t i = 0;
     79c:	1c3b      	adds	r3, r7, #0
     79e:	3317      	adds	r3, #23
     7a0:	2200      	movs	r2, #0
     7a2:	701a      	strb	r2, [r3, #0]
		uint8_t j = 0;
     7a4:	1c3b      	adds	r3, r7, #0
     7a6:	3316      	adds	r3, #22
     7a8:	2200      	movs	r2, #0
     7aa:	701a      	strb	r2, [r3, #0]
		uint8_t numOfKeyPressed = 0;
     7ac:	1c3b      	adds	r3, r7, #0
     7ae:	3315      	adds	r3, #21
     7b0:	2200      	movs	r2, #0
     7b2:	701a      	strb	r2, [r3, #0]
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
     7b4:	1c3b      	adds	r3, r7, #0
     7b6:	3317      	adds	r3, #23
     7b8:	2200      	movs	r2, #0
     7ba:	701a      	strb	r2, [r3, #0]
     7bc:	e039      	b.n	832 <getJustPressedKeys+0x9e>
		{
			KEY_ROW *row = &keyboardObj.keyRows[i];
     7be:	1c3b      	adds	r3, r7, #0
     7c0:	3317      	adds	r3, #23
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	2274      	movs	r2, #116	; 0x74
     7c6:	4353      	muls	r3, r2
     7c8:	1c1a      	adds	r2, r3, #0
     7ca:	3288      	adds	r2, #136	; 0x88
     7cc:	4b1f      	ldr	r3, [pc, #124]	; (84c <getJustPressedKeys+0xb8>)
     7ce:	18d3      	adds	r3, r2, r3
     7d0:	613b      	str	r3, [r7, #16]
			
			for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     7d2:	1c3b      	adds	r3, r7, #0
     7d4:	3316      	adds	r3, #22
     7d6:	2200      	movs	r2, #0
     7d8:	701a      	strb	r2, [r3, #0]
     7da:	e01e      	b.n	81a <getJustPressedKeys+0x86>
			{
				KEY_OBJ *key = &row->keys[j];
     7dc:	1c3b      	adds	r3, r7, #0
     7de:	3316      	adds	r3, #22
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	011b      	lsls	r3, r3, #4
     7e4:	693a      	ldr	r2, [r7, #16]
     7e6:	18d3      	adds	r3, r2, r3
     7e8:	3304      	adds	r3, #4
     7ea:	60fb      	str	r3, [r7, #12]
				//check if key is just pressed
				if(key->keyJustDown)
     7ec:	68fb      	ldr	r3, [r7, #12]
     7ee:	799b      	ldrb	r3, [r3, #6]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d00b      	beq.n	80c <getJustPressedKeys+0x78>
				{
					//returns an array of pointers to the key
					keyArr[numOfKeyPressed++] = key;
     7f4:	1c3b      	adds	r3, r7, #0
     7f6:	3315      	adds	r3, #21
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	1c3a      	adds	r2, r7, #0
     7fc:	3215      	adds	r2, #21
     7fe:	1c59      	adds	r1, r3, #1
     800:	7011      	strb	r1, [r2, #0]
     802:	009b      	lsls	r3, r3, #2
     804:	687a      	ldr	r2, [r7, #4]
     806:	18d3      	adds	r3, r2, r3
     808:	68fa      	ldr	r2, [r7, #12]
     80a:	601a      	str	r2, [r3, #0]
		uint8_t numOfKeyPressed = 0;
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
		{
			KEY_ROW *row = &keyboardObj.keyRows[i];
			
			for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     80c:	1c3b      	adds	r3, r7, #0
     80e:	3316      	adds	r3, #22
     810:	781a      	ldrb	r2, [r3, #0]
     812:	1c3b      	adds	r3, r7, #0
     814:	3316      	adds	r3, #22
     816:	3201      	adds	r2, #1
     818:	701a      	strb	r2, [r3, #0]
     81a:	1c3b      	adds	r3, r7, #0
     81c:	3316      	adds	r3, #22
     81e:	781b      	ldrb	r3, [r3, #0]
     820:	2b06      	cmp	r3, #6
     822:	d9db      	bls.n	7dc <getJustPressedKeys+0x48>
uint8_t getJustPressedKeys(KEY_OBJ **keyArr)
{
		uint8_t i = 0;
		uint8_t j = 0;
		uint8_t numOfKeyPressed = 0;
		for(i=0; i < NUM_OF_KEY_ROWS; i++)
     824:	1c3b      	adds	r3, r7, #0
     826:	3317      	adds	r3, #23
     828:	781a      	ldrb	r2, [r3, #0]
     82a:	1c3b      	adds	r3, r7, #0
     82c:	3317      	adds	r3, #23
     82e:	3201      	adds	r2, #1
     830:	701a      	strb	r2, [r3, #0]
     832:	1c3b      	adds	r3, r7, #0
     834:	3317      	adds	r3, #23
     836:	781b      	ldrb	r3, [r3, #0]
     838:	2b05      	cmp	r3, #5
     83a:	d9c0      	bls.n	7be <getJustPressedKeys+0x2a>
					//returns an array of pointers to the key
					keyArr[numOfKeyPressed++] = key;
				}
			}
		}
	return numOfKeyPressed;
     83c:	1c3b      	adds	r3, r7, #0
     83e:	3315      	adds	r3, #21
     840:	781b      	ldrb	r3, [r3, #0]
}
     842:	1c18      	adds	r0, r3, #0
     844:	46bd      	mov	sp, r7
     846:	b006      	add	sp, #24
     848:	bd80      	pop	{r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	200002f8 	.word	0x200002f8

00000850 <getJustReleaseKeys>:

uint8_t getJustReleaseKeys(KEY_OBJ **keyArr)
{
     850:	b580      	push	{r7, lr}
     852:	b086      	sub	sp, #24
     854:	af00      	add	r7, sp, #0
     856:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
     858:	1c3b      	adds	r3, r7, #0
     85a:	3317      	adds	r3, #23
     85c:	2200      	movs	r2, #0
     85e:	701a      	strb	r2, [r3, #0]
	uint8_t j = 0;
     860:	1c3b      	adds	r3, r7, #0
     862:	3316      	adds	r3, #22
     864:	2200      	movs	r2, #0
     866:	701a      	strb	r2, [r3, #0]
	uint8_t numOfKeyReleased = 0;
     868:	1c3b      	adds	r3, r7, #0
     86a:	3315      	adds	r3, #21
     86c:	2200      	movs	r2, #0
     86e:	701a      	strb	r2, [r3, #0]
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     870:	1c3b      	adds	r3, r7, #0
     872:	3317      	adds	r3, #23
     874:	2200      	movs	r2, #0
     876:	701a      	strb	r2, [r3, #0]
     878:	e039      	b.n	8ee <getJustReleaseKeys+0x9e>
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
     87a:	1c3b      	adds	r3, r7, #0
     87c:	3317      	adds	r3, #23
     87e:	781b      	ldrb	r3, [r3, #0]
     880:	2274      	movs	r2, #116	; 0x74
     882:	4353      	muls	r3, r2
     884:	1c1a      	adds	r2, r3, #0
     886:	3288      	adds	r2, #136	; 0x88
     888:	4b1f      	ldr	r3, [pc, #124]	; (908 <getJustReleaseKeys+0xb8>)
     88a:	18d3      	adds	r3, r2, r3
     88c:	613b      	str	r3, [r7, #16]
	
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     88e:	1c3b      	adds	r3, r7, #0
     890:	3316      	adds	r3, #22
     892:	2200      	movs	r2, #0
     894:	701a      	strb	r2, [r3, #0]
     896:	e01e      	b.n	8d6 <getJustReleaseKeys+0x86>
		{
			KEY_OBJ *key = &row->keys[j];
     898:	1c3b      	adds	r3, r7, #0
     89a:	3316      	adds	r3, #22
     89c:	781b      	ldrb	r3, [r3, #0]
     89e:	011b      	lsls	r3, r3, #4
     8a0:	693a      	ldr	r2, [r7, #16]
     8a2:	18d3      	adds	r3, r2, r3
     8a4:	3304      	adds	r3, #4
     8a6:	60fb      	str	r3, [r7, #12]
			//check if key is just pressed
			if(key->keyJustRelease)
     8a8:	68fb      	ldr	r3, [r7, #12]
     8aa:	79db      	ldrb	r3, [r3, #7]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d00b      	beq.n	8c8 <getJustReleaseKeys+0x78>
			{
				//returns an array of pointers to the key
				keyArr[numOfKeyReleased++] = key;
     8b0:	1c3b      	adds	r3, r7, #0
     8b2:	3315      	adds	r3, #21
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	1c3a      	adds	r2, r7, #0
     8b8:	3215      	adds	r2, #21
     8ba:	1c59      	adds	r1, r3, #1
     8bc:	7011      	strb	r1, [r2, #0]
     8be:	009b      	lsls	r3, r3, #2
     8c0:	687a      	ldr	r2, [r7, #4]
     8c2:	18d3      	adds	r3, r2, r3
     8c4:	68fa      	ldr	r2, [r7, #12]
     8c6:	601a      	str	r2, [r3, #0]
	uint8_t numOfKeyReleased = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
	{
		KEY_ROW *row = &keyboardObj.keyRows[i];
	
		for(j=0; j < NUM_OF_KEY_COLUMNS; j++)
     8c8:	1c3b      	adds	r3, r7, #0
     8ca:	3316      	adds	r3, #22
     8cc:	781a      	ldrb	r2, [r3, #0]
     8ce:	1c3b      	adds	r3, r7, #0
     8d0:	3316      	adds	r3, #22
     8d2:	3201      	adds	r2, #1
     8d4:	701a      	strb	r2, [r3, #0]
     8d6:	1c3b      	adds	r3, r7, #0
     8d8:	3316      	adds	r3, #22
     8da:	781b      	ldrb	r3, [r3, #0]
     8dc:	2b06      	cmp	r3, #6
     8de:	d9db      	bls.n	898 <getJustReleaseKeys+0x48>
{

	uint8_t i = 0;
	uint8_t j = 0;
	uint8_t numOfKeyReleased = 0;
	for(i=0; i < NUM_OF_KEY_ROWS; i++)
     8e0:	1c3b      	adds	r3, r7, #0
     8e2:	3317      	adds	r3, #23
     8e4:	781a      	ldrb	r2, [r3, #0]
     8e6:	1c3b      	adds	r3, r7, #0
     8e8:	3317      	adds	r3, #23
     8ea:	3201      	adds	r2, #1
     8ec:	701a      	strb	r2, [r3, #0]
     8ee:	1c3b      	adds	r3, r7, #0
     8f0:	3317      	adds	r3, #23
     8f2:	781b      	ldrb	r3, [r3, #0]
     8f4:	2b05      	cmp	r3, #5
     8f6:	d9c0      	bls.n	87a <getJustReleaseKeys+0x2a>
				//returns an array of pointers to the key
				keyArr[numOfKeyReleased++] = key;
			}
		}
	}
	return numOfKeyReleased;
     8f8:	1c3b      	adds	r3, r7, #0
     8fa:	3315      	adds	r3, #21
     8fc:	781b      	ldrb	r3, [r3, #0]
}
     8fe:	1c18      	adds	r0, r3, #0
     900:	46bd      	mov	sp, r7
     902:	b006      	add	sp, #24
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	200002f8 	.word	0x200002f8

0000090c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     90c:	b580      	push	{r7, lr}
     90e:	b084      	sub	sp, #16
     910:	af00      	add	r7, sp, #0
     912:	1c02      	adds	r2, r0, #0
     914:	1dfb      	adds	r3, r7, #7
     916:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     918:	1c3b      	adds	r3, r7, #0
     91a:	330f      	adds	r3, #15
     91c:	1dfa      	adds	r2, r7, #7
     91e:	7812      	ldrb	r2, [r2, #0]
     920:	09d2      	lsrs	r2, r2, #7
     922:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     924:	1c3b      	adds	r3, r7, #0
     926:	330e      	adds	r3, #14
     928:	1dfa      	adds	r2, r7, #7
     92a:	7812      	ldrb	r2, [r2, #0]
     92c:	0952      	lsrs	r2, r2, #5
     92e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     930:	4b0d      	ldr	r3, [pc, #52]	; (968 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     932:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     934:	1c3b      	adds	r3, r7, #0
     936:	330f      	adds	r3, #15
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	2b00      	cmp	r3, #0
     93c:	d10e      	bne.n	95c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     93e:	1c3b      	adds	r3, r7, #0
     940:	330f      	adds	r3, #15
     942:	781b      	ldrb	r3, [r3, #0]
     944:	009b      	lsls	r3, r3, #2
     946:	2210      	movs	r2, #16
     948:	19d2      	adds	r2, r2, r7
     94a:	18d3      	adds	r3, r2, r3
     94c:	3b08      	subs	r3, #8
     94e:	681a      	ldr	r2, [r3, #0]
     950:	1c3b      	adds	r3, r7, #0
     952:	330e      	adds	r3, #14
     954:	781b      	ldrb	r3, [r3, #0]
     956:	01db      	lsls	r3, r3, #7
     958:	18d3      	adds	r3, r2, r3
     95a:	e000      	b.n	95e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
     95c:	2300      	movs	r3, #0
	}
}
     95e:	1c18      	adds	r0, r3, #0
     960:	46bd      	mov	sp, r7
     962:	b004      	add	sp, #16
     964:	bd80      	pop	{r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	41004400 	.word	0x41004400

0000096c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	1c02      	adds	r2, r0, #0
     974:	1dfb      	adds	r3, r7, #7
     976:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     978:	1dfb      	adds	r3, r7, #7
     97a:	781b      	ldrb	r3, [r3, #0]
     97c:	1c18      	adds	r0, r3, #0
     97e:	4b03      	ldr	r3, [pc, #12]	; (98c <port_get_group_from_gpio_pin+0x20>)
     980:	4798      	blx	r3
     982:	1c03      	adds	r3, r0, #0
}
     984:	1c18      	adds	r0, r3, #0
     986:	46bd      	mov	sp, r7
     988:	b002      	add	sp, #8
     98a:	bd80      	pop	{r7, pc}
     98c:	0000090d 	.word	0x0000090d

00000990 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     990:	b580      	push	{r7, lr}
     992:	b084      	sub	sp, #16
     994:	af00      	add	r7, sp, #0
     996:	1c0a      	adds	r2, r1, #0
     998:	1dfb      	adds	r3, r7, #7
     99a:	1c01      	adds	r1, r0, #0
     99c:	7019      	strb	r1, [r3, #0]
     99e:	1dbb      	adds	r3, r7, #6
     9a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     9a2:	1dfb      	adds	r3, r7, #7
     9a4:	781b      	ldrb	r3, [r3, #0]
     9a6:	1c18      	adds	r0, r3, #0
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <port_pin_set_output_level+0x50>)
     9aa:	4798      	blx	r3
     9ac:	1c03      	adds	r3, r0, #0
     9ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9b0:	1dfb      	adds	r3, r7, #7
     9b2:	781a      	ldrb	r2, [r3, #0]
     9b4:	231f      	movs	r3, #31
     9b6:	4013      	ands	r3, r2
     9b8:	2201      	movs	r2, #1
     9ba:	1c11      	adds	r1, r2, #0
     9bc:	4099      	lsls	r1, r3
     9be:	1c0b      	adds	r3, r1, #0
     9c0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     9c2:	1dbb      	adds	r3, r7, #6
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d003      	beq.n	9d2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     9ca:	68fb      	ldr	r3, [r7, #12]
     9cc:	68ba      	ldr	r2, [r7, #8]
     9ce:	619a      	str	r2, [r3, #24]
     9d0:	e002      	b.n	9d8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	68ba      	ldr	r2, [r7, #8]
     9d6:	615a      	str	r2, [r3, #20]
	}
}
     9d8:	46bd      	mov	sp, r7
     9da:	b004      	add	sp, #16
     9dc:	bd80      	pop	{r7, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	0000096d 	.word	0x0000096d

000009e4 <udc_remotewakeup>:

/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	af00      	add	r7, sp, #0
	udd_send_remotewakeup();
     9e8:	4b01      	ldr	r3, [pc, #4]	; (9f0 <udc_remotewakeup+0xc>)
     9ea:	4798      	blx	r3
}
     9ec:	46bd      	mov	sp, r7
     9ee:	bd80      	pop	{r7, pc}
     9f0:	00007c61 	.word	0x00007c61

000009f4 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	af00      	add	r7, sp, #0
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <ui_wakeup_handler+0x14>)
     9fa:	4798      	blx	r3
	LED_On(LED_0_PIN);
     9fc:	203e      	movs	r0, #62	; 0x3e
     9fe:	2100      	movs	r1, #0
     a00:	4b02      	ldr	r3, [pc, #8]	; (a0c <ui_wakeup_handler+0x18>)
     a02:	4798      	blx	r3
}
     a04:	46bd      	mov	sp, r7
     a06:	bd80      	pop	{r7, pc}
     a08:	000009e5 	.word	0x000009e5
     a0c:	00000991 	.word	0x00000991

00000a10 <ui_init>:

void ui_init(void)
{
     a10:	b580      	push	{r7, lr}
     a12:	b084      	sub	sp, #16
     a14:	af00      	add	r7, sp, #0
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     a16:	1d3b      	adds	r3, r7, #4
     a18:	1c18      	adds	r0, r3, #0
     a1a:	4b14      	ldr	r3, [pc, #80]	; (a6c <ui_init+0x5c>)
     a1c:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     a1e:	1d3b      	adds	r3, r7, #4
     a20:	220f      	movs	r2, #15
     a22:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     a24:	1d3b      	adds	r3, r7, #4
     a26:	2200      	movs	r2, #0
     a28:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     a2a:	1d3b      	adds	r3, r7, #4
     a2c:	2201      	movs	r2, #1
     a2e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.filter_input_signal = true;
     a30:	1d3b      	adds	r3, r7, #4
     a32:	2201      	movs	r2, #1
     a34:	729a      	strb	r2, [r3, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     a36:	1d3b      	adds	r3, r7, #4
     a38:	2202      	movs	r2, #2
     a3a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     a3c:	1d3b      	adds	r3, r7, #4
     a3e:	200f      	movs	r0, #15
     a40:	1c19      	adds	r1, r3, #0
     a42:	4b0b      	ldr	r3, [pc, #44]	; (a70 <ui_init+0x60>)
     a44:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     a46:	4b0b      	ldr	r3, [pc, #44]	; (a74 <ui_init+0x64>)
     a48:	1c18      	adds	r0, r3, #0
     a4a:	210f      	movs	r1, #15
     a4c:	2200      	movs	r2, #0
     a4e:	4b0a      	ldr	r3, [pc, #40]	; (a78 <ui_init+0x68>)
     a50:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     a52:	200f      	movs	r0, #15
     a54:	2100      	movs	r1, #0
     a56:	4b09      	ldr	r3, [pc, #36]	; (a7c <ui_init+0x6c>)
     a58:	4798      	blx	r3

	/* Initialize LEDs */
	initKeyBoard();
     a5a:	4b09      	ldr	r3, [pc, #36]	; (a80 <ui_init+0x70>)
     a5c:	4798      	blx	r3
	LED_On(LED_0_PIN);
     a5e:	203e      	movs	r0, #62	; 0x3e
     a60:	2100      	movs	r1, #0
     a62:	4b08      	ldr	r3, [pc, #32]	; (a84 <ui_init+0x74>)
     a64:	4798      	blx	r3
}
     a66:	46bd      	mov	sp, r7
     a68:	b004      	add	sp, #16
     a6a:	bd80      	pop	{r7, pc}
     a6c:	00004ac1 	.word	0x00004ac1
     a70:	00004af5 	.word	0x00004af5
     a74:	000009f5 	.word	0x000009f5
     a78:	000046d9 	.word	0x000046d9
     a7c:	00004735 	.word	0x00004735
     a80:	000004a5 	.word	0x000004a5
     a84:	00000991 	.word	0x00000991

00000a88 <ui_powerdown>:

void ui_powerdown(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0
	LED_Off(LED_0_PIN);
     a8c:	203e      	movs	r0, #62	; 0x3e
     a8e:	2101      	movs	r1, #1
     a90:	4b01      	ldr	r3, [pc, #4]	; (a98 <ui_powerdown+0x10>)
     a92:	4798      	blx	r3
}
     a94:	46bd      	mov	sp, r7
     a96:	bd80      	pop	{r7, pc}
     a98:	00000991 	.word	0x00000991

00000a9c <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
     a9c:	b580      	push	{r7, lr}
     a9e:	af00      	add	r7, sp, #0
	//enable the external interrupts here
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     aa0:	200f      	movs	r0, #15
     aa2:	2100      	movs	r1, #0
     aa4:	4b01      	ldr	r3, [pc, #4]	; (aac <ui_wakeup_enable+0x10>)
     aa6:	4798      	blx	r3
}
     aa8:	46bd      	mov	sp, r7
     aaa:	bd80      	pop	{r7, pc}
     aac:	00004735 	.word	0x00004735

00000ab0 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     ab0:	b580      	push	{r7, lr}
     ab2:	af00      	add	r7, sp, #0
	//disable the external interrupts here
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     ab4:	200f      	movs	r0, #15
     ab6:	2100      	movs	r1, #0
     ab8:	4b01      	ldr	r3, [pc, #4]	; (ac0 <ui_wakeup_disable+0x10>)
     aba:	4798      	blx	r3
}
     abc:	46bd      	mov	sp, r7
     abe:	bd80      	pop	{r7, pc}
     ac0:	0000477d 	.word	0x0000477d

00000ac4 <ui_wakeup>:

void ui_wakeup(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0
	//when we wake up we need to turn all of the pins low, instead of driving them high
	LED_On(LED_0_PIN);
     ac8:	203e      	movs	r0, #62	; 0x3e
     aca:	2100      	movs	r1, #0
     acc:	4b01      	ldr	r3, [pc, #4]	; (ad4 <ui_wakeup+0x10>)
     ace:	4798      	blx	r3
}
     ad0:	46bd      	mov	sp, r7
     ad2:	bd80      	pop	{r7, pc}
     ad4:	00000991 	.word	0x00000991

00000ad8 <ui_com_open>:

void ui_com_open(uint8_t port)
{
     ad8:	b580      	push	{r7, lr}
     ada:	b082      	sub	sp, #8
     adc:	af00      	add	r7, sp, #0
     ade:	1c02      	adds	r2, r0, #0
     ae0:	1dfb      	adds	r3, r7, #7
     ae2:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     ae4:	46bd      	mov	sp, r7
     ae6:	b002      	add	sp, #8
     ae8:	bd80      	pop	{r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)

00000aec <ui_com_close>:


void ui_com_close(uint8_t port)
{
     aec:	b580      	push	{r7, lr}
     aee:	b082      	sub	sp, #8
     af0:	af00      	add	r7, sp, #0
     af2:	1c02      	adds	r2, r0, #0
     af4:	1dfb      	adds	r3, r7, #7
     af6:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
}
     af8:	46bd      	mov	sp, r7
     afa:	b002      	add	sp, #8
     afc:	bd80      	pop	{r7, pc}
     afe:	46c0      	nop			; (mov r8, r8)

00000b00 <ui_com_rx_start>:


void ui_com_rx_start(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	af00      	add	r7, sp, #0

}
     b04:	46bd      	mov	sp, r7
     b06:	bd80      	pop	{r7, pc}

00000b08 <ui_com_rx_stop>:


void ui_com_rx_stop(void)
{
     b08:	b580      	push	{r7, lr}
     b0a:	af00      	add	r7, sp, #0

}
     b0c:	46bd      	mov	sp, r7
     b0e:	bd80      	pop	{r7, pc}

00000b10 <ui_com_tx_start>:


void ui_com_tx_start(void)
{
     b10:	b580      	push	{r7, lr}
     b12:	af00      	add	r7, sp, #0

}
     b14:	46bd      	mov	sp, r7
     b16:	bd80      	pop	{r7, pc}

00000b18 <ui_com_tx_stop>:


void ui_com_tx_stop(void)
{
     b18:	b580      	push	{r7, lr}
     b1a:	af00      	add	r7, sp, #0

}
     b1c:	46bd      	mov	sp, r7
     b1e:	bd80      	pop	{r7, pc}

00000b20 <ui_com_overflow>:

}


void ui_com_overflow(void)
{
     b20:	b580      	push	{r7, lr}
     b22:	af00      	add	r7, sp, #0

}
     b24:	46bd      	mov	sp, r7
     b26:	bd80      	pop	{r7, pc}

00000b28 <ui_start_read>:

void ui_start_read(void)
{
     b28:	b580      	push	{r7, lr}
     b2a:	af00      	add	r7, sp, #0
}
     b2c:	46bd      	mov	sp, r7
     b2e:	bd80      	pop	{r7, pc}

00000b30 <ui_stop_read>:

void ui_stop_read(void)
{
     b30:	b580      	push	{r7, lr}
     b32:	af00      	add	r7, sp, #0
}
     b34:	46bd      	mov	sp, r7
     b36:	bd80      	pop	{r7, pc}

00000b38 <ui_start_write>:

void ui_start_write(void)
{
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0
}
     b3c:	46bd      	mov	sp, r7
     b3e:	bd80      	pop	{r7, pc}

00000b40 <ui_stop_write>:

void ui_stop_write(void)
{
     b40:	b580      	push	{r7, lr}
     b42:	af00      	add	r7, sp, #0
}
     b44:	46bd      	mov	sp, r7
     b46:	bd80      	pop	{r7, pc}

00000b48 <ui_process>:

void ui_process(uint16_t framenumber)
{
     b48:	b590      	push	{r4, r7, lr}
     b4a:	b0af      	sub	sp, #188	; 0xbc
     b4c:	af00      	add	r7, sp, #0
     b4e:	1c02      	adds	r2, r0, #0
     b50:	1dbb      	adds	r3, r7, #6
     b52:	801a      	strh	r2, [r3, #0]
	static uint8_t cpt_sof = 0;
	uint8_t value;
	uint8_t numberOfKeys = 0;
     b54:	1c3b      	adds	r3, r7, #0
     b56:	33b5      	adds	r3, #181	; 0xb5
     b58:	2200      	movs	r2, #0
     b5a:	701a      	strb	r2, [r3, #0]
	uint8_t i= 0;
     b5c:	1c3b      	adds	r3, r7, #0
     b5e:	33b7      	adds	r3, #183	; 0xb7
     b60:	2200      	movs	r2, #0
     b62:	701a      	strb	r2, [r3, #0]
	uint8_t hidOnlyCount = 0;
     b64:	1c3b      	adds	r3, r7, #0
     b66:	33b6      	adds	r3, #182	; 0xb6
     b68:	2200      	movs	r2, #0
     b6a:	701a      	strb	r2, [r3, #0]
	uint8_t keyValue = 0;
     b6c:	1c3b      	adds	r3, r7, #0
     b6e:	33b4      	adds	r3, #180	; 0xb4
     b70:	2200      	movs	r2, #0
     b72:	701a      	strb	r2, [r3, #0]

	//use the cpt_sof to handle the debounce
	cpt_sof++;
     b74:	4b83      	ldr	r3, [pc, #524]	; (d84 <ui_process+0x23c>)
     b76:	781b      	ldrb	r3, [r3, #0]
     b78:	3301      	adds	r3, #1
     b7a:	b2da      	uxtb	r2, r3
     b7c:	4b81      	ldr	r3, [pc, #516]	; (d84 <ui_process+0x23c>)
     b7e:	701a      	strb	r2, [r3, #0]
	if(cpt_sof < 7)
     b80:	4b80      	ldr	r3, [pc, #512]	; (d84 <ui_process+0x23c>)
     b82:	781b      	ldrb	r3, [r3, #0]
     b84:	2b06      	cmp	r3, #6
     b86:	d800      	bhi.n	b8a <ui_process+0x42>
     b88:	e0f8      	b.n	d7c <ui_process+0x234>
	{
		return;
	}
	cpt_sof = 0;
     b8a:	4b7e      	ldr	r3, [pc, #504]	; (d84 <ui_process+0x23c>)
     b8c:	2200      	movs	r2, #0
     b8e:	701a      	strb	r2, [r3, #0]

	//array of pointers to an array
	//Yes this Way more that is needed
	KEY_OBJ *keyArr[NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS];
	//clear out all of the in the array
	memset(keyArr, 0, (sizeof(KEY_OBJ*)*NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS));
     b90:	1c3b      	adds	r3, r7, #0
     b92:	330c      	adds	r3, #12
     b94:	1c18      	adds	r0, r3, #0
     b96:	2100      	movs	r1, #0
     b98:	22a8      	movs	r2, #168	; 0xa8
     b9a:	4b7b      	ldr	r3, [pc, #492]	; (d88 <ui_process+0x240>)
     b9c:	4798      	blx	r3

	if ((framenumber % 1000) == 0) {
     b9e:	1dbb      	adds	r3, r7, #6
     ba0:	881a      	ldrh	r2, [r3, #0]
     ba2:	4b7a      	ldr	r3, [pc, #488]	; (d8c <ui_process+0x244>)
     ba4:	1c10      	adds	r0, r2, #0
     ba6:	22fa      	movs	r2, #250	; 0xfa
     ba8:	0091      	lsls	r1, r2, #2
     baa:	4798      	blx	r3
     bac:	1c0b      	adds	r3, r1, #0
     bae:	b29b      	uxth	r3, r3
     bb0:	2b00      	cmp	r3, #0
     bb2:	d103      	bne.n	bbc <ui_process+0x74>
		LED_On(LED_0_PIN);
     bb4:	203e      	movs	r0, #62	; 0x3e
     bb6:	2100      	movs	r1, #0
     bb8:	4b75      	ldr	r3, [pc, #468]	; (d90 <ui_process+0x248>)
     bba:	4798      	blx	r3
	}
	
	
	
	if ((framenumber % 1000) == 500) {
     bbc:	1dbb      	adds	r3, r7, #6
     bbe:	881a      	ldrh	r2, [r3, #0]
     bc0:	4b72      	ldr	r3, [pc, #456]	; (d8c <ui_process+0x244>)
     bc2:	1c10      	adds	r0, r2, #0
     bc4:	22fa      	movs	r2, #250	; 0xfa
     bc6:	0091      	lsls	r1, r2, #2
     bc8:	4798      	blx	r3
     bca:	1c0b      	adds	r3, r1, #0
     bcc:	b29a      	uxth	r2, r3
     bce:	23fa      	movs	r3, #250	; 0xfa
     bd0:	005b      	lsls	r3, r3, #1
     bd2:	429a      	cmp	r2, r3
     bd4:	d103      	bne.n	bde <ui_process+0x96>
		LED_Off(LED_0_PIN);
     bd6:	203e      	movs	r0, #62	; 0x3e
     bd8:	2101      	movs	r1, #1
     bda:	4b6d      	ldr	r3, [pc, #436]	; (d90 <ui_process+0x248>)
     bdc:	4798      	blx	r3
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     bde:	1c3b      	adds	r3, r7, #0
     be0:	33b7      	adds	r3, #183	; 0xb7
     be2:	2200      	movs	r2, #0
     be4:	701a      	strb	r2, [r3, #0]
     be6:	e00e      	b.n	c06 <ui_process+0xbe>
	{
		keyArr[i] = 0;
     be8:	1c3b      	adds	r3, r7, #0
     bea:	33b7      	adds	r3, #183	; 0xb7
     bec:	781a      	ldrb	r2, [r3, #0]
     bee:	1c3b      	adds	r3, r7, #0
     bf0:	330c      	adds	r3, #12
     bf2:	0092      	lsls	r2, r2, #2
     bf4:	2100      	movs	r1, #0
     bf6:	50d1      	str	r1, [r2, r3]
		
		
		
	}
	
	for(i = 0; i < NUM_OF_KEY_COLUMNS*NUM_OF_KEY_ROWS; i++)
     bf8:	1c3b      	adds	r3, r7, #0
     bfa:	33b7      	adds	r3, #183	; 0xb7
     bfc:	781a      	ldrb	r2, [r3, #0]
     bfe:	1c3b      	adds	r3, r7, #0
     c00:	33b7      	adds	r3, #183	; 0xb7
     c02:	3201      	adds	r2, #1
     c04:	701a      	strb	r2, [r3, #0]
     c06:	1c3b      	adds	r3, r7, #0
     c08:	33b7      	adds	r3, #183	; 0xb7
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	2b29      	cmp	r3, #41	; 0x29
     c0e:	d9eb      	bls.n	be8 <ui_process+0xa0>
	{
		keyArr[i] = 0;
	}	
	checkKeys();
     c10:	4b60      	ldr	r3, [pc, #384]	; (d94 <ui_process+0x24c>)
     c12:	4798      	blx	r3
	numberOfKeys = getJustPressedKeys(keyArr);
     c14:	1c3c      	adds	r4, r7, #0
     c16:	34b5      	adds	r4, #181	; 0xb5
     c18:	1c3b      	adds	r3, r7, #0
     c1a:	330c      	adds	r3, #12
     c1c:	1c18      	adds	r0, r3, #0
     c1e:	4b5e      	ldr	r3, [pc, #376]	; (d98 <ui_process+0x250>)
     c20:	4798      	blx	r3
     c22:	1c03      	adds	r3, r0, #0
     c24:	7023      	strb	r3, [r4, #0]
	
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     c26:	1c3b      	adds	r3, r7, #0
     c28:	33b7      	adds	r3, #183	; 0xb7
     c2a:	2200      	movs	r2, #0
     c2c:	701a      	strb	r2, [r3, #0]
     c2e:	e046      	b.n	cbe <ui_process+0x176>
	{
		if(keyArr[i]->hidKey != 0 && hidOnlyCount < 6)
     c30:	1c3b      	adds	r3, r7, #0
     c32:	33b7      	adds	r3, #183	; 0xb7
     c34:	781a      	ldrb	r2, [r3, #0]
     c36:	1c3b      	adds	r3, r7, #0
     c38:	330c      	adds	r3, #12
     c3a:	0092      	lsls	r2, r2, #2
     c3c:	58d3      	ldr	r3, [r2, r3]
     c3e:	7b1b      	ldrb	r3, [r3, #12]
     c40:	2b00      	cmp	r3, #0
     c42:	d020      	beq.n	c86 <ui_process+0x13e>
     c44:	1c3b      	adds	r3, r7, #0
     c46:	33b6      	adds	r3, #182	; 0xb6
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	2b05      	cmp	r3, #5
     c4c:	d81b      	bhi.n	c86 <ui_process+0x13e>
		{
			keyValue = keyArr[i]->hidKey;
     c4e:	1c3b      	adds	r3, r7, #0
     c50:	33b7      	adds	r3, #183	; 0xb7
     c52:	781a      	ldrb	r2, [r3, #0]
     c54:	1c3b      	adds	r3, r7, #0
     c56:	330c      	adds	r3, #12
     c58:	0092      	lsls	r2, r2, #2
     c5a:	58d2      	ldr	r2, [r2, r3]
     c5c:	1c3b      	adds	r3, r7, #0
     c5e:	33b4      	adds	r3, #180	; 0xb4
     c60:	7b12      	ldrb	r2, [r2, #12]
     c62:	701a      	strb	r2, [r3, #0]
			udi_hid_kbd_down(keyValue);
     c64:	1c3b      	adds	r3, r7, #0
     c66:	33b4      	adds	r3, #180	; 0xb4
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	1c18      	adds	r0, r3, #0
     c6c:	4b4b      	ldr	r3, [pc, #300]	; (d9c <ui_process+0x254>)
     c6e:	4798      	blx	r3
			hidOnlyCount++;
     c70:	1c3b      	adds	r3, r7, #0
     c72:	33b6      	adds	r3, #182	; 0xb6
     c74:	781a      	ldrb	r2, [r3, #0]
     c76:	1c3b      	adds	r3, r7, #0
     c78:	33b6      	adds	r3, #182	; 0xb6
     c7a:	3201      	adds	r2, #1
     c7c:	701a      	strb	r2, [r3, #0]
			
			LED_On(LED_0_PIN);
     c7e:	203e      	movs	r0, #62	; 0x3e
     c80:	2100      	movs	r1, #0
     c82:	4b43      	ldr	r3, [pc, #268]	; (d90 <ui_process+0x248>)
     c84:	4798      	blx	r3
		}
		//check the modifier keys
		if(keyArr[i]->hidKeyMod != HID_MODIFIER_NONE)
     c86:	1c3b      	adds	r3, r7, #0
     c88:	33b7      	adds	r3, #183	; 0xb7
     c8a:	781a      	ldrb	r2, [r3, #0]
     c8c:	1c3b      	adds	r3, r7, #0
     c8e:	330c      	adds	r3, #12
     c90:	0092      	lsls	r2, r2, #2
     c92:	58d3      	ldr	r3, [r2, r3]
     c94:	7b5b      	ldrb	r3, [r3, #13]
     c96:	2b00      	cmp	r3, #0
     c98:	d00a      	beq.n	cb0 <ui_process+0x168>
		{
			udi_hid_kbd_modifier_down(keyArr[i]->hidKeyMod);
     c9a:	1c3b      	adds	r3, r7, #0
     c9c:	33b7      	adds	r3, #183	; 0xb7
     c9e:	781a      	ldrb	r2, [r3, #0]
     ca0:	1c3b      	adds	r3, r7, #0
     ca2:	330c      	adds	r3, #12
     ca4:	0092      	lsls	r2, r2, #2
     ca6:	58d3      	ldr	r3, [r2, r3]
     ca8:	7b5b      	ldrb	r3, [r3, #13]
     caa:	1c18      	adds	r0, r3, #0
     cac:	4b3c      	ldr	r3, [pc, #240]	; (da0 <ui_process+0x258>)
     cae:	4798      	blx	r3
	}	
	checkKeys();
	numberOfKeys = getJustPressedKeys(keyArr);
	
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     cb0:	1c3b      	adds	r3, r7, #0
     cb2:	33b7      	adds	r3, #183	; 0xb7
     cb4:	781a      	ldrb	r2, [r3, #0]
     cb6:	1c3b      	adds	r3, r7, #0
     cb8:	33b7      	adds	r3, #183	; 0xb7
     cba:	3201      	adds	r2, #1
     cbc:	701a      	strb	r2, [r3, #0]
     cbe:	1c3a      	adds	r2, r7, #0
     cc0:	32b7      	adds	r2, #183	; 0xb7
     cc2:	1c3b      	adds	r3, r7, #0
     cc4:	33b5      	adds	r3, #181	; 0xb5
     cc6:	7812      	ldrb	r2, [r2, #0]
     cc8:	781b      	ldrb	r3, [r3, #0]
     cca:	429a      	cmp	r2, r3
     ccc:	d3b0      	bcc.n	c30 <ui_process+0xe8>
		{
			udi_hid_kbd_modifier_down(keyArr[i]->hidKeyMod);
		}
	}
	
	numberOfKeys = getJustReleaseKeys(keyArr);
     cce:	1c3c      	adds	r4, r7, #0
     cd0:	34b5      	adds	r4, #181	; 0xb5
     cd2:	1c3b      	adds	r3, r7, #0
     cd4:	330c      	adds	r3, #12
     cd6:	1c18      	adds	r0, r3, #0
     cd8:	4b32      	ldr	r3, [pc, #200]	; (da4 <ui_process+0x25c>)
     cda:	4798      	blx	r3
     cdc:	1c03      	adds	r3, r0, #0
     cde:	7023      	strb	r3, [r4, #0]
		
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     ce0:	1c3b      	adds	r3, r7, #0
     ce2:	33b7      	adds	r3, #183	; 0xb7
     ce4:	2200      	movs	r2, #0
     ce6:	701a      	strb	r2, [r3, #0]
     ce8:	e040      	b.n	d6c <ui_process+0x224>
	{
		if(keyArr[i]->hidKey != 0 && hidOnlyCount < 6)
     cea:	1c3b      	adds	r3, r7, #0
     cec:	33b7      	adds	r3, #183	; 0xb7
     cee:	781a      	ldrb	r2, [r3, #0]
     cf0:	1c3b      	adds	r3, r7, #0
     cf2:	330c      	adds	r3, #12
     cf4:	0092      	lsls	r2, r2, #2
     cf6:	58d3      	ldr	r3, [r2, r3]
     cf8:	7b1b      	ldrb	r3, [r3, #12]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d01a      	beq.n	d34 <ui_process+0x1ec>
     cfe:	1c3b      	adds	r3, r7, #0
     d00:	33b6      	adds	r3, #182	; 0xb6
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b05      	cmp	r3, #5
     d06:	d815      	bhi.n	d34 <ui_process+0x1ec>
		{
			udi_hid_kbd_up(keyArr[i]->hidKey);
     d08:	1c3b      	adds	r3, r7, #0
     d0a:	33b7      	adds	r3, #183	; 0xb7
     d0c:	781a      	ldrb	r2, [r3, #0]
     d0e:	1c3b      	adds	r3, r7, #0
     d10:	330c      	adds	r3, #12
     d12:	0092      	lsls	r2, r2, #2
     d14:	58d3      	ldr	r3, [r2, r3]
     d16:	7b1b      	ldrb	r3, [r3, #12]
     d18:	1c18      	adds	r0, r3, #0
     d1a:	4b23      	ldr	r3, [pc, #140]	; (da8 <ui_process+0x260>)
     d1c:	4798      	blx	r3
			hidOnlyCount++;
     d1e:	1c3b      	adds	r3, r7, #0
     d20:	33b6      	adds	r3, #182	; 0xb6
     d22:	781a      	ldrb	r2, [r3, #0]
     d24:	1c3b      	adds	r3, r7, #0
     d26:	33b6      	adds	r3, #182	; 0xb6
     d28:	3201      	adds	r2, #1
     d2a:	701a      	strb	r2, [r3, #0]
			
			LED_Off(LED_0_PIN);
     d2c:	203e      	movs	r0, #62	; 0x3e
     d2e:	2101      	movs	r1, #1
     d30:	4b17      	ldr	r3, [pc, #92]	; (d90 <ui_process+0x248>)
     d32:	4798      	blx	r3
		}
		//check the modifier keys
		if(keyArr[i]->hidKeyMod != HID_MODIFIER_NONE)
     d34:	1c3b      	adds	r3, r7, #0
     d36:	33b7      	adds	r3, #183	; 0xb7
     d38:	781a      	ldrb	r2, [r3, #0]
     d3a:	1c3b      	adds	r3, r7, #0
     d3c:	330c      	adds	r3, #12
     d3e:	0092      	lsls	r2, r2, #2
     d40:	58d3      	ldr	r3, [r2, r3]
     d42:	7b5b      	ldrb	r3, [r3, #13]
     d44:	2b00      	cmp	r3, #0
     d46:	d00a      	beq.n	d5e <ui_process+0x216>
		{
			udi_hid_kbd_modifier_up(keyArr[i]->hidKeyMod);
     d48:	1c3b      	adds	r3, r7, #0
     d4a:	33b7      	adds	r3, #183	; 0xb7
     d4c:	781a      	ldrb	r2, [r3, #0]
     d4e:	1c3b      	adds	r3, r7, #0
     d50:	330c      	adds	r3, #12
     d52:	0092      	lsls	r2, r2, #2
     d54:	58d3      	ldr	r3, [r2, r3]
     d56:	7b5b      	ldrb	r3, [r3, #13]
     d58:	1c18      	adds	r0, r3, #0
     d5a:	4b14      	ldr	r3, [pc, #80]	; (dac <ui_process+0x264>)
     d5c:	4798      	blx	r3
	}
	
	numberOfKeys = getJustReleaseKeys(keyArr);
		
	//for the first 6 keys
	for(i = 0; i < numberOfKeys; i++)
     d5e:	1c3b      	adds	r3, r7, #0
     d60:	33b7      	adds	r3, #183	; 0xb7
     d62:	781a      	ldrb	r2, [r3, #0]
     d64:	1c3b      	adds	r3, r7, #0
     d66:	33b7      	adds	r3, #183	; 0xb7
     d68:	3201      	adds	r2, #1
     d6a:	701a      	strb	r2, [r3, #0]
     d6c:	1c3a      	adds	r2, r7, #0
     d6e:	32b7      	adds	r2, #183	; 0xb7
     d70:	1c3b      	adds	r3, r7, #0
     d72:	33b5      	adds	r3, #181	; 0xb5
     d74:	7812      	ldrb	r2, [r2, #0]
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	429a      	cmp	r2, r3
     d7a:	d3b6      	bcc.n	cea <ui_process+0x1a2>
				//sequence_running = false;
				//button_function  = 1;
			//}
		//}
	//}
}
     d7c:	46bd      	mov	sp, r7
     d7e:	b02f      	add	sp, #188	; 0xbc
     d80:	bd90      	pop	{r4, r7, pc}
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	20000638 	.word	0x20000638
     d88:	0000b0bf 	.word	0x0000b0bf
     d8c:	0000af05 	.word	0x0000af05
     d90:	00000991 	.word	0x00000991
     d94:	00000645 	.word	0x00000645
     d98:	00000795 	.word	0x00000795
     d9c:	000025c9 	.word	0x000025c9
     da0:	00002495 	.word	0x00002495
     da4:	00000851 	.word	0x00000851
     da8:	000024e9 	.word	0x000024e9
     dac:	0000243d 	.word	0x0000243d

00000db0 <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
     db0:	b580      	push	{r7, lr}
     db2:	b082      	sub	sp, #8
     db4:	af00      	add	r7, sp, #0
     db6:	1c02      	adds	r2, r0, #0
     db8:	1dfb      	adds	r3, r7, #7
     dba:	701a      	strb	r2, [r3, #0]
	UNUSED(value);
}
     dbc:	46bd      	mov	sp, r7
     dbe:	b002      	add	sp, #8
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)

00000dc4 <virtual_test_unit_ready>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_test_unit_ready(void)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	af00      	add	r7, sp, #0
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
     dc8:	4b04      	ldr	r3, [pc, #16]	; (ddc <virtual_test_unit_ready+0x18>)
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b00      	cmp	r3, #0
     dce:	d001      	beq.n	dd4 <virtual_test_unit_ready+0x10>
     dd0:	2302      	movs	r3, #2
     dd2:	e000      	b.n	dd6 <virtual_test_unit_ready+0x12>
     dd4:	2300      	movs	r3, #0
}
     dd6:	1c18      	adds	r0, r3, #0
     dd8:	46bd      	mov	sp, r7
     dda:	bd80      	pop	{r7, pc}
     ddc:	2000663c 	.word	0x2000663c

00000de0 <virtual_read_capacity>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_read_capacity(uint32_t *uint32_t_nb_sector)
{
     de0:	b580      	push	{r7, lr}
     de2:	b082      	sub	sp, #8
     de4:	af00      	add	r7, sp, #0
     de6:	6078      	str	r0, [r7, #4]
	if (b_vmem_unloaded) {
     de8:	4b06      	ldr	r3, [pc, #24]	; (e04 <virtual_read_capacity+0x24>)
     dea:	781b      	ldrb	r3, [r3, #0]
     dec:	2b00      	cmp	r3, #0
     dee:	d001      	beq.n	df4 <virtual_read_capacity+0x14>
		return CTRL_NO_PRESENT;
     df0:	2302      	movs	r3, #2
     df2:	e003      	b.n	dfc <virtual_read_capacity+0x1c>
	}

	if (VMEM_NB_SECTOR<8) {
		*uint32_t_nb_sector = 8-1;
	} else {
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	222f      	movs	r2, #47	; 0x2f
     df8:	601a      	str	r2, [r3, #0]
	}
	return CTRL_GOOD;
     dfa:	2300      	movs	r3, #0
}
     dfc:	1c18      	adds	r0, r3, #0
     dfe:	46bd      	mov	sp, r7
     e00:	b002      	add	sp, #8
     e02:	bd80      	pop	{r7, pc}
     e04:	2000663c 	.word	0x2000663c

00000e08 <virtual_wr_protect>:
//! This function returns the write-protected mode
//!
//! @return true if the memory is protected
//!
bool virtual_wr_protect(void)
{
     e08:	b580      	push	{r7, lr}
     e0a:	af00      	add	r7, sp, #0
	return false;
     e0c:	2300      	movs	r3, #0
}
     e0e:	1c18      	adds	r0, r3, #0
     e10:	46bd      	mov	sp, r7
     e12:	bd80      	pop	{r7, pc}

00000e14 <virtual_removal>:
//! This function informs about the memory type
//!
//! @return true if the memory is removable
//!
bool virtual_removal(void)
{
     e14:	b580      	push	{r7, lr}
     e16:	af00      	add	r7, sp, #0
	return true;
     e18:	2301      	movs	r3, #1
}
     e1a:	1c18      	adds	r0, r3, #0
     e1c:	46bd      	mov	sp, r7
     e1e:	bd80      	pop	{r7, pc}

00000e20 <virtual_usb_trans>:
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
static Ctrl_status virtual_usb_trans(uint32_t addr, uint16_t nb_sector,
		bool b_read)
{
     e20:	b590      	push	{r4, r7, lr}
     e22:	b085      	sub	sp, #20
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
     e28:	1cbb      	adds	r3, r7, #2
     e2a:	8019      	strh	r1, [r3, #0]
     e2c:	1c7b      	adds	r3, r7, #1
     e2e:	701a      	strb	r2, [r3, #0]
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	2b30      	cmp	r3, #48	; 0x30
     e34:	d805      	bhi.n	e42 <virtual_usb_trans+0x22>
     e36:	1cbb      	adds	r3, r7, #2
     e38:	881a      	ldrh	r2, [r3, #0]
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	18d3      	adds	r3, r2, r3
     e3e:	2b30      	cmp	r3, #48	; 0x30
     e40:	d901      	bls.n	e46 <virtual_usb_trans+0x26>
		return CTRL_FAIL;
     e42:	2301      	movs	r3, #1
     e44:	e036      	b.n	eb4 <virtual_usb_trans+0x94>
	}

	while (nb_sector) {
     e46:	e030      	b.n	eaa <virtual_usb_trans+0x8a>
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
     e48:	1cbb      	adds	r3, r7, #2
     e4a:	881b      	ldrh	r3, [r3, #0]
     e4c:	2b7f      	cmp	r3, #127	; 0x7f
     e4e:	d803      	bhi.n	e58 <virtual_usb_trans+0x38>
     e50:	1cbb      	adds	r3, r7, #2
     e52:	881b      	ldrh	r3, [r3, #0]
     e54:	b2db      	uxtb	r3, r3
     e56:	e000      	b.n	e5a <virtual_usb_trans+0x3a>
     e58:	2380      	movs	r3, #128	; 0x80
     e5a:	1c3a      	adds	r2, r7, #0
     e5c:	320f      	adds	r2, #15
     e5e:	7013      	strb	r3, [r2, #0]
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	1c5a      	adds	r2, r3, #1
     e64:	607a      	str	r2, [r7, #4]
     e66:	025a      	lsls	r2, r3, #9
     e68:	4b14      	ldr	r3, [pc, #80]	; (ebc <virtual_usb_trans+0x9c>)
     e6a:	18d3      	adds	r3, r2, r3
     e6c:	60bb      	str	r3, [r7, #8]
		if (!udi_msc_trans_block( b_read, ptr_cram,
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
     e6e:	1c3b      	adds	r3, r7, #0
     e70:	330f      	adds	r3, #15
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	025b      	lsls	r3, r3, #9

	while (nb_sector) {
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
		if (!udi_msc_trans_block( b_read, ptr_cram,
     e76:	1c7a      	adds	r2, r7, #1
     e78:	7811      	ldrb	r1, [r2, #0]
     e7a:	68ba      	ldr	r2, [r7, #8]
     e7c:	1c08      	adds	r0, r1, #0
     e7e:	1c11      	adds	r1, r2, #0
     e80:	1c1a      	adds	r2, r3, #0
     e82:	2300      	movs	r3, #0
     e84:	4c0e      	ldr	r4, [pc, #56]	; (ec0 <virtual_usb_trans+0xa0>)
     e86:	47a0      	blx	r4
     e88:	1c03      	adds	r3, r0, #0
     e8a:	2201      	movs	r2, #1
     e8c:	4053      	eors	r3, r2
     e8e:	b2db      	uxtb	r3, r3
     e90:	2b00      	cmp	r3, #0
     e92:	d001      	beq.n	e98 <virtual_usb_trans+0x78>
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
			return CTRL_FAIL; // transfer aborted
     e94:	2301      	movs	r3, #1
     e96:	e00d      	b.n	eb4 <virtual_usb_trans+0x94>
		}
		nb_sector -= nb_sector_trans;
     e98:	1c3b      	adds	r3, r7, #0
     e9a:	330f      	adds	r3, #15
     e9c:	781b      	ldrb	r3, [r3, #0]
     e9e:	b29a      	uxth	r2, r3
     ea0:	1cbb      	adds	r3, r7, #2
     ea2:	1cb9      	adds	r1, r7, #2
     ea4:	8809      	ldrh	r1, [r1, #0]
     ea6:	1a8a      	subs	r2, r1, r2
     ea8:	801a      	strh	r2, [r3, #0]

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
		return CTRL_FAIL;
	}

	while (nb_sector) {
     eaa:	1cbb      	adds	r3, r7, #2
     eac:	881b      	ldrh	r3, [r3, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d1ca      	bne.n	e48 <virtual_usb_trans+0x28>
		}
		nb_sector -= nb_sector_trans;
	}
#endif

	return CTRL_GOOD;
     eb2:	2300      	movs	r3, #0
}
     eb4:	1c18      	adds	r0, r3, #0
     eb6:	46bd      	mov	sp, r7
     eb8:	b005      	add	sp, #20
     eba:	bd90      	pop	{r4, r7, pc}
     ebc:	2000063c 	.word	0x2000063c
     ec0:	000036a1 	.word	0x000036a1

00000ec4 <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b082      	sub	sp, #8
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	1c0a      	adds	r2, r1, #0
     ece:	1cbb      	adds	r3, r7, #2
     ed0:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, true);
     ed2:	687a      	ldr	r2, [r7, #4]
     ed4:	1cbb      	adds	r3, r7, #2
     ed6:	881b      	ldrh	r3, [r3, #0]
     ed8:	1c10      	adds	r0, r2, #0
     eda:	1c19      	adds	r1, r3, #0
     edc:	2201      	movs	r2, #1
     ede:	4b03      	ldr	r3, [pc, #12]	; (eec <virtual_usb_read_10+0x28>)
     ee0:	4798      	blx	r3
     ee2:	1c03      	adds	r3, r0, #0
}
     ee4:	1c18      	adds	r0, r3, #0
     ee6:	46bd      	mov	sp, r7
     ee8:	b002      	add	sp, #8
     eea:	bd80      	pop	{r7, pc}
     eec:	00000e21 	.word	0x00000e21

00000ef0 <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b082      	sub	sp, #8
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
     ef8:	1c0a      	adds	r2, r1, #0
     efa:	1cbb      	adds	r3, r7, #2
     efc:	801a      	strh	r2, [r3, #0]
	return virtual_usb_trans(addr, nb_sector, false);
     efe:	687a      	ldr	r2, [r7, #4]
     f00:	1cbb      	adds	r3, r7, #2
     f02:	881b      	ldrh	r3, [r3, #0]
     f04:	1c10      	adds	r0, r2, #0
     f06:	1c19      	adds	r1, r3, #0
     f08:	2200      	movs	r2, #0
     f0a:	4b03      	ldr	r3, [pc, #12]	; (f18 <virtual_usb_write_10+0x28>)
     f0c:	4798      	blx	r3
     f0e:	1c03      	adds	r3, r0, #0
}
     f10:	1c18      	adds	r0, r3, #0
     f12:	46bd      	mov	sp, r7
     f14:	b002      	add	sp, #8
     f16:	bd80      	pop	{r7, pc}
     f18:	00000e21 	.word	0x00000e21

00000f1c <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	af00      	add	r7, sp, #0

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
     f20:	2301      	movs	r3, #1
#endif
}
     f22:	1c18      	adds	r0, r3, #0
     f24:	46bd      	mov	sp, r7
     f26:	bd80      	pop	{r7, pc}

00000f28 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b084      	sub	sp, #16
     f2c:	af00      	add	r7, sp, #0
     f2e:	1c02      	adds	r2, r0, #0
     f30:	1dfb      	adds	r3, r7, #7
     f32:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     f34:	1dfb      	adds	r3, r7, #7
     f36:	781b      	ldrb	r3, [r3, #0]
     f38:	2b00      	cmp	r3, #0
     f3a:	d107      	bne.n	f4c <mem_test_unit_ready+0x24>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
     f3c:	1dfb      	adds	r3, r7, #7
     f3e:	781a      	ldrb	r2, [r3, #0]
     f40:	4b08      	ldr	r3, [pc, #32]	; (f64 <mem_test_unit_ready+0x3c>)
     f42:	0152      	lsls	r2, r2, #5
     f44:	58d3      	ldr	r3, [r2, r3]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     f46:	4798      	blx	r3
     f48:	1c03      	adds	r3, r0, #0
     f4a:	e000      	b.n	f4e <mem_test_unit_ready+0x26>
     f4c:	2301      	movs	r3, #1
     f4e:	1c3a      	adds	r2, r7, #0
     f50:	320f      	adds	r2, #15
     f52:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
     f54:	1c3b      	adds	r3, r7, #0
     f56:	330f      	adds	r3, #15
     f58:	781b      	ldrb	r3, [r3, #0]
}
     f5a:	1c18      	adds	r0, r3, #0
     f5c:	46bd      	mov	sp, r7
     f5e:	b004      	add	sp, #16
     f60:	bd80      	pop	{r7, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	0000b0ec 	.word	0x0000b0ec

00000f68 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
     f68:	b580      	push	{r7, lr}
     f6a:	b084      	sub	sp, #16
     f6c:	af00      	add	r7, sp, #0
     f6e:	1c02      	adds	r2, r0, #0
     f70:	6039      	str	r1, [r7, #0]
     f72:	1dfb      	adds	r3, r7, #7
     f74:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     f76:	1dfb      	adds	r3, r7, #7
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d10a      	bne.n	f94 <mem_read_capacity+0x2c>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
     f7e:	1dfb      	adds	r3, r7, #7
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	4a0a      	ldr	r2, [pc, #40]	; (fac <mem_read_capacity+0x44>)
     f84:	015b      	lsls	r3, r3, #5
     f86:	18d3      	adds	r3, r2, r3
     f88:	685b      	ldr	r3, [r3, #4]
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
     f8a:	683a      	ldr	r2, [r7, #0]
     f8c:	1c10      	adds	r0, r2, #0
     f8e:	4798      	blx	r3
     f90:	1c03      	adds	r3, r0, #0
     f92:	e000      	b.n	f96 <mem_read_capacity+0x2e>
     f94:	2301      	movs	r3, #1
     f96:	1c3a      	adds	r2, r7, #0
     f98:	320f      	adds	r2, #15
     f9a:	7013      	strb	r3, [r2, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
     f9c:	1c3b      	adds	r3, r7, #0
     f9e:	330f      	adds	r3, #15
     fa0:	781b      	ldrb	r3, [r3, #0]
}
     fa2:	1c18      	adds	r0, r3, #0
     fa4:	46bd      	mov	sp, r7
     fa6:	b004      	add	sp, #16
     fa8:	bd80      	pop	{r7, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	0000b0ec 	.word	0x0000b0ec

00000fb0 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
     fb0:	b580      	push	{r7, lr}
     fb2:	b084      	sub	sp, #16
     fb4:	af00      	add	r7, sp, #0
     fb6:	1c0a      	adds	r2, r1, #0
     fb8:	1dfb      	adds	r3, r7, #7
     fba:	1c01      	adds	r1, r0, #0
     fbc:	7019      	strb	r1, [r3, #0]
     fbe:	1dbb      	adds	r3, r7, #6
     fc0:	701a      	strb	r2, [r3, #0]

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
     fc2:	1dfb      	adds	r3, r7, #7
     fc4:	781b      	ldrb	r3, [r3, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d125      	bne.n	1016 <mem_unload+0x66>
  if (!Ctrl_access_lock()) return false;

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
     fca:	1dfb      	adds	r3, r7, #7
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	4a17      	ldr	r2, [pc, #92]	; (102c <mem_unload+0x7c>)
     fd0:	015b      	lsls	r3, r3, #5
     fd2:	18d3      	adds	r3, r2, r3
     fd4:	3308      	adds	r3, #8
     fd6:	681b      	ldr	r3, [r3, #0]
                  lun_desc[lun].unload(unload) : !unload) :
     fd8:	2b00      	cmp	r3, #0
     fda:	d00f      	beq.n	ffc <mem_unload+0x4c>
     fdc:	1dfb      	adds	r3, r7, #7
     fde:	781b      	ldrb	r3, [r3, #0]
     fe0:	4a12      	ldr	r2, [pc, #72]	; (102c <mem_unload+0x7c>)
     fe2:	015b      	lsls	r3, r3, #5
     fe4:	18d3      	adds	r3, r2, r3
     fe6:	3308      	adds	r3, #8
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	1dba      	adds	r2, r7, #6
     fec:	7812      	ldrb	r2, [r2, #0]
     fee:	1c10      	adds	r0, r2, #0
     ff0:	4798      	blx	r3
     ff2:	1c03      	adds	r3, r0, #0
     ff4:	1e5a      	subs	r2, r3, #1
     ff6:	4193      	sbcs	r3, r2
     ff8:	b2db      	uxtb	r3, r3
     ffa:	e00d      	b.n	1018 <mem_unload+0x68>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
     ffc:	1dbb      	adds	r3, r7, #6
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	1e5a      	subs	r2, r3, #1
    1002:	4193      	sbcs	r3, r2
    1004:	b2db      	uxtb	r3, r3
    1006:	2201      	movs	r2, #1
    1008:	4053      	eors	r3, r2
    100a:	b2db      	uxtb	r3, r3

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    100c:	1c1a      	adds	r2, r3, #0
    100e:	2301      	movs	r3, #1
    1010:	4013      	ands	r3, r2
    1012:	b2db      	uxtb	r3, r3
    1014:	e000      	b.n	1018 <mem_unload+0x68>
    1016:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return false;

  unloaded =
    1018:	1c3a      	adds	r2, r7, #0
    101a:	320f      	adds	r2, #15
    101c:	7013      	strb	r3, [r2, #0]
              false; /* No mem, unload/load fail */
#endif

  Ctrl_access_unlock();

  return unloaded;
    101e:	1c3b      	adds	r3, r7, #0
    1020:	330f      	adds	r3, #15
    1022:	781b      	ldrb	r3, [r3, #0]
}
    1024:	1c18      	adds	r0, r3, #0
    1026:	46bd      	mov	sp, r7
    1028:	b004      	add	sp, #16
    102a:	bd80      	pop	{r7, pc}
    102c:	0000b0ec 	.word	0x0000b0ec

00001030 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    1030:	b580      	push	{r7, lr}
    1032:	b084      	sub	sp, #16
    1034:	af00      	add	r7, sp, #0
    1036:	1c02      	adds	r2, r0, #0
    1038:	1dfb      	adds	r3, r7, #7
    103a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    103c:	1dfb      	adds	r3, r7, #7
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	2b00      	cmp	r3, #0
    1042:	d10a      	bne.n	105a <mem_wr_protect+0x2a>
    1044:	1dfb      	adds	r3, r7, #7
    1046:	781b      	ldrb	r3, [r3, #0]
    1048:	4a0a      	ldr	r2, [pc, #40]	; (1074 <mem_wr_protect+0x44>)
    104a:	015b      	lsls	r3, r3, #5
    104c:	18d3      	adds	r3, r2, r3
    104e:	3308      	adds	r3, #8
    1050:	685b      	ldr	r3, [r3, #4]
    1052:	4798      	blx	r3
    1054:	1c03      	adds	r3, r0, #0
    1056:	2b00      	cmp	r3, #0
    1058:	d001      	beq.n	105e <mem_wr_protect+0x2e>
    105a:	2301      	movs	r3, #1
    105c:	e000      	b.n	1060 <mem_wr_protect+0x30>
    105e:	2300      	movs	r3, #0
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
    1060:	1c3a      	adds	r2, r7, #0
    1062:	320f      	adds	r2, #15
    1064:	7013      	strb	r3, [r2, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    1066:	1c3b      	adds	r3, r7, #0
    1068:	330f      	adds	r3, #15
    106a:	781b      	ldrb	r3, [r3, #0]
}
    106c:	1c18      	adds	r0, r3, #0
    106e:	46bd      	mov	sp, r7
    1070:	b004      	add	sp, #16
    1072:	bd80      	pop	{r7, pc}
    1074:	0000b0ec 	.word	0x0000b0ec

00001078 <mem_removal>:


bool mem_removal(U8 lun)
{
    1078:	b580      	push	{r7, lr}
    107a:	b084      	sub	sp, #16
    107c:	af00      	add	r7, sp, #0
    107e:	1c02      	adds	r2, r0, #0
    1080:	1dfb      	adds	r3, r7, #7
    1082:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    1084:	1dfb      	adds	r3, r7, #7
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	2b00      	cmp	r3, #0
    108a:	d10a      	bne.n	10a2 <mem_removal+0x2a>
    108c:	1dfb      	adds	r3, r7, #7
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	4a0a      	ldr	r2, [pc, #40]	; (10bc <mem_removal+0x44>)
    1092:	015b      	lsls	r3, r3, #5
    1094:	18d3      	adds	r3, r2, r3
    1096:	3310      	adds	r3, #16
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	4798      	blx	r3
    109c:	1c03      	adds	r3, r0, #0
    109e:	2b00      	cmp	r3, #0
    10a0:	d001      	beq.n	10a6 <mem_removal+0x2e>
    10a2:	2301      	movs	r3, #1
    10a4:	e000      	b.n	10a8 <mem_removal+0x30>
    10a6:	2300      	movs	r3, #0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return true;

  removal =
    10a8:	1c3a      	adds	r2, r7, #0
    10aa:	320f      	adds	r2, #15
    10ac:	7013      	strb	r3, [r2, #0]
                              true;
#endif

  Ctrl_access_unlock();

  return removal;
    10ae:	1c3b      	adds	r3, r7, #0
    10b0:	330f      	adds	r3, #15
    10b2:	781b      	ldrb	r3, [r3, #0]
}
    10b4:	1c18      	adds	r0, r3, #0
    10b6:	46bd      	mov	sp, r7
    10b8:	b004      	add	sp, #16
    10ba:	bd80      	pop	{r7, pc}
    10bc:	0000b0ec 	.word	0x0000b0ec

000010c0 <mem_name>:


const char *mem_name(U8 lun)
{
    10c0:	b580      	push	{r7, lr}
    10c2:	b082      	sub	sp, #8
    10c4:	af00      	add	r7, sp, #0
    10c6:	1c02      	adds	r2, r0, #0
    10c8:	1dfb      	adds	r3, r7, #7
    10ca:	701a      	strb	r2, [r3, #0]
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    10cc:	1dfb      	adds	r3, r7, #7
    10ce:	781b      	ldrb	r3, [r3, #0]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d101      	bne.n	10d8 <mem_name+0x18>
    10d4:	4b03      	ldr	r3, [pc, #12]	; (10e4 <mem_name+0x24>)
    10d6:	e000      	b.n	10da <mem_name+0x1a>
    10d8:	2300      	movs	r3, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    10da:	1c18      	adds	r0, r3, #0
    10dc:	46bd      	mov	sp, r7
    10de:	b002      	add	sp, #8
    10e0:	bd80      	pop	{r7, pc}
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	0000b0d0 	.word	0x0000b0d0

000010e8 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    10e8:	b580      	push	{r7, lr}
    10ea:	b084      	sub	sp, #16
    10ec:	af00      	add	r7, sp, #0
    10ee:	6039      	str	r1, [r7, #0]
    10f0:	1dfb      	adds	r3, r7, #7
    10f2:	1c01      	adds	r1, r0, #0
    10f4:	7019      	strb	r1, [r3, #0]
    10f6:	1d3b      	adds	r3, r7, #4
    10f8:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    10fa:	4b11      	ldr	r3, [pc, #68]	; (1140 <memory_2_usb+0x58>)
    10fc:	4798      	blx	r3
  status =
    10fe:	1dfb      	adds	r3, r7, #7
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	2b00      	cmp	r3, #0
    1104:	d10e      	bne.n	1124 <memory_2_usb+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    1106:	1dfb      	adds	r3, r7, #7
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	4a0e      	ldr	r2, [pc, #56]	; (1144 <memory_2_usb+0x5c>)
    110c:	015b      	lsls	r3, r3, #5
    110e:	18d3      	adds	r3, r2, r3
    1110:	3310      	adds	r3, #16
    1112:	685b      	ldr	r3, [r3, #4]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
    1114:	6839      	ldr	r1, [r7, #0]
    1116:	1d3a      	adds	r2, r7, #4
    1118:	8812      	ldrh	r2, [r2, #0]
    111a:	1c08      	adds	r0, r1, #0
    111c:	1c11      	adds	r1, r2, #0
    111e:	4798      	blx	r3
    1120:	1c03      	adds	r3, r0, #0
    1122:	e000      	b.n	1126 <memory_2_usb+0x3e>
    1124:	2301      	movs	r3, #1
    1126:	1c3a      	adds	r2, r7, #0
    1128:	320f      	adds	r2, #15
    112a:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <memory_2_usb+0x60>)
    112e:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    1130:	1c3b      	adds	r3, r7, #0
    1132:	330f      	adds	r3, #15
    1134:	781b      	ldrb	r3, [r3, #0]
}
    1136:	1c18      	adds	r0, r3, #0
    1138:	46bd      	mov	sp, r7
    113a:	b004      	add	sp, #16
    113c:	bd80      	pop	{r7, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	00000b29 	.word	0x00000b29
    1144:	0000b0ec 	.word	0x0000b0ec
    1148:	00000b31 	.word	0x00000b31

0000114c <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    114c:	b580      	push	{r7, lr}
    114e:	b084      	sub	sp, #16
    1150:	af00      	add	r7, sp, #0
    1152:	6039      	str	r1, [r7, #0]
    1154:	1dfb      	adds	r3, r7, #7
    1156:	1c01      	adds	r1, r0, #0
    1158:	7019      	strb	r1, [r3, #0]
    115a:	1d3b      	adds	r3, r7, #4
    115c:	801a      	strh	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    115e:	4b11      	ldr	r3, [pc, #68]	; (11a4 <usb_2_memory+0x58>)
    1160:	4798      	blx	r3
  status =
    1162:	1dfb      	adds	r3, r7, #7
    1164:	781b      	ldrb	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d10e      	bne.n	1188 <usb_2_memory+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    116a:	1dfb      	adds	r3, r7, #7
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	4a0e      	ldr	r2, [pc, #56]	; (11a8 <usb_2_memory+0x5c>)
    1170:	015b      	lsls	r3, r3, #5
    1172:	18d3      	adds	r3, r2, r3
    1174:	3318      	adds	r3, #24
    1176:	681b      	ldr	r3, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
    1178:	6839      	ldr	r1, [r7, #0]
    117a:	1d3a      	adds	r2, r7, #4
    117c:	8812      	ldrh	r2, [r2, #0]
    117e:	1c08      	adds	r0, r1, #0
    1180:	1c11      	adds	r1, r2, #0
    1182:	4798      	blx	r3
    1184:	1c03      	adds	r3, r0, #0
    1186:	e000      	b.n	118a <usb_2_memory+0x3e>
    1188:	2301      	movs	r3, #1
    118a:	1c3a      	adds	r2, r7, #0
    118c:	320f      	adds	r2, #15
    118e:	7013      	strb	r3, [r2, #0]
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <usb_2_memory+0x60>)
    1192:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
    1194:	1c3b      	adds	r3, r7, #0
    1196:	330f      	adds	r3, #15
    1198:	781b      	ldrb	r3, [r3, #0]
}
    119a:	1c18      	adds	r0, r3, #0
    119c:	46bd      	mov	sp, r7
    119e:	b004      	add	sp, #16
    11a0:	bd80      	pop	{r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	00000b39 	.word	0x00000b39
    11a8:	0000b0ec 	.word	0x0000b0ec
    11ac:	00000b41 	.word	0x00000b41

000011b0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11b6:	f3ef 8310 	mrs	r3, PRIMASK
    11ba:	603b      	str	r3, [r7, #0]
  return(result);
    11bc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    11be:	425a      	negs	r2, r3
    11c0:	4153      	adcs	r3, r2
    11c2:	b2db      	uxtb	r3, r3
    11c4:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    11c6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    11c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <cpu_irq_save+0x2c>)
    11ce:	2200      	movs	r2, #0
    11d0:	701a      	strb	r2, [r3, #0]
	return flags;
    11d2:	687b      	ldr	r3, [r7, #4]
}
    11d4:	1c18      	adds	r0, r3, #0
    11d6:	46bd      	mov	sp, r7
    11d8:	b002      	add	sp, #8
    11da:	bd80      	pop	{r7, pc}
    11dc:	2000025c 	.word	0x2000025c

000011e0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
	return (flags);
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	1e5a      	subs	r2, r3, #1
    11ec:	4193      	sbcs	r3, r2
    11ee:	b2db      	uxtb	r3, r3
}
    11f0:	1c18      	adds	r0, r3, #0
    11f2:	46bd      	mov	sp, r7
    11f4:	b002      	add	sp, #8
    11f6:	bd80      	pop	{r7, pc}

000011f8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1200:	687b      	ldr	r3, [r7, #4]
    1202:	1c18      	adds	r0, r3, #0
    1204:	4b06      	ldr	r3, [pc, #24]	; (1220 <cpu_irq_restore+0x28>)
    1206:	4798      	blx	r3
    1208:	1c03      	adds	r3, r0, #0
    120a:	2b00      	cmp	r3, #0
    120c:	d005      	beq.n	121a <cpu_irq_restore+0x22>
		cpu_irq_enable();
    120e:	4b05      	ldr	r3, [pc, #20]	; (1224 <cpu_irq_restore+0x2c>)
    1210:	2201      	movs	r2, #1
    1212:	701a      	strb	r2, [r3, #0]
    1214:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1218:	b662      	cpsie	i
}
    121a:	46bd      	mov	sp, r7
    121c:	b002      	add	sp, #8
    121e:	bd80      	pop	{r7, pc}
    1220:	000011e1 	.word	0x000011e1
    1224:	2000025c 	.word	0x2000025c

00001228 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    1228:	b590      	push	{r4, r7, lr}
    122a:	b083      	sub	sp, #12
    122c:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    122e:	1dbb      	adds	r3, r7, #6
    1230:	2200      	movs	r2, #0
    1232:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    1234:	4b59      	ldr	r3, [pc, #356]	; (139c <udi_cdc_comm_enable+0x174>)
    1236:	2200      	movs	r2, #0
    1238:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    123a:	1dbb      	adds	r3, r7, #6
    123c:	781a      	ldrb	r2, [r3, #0]
    123e:	4b58      	ldr	r3, [pc, #352]	; (13a0 <udi_cdc_comm_enable+0x178>)
    1240:	0052      	lsls	r2, r2, #1
    1242:	2100      	movs	r1, #0
    1244:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    1246:	1dbb      	adds	r3, r7, #6
    1248:	781a      	ldrb	r2, [r3, #0]
    124a:	4956      	ldr	r1, [pc, #344]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    124c:	1c13      	adds	r3, r2, #0
    124e:	009b      	lsls	r3, r3, #2
    1250:	189b      	adds	r3, r3, r2
    1252:	005b      	lsls	r3, r3, #1
    1254:	22a1      	movs	r2, #161	; 0xa1
    1256:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    1258:	1dbb      	adds	r3, r7, #6
    125a:	781a      	ldrb	r2, [r3, #0]
    125c:	4951      	ldr	r1, [pc, #324]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    125e:	1c13      	adds	r3, r2, #0
    1260:	009b      	lsls	r3, r3, #2
    1262:	189b      	adds	r3, r3, r2
    1264:	005b      	lsls	r3, r3, #1
    1266:	18cb      	adds	r3, r1, r3
    1268:	2220      	movs	r2, #32
    126a:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    126c:	1dbb      	adds	r3, r7, #6
    126e:	781a      	ldrb	r2, [r3, #0]
    1270:	494c      	ldr	r1, [pc, #304]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    1272:	1c13      	adds	r3, r2, #0
    1274:	009b      	lsls	r3, r3, #2
    1276:	189b      	adds	r3, r3, r2
    1278:	005b      	lsls	r3, r3, #1
    127a:	18cb      	adds	r3, r1, r3
    127c:	2200      	movs	r2, #0
    127e:	805a      	strh	r2, [r3, #2]

	switch (port) {
    1280:	1dbb      	adds	r3, r7, #6
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	2b00      	cmp	r3, #0
    1286:	d103      	bne.n	1290 <udi_cdc_comm_enable+0x68>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    1288:	1dfb      	adds	r3, r7, #7
    128a:	2200      	movs	r2, #0
    128c:	701a      	strb	r2, [r3, #0]
    128e:	e003      	b.n	1298 <udi_cdc_comm_enable+0x70>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    1290:	1dfb      	adds	r3, r7, #7
    1292:	2200      	movs	r2, #0
    1294:	701a      	strb	r2, [r3, #0]
		break;
    1296:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    1298:	1dbb      	adds	r3, r7, #6
    129a:	781a      	ldrb	r2, [r3, #0]
    129c:	1dfb      	adds	r3, r7, #7
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	b299      	uxth	r1, r3
    12a2:	4840      	ldr	r0, [pc, #256]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    12a4:	1c13      	adds	r3, r2, #0
    12a6:	009b      	lsls	r3, r3, #2
    12a8:	189b      	adds	r3, r3, r2
    12aa:	005b      	lsls	r3, r3, #1
    12ac:	18c3      	adds	r3, r0, r3
    12ae:	1c0a      	adds	r2, r1, #0
    12b0:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    12b2:	1dbb      	adds	r3, r7, #6
    12b4:	781a      	ldrb	r2, [r3, #0]
    12b6:	493b      	ldr	r1, [pc, #236]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    12b8:	1c13      	adds	r3, r2, #0
    12ba:	009b      	lsls	r3, r3, #2
    12bc:	189b      	adds	r3, r3, r2
    12be:	005b      	lsls	r3, r3, #1
    12c0:	18cb      	adds	r3, r1, r3
    12c2:	2202      	movs	r2, #2
    12c4:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    12c6:	1dbb      	adds	r3, r7, #6
    12c8:	781a      	ldrb	r2, [r3, #0]
    12ca:	4936      	ldr	r1, [pc, #216]	; (13a4 <udi_cdc_comm_enable+0x17c>)
    12cc:	1c13      	adds	r3, r2, #0
    12ce:	009b      	lsls	r3, r3, #2
    12d0:	189b      	adds	r3, r3, r2
    12d2:	005b      	lsls	r3, r3, #1
    12d4:	18cb      	adds	r3, r1, r3
    12d6:	3308      	adds	r3, #8
    12d8:	2200      	movs	r2, #0
    12da:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    12dc:	1dbb      	adds	r3, r7, #6
    12de:	7819      	ldrb	r1, [r3, #0]
    12e0:	4a31      	ldr	r2, [pc, #196]	; (13a8 <udi_cdc_comm_enable+0x180>)
    12e2:	1c0b      	adds	r3, r1, #0
    12e4:	00db      	lsls	r3, r3, #3
    12e6:	1a5b      	subs	r3, r3, r1
    12e8:	5c98      	ldrb	r0, [r3, r2]
    12ea:	2100      	movs	r1, #0
    12ec:	4001      	ands	r1, r0
    12ee:	5499      	strb	r1, [r3, r2]
    12f0:	18d1      	adds	r1, r2, r3
    12f2:	784c      	ldrb	r4, [r1, #1]
    12f4:	2000      	movs	r0, #0
    12f6:	4020      	ands	r0, r4
    12f8:	243e      	movs	r4, #62	; 0x3e
    12fa:	4264      	negs	r4, r4
    12fc:	4320      	orrs	r0, r4
    12fe:	7048      	strb	r0, [r1, #1]
    1300:	18d1      	adds	r1, r2, r3
    1302:	788c      	ldrb	r4, [r1, #2]
    1304:	2000      	movs	r0, #0
    1306:	4020      	ands	r0, r4
    1308:	2401      	movs	r4, #1
    130a:	4320      	orrs	r0, r4
    130c:	7088      	strb	r0, [r1, #2]
    130e:	18d3      	adds	r3, r2, r3
    1310:	78d9      	ldrb	r1, [r3, #3]
    1312:	2200      	movs	r2, #0
    1314:	400a      	ands	r2, r1
    1316:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    1318:	1dbb      	adds	r3, r7, #6
    131a:	781a      	ldrb	r2, [r3, #0]
    131c:	4922      	ldr	r1, [pc, #136]	; (13a8 <udi_cdc_comm_enable+0x180>)
    131e:	1c13      	adds	r3, r2, #0
    1320:	00db      	lsls	r3, r3, #3
    1322:	1a9b      	subs	r3, r3, r2
    1324:	18cb      	adds	r3, r1, r3
    1326:	2200      	movs	r2, #0
    1328:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    132a:	1dbb      	adds	r3, r7, #6
    132c:	781a      	ldrb	r2, [r3, #0]
    132e:	491e      	ldr	r1, [pc, #120]	; (13a8 <udi_cdc_comm_enable+0x180>)
    1330:	1c13      	adds	r3, r2, #0
    1332:	00db      	lsls	r3, r3, #3
    1334:	1a9b      	subs	r3, r3, r2
    1336:	18cb      	adds	r3, r1, r3
    1338:	2200      	movs	r2, #0
    133a:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    133c:	1dbb      	adds	r3, r7, #6
    133e:	781a      	ldrb	r2, [r3, #0]
    1340:	4919      	ldr	r1, [pc, #100]	; (13a8 <udi_cdc_comm_enable+0x180>)
    1342:	1c13      	adds	r3, r2, #0
    1344:	00db      	lsls	r3, r3, #3
    1346:	1a9b      	subs	r3, r3, r2
    1348:	18cb      	adds	r3, r1, r3
    134a:	2208      	movs	r2, #8
    134c:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    134e:	1dbb      	adds	r3, r7, #6
    1350:	781a      	ldrb	r2, [r3, #0]
    1352:	1c13      	adds	r3, r2, #0
    1354:	00db      	lsls	r3, r3, #3
    1356:	1a9b      	subs	r3, r3, r2
    1358:	4a13      	ldr	r2, [pc, #76]	; (13a8 <udi_cdc_comm_enable+0x180>)
    135a:	189b      	adds	r3, r3, r2
    135c:	1dba      	adds	r2, r7, #6
    135e:	7812      	ldrb	r2, [r2, #0]
    1360:	1c10      	adds	r0, r2, #0
    1362:	1c19      	adds	r1, r3, #0
    1364:	4b11      	ldr	r3, [pc, #68]	; (13ac <udi_cdc_comm_enable+0x184>)
    1366:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
    1368:	1dbb      	adds	r3, r7, #6
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	1c18      	adds	r0, r3, #0
    136e:	4b10      	ldr	r3, [pc, #64]	; (13b0 <udi_cdc_comm_enable+0x188>)
    1370:	4798      	blx	r3
    1372:	1c03      	adds	r3, r0, #0
    1374:	2201      	movs	r2, #1
    1376:	4053      	eors	r3, r2
    1378:	b2db      	uxtb	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	d001      	beq.n	1382 <udi_cdc_comm_enable+0x15a>
		return false;
    137e:	2300      	movs	r3, #0
    1380:	e007      	b.n	1392 <udi_cdc_comm_enable+0x16a>
	}
	udi_cdc_nb_comm_enabled++;
    1382:	4b06      	ldr	r3, [pc, #24]	; (139c <udi_cdc_comm_enable+0x174>)
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	b2db      	uxtb	r3, r3
    1388:	3301      	adds	r3, #1
    138a:	b2da      	uxtb	r2, r3
    138c:	4b03      	ldr	r3, [pc, #12]	; (139c <udi_cdc_comm_enable+0x174>)
    138e:	701a      	strb	r2, [r3, #0]
	return true;
    1390:	2301      	movs	r3, #1
}
    1392:	1c18      	adds	r0, r3, #0
    1394:	46bd      	mov	sp, r7
    1396:	b003      	add	sp, #12
    1398:	bd90      	pop	{r4, r7, pc}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	2000665c 	.word	0x2000665c
    13a0:	2000664c 	.word	0x2000664c
    13a4:	20006650 	.word	0x20006650
    13a8:	20006640 	.word	0x20006640
    13ac:	0000aca5 	.word	0x0000aca5
    13b0:	0000a871 	.word	0x0000a871

000013b4 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    13ba:	1dfb      	adds	r3, r7, #7
    13bc:	2200      	movs	r2, #0
    13be:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    13c0:	4b30      	ldr	r3, [pc, #192]	; (1484 <udi_cdc_data_enable+0xd0>)
    13c2:	2200      	movs	r2, #0
    13c4:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    13c6:	1dfb      	adds	r3, r7, #7
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	4a2f      	ldr	r2, [pc, #188]	; (1488 <udi_cdc_data_enable+0xd4>)
    13cc:	2100      	movs	r1, #0
    13ce:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    13d0:	1dfb      	adds	r3, r7, #7
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	4a2d      	ldr	r2, [pc, #180]	; (148c <udi_cdc_data_enable+0xd8>)
    13d6:	2100      	movs	r1, #0
    13d8:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    13da:	1dfb      	adds	r3, r7, #7
    13dc:	781b      	ldrb	r3, [r3, #0]
    13de:	4a2c      	ldr	r2, [pc, #176]	; (1490 <udi_cdc_data_enable+0xdc>)
    13e0:	2100      	movs	r1, #0
    13e2:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    13e4:	1dfb      	adds	r3, r7, #7
    13e6:	781a      	ldrb	r2, [r3, #0]
    13e8:	4b2a      	ldr	r3, [pc, #168]	; (1494 <udi_cdc_data_enable+0xe0>)
    13ea:	0092      	lsls	r2, r2, #2
    13ec:	2100      	movs	r1, #0
    13ee:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    13f0:	1dfb      	adds	r3, r7, #7
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	4a27      	ldr	r2, [pc, #156]	; (1494 <udi_cdc_data_enable+0xe0>)
    13f6:	009b      	lsls	r3, r3, #2
    13f8:	18d3      	adds	r3, r2, r3
    13fa:	3302      	adds	r3, #2
    13fc:	2200      	movs	r2, #0
    13fe:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    1400:	1dfb      	adds	r3, r7, #7
    1402:	781a      	ldrb	r2, [r3, #0]
    1404:	4b24      	ldr	r3, [pc, #144]	; (1498 <udi_cdc_data_enable+0xe4>)
    1406:	0052      	lsls	r2, r2, #1
    1408:	2100      	movs	r1, #0
    140a:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    140c:	1dfb      	adds	r3, r7, #7
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	1c18      	adds	r0, r3, #0
    1412:	4b22      	ldr	r3, [pc, #136]	; (149c <udi_cdc_data_enable+0xe8>)
    1414:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    1416:	1dfb      	adds	r3, r7, #7
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	4a21      	ldr	r2, [pc, #132]	; (14a0 <udi_cdc_data_enable+0xec>)
    141c:	2100      	movs	r1, #0
    141e:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    1420:	1dfb      	adds	r3, r7, #7
    1422:	781b      	ldrb	r3, [r3, #0]
    1424:	4a1f      	ldr	r2, [pc, #124]	; (14a4 <udi_cdc_data_enable+0xf0>)
    1426:	2100      	movs	r1, #0
    1428:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    142a:	1dfb      	adds	r3, r7, #7
    142c:	781a      	ldrb	r2, [r3, #0]
    142e:	4b1e      	ldr	r3, [pc, #120]	; (14a8 <udi_cdc_data_enable+0xf4>)
    1430:	0092      	lsls	r2, r2, #2
    1432:	2100      	movs	r1, #0
    1434:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_pos[port] = 0;
    1436:	1dfb      	adds	r3, r7, #7
    1438:	781a      	ldrb	r2, [r3, #0]
    143a:	4b1c      	ldr	r3, [pc, #112]	; (14ac <udi_cdc_data_enable+0xf8>)
    143c:	0052      	lsls	r2, r2, #1
    143e:	2100      	movs	r1, #0
    1440:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    1442:	1dfb      	adds	r3, r7, #7
    1444:	781b      	ldrb	r3, [r3, #0]
    1446:	1c18      	adds	r0, r3, #0
    1448:	4b19      	ldr	r3, [pc, #100]	; (14b0 <udi_cdc_data_enable+0xfc>)
    144a:	4798      	blx	r3
    144c:	1c03      	adds	r3, r0, #0
    144e:	2201      	movs	r2, #1
    1450:	4053      	eors	r3, r2
    1452:	b2db      	uxtb	r3, r3
    1454:	2b00      	cmp	r3, #0
    1456:	d001      	beq.n	145c <udi_cdc_data_enable+0xa8>
		return false;
    1458:	2300      	movs	r3, #0
    145a:	e00f      	b.n	147c <udi_cdc_data_enable+0xc8>
	}
	udi_cdc_nb_data_enabled++;
    145c:	4b09      	ldr	r3, [pc, #36]	; (1484 <udi_cdc_data_enable+0xd0>)
    145e:	781b      	ldrb	r3, [r3, #0]
    1460:	b2db      	uxtb	r3, r3
    1462:	3301      	adds	r3, #1
    1464:	b2da      	uxtb	r2, r3
    1466:	4b07      	ldr	r3, [pc, #28]	; (1484 <udi_cdc_data_enable+0xd0>)
    1468:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <udi_cdc_data_enable+0xd0>)
    146c:	781b      	ldrb	r3, [r3, #0]
    146e:	b2db      	uxtb	r3, r3
    1470:	2b01      	cmp	r3, #1
    1472:	d102      	bne.n	147a <udi_cdc_data_enable+0xc6>
		udi_cdc_data_running = true;
    1474:	4b0f      	ldr	r3, [pc, #60]	; (14b4 <udi_cdc_data_enable+0x100>)
    1476:	2201      	movs	r2, #1
    1478:	701a      	strb	r2, [r3, #0]
	}
	return true;
    147a:	2301      	movs	r3, #1
}
    147c:	1c18      	adds	r0, r3, #0
    147e:	46bd      	mov	sp, r7
    1480:	b002      	add	sp, #8
    1482:	bd80      	pop	{r7, pc}
    1484:	2000665d 	.word	0x2000665d
    1488:	20006b7c 	.word	0x20006b7c
    148c:	20006b80 	.word	0x20006b80
    1490:	20006b74 	.word	0x20006b74
    1494:	20006b70 	.word	0x20006b70
    1498:	20006b78 	.word	0x20006b78
    149c:	00001bc9 	.word	0x00001bc9
    14a0:	200068ec 	.word	0x200068ec
    14a4:	200068e4 	.word	0x200068e4
    14a8:	200068e0 	.word	0x200068e0
    14ac:	200068e8 	.word	0x200068e8
    14b0:	000018f1 	.word	0x000018f1
    14b4:	2000665e 	.word	0x2000665e

000014b8 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    14b8:	b580      	push	{r7, lr}
    14ba:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    14bc:	4b04      	ldr	r3, [pc, #16]	; (14d0 <udi_cdc_comm_disable+0x18>)
    14be:	781b      	ldrb	r3, [r3, #0]
    14c0:	b2db      	uxtb	r3, r3
    14c2:	3b01      	subs	r3, #1
    14c4:	b2da      	uxtb	r2, r3
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <udi_cdc_comm_disable+0x18>)
    14c8:	701a      	strb	r2, [r3, #0]
}
    14ca:	46bd      	mov	sp, r7
    14cc:	bd80      	pop	{r7, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	2000665c 	.word	0x2000665c

000014d4 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    14da:	4b0b      	ldr	r3, [pc, #44]	; (1508 <udi_cdc_data_disable+0x34>)
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	b2db      	uxtb	r3, r3
    14e0:	3b01      	subs	r3, #1
    14e2:	b2da      	uxtb	r2, r3
    14e4:	4b08      	ldr	r3, [pc, #32]	; (1508 <udi_cdc_data_disable+0x34>)
    14e6:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    14e8:	1dfb      	adds	r3, r7, #7
    14ea:	4a07      	ldr	r2, [pc, #28]	; (1508 <udi_cdc_data_disable+0x34>)
    14ec:	7812      	ldrb	r2, [r2, #0]
    14ee:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
    14f0:	1dfb      	adds	r3, r7, #7
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	1c18      	adds	r0, r3, #0
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <udi_cdc_data_disable+0x38>)
    14f8:	4798      	blx	r3
	udi_cdc_data_running = false;
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <udi_cdc_data_disable+0x3c>)
    14fc:	2200      	movs	r2, #0
    14fe:	701a      	strb	r2, [r3, #0]
}
    1500:	46bd      	mov	sp, r7
    1502:	b002      	add	sp, #8
    1504:	bd80      	pop	{r7, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	2000665d 	.word	0x2000665d
    150c:	0000a8a1 	.word	0x0000a8a1
    1510:	2000665e 	.word	0x2000665e

00001514 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    1514:	b590      	push	{r4, r7, lr}
    1516:	b083      	sub	sp, #12
    1518:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    151a:	1dfc      	adds	r4, r7, #7
    151c:	4b34      	ldr	r3, [pc, #208]	; (15f0 <udi_cdc_comm_setup+0xdc>)
    151e:	4798      	blx	r3
    1520:	1c03      	adds	r3, r0, #0
    1522:	7023      	strb	r3, [r4, #0]

	if (Udd_setup_is_in()) {
    1524:	4b33      	ldr	r3, [pc, #204]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	b2db      	uxtb	r3, r3
    152a:	b25b      	sxtb	r3, r3
    152c:	2b00      	cmp	r3, #0
    152e:	da1e      	bge.n	156e <udi_cdc_comm_setup+0x5a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1530:	4b30      	ldr	r3, [pc, #192]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1532:	781b      	ldrb	r3, [r3, #0]
    1534:	1c1a      	adds	r2, r3, #0
    1536:	2360      	movs	r3, #96	; 0x60
    1538:	4013      	ands	r3, r2
    153a:	2b20      	cmp	r3, #32
    153c:	d117      	bne.n	156e <udi_cdc_comm_setup+0x5a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    153e:	4b2d      	ldr	r3, [pc, #180]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1540:	785b      	ldrb	r3, [r3, #1]
    1542:	2b21      	cmp	r3, #33	; 0x21
    1544:	d113      	bne.n	156e <udi_cdc_comm_setup+0x5a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1546:	4b2b      	ldr	r3, [pc, #172]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1548:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    154a:	2b07      	cmp	r3, #7
    154c:	d001      	beq.n	1552 <udi_cdc_comm_setup+0x3e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    154e:	2300      	movs	r3, #0
    1550:	e049      	b.n	15e6 <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    1552:	1dfb      	adds	r3, r7, #7
    1554:	781a      	ldrb	r2, [r3, #0]
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    1556:	1c13      	adds	r3, r2, #0
    1558:	00db      	lsls	r3, r3, #3
    155a:	1a9b      	subs	r3, r3, r2
    155c:	4a26      	ldr	r2, [pc, #152]	; (15f8 <udi_cdc_comm_setup+0xe4>)
    155e:	189a      	adds	r2, r3, r2
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    1560:	4b24      	ldr	r3, [pc, #144]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1562:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    1564:	4b23      	ldr	r3, [pc, #140]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1566:	2207      	movs	r2, #7
    1568:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    156a:	2301      	movs	r3, #1
    156c:	e03b      	b.n	15e6 <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	if (Udd_setup_is_out()) {
    156e:	4b21      	ldr	r3, [pc, #132]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	b2db      	uxtb	r3, r3
    1574:	b25b      	sxtb	r3, r3
    1576:	2b00      	cmp	r3, #0
    1578:	db34      	blt.n	15e4 <udi_cdc_comm_setup+0xd0>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    157a:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	1c1a      	adds	r2, r3, #0
    1580:	2360      	movs	r3, #96	; 0x60
    1582:	4013      	ands	r3, r2
    1584:	2b20      	cmp	r3, #32
    1586:	d12d      	bne.n	15e4 <udi_cdc_comm_setup+0xd0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1588:	4b1a      	ldr	r3, [pc, #104]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    158a:	785b      	ldrb	r3, [r3, #1]
    158c:	2b20      	cmp	r3, #32
    158e:	d002      	beq.n	1596 <udi_cdc_comm_setup+0x82>
    1590:	2b22      	cmp	r3, #34	; 0x22
    1592:	d017      	beq.n	15c4 <udi_cdc_comm_setup+0xb0>
    1594:	e026      	b.n	15e4 <udi_cdc_comm_setup+0xd0>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    1596:	4b17      	ldr	r3, [pc, #92]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    1598:	88db      	ldrh	r3, [r3, #6]
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    159a:	2b07      	cmp	r3, #7
    159c:	d001      	beq.n	15a2 <udi_cdc_comm_setup+0x8e>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    159e:	2300      	movs	r3, #0
    15a0:	e021      	b.n	15e6 <udi_cdc_comm_setup+0xd2>
				udd_g_ctrlreq.callback =
    15a2:	4b14      	ldr	r3, [pc, #80]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    15a4:	4a15      	ldr	r2, [pc, #84]	; (15fc <udi_cdc_comm_setup+0xe8>)
    15a6:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	781a      	ldrb	r2, [r3, #0]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
    15ac:	1c13      	adds	r3, r2, #0
    15ae:	00db      	lsls	r3, r3, #3
    15b0:	1a9b      	subs	r3, r3, r2
    15b2:	4a11      	ldr	r2, [pc, #68]	; (15f8 <udi_cdc_comm_setup+0xe4>)
    15b4:	189a      	adds	r2, r3, r2
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    15b6:	4b0f      	ldr	r3, [pc, #60]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    15b8:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    15ba:	4b0e      	ldr	r3, [pc, #56]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    15bc:	2207      	movs	r2, #7
    15be:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    15c0:	2301      	movs	r3, #1
    15c2:	e010      	b.n	15e6 <udi_cdc_comm_setup+0xd2>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
    15c4:	4b0b      	ldr	r3, [pc, #44]	; (15f4 <udi_cdc_comm_setup+0xe0>)
    15c6:	885b      	ldrh	r3, [r3, #2]
    15c8:	1c1a      	adds	r2, r3, #0
    15ca:	2301      	movs	r3, #1
    15cc:	4013      	ands	r3, r2
    15ce:	1e5a      	subs	r2, r3, #1
    15d0:	4193      	sbcs	r3, r2
    15d2:	b2db      	uxtb	r3, r3
    15d4:	1dfa      	adds	r2, r7, #7
    15d6:	7812      	ldrb	r2, [r2, #0]
    15d8:	1c10      	adds	r0, r2, #0
    15da:	1c19      	adds	r1, r3, #0
    15dc:	4b08      	ldr	r3, [pc, #32]	; (1600 <udi_cdc_comm_setup+0xec>)
    15de:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    15e0:	2301      	movs	r3, #1
    15e2:	e000      	b.n	15e6 <udi_cdc_comm_setup+0xd2>
			}
		}
	}
	return false;  // request Not supported
    15e4:	2300      	movs	r3, #0
}
    15e6:	1c18      	adds	r0, r3, #0
    15e8:	46bd      	mov	sp, r7
    15ea:	b003      	add	sp, #12
    15ec:	bd90      	pop	{r4, r7, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	00001639 	.word	0x00001639
    15f4:	20006fc4 	.word	0x20006fc4
    15f8:	20006640 	.word	0x20006640
    15fc:	0000166d 	.word	0x0000166d
    1600:	0000a8cd 	.word	0x0000a8cd

00001604 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    1604:	b580      	push	{r7, lr}
    1606:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    1608:	2300      	movs	r3, #0
}
    160a:	1c18      	adds	r0, r3, #0
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}

00001610 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    1610:	b580      	push	{r7, lr}
    1612:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    1614:	2300      	movs	r3, #0
}
    1616:	1c18      	adds	r0, r3, #0
    1618:	46bd      	mov	sp, r7
    161a:	bd80      	pop	{r7, pc}

0000161c <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    161c:	b580      	push	{r7, lr}
    161e:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    1620:	4b03      	ldr	r3, [pc, #12]	; (1630 <udi_cdc_data_sof_notify+0x14>)
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	1c18      	adds	r0, r3, #0
    1626:	4b03      	ldr	r3, [pc, #12]	; (1634 <udi_cdc_data_sof_notify+0x18>)
    1628:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    162a:	46bd      	mov	sp, r7
    162c:	bd80      	pop	{r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	20006b84 	.word	0x20006b84
    1634:	00001bc9 	.word	0x00001bc9

00001638 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    1638:	b580      	push	{r7, lr}
    163a:	b082      	sub	sp, #8
    163c:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    163e:	4b0a      	ldr	r3, [pc, #40]	; (1668 <udi_cdc_setup_to_port+0x30>)
    1640:	889b      	ldrh	r3, [r3, #4]
    1642:	1c1a      	adds	r2, r3, #0
    1644:	23ff      	movs	r3, #255	; 0xff
    1646:	4013      	ands	r3, r2
    1648:	d103      	bne.n	1652 <udi_cdc_setup_to_port+0x1a>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    164a:	1dfb      	adds	r3, r7, #7
    164c:	2200      	movs	r2, #0
    164e:	701a      	strb	r2, [r3, #0]
    1650:	e003      	b.n	165a <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    1652:	1dfb      	adds	r3, r7, #7
    1654:	2200      	movs	r2, #0
    1656:	701a      	strb	r2, [r3, #0]
		break;
    1658:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    165a:	1dfb      	adds	r3, r7, #7
    165c:	781b      	ldrb	r3, [r3, #0]
}
    165e:	1c18      	adds	r0, r3, #0
    1660:	46bd      	mov	sp, r7
    1662:	b002      	add	sp, #8
    1664:	bd80      	pop	{r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	20006fc4 	.word	0x20006fc4

0000166c <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    166c:	b590      	push	{r4, r7, lr}
    166e:	b083      	sub	sp, #12
    1670:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    1672:	1dfc      	adds	r4, r7, #7
    1674:	4b09      	ldr	r3, [pc, #36]	; (169c <udi_cdc_line_coding_received+0x30>)
    1676:	4798      	blx	r3
    1678:	1c03      	adds	r3, r0, #0
    167a:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
    167c:	1dfb      	adds	r3, r7, #7
    167e:	781a      	ldrb	r2, [r3, #0]
    1680:	1c13      	adds	r3, r2, #0
    1682:	00db      	lsls	r3, r3, #3
    1684:	1a9b      	subs	r3, r3, r2
    1686:	4a06      	ldr	r2, [pc, #24]	; (16a0 <udi_cdc_line_coding_received+0x34>)
    1688:	189b      	adds	r3, r3, r2
    168a:	1dfa      	adds	r2, r7, #7
    168c:	7812      	ldrb	r2, [r2, #0]
    168e:	1c10      	adds	r0, r2, #0
    1690:	1c19      	adds	r1, r3, #0
    1692:	4b04      	ldr	r3, [pc, #16]	; (16a4 <udi_cdc_line_coding_received+0x38>)
    1694:	4798      	blx	r3
}
    1696:	46bd      	mov	sp, r7
    1698:	b003      	add	sp, #12
    169a:	bd90      	pop	{r4, r7, pc}
    169c:	00001639 	.word	0x00001639
    16a0:	20006640 	.word	0x20006640
    16a4:	0000aca5 	.word	0x0000aca5

000016a8 <udi_cdc_ctrl_state_change>:

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	b084      	sub	sp, #16
    16ac:	af00      	add	r7, sp, #0
    16ae:	1dfb      	adds	r3, r7, #7
    16b0:	7018      	strb	r0, [r3, #0]
    16b2:	1dbb      	adds	r3, r7, #6
    16b4:	7019      	strb	r1, [r3, #0]
    16b6:	1d3b      	adds	r3, r7, #4
    16b8:	801a      	strh	r2, [r3, #0]
	irqflags_t flags;
	udd_ep_id_t ep_comm;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    16ba:	1c3b      	adds	r3, r7, #0
    16bc:	330e      	adds	r3, #14
    16be:	2200      	movs	r2, #0
    16c0:	701a      	strb	r2, [r3, #0]
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
    16c2:	4b26      	ldr	r3, [pc, #152]	; (175c <udi_cdc_ctrl_state_change+0xb4>)
    16c4:	4798      	blx	r3
    16c6:	1c03      	adds	r3, r0, #0
    16c8:	60bb      	str	r3, [r7, #8]
	if (b_set) {
    16ca:	1dbb      	adds	r3, r7, #6
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d011      	beq.n	16f6 <udi_cdc_ctrl_state_change+0x4e>
		udi_cdc_state[port] |= bit_mask;
    16d2:	1c3b      	adds	r3, r7, #0
    16d4:	330e      	adds	r3, #14
    16d6:	781a      	ldrb	r2, [r3, #0]
    16d8:	1c3b      	adds	r3, r7, #0
    16da:	330e      	adds	r3, #14
    16dc:	7819      	ldrb	r1, [r3, #0]
    16de:	4b20      	ldr	r3, [pc, #128]	; (1760 <udi_cdc_ctrl_state_change+0xb8>)
    16e0:	0049      	lsls	r1, r1, #1
    16e2:	5acb      	ldrh	r3, [r1, r3]
    16e4:	b299      	uxth	r1, r3
    16e6:	1d3b      	adds	r3, r7, #4
    16e8:	881b      	ldrh	r3, [r3, #0]
    16ea:	430b      	orrs	r3, r1
    16ec:	b299      	uxth	r1, r3
    16ee:	4b1c      	ldr	r3, [pc, #112]	; (1760 <udi_cdc_ctrl_state_change+0xb8>)
    16f0:	0052      	lsls	r2, r2, #1
    16f2:	52d1      	strh	r1, [r2, r3]
    16f4:	e012      	b.n	171c <udi_cdc_ctrl_state_change+0x74>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    16f6:	1c3b      	adds	r3, r7, #0
    16f8:	330e      	adds	r3, #14
    16fa:	781a      	ldrb	r2, [r3, #0]
    16fc:	1c3b      	adds	r3, r7, #0
    16fe:	330e      	adds	r3, #14
    1700:	7819      	ldrb	r1, [r3, #0]
    1702:	4b17      	ldr	r3, [pc, #92]	; (1760 <udi_cdc_ctrl_state_change+0xb8>)
    1704:	0049      	lsls	r1, r1, #1
    1706:	5acb      	ldrh	r3, [r1, r3]
    1708:	b29b      	uxth	r3, r3
    170a:	1d39      	adds	r1, r7, #4
    170c:	8809      	ldrh	r1, [r1, #0]
    170e:	43c9      	mvns	r1, r1
    1710:	b289      	uxth	r1, r1
    1712:	400b      	ands	r3, r1
    1714:	b299      	uxth	r1, r3
    1716:	4b12      	ldr	r3, [pc, #72]	; (1760 <udi_cdc_ctrl_state_change+0xb8>)
    1718:	0052      	lsls	r2, r2, #1
    171a:	52d1      	strh	r1, [r2, r3]
	}
	cpu_irq_restore(flags);
    171c:	68bb      	ldr	r3, [r7, #8]
    171e:	1c18      	adds	r0, r3, #0
    1720:	4b10      	ldr	r3, [pc, #64]	; (1764 <udi_cdc_ctrl_state_change+0xbc>)
    1722:	4798      	blx	r3

	// Send it if possible and state changed
	switch (port) {
    1724:	1c3b      	adds	r3, r7, #0
    1726:	330e      	adds	r3, #14
    1728:	781b      	ldrb	r3, [r3, #0]
    172a:	2b00      	cmp	r3, #0
    172c:	d104      	bne.n	1738 <udi_cdc_ctrl_state_change+0x90>
#define UDI_CDC_PORT_TO_COMM_EP(index, unused) \
	case index: \
		ep_comm = UDI_CDC_COMM_EP_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_COMM_EP, ~)
    172e:	1c3b      	adds	r3, r7, #0
    1730:	330f      	adds	r3, #15
    1732:	2287      	movs	r2, #135	; 0x87
    1734:	701a      	strb	r2, [r3, #0]
    1736:	e004      	b.n	1742 <udi_cdc_ctrl_state_change+0x9a>
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
    1738:	1c3b      	adds	r3, r7, #0
    173a:	330f      	adds	r3, #15
    173c:	2287      	movs	r2, #135	; 0x87
    173e:	701a      	strb	r2, [r3, #0]
		break;
    1740:	46c0      	nop			; (mov r8, r8)
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    1742:	1c3b      	adds	r3, r7, #0
    1744:	330e      	adds	r3, #14
    1746:	781a      	ldrb	r2, [r3, #0]
    1748:	1c3b      	adds	r3, r7, #0
    174a:	330f      	adds	r3, #15
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	1c10      	adds	r0, r2, #0
    1750:	1c19      	adds	r1, r3, #0
    1752:	4b05      	ldr	r3, [pc, #20]	; (1768 <udi_cdc_ctrl_state_change+0xc0>)
    1754:	4798      	blx	r3
}
    1756:	46bd      	mov	sp, r7
    1758:	b004      	add	sp, #16
    175a:	bd80      	pop	{r7, pc}
    175c:	000011b1 	.word	0x000011b1
    1760:	2000664c 	.word	0x2000664c
    1764:	000011f9 	.word	0x000011f9
    1768:	0000176d 	.word	0x0000176d

0000176c <udi_cdc_ctrl_state_notify>:


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    176c:	b5b0      	push	{r4, r5, r7, lr}
    176e:	b086      	sub	sp, #24
    1770:	af02      	add	r7, sp, #8
    1772:	1c0a      	adds	r2, r1, #0
    1774:	1dfb      	adds	r3, r7, #7
    1776:	1c01      	adds	r1, r0, #0
    1778:	7019      	strb	r1, [r3, #0]
    177a:	1dbb      	adds	r3, r7, #6
    177c:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    177e:	1c3b      	adds	r3, r7, #0
    1780:	330f      	adds	r3, #15
    1782:	2200      	movs	r2, #0
    1784:	701a      	strb	r2, [r3, #0]
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    1786:	1c3b      	adds	r3, r7, #0
    1788:	330f      	adds	r3, #15
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	4a25      	ldr	r2, [pc, #148]	; (1824 <udi_cdc_ctrl_state_notify+0xb8>)
    178e:	5cd3      	ldrb	r3, [r2, r3]
    1790:	2201      	movs	r2, #1
    1792:	4053      	eors	r3, r2
    1794:	b2db      	uxtb	r3, r3
    1796:	2b00      	cmp	r3, #0
    1798:	d040      	beq.n	181c <udi_cdc_ctrl_state_notify+0xb0>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    179a:	1c3b      	adds	r3, r7, #0
    179c:	330f      	adds	r3, #15
    179e:	781a      	ldrb	r2, [r3, #0]
    17a0:	4b21      	ldr	r3, [pc, #132]	; (1828 <udi_cdc_ctrl_state_notify+0xbc>)
    17a2:	0052      	lsls	r2, r2, #1
    17a4:	5ad3      	ldrh	r3, [r2, r3]
    17a6:	b299      	uxth	r1, r3
    17a8:	1c3b      	adds	r3, r7, #0
    17aa:	330f      	adds	r3, #15
    17ac:	781a      	ldrb	r2, [r3, #0]
    17ae:	481f      	ldr	r0, [pc, #124]	; (182c <udi_cdc_ctrl_state_notify+0xc0>)
    17b0:	1c13      	adds	r3, r2, #0
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	189b      	adds	r3, r3, r2
    17b6:	005b      	lsls	r3, r3, #1
    17b8:	18c3      	adds	r3, r0, r3
    17ba:	3308      	adds	r3, #8
    17bc:	881b      	ldrh	r3, [r3, #0]
    17be:	4299      	cmp	r1, r3
    17c0:	d02c      	beq.n	181c <udi_cdc_ctrl_state_notify+0xb0>
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    17c2:	1c3b      	adds	r3, r7, #0
    17c4:	330f      	adds	r3, #15
    17c6:	781a      	ldrb	r2, [r3, #0]
    17c8:	1c3b      	adds	r3, r7, #0
    17ca:	330f      	adds	r3, #15
    17cc:	7819      	ldrb	r1, [r3, #0]
    17ce:	4b16      	ldr	r3, [pc, #88]	; (1828 <udi_cdc_ctrl_state_notify+0xbc>)
    17d0:	0049      	lsls	r1, r1, #1
    17d2:	5acb      	ldrh	r3, [r1, r3]
    17d4:	b299      	uxth	r1, r3
    17d6:	4815      	ldr	r0, [pc, #84]	; (182c <udi_cdc_ctrl_state_notify+0xc0>)
    17d8:	1c13      	adds	r3, r2, #0
    17da:	009b      	lsls	r3, r3, #2
    17dc:	189b      	adds	r3, r3, r2
    17de:	005b      	lsls	r3, r3, #1
    17e0:	18c3      	adds	r3, r0, r3
    17e2:	3308      	adds	r3, #8
    17e4:	1c0a      	adds	r2, r1, #0
    17e6:	801a      	strh	r2, [r3, #0]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    17e8:	1c3b      	adds	r3, r7, #0
    17ea:	330f      	adds	r3, #15
    17ec:	781c      	ldrb	r4, [r3, #0]
				udd_ep_run(ep,
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
    17ee:	1c3b      	adds	r3, r7, #0
    17f0:	330f      	adds	r3, #15
    17f2:	781a      	ldrb	r2, [r3, #0]
    17f4:	1c13      	adds	r3, r2, #0
    17f6:	009b      	lsls	r3, r3, #2
    17f8:	189b      	adds	r3, r3, r2
    17fa:	005b      	lsls	r3, r3, #1
    17fc:	4a0b      	ldr	r2, [pc, #44]	; (182c <udi_cdc_ctrl_state_notify+0xc0>)
    17fe:	189b      	adds	r3, r3, r2
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    1800:	1dba      	adds	r2, r7, #6
    1802:	7812      	ldrb	r2, [r2, #0]
    1804:	490a      	ldr	r1, [pc, #40]	; (1830 <udi_cdc_ctrl_state_notify+0xc4>)
    1806:	9100      	str	r1, [sp, #0]
    1808:	1c10      	adds	r0, r2, #0
    180a:	2100      	movs	r1, #0
    180c:	1c1a      	adds	r2, r3, #0
    180e:	230a      	movs	r3, #10
    1810:	4d08      	ldr	r5, [pc, #32]	; (1834 <udi_cdc_ctrl_state_notify+0xc8>)
    1812:	47a8      	blx	r5
    1814:	1c03      	adds	r3, r0, #0
    1816:	1c1a      	adds	r2, r3, #0
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    1818:	4b02      	ldr	r3, [pc, #8]	; (1824 <udi_cdc_ctrl_state_notify+0xb8>)
    181a:	551a      	strb	r2, [r3, r4]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    181c:	46bd      	mov	sp, r7
    181e:	b004      	add	sp, #16
    1820:	bdb0      	pop	{r4, r5, r7, pc}
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	20006648 	.word	0x20006648
    1828:	2000664c 	.word	0x2000664c
    182c:	20006650 	.word	0x20006650
    1830:	00001839 	.word	0x00001839
    1834:	0000793d 	.word	0x0000793d

00001838 <udi_cdc_serial_state_msg_sent>:


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1838:	b580      	push	{r7, lr}
    183a:	b084      	sub	sp, #16
    183c:	af00      	add	r7, sp, #0
    183e:	6039      	str	r1, [r7, #0]
    1840:	1dfb      	adds	r3, r7, #7
    1842:	1c01      	adds	r1, r0, #0
    1844:	7019      	strb	r1, [r3, #0]
    1846:	1dbb      	adds	r3, r7, #6
    1848:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);
	UNUSED(status);

	switch (ep) {
    184a:	1dbb      	adds	r3, r7, #6
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	2b87      	cmp	r3, #135	; 0x87
    1850:	d104      	bne.n	185c <udi_cdc_serial_state_msg_sent+0x24>
#define UDI_CDC_GET_PORT_FROM_COMM_EP(iface, unused) \
	case UDI_CDC_COMM_EP_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_GET_PORT_FROM_COMM_EP, ~)
    1852:	1c3b      	adds	r3, r7, #0
    1854:	330f      	adds	r3, #15
    1856:	2200      	movs	r2, #0
    1858:	701a      	strb	r2, [r3, #0]
    185a:	e004      	b.n	1866 <udi_cdc_serial_state_msg_sent+0x2e>
#undef UDI_CDC_GET_PORT_FROM_COMM_EP
	default:
		port = 0;
    185c:	1c3b      	adds	r3, r7, #0
    185e:	330f      	adds	r3, #15
    1860:	2200      	movs	r2, #0
    1862:	701a      	strb	r2, [r3, #0]
		break;
    1864:	46c0      	nop			; (mov r8, r8)
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    1866:	1c3b      	adds	r3, r7, #0
    1868:	330f      	adds	r3, #15
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	4a1c      	ldr	r2, [pc, #112]	; (18e0 <udi_cdc_serial_state_msg_sent+0xa8>)
    186e:	2100      	movs	r1, #0
    1870:	54d1      	strb	r1, [r2, r3]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    1872:	1c3b      	adds	r3, r7, #0
    1874:	330f      	adds	r3, #15
    1876:	781a      	ldrb	r2, [r3, #0]
    1878:	1c3b      	adds	r3, r7, #0
    187a:	330f      	adds	r3, #15
    187c:	7819      	ldrb	r1, [r3, #0]
    187e:	4b19      	ldr	r3, [pc, #100]	; (18e4 <udi_cdc_serial_state_msg_sent+0xac>)
    1880:	0049      	lsls	r1, r1, #1
    1882:	5acb      	ldrh	r3, [r1, r3]
    1884:	b29b      	uxth	r3, r3
    1886:	217c      	movs	r1, #124	; 0x7c
    1888:	438b      	bics	r3, r1
    188a:	b299      	uxth	r1, r3
    188c:	4b15      	ldr	r3, [pc, #84]	; (18e4 <udi_cdc_serial_state_msg_sent+0xac>)
    188e:	0052      	lsls	r2, r2, #1
    1890:	52d1      	strh	r1, [r2, r3]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    1892:	1c3b      	adds	r3, r7, #0
    1894:	330f      	adds	r3, #15
    1896:	781a      	ldrb	r2, [r3, #0]
    1898:	1c3b      	adds	r3, r7, #0
    189a:	330f      	adds	r3, #15
    189c:	7819      	ldrb	r1, [r3, #0]
    189e:	4812      	ldr	r0, [pc, #72]	; (18e8 <udi_cdc_serial_state_msg_sent+0xb0>)
    18a0:	1c0b      	adds	r3, r1, #0
    18a2:	009b      	lsls	r3, r3, #2
    18a4:	185b      	adds	r3, r3, r1
    18a6:	005b      	lsls	r3, r3, #1
    18a8:	18c3      	adds	r3, r0, r3
    18aa:	3308      	adds	r3, #8
    18ac:	881b      	ldrh	r3, [r3, #0]
    18ae:	217c      	movs	r1, #124	; 0x7c
    18b0:	438b      	bics	r3, r1
    18b2:	b299      	uxth	r1, r3
    18b4:	480c      	ldr	r0, [pc, #48]	; (18e8 <udi_cdc_serial_state_msg_sent+0xb0>)
    18b6:	1c13      	adds	r3, r2, #0
    18b8:	009b      	lsls	r3, r3, #2
    18ba:	189b      	adds	r3, r3, r2
    18bc:	005b      	lsls	r3, r3, #1
    18be:	18c3      	adds	r3, r0, r3
    18c0:	3308      	adds	r3, #8
    18c2:	1c0a      	adds	r2, r1, #0
    18c4:	801a      	strh	r2, [r3, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    18c6:	1c3b      	adds	r3, r7, #0
    18c8:	330f      	adds	r3, #15
    18ca:	781a      	ldrb	r2, [r3, #0]
    18cc:	1dbb      	adds	r3, r7, #6
    18ce:	781b      	ldrb	r3, [r3, #0]
    18d0:	1c10      	adds	r0, r2, #0
    18d2:	1c19      	adds	r1, r3, #0
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <udi_cdc_serial_state_msg_sent+0xb4>)
    18d6:	4798      	blx	r3
}
    18d8:	46bd      	mov	sp, r7
    18da:	b004      	add	sp, #16
    18dc:	bd80      	pop	{r7, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	20006648 	.word	0x20006648
    18e4:	2000664c 	.word	0x2000664c
    18e8:	20006650 	.word	0x20006650
    18ec:	0000176d 	.word	0x0000176d

000018f0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    18f0:	b590      	push	{r4, r7, lr}
    18f2:	b089      	sub	sp, #36	; 0x24
    18f4:	af02      	add	r7, sp, #8
    18f6:	1c02      	adds	r2, r0, #0
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    18fc:	1c3b      	adds	r3, r7, #0
    18fe:	3316      	adds	r3, #22
    1900:	2200      	movs	r2, #0
    1902:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    1904:	4b45      	ldr	r3, [pc, #276]	; (1a1c <udi_cdc_rx_start+0x12c>)
    1906:	4798      	blx	r3
    1908:	1c03      	adds	r3, r0, #0
    190a:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    190c:	1c3b      	adds	r3, r7, #0
    190e:	3316      	adds	r3, #22
    1910:	781a      	ldrb	r2, [r3, #0]
    1912:	1c3b      	adds	r3, r7, #0
    1914:	330f      	adds	r3, #15
    1916:	4942      	ldr	r1, [pc, #264]	; (1a20 <udi_cdc_rx_start+0x130>)
    1918:	5c8a      	ldrb	r2, [r1, r2]
    191a:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    191c:	1c3b      	adds	r3, r7, #0
    191e:	3316      	adds	r3, #22
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	4a40      	ldr	r2, [pc, #256]	; (1a24 <udi_cdc_rx_start+0x134>)
    1924:	5cd3      	ldrb	r3, [r2, r3]
    1926:	b2db      	uxtb	r3, r3
    1928:	2b00      	cmp	r3, #0
    192a:	d113      	bne.n	1954 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    192c:	1c3b      	adds	r3, r7, #0
    192e:	3316      	adds	r3, #22
    1930:	781a      	ldrb	r2, [r3, #0]
    1932:	4b3d      	ldr	r3, [pc, #244]	; (1a28 <udi_cdc_rx_start+0x138>)
    1934:	0052      	lsls	r2, r2, #1
    1936:	5ad3      	ldrh	r3, [r2, r3]
    1938:	b29a      	uxth	r2, r3
    193a:	1c3b      	adds	r3, r7, #0
    193c:	3316      	adds	r3, #22
    193e:	7818      	ldrb	r0, [r3, #0]
    1940:	1c3b      	adds	r3, r7, #0
    1942:	330f      	adds	r3, #15
    1944:	7819      	ldrb	r1, [r3, #0]
    1946:	4b39      	ldr	r3, [pc, #228]	; (1a2c <udi_cdc_rx_start+0x13c>)
    1948:	0040      	lsls	r0, r0, #1
    194a:	1841      	adds	r1, r0, r1
    194c:	0049      	lsls	r1, r1, #1
    194e:	5acb      	ldrh	r3, [r1, r3]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    1950:	429a      	cmp	r2, r3
    1952:	d205      	bcs.n	1960 <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    1954:	693b      	ldr	r3, [r7, #16]
    1956:	1c18      	adds	r0, r3, #0
    1958:	4b35      	ldr	r3, [pc, #212]	; (1a30 <udi_cdc_rx_start+0x140>)
    195a:	4798      	blx	r3
		return false;
    195c:	2300      	movs	r3, #0
    195e:	e058      	b.n	1a12 <udi_cdc_rx_start+0x122>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    1960:	1c3b      	adds	r3, r7, #0
    1962:	3316      	adds	r3, #22
    1964:	781a      	ldrb	r2, [r3, #0]
    1966:	4b30      	ldr	r3, [pc, #192]	; (1a28 <udi_cdc_rx_start+0x138>)
    1968:	0052      	lsls	r2, r2, #1
    196a:	2100      	movs	r1, #0
    196c:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    196e:	1c3b      	adds	r3, r7, #0
    1970:	3316      	adds	r3, #22
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	1c3a      	adds	r2, r7, #0
    1976:	320f      	adds	r2, #15
    1978:	7812      	ldrb	r2, [r2, #0]
    197a:	4251      	negs	r1, r2
    197c:	414a      	adcs	r2, r1
    197e:	b2d2      	uxtb	r2, r2
    1980:	1c11      	adds	r1, r2, #0
    1982:	4a27      	ldr	r2, [pc, #156]	; (1a20 <udi_cdc_rx_start+0x130>)
    1984:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    1986:	1c3b      	adds	r3, r7, #0
    1988:	3316      	adds	r3, #22
    198a:	781b      	ldrb	r3, [r3, #0]
    198c:	4a25      	ldr	r2, [pc, #148]	; (1a24 <udi_cdc_rx_start+0x134>)
    198e:	2101      	movs	r1, #1
    1990:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    1992:	693b      	ldr	r3, [r7, #16]
    1994:	1c18      	adds	r0, r3, #0
    1996:	4b26      	ldr	r3, [pc, #152]	; (1a30 <udi_cdc_rx_start+0x140>)
    1998:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    199a:	1c3b      	adds	r3, r7, #0
    199c:	3316      	adds	r3, #22
    199e:	781b      	ldrb	r3, [r3, #0]
    19a0:	1c18      	adds	r0, r3, #0
    19a2:	4b24      	ldr	r3, [pc, #144]	; (1a34 <udi_cdc_rx_start+0x144>)
    19a4:	4798      	blx	r3
    19a6:	1c03      	adds	r3, r0, #0
    19a8:	2b00      	cmp	r3, #0
    19aa:	d005      	beq.n	19b8 <udi_cdc_rx_start+0xc8>
		UDI_CDC_RX_NOTIFY(port);
    19ac:	1c3b      	adds	r3, r7, #0
    19ae:	3316      	adds	r3, #22
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	1c18      	adds	r0, r3, #0
    19b4:	4b20      	ldr	r3, [pc, #128]	; (1a38 <udi_cdc_rx_start+0x148>)
    19b6:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
    19b8:	1c3b      	adds	r3, r7, #0
    19ba:	3316      	adds	r3, #22
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	2b00      	cmp	r3, #0
    19c0:	d104      	bne.n	19cc <udi_cdc_rx_start+0xdc>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    19c2:	1c3b      	adds	r3, r7, #0
    19c4:	3317      	adds	r3, #23
    19c6:	2205      	movs	r2, #5
    19c8:	701a      	strb	r2, [r3, #0]
    19ca:	e004      	b.n	19d6 <udi_cdc_rx_start+0xe6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    19cc:	1c3b      	adds	r3, r7, #0
    19ce:	3317      	adds	r3, #23
    19d0:	2205      	movs	r2, #5
    19d2:	701a      	strb	r2, [r3, #0]
		break;
    19d4:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    19d6:	1c3b      	adds	r3, r7, #0
    19d8:	3316      	adds	r3, #22
    19da:	7819      	ldrb	r1, [r3, #0]
    19dc:	1c3b      	adds	r3, r7, #0
    19de:	330f      	adds	r3, #15
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	1c1a      	adds	r2, r3, #0
    19e4:	0092      	lsls	r2, r2, #2
    19e6:	18d2      	adds	r2, r2, r3
    19e8:	0193      	lsls	r3, r2, #6
    19ea:	1c1a      	adds	r2, r3, #0
    19ec:	1c0b      	adds	r3, r1, #0
    19ee:	009b      	lsls	r3, r3, #2
    19f0:	185b      	adds	r3, r3, r1
    19f2:	01db      	lsls	r3, r3, #7
    19f4:	18d2      	adds	r2, r2, r3
    19f6:	4b11      	ldr	r3, [pc, #68]	; (1a3c <udi_cdc_rx_start+0x14c>)
    19f8:	18d2      	adds	r2, r2, r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    19fa:	1c3b      	adds	r3, r7, #0
    19fc:	3317      	adds	r3, #23
    19fe:	7819      	ldrb	r1, [r3, #0]
    1a00:	23a0      	movs	r3, #160	; 0xa0
    1a02:	005b      	lsls	r3, r3, #1
    1a04:	480e      	ldr	r0, [pc, #56]	; (1a40 <udi_cdc_rx_start+0x150>)
    1a06:	9000      	str	r0, [sp, #0]
    1a08:	1c08      	adds	r0, r1, #0
    1a0a:	2101      	movs	r1, #1
    1a0c:	4c0d      	ldr	r4, [pc, #52]	; (1a44 <udi_cdc_rx_start+0x154>)
    1a0e:	47a0      	blx	r4
    1a10:	1c03      	adds	r3, r0, #0
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    1a12:	1c18      	adds	r0, r3, #0
    1a14:	46bd      	mov	sp, r7
    1a16:	b007      	add	sp, #28
    1a18:	bd90      	pop	{r4, r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	000011b1 	.word	0x000011b1
    1a20:	200068e4 	.word	0x200068e4
    1a24:	200068ec 	.word	0x200068ec
    1a28:	200068e8 	.word	0x200068e8
    1a2c:	200068e0 	.word	0x200068e0
    1a30:	000011f9 	.word	0x000011f9
    1a34:	00001eb1 	.word	0x00001eb1
    1a38:	0000ac51 	.word	0x0000ac51
    1a3c:	20006660 	.word	0x20006660
    1a40:	00001a49 	.word	0x00001a49
    1a44:	0000793d 	.word	0x0000793d

00001a48 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1a48:	b590      	push	{r4, r7, lr}
    1a4a:	b087      	sub	sp, #28
    1a4c:	af02      	add	r7, sp, #8
    1a4e:	6039      	str	r1, [r7, #0]
    1a50:	1dfb      	adds	r3, r7, #7
    1a52:	1c01      	adds	r1, r0, #0
    1a54:	7019      	strb	r1, [r3, #0]
    1a56:	1dbb      	adds	r3, r7, #6
    1a58:	701a      	strb	r2, [r3, #0]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    1a5a:	1dbb      	adds	r3, r7, #6
    1a5c:	781b      	ldrb	r3, [r3, #0]
    1a5e:	2b05      	cmp	r3, #5
    1a60:	d104      	bne.n	1a6c <udi_cdc_data_received+0x24>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    1a62:	1c3b      	adds	r3, r7, #0
    1a64:	330f      	adds	r3, #15
    1a66:	2200      	movs	r2, #0
    1a68:	701a      	strb	r2, [r3, #0]
    1a6a:	e004      	b.n	1a76 <udi_cdc_data_received+0x2e>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    1a6c:	1c3b      	adds	r3, r7, #0
    1a6e:	330f      	adds	r3, #15
    1a70:	2200      	movs	r2, #0
    1a72:	701a      	strb	r2, [r3, #0]
		break;
    1a74:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1a76:	1dfb      	adds	r3, r7, #7
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d000      	beq.n	1a80 <udi_cdc_data_received+0x38>
		// Abort reception
		return;
    1a7e:	e044      	b.n	1b0a <udi_cdc_data_received+0xc2>
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    1a80:	1c3b      	adds	r3, r7, #0
    1a82:	330f      	adds	r3, #15
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	4a22      	ldr	r2, [pc, #136]	; (1b10 <udi_cdc_data_received+0xc8>)
    1a88:	5cd3      	ldrb	r3, [r2, r3]
    1a8a:	b2db      	uxtb	r3, r3
    1a8c:	425a      	negs	r2, r3
    1a8e:	4153      	adcs	r3, r2
    1a90:	b2da      	uxtb	r2, r3
    1a92:	1c3b      	adds	r3, r7, #0
    1a94:	330e      	adds	r3, #14
    1a96:	701a      	strb	r2, [r3, #0]
	if (!n) {
    1a98:	683b      	ldr	r3, [r7, #0]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d11c      	bne.n	1ad8 <udi_cdc_data_received+0x90>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    1a9e:	1c3b      	adds	r3, r7, #0
    1aa0:	330f      	adds	r3, #15
    1aa2:	7819      	ldrb	r1, [r3, #0]
    1aa4:	1c3b      	adds	r3, r7, #0
    1aa6:	330e      	adds	r3, #14
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	1c1a      	adds	r2, r3, #0
    1aac:	0092      	lsls	r2, r2, #2
    1aae:	18d2      	adds	r2, r2, r3
    1ab0:	0193      	lsls	r3, r2, #6
    1ab2:	1c1a      	adds	r2, r3, #0
    1ab4:	1c0b      	adds	r3, r1, #0
    1ab6:	009b      	lsls	r3, r3, #2
    1ab8:	185b      	adds	r3, r3, r1
    1aba:	01db      	lsls	r3, r3, #7
    1abc:	18d2      	adds	r2, r2, r3
    1abe:	4b15      	ldr	r3, [pc, #84]	; (1b14 <udi_cdc_data_received+0xcc>)
    1ac0:	18d2      	adds	r2, r2, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    1ac2:	1dbb      	adds	r3, r7, #6
    1ac4:	7819      	ldrb	r1, [r3, #0]
    1ac6:	23a0      	movs	r3, #160	; 0xa0
    1ac8:	005b      	lsls	r3, r3, #1
    1aca:	4813      	ldr	r0, [pc, #76]	; (1b18 <udi_cdc_data_received+0xd0>)
    1acc:	9000      	str	r0, [sp, #0]
    1ace:	1c08      	adds	r0, r1, #0
    1ad0:	2101      	movs	r1, #1
    1ad2:	4c12      	ldr	r4, [pc, #72]	; (1b1c <udi_cdc_data_received+0xd4>)
    1ad4:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    1ad6:	e018      	b.n	1b0a <udi_cdc_data_received+0xc2>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    1ad8:	1c3b      	adds	r3, r7, #0
    1ada:	330f      	adds	r3, #15
    1adc:	7818      	ldrb	r0, [r3, #0]
    1ade:	1c3b      	adds	r3, r7, #0
    1ae0:	330e      	adds	r3, #14
    1ae2:	781a      	ldrb	r2, [r3, #0]
    1ae4:	683b      	ldr	r3, [r7, #0]
    1ae6:	b299      	uxth	r1, r3
    1ae8:	4b0d      	ldr	r3, [pc, #52]	; (1b20 <udi_cdc_data_received+0xd8>)
    1aea:	0040      	lsls	r0, r0, #1
    1aec:	1882      	adds	r2, r0, r2
    1aee:	0052      	lsls	r2, r2, #1
    1af0:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    1af2:	1c3b      	adds	r3, r7, #0
    1af4:	330f      	adds	r3, #15
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	4a0a      	ldr	r2, [pc, #40]	; (1b24 <udi_cdc_data_received+0xdc>)
    1afa:	2100      	movs	r1, #0
    1afc:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    1afe:	1c3b      	adds	r3, r7, #0
    1b00:	330f      	adds	r3, #15
    1b02:	781b      	ldrb	r3, [r3, #0]
    1b04:	1c18      	adds	r0, r3, #0
    1b06:	4b08      	ldr	r3, [pc, #32]	; (1b28 <udi_cdc_data_received+0xe0>)
    1b08:	4798      	blx	r3
}
    1b0a:	46bd      	mov	sp, r7
    1b0c:	b005      	add	sp, #20
    1b0e:	bd90      	pop	{r4, r7, pc}
    1b10:	200068e4 	.word	0x200068e4
    1b14:	20006660 	.word	0x20006660
    1b18:	00001a49 	.word	0x00001a49
    1b1c:	0000793d 	.word	0x0000793d
    1b20:	200068e0 	.word	0x200068e0
    1b24:	200068ec 	.word	0x200068ec
    1b28:	000018f1 	.word	0x000018f1

00001b2c <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	b084      	sub	sp, #16
    1b30:	af00      	add	r7, sp, #0
    1b32:	6039      	str	r1, [r7, #0]
    1b34:	1dfb      	adds	r3, r7, #7
    1b36:	1c01      	adds	r1, r0, #0
    1b38:	7019      	strb	r1, [r3, #0]
    1b3a:	1dbb      	adds	r3, r7, #6
    1b3c:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    1b3e:	1dbb      	adds	r3, r7, #6
    1b40:	781b      	ldrb	r3, [r3, #0]
    1b42:	2b86      	cmp	r3, #134	; 0x86
    1b44:	d104      	bne.n	1b50 <udi_cdc_data_sent+0x24>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    1b46:	1c3b      	adds	r3, r7, #0
    1b48:	330f      	adds	r3, #15
    1b4a:	2200      	movs	r2, #0
    1b4c:	701a      	strb	r2, [r3, #0]
    1b4e:	e004      	b.n	1b5a <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    1b50:	1c3b      	adds	r3, r7, #0
    1b52:	330f      	adds	r3, #15
    1b54:	2200      	movs	r2, #0
    1b56:	701a      	strb	r2, [r3, #0]
		break;
    1b58:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1b5a:	1dfb      	adds	r3, r7, #7
    1b5c:	781b      	ldrb	r3, [r3, #0]
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d000      	beq.n	1b64 <udi_cdc_data_sent+0x38>
		// Abort transfer
		return;
    1b62:	e024      	b.n	1bae <udi_cdc_data_sent+0x82>
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    1b64:	1c3b      	adds	r3, r7, #0
    1b66:	330f      	adds	r3, #15
    1b68:	7819      	ldrb	r1, [r3, #0]
    1b6a:	1c3b      	adds	r3, r7, #0
    1b6c:	330f      	adds	r3, #15
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	4a10      	ldr	r2, [pc, #64]	; (1bb4 <udi_cdc_data_sent+0x88>)
    1b72:	5cd3      	ldrb	r3, [r2, r3]
    1b74:	b2db      	uxtb	r3, r3
    1b76:	425a      	negs	r2, r3
    1b78:	4153      	adcs	r3, r2
    1b7a:	b2db      	uxtb	r3, r3
    1b7c:	1c1a      	adds	r2, r3, #0
    1b7e:	4b0e      	ldr	r3, [pc, #56]	; (1bb8 <udi_cdc_data_sent+0x8c>)
    1b80:	0049      	lsls	r1, r1, #1
    1b82:	188a      	adds	r2, r1, r2
    1b84:	0052      	lsls	r2, r2, #1
    1b86:	2100      	movs	r1, #0
    1b88:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    1b8a:	1c3b      	adds	r3, r7, #0
    1b8c:	330f      	adds	r3, #15
    1b8e:	781b      	ldrb	r3, [r3, #0]
    1b90:	4a0a      	ldr	r2, [pc, #40]	; (1bbc <udi_cdc_data_sent+0x90>)
    1b92:	2100      	movs	r1, #0
    1b94:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    1b96:	1c3b      	adds	r3, r7, #0
    1b98:	330f      	adds	r3, #15
    1b9a:	781b      	ldrb	r3, [r3, #0]
    1b9c:	4a08      	ldr	r2, [pc, #32]	; (1bc0 <udi_cdc_data_sent+0x94>)
    1b9e:	2100      	movs	r1, #0
    1ba0:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    1ba2:	1c3b      	adds	r3, r7, #0
    1ba4:	330f      	adds	r3, #15
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	1c18      	adds	r0, r3, #0
    1baa:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <udi_cdc_data_sent+0x98>)
    1bac:	4798      	blx	r3
}
    1bae:	46bd      	mov	sp, r7
    1bb0:	b004      	add	sp, #16
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	20006b74 	.word	0x20006b74
    1bb8:	20006b70 	.word	0x20006b70
    1bbc:	20006b80 	.word	0x20006b80
    1bc0:	20006b7c 	.word	0x20006b7c
    1bc4:	00001bc9 	.word	0x00001bc9

00001bc8 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    1bc8:	b590      	push	{r4, r7, lr}
    1bca:	b089      	sub	sp, #36	; 0x24
    1bcc:	af02      	add	r7, sp, #8
    1bce:	1c02      	adds	r2, r0, #0
    1bd0:	1dfb      	adds	r3, r7, #7
    1bd2:	701a      	strb	r2, [r3, #0]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1bd4:	1c3b      	adds	r3, r7, #0
    1bd6:	3315      	adds	r3, #21
    1bd8:	2200      	movs	r2, #0
    1bda:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    1bdc:	1c3b      	adds	r3, r7, #0
    1bde:	3315      	adds	r3, #21
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	4a7e      	ldr	r2, [pc, #504]	; (1ddc <udi_cdc_tx_send+0x214>)
    1be4:	5cd3      	ldrb	r3, [r2, r3]
    1be6:	b2db      	uxtb	r3, r3
    1be8:	2b00      	cmp	r3, #0
    1bea:	d000      	beq.n	1bee <udi_cdc_tx_send+0x26>
		return; // Already on going or wait next SOF to send next data
    1bec:	e0f3      	b.n	1dd6 <udi_cdc_tx_send+0x20e>
	}
	if (udd_is_high_speed()) {
    1bee:	4b7c      	ldr	r3, [pc, #496]	; (1de0 <udi_cdc_tx_send+0x218>)
    1bf0:	4798      	blx	r3
    1bf2:	1c03      	adds	r3, r0, #0
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d00b      	beq.n	1c10 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    1bf8:	1c3b      	adds	r3, r7, #0
    1bfa:	3315      	adds	r3, #21
    1bfc:	781a      	ldrb	r2, [r3, #0]
    1bfe:	4b79      	ldr	r3, [pc, #484]	; (1de4 <udi_cdc_tx_send+0x21c>)
    1c00:	0052      	lsls	r2, r2, #1
    1c02:	5ad4      	ldrh	r4, [r2, r3]
    1c04:	4b78      	ldr	r3, [pc, #480]	; (1de8 <udi_cdc_tx_send+0x220>)
    1c06:	4798      	blx	r3
    1c08:	1c03      	adds	r3, r0, #0
    1c0a:	429c      	cmp	r4, r3
    1c0c:	d10c      	bne.n	1c28 <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    1c0e:	e0e2      	b.n	1dd6 <udi_cdc_tx_send+0x20e>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    1c10:	1c3b      	adds	r3, r7, #0
    1c12:	3315      	adds	r3, #21
    1c14:	781a      	ldrb	r2, [r3, #0]
    1c16:	4b73      	ldr	r3, [pc, #460]	; (1de4 <udi_cdc_tx_send+0x21c>)
    1c18:	0052      	lsls	r2, r2, #1
    1c1a:	5ad4      	ldrh	r4, [r2, r3]
    1c1c:	4b73      	ldr	r3, [pc, #460]	; (1dec <udi_cdc_tx_send+0x224>)
    1c1e:	4798      	blx	r3
    1c20:	1c03      	adds	r3, r0, #0
    1c22:	429c      	cmp	r4, r3
    1c24:	d100      	bne.n	1c28 <udi_cdc_tx_send+0x60>
			return; // Wait next SOF to send next data
    1c26:	e0d6      	b.n	1dd6 <udi_cdc_tx_send+0x20e>
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    1c28:	4b71      	ldr	r3, [pc, #452]	; (1df0 <udi_cdc_tx_send+0x228>)
    1c2a:	4798      	blx	r3
    1c2c:	1c03      	adds	r3, r0, #0
    1c2e:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    1c30:	1c3b      	adds	r3, r7, #0
    1c32:	3315      	adds	r3, #21
    1c34:	781a      	ldrb	r2, [r3, #0]
    1c36:	1c3b      	adds	r3, r7, #0
    1c38:	3317      	adds	r3, #23
    1c3a:	496e      	ldr	r1, [pc, #440]	; (1df4 <udi_cdc_tx_send+0x22c>)
    1c3c:	5c8a      	ldrb	r2, [r1, r2]
    1c3e:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    1c40:	1c3b      	adds	r3, r7, #0
    1c42:	3315      	adds	r3, #21
    1c44:	7819      	ldrb	r1, [r3, #0]
    1c46:	1c3b      	adds	r3, r7, #0
    1c48:	3317      	adds	r3, #23
    1c4a:	781a      	ldrb	r2, [r3, #0]
    1c4c:	4b6a      	ldr	r3, [pc, #424]	; (1df8 <udi_cdc_tx_send+0x230>)
    1c4e:	0049      	lsls	r1, r1, #1
    1c50:	188a      	adds	r2, r1, r2
    1c52:	0052      	lsls	r2, r2, #1
    1c54:	5ad3      	ldrh	r3, [r2, r3]
    1c56:	2b00      	cmp	r3, #0
    1c58:	d120      	bne.n	1c9c <udi_cdc_tx_send+0xd4>
		sof_zlp_counter++;
    1c5a:	4b68      	ldr	r3, [pc, #416]	; (1dfc <udi_cdc_tx_send+0x234>)
    1c5c:	881b      	ldrh	r3, [r3, #0]
    1c5e:	3301      	adds	r3, #1
    1c60:	b29a      	uxth	r2, r3
    1c62:	4b66      	ldr	r3, [pc, #408]	; (1dfc <udi_cdc_tx_send+0x234>)
    1c64:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    1c66:	4b5e      	ldr	r3, [pc, #376]	; (1de0 <udi_cdc_tx_send+0x218>)
    1c68:	4798      	blx	r3
    1c6a:	1c03      	adds	r3, r0, #0
    1c6c:	2201      	movs	r2, #1
    1c6e:	4053      	eors	r3, r2
    1c70:	b2db      	uxtb	r3, r3
    1c72:	2b00      	cmp	r3, #0
    1c74:	d003      	beq.n	1c7e <udi_cdc_tx_send+0xb6>
    1c76:	4b61      	ldr	r3, [pc, #388]	; (1dfc <udi_cdc_tx_send+0x234>)
    1c78:	881b      	ldrh	r3, [r3, #0]
    1c7a:	2b63      	cmp	r3, #99	; 0x63
    1c7c:	d909      	bls.n	1c92 <udi_cdc_tx_send+0xca>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    1c7e:	4b58      	ldr	r3, [pc, #352]	; (1de0 <udi_cdc_tx_send+0x218>)
    1c80:	4798      	blx	r3
    1c82:	1c03      	adds	r3, r0, #0
    1c84:	2b00      	cmp	r3, #0
    1c86:	d009      	beq.n	1c9c <udi_cdc_tx_send+0xd4>
    1c88:	4b5c      	ldr	r3, [pc, #368]	; (1dfc <udi_cdc_tx_send+0x234>)
    1c8a:	881a      	ldrh	r2, [r3, #0]
    1c8c:	4b5c      	ldr	r3, [pc, #368]	; (1e00 <udi_cdc_tx_send+0x238>)
    1c8e:	429a      	cmp	r2, r3
    1c90:	d804      	bhi.n	1c9c <udi_cdc_tx_send+0xd4>
			cpu_irq_restore(flags);
    1c92:	693b      	ldr	r3, [r7, #16]
    1c94:	1c18      	adds	r0, r3, #0
    1c96:	4b5b      	ldr	r3, [pc, #364]	; (1e04 <udi_cdc_tx_send+0x23c>)
    1c98:	4798      	blx	r3
			return;
    1c9a:	e09c      	b.n	1dd6 <udi_cdc_tx_send+0x20e>
		}
	}
	sof_zlp_counter = 0;
    1c9c:	4b57      	ldr	r3, [pc, #348]	; (1dfc <udi_cdc_tx_send+0x234>)
    1c9e:	2200      	movs	r2, #0
    1ca0:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    1ca2:	1c3b      	adds	r3, r7, #0
    1ca4:	3315      	adds	r3, #21
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	4a57      	ldr	r2, [pc, #348]	; (1e08 <udi_cdc_tx_send+0x240>)
    1caa:	5cd3      	ldrb	r3, [r2, r3]
    1cac:	b2db      	uxtb	r3, r3
    1cae:	2201      	movs	r2, #1
    1cb0:	4053      	eors	r3, r2
    1cb2:	b2db      	uxtb	r3, r3
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d00c      	beq.n	1cd2 <udi_cdc_tx_send+0x10a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    1cb8:	1c3b      	adds	r3, r7, #0
    1cba:	3315      	adds	r3, #21
    1cbc:	781b      	ldrb	r3, [r3, #0]
    1cbe:	1c3a      	adds	r2, r7, #0
    1cc0:	3217      	adds	r2, #23
    1cc2:	7812      	ldrb	r2, [r2, #0]
    1cc4:	4251      	negs	r1, r2
    1cc6:	414a      	adcs	r2, r1
    1cc8:	b2d2      	uxtb	r2, r2
    1cca:	1c11      	adds	r1, r2, #0
    1ccc:	4a49      	ldr	r2, [pc, #292]	; (1df4 <udi_cdc_tx_send+0x22c>)
    1cce:	54d1      	strb	r1, [r2, r3]
    1cd0:	e008      	b.n	1ce4 <udi_cdc_tx_send+0x11c>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    1cd2:	1c3b      	adds	r3, r7, #0
    1cd4:	3317      	adds	r3, #23
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	425a      	negs	r2, r3
    1cda:	4153      	adcs	r3, r2
    1cdc:	b2da      	uxtb	r2, r3
    1cde:	1c3b      	adds	r3, r7, #0
    1ce0:	3317      	adds	r3, #23
    1ce2:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    1ce4:	1c3b      	adds	r3, r7, #0
    1ce6:	3315      	adds	r3, #21
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	4a3c      	ldr	r2, [pc, #240]	; (1ddc <udi_cdc_tx_send+0x214>)
    1cec:	2101      	movs	r1, #1
    1cee:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    1cf0:	693b      	ldr	r3, [r7, #16]
    1cf2:	1c18      	adds	r0, r3, #0
    1cf4:	4b43      	ldr	r3, [pc, #268]	; (1e04 <udi_cdc_tx_send+0x23c>)
    1cf6:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    1cf8:	1c3b      	adds	r3, r7, #0
    1cfa:	3315      	adds	r3, #21
    1cfc:	7819      	ldrb	r1, [r3, #0]
    1cfe:	1c3b      	adds	r3, r7, #0
    1d00:	3317      	adds	r3, #23
    1d02:	781a      	ldrb	r2, [r3, #0]
    1d04:	4b3c      	ldr	r3, [pc, #240]	; (1df8 <udi_cdc_tx_send+0x230>)
    1d06:	0049      	lsls	r1, r1, #1
    1d08:	188a      	adds	r2, r1, r2
    1d0a:	0052      	lsls	r2, r2, #1
    1d0c:	5ad2      	ldrh	r2, [r2, r3]
    1d0e:	1c3b      	adds	r3, r7, #0
    1d10:	330f      	adds	r3, #15
    1d12:	3a41      	subs	r2, #65	; 0x41
    1d14:	3aff      	subs	r2, #255	; 0xff
    1d16:	1e51      	subs	r1, r2, #1
    1d18:	418a      	sbcs	r2, r1
    1d1a:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    1d1c:	1c3b      	adds	r3, r7, #0
    1d1e:	330f      	adds	r3, #15
    1d20:	781b      	ldrb	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d01a      	beq.n	1d5c <udi_cdc_tx_send+0x194>
		if (udd_is_high_speed()) {
    1d26:	4b2e      	ldr	r3, [pc, #184]	; (1de0 <udi_cdc_tx_send+0x218>)
    1d28:	4798      	blx	r3
    1d2a:	1c03      	adds	r3, r0, #0
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d00a      	beq.n	1d46 <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    1d30:	1c3b      	adds	r3, r7, #0
    1d32:	3315      	adds	r3, #21
    1d34:	781c      	ldrb	r4, [r3, #0]
    1d36:	4b2c      	ldr	r3, [pc, #176]	; (1de8 <udi_cdc_tx_send+0x220>)
    1d38:	4798      	blx	r3
    1d3a:	1c03      	adds	r3, r0, #0
    1d3c:	1c19      	adds	r1, r3, #0
    1d3e:	4b29      	ldr	r3, [pc, #164]	; (1de4 <udi_cdc_tx_send+0x21c>)
    1d40:	0062      	lsls	r2, r4, #1
    1d42:	52d1      	strh	r1, [r2, r3]
    1d44:	e011      	b.n	1d6a <udi_cdc_tx_send+0x1a2>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    1d46:	1c3b      	adds	r3, r7, #0
    1d48:	3315      	adds	r3, #21
    1d4a:	781c      	ldrb	r4, [r3, #0]
    1d4c:	4b27      	ldr	r3, [pc, #156]	; (1dec <udi_cdc_tx_send+0x224>)
    1d4e:	4798      	blx	r3
    1d50:	1c03      	adds	r3, r0, #0
    1d52:	1c19      	adds	r1, r3, #0
    1d54:	4b23      	ldr	r3, [pc, #140]	; (1de4 <udi_cdc_tx_send+0x21c>)
    1d56:	0062      	lsls	r2, r4, #1
    1d58:	52d1      	strh	r1, [r2, r3]
    1d5a:	e006      	b.n	1d6a <udi_cdc_tx_send+0x1a2>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    1d5c:	1c3b      	adds	r3, r7, #0
    1d5e:	3315      	adds	r3, #21
    1d60:	781a      	ldrb	r2, [r3, #0]
    1d62:	4b20      	ldr	r3, [pc, #128]	; (1de4 <udi_cdc_tx_send+0x21c>)
    1d64:	0052      	lsls	r2, r2, #1
    1d66:	2100      	movs	r1, #0
    1d68:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    1d6a:	1c3b      	adds	r3, r7, #0
    1d6c:	3315      	adds	r3, #21
    1d6e:	781b      	ldrb	r3, [r3, #0]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d104      	bne.n	1d7e <udi_cdc_tx_send+0x1b6>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    1d74:	1c3b      	adds	r3, r7, #0
    1d76:	3316      	adds	r3, #22
    1d78:	2286      	movs	r2, #134	; 0x86
    1d7a:	701a      	strb	r2, [r3, #0]
    1d7c:	e004      	b.n	1d88 <udi_cdc_tx_send+0x1c0>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    1d7e:	1c3b      	adds	r3, r7, #0
    1d80:	3316      	adds	r3, #22
    1d82:	2286      	movs	r2, #134	; 0x86
    1d84:	701a      	strb	r2, [r3, #0]
		break;
    1d86:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    1d88:	1c3b      	adds	r3, r7, #0
    1d8a:	3315      	adds	r3, #21
    1d8c:	7819      	ldrb	r1, [r3, #0]
    1d8e:	1c3b      	adds	r3, r7, #0
    1d90:	3317      	adds	r3, #23
    1d92:	781b      	ldrb	r3, [r3, #0]
    1d94:	1c1a      	adds	r2, r3, #0
    1d96:	0092      	lsls	r2, r2, #2
    1d98:	18d2      	adds	r2, r2, r3
    1d9a:	0193      	lsls	r3, r2, #6
    1d9c:	1c1a      	adds	r2, r3, #0
    1d9e:	1c0b      	adds	r3, r1, #0
    1da0:	009b      	lsls	r3, r3, #2
    1da2:	185b      	adds	r3, r3, r1
    1da4:	01db      	lsls	r3, r3, #7
    1da6:	18d2      	adds	r2, r2, r3
    1da8:	4b18      	ldr	r3, [pc, #96]	; (1e0c <udi_cdc_tx_send+0x244>)
    1daa:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    1dac:	1c3b      	adds	r3, r7, #0
    1dae:	3315      	adds	r3, #21
    1db0:	7818      	ldrb	r0, [r3, #0]
    1db2:	1c3b      	adds	r3, r7, #0
    1db4:	3317      	adds	r3, #23
    1db6:	7819      	ldrb	r1, [r3, #0]
    1db8:	4b0f      	ldr	r3, [pc, #60]	; (1df8 <udi_cdc_tx_send+0x230>)
    1dba:	0040      	lsls	r0, r0, #1
    1dbc:	1841      	adds	r1, r0, r1
    1dbe:	0049      	lsls	r1, r1, #1
    1dc0:	5acb      	ldrh	r3, [r1, r3]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    1dc2:	1c39      	adds	r1, r7, #0
    1dc4:	3116      	adds	r1, #22
    1dc6:	7808      	ldrb	r0, [r1, #0]
    1dc8:	1c39      	adds	r1, r7, #0
    1dca:	310f      	adds	r1, #15
    1dcc:	7809      	ldrb	r1, [r1, #0]
    1dce:	4c10      	ldr	r4, [pc, #64]	; (1e10 <udi_cdc_tx_send+0x248>)
    1dd0:	9400      	str	r4, [sp, #0]
    1dd2:	4c10      	ldr	r4, [pc, #64]	; (1e14 <udi_cdc_tx_send+0x24c>)
    1dd4:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    1dd6:	46bd      	mov	sp, r7
    1dd8:	b007      	add	sp, #28
    1dda:	bd90      	pop	{r4, r7, pc}
    1ddc:	20006b7c 	.word	0x20006b7c
    1de0:	000074ed 	.word	0x000074ed
    1de4:	20006b78 	.word	0x20006b78
    1de8:	00007515 	.word	0x00007515
    1dec:	000074f9 	.word	0x000074f9
    1df0:	000011b1 	.word	0x000011b1
    1df4:	20006b74 	.word	0x20006b74
    1df8:	20006b70 	.word	0x20006b70
    1dfc:	20006b86 	.word	0x20006b86
    1e00:	0000031f 	.word	0x0000031f
    1e04:	000011f9 	.word	0x000011f9
    1e08:	20006b80 	.word	0x20006b80
    1e0c:	200068f0 	.word	0x200068f0
    1e10:	00001b2d 	.word	0x00001b2d
    1e14:	0000793d 	.word	0x0000793d

00001e18 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	af00      	add	r7, sp, #0
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    1e1c:	2000      	movs	r0, #0
    1e1e:	2101      	movs	r1, #1
    1e20:	2240      	movs	r2, #64	; 0x40
    1e22:	4b02      	ldr	r3, [pc, #8]	; (1e2c <udi_cdc_signal_overrun+0x14>)
    1e24:	4798      	blx	r3
}
    1e26:	46bd      	mov	sp, r7
    1e28:	bd80      	pop	{r7, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	000016a9 	.word	0x000016a9

00001e30 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b086      	sub	sp, #24
    1e34:	af00      	add	r7, sp, #0
    1e36:	1c02      	adds	r2, r0, #0
    1e38:	1dfb      	adds	r3, r7, #7
    1e3a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1e3c:	1c3b      	adds	r3, r7, #0
    1e3e:	3317      	adds	r3, #23
    1e40:	2200      	movs	r2, #0
    1e42:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    1e44:	4b15      	ldr	r3, [pc, #84]	; (1e9c <udi_cdc_multi_get_nb_received_data+0x6c>)
    1e46:	4798      	blx	r3
    1e48:	1c03      	adds	r3, r0, #0
    1e4a:	613b      	str	r3, [r7, #16]
	pos = udi_cdc_rx_pos[port];
    1e4c:	1c3b      	adds	r3, r7, #0
    1e4e:	3317      	adds	r3, #23
    1e50:	7819      	ldrb	r1, [r3, #0]
    1e52:	1c3b      	adds	r3, r7, #0
    1e54:	330e      	adds	r3, #14
    1e56:	4a12      	ldr	r2, [pc, #72]	; (1ea0 <udi_cdc_multi_get_nb_received_data+0x70>)
    1e58:	0049      	lsls	r1, r1, #1
    1e5a:	5a8a      	ldrh	r2, [r1, r2]
    1e5c:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    1e5e:	1c3b      	adds	r3, r7, #0
    1e60:	3317      	adds	r3, #23
    1e62:	7819      	ldrb	r1, [r3, #0]
    1e64:	1c3b      	adds	r3, r7, #0
    1e66:	3317      	adds	r3, #23
    1e68:	781b      	ldrb	r3, [r3, #0]
    1e6a:	4a0e      	ldr	r2, [pc, #56]	; (1ea4 <udi_cdc_multi_get_nb_received_data+0x74>)
    1e6c:	5cd3      	ldrb	r3, [r2, r3]
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	1c1a      	adds	r2, r3, #0
    1e72:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <udi_cdc_multi_get_nb_received_data+0x78>)
    1e74:	0049      	lsls	r1, r1, #1
    1e76:	188a      	adds	r2, r1, r2
    1e78:	0052      	lsls	r2, r2, #1
    1e7a:	5ad3      	ldrh	r3, [r2, r3]
    1e7c:	1c1a      	adds	r2, r3, #0
    1e7e:	1c3b      	adds	r3, r7, #0
    1e80:	330e      	adds	r3, #14
    1e82:	881b      	ldrh	r3, [r3, #0]
    1e84:	1ad3      	subs	r3, r2, r3
    1e86:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    1e88:	693b      	ldr	r3, [r7, #16]
    1e8a:	1c18      	adds	r0, r3, #0
    1e8c:	4b07      	ldr	r3, [pc, #28]	; (1eac <udi_cdc_multi_get_nb_received_data+0x7c>)
    1e8e:	4798      	blx	r3
	return nb_received;
    1e90:	68bb      	ldr	r3, [r7, #8]
}
    1e92:	1c18      	adds	r0, r3, #0
    1e94:	46bd      	mov	sp, r7
    1e96:	b006      	add	sp, #24
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	000011b1 	.word	0x000011b1
    1ea0:	200068e8 	.word	0x200068e8
    1ea4:	200068e4 	.word	0x200068e4
    1ea8:	200068e0 	.word	0x200068e0
    1eac:	000011f9 	.word	0x000011f9

00001eb0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	b082      	sub	sp, #8
    1eb4:	af00      	add	r7, sp, #0
    1eb6:	1c02      	adds	r2, r0, #0
    1eb8:	1dfb      	adds	r3, r7, #7
    1eba:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    1ebc:	1dfb      	adds	r3, r7, #7
    1ebe:	781b      	ldrb	r3, [r3, #0]
    1ec0:	1c18      	adds	r0, r3, #0
    1ec2:	4b05      	ldr	r3, [pc, #20]	; (1ed8 <udi_cdc_multi_is_rx_ready+0x28>)
    1ec4:	4798      	blx	r3
    1ec6:	1c03      	adds	r3, r0, #0
    1ec8:	1e5a      	subs	r2, r3, #1
    1eca:	4193      	sbcs	r3, r2
    1ecc:	b2db      	uxtb	r3, r3
}
    1ece:	1c18      	adds	r0, r3, #0
    1ed0:	46bd      	mov	sp, r7
    1ed2:	b002      	add	sp, #8
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	00001e31 	.word	0x00001e31

00001edc <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
    1ee0:	2000      	movs	r0, #0
    1ee2:	4b03      	ldr	r3, [pc, #12]	; (1ef0 <udi_cdc_is_rx_ready+0x14>)
    1ee4:	4798      	blx	r3
    1ee6:	1c03      	adds	r3, r0, #0
}
    1ee8:	1c18      	adds	r0, r3, #0
    1eea:	46bd      	mov	sp, r7
    1eec:	bd80      	pop	{r7, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	00001eb1 	.word	0x00001eb1

00001ef4 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    1ef4:	b590      	push	{r4, r7, lr}
    1ef6:	b087      	sub	sp, #28
    1ef8:	af00      	add	r7, sp, #0
    1efa:	1c02      	adds	r2, r0, #0
    1efc:	1dfb      	adds	r3, r7, #7
    1efe:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    1f00:	2300      	movs	r3, #0
    1f02:	617b      	str	r3, [r7, #20]
	bool b_databit_9;
	uint16_t pos;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    1f04:	1c3b      	adds	r3, r7, #0
    1f06:	3312      	adds	r3, #18
    1f08:	2200      	movs	r2, #0
    1f0a:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    1f0c:	1c3b      	adds	r3, r7, #0
    1f0e:	3312      	adds	r3, #18
    1f10:	781a      	ldrb	r2, [r3, #0]
    1f12:	4941      	ldr	r1, [pc, #260]	; (2018 <udi_cdc_multi_getc+0x124>)
    1f14:	1c13      	adds	r3, r2, #0
    1f16:	00db      	lsls	r3, r3, #3
    1f18:	1a9b      	subs	r3, r3, r2
    1f1a:	18cb      	adds	r3, r1, r3
    1f1c:	799a      	ldrb	r2, [r3, #6]
    1f1e:	1c3b      	adds	r3, r7, #0
    1f20:	3313      	adds	r3, #19
    1f22:	3a09      	subs	r2, #9
    1f24:	4251      	negs	r1, r2
    1f26:	414a      	adcs	r2, r1
    1f28:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    1f2a:	4b3c      	ldr	r3, [pc, #240]	; (201c <udi_cdc_multi_getc+0x128>)
    1f2c:	4798      	blx	r3
    1f2e:	1c03      	adds	r3, r0, #0
    1f30:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    1f32:	1c3b      	adds	r3, r7, #0
    1f34:	3312      	adds	r3, #18
    1f36:	7819      	ldrb	r1, [r3, #0]
    1f38:	1c3b      	adds	r3, r7, #0
    1f3a:	330a      	adds	r3, #10
    1f3c:	4a38      	ldr	r2, [pc, #224]	; (2020 <udi_cdc_multi_getc+0x12c>)
    1f3e:	0049      	lsls	r1, r1, #1
    1f40:	5a8a      	ldrh	r2, [r1, r2]
    1f42:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    1f44:	1c3b      	adds	r3, r7, #0
    1f46:	3312      	adds	r3, #18
    1f48:	781a      	ldrb	r2, [r3, #0]
    1f4a:	1c3b      	adds	r3, r7, #0
    1f4c:	3309      	adds	r3, #9
    1f4e:	4935      	ldr	r1, [pc, #212]	; (2024 <udi_cdc_multi_getc+0x130>)
    1f50:	5c8a      	ldrb	r2, [r1, r2]
    1f52:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	1c18      	adds	r0, r3, #0
    1f58:	4b33      	ldr	r3, [pc, #204]	; (2028 <udi_cdc_multi_getc+0x134>)
    1f5a:	4798      	blx	r3
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
    1f5c:	46c0      	nop			; (mov r8, r8)
    1f5e:	1c3b      	adds	r3, r7, #0
    1f60:	3312      	adds	r3, #18
    1f62:	7819      	ldrb	r1, [r3, #0]
    1f64:	1c3b      	adds	r3, r7, #0
    1f66:	3309      	adds	r3, #9
    1f68:	781a      	ldrb	r2, [r3, #0]
    1f6a:	4b30      	ldr	r3, [pc, #192]	; (202c <udi_cdc_multi_getc+0x138>)
    1f6c:	0049      	lsls	r1, r1, #1
    1f6e:	188a      	adds	r2, r1, r2
    1f70:	0052      	lsls	r2, r2, #1
    1f72:	5ad3      	ldrh	r3, [r2, r3]
    1f74:	1c3a      	adds	r2, r7, #0
    1f76:	320a      	adds	r2, #10
    1f78:	8812      	ldrh	r2, [r2, #0]
    1f7a:	429a      	cmp	r2, r3
    1f7c:	d310      	bcc.n	1fa0 <udi_cdc_multi_getc+0xac>
		if (!udi_cdc_data_running) {
    1f7e:	4b2c      	ldr	r3, [pc, #176]	; (2030 <udi_cdc_multi_getc+0x13c>)
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2201      	movs	r2, #1
    1f86:	4053      	eors	r3, r2
    1f88:	b2db      	uxtb	r3, r3
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d001      	beq.n	1f92 <udi_cdc_multi_getc+0x9e>
			return 0;
    1f8e:	2300      	movs	r3, #0
    1f90:	e03e      	b.n	2010 <udi_cdc_multi_getc+0x11c>
    1f92:	1c3b      	adds	r3, r7, #0
    1f94:	3313      	adds	r3, #19
    1f96:	1c3a      	adds	r2, r7, #0
    1f98:	3213      	adds	r2, #19
    1f9a:	7812      	ldrb	r2, [r2, #0]
    1f9c:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    1f9e:	e7c4      	b.n	1f2a <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    1fa0:	1c3b      	adds	r3, r7, #0
    1fa2:	3312      	adds	r3, #18
    1fa4:	7819      	ldrb	r1, [r3, #0]
    1fa6:	1c3b      	adds	r3, r7, #0
    1fa8:	3309      	adds	r3, #9
    1faa:	781b      	ldrb	r3, [r3, #0]
    1fac:	1c3a      	adds	r2, r7, #0
    1fae:	320a      	adds	r2, #10
    1fb0:	8810      	ldrh	r0, [r2, #0]
    1fb2:	4c20      	ldr	r4, [pc, #128]	; (2034 <udi_cdc_multi_getc+0x140>)
    1fb4:	1c1a      	adds	r2, r3, #0
    1fb6:	0092      	lsls	r2, r2, #2
    1fb8:	18d2      	adds	r2, r2, r3
    1fba:	0193      	lsls	r3, r2, #6
    1fbc:	1c1a      	adds	r2, r3, #0
    1fbe:	1c0b      	adds	r3, r1, #0
    1fc0:	009b      	lsls	r3, r3, #2
    1fc2:	185b      	adds	r3, r3, r1
    1fc4:	01db      	lsls	r3, r3, #7
    1fc6:	18d3      	adds	r3, r2, r3
    1fc8:	18e3      	adds	r3, r4, r3
    1fca:	5c1b      	ldrb	r3, [r3, r0]
    1fcc:	697a      	ldr	r2, [r7, #20]
    1fce:	4313      	orrs	r3, r2
    1fd0:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    1fd2:	1c3b      	adds	r3, r7, #0
    1fd4:	3312      	adds	r3, #18
    1fd6:	781a      	ldrb	r2, [r3, #0]
    1fd8:	1c3b      	adds	r3, r7, #0
    1fda:	330a      	adds	r3, #10
    1fdc:	881b      	ldrh	r3, [r3, #0]
    1fde:	3301      	adds	r3, #1
    1fe0:	b299      	uxth	r1, r3
    1fe2:	4b0f      	ldr	r3, [pc, #60]	; (2020 <udi_cdc_multi_getc+0x12c>)
    1fe4:	0052      	lsls	r2, r2, #1
    1fe6:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    1fe8:	1c3b      	adds	r3, r7, #0
    1fea:	3312      	adds	r3, #18
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	1c18      	adds	r0, r3, #0
    1ff0:	4b11      	ldr	r3, [pc, #68]	; (2038 <udi_cdc_multi_getc+0x144>)
    1ff2:	4798      	blx	r3

	if (b_databit_9) {
    1ff4:	1c3b      	adds	r3, r7, #0
    1ff6:	3313      	adds	r3, #19
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d007      	beq.n	200e <udi_cdc_multi_getc+0x11a>
		// Receive MSB
		b_databit_9 = false;
    1ffe:	1c3b      	adds	r3, r7, #0
    2000:	3313      	adds	r3, #19
    2002:	2200      	movs	r2, #0
    2004:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    2006:	697b      	ldr	r3, [r7, #20]
    2008:	021b      	lsls	r3, r3, #8
    200a:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    200c:	e78d      	b.n	1f2a <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    200e:	697b      	ldr	r3, [r7, #20]
}
    2010:	1c18      	adds	r0, r3, #0
    2012:	46bd      	mov	sp, r7
    2014:	b007      	add	sp, #28
    2016:	bd90      	pop	{r4, r7, pc}
    2018:	20006640 	.word	0x20006640
    201c:	000011b1 	.word	0x000011b1
    2020:	200068e8 	.word	0x200068e8
    2024:	200068e4 	.word	0x200068e4
    2028:	000011f9 	.word	0x000011f9
    202c:	200068e0 	.word	0x200068e0
    2030:	2000665e 	.word	0x2000665e
    2034:	20006660 	.word	0x20006660
    2038:	000018f1 	.word	0x000018f1

0000203c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    203c:	b580      	push	{r7, lr}
    203e:	af00      	add	r7, sp, #0
	return udi_cdc_multi_getc(0);
    2040:	2000      	movs	r0, #0
    2042:	4b03      	ldr	r3, [pc, #12]	; (2050 <udi_cdc_getc+0x14>)
    2044:	4798      	blx	r3
    2046:	1c03      	adds	r3, r0, #0
}
    2048:	1c18      	adds	r0, r3, #0
    204a:	46bd      	mov	sp, r7
    204c:	bd80      	pop	{r7, pc}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	00001ef5 	.word	0x00001ef5

00002054 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    2054:	b580      	push	{r7, lr}
    2056:	b088      	sub	sp, #32
    2058:	af00      	add	r7, sp, #0
    205a:	1c02      	adds	r2, r0, #0
    205c:	1dfb      	adds	r3, r7, #7
    205e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, buf_nosel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2060:	1c3b      	adds	r3, r7, #0
    2062:	331b      	adds	r3, #27
    2064:	2200      	movs	r2, #0
    2066:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    2068:	4b33      	ldr	r3, [pc, #204]	; (2138 <udi_cdc_multi_get_free_tx_buffer+0xe4>)
    206a:	4798      	blx	r3
    206c:	1c03      	adds	r3, r0, #0
    206e:	617b      	str	r3, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
    2070:	1c3b      	adds	r3, r7, #0
    2072:	331b      	adds	r3, #27
    2074:	781a      	ldrb	r2, [r3, #0]
    2076:	1c3b      	adds	r3, r7, #0
    2078:	3313      	adds	r3, #19
    207a:	4930      	ldr	r1, [pc, #192]	; (213c <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    207c:	5c8a      	ldrb	r2, [r1, r2]
    207e:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    2080:	1c3b      	adds	r3, r7, #0
    2082:	331b      	adds	r3, #27
    2084:	7819      	ldrb	r1, [r3, #0]
    2086:	1c3b      	adds	r3, r7, #0
    2088:	3313      	adds	r3, #19
    208a:	781a      	ldrb	r2, [r3, #0]
    208c:	4b2c      	ldr	r3, [pc, #176]	; (2140 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    208e:	0049      	lsls	r1, r1, #1
    2090:	188a      	adds	r2, r1, r2
    2092:	0052      	lsls	r2, r2, #1
    2094:	5ad3      	ldrh	r3, [r2, r3]
    2096:	61fb      	str	r3, [r7, #28]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
    2098:	1c3b      	adds	r3, r7, #0
    209a:	331b      	adds	r3, #27
    209c:	7819      	ldrb	r1, [r3, #0]
    209e:	1c3b      	adds	r3, r7, #0
    20a0:	3313      	adds	r3, #19
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	425a      	negs	r2, r3
    20a6:	4153      	adcs	r3, r2
    20a8:	b2db      	uxtb	r3, r3
    20aa:	1c1a      	adds	r2, r3, #0
    20ac:	4b24      	ldr	r3, [pc, #144]	; (2140 <udi_cdc_multi_get_free_tx_buffer+0xec>)
    20ae:	0049      	lsls	r1, r1, #1
    20b0:	188a      	adds	r2, r1, r2
    20b2:	0052      	lsls	r2, r2, #1
    20b4:	5ad3      	ldrh	r3, [r2, r3]
    20b6:	60fb      	str	r3, [r7, #12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    20b8:	69fa      	ldr	r2, [r7, #28]
    20ba:	23a0      	movs	r3, #160	; 0xa0
    20bc:	005b      	lsls	r3, r3, #1
    20be:	429a      	cmp	r2, r3
    20c0:	d12c      	bne.n	211c <udi_cdc_multi_get_free_tx_buffer+0xc8>
		if ((!udi_cdc_tx_trans_ongoing[port])
    20c2:	1c3b      	adds	r3, r7, #0
    20c4:	331b      	adds	r3, #27
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	4a1e      	ldr	r2, [pc, #120]	; (2144 <udi_cdc_multi_get_free_tx_buffer+0xf0>)
    20ca:	5cd3      	ldrb	r3, [r2, r3]
    20cc:	b2db      	uxtb	r3, r3
    20ce:	2201      	movs	r2, #1
    20d0:	4053      	eors	r3, r2
    20d2:	b2db      	uxtb	r3, r3
    20d4:	2b00      	cmp	r3, #0
    20d6:	d021      	beq.n	211c <udi_cdc_multi_get_free_tx_buffer+0xc8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    20d8:	1c3b      	adds	r3, r7, #0
    20da:	331b      	adds	r3, #27
    20dc:	781b      	ldrb	r3, [r3, #0]
    20de:	4a1a      	ldr	r2, [pc, #104]	; (2148 <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    20e0:	5cd3      	ldrb	r3, [r2, r3]
    20e2:	b2db      	uxtb	r3, r3
    20e4:	2201      	movs	r2, #1
    20e6:	4053      	eors	r3, r2
    20e8:	b2db      	uxtb	r3, r3
    20ea:	2b00      	cmp	r3, #0
    20ec:	d016      	beq.n	211c <udi_cdc_multi_get_free_tx_buffer+0xc8>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    20ee:	1c3b      	adds	r3, r7, #0
    20f0:	331b      	adds	r3, #27
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	4a14      	ldr	r2, [pc, #80]	; (2148 <udi_cdc_multi_get_free_tx_buffer+0xf4>)
    20f6:	2101      	movs	r1, #1
    20f8:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    20fa:	1c3b      	adds	r3, r7, #0
    20fc:	331b      	adds	r3, #27
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	1c3a      	adds	r2, r7, #0
    2102:	3213      	adds	r2, #19
    2104:	7812      	ldrb	r2, [r2, #0]
    2106:	4251      	negs	r1, r2
    2108:	414a      	adcs	r2, r1
    210a:	b2d2      	uxtb	r2, r2
    210c:	1c11      	adds	r1, r2, #0
    210e:	4a0b      	ldr	r2, [pc, #44]	; (213c <udi_cdc_multi_get_free_tx_buffer+0xe8>)
    2110:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    2112:	2300      	movs	r3, #0
    2114:	61fb      	str	r3, [r7, #28]
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
    2116:	23a0      	movs	r3, #160	; 0xa0
    2118:	005b      	lsls	r3, r3, #1
    211a:	60fb      	str	r3, [r7, #12]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    211c:	69fb      	ldr	r3, [r7, #28]
    211e:	22a0      	movs	r2, #160	; 0xa0
    2120:	0052      	lsls	r2, r2, #1
    2122:	1ad3      	subs	r3, r2, r3
    2124:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    2126:	697b      	ldr	r3, [r7, #20]
    2128:	1c18      	adds	r0, r3, #0
    212a:	4b08      	ldr	r3, [pc, #32]	; (214c <udi_cdc_multi_get_free_tx_buffer+0xf8>)
    212c:	4798      	blx	r3
	return retval;
    212e:	68bb      	ldr	r3, [r7, #8]
}
    2130:	1c18      	adds	r0, r3, #0
    2132:	46bd      	mov	sp, r7
    2134:	b008      	add	sp, #32
    2136:	bd80      	pop	{r7, pc}
    2138:	000011b1 	.word	0x000011b1
    213c:	20006b74 	.word	0x20006b74
    2140:	20006b70 	.word	0x20006b70
    2144:	20006b7c 	.word	0x20006b7c
    2148:	20006b80 	.word	0x20006b80
    214c:	000011f9 	.word	0x000011f9

00002150 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    2150:	b580      	push	{r7, lr}
    2152:	b082      	sub	sp, #8
    2154:	af00      	add	r7, sp, #0
    2156:	1c02      	adds	r2, r0, #0
    2158:	1dfb      	adds	r3, r7, #7
    215a:	701a      	strb	r2, [r3, #0]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    215c:	1dfb      	adds	r3, r7, #7
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	1c18      	adds	r0, r3, #0
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <udi_cdc_multi_is_tx_ready+0x28>)
    2164:	4798      	blx	r3
    2166:	1c03      	adds	r3, r0, #0
    2168:	1e5a      	subs	r2, r3, #1
    216a:	4193      	sbcs	r3, r2
    216c:	b2db      	uxtb	r3, r3
}
    216e:	1c18      	adds	r0, r3, #0
    2170:	46bd      	mov	sp, r7
    2172:	b002      	add	sp, #8
    2174:	bd80      	pop	{r7, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	00002055 	.word	0x00002055

0000217c <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
    217c:	b580      	push	{r7, lr}
    217e:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
    2180:	2000      	movs	r0, #0
    2182:	4b03      	ldr	r3, [pc, #12]	; (2190 <udi_cdc_is_tx_ready+0x14>)
    2184:	4798      	blx	r3
    2186:	1c03      	adds	r3, r0, #0
}
    2188:	1c18      	adds	r0, r3, #0
    218a:	46bd      	mov	sp, r7
    218c:	bd80      	pop	{r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	00002151 	.word	0x00002151

00002194 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    2194:	b5f0      	push	{r4, r5, r6, r7, lr}
    2196:	b087      	sub	sp, #28
    2198:	af00      	add	r7, sp, #0
    219a:	1c02      	adds	r2, r0, #0
    219c:	6039      	str	r1, [r7, #0]
    219e:	1dfb      	adds	r3, r7, #7
    21a0:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    21a2:	1c3b      	adds	r3, r7, #0
    21a4:	3316      	adds	r3, #22
    21a6:	2200      	movs	r2, #0
    21a8:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    21aa:	1c3b      	adds	r3, r7, #0
    21ac:	3316      	adds	r3, #22
    21ae:	781a      	ldrb	r2, [r3, #0]
    21b0:	493a      	ldr	r1, [pc, #232]	; (229c <udi_cdc_multi_putc+0x108>)
    21b2:	1c13      	adds	r3, r2, #0
    21b4:	00db      	lsls	r3, r3, #3
    21b6:	1a9b      	subs	r3, r3, r2
    21b8:	18cb      	adds	r3, r1, r3
    21ba:	799a      	ldrb	r2, [r3, #6]
    21bc:	1c3b      	adds	r3, r7, #0
    21be:	3317      	adds	r3, #23
    21c0:	3a09      	subs	r2, #9
    21c2:	4251      	negs	r1, r2
    21c4:	414a      	adcs	r2, r1
    21c6:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    21c8:	1c3b      	adds	r3, r7, #0
    21ca:	3316      	adds	r3, #22
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	1c18      	adds	r0, r3, #0
    21d0:	4b33      	ldr	r3, [pc, #204]	; (22a0 <udi_cdc_multi_putc+0x10c>)
    21d2:	4798      	blx	r3
    21d4:	1c03      	adds	r3, r0, #0
    21d6:	2201      	movs	r2, #1
    21d8:	4053      	eors	r3, r2
    21da:	b2db      	uxtb	r3, r3
    21dc:	2b00      	cmp	r3, #0
    21de:	d010      	beq.n	2202 <udi_cdc_multi_putc+0x6e>
		if (!udi_cdc_data_running) {
    21e0:	4b30      	ldr	r3, [pc, #192]	; (22a4 <udi_cdc_multi_putc+0x110>)
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	b2db      	uxtb	r3, r3
    21e6:	2201      	movs	r2, #1
    21e8:	4053      	eors	r3, r2
    21ea:	b2db      	uxtb	r3, r3
    21ec:	2b00      	cmp	r3, #0
    21ee:	d001      	beq.n	21f4 <udi_cdc_multi_putc+0x60>
			return false;
    21f0:	2300      	movs	r3, #0
    21f2:	e04e      	b.n	2292 <udi_cdc_multi_putc+0xfe>
    21f4:	1c3b      	adds	r3, r7, #0
    21f6:	3317      	adds	r3, #23
    21f8:	1c3a      	adds	r2, r7, #0
    21fa:	3217      	adds	r2, #23
    21fc:	7812      	ldrb	r2, [r2, #0]
    21fe:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    2200:	e7e2      	b.n	21c8 <udi_cdc_multi_putc+0x34>
	}

	// Write value
	flags = cpu_irq_save();
    2202:	4b29      	ldr	r3, [pc, #164]	; (22a8 <udi_cdc_multi_putc+0x114>)
    2204:	4798      	blx	r3
    2206:	1c03      	adds	r3, r0, #0
    2208:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    220a:	1c3b      	adds	r3, r7, #0
    220c:	3316      	adds	r3, #22
    220e:	781a      	ldrb	r2, [r3, #0]
    2210:	1c3b      	adds	r3, r7, #0
    2212:	330f      	adds	r3, #15
    2214:	4925      	ldr	r1, [pc, #148]	; (22ac <udi_cdc_multi_putc+0x118>)
    2216:	5c8a      	ldrb	r2, [r1, r2]
    2218:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    221a:	1c3b      	adds	r3, r7, #0
    221c:	3316      	adds	r3, #22
    221e:	7819      	ldrb	r1, [r3, #0]
    2220:	1c3b      	adds	r3, r7, #0
    2222:	330f      	adds	r3, #15
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	1c3a      	adds	r2, r7, #0
    2228:	3216      	adds	r2, #22
    222a:	7814      	ldrb	r4, [r2, #0]
    222c:	1c3a      	adds	r2, r7, #0
    222e:	320f      	adds	r2, #15
    2230:	7810      	ldrb	r0, [r2, #0]
    2232:	4a1f      	ldr	r2, [pc, #124]	; (22b0 <udi_cdc_multi_putc+0x11c>)
    2234:	0065      	lsls	r5, r4, #1
    2236:	182d      	adds	r5, r5, r0
    2238:	006d      	lsls	r5, r5, #1
    223a:	5aaa      	ldrh	r2, [r5, r2]
    223c:	1c55      	adds	r5, r2, #1
    223e:	b2ae      	uxth	r6, r5
    2240:	4d1b      	ldr	r5, [pc, #108]	; (22b0 <udi_cdc_multi_putc+0x11c>)
    2242:	0064      	lsls	r4, r4, #1
    2244:	1820      	adds	r0, r4, r0
    2246:	0040      	lsls	r0, r0, #1
    2248:	1c34      	adds	r4, r6, #0
    224a:	5344      	strh	r4, [r0, r5]
    224c:	1c10      	adds	r0, r2, #0
    224e:	683a      	ldr	r2, [r7, #0]
    2250:	b2d4      	uxtb	r4, r2
    2252:	4d18      	ldr	r5, [pc, #96]	; (22b4 <udi_cdc_multi_putc+0x120>)
    2254:	1c1a      	adds	r2, r3, #0
    2256:	0092      	lsls	r2, r2, #2
    2258:	18d2      	adds	r2, r2, r3
    225a:	0193      	lsls	r3, r2, #6
    225c:	1c1a      	adds	r2, r3, #0
    225e:	1c0b      	adds	r3, r1, #0
    2260:	009b      	lsls	r3, r3, #2
    2262:	185b      	adds	r3, r3, r1
    2264:	01db      	lsls	r3, r3, #7
    2266:	18d3      	adds	r3, r2, r3
    2268:	18eb      	adds	r3, r5, r3
    226a:	1c22      	adds	r2, r4, #0
    226c:	541a      	strb	r2, [r3, r0]
	cpu_irq_restore(flags);
    226e:	693b      	ldr	r3, [r7, #16]
    2270:	1c18      	adds	r0, r3, #0
    2272:	4b11      	ldr	r3, [pc, #68]	; (22b8 <udi_cdc_multi_putc+0x124>)
    2274:	4798      	blx	r3

	if (b_databit_9) {
    2276:	1c3b      	adds	r3, r7, #0
    2278:	3317      	adds	r3, #23
    227a:	781b      	ldrb	r3, [r3, #0]
    227c:	2b00      	cmp	r3, #0
    227e:	d007      	beq.n	2290 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    2280:	1c3b      	adds	r3, r7, #0
    2282:	3317      	adds	r3, #23
    2284:	2200      	movs	r2, #0
    2286:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    2288:	683b      	ldr	r3, [r7, #0]
    228a:	121b      	asrs	r3, r3, #8
    228c:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    228e:	e79b      	b.n	21c8 <udi_cdc_multi_putc+0x34>
	}
	return true;
    2290:	2301      	movs	r3, #1
}
    2292:	1c18      	adds	r0, r3, #0
    2294:	46bd      	mov	sp, r7
    2296:	b007      	add	sp, #28
    2298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	20006640 	.word	0x20006640
    22a0:	00002151 	.word	0x00002151
    22a4:	2000665e 	.word	0x2000665e
    22a8:	000011b1 	.word	0x000011b1
    22ac:	20006b74 	.word	0x20006b74
    22b0:	20006b70 	.word	0x20006b70
    22b4:	200068f0 	.word	0x200068f0
    22b8:	000011f9 	.word	0x000011f9

000022bc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b082      	sub	sp, #8
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	return udi_cdc_multi_putc(0, value);
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	2000      	movs	r0, #0
    22c8:	1c19      	adds	r1, r3, #0
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <udi_cdc_putc+0x1c>)
    22cc:	4798      	blx	r3
    22ce:	1c03      	adds	r3, r0, #0
}
    22d0:	1c18      	adds	r0, r3, #0
    22d2:	46bd      	mov	sp, r7
    22d4:	b002      	add	sp, #8
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00002195 	.word	0x00002195

000022dc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    22e2:	f3ef 8310 	mrs	r3, PRIMASK
    22e6:	603b      	str	r3, [r7, #0]
  return(result);
    22e8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    22ea:	425a      	negs	r2, r3
    22ec:	4153      	adcs	r3, r2
    22ee:	b2db      	uxtb	r3, r3
    22f0:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    22f2:	b672      	cpsid	i
    22f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    22f8:	4b03      	ldr	r3, [pc, #12]	; (2308 <cpu_irq_save+0x2c>)
    22fa:	2200      	movs	r2, #0
    22fc:	701a      	strb	r2, [r3, #0]
	return flags;
    22fe:	687b      	ldr	r3, [r7, #4]
}
    2300:	1c18      	adds	r0, r3, #0
    2302:	46bd      	mov	sp, r7
    2304:	b002      	add	sp, #8
    2306:	bd80      	pop	{r7, pc}
    2308:	2000025c 	.word	0x2000025c

0000230c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
	return (flags);
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	1e5a      	subs	r2, r3, #1
    2318:	4193      	sbcs	r3, r2
    231a:	b2db      	uxtb	r3, r3
}
    231c:	1c18      	adds	r0, r3, #0
    231e:	46bd      	mov	sp, r7
    2320:	b002      	add	sp, #8
    2322:	bd80      	pop	{r7, pc}

00002324 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2324:	b580      	push	{r7, lr}
    2326:	b082      	sub	sp, #8
    2328:	af00      	add	r7, sp, #0
    232a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    232c:	687b      	ldr	r3, [r7, #4]
    232e:	1c18      	adds	r0, r3, #0
    2330:	4b06      	ldr	r3, [pc, #24]	; (234c <cpu_irq_restore+0x28>)
    2332:	4798      	blx	r3
    2334:	1c03      	adds	r3, r0, #0
    2336:	2b00      	cmp	r3, #0
    2338:	d005      	beq.n	2346 <cpu_irq_restore+0x22>
		cpu_irq_enable();
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <cpu_irq_restore+0x2c>)
    233c:	2201      	movs	r2, #1
    233e:	701a      	strb	r2, [r3, #0]
    2340:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2344:	b662      	cpsie	i
}
    2346:	46bd      	mov	sp, r7
    2348:	b002      	add	sp, #8
    234a:	bd80      	pop	{r7, pc}
    234c:	0000230d 	.word	0x0000230d
    2350:	2000025c 	.word	0x2000025c

00002354 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_kbd_rate = 0;
    2358:	4b0b      	ldr	r3, [pc, #44]	; (2388 <udi_hid_kbd_enable+0x34>)
    235a:	2200      	movs	r2, #0
    235c:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_protocol = 0;
    235e:	4b0b      	ldr	r3, [pc, #44]	; (238c <udi_hid_kbd_enable+0x38>)
    2360:	2200      	movs	r2, #0
    2362:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    2364:	4b0a      	ldr	r3, [pc, #40]	; (2390 <udi_hid_kbd_enable+0x3c>)
    2366:	2200      	movs	r2, #0
    2368:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    236a:	4b0a      	ldr	r3, [pc, #40]	; (2394 <udi_hid_kbd_enable+0x40>)
    236c:	1c18      	adds	r0, r3, #0
    236e:	2100      	movs	r1, #0
    2370:	2208      	movs	r2, #8
    2372:	4b09      	ldr	r3, [pc, #36]	; (2398 <udi_hid_kbd_enable+0x44>)
    2374:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    2376:	4b09      	ldr	r3, [pc, #36]	; (239c <udi_hid_kbd_enable+0x48>)
    2378:	2200      	movs	r2, #0
    237a:	701a      	strb	r2, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    237c:	4b08      	ldr	r3, [pc, #32]	; (23a0 <udi_hid_kbd_enable+0x4c>)
    237e:	4798      	blx	r3
    2380:	1c03      	adds	r3, r0, #0
}
    2382:	1c18      	adds	r0, r3, #0
    2384:	46bd      	mov	sp, r7
    2386:	bd80      	pop	{r7, pc}
    2388:	20006b88 	.word	0x20006b88
    238c:	20006b8c 	.word	0x20006b8c
    2390:	20006ba0 	.word	0x20006ba0
    2394:	20006b98 	.word	0x20006b98
    2398:	0000b0bf 	.word	0x0000b0bf
    239c:	20006b94 	.word	0x20006b94
    23a0:	0000a845 	.word	0x0000a845

000023a4 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	af00      	add	r7, sp, #0
	UDI_HID_KBD_DISABLE_EXT();
    23a8:	4b01      	ldr	r3, [pc, #4]	; (23b0 <udi_hid_kbd_disable+0xc>)
    23aa:	4798      	blx	r3
}
    23ac:	46bd      	mov	sp, r7
    23ae:	bd80      	pop	{r7, pc}
    23b0:	0000a85d 	.word	0x0000a85d

000023b4 <udi_hid_kbd_setup>:


bool udi_hid_kbd_setup(void)
{
    23b4:	b598      	push	{r3, r4, r7, lr}
    23b6:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_kbd_rate,
    23b8:	4804      	ldr	r0, [pc, #16]	; (23cc <udi_hid_kbd_setup+0x18>)
    23ba:	4905      	ldr	r1, [pc, #20]	; (23d0 <udi_hid_kbd_setup+0x1c>)
    23bc:	4a05      	ldr	r2, [pc, #20]	; (23d4 <udi_hid_kbd_setup+0x20>)
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <udi_hid_kbd_setup+0x24>)
    23c0:	4c06      	ldr	r4, [pc, #24]	; (23dc <udi_hid_kbd_setup+0x28>)
    23c2:	47a0      	blx	r4
    23c4:	1c03      	adds	r3, r0, #0
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
    23c6:	1c18      	adds	r0, r3, #0
    23c8:	46bd      	mov	sp, r7
    23ca:	bd98      	pop	{r3, r4, r7, pc}
    23cc:	20006b88 	.word	0x20006b88
    23d0:	20006b8c 	.word	0x20006b8c
    23d4:	20000114 	.word	0x20000114
    23d8:	000023ed 	.word	0x000023ed
    23dc:	000027d9 	.word	0x000027d9

000023e0 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
    23e0:	b580      	push	{r7, lr}
    23e2:	af00      	add	r7, sp, #0
	return 0;
    23e4:	2300      	movs	r3, #0
}
    23e6:	1c18      	adds	r0, r3, #0
    23e8:	46bd      	mov	sp, r7
    23ea:	bd80      	pop	{r7, pc}

000023ec <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
    23ec:	b580      	push	{r7, lr}
    23ee:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    23f0:	4b0f      	ldr	r3, [pc, #60]	; (2430 <udi_hid_kbd_setreport+0x44>)
    23f2:	885b      	ldrh	r3, [r3, #2]
    23f4:	0a1b      	lsrs	r3, r3, #8
    23f6:	b29b      	uxth	r3, r3
    23f8:	2b02      	cmp	r3, #2
    23fa:	d115      	bne.n	2428 <udi_hid_kbd_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    23fc:	4b0c      	ldr	r3, [pc, #48]	; (2430 <udi_hid_kbd_setreport+0x44>)
    23fe:	885a      	ldrh	r2, [r3, #2]
    2400:	23ff      	movs	r3, #255	; 0xff
    2402:	4013      	ands	r3, r2
    2404:	b29b      	uxth	r3, r3
    2406:	2b00      	cmp	r3, #0
    2408:	d10e      	bne.n	2428 <udi_hid_kbd_setreport+0x3c>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    240a:	4b09      	ldr	r3, [pc, #36]	; (2430 <udi_hid_kbd_setreport+0x44>)
    240c:	88db      	ldrh	r3, [r3, #6]
    240e:	2b01      	cmp	r3, #1
    2410:	d10a      	bne.n	2428 <udi_hid_kbd_setreport+0x3c>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    2412:	4b07      	ldr	r3, [pc, #28]	; (2430 <udi_hid_kbd_setreport+0x44>)
    2414:	4a07      	ldr	r2, [pc, #28]	; (2434 <udi_hid_kbd_setreport+0x48>)
    2416:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    2418:	4b05      	ldr	r3, [pc, #20]	; (2430 <udi_hid_kbd_setreport+0x44>)
    241a:	4a07      	ldr	r2, [pc, #28]	; (2438 <udi_hid_kbd_setreport+0x4c>)
    241c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    241e:	4b04      	ldr	r3, [pc, #16]	; (2430 <udi_hid_kbd_setreport+0x44>)
    2420:	2201      	movs	r2, #1
    2422:	819a      	strh	r2, [r3, #12]
		return true;
    2424:	2301      	movs	r3, #1
    2426:	e000      	b.n	242a <udi_hid_kbd_setreport+0x3e>
	}
	return false;
    2428:	2300      	movs	r3, #0
}
    242a:	1c18      	adds	r0, r3, #0
    242c:	46bd      	mov	sp, r7
    242e:	bd80      	pop	{r7, pc}
    2430:	20006fc4 	.word	0x20006fc4
    2434:	20006b90 	.word	0x20006b90
    2438:	00002719 	.word	0x00002719

0000243c <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
    243c:	b580      	push	{r7, lr}
    243e:	b084      	sub	sp, #16
    2440:	af00      	add	r7, sp, #0
    2442:	1c02      	adds	r2, r0, #0
    2444:	1dfb      	adds	r3, r7, #7
    2446:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    2448:	4b0d      	ldr	r3, [pc, #52]	; (2480 <udi_hid_kbd_modifier_up+0x44>)
    244a:	4798      	blx	r3
    244c:	1c03      	adds	r3, r0, #0
    244e:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
    2450:	4b0c      	ldr	r3, [pc, #48]	; (2484 <udi_hid_kbd_modifier_up+0x48>)
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	1dfa      	adds	r2, r7, #7
    2456:	7812      	ldrb	r2, [r2, #0]
    2458:	43d2      	mvns	r2, r2
    245a:	b2d2      	uxtb	r2, r2
    245c:	4013      	ands	r3, r2
    245e:	b2da      	uxtb	r2, r3
    2460:	4b08      	ldr	r3, [pc, #32]	; (2484 <udi_hid_kbd_modifier_up+0x48>)
    2462:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <udi_hid_kbd_modifier_up+0x4c>)
    2466:	2201      	movs	r2, #1
    2468:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    246a:	4b08      	ldr	r3, [pc, #32]	; (248c <udi_hid_kbd_modifier_up+0x50>)
    246c:	4798      	blx	r3

	cpu_irq_restore(flags);
    246e:	68fb      	ldr	r3, [r7, #12]
    2470:	1c18      	adds	r0, r3, #0
    2472:	4b07      	ldr	r3, [pc, #28]	; (2490 <udi_hid_kbd_modifier_up+0x54>)
    2474:	4798      	blx	r3
	return true;
    2476:	2301      	movs	r3, #1
}
    2478:	1c18      	adds	r0, r3, #0
    247a:	46bd      	mov	sp, r7
    247c:	b004      	add	sp, #16
    247e:	bd80      	pop	{r7, pc}
    2480:	000022dd 	.word	0x000022dd
    2484:	20006b98 	.word	0x20006b98
    2488:	20006b94 	.word	0x20006b94
    248c:	00002681 	.word	0x00002681
    2490:	00002325 	.word	0x00002325

00002494 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	1c02      	adds	r2, r0, #0
    249c:	1dfb      	adds	r3, r7, #7
    249e:	701a      	strb	r2, [r3, #0]
	irqflags_t flags = cpu_irq_save();
    24a0:	4b0c      	ldr	r3, [pc, #48]	; (24d4 <udi_hid_kbd_modifier_down+0x40>)
    24a2:	4798      	blx	r3
    24a4:	1c03      	adds	r3, r0, #0
    24a6:	60fb      	str	r3, [r7, #12]

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
    24a8:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <udi_hid_kbd_modifier_down+0x44>)
    24aa:	781a      	ldrb	r2, [r3, #0]
    24ac:	1dfb      	adds	r3, r7, #7
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	4313      	orrs	r3, r2
    24b2:	b2da      	uxtb	r2, r3
    24b4:	4b08      	ldr	r3, [pc, #32]	; (24d8 <udi_hid_kbd_modifier_down+0x44>)
    24b6:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_valid = true;
    24b8:	4b08      	ldr	r3, [pc, #32]	; (24dc <udi_hid_kbd_modifier_down+0x48>)
    24ba:	2201      	movs	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    24be:	4b08      	ldr	r3, [pc, #32]	; (24e0 <udi_hid_kbd_modifier_down+0x4c>)
    24c0:	4798      	blx	r3

	cpu_irq_restore(flags);
    24c2:	68fb      	ldr	r3, [r7, #12]
    24c4:	1c18      	adds	r0, r3, #0
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <udi_hid_kbd_modifier_down+0x50>)
    24c8:	4798      	blx	r3
	return true;
    24ca:	2301      	movs	r3, #1
}
    24cc:	1c18      	adds	r0, r3, #0
    24ce:	46bd      	mov	sp, r7
    24d0:	b004      	add	sp, #16
    24d2:	bd80      	pop	{r7, pc}
    24d4:	000022dd 	.word	0x000022dd
    24d8:	20006b98 	.word	0x20006b98
    24dc:	20006b94 	.word	0x20006b94
    24e0:	00002681 	.word	0x00002681
    24e4:	00002325 	.word	0x00002325

000024e8 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    24e8:	b580      	push	{r7, lr}
    24ea:	b084      	sub	sp, #16
    24ec:	af00      	add	r7, sp, #0
    24ee:	1c02      	adds	r2, r0, #0
    24f0:	1dfb      	adds	r3, r7, #7
    24f2:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    24f4:	4b2f      	ldr	r3, [pc, #188]	; (25b4 <udi_hid_kbd_up+0xcc>)
    24f6:	4798      	blx	r3
    24f8:	1c03      	adds	r3, r0, #0
    24fa:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    24fc:	1c3b      	adds	r3, r7, #0
    24fe:	330f      	adds	r3, #15
    2500:	2202      	movs	r2, #2
    2502:	701a      	strb	r2, [r3, #0]
    2504:	e01d      	b.n	2542 <udi_hid_kbd_up+0x5a>
		if (0 == udi_hid_kbd_report[i]) {
    2506:	1c3b      	adds	r3, r7, #0
    2508:	330f      	adds	r3, #15
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	4a2a      	ldr	r2, [pc, #168]	; (25b8 <udi_hid_kbd_up+0xd0>)
    250e:	5cd3      	ldrb	r3, [r2, r3]
    2510:	2b00      	cmp	r3, #0
    2512:	d105      	bne.n	2520 <udi_hid_kbd_up+0x38>
			// Already removed
			cpu_irq_restore(flags);
    2514:	68bb      	ldr	r3, [r7, #8]
    2516:	1c18      	adds	r0, r3, #0
    2518:	4b28      	ldr	r3, [pc, #160]	; (25bc <udi_hid_kbd_up+0xd4>)
    251a:	4798      	blx	r3
			return true;
    251c:	2301      	movs	r3, #1
    251e:	e045      	b.n	25ac <udi_hid_kbd_up+0xc4>
		}
		if (key_id == udi_hid_kbd_report[i])
    2520:	1c3b      	adds	r3, r7, #0
    2522:	330f      	adds	r3, #15
    2524:	781b      	ldrb	r3, [r3, #0]
    2526:	4a24      	ldr	r2, [pc, #144]	; (25b8 <udi_hid_kbd_up+0xd0>)
    2528:	5cd3      	ldrb	r3, [r2, r3]
    252a:	1dfa      	adds	r2, r7, #7
    252c:	7812      	ldrb	r2, [r2, #0]
    252e:	429a      	cmp	r2, r3
    2530:	d100      	bne.n	2534 <udi_hid_kbd_up+0x4c>
			break;
    2532:	e00b      	b.n	254c <udi_hid_kbd_up+0x64>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2534:	1c3b      	adds	r3, r7, #0
    2536:	330f      	adds	r3, #15
    2538:	781a      	ldrb	r2, [r3, #0]
    253a:	1c3b      	adds	r3, r7, #0
    253c:	330f      	adds	r3, #15
    253e:	3201      	adds	r2, #1
    2540:	701a      	strb	r2, [r3, #0]
    2542:	1c3b      	adds	r3, r7, #0
    2544:	330f      	adds	r3, #15
    2546:	781b      	ldrb	r3, [r3, #0]
    2548:	2b07      	cmp	r3, #7
    254a:	d9dc      	bls.n	2506 <udi_hid_kbd_up+0x1e>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    254c:	1c3b      	adds	r3, r7, #0
    254e:	330f      	adds	r3, #15
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	2b08      	cmp	r3, #8
    2554:	d105      	bne.n	2562 <udi_hid_kbd_up+0x7a>
		// Already removed
		cpu_irq_restore(flags);
    2556:	68bb      	ldr	r3, [r7, #8]
    2558:	1c18      	adds	r0, r3, #0
    255a:	4b18      	ldr	r3, [pc, #96]	; (25bc <udi_hid_kbd_up+0xd4>)
    255c:	4798      	blx	r3
		return true;
    255e:	2301      	movs	r3, #1
    2560:	e024      	b.n	25ac <udi_hid_kbd_up+0xc4>
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2562:	e011      	b.n	2588 <udi_hid_kbd_up+0xa0>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    2564:	1c3b      	adds	r3, r7, #0
    2566:	330f      	adds	r3, #15
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	1c3a      	adds	r2, r7, #0
    256c:	320f      	adds	r2, #15
    256e:	7812      	ldrb	r2, [r2, #0]
    2570:	3201      	adds	r2, #1
    2572:	4911      	ldr	r1, [pc, #68]	; (25b8 <udi_hid_kbd_up+0xd0>)
    2574:	5c89      	ldrb	r1, [r1, r2]
    2576:	4a10      	ldr	r2, [pc, #64]	; (25b8 <udi_hid_kbd_up+0xd0>)
    2578:	54d1      	strb	r1, [r2, r3]
		i++;
    257a:	1c3b      	adds	r3, r7, #0
    257c:	330f      	adds	r3, #15
    257e:	781a      	ldrb	r2, [r3, #0]
    2580:	1c3b      	adds	r3, r7, #0
    2582:	330f      	adds	r3, #15
    2584:	3201      	adds	r2, #1
    2586:	701a      	strb	r2, [r3, #0]
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    2588:	1c3b      	adds	r3, r7, #0
    258a:	330f      	adds	r3, #15
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2b06      	cmp	r3, #6
    2590:	d9e8      	bls.n	2564 <udi_hid_kbd_up+0x7c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    2592:	4b09      	ldr	r3, [pc, #36]	; (25b8 <udi_hid_kbd_up+0xd0>)
    2594:	2200      	movs	r2, #0
    2596:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    2598:	4b09      	ldr	r3, [pc, #36]	; (25c0 <udi_hid_kbd_up+0xd8>)
    259a:	2201      	movs	r2, #1
    259c:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    259e:	4b09      	ldr	r3, [pc, #36]	; (25c4 <udi_hid_kbd_up+0xdc>)
    25a0:	4798      	blx	r3

	cpu_irq_restore(flags);
    25a2:	68bb      	ldr	r3, [r7, #8]
    25a4:	1c18      	adds	r0, r3, #0
    25a6:	4b05      	ldr	r3, [pc, #20]	; (25bc <udi_hid_kbd_up+0xd4>)
    25a8:	4798      	blx	r3
	return true;
    25aa:	2301      	movs	r3, #1
}
    25ac:	1c18      	adds	r0, r3, #0
    25ae:	46bd      	mov	sp, r7
    25b0:	b004      	add	sp, #16
    25b2:	bd80      	pop	{r7, pc}
    25b4:	000022dd 	.word	0x000022dd
    25b8:	20006b98 	.word	0x20006b98
    25bc:	00002325 	.word	0x00002325
    25c0:	20006b94 	.word	0x20006b94
    25c4:	00002681 	.word	0x00002681

000025c8 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b084      	sub	sp, #16
    25cc:	af00      	add	r7, sp, #0
    25ce:	1c02      	adds	r2, r0, #0
    25d0:	1dfb      	adds	r3, r7, #7
    25d2:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	irqflags_t flags = cpu_irq_save();
    25d4:	4b25      	ldr	r3, [pc, #148]	; (266c <udi_hid_kbd_down+0xa4>)
    25d6:	4798      	blx	r3
    25d8:	1c03      	adds	r3, r0, #0
    25da:	60bb      	str	r3, [r7, #8]

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    25dc:	1c3b      	adds	r3, r7, #0
    25de:	330f      	adds	r3, #15
    25e0:	2202      	movs	r2, #2
    25e2:	701a      	strb	r2, [r3, #0]
    25e4:	e01d      	b.n	2622 <udi_hid_kbd_down+0x5a>
		if (0 == udi_hid_kbd_report[i])
    25e6:	1c3b      	adds	r3, r7, #0
    25e8:	330f      	adds	r3, #15
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	4a20      	ldr	r2, [pc, #128]	; (2670 <udi_hid_kbd_down+0xa8>)
    25ee:	5cd3      	ldrb	r3, [r2, r3]
    25f0:	2b00      	cmp	r3, #0
    25f2:	d100      	bne.n	25f6 <udi_hid_kbd_down+0x2e>
			break;
    25f4:	e01a      	b.n	262c <udi_hid_kbd_down+0x64>
		if (key_id == udi_hid_kbd_report[i]) {
    25f6:	1c3b      	adds	r3, r7, #0
    25f8:	330f      	adds	r3, #15
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	4a1c      	ldr	r2, [pc, #112]	; (2670 <udi_hid_kbd_down+0xa8>)
    25fe:	5cd3      	ldrb	r3, [r2, r3]
    2600:	1dfa      	adds	r2, r7, #7
    2602:	7812      	ldrb	r2, [r2, #0]
    2604:	429a      	cmp	r2, r3
    2606:	d105      	bne.n	2614 <udi_hid_kbd_down+0x4c>
			// Already in array
			cpu_irq_restore(flags);
    2608:	68bb      	ldr	r3, [r7, #8]
    260a:	1c18      	adds	r0, r3, #0
    260c:	4b19      	ldr	r3, [pc, #100]	; (2674 <udi_hid_kbd_down+0xac>)
    260e:	4798      	blx	r3
			return true;
    2610:	2301      	movs	r3, #1
    2612:	e027      	b.n	2664 <udi_hid_kbd_down+0x9c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2614:	1c3b      	adds	r3, r7, #0
    2616:	330f      	adds	r3, #15
    2618:	781a      	ldrb	r2, [r3, #0]
    261a:	1c3b      	adds	r3, r7, #0
    261c:	330f      	adds	r3, #15
    261e:	3201      	adds	r2, #1
    2620:	701a      	strb	r2, [r3, #0]
    2622:	1c3b      	adds	r3, r7, #0
    2624:	330f      	adds	r3, #15
    2626:	781b      	ldrb	r3, [r3, #0]
    2628:	2b07      	cmp	r3, #7
    262a:	d9dc      	bls.n	25e6 <udi_hid_kbd_down+0x1e>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    262c:	1c3b      	adds	r3, r7, #0
    262e:	330f      	adds	r3, #15
    2630:	781b      	ldrb	r3, [r3, #0]
    2632:	2b08      	cmp	r3, #8
    2634:	d105      	bne.n	2642 <udi_hid_kbd_down+0x7a>
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
    2636:	68bb      	ldr	r3, [r7, #8]
    2638:	1c18      	adds	r0, r3, #0
    263a:	4b0e      	ldr	r3, [pc, #56]	; (2674 <udi_hid_kbd_down+0xac>)
    263c:	4798      	blx	r3
		return false;
    263e:	2300      	movs	r3, #0
    2640:	e010      	b.n	2664 <udi_hid_kbd_down+0x9c>
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    2642:	1c3b      	adds	r3, r7, #0
    2644:	330f      	adds	r3, #15
    2646:	781b      	ldrb	r3, [r3, #0]
    2648:	4a09      	ldr	r2, [pc, #36]	; (2670 <udi_hid_kbd_down+0xa8>)
    264a:	1df9      	adds	r1, r7, #7
    264c:	7809      	ldrb	r1, [r1, #0]
    264e:	54d1      	strb	r1, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    2650:	4b09      	ldr	r3, [pc, #36]	; (2678 <udi_hid_kbd_down+0xb0>)
    2652:	2201      	movs	r2, #1
    2654:	701a      	strb	r2, [r3, #0]

	// Send report
	udi_hid_kbd_send_report();
    2656:	4b09      	ldr	r3, [pc, #36]	; (267c <udi_hid_kbd_down+0xb4>)
    2658:	4798      	blx	r3

	// Enable IT
	cpu_irq_restore(flags);
    265a:	68bb      	ldr	r3, [r7, #8]
    265c:	1c18      	adds	r0, r3, #0
    265e:	4b05      	ldr	r3, [pc, #20]	; (2674 <udi_hid_kbd_down+0xac>)
    2660:	4798      	blx	r3
	return true;
    2662:	2301      	movs	r3, #1
}
    2664:	1c18      	adds	r0, r3, #0
    2666:	46bd      	mov	sp, r7
    2668:	b004      	add	sp, #16
    266a:	bd80      	pop	{r7, pc}
    266c:	000022dd 	.word	0x000022dd
    2670:	20006b98 	.word	0x20006b98
    2674:	00002325 	.word	0x00002325
    2678:	20006b94 	.word	0x20006b94
    267c:	00002681 	.word	0x00002681

00002680 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
    2680:	b590      	push	{r4, r7, lr}
    2682:	b083      	sub	sp, #12
    2684:	af02      	add	r7, sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    2686:	4b10      	ldr	r3, [pc, #64]	; (26c8 <udi_hid_kbd_send_report+0x48>)
    2688:	781b      	ldrb	r3, [r3, #0]
    268a:	2b00      	cmp	r3, #0
    268c:	d001      	beq.n	2692 <udi_hid_kbd_send_report+0x12>
		return false;
    268e:	2300      	movs	r3, #0
    2690:	e015      	b.n	26be <udi_hid_kbd_send_report+0x3e>
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    2692:	4b0e      	ldr	r3, [pc, #56]	; (26cc <udi_hid_kbd_send_report+0x4c>)
    2694:	4a0e      	ldr	r2, [pc, #56]	; (26d0 <udi_hid_kbd_send_report+0x50>)
    2696:	ca03      	ldmia	r2!, {r0, r1}
    2698:	c303      	stmia	r3!, {r0, r1}
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
    269a:	4b0e      	ldr	r3, [pc, #56]	; (26d4 <udi_hid_kbd_send_report+0x54>)
    269c:	2200      	movs	r2, #0
    269e:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    26a0:	4b0a      	ldr	r3, [pc, #40]	; (26cc <udi_hid_kbd_send_report+0x4c>)
    26a2:	4a0d      	ldr	r2, [pc, #52]	; (26d8 <udi_hid_kbd_send_report+0x58>)
    26a4:	9200      	str	r2, [sp, #0]
    26a6:	2084      	movs	r0, #132	; 0x84
    26a8:	2100      	movs	r1, #0
    26aa:	1c1a      	adds	r2, r3, #0
    26ac:	2308      	movs	r3, #8
    26ae:	4c0b      	ldr	r4, [pc, #44]	; (26dc <udi_hid_kbd_send_report+0x5c>)
    26b0:	47a0      	blx	r4
    26b2:	1c03      	adds	r3, r0, #0
    26b4:	1c1a      	adds	r2, r3, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
    26b6:	4b04      	ldr	r3, [pc, #16]	; (26c8 <udi_hid_kbd_send_report+0x48>)
    26b8:	701a      	strb	r2, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
    26ba:	4b03      	ldr	r3, [pc, #12]	; (26c8 <udi_hid_kbd_send_report+0x48>)
    26bc:	781b      	ldrb	r3, [r3, #0]
}
    26be:	1c18      	adds	r0, r3, #0
    26c0:	46bd      	mov	sp, r7
    26c2:	b001      	add	sp, #4
    26c4:	bd90      	pop	{r4, r7, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	20006ba0 	.word	0x20006ba0
    26cc:	20006ba4 	.word	0x20006ba4
    26d0:	20006b98 	.word	0x20006b98
    26d4:	20006b94 	.word	0x20006b94
    26d8:	000026e1 	.word	0x000026e1
    26dc:	0000793d 	.word	0x0000793d

000026e0 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b082      	sub	sp, #8
    26e4:	af00      	add	r7, sp, #0
    26e6:	6039      	str	r1, [r7, #0]
    26e8:	1dfb      	adds	r3, r7, #7
    26ea:	1c01      	adds	r1, r0, #0
    26ec:	7019      	strb	r1, [r3, #0]
    26ee:	1dbb      	adds	r3, r7, #6
    26f0:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
    26f2:	4b06      	ldr	r3, [pc, #24]	; (270c <udi_hid_kbd_report_sent+0x2c>)
    26f4:	2200      	movs	r2, #0
    26f6:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    26f8:	4b05      	ldr	r3, [pc, #20]	; (2710 <udi_hid_kbd_report_sent+0x30>)
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d001      	beq.n	2704 <udi_hid_kbd_report_sent+0x24>
		udi_hid_kbd_send_report();
    2700:	4b04      	ldr	r3, [pc, #16]	; (2714 <udi_hid_kbd_report_sent+0x34>)
    2702:	4798      	blx	r3
	}
}
    2704:	46bd      	mov	sp, r7
    2706:	b002      	add	sp, #8
    2708:	bd80      	pop	{r7, pc}
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	20006ba0 	.word	0x20006ba0
    2710:	20006b94 	.word	0x20006b94
    2714:	00002681 	.word	0x00002681

00002718 <udi_hid_kbd_setreport_valid>:

static void udi_hid_kbd_setreport_valid(void)
{
    2718:	b580      	push	{r7, lr}
    271a:	af00      	add	r7, sp, #0
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
    271c:	4b03      	ldr	r3, [pc, #12]	; (272c <udi_hid_kbd_setreport_valid+0x14>)
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	1c18      	adds	r0, r3, #0
    2722:	4b03      	ldr	r3, [pc, #12]	; (2730 <udi_hid_kbd_setreport_valid+0x18>)
    2724:	4798      	blx	r3
}
    2726:	46bd      	mov	sp, r7
    2728:	bd80      	pop	{r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	20006b90 	.word	0x20006b90
    2730:	00000db1 	.word	0x00000db1

00002734 <udi_hid_mouse_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_mouse_enable(void)
{
    2734:	b580      	push	{r7, lr}
    2736:	af00      	add	r7, sp, #0
	// Initialize internal value
	udi_hid_mouse_rate = 0;
    2738:	4b0b      	ldr	r3, [pc, #44]	; (2768 <udi_hid_mouse_enable+0x34>)
    273a:	2200      	movs	r2, #0
    273c:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_protocol = 0;
    273e:	4b0b      	ldr	r3, [pc, #44]	; (276c <udi_hid_mouse_enable+0x38>)
    2740:	2200      	movs	r2, #0
    2742:	701a      	strb	r2, [r3, #0]
	udi_hid_mouse_report_trans_ongoing = false;
    2744:	4b0a      	ldr	r3, [pc, #40]	; (2770 <udi_hid_mouse_enable+0x3c>)
    2746:	2200      	movs	r2, #0
    2748:	701a      	strb	r2, [r3, #0]
	memset(udi_hid_mouse_report, 0, UDI_HID_MOUSE_REPORT_SIZE);
    274a:	4b0a      	ldr	r3, [pc, #40]	; (2774 <udi_hid_mouse_enable+0x40>)
    274c:	1c18      	adds	r0, r3, #0
    274e:	2100      	movs	r1, #0
    2750:	2204      	movs	r2, #4
    2752:	4b09      	ldr	r3, [pc, #36]	; (2778 <udi_hid_mouse_enable+0x44>)
    2754:	4798      	blx	r3
	udi_hid_mouse_b_report_valid = false;
    2756:	4b09      	ldr	r3, [pc, #36]	; (277c <udi_hid_mouse_enable+0x48>)
    2758:	2200      	movs	r2, #0
    275a:	701a      	strb	r2, [r3, #0]
	return UDI_HID_MOUSE_ENABLE_EXT();
    275c:	4b08      	ldr	r3, [pc, #32]	; (2780 <udi_hid_mouse_enable+0x4c>)
    275e:	4798      	blx	r3
    2760:	1c03      	adds	r3, r0, #0
}
    2762:	1c18      	adds	r0, r3, #0
    2764:	46bd      	mov	sp, r7
    2766:	bd80      	pop	{r7, pc}
    2768:	20006bac 	.word	0x20006bac
    276c:	20006bb0 	.word	0x20006bb0
    2770:	20006bbc 	.word	0x20006bbc
    2774:	20006bb8 	.word	0x20006bb8
    2778:	0000b0bf 	.word	0x0000b0bf
    277c:	20006bb4 	.word	0x20006bb4
    2780:	0000a819 	.word	0x0000a819

00002784 <udi_hid_mouse_disable>:


void udi_hid_mouse_disable(void)
{
    2784:	b580      	push	{r7, lr}
    2786:	af00      	add	r7, sp, #0
	UDI_HID_MOUSE_DISABLE_EXT();
    2788:	4b01      	ldr	r3, [pc, #4]	; (2790 <udi_hid_mouse_disable+0xc>)
    278a:	4798      	blx	r3
}
    278c:	46bd      	mov	sp, r7
    278e:	bd80      	pop	{r7, pc}
    2790:	0000a831 	.word	0x0000a831

00002794 <udi_hid_mouse_setup>:


bool udi_hid_mouse_setup(void)
{
    2794:	b598      	push	{r3, r4, r7, lr}
    2796:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_mouse_rate,
    2798:	4804      	ldr	r0, [pc, #16]	; (27ac <udi_hid_mouse_setup+0x18>)
    279a:	4905      	ldr	r1, [pc, #20]	; (27b0 <udi_hid_mouse_setup+0x1c>)
    279c:	4a05      	ldr	r2, [pc, #20]	; (27b4 <udi_hid_mouse_setup+0x20>)
    279e:	4b06      	ldr	r3, [pc, #24]	; (27b8 <udi_hid_mouse_setup+0x24>)
    27a0:	4c06      	ldr	r4, [pc, #24]	; (27bc <udi_hid_mouse_setup+0x28>)
    27a2:	47a0      	blx	r4
    27a4:	1c03      	adds	r3, r0, #0
								&udi_hid_mouse_protocol,
								(uint8_t *) &udi_hid_mouse_report_desc,
								udi_hid_mouse_setreport);
}
    27a6:	1c18      	adds	r0, r3, #0
    27a8:	46bd      	mov	sp, r7
    27aa:	bd98      	pop	{r3, r4, r7, pc}
    27ac:	20006bac 	.word	0x20006bac
    27b0:	20006bb0 	.word	0x20006bb0
    27b4:	20000164 	.word	0x20000164
    27b8:	000027cd 	.word	0x000027cd
    27bc:	000027d9 	.word	0x000027d9

000027c0 <udi_hid_mouse_getsetting>:


uint8_t udi_hid_mouse_getsetting(void)
{
    27c0:	b580      	push	{r7, lr}
    27c2:	af00      	add	r7, sp, #0
	return 0;
    27c4:	2300      	movs	r3, #0
}
    27c6:	1c18      	adds	r0, r3, #0
    27c8:	46bd      	mov	sp, r7
    27ca:	bd80      	pop	{r7, pc}

000027cc <udi_hid_mouse_setreport>:


static bool udi_hid_mouse_setreport(void)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	af00      	add	r7, sp, #0
	return false;
    27d0:	2300      	movs	r3, #0
}
    27d2:	1c18      	adds	r0, r3, #0
    27d4:	46bd      	mov	sp, r7
    27d6:	bd80      	pop	{r7, pc}

000027d8 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    27d8:	b580      	push	{r7, lr}
    27da:	b084      	sub	sp, #16
    27dc:	af00      	add	r7, sp, #0
    27de:	60f8      	str	r0, [r7, #12]
    27e0:	60b9      	str	r1, [r7, #8]
    27e2:	607a      	str	r2, [r7, #4]
    27e4:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    27e6:	4b36      	ldr	r3, [pc, #216]	; (28c0 <udi_hid_setup+0xe8>)
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	b2db      	uxtb	r3, r3
    27ec:	b25b      	sxtb	r3, r3
    27ee:	2b00      	cmp	r3, #0
    27f0:	da32      	bge.n	2858 <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    27f2:	4b33      	ldr	r3, [pc, #204]	; (28c0 <udi_hid_setup+0xe8>)
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	1c1a      	adds	r2, r3, #0
    27f8:	2360      	movs	r3, #96	; 0x60
    27fa:	4013      	ands	r3, r2
    27fc:	d109      	bne.n	2812 <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    27fe:	4b30      	ldr	r3, [pc, #192]	; (28c0 <udi_hid_setup+0xe8>)
    2800:	785b      	ldrb	r3, [r3, #1]
    2802:	2b06      	cmp	r3, #6
    2804:	d105      	bne.n	2812 <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	1c18      	adds	r0, r3, #0
    280a:	4b2e      	ldr	r3, [pc, #184]	; (28c4 <udi_hid_setup+0xec>)
    280c:	4798      	blx	r3
    280e:	1c03      	adds	r3, r0, #0
    2810:	e052      	b.n	28b8 <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2812:	4b2b      	ldr	r3, [pc, #172]	; (28c0 <udi_hid_setup+0xe8>)
    2814:	781b      	ldrb	r3, [r3, #0]
    2816:	1c1a      	adds	r2, r3, #0
    2818:	2360      	movs	r3, #96	; 0x60
    281a:	4013      	ands	r3, r2
    281c:	2b20      	cmp	r3, #32
    281e:	d11b      	bne.n	2858 <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2820:	4b27      	ldr	r3, [pc, #156]	; (28c0 <udi_hid_setup+0xe8>)
    2822:	785b      	ldrb	r3, [r3, #1]
    2824:	2b02      	cmp	r3, #2
    2826:	d007      	beq.n	2838 <udi_hid_setup+0x60>
    2828:	2b03      	cmp	r3, #3
    282a:	d00d      	beq.n	2848 <udi_hid_setup+0x70>
    282c:	2b01      	cmp	r3, #1
    282e:	d113      	bne.n	2858 <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    2830:	683b      	ldr	r3, [r7, #0]
    2832:	4798      	blx	r3
    2834:	1c03      	adds	r3, r0, #0
    2836:	e03f      	b.n	28b8 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    2838:	4b21      	ldr	r3, [pc, #132]	; (28c0 <udi_hid_setup+0xe8>)
    283a:	68fa      	ldr	r2, [r7, #12]
    283c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    283e:	4b20      	ldr	r3, [pc, #128]	; (28c0 <udi_hid_setup+0xe8>)
    2840:	2201      	movs	r2, #1
    2842:	819a      	strh	r2, [r3, #12]
				return true;
    2844:	2301      	movs	r3, #1
    2846:	e037      	b.n	28b8 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    2848:	4b1d      	ldr	r3, [pc, #116]	; (28c0 <udi_hid_setup+0xe8>)
    284a:	68ba      	ldr	r2, [r7, #8]
    284c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    284e:	4b1c      	ldr	r3, [pc, #112]	; (28c0 <udi_hid_setup+0xe8>)
    2850:	2201      	movs	r2, #1
    2852:	819a      	strh	r2, [r3, #12]
				return true;
    2854:	2301      	movs	r3, #1
    2856:	e02f      	b.n	28b8 <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2858:	4b19      	ldr	r3, [pc, #100]	; (28c0 <udi_hid_setup+0xe8>)
    285a:	781b      	ldrb	r3, [r3, #0]
    285c:	b2db      	uxtb	r3, r3
    285e:	b25b      	sxtb	r3, r3
    2860:	2b00      	cmp	r3, #0
    2862:	db28      	blt.n	28b6 <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2864:	4b16      	ldr	r3, [pc, #88]	; (28c0 <udi_hid_setup+0xe8>)
    2866:	781b      	ldrb	r3, [r3, #0]
    2868:	1c1a      	adds	r2, r3, #0
    286a:	2360      	movs	r3, #96	; 0x60
    286c:	4013      	ands	r3, r2
    286e:	2b20      	cmp	r3, #32
    2870:	d121      	bne.n	28b6 <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2872:	4b13      	ldr	r3, [pc, #76]	; (28c0 <udi_hid_setup+0xe8>)
    2874:	785b      	ldrb	r3, [r3, #1]
    2876:	2b0a      	cmp	r3, #10
    2878:	d007      	beq.n	288a <udi_hid_setup+0xb2>
    287a:	2b0b      	cmp	r3, #11
    287c:	d00e      	beq.n	289c <udi_hid_setup+0xc4>
    287e:	2b09      	cmp	r3, #9
    2880:	d119      	bne.n	28b6 <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    2882:	683b      	ldr	r3, [r7, #0]
    2884:	4798      	blx	r3
    2886:	1c03      	adds	r3, r0, #0
    2888:	e016      	b.n	28b8 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    288a:	4b0d      	ldr	r3, [pc, #52]	; (28c0 <udi_hid_setup+0xe8>)
    288c:	885b      	ldrh	r3, [r3, #2]
    288e:	0a1b      	lsrs	r3, r3, #8
    2890:	b29b      	uxth	r3, r3
    2892:	b2da      	uxtb	r2, r3
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	701a      	strb	r2, [r3, #0]
				return true;
    2898:	2301      	movs	r3, #1
    289a:	e00d      	b.n	28b8 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    289c:	4b08      	ldr	r3, [pc, #32]	; (28c0 <udi_hid_setup+0xe8>)
    289e:	88db      	ldrh	r3, [r3, #6]
    28a0:	2b00      	cmp	r3, #0
    28a2:	d001      	beq.n	28a8 <udi_hid_setup+0xd0>
					return false;
    28a4:	2300      	movs	r3, #0
    28a6:	e007      	b.n	28b8 <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    28a8:	4b05      	ldr	r3, [pc, #20]	; (28c0 <udi_hid_setup+0xe8>)
    28aa:	885b      	ldrh	r3, [r3, #2]
    28ac:	b2da      	uxtb	r2, r3
    28ae:	68bb      	ldr	r3, [r7, #8]
    28b0:	701a      	strb	r2, [r3, #0]
				return true;
    28b2:	2301      	movs	r3, #1
    28b4:	e000      	b.n	28b8 <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    28b6:	2300      	movs	r3, #0
}
    28b8:	1c18      	adds	r0, r3, #0
    28ba:	46bd      	mov	sp, r7
    28bc:	b004      	add	sp, #16
    28be:	bd80      	pop	{r7, pc}
    28c0:	20006fc4 	.word	0x20006fc4
    28c4:	000028c9 	.word	0x000028c9

000028c8 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b084      	sub	sp, #16
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    28d0:	4b22      	ldr	r3, [pc, #136]	; (295c <udi_hid_reqstdifaceget_descriptor+0x94>)
    28d2:	4798      	blx	r3
    28d4:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    28d6:	3309      	adds	r3, #9
    28d8:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    28da:	68fb      	ldr	r3, [r7, #12]
    28dc:	785b      	ldrb	r3, [r3, #1]
    28de:	2b21      	cmp	r3, #33	; 0x21
    28e0:	d001      	beq.n	28e6 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    28e2:	2300      	movs	r3, #0
    28e4:	e036      	b.n	2954 <udi_hid_reqstdifaceget_descriptor+0x8c>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    28e6:	4b1e      	ldr	r3, [pc, #120]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    28e8:	885b      	ldrh	r3, [r3, #2]
    28ea:	0a1b      	lsrs	r3, r3, #8
    28ec:	b29b      	uxth	r3, r3
    28ee:	b2db      	uxtb	r3, r3
    28f0:	2b21      	cmp	r3, #33	; 0x21
    28f2:	d110      	bne.n	2916 <udi_hid_reqstdifaceget_descriptor+0x4e>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    28f4:	4b1a      	ldr	r3, [pc, #104]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    28f6:	68fa      	ldr	r2, [r7, #12]
    28f8:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    28fa:	68fb      	ldr	r3, [r7, #12]
    28fc:	781b      	ldrb	r3, [r3, #0]
    28fe:	4a18      	ldr	r2, [pc, #96]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2900:	88d2      	ldrh	r2, [r2, #6]
    2902:	b298      	uxth	r0, r3
    2904:	b291      	uxth	r1, r2
    2906:	4288      	cmp	r0, r1
    2908:	d900      	bls.n	290c <udi_hid_reqstdifaceget_descriptor+0x44>
    290a:	1c13      	adds	r3, r2, #0
    290c:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    290e:	4b14      	ldr	r3, [pc, #80]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    2910:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    2912:	2301      	movs	r3, #1
    2914:	e01e      	b.n	2954 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2916:	68fb      	ldr	r3, [r7, #12]
    2918:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    291a:	4b11      	ldr	r3, [pc, #68]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    291c:	885b      	ldrh	r3, [r3, #2]
    291e:	0a1b      	lsrs	r3, r3, #8
    2920:	b29b      	uxth	r3, r3
    2922:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2924:	429a      	cmp	r2, r3
    2926:	d114      	bne.n	2952 <udi_hid_reqstdifaceget_descriptor+0x8a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    2928:	4b0d      	ldr	r3, [pc, #52]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    292a:	687a      	ldr	r2, [r7, #4]
    292c:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    292e:	68fb      	ldr	r3, [r7, #12]
    2930:	79da      	ldrb	r2, [r3, #7]
    2932:	7a1b      	ldrb	r3, [r3, #8]
    2934:	021b      	lsls	r3, r3, #8
    2936:	4313      	orrs	r3, r2
    2938:	b29b      	uxth	r3, r3
    293a:	4a09      	ldr	r2, [pc, #36]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    293c:	88d2      	ldrh	r2, [r2, #6]
    293e:	b298      	uxth	r0, r3
    2940:	b291      	uxth	r1, r2
    2942:	4288      	cmp	r0, r1
    2944:	d900      	bls.n	2948 <udi_hid_reqstdifaceget_descriptor+0x80>
    2946:	1c13      	adds	r3, r2, #0
    2948:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    294a:	4b05      	ldr	r3, [pc, #20]	; (2960 <udi_hid_reqstdifaceget_descriptor+0x98>)
    294c:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    294e:	2301      	movs	r3, #1
    2950:	e000      	b.n	2954 <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	return false;
    2952:	2300      	movs	r3, #0
}
    2954:	1c18      	adds	r0, r3, #0
    2956:	46bd      	mov	sp, r7
    2958:	b004      	add	sp, #16
    295a:	bd80      	pop	{r7, pc}
    295c:	0000379d 	.word	0x0000379d
    2960:	20006fc4 	.word	0x20006fc4

00002964 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
    2964:	b580      	push	{r7, lr}
    2966:	b082      	sub	sp, #8
    2968:	af00      	add	r7, sp, #0
	uint8_t lun;
	udi_msc_b_trans_req = false;
    296a:	4b22      	ldr	r3, [pc, #136]	; (29f4 <udi_msc_enable+0x90>)
    296c:	2200      	movs	r2, #0
    296e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_cbw_invalid = false;
    2970:	4b21      	ldr	r3, [pc, #132]	; (29f8 <udi_msc_enable+0x94>)
    2972:	2200      	movs	r2, #0
    2974:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    2976:	4b21      	ldr	r3, [pc, #132]	; (29fc <udi_msc_enable+0x98>)
    2978:	2201      	movs	r2, #1
    297a:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    297c:	4b20      	ldr	r3, [pc, #128]	; (2a00 <udi_msc_enable+0x9c>)
    297e:	2201      	movs	r2, #1
    2980:	701a      	strb	r2, [r3, #0]
	udi_msc_nb_lun = get_nb_lun();
    2982:	4b20      	ldr	r3, [pc, #128]	; (2a04 <udi_msc_enable+0xa0>)
    2984:	4798      	blx	r3
    2986:	1c03      	adds	r3, r0, #0
    2988:	1c1a      	adds	r2, r3, #0
    298a:	4b1f      	ldr	r3, [pc, #124]	; (2a08 <udi_msc_enable+0xa4>)
    298c:	701a      	strb	r2, [r3, #0]
	if (0 == udi_msc_nb_lun)
    298e:	4b1e      	ldr	r3, [pc, #120]	; (2a08 <udi_msc_enable+0xa4>)
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	2b00      	cmp	r3, #0
    2994:	d101      	bne.n	299a <udi_msc_enable+0x36>
		return false; // No lun available, then not authorize to enable interface
    2996:	2300      	movs	r3, #0
    2998:	e027      	b.n	29ea <udi_msc_enable+0x86>
	udi_msc_nb_lun--;
    299a:	4b1b      	ldr	r3, [pc, #108]	; (2a08 <udi_msc_enable+0xa4>)
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	3b01      	subs	r3, #1
    29a0:	b2da      	uxtb	r2, r3
    29a2:	4b19      	ldr	r3, [pc, #100]	; (2a08 <udi_msc_enable+0xa4>)
    29a4:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
    29a6:	4b19      	ldr	r3, [pc, #100]	; (2a0c <udi_msc_enable+0xa8>)
    29a8:	4798      	blx	r3
    29aa:	1c03      	adds	r3, r0, #0
    29ac:	2201      	movs	r2, #1
    29ae:	4053      	eors	r3, r2
    29b0:	b2db      	uxtb	r3, r3
    29b2:	2b00      	cmp	r3, #0
    29b4:	d001      	beq.n	29ba <udi_msc_enable+0x56>
		return false;
    29b6:	2300      	movs	r3, #0
    29b8:	e017      	b.n	29ea <udi_msc_enable+0x86>
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    29ba:	1dfb      	adds	r3, r7, #7
    29bc:	2200      	movs	r2, #0
    29be:	701a      	strb	r2, [r3, #0]
    29c0:	e00a      	b.n	29d8 <udi_msc_enable+0x74>
		mem_unload(lun, false);
    29c2:	1dfb      	adds	r3, r7, #7
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	1c18      	adds	r0, r3, #0
    29c8:	2100      	movs	r1, #0
    29ca:	4b11      	ldr	r3, [pc, #68]	; (2a10 <udi_msc_enable+0xac>)
    29cc:	4798      	blx	r3
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    29ce:	1dfb      	adds	r3, r7, #7
    29d0:	781a      	ldrb	r2, [r3, #0]
    29d2:	1dfb      	adds	r3, r7, #7
    29d4:	3201      	adds	r2, #1
    29d6:	701a      	strb	r2, [r3, #0]
    29d8:	4b0b      	ldr	r3, [pc, #44]	; (2a08 <udi_msc_enable+0xa4>)
    29da:	781b      	ldrb	r3, [r3, #0]
    29dc:	1dfa      	adds	r2, r7, #7
    29de:	7812      	ldrb	r2, [r2, #0]
    29e0:	429a      	cmp	r2, r3
    29e2:	d9ee      	bls.n	29c2 <udi_msc_enable+0x5e>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
    29e4:	4b0b      	ldr	r3, [pc, #44]	; (2a14 <udi_msc_enable+0xb0>)
    29e6:	4798      	blx	r3
	return true;
    29e8:	2301      	movs	r3, #1
}
    29ea:	1c18      	adds	r0, r3, #0
    29ec:	46bd      	mov	sp, r7
    29ee:	b002      	add	sp, #8
    29f0:	bd80      	pop	{r7, pc}
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	20006bf9 	.word	0x20006bf9
    29f8:	20006bf8 	.word	0x20006bf8
    29fc:	200001bc 	.word	0x200001bc
    2a00:	200001bd 	.word	0x200001bd
    2a04:	00000f1d 	.word	0x00000f1d
    2a08:	20006be0 	.word	0x20006be0
    2a0c:	0000a7ed 	.word	0x0000a7ed
    2a10:	00000fb1 	.word	0x00000fb1
    2a14:	00002b8d 	.word	0x00002b8d

00002a18 <udi_msc_disable>:


void udi_msc_disable(void)
{
    2a18:	b580      	push	{r7, lr}
    2a1a:	af00      	add	r7, sp, #0
	udi_msc_b_trans_req = false;
    2a1c:	4b06      	ldr	r3, [pc, #24]	; (2a38 <udi_msc_disable+0x20>)
    2a1e:	2200      	movs	r2, #0
    2a20:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    2a22:	4b06      	ldr	r3, [pc, #24]	; (2a3c <udi_msc_disable+0x24>)
    2a24:	2201      	movs	r2, #1
    2a26:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
    2a28:	4b05      	ldr	r3, [pc, #20]	; (2a40 <udi_msc_disable+0x28>)
    2a2a:	2201      	movs	r2, #1
    2a2c:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
    2a2e:	4b05      	ldr	r3, [pc, #20]	; (2a44 <udi_msc_disable+0x2c>)
    2a30:	4798      	blx	r3
}
    2a32:	46bd      	mov	sp, r7
    2a34:	bd80      	pop	{r7, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	20006bf9 	.word	0x20006bf9
    2a3c:	200001bc 	.word	0x200001bc
    2a40:	200001bd 	.word	0x200001bd
    2a44:	0000a805 	.word	0x0000a805

00002a48 <udi_msc_setup>:


bool udi_msc_setup(void)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    2a4c:	4b2a      	ldr	r3, [pc, #168]	; (2af8 <udi_msc_setup+0xb0>)
    2a4e:	781b      	ldrb	r3, [r3, #0]
    2a50:	b2db      	uxtb	r3, r3
    2a52:	b25b      	sxtb	r3, r3
    2a54:	2b00      	cmp	r3, #0
    2a56:	da1e      	bge.n	2a96 <udi_msc_setup+0x4e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2a58:	4b27      	ldr	r3, [pc, #156]	; (2af8 <udi_msc_setup+0xb0>)
    2a5a:	781b      	ldrb	r3, [r3, #0]
    2a5c:	1c1a      	adds	r2, r3, #0
    2a5e:	2360      	movs	r3, #96	; 0x60
    2a60:	4013      	ands	r3, r2
    2a62:	2b20      	cmp	r3, #32
    2a64:	d117      	bne.n	2a96 <udi_msc_setup+0x4e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    2a66:	4b24      	ldr	r3, [pc, #144]	; (2af8 <udi_msc_setup+0xb0>)
    2a68:	785b      	ldrb	r3, [r3, #1]
    2a6a:	2bfe      	cmp	r3, #254	; 0xfe
    2a6c:	d113      	bne.n	2a96 <udi_msc_setup+0x4e>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
    2a6e:	4b22      	ldr	r3, [pc, #136]	; (2af8 <udi_msc_setup+0xb0>)
    2a70:	88db      	ldrh	r3, [r3, #6]
    2a72:	2b01      	cmp	r3, #1
    2a74:	d001      	beq.n	2a7a <udi_msc_setup+0x32>
					return false;	// Error for USB host
    2a76:	2300      	movs	r3, #0
    2a78:	e03b      	b.n	2af2 <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    2a7a:	4b1f      	ldr	r3, [pc, #124]	; (2af8 <udi_msc_setup+0xb0>)
    2a7c:	885b      	ldrh	r3, [r3, #2]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d001      	beq.n	2a86 <udi_msc_setup+0x3e>
					return false;
    2a82:	2300      	movs	r3, #0
    2a84:	e035      	b.n	2af2 <udi_msc_setup+0xaa>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    2a86:	4b1c      	ldr	r3, [pc, #112]	; (2af8 <udi_msc_setup+0xb0>)
    2a88:	4a1c      	ldr	r2, [pc, #112]	; (2afc <udi_msc_setup+0xb4>)
    2a8a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2a8c:	4b1a      	ldr	r3, [pc, #104]	; (2af8 <udi_msc_setup+0xb0>)
    2a8e:	2201      	movs	r2, #1
    2a90:	819a      	strh	r2, [r3, #12]
				return true;
    2a92:	2301      	movs	r3, #1
    2a94:	e02d      	b.n	2af2 <udi_msc_setup+0xaa>
			}
		}
	}
	if (Udd_setup_is_out()) {
    2a96:	4b18      	ldr	r3, [pc, #96]	; (2af8 <udi_msc_setup+0xb0>)
    2a98:	781b      	ldrb	r3, [r3, #0]
    2a9a:	b2db      	uxtb	r3, r3
    2a9c:	b25b      	sxtb	r3, r3
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	db26      	blt.n	2af0 <udi_msc_setup+0xa8>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2aa2:	4b15      	ldr	r3, [pc, #84]	; (2af8 <udi_msc_setup+0xb0>)
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	1c1a      	adds	r2, r3, #0
    2aa8:	2360      	movs	r3, #96	; 0x60
    2aaa:	4013      	ands	r3, r2
    2aac:	2b20      	cmp	r3, #32
    2aae:	d11f      	bne.n	2af0 <udi_msc_setup+0xa8>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    2ab0:	4b11      	ldr	r3, [pc, #68]	; (2af8 <udi_msc_setup+0xb0>)
    2ab2:	785b      	ldrb	r3, [r3, #1]
    2ab4:	2bff      	cmp	r3, #255	; 0xff
    2ab6:	d11b      	bne.n	2af0 <udi_msc_setup+0xa8>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
    2ab8:	4b0f      	ldr	r3, [pc, #60]	; (2af8 <udi_msc_setup+0xb0>)
    2aba:	88db      	ldrh	r3, [r3, #6]
    2abc:	2b00      	cmp	r3, #0
    2abe:	d001      	beq.n	2ac4 <udi_msc_setup+0x7c>
					return false;
    2ac0:	2300      	movs	r3, #0
    2ac2:	e016      	b.n	2af2 <udi_msc_setup+0xaa>
				if (0 != udd_g_ctrlreq.req.wValue)
    2ac4:	4b0c      	ldr	r3, [pc, #48]	; (2af8 <udi_msc_setup+0xb0>)
    2ac6:	885b      	ldrh	r3, [r3, #2]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d001      	beq.n	2ad0 <udi_msc_setup+0x88>
					return false;
    2acc:	2300      	movs	r3, #0
    2ace:	e010      	b.n	2af2 <udi_msc_setup+0xaa>
				udi_msc_b_cbw_invalid = false;
    2ad0:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <udi_msc_setup+0xb8>)
    2ad2:	2200      	movs	r2, #0
    2ad4:	701a      	strb	r2, [r3, #0]
				udi_msc_b_trans_req = false;
    2ad6:	4b0b      	ldr	r3, [pc, #44]	; (2b04 <udi_msc_setup+0xbc>)
    2ad8:	2200      	movs	r2, #0
    2ada:	701a      	strb	r2, [r3, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
    2adc:	2002      	movs	r0, #2
    2ade:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <udi_msc_setup+0xc0>)
    2ae0:	4798      	blx	r3
				udd_ep_abort(UDI_MSC_EP_IN);
    2ae2:	2081      	movs	r0, #129	; 0x81
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <udi_msc_setup+0xc0>)
    2ae6:	4798      	blx	r3
				// Restart by CBW wait
				udi_msc_cbw_wait();
    2ae8:	4b08      	ldr	r3, [pc, #32]	; (2b0c <udi_msc_setup+0xc4>)
    2aea:	4798      	blx	r3
				return true;
    2aec:	2301      	movs	r3, #1
    2aee:	e000      	b.n	2af2 <udi_msc_setup+0xaa>
			}
		}
	}
	return false;	// Not supported request
    2af0:	2300      	movs	r3, #0
}
    2af2:	1c18      	adds	r0, r3, #0
    2af4:	46bd      	mov	sp, r7
    2af6:	bd80      	pop	{r7, pc}
    2af8:	20006fc4 	.word	0x20006fc4
    2afc:	20006be0 	.word	0x20006be0
    2b00:	20006bf8 	.word	0x20006bf8
    2b04:	20006bf9 	.word	0x20006bf9
    2b08:	0000747d 	.word	0x0000747d
    2b0c:	00002b8d 	.word	0x00002b8d

00002b10 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
    2b10:	b580      	push	{r7, lr}
    2b12:	af00      	add	r7, sp, #0
	return 0;	// MSC don't have multiple alternate setting
    2b14:	2300      	movs	r3, #0
}
    2b16:	1c18      	adds	r0, r3, #0
    2b18:	46bd      	mov	sp, r7
    2b1a:	bd80      	pop	{r7, pc}

00002b1c <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    2b20:	4b08      	ldr	r3, [pc, #32]	; (2b44 <udi_msc_cbw_invalid+0x28>)
    2b22:	781b      	ldrb	r3, [r3, #0]
    2b24:	2201      	movs	r2, #1
    2b26:	4053      	eors	r3, r2
    2b28:	b2db      	uxtb	r3, r3
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d000      	beq.n	2b30 <udi_msc_cbw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    2b2e:	e007      	b.n	2b40 <udi_msc_cbw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    2b30:	2002      	movs	r0, #2
    2b32:	4b05      	ldr	r3, [pc, #20]	; (2b48 <udi_msc_cbw_invalid+0x2c>)
    2b34:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    2b36:	4b05      	ldr	r3, [pc, #20]	; (2b4c <udi_msc_cbw_invalid+0x30>)
    2b38:	2002      	movs	r0, #2
    2b3a:	1c19      	adds	r1, r3, #0
    2b3c:	4b04      	ldr	r3, [pc, #16]	; (2b50 <udi_msc_cbw_invalid+0x34>)
    2b3e:	4798      	blx	r3
}
    2b40:	46bd      	mov	sp, r7
    2b42:	bd80      	pop	{r7, pc}
    2b44:	20006bf8 	.word	0x20006bf8
    2b48:	00007791 	.word	0x00007791
    2b4c:	00002b1d 	.word	0x00002b1d
    2b50:	00007861 	.word	0x00007861

00002b54 <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
    2b54:	b580      	push	{r7, lr}
    2b56:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
    2b58:	4b08      	ldr	r3, [pc, #32]	; (2b7c <udi_msc_csw_invalid+0x28>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	2201      	movs	r2, #1
    2b5e:	4053      	eors	r3, r2
    2b60:	b2db      	uxtb	r3, r3
    2b62:	2b00      	cmp	r3, #0
    2b64:	d000      	beq.n	2b68 <udi_msc_csw_invalid+0x14>
		return;	// Don't re-stall endpoint if error reseted by setup
    2b66:	e007      	b.n	2b78 <udi_msc_csw_invalid+0x24>
	udd_ep_set_halt(UDI_MSC_EP_IN);
    2b68:	2081      	movs	r0, #129	; 0x81
    2b6a:	4b05      	ldr	r3, [pc, #20]	; (2b80 <udi_msc_csw_invalid+0x2c>)
    2b6c:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    2b6e:	4b05      	ldr	r3, [pc, #20]	; (2b84 <udi_msc_csw_invalid+0x30>)
    2b70:	2081      	movs	r0, #129	; 0x81
    2b72:	1c19      	adds	r1, r3, #0
    2b74:	4b04      	ldr	r3, [pc, #16]	; (2b88 <udi_msc_csw_invalid+0x34>)
    2b76:	4798      	blx	r3
}
    2b78:	46bd      	mov	sp, r7
    2b7a:	bd80      	pop	{r7, pc}
    2b7c:	20006bf8 	.word	0x20006bf8
    2b80:	00007791 	.word	0x00007791
    2b84:	00002b55 	.word	0x00002b55
    2b88:	00007861 	.word	0x00007861

00002b8c <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
    2b8c:	b590      	push	{r4, r7, lr}
    2b8e:	b083      	sub	sp, #12
    2b90:	af02      	add	r7, sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    2b92:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <udi_msc_cbw_wait+0x34>)
    2b94:	4a0b      	ldr	r2, [pc, #44]	; (2bc4 <udi_msc_cbw_wait+0x38>)
    2b96:	9200      	str	r2, [sp, #0]
    2b98:	2002      	movs	r0, #2
    2b9a:	2101      	movs	r1, #1
    2b9c:	1c1a      	adds	r2, r3, #0
    2b9e:	231f      	movs	r3, #31
    2ba0:	4c09      	ldr	r4, [pc, #36]	; (2bc8 <udi_msc_cbw_wait+0x3c>)
    2ba2:	47a0      	blx	r4
    2ba4:	1c03      	adds	r3, r0, #0
    2ba6:	2201      	movs	r2, #1
    2ba8:	4053      	eors	r3, r2
    2baa:	b2db      	uxtb	r3, r3
    2bac:	2b00      	cmp	r3, #0
    2bae:	d004      	beq.n	2bba <udi_msc_cbw_wait+0x2e>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    2bb0:	4b06      	ldr	r3, [pc, #24]	; (2bcc <udi_msc_cbw_wait+0x40>)
    2bb2:	2002      	movs	r0, #2
    2bb4:	1c19      	adds	r1, r3, #0
    2bb6:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <udi_msc_cbw_wait+0x44>)
    2bb8:	4798      	blx	r3
	}
}
    2bba:	46bd      	mov	sp, r7
    2bbc:	b001      	add	sp, #4
    2bbe:	bd90      	pop	{r4, r7, pc}
    2bc0:	20006bc0 	.word	0x20006bc0
    2bc4:	00002bd5 	.word	0x00002bd5
    2bc8:	0000793d 	.word	0x0000793d
    2bcc:	00002b8d 	.word	0x00002b8d
    2bd0:	00007861 	.word	0x00007861

00002bd4 <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b082      	sub	sp, #8
    2bd8:	af00      	add	r7, sp, #0
    2bda:	6039      	str	r1, [r7, #0]
    2bdc:	1dfb      	adds	r3, r7, #7
    2bde:	1c01      	adds	r1, r0, #0
    2be0:	7019      	strb	r1, [r3, #0]
    2be2:	1dbb      	adds	r3, r7, #6
    2be4:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
    2be6:	1dfb      	adds	r3, r7, #7
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d000      	beq.n	2bf0 <udi_msc_cbw_received+0x1c>
		// Transfer aborted
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    2bee:	e05a      	b.n	2ca6 <udi_msc_cbw_received+0xd2>
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
    2bf0:	683b      	ldr	r3, [r7, #0]
    2bf2:	2b1f      	cmp	r3, #31
    2bf4:	d104      	bne.n	2c00 <udi_msc_cbw_received+0x2c>
			|| (udi_msc_cbw.dCBWSignature !=
    2bf6:	4b2d      	ldr	r3, [pc, #180]	; (2cac <udi_msc_cbw_received+0xd8>)
    2bf8:	681a      	ldr	r2, [r3, #0]
    2bfa:	4b2d      	ldr	r3, [pc, #180]	; (2cb0 <udi_msc_cbw_received+0xdc>)
    2bfc:	429a      	cmp	r2, r3
    2bfe:	d007      	beq.n	2c10 <udi_msc_cbw_received+0x3c>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
    2c00:	4b2c      	ldr	r3, [pc, #176]	; (2cb4 <udi_msc_cbw_received+0xe0>)
    2c02:	2201      	movs	r2, #1
    2c04:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    2c06:	4b2c      	ldr	r3, [pc, #176]	; (2cb8 <udi_msc_cbw_received+0xe4>)
    2c08:	4798      	blx	r3
		udi_msc_csw_invalid();
    2c0a:	4b2c      	ldr	r3, [pc, #176]	; (2cbc <udi_msc_cbw_received+0xe8>)
    2c0c:	4798      	blx	r3
		return;
    2c0e:	e04a      	b.n	2ca6 <udi_msc_cbw_received+0xd2>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    2c10:	4b26      	ldr	r3, [pc, #152]	; (2cac <udi_msc_cbw_received+0xd8>)
    2c12:	7b5a      	ldrb	r2, [r3, #13]
    2c14:	230f      	movs	r3, #15
    2c16:	4013      	ands	r3, r2
    2c18:	b2da      	uxtb	r2, r3
    2c1a:	4b24      	ldr	r3, [pc, #144]	; (2cac <udi_msc_cbw_received+0xd8>)
    2c1c:	735a      	strb	r2, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    2c1e:	4b23      	ldr	r3, [pc, #140]	; (2cac <udi_msc_cbw_received+0xd8>)
    2c20:	7b5a      	ldrb	r2, [r3, #13]
    2c22:	4b27      	ldr	r3, [pc, #156]	; (2cc0 <udi_msc_cbw_received+0xec>)
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	429a      	cmp	r2, r3
    2c28:	d904      	bls.n	2c34 <udi_msc_cbw_received+0x60>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
    2c2a:	4b26      	ldr	r3, [pc, #152]	; (2cc4 <udi_msc_cbw_received+0xf0>)
    2c2c:	4798      	blx	r3
		udi_msc_csw_process();
    2c2e:	4b26      	ldr	r3, [pc, #152]	; (2cc8 <udi_msc_cbw_received+0xf4>)
    2c30:	4798      	blx	r3
		return;
    2c32:	e038      	b.n	2ca6 <udi_msc_cbw_received+0xd2>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    2c34:	4b1d      	ldr	r3, [pc, #116]	; (2cac <udi_msc_cbw_received+0xd8>)
    2c36:	689a      	ldr	r2, [r3, #8]
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
    2c38:	4b24      	ldr	r3, [pc, #144]	; (2ccc <udi_msc_cbw_received+0xf8>)
    2c3a:	609a      	str	r2, [r3, #8]
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
    2c3c:	4b1b      	ldr	r3, [pc, #108]	; (2cac <udi_msc_cbw_received+0xd8>)
    2c3e:	7bdb      	ldrb	r3, [r3, #15]
    2c40:	2b5a      	cmp	r3, #90	; 0x5a
    2c42:	d82b      	bhi.n	2c9c <udi_msc_cbw_received+0xc8>
    2c44:	009a      	lsls	r2, r3, #2
    2c46:	4b22      	ldr	r3, [pc, #136]	; (2cd0 <udi_msc_cbw_received+0xfc>)
    2c48:	18d3      	adds	r3, r2, r3
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	469f      	mov	pc, r3
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
    2c4e:	4b21      	ldr	r3, [pc, #132]	; (2cd4 <udi_msc_cbw_received+0x100>)
    2c50:	4798      	blx	r3
		break;
    2c52:	e028      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
    2c54:	4b20      	ldr	r3, [pc, #128]	; (2cd8 <udi_msc_cbw_received+0x104>)
    2c56:	4798      	blx	r3
		break;
    2c58:	e025      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
    2c5a:	2000      	movs	r0, #0
    2c5c:	4b1f      	ldr	r3, [pc, #124]	; (2cdc <udi_msc_cbw_received+0x108>)
    2c5e:	4798      	blx	r3
		break;
    2c60:	e021      	b.n	2ca6 <udi_msc_cbw_received+0xd2>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
    2c62:	2001      	movs	r0, #1
    2c64:	4b1d      	ldr	r3, [pc, #116]	; (2cdc <udi_msc_cbw_received+0x108>)
    2c66:	4798      	blx	r3
		break;
    2c68:	e01d      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
    2c6a:	4b1d      	ldr	r3, [pc, #116]	; (2ce0 <udi_msc_cbw_received+0x10c>)
    2c6c:	4798      	blx	r3
		break;
    2c6e:	e01a      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
    2c70:	4b1c      	ldr	r3, [pc, #112]	; (2ce4 <udi_msc_cbw_received+0x110>)
    2c72:	4798      	blx	r3
		break;
    2c74:	e017      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SBC_START_STOP_UNIT:
		udi_msc_sbc_start_stop();
    2c76:	4b1c      	ldr	r3, [pc, #112]	; (2ce8 <udi_msc_cbw_received+0x114>)
    2c78:	4798      	blx	r3
		break;
    2c7a:	e014      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		udi_msc_spc_prevent_allow_medium_removal();
    2c7c:	4b1b      	ldr	r3, [pc, #108]	; (2cec <udi_msc_cbw_received+0x118>)
    2c7e:	4798      	blx	r3
		break;
    2c80:	e011      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
    2c82:	4b1b      	ldr	r3, [pc, #108]	; (2cf0 <udi_msc_cbw_received+0x11c>)
    2c84:	4798      	blx	r3
		udi_msc_csw_process();
    2c86:	4b10      	ldr	r3, [pc, #64]	; (2cc8 <udi_msc_cbw_received+0xf4>)
    2c88:	4798      	blx	r3
		break;
    2c8a:	e00c      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
    2c8c:	2001      	movs	r0, #1
    2c8e:	4b19      	ldr	r3, [pc, #100]	; (2cf4 <udi_msc_cbw_received+0x120>)
    2c90:	4798      	blx	r3
		break;
    2c92:	e008      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
    2c94:	2000      	movs	r0, #0
    2c96:	4b17      	ldr	r3, [pc, #92]	; (2cf4 <udi_msc_cbw_received+0x120>)
    2c98:	4798      	blx	r3
		break;
    2c9a:	e004      	b.n	2ca6 <udi_msc_cbw_received+0xd2>

	default:
		udi_msc_sense_command_invalid();
    2c9c:	4b16      	ldr	r3, [pc, #88]	; (2cf8 <udi_msc_cbw_received+0x124>)
    2c9e:	4798      	blx	r3
		udi_msc_csw_process();
    2ca0:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <udi_msc_cbw_received+0xf4>)
    2ca2:	4798      	blx	r3
		break;
    2ca4:	46c0      	nop			; (mov r8, r8)
	}
}
    2ca6:	46bd      	mov	sp, r7
    2ca8:	b002      	add	sp, #8
    2caa:	bd80      	pop	{r7, pc}
    2cac:	20006bc0 	.word	0x20006bc0
    2cb0:	43425355 	.word	0x43425355
    2cb4:	20006bf8 	.word	0x20006bf8
    2cb8:	00002b1d 	.word	0x00002b1d
    2cbc:	00002b55 	.word	0x00002b55
    2cc0:	20006be0 	.word	0x20006be0
    2cc4:	00002fc1 	.word	0x00002fc1
    2cc8:	00002de1 	.word	0x00002de1
    2ccc:	200001ac 	.word	0x200001ac
    2cd0:	0000b10c 	.word	0x0000b10c
    2cd4:	00002ff9 	.word	0x00002ff9
    2cd8:	00003055 	.word	0x00003055
    2cdc:	000031ed 	.word	0x000031ed
    2ce0:	000031c5 	.word	0x000031c5
    2ce4:	00003411 	.word	0x00003411
    2ce8:	0000339d 	.word	0x0000339d
    2cec:	00003361 	.word	0x00003361
    2cf0:	00002f39 	.word	0x00002f39
    2cf4:	000034ad 	.word	0x000034ad
    2cf8:	00002fdd 	.word	0x00002fdd

00002cfc <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
    2d04:	1c0a      	adds	r2, r1, #0
    2d06:	1cfb      	adds	r3, r7, #3
    2d08:	701a      	strb	r2, [r3, #0]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    2d0a:	4b0d      	ldr	r3, [pc, #52]	; (2d40 <udi_msc_cbw_validate+0x44>)
    2d0c:	7b1a      	ldrb	r2, [r3, #12]
    2d0e:	1cfb      	adds	r3, r7, #3
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	4053      	eors	r3, r2
    2d14:	b2db      	uxtb	r3, r3
    2d16:	b2db      	uxtb	r3, r3
    2d18:	b25b      	sxtb	r3, r3
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	db04      	blt.n	2d28 <udi_msc_cbw_validate+0x2c>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    2d1e:	4b09      	ldr	r3, [pc, #36]	; (2d44 <udi_msc_cbw_validate+0x48>)
    2d20:	689a      	ldr	r2, [r3, #8]
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	429a      	cmp	r2, r3
    2d26:	d205      	bcs.n	2d34 <udi_msc_cbw_validate+0x38>
		udi_msc_sense_fail_cdb_invalid();
    2d28:	4b07      	ldr	r3, [pc, #28]	; (2d48 <udi_msc_cbw_validate+0x4c>)
    2d2a:	4798      	blx	r3
		udi_msc_csw_process();
    2d2c:	4b07      	ldr	r3, [pc, #28]	; (2d4c <udi_msc_cbw_validate+0x50>)
    2d2e:	4798      	blx	r3
		return false;
    2d30:	2300      	movs	r3, #0
    2d32:	e000      	b.n	2d36 <udi_msc_cbw_validate+0x3a>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
    2d34:	2301      	movs	r3, #1
}
    2d36:	1c18      	adds	r0, r3, #0
    2d38:	46bd      	mov	sp, r7
    2d3a:	b002      	add	sp, #8
    2d3c:	bd80      	pop	{r7, pc}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	20006bc0 	.word	0x20006bc0
    2d44:	200001ac 	.word	0x200001ac
    2d48:	00002fc1 	.word	0x00002fc1
    2d4c:	00002de1 	.word	0x00002de1

00002d50 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
    2d50:	b590      	push	{r4, r7, lr}
    2d52:	b085      	sub	sp, #20
    2d54:	af02      	add	r7, sp, #8
    2d56:	6078      	str	r0, [r7, #4]
    2d58:	1c0a      	adds	r2, r1, #0
    2d5a:	1cfb      	adds	r3, r7, #3
    2d5c:	701a      	strb	r2, [r3, #0]
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    2d5e:	1cfb      	adds	r3, r7, #3
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	4909      	ldr	r1, [pc, #36]	; (2d8c <udi_msc_data_send+0x3c>)
    2d66:	9100      	str	r1, [sp, #0]
    2d68:	2081      	movs	r0, #129	; 0x81
    2d6a:	2101      	movs	r1, #1
    2d6c:	4c08      	ldr	r4, [pc, #32]	; (2d90 <udi_msc_data_send+0x40>)
    2d6e:	47a0      	blx	r4
    2d70:	1c03      	adds	r3, r0, #0
    2d72:	2201      	movs	r2, #1
    2d74:	4053      	eors	r3, r2
    2d76:	b2db      	uxtb	r3, r3
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d003      	beq.n	2d84 <udi_msc_data_send+0x34>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
    2d7c:	4b05      	ldr	r3, [pc, #20]	; (2d94 <udi_msc_data_send+0x44>)
    2d7e:	4798      	blx	r3
		udi_msc_csw_process();
    2d80:	4b05      	ldr	r3, [pc, #20]	; (2d98 <udi_msc_data_send+0x48>)
    2d82:	4798      	blx	r3
	}
}
    2d84:	46bd      	mov	sp, r7
    2d86:	b003      	add	sp, #12
    2d88:	bd90      	pop	{r4, r7, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	00002d9d 	.word	0x00002d9d
    2d90:	0000793d 	.word	0x0000793d
    2d94:	00002f8d 	.word	0x00002f8d
    2d98:	00002de1 	.word	0x00002de1

00002d9c <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	af00      	add	r7, sp, #0
    2da2:	6039      	str	r1, [r7, #0]
    2da4:	1dfb      	adds	r3, r7, #7
    2da6:	1c01      	adds	r1, r0, #0
    2da8:	7019      	strb	r1, [r3, #0]
    2daa:	1dbb      	adds	r3, r7, #6
    2dac:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
    2dae:	1dfb      	adds	r3, r7, #7
    2db0:	781b      	ldrb	r3, [r3, #0]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d000      	beq.n	2db8 <udi_msc_data_sent+0x1c>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
    2db6:	e009      	b.n	2dcc <udi_msc_data_sent+0x30>
	}
	// Update sense data
	udi_msc_sense_pass();
    2db8:	4b06      	ldr	r3, [pc, #24]	; (2dd4 <udi_msc_data_sent+0x38>)
    2dba:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <udi_msc_data_sent+0x3c>)
    2dbe:	689a      	ldr	r2, [r3, #8]
    2dc0:	683b      	ldr	r3, [r7, #0]
    2dc2:	1ad2      	subs	r2, r2, r3
    2dc4:	4b04      	ldr	r3, [pc, #16]	; (2dd8 <udi_msc_data_sent+0x3c>)
    2dc6:	609a      	str	r2, [r3, #8]
	udi_msc_csw_process();
    2dc8:	4b04      	ldr	r3, [pc, #16]	; (2ddc <udi_msc_data_sent+0x40>)
    2dca:	4798      	blx	r3
}
    2dcc:	46bd      	mov	sp, r7
    2dce:	b002      	add	sp, #8
    2dd0:	bd80      	pop	{r7, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	00002f39 	.word	0x00002f39
    2dd8:	200001ac 	.word	0x200001ac
    2ddc:	00002de1 	.word	0x00002de1

00002de0 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
    2de0:	b580      	push	{r7, lr}
    2de2:	af00      	add	r7, sp, #0
	if (0 != udi_msc_csw.dCSWDataResidue) {
    2de4:	4b0e      	ldr	r3, [pc, #56]	; (2e20 <udi_msc_csw_process+0x40>)
    2de6:	689b      	ldr	r3, [r3, #8]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d00c      	beq.n	2e06 <udi_msc_csw_process+0x26>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    2dec:	4b0d      	ldr	r3, [pc, #52]	; (2e24 <udi_msc_csw_process+0x44>)
    2dee:	7b1b      	ldrb	r3, [r3, #12]
    2df0:	b2db      	uxtb	r3, r3
    2df2:	b25b      	sxtb	r3, r3
    2df4:	2b00      	cmp	r3, #0
    2df6:	da03      	bge.n	2e00 <udi_msc_csw_process+0x20>
			udd_ep_set_halt(UDI_MSC_EP_IN);
    2df8:	2081      	movs	r0, #129	; 0x81
    2dfa:	4b0b      	ldr	r3, [pc, #44]	; (2e28 <udi_msc_csw_process+0x48>)
    2dfc:	4798      	blx	r3
    2dfe:	e002      	b.n	2e06 <udi_msc_csw_process+0x26>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    2e00:	2002      	movs	r0, #2
    2e02:	4b09      	ldr	r3, [pc, #36]	; (2e28 <udi_msc_csw_process+0x48>)
    2e04:	4798      	blx	r3
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    2e06:	4b07      	ldr	r3, [pc, #28]	; (2e24 <udi_msc_csw_process+0x44>)
    2e08:	685a      	ldr	r2, [r3, #4]
    2e0a:	4b05      	ldr	r3, [pc, #20]	; (2e20 <udi_msc_csw_process+0x40>)
    2e0c:	605a      	str	r2, [r3, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
    2e0e:	4b04      	ldr	r3, [pc, #16]	; (2e20 <udi_msc_csw_process+0x40>)
    2e10:	689a      	ldr	r2, [r3, #8]
    2e12:	4b03      	ldr	r3, [pc, #12]	; (2e20 <udi_msc_csw_process+0x40>)
    2e14:	609a      	str	r2, [r3, #8]
	udi_msc_csw_send();
    2e16:	4b05      	ldr	r3, [pc, #20]	; (2e2c <udi_msc_csw_process+0x4c>)
    2e18:	4798      	blx	r3
}
    2e1a:	46bd      	mov	sp, r7
    2e1c:	bd80      	pop	{r7, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	200001ac 	.word	0x200001ac
    2e24:	20006bc0 	.word	0x20006bc0
    2e28:	00007791 	.word	0x00007791
    2e2c:	00002e31 	.word	0x00002e31

00002e30 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
    2e30:	b590      	push	{r4, r7, lr}
    2e32:	b083      	sub	sp, #12
    2e34:	af02      	add	r7, sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    2e36:	4b0b      	ldr	r3, [pc, #44]	; (2e64 <udi_msc_csw_send+0x34>)
    2e38:	4a0b      	ldr	r2, [pc, #44]	; (2e68 <udi_msc_csw_send+0x38>)
    2e3a:	9200      	str	r2, [sp, #0]
    2e3c:	2081      	movs	r0, #129	; 0x81
    2e3e:	2100      	movs	r1, #0
    2e40:	1c1a      	adds	r2, r3, #0
    2e42:	230d      	movs	r3, #13
    2e44:	4c09      	ldr	r4, [pc, #36]	; (2e6c <udi_msc_csw_send+0x3c>)
    2e46:	47a0      	blx	r4
    2e48:	1c03      	adds	r3, r0, #0
    2e4a:	2201      	movs	r2, #1
    2e4c:	4053      	eors	r3, r2
    2e4e:	b2db      	uxtb	r3, r3
    2e50:	2b00      	cmp	r3, #0
    2e52:	d004      	beq.n	2e5e <udi_msc_csw_send+0x2e>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    2e54:	4b06      	ldr	r3, [pc, #24]	; (2e70 <udi_msc_csw_send+0x40>)
    2e56:	2081      	movs	r0, #129	; 0x81
    2e58:	1c19      	adds	r1, r3, #0
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <udi_msc_csw_send+0x44>)
    2e5c:	4798      	blx	r3
	}
}
    2e5e:	46bd      	mov	sp, r7
    2e60:	b001      	add	sp, #4
    2e62:	bd90      	pop	{r4, r7, pc}
    2e64:	200001ac 	.word	0x200001ac
    2e68:	00002e79 	.word	0x00002e79
    2e6c:	0000793d 	.word	0x0000793d
    2e70:	00002e31 	.word	0x00002e31
    2e74:	00007861 	.word	0x00007861

00002e78 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b082      	sub	sp, #8
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6039      	str	r1, [r7, #0]
    2e80:	1dfb      	adds	r3, r7, #7
    2e82:	1c01      	adds	r1, r0, #0
    2e84:	7019      	strb	r1, [r3, #0]
    2e86:	1dbb      	adds	r3, r7, #6
    2e88:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    2e8a:	4b02      	ldr	r3, [pc, #8]	; (2e94 <udi_msc_csw_sent+0x1c>)
    2e8c:	4798      	blx	r3
}
    2e8e:	46bd      	mov	sp, r7
    2e90:	b002      	add	sp, #8
    2e92:	bd80      	pop	{r7, pc}
    2e94:	00002b8d 	.word	0x00002b8d

00002e98 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	af00      	add	r7, sp, #0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    2e9c:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <udi_msc_clear_sense+0x20>)
    2e9e:	1c18      	adds	r0, r3, #0
    2ea0:	2100      	movs	r1, #0
    2ea2:	2212      	movs	r2, #18
    2ea4:	4b05      	ldr	r3, [pc, #20]	; (2ebc <udi_msc_clear_sense+0x24>)
    2ea6:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    2ea8:	4b03      	ldr	r3, [pc, #12]	; (2eb8 <udi_msc_clear_sense+0x20>)
    2eaa:	22f0      	movs	r2, #240	; 0xf0
    2eac:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    2eae:	4b02      	ldr	r3, [pc, #8]	; (2eb8 <udi_msc_clear_sense+0x20>)
    2eb0:	220a      	movs	r2, #10
    2eb2:	71da      	strb	r2, [r3, #7]
}
    2eb4:	46bd      	mov	sp, r7
    2eb6:	bd80      	pop	{r7, pc}
    2eb8:	20006be4 	.word	0x20006be4
    2ebc:	0000b0bf 	.word	0x0000b0bf

00002ec0 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	603a      	str	r2, [r7, #0]
    2ec8:	1dfb      	adds	r3, r7, #7
    2eca:	1c02      	adds	r2, r0, #0
    2ecc:	701a      	strb	r2, [r3, #0]
    2ece:	1d3b      	adds	r3, r7, #4
    2ed0:	1c0a      	adds	r2, r1, #0
    2ed2:	801a      	strh	r2, [r3, #0]
	udi_msc_clear_sense();
    2ed4:	4b15      	ldr	r3, [pc, #84]	; (2f2c <udi_msc_sense_fail+0x6c>)
    2ed6:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    2ed8:	4b15      	ldr	r3, [pc, #84]	; (2f30 <udi_msc_sense_fail+0x70>)
    2eda:	2201      	movs	r2, #1
    2edc:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    2ede:	4b15      	ldr	r3, [pc, #84]	; (2f34 <udi_msc_sense_fail+0x74>)
    2ee0:	1dfa      	adds	r2, r7, #7
    2ee2:	7812      	ldrb	r2, [r2, #0]
    2ee4:	709a      	strb	r2, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    2ee6:	683b      	ldr	r3, [r7, #0]
    2ee8:	0e1b      	lsrs	r3, r3, #24
    2eea:	b2da      	uxtb	r2, r3
    2eec:	4b11      	ldr	r3, [pc, #68]	; (2f34 <udi_msc_sense_fail+0x74>)
    2eee:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    2ef0:	683b      	ldr	r3, [r7, #0]
    2ef2:	0c1b      	lsrs	r3, r3, #16
    2ef4:	b2da      	uxtb	r2, r3
    2ef6:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <udi_msc_sense_fail+0x74>)
    2ef8:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    2efa:	683b      	ldr	r3, [r7, #0]
    2efc:	0a1b      	lsrs	r3, r3, #8
    2efe:	b2da      	uxtb	r2, r3
    2f00:	4b0c      	ldr	r3, [pc, #48]	; (2f34 <udi_msc_sense_fail+0x74>)
    2f02:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	b2da      	uxtb	r2, r3
    2f08:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <udi_msc_sense_fail+0x74>)
    2f0a:	719a      	strb	r2, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    2f0c:	1d3b      	adds	r3, r7, #4
    2f0e:	881b      	ldrh	r3, [r3, #0]
    2f10:	0a1b      	lsrs	r3, r3, #8
    2f12:	b29b      	uxth	r3, r3
    2f14:	b2da      	uxtb	r2, r3
    2f16:	4b07      	ldr	r3, [pc, #28]	; (2f34 <udi_msc_sense_fail+0x74>)
    2f18:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    2f1a:	1d3b      	adds	r3, r7, #4
    2f1c:	881b      	ldrh	r3, [r3, #0]
    2f1e:	b2da      	uxtb	r2, r3
    2f20:	4b04      	ldr	r3, [pc, #16]	; (2f34 <udi_msc_sense_fail+0x74>)
    2f22:	735a      	strb	r2, [r3, #13]
}
    2f24:	46bd      	mov	sp, r7
    2f26:	b002      	add	sp, #8
    2f28:	bd80      	pop	{r7, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	00002e99 	.word	0x00002e99
    2f30:	200001ac 	.word	0x200001ac
    2f34:	20006be4 	.word	0x20006be4

00002f38 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	af00      	add	r7, sp, #0
	udi_msc_clear_sense();
    2f3c:	4b03      	ldr	r3, [pc, #12]	; (2f4c <udi_msc_sense_pass+0x14>)
    2f3e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    2f40:	4b03      	ldr	r3, [pc, #12]	; (2f50 <udi_msc_sense_pass+0x18>)
    2f42:	2200      	movs	r2, #0
    2f44:	731a      	strb	r2, [r3, #12]
}
    2f46:	46bd      	mov	sp, r7
    2f48:	bd80      	pop	{r7, pc}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	00002e99 	.word	0x00002e99
    2f50:	200001ac 	.word	0x200001ac

00002f54 <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
    2f54:	b580      	push	{r7, lr}
    2f56:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    2f58:	23e8      	movs	r3, #232	; 0xe8
    2f5a:	019b      	lsls	r3, r3, #6
    2f5c:	2002      	movs	r0, #2
    2f5e:	1c19      	adds	r1, r3, #0
    2f60:	2200      	movs	r2, #0
    2f62:	4b02      	ldr	r3, [pc, #8]	; (2f6c <udi_msc_sense_fail_not_present+0x18>)
    2f64:	4798      	blx	r3
}
    2f66:	46bd      	mov	sp, r7
    2f68:	bd80      	pop	{r7, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	00002ec1 	.word	0x00002ec1

00002f70 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
    2f70:	b580      	push	{r7, lr}
    2f72:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    2f74:	23a0      	movs	r3, #160	; 0xa0
    2f76:	019b      	lsls	r3, r3, #6
    2f78:	2006      	movs	r0, #6
    2f7a:	1c19      	adds	r1, r3, #0
    2f7c:	2200      	movs	r2, #0
    2f7e:	4b02      	ldr	r3, [pc, #8]	; (2f88 <udi_msc_sense_fail_busy_or_change+0x18>)
    2f80:	4798      	blx	r3
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
    2f82:	46bd      	mov	sp, r7
    2f84:	bd80      	pop	{r7, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00002ec1 	.word	0x00002ec1

00002f8c <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    2f90:	2004      	movs	r0, #4
    2f92:	2100      	movs	r1, #0
    2f94:	2200      	movs	r2, #0
    2f96:	4b02      	ldr	r3, [pc, #8]	; (2fa0 <udi_msc_sense_fail_hardware+0x14>)
    2f98:	4798      	blx	r3
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
    2f9a:	46bd      	mov	sp, r7
    2f9c:	bd80      	pop	{r7, pc}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	00002ec1 	.word	0x00002ec1

00002fa4 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    2fa8:	239c      	movs	r3, #156	; 0x9c
    2faa:	019b      	lsls	r3, r3, #6
    2fac:	2007      	movs	r0, #7
    2fae:	1c19      	adds	r1, r3, #0
    2fb0:	2200      	movs	r2, #0
    2fb2:	4b02      	ldr	r3, [pc, #8]	; (2fbc <udi_msc_sense_fail_protected+0x18>)
    2fb4:	4798      	blx	r3
}
    2fb6:	46bd      	mov	sp, r7
    2fb8:	bd80      	pop	{r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	00002ec1 	.word	0x00002ec1

00002fc0 <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    2fc4:	2390      	movs	r3, #144	; 0x90
    2fc6:	019b      	lsls	r3, r3, #6
    2fc8:	2005      	movs	r0, #5
    2fca:	1c19      	adds	r1, r3, #0
    2fcc:	2200      	movs	r2, #0
    2fce:	4b02      	ldr	r3, [pc, #8]	; (2fd8 <udi_msc_sense_fail_cdb_invalid+0x18>)
    2fd0:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    2fd2:	46bd      	mov	sp, r7
    2fd4:	bd80      	pop	{r7, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	00002ec1 	.word	0x00002ec1

00002fdc <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
    2fdc:	b580      	push	{r7, lr}
    2fde:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    2fe0:	2380      	movs	r3, #128	; 0x80
    2fe2:	019b      	lsls	r3, r3, #6
    2fe4:	2005      	movs	r0, #5
    2fe6:	1c19      	adds	r1, r3, #0
    2fe8:	2200      	movs	r2, #0
    2fea:	4b02      	ldr	r3, [pc, #8]	; (2ff4 <udi_msc_sense_command_invalid+0x18>)
    2fec:	4798      	blx	r3
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
    2fee:	46bd      	mov	sp, r7
    2ff0:	bd80      	pop	{r7, pc}
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	00002ec1 	.word	0x00002ec1

00002ff8 <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
    2ff8:	b580      	push	{r7, lr}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
	uint8_t length = udi_msc_cbw.CDB[4];
    2ffe:	1dfb      	adds	r3, r7, #7
    3000:	4a10      	ldr	r2, [pc, #64]	; (3044 <udi_msc_spc_requestsense+0x4c>)
    3002:	7cd2      	ldrb	r2, [r2, #19]
    3004:	701a      	strb	r2, [r3, #0]

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
    3006:	1dfb      	adds	r3, r7, #7
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	2b12      	cmp	r3, #18
    300c:	d902      	bls.n	3014 <udi_msc_spc_requestsense+0x1c>
		length = sizeof(udi_msc_sense);
    300e:	1dfb      	adds	r3, r7, #7
    3010:	2212      	movs	r2, #18
    3012:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    3014:	1dfb      	adds	r3, r7, #7
    3016:	781b      	ldrb	r3, [r3, #0]
    3018:	1c18      	adds	r0, r3, #0
    301a:	2180      	movs	r1, #128	; 0x80
    301c:	4b0a      	ldr	r3, [pc, #40]	; (3048 <udi_msc_spc_requestsense+0x50>)
    301e:	4798      	blx	r3
    3020:	1c03      	adds	r3, r0, #0
    3022:	2201      	movs	r2, #1
    3024:	4053      	eors	r3, r2
    3026:	b2db      	uxtb	r3, r3
    3028:	2b00      	cmp	r3, #0
    302a:	d000      	beq.n	302e <udi_msc_spc_requestsense+0x36>
		return;
    302c:	e006      	b.n	303c <udi_msc_spc_requestsense+0x44>
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    302e:	4a07      	ldr	r2, [pc, #28]	; (304c <udi_msc_spc_requestsense+0x54>)
    3030:	1dfb      	adds	r3, r7, #7
    3032:	781b      	ldrb	r3, [r3, #0]
    3034:	1c10      	adds	r0, r2, #0
    3036:	1c19      	adds	r1, r3, #0
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <udi_msc_spc_requestsense+0x58>)
    303a:	4798      	blx	r3
}
    303c:	46bd      	mov	sp, r7
    303e:	b002      	add	sp, #8
    3040:	bd80      	pop	{r7, pc}
    3042:	46c0      	nop			; (mov r8, r8)
    3044:	20006bc0 	.word	0x20006bc0
    3048:	00002cfd 	.word	0x00002cfd
    304c:	20006be4 	.word	0x20006be4
    3050:	00002d51 	.word	0x00002d51

00003054 <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
    3054:	b580      	push	{r7, lr}
    3056:	b082      	sub	sp, #8
    3058:	af00      	add	r7, sp, #0
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
    305a:	1dfb      	adds	r3, r7, #7
    305c:	4a3c      	ldr	r2, [pc, #240]	; (3150 <udi_msc_spc_inquiry+0xfc>)
    305e:	7cd2      	ldrb	r2, [r2, #19]
    3060:	701a      	strb	r2, [r3, #0]

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
    3062:	1dfb      	adds	r3, r7, #7
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	2b24      	cmp	r3, #36	; 0x24
    3068:	d902      	bls.n	3070 <udi_msc_spc_inquiry+0x1c>
		length = sizeof(udi_msc_inquiry_data);
    306a:	1dfb      	adds	r3, r7, #7
    306c:	2224      	movs	r2, #36	; 0x24
    306e:	701a      	strb	r2, [r3, #0]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    3070:	1dfb      	adds	r3, r7, #7
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	1c18      	adds	r0, r3, #0
    3076:	2180      	movs	r1, #128	; 0x80
    3078:	4b36      	ldr	r3, [pc, #216]	; (3154 <udi_msc_spc_inquiry+0x100>)
    307a:	4798      	blx	r3
    307c:	1c03      	adds	r3, r0, #0
    307e:	2201      	movs	r2, #1
    3080:	4053      	eors	r3, r2
    3082:	b2db      	uxtb	r3, r3
    3084:	2b00      	cmp	r3, #0
    3086:	d000      	beq.n	308a <udi_msc_spc_inquiry+0x36>
		return;
    3088:	e05e      	b.n	3148 <udi_msc_spc_inquiry+0xf4>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    308a:	4b31      	ldr	r3, [pc, #196]	; (3150 <udi_msc_spc_inquiry+0xfc>)
    308c:	7c1b      	ldrb	r3, [r3, #16]
    308e:	1c1a      	adds	r2, r3, #0
    3090:	2303      	movs	r3, #3
    3092:	4013      	ands	r3, r2
    3094:	d103      	bne.n	309e <udi_msc_spc_inquiry+0x4a>
			|| (0 != udi_msc_cbw.CDB[2])) {
    3096:	4b2e      	ldr	r3, [pc, #184]	; (3150 <udi_msc_spc_inquiry+0xfc>)
    3098:	7c5b      	ldrb	r3, [r3, #17]
    309a:	2b00      	cmp	r3, #0
    309c:	d004      	beq.n	30a8 <udi_msc_spc_inquiry+0x54>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    309e:	4b2e      	ldr	r3, [pc, #184]	; (3158 <udi_msc_spc_inquiry+0x104>)
    30a0:	4798      	blx	r3
		udi_msc_csw_process();
    30a2:	4b2e      	ldr	r3, [pc, #184]	; (315c <udi_msc_spc_inquiry+0x108>)
    30a4:	4798      	blx	r3
		return;
    30a6:	e04f      	b.n	3148 <udi_msc_spc_inquiry+0xf4>
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    30a8:	4b29      	ldr	r3, [pc, #164]	; (3150 <udi_msc_spc_inquiry+0xfc>)
    30aa:	7b5b      	ldrb	r3, [r3, #13]
    30ac:	1c18      	adds	r0, r3, #0
    30ae:	4b2c      	ldr	r3, [pc, #176]	; (3160 <udi_msc_spc_inquiry+0x10c>)
    30b0:	4798      	blx	r3
    30b2:	1c03      	adds	r3, r0, #0
    30b4:	2b00      	cmp	r3, #0
    30b6:	d001      	beq.n	30bc <udi_msc_spc_inquiry+0x68>
    30b8:	2380      	movs	r3, #128	; 0x80
    30ba:	e000      	b.n	30be <udi_msc_spc_inquiry+0x6a>
    30bc:	2300      	movs	r3, #0
    30be:	4a29      	ldr	r2, [pc, #164]	; (3164 <udi_msc_spc_inquiry+0x110>)
    30c0:	7053      	strb	r3, [r2, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    30c2:	4b23      	ldr	r3, [pc, #140]	; (3150 <udi_msc_spc_inquiry+0xfc>)
    30c4:	7b5b      	ldrb	r3, [r3, #13]
    30c6:	1c18      	adds	r0, r3, #0
    30c8:	4b27      	ldr	r3, [pc, #156]	; (3168 <udi_msc_spc_inquiry+0x114>)
    30ca:	4798      	blx	r3
    30cc:	1c03      	adds	r3, r0, #0
    30ce:	3301      	adds	r3, #1
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
    30d0:	4a24      	ldr	r2, [pc, #144]	; (3164 <udi_msc_spc_inquiry+0x110>)
    30d2:	1c11      	adds	r1, r2, #0
    30d4:	3110      	adds	r1, #16
    30d6:	1c1a      	adds	r2, r3, #0
    30d8:	2310      	movs	r3, #16
    30da:	1c08      	adds	r0, r1, #0
    30dc:	1c11      	adds	r1, r2, #0
    30de:	1c1a      	adds	r2, r3, #0
    30e0:	4b22      	ldr	r3, [pc, #136]	; (316c <udi_msc_spc_inquiry+0x118>)
    30e2:	4798      	blx	r3
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
    30e4:	1dbb      	adds	r3, r7, #6
    30e6:	2200      	movs	r2, #0
    30e8:	701a      	strb	r2, [r3, #0]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    30ea:	e012      	b.n	3112 <udi_msc_spc_inquiry+0xbe>
		if ((0 == udi_msc_inquiry_data.product_id[i])
    30ec:	1dbb      	adds	r3, r7, #6
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	4a1c      	ldr	r2, [pc, #112]	; (3164 <udi_msc_spc_inquiry+0x110>)
    30f2:	18d3      	adds	r3, r2, r3
    30f4:	7c1b      	ldrb	r3, [r3, #16]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d00f      	beq.n	311a <udi_msc_spc_inquiry+0xc6>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    30fa:	1dbb      	adds	r3, r7, #6
    30fc:	781b      	ldrb	r3, [r3, #0]
    30fe:	4a19      	ldr	r2, [pc, #100]	; (3164 <udi_msc_spc_inquiry+0x110>)
    3100:	18d3      	adds	r3, r2, r3
    3102:	7c1b      	ldrb	r3, [r3, #16]
    3104:	2b22      	cmp	r3, #34	; 0x22
    3106:	d008      	beq.n	311a <udi_msc_spc_inquiry+0xc6>
			break;
		}
		i++;
    3108:	1dbb      	adds	r3, r7, #6
    310a:	781a      	ldrb	r2, [r3, #0]
    310c:	1dbb      	adds	r3, r7, #6
    310e:	3201      	adds	r2, #1
    3110:	701a      	strb	r2, [r3, #0]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    3112:	1dbb      	adds	r3, r7, #6
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	2b10      	cmp	r3, #16
    3118:	d1e8      	bne.n	30ec <udi_msc_spc_inquiry+0x98>
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    311a:	e00a      	b.n	3132 <udi_msc_spc_inquiry+0xde>
		udi_msc_inquiry_data.product_id[i] = ' ';
    311c:	1dbb      	adds	r3, r7, #6
    311e:	781b      	ldrb	r3, [r3, #0]
    3120:	4a10      	ldr	r2, [pc, #64]	; (3164 <udi_msc_spc_inquiry+0x110>)
    3122:	18d3      	adds	r3, r2, r3
    3124:	2220      	movs	r2, #32
    3126:	741a      	strb	r2, [r3, #16]
		i++;
    3128:	1dbb      	adds	r3, r7, #6
    312a:	781a      	ldrb	r2, [r3, #0]
    312c:	1dbb      	adds	r3, r7, #6
    312e:	3201      	adds	r2, #1
    3130:	701a      	strb	r2, [r3, #0]
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    3132:	1dbb      	adds	r3, r7, #6
    3134:	781b      	ldrb	r3, [r3, #0]
    3136:	2b10      	cmp	r3, #16
    3138:	d1f0      	bne.n	311c <udi_msc_spc_inquiry+0xc8>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    313a:	4a0a      	ldr	r2, [pc, #40]	; (3164 <udi_msc_spc_inquiry+0x110>)
    313c:	1dfb      	adds	r3, r7, #7
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	1c10      	adds	r0, r2, #0
    3142:	1c19      	adds	r1, r3, #0
    3144:	4b0a      	ldr	r3, [pc, #40]	; (3170 <udi_msc_spc_inquiry+0x11c>)
    3146:	4798      	blx	r3
}
    3148:	46bd      	mov	sp, r7
    314a:	b002      	add	sp, #8
    314c:	bd80      	pop	{r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	20006bc0 	.word	0x20006bc0
    3154:	00002cfd 	.word	0x00002cfd
    3158:	00002fc1 	.word	0x00002fc1
    315c:	00002de1 	.word	0x00002de1
    3160:	00001079 	.word	0x00001079
    3164:	200001c0 	.word	0x200001c0
    3168:	000010c1 	.word	0x000010c1
    316c:	0000b0ad 	.word	0x0000b0ad
    3170:	00002d51 	.word	0x00002d51

00003174 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
    3174:	b580      	push	{r7, lr}
    3176:	af00      	add	r7, sp, #0
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    3178:	4b0d      	ldr	r3, [pc, #52]	; (31b0 <udi_msc_spc_testunitready_global+0x3c>)
    317a:	7b5b      	ldrb	r3, [r3, #13]
    317c:	1c18      	adds	r0, r3, #0
    317e:	4b0d      	ldr	r3, [pc, #52]	; (31b4 <udi_msc_spc_testunitready_global+0x40>)
    3180:	4798      	blx	r3
    3182:	1c03      	adds	r3, r0, #0
    3184:	2b02      	cmp	r3, #2
    3186:	d008      	beq.n	319a <udi_msc_spc_testunitready_global+0x26>
    3188:	2b03      	cmp	r3, #3
    318a:	d003      	beq.n	3194 <udi_msc_spc_testunitready_global+0x20>
    318c:	2b00      	cmp	r3, #0
    318e:	d107      	bne.n	31a0 <udi_msc_spc_testunitready_global+0x2c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
    3190:	2301      	movs	r3, #1
    3192:	e009      	b.n	31a8 <udi_msc_spc_testunitready_global+0x34>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3194:	4b08      	ldr	r3, [pc, #32]	; (31b8 <udi_msc_spc_testunitready_global+0x44>)
    3196:	4798      	blx	r3
		break;
    3198:	e005      	b.n	31a6 <udi_msc_spc_testunitready_global+0x32>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    319a:	4b08      	ldr	r3, [pc, #32]	; (31bc <udi_msc_spc_testunitready_global+0x48>)
    319c:	4798      	blx	r3
		break;
    319e:	e002      	b.n	31a6 <udi_msc_spc_testunitready_global+0x32>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
    31a0:	4b07      	ldr	r3, [pc, #28]	; (31c0 <udi_msc_spc_testunitready_global+0x4c>)
    31a2:	4798      	blx	r3
		break;
    31a4:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    31a6:	2300      	movs	r3, #0
}
    31a8:	1c18      	adds	r0, r3, #0
    31aa:	46bd      	mov	sp, r7
    31ac:	bd80      	pop	{r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	20006bc0 	.word	0x20006bc0
    31b4:	00000f29 	.word	0x00000f29
    31b8:	00002f71 	.word	0x00002f71
    31bc:	00002f55 	.word	0x00002f55
    31c0:	00002f8d 	.word	0x00002f8d

000031c4 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
    31c4:	b580      	push	{r7, lr}
    31c6:	af00      	add	r7, sp, #0
	if (udi_msc_spc_testunitready_global()) {
    31c8:	4b05      	ldr	r3, [pc, #20]	; (31e0 <udi_msc_spc_testunitready+0x1c>)
    31ca:	4798      	blx	r3
    31cc:	1c03      	adds	r3, r0, #0
    31ce:	2b00      	cmp	r3, #0
    31d0:	d001      	beq.n	31d6 <udi_msc_spc_testunitready+0x12>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
    31d2:	4b04      	ldr	r3, [pc, #16]	; (31e4 <udi_msc_spc_testunitready+0x20>)
    31d4:	4798      	blx	r3
	}
	// Send status in CSW packet
	udi_msc_csw_process();
    31d6:	4b04      	ldr	r3, [pc, #16]	; (31e8 <udi_msc_spc_testunitready+0x24>)
    31d8:	4798      	blx	r3
}
    31da:	46bd      	mov	sp, r7
    31dc:	bd80      	pop	{r7, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	00003175 	.word	0x00003175
    31e4:	00002f39 	.word	0x00002f39
    31e8:	00002de1 	.word	0x00002de1

000031ec <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b086      	sub	sp, #24
    31f0:	af00      	add	r7, sp, #0
    31f2:	1c02      	adds	r2, r0, #0
    31f4:	1dfb      	adds	r3, r7, #7
    31f6:	701a      	strb	r2, [r3, #0]
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    31f8:	4b51      	ldr	r3, [pc, #324]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    31fa:	1c18      	adds	r0, r3, #0
    31fc:	2100      	movs	r1, #0
    31fe:	2214      	movs	r2, #20
    3200:	4b50      	ldr	r3, [pc, #320]	; (3344 <udi_msc_spc_mode_sense+0x158>)
    3202:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    3204:	1dfb      	adds	r3, r7, #7
    3206:	781b      	ldrb	r3, [r3, #0]
    3208:	2b00      	cmp	r3, #0
    320a:	d00b      	beq.n	3224 <udi_msc_spc_mode_sense+0x38>
		request_lgt = udi_msc_cbw.CDB[8];
    320c:	1c3b      	adds	r3, r7, #0
    320e:	3316      	adds	r3, #22
    3210:	4a4d      	ldr	r2, [pc, #308]	; (3348 <udi_msc_spc_mode_sense+0x15c>)
    3212:	7dd2      	ldrb	r2, [r2, #23]
    3214:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s10.sense_data;
    3216:	4b4d      	ldr	r3, [pc, #308]	; (334c <udi_msc_spc_mode_sense+0x160>)
    3218:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    321a:	1c3b      	adds	r3, r7, #0
    321c:	3317      	adds	r3, #23
    321e:	2208      	movs	r2, #8
    3220:	701a      	strb	r2, [r3, #0]
    3222:	e00a      	b.n	323a <udi_msc_spc_mode_sense+0x4e>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
    3224:	1c3b      	adds	r3, r7, #0
    3226:	3316      	adds	r3, #22
    3228:	4a47      	ldr	r2, [pc, #284]	; (3348 <udi_msc_spc_mode_sense+0x15c>)
    322a:	7cd2      	ldrb	r2, [r2, #19]
    322c:	701a      	strb	r2, [r3, #0]
		ptr_mode = &sense.s6.sense_data;
    322e:	4b48      	ldr	r3, [pc, #288]	; (3350 <udi_msc_spc_mode_sense+0x164>)
    3230:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    3232:	1c3b      	adds	r3, r7, #0
    3234:	3317      	adds	r3, #23
    3236:	2204      	movs	r2, #4
    3238:	701a      	strb	r2, [r3, #0]
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    323a:	4b43      	ldr	r3, [pc, #268]	; (3348 <udi_msc_spc_mode_sense+0x15c>)
    323c:	7c59      	ldrb	r1, [r3, #17]
    323e:	1c3b      	adds	r3, r7, #0
    3240:	330f      	adds	r3, #15
    3242:	223f      	movs	r2, #63	; 0x3f
    3244:	400a      	ands	r2, r1
    3246:	701a      	strb	r2, [r3, #0]
	if ((SCSI_MS_MODE_INFEXP == mode)
    3248:	1c3b      	adds	r3, r7, #0
    324a:	330f      	adds	r3, #15
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	2b1c      	cmp	r3, #28
    3250:	d004      	beq.n	325c <udi_msc_spc_mode_sense+0x70>
			|| (SCSI_MS_MODE_ALL == mode)) {
    3252:	1c3b      	adds	r3, r7, #0
    3254:	330f      	adds	r3, #15
    3256:	781b      	ldrb	r3, [r3, #0]
    3258:	2b3f      	cmp	r3, #63	; 0x3f
    325a:	d10f      	bne.n	327c <udi_msc_spc_mode_sense+0x90>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
    325c:	693b      	ldr	r3, [r7, #16]
    325e:	221c      	movs	r2, #28
    3260:	701a      	strb	r2, [r3, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
    3262:	693b      	ldr	r3, [r7, #16]
    3264:	220a      	movs	r2, #10
    3266:	705a      	strb	r2, [r3, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
    3268:	693b      	ldr	r3, [r7, #16]
    326a:	2205      	movs	r2, #5
    326c:	70da      	strb	r2, [r3, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    326e:	1c3b      	adds	r3, r7, #0
    3270:	3317      	adds	r3, #23
    3272:	1c3a      	adds	r2, r7, #0
    3274:	3217      	adds	r2, #23
    3276:	7812      	ldrb	r2, [r2, #0]
    3278:	320c      	adds	r2, #12
    327a:	701a      	strb	r2, [r3, #0]
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
    327c:	1c3a      	adds	r2, r7, #0
    327e:	3216      	adds	r2, #22
    3280:	1c3b      	adds	r3, r7, #0
    3282:	3317      	adds	r3, #23
    3284:	7812      	ldrb	r2, [r2, #0]
    3286:	781b      	ldrb	r3, [r3, #0]
    3288:	429a      	cmp	r2, r3
    328a:	d905      	bls.n	3298 <udi_msc_spc_mode_sense+0xac>
		request_lgt = data_sense_lgt;
    328c:	1c3b      	adds	r3, r7, #0
    328e:	3316      	adds	r3, #22
    3290:	1c3a      	adds	r2, r7, #0
    3292:	3217      	adds	r2, #23
    3294:	7812      	ldrb	r2, [r2, #0]
    3296:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    3298:	1c3b      	adds	r3, r7, #0
    329a:	3316      	adds	r3, #22
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	1c18      	adds	r0, r3, #0
    32a0:	2180      	movs	r1, #128	; 0x80
    32a2:	4b2c      	ldr	r3, [pc, #176]	; (3354 <udi_msc_spc_mode_sense+0x168>)
    32a4:	4798      	blx	r3
    32a6:	1c03      	adds	r3, r0, #0
    32a8:	2201      	movs	r2, #1
    32aa:	4053      	eors	r3, r2
    32ac:	b2db      	uxtb	r3, r3
    32ae:	2b00      	cmp	r3, #0
    32b0:	d000      	beq.n	32b4 <udi_msc_spc_mode_sense+0xc8>
		return;
    32b2:	e041      	b.n	3338 <udi_msc_spc_mode_sense+0x14c>

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    32b4:	4b24      	ldr	r3, [pc, #144]	; (3348 <udi_msc_spc_mode_sense+0x15c>)
    32b6:	7b5b      	ldrb	r3, [r3, #13]
    32b8:	1c18      	adds	r0, r3, #0
    32ba:	4b27      	ldr	r3, [pc, #156]	; (3358 <udi_msc_spc_mode_sense+0x16c>)
    32bc:	4798      	blx	r3
    32be:	1c03      	adds	r3, r0, #0
    32c0:	2b00      	cmp	r3, #0
    32c2:	d001      	beq.n	32c8 <udi_msc_spc_mode_sense+0xdc>
    32c4:	2380      	movs	r3, #128	; 0x80
    32c6:	e000      	b.n	32ca <udi_msc_spc_mode_sense+0xde>
    32c8:	2300      	movs	r3, #0
    32ca:	1c3a      	adds	r2, r7, #0
    32cc:	320e      	adds	r2, #14
    32ce:	7013      	strb	r3, [r2, #0]

	if (b_sense10) {
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	2b00      	cmp	r3, #0
    32d6:	d01b      	beq.n	3310 <udi_msc_spc_mode_sense+0x124>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
    32d8:	1c3b      	adds	r3, r7, #0
    32da:	3317      	adds	r3, #23
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	b29b      	uxth	r3, r3
    32e0:	3b02      	subs	r3, #2
    32e2:	b29b      	uxth	r3, r3
    32e4:	0a1b      	lsrs	r3, r3, #8
    32e6:	b29b      	uxth	r3, r3
    32e8:	b29a      	uxth	r2, r3
    32ea:	1c3b      	adds	r3, r7, #0
    32ec:	3317      	adds	r3, #23
    32ee:	781b      	ldrb	r3, [r3, #0]
    32f0:	b29b      	uxth	r3, r3
    32f2:	3b02      	subs	r3, #2
    32f4:	b29b      	uxth	r3, r3
    32f6:	021b      	lsls	r3, r3, #8
    32f8:	b29b      	uxth	r3, r3
    32fa:	4313      	orrs	r3, r2
    32fc:	b29b      	uxth	r3, r3
    32fe:	b29a      	uxth	r2, r3

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
    3300:	4b0f      	ldr	r3, [pc, #60]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    3302:	801a      	strh	r2, [r3, #0]
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
    3304:	4b0e      	ldr	r3, [pc, #56]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    3306:	1c3a      	adds	r2, r7, #0
    3308:	320e      	adds	r2, #14
    330a:	7812      	ldrb	r2, [r2, #0]
    330c:	70da      	strb	r2, [r3, #3]
    330e:	e00b      	b.n	3328 <udi_msc_spc_mode_sense+0x13c>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    3310:	1c3b      	adds	r3, r7, #0
    3312:	3317      	adds	r3, #23
    3314:	781b      	ldrb	r3, [r3, #0]
    3316:	3b01      	subs	r3, #1
    3318:	b2da      	uxtb	r2, r3
    331a:	4b09      	ldr	r3, [pc, #36]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    331c:	701a      	strb	r2, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
    331e:	4b08      	ldr	r3, [pc, #32]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    3320:	1c3a      	adds	r2, r7, #0
    3322:	320e      	adds	r2, #14
    3324:	7812      	ldrb	r2, [r2, #0]
    3326:	709a      	strb	r2, [r3, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    3328:	4a05      	ldr	r2, [pc, #20]	; (3340 <udi_msc_spc_mode_sense+0x154>)
    332a:	1c3b      	adds	r3, r7, #0
    332c:	3316      	adds	r3, #22
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	1c10      	adds	r0, r2, #0
    3332:	1c19      	adds	r1, r3, #0
    3334:	4b09      	ldr	r3, [pc, #36]	; (335c <udi_msc_spc_mode_sense+0x170>)
    3336:	4798      	blx	r3
}
    3338:	46bd      	mov	sp, r7
    333a:	b006      	add	sp, #24
    333c:	bd80      	pop	{r7, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	20006c04 	.word	0x20006c04
    3344:	0000b0bf 	.word	0x0000b0bf
    3348:	20006bc0 	.word	0x20006bc0
    334c:	20006c0c 	.word	0x20006c0c
    3350:	20006c08 	.word	0x20006c08
    3354:	00002cfd 	.word	0x00002cfd
    3358:	00001031 	.word	0x00001031
    335c:	00002d51 	.word	0x00002d51

00003360 <udi_msc_spc_prevent_allow_medium_removal>:


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
    3360:	b580      	push	{r7, lr}
    3362:	b082      	sub	sp, #8
    3364:	af00      	add	r7, sp, #0
	uint8_t prevent = udi_msc_cbw.CDB[4];
    3366:	1dfb      	adds	r3, r7, #7
    3368:	4a08      	ldr	r2, [pc, #32]	; (338c <udi_msc_spc_prevent_allow_medium_removal+0x2c>)
    336a:	7cd2      	ldrb	r2, [r2, #19]
    336c:	701a      	strb	r2, [r3, #0]
	if (0 == prevent) {
    336e:	1dfb      	adds	r3, r7, #7
    3370:	781b      	ldrb	r3, [r3, #0]
    3372:	2b00      	cmp	r3, #0
    3374:	d102      	bne.n	337c <udi_msc_spc_prevent_allow_medium_removal+0x1c>
		udi_msc_sense_pass();
    3376:	4b06      	ldr	r3, [pc, #24]	; (3390 <udi_msc_spc_prevent_allow_medium_removal+0x30>)
    3378:	4798      	blx	r3
    337a:	e001      	b.n	3380 <udi_msc_spc_prevent_allow_medium_removal+0x20>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    337c:	4b05      	ldr	r3, [pc, #20]	; (3394 <udi_msc_spc_prevent_allow_medium_removal+0x34>)
    337e:	4798      	blx	r3
	}
	udi_msc_csw_process();
    3380:	4b05      	ldr	r3, [pc, #20]	; (3398 <udi_msc_spc_prevent_allow_medium_removal+0x38>)
    3382:	4798      	blx	r3
}
    3384:	46bd      	mov	sp, r7
    3386:	b002      	add	sp, #8
    3388:	bd80      	pop	{r7, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	20006bc0 	.word	0x20006bc0
    3390:	00002f39 	.word	0x00002f39
    3394:	00002fc1 	.word	0x00002fc1
    3398:	00002de1 	.word	0x00002de1

0000339c <udi_msc_sbc_start_stop>:


static void udi_msc_sbc_start_stop(void)
{
    339c:	b580      	push	{r7, lr}
    339e:	b082      	sub	sp, #8
    33a0:	af00      	add	r7, sp, #0
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    33a2:	4b17      	ldr	r3, [pc, #92]	; (3400 <udi_msc_sbc_start_stop+0x64>)
    33a4:	7cdb      	ldrb	r3, [r3, #19]
    33a6:	1c1a      	adds	r2, r3, #0
    33a8:	2301      	movs	r3, #1
    33aa:	401a      	ands	r2, r3
    33ac:	1dfb      	adds	r3, r7, #7
    33ae:	1e51      	subs	r1, r2, #1
    33b0:	418a      	sbcs	r2, r1
    33b2:	701a      	strb	r2, [r3, #0]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
    33b4:	4b12      	ldr	r3, [pc, #72]	; (3400 <udi_msc_sbc_start_stop+0x64>)
    33b6:	7cdb      	ldrb	r3, [r3, #19]
    33b8:	1c1a      	adds	r2, r3, #0
    33ba:	2302      	movs	r3, #2
    33bc:	401a      	ands	r2, r3
    33be:	1dbb      	adds	r3, r7, #6
    33c0:	1e51      	subs	r1, r2, #1
    33c2:	418a      	sbcs	r2, r1
    33c4:	701a      	strb	r2, [r3, #0]
	if (loej) {
    33c6:	1dbb      	adds	r3, r7, #6
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d011      	beq.n	33f2 <udi_msc_sbc_start_stop+0x56>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    33ce:	4b0c      	ldr	r3, [pc, #48]	; (3400 <udi_msc_sbc_start_stop+0x64>)
    33d0:	7b5a      	ldrb	r2, [r3, #13]
    33d2:	1dfb      	adds	r3, r7, #7
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	1e59      	subs	r1, r3, #1
    33d8:	418b      	sbcs	r3, r1
    33da:	b2db      	uxtb	r3, r3
    33dc:	2101      	movs	r1, #1
    33de:	404b      	eors	r3, r1
    33e0:	b2db      	uxtb	r3, r3
    33e2:	1c19      	adds	r1, r3, #0
    33e4:	2301      	movs	r3, #1
    33e6:	400b      	ands	r3, r1
    33e8:	b2db      	uxtb	r3, r3
    33ea:	1c10      	adds	r0, r2, #0
    33ec:	1c19      	adds	r1, r3, #0
    33ee:	4b05      	ldr	r3, [pc, #20]	; (3404 <udi_msc_sbc_start_stop+0x68>)
    33f0:	4798      	blx	r3
	}
	udi_msc_sense_pass();
    33f2:	4b05      	ldr	r3, [pc, #20]	; (3408 <udi_msc_sbc_start_stop+0x6c>)
    33f4:	4798      	blx	r3
	udi_msc_csw_process();
    33f6:	4b05      	ldr	r3, [pc, #20]	; (340c <udi_msc_sbc_start_stop+0x70>)
    33f8:	4798      	blx	r3
}
    33fa:	46bd      	mov	sp, r7
    33fc:	b002      	add	sp, #8
    33fe:	bd80      	pop	{r7, pc}
    3400:	20006bc0 	.word	0x20006bc0
    3404:	00000fb1 	.word	0x00000fb1
    3408:	00002f39 	.word	0x00002f39
    340c:	00002de1 	.word	0x00002de1

00003410 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
    3410:	b580      	push	{r7, lr}
    3412:	af00      	add	r7, sp, #0
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    3414:	2008      	movs	r0, #8
    3416:	2180      	movs	r1, #128	; 0x80
    3418:	4b1b      	ldr	r3, [pc, #108]	; (3488 <udi_msc_sbc_read_capacity+0x78>)
    341a:	4798      	blx	r3
    341c:	1c03      	adds	r3, r0, #0
    341e:	2201      	movs	r2, #1
    3420:	4053      	eors	r3, r2
    3422:	b2db      	uxtb	r3, r3
    3424:	2b00      	cmp	r3, #0
    3426:	d000      	beq.n	342a <udi_msc_sbc_read_capacity+0x1a>
					USB_CBW_DIRECTION_IN))
		return;
    3428:	e02c      	b.n	3484 <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    342a:	4b18      	ldr	r3, [pc, #96]	; (348c <udi_msc_sbc_read_capacity+0x7c>)
    342c:	7b5a      	ldrb	r2, [r3, #13]
    342e:	4b18      	ldr	r3, [pc, #96]	; (3490 <udi_msc_sbc_read_capacity+0x80>)
    3430:	1c10      	adds	r0, r2, #0
    3432:	1c19      	adds	r1, r3, #0
    3434:	4b17      	ldr	r3, [pc, #92]	; (3494 <udi_msc_sbc_read_capacity+0x84>)
    3436:	4798      	blx	r3
    3438:	1c03      	adds	r3, r0, #0
    343a:	2b02      	cmp	r3, #2
    343c:	d009      	beq.n	3452 <udi_msc_sbc_read_capacity+0x42>
    343e:	2b03      	cmp	r3, #3
    3440:	d002      	beq.n	3448 <udi_msc_sbc_read_capacity+0x38>
    3442:	2b00      	cmp	r3, #0
    3444:	d00f      	beq.n	3466 <udi_msc_sbc_read_capacity+0x56>
    3446:	e009      	b.n	345c <udi_msc_sbc_read_capacity+0x4c>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3448:	4b13      	ldr	r3, [pc, #76]	; (3498 <udi_msc_sbc_read_capacity+0x88>)
    344a:	4798      	blx	r3
		udi_msc_csw_process();
    344c:	4b13      	ldr	r3, [pc, #76]	; (349c <udi_msc_sbc_read_capacity+0x8c>)
    344e:	4798      	blx	r3
		return;
    3450:	e018      	b.n	3484 <udi_msc_sbc_read_capacity+0x74>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    3452:	4b13      	ldr	r3, [pc, #76]	; (34a0 <udi_msc_sbc_read_capacity+0x90>)
    3454:	4798      	blx	r3
		udi_msc_csw_process();
    3456:	4b11      	ldr	r3, [pc, #68]	; (349c <udi_msc_sbc_read_capacity+0x8c>)
    3458:	4798      	blx	r3
		return;
    345a:	e013      	b.n	3484 <udi_msc_sbc_read_capacity+0x74>
	default:
		udi_msc_sense_fail_hardware();
    345c:	4b11      	ldr	r3, [pc, #68]	; (34a4 <udi_msc_sbc_read_capacity+0x94>)
    345e:	4798      	blx	r3
		udi_msc_csw_process();
    3460:	4b0e      	ldr	r3, [pc, #56]	; (349c <udi_msc_sbc_read_capacity+0x8c>)
    3462:	4798      	blx	r3
		return;
    3464:	e00e      	b.n	3484 <udi_msc_sbc_read_capacity+0x74>

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
    3466:	46c0      	nop			; (mov r8, r8)
		udi_msc_csw_process();
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    3468:	4b09      	ldr	r3, [pc, #36]	; (3490 <udi_msc_sbc_read_capacity+0x80>)
    346a:	2280      	movs	r2, #128	; 0x80
    346c:	0292      	lsls	r2, r2, #10
    346e:	605a      	str	r2, [r3, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    3470:	4b07      	ldr	r3, [pc, #28]	; (3490 <udi_msc_sbc_read_capacity+0x80>)
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	ba1a      	rev	r2, r3
    3476:	4b06      	ldr	r3, [pc, #24]	; (3490 <udi_msc_sbc_read_capacity+0x80>)
    3478:	601a      	str	r2, [r3, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <udi_msc_sbc_read_capacity+0x80>)
    347c:	1c18      	adds	r0, r3, #0
    347e:	2108      	movs	r1, #8
    3480:	4b09      	ldr	r3, [pc, #36]	; (34a8 <udi_msc_sbc_read_capacity+0x98>)
    3482:	4798      	blx	r3
			sizeof(udi_msc_capacity));
}
    3484:	46bd      	mov	sp, r7
    3486:	bd80      	pop	{r7, pc}
    3488:	00002cfd 	.word	0x00002cfd
    348c:	20006bc0 	.word	0x20006bc0
    3490:	20006c18 	.word	0x20006c18
    3494:	00000f69 	.word	0x00000f69
    3498:	00002f71 	.word	0x00002f71
    349c:	00002de1 	.word	0x00002de1
    34a0:	00002f55 	.word	0x00002f55
    34a4:	00002f8d 	.word	0x00002f8d
    34a8:	00002d51 	.word	0x00002d51

000034ac <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
    34ac:	b580      	push	{r7, lr}
    34ae:	b084      	sub	sp, #16
    34b0:	af00      	add	r7, sp, #0
    34b2:	1c02      	adds	r2, r0, #0
    34b4:	1dfb      	adds	r3, r7, #7
    34b6:	701a      	strb	r2, [r3, #0]
	uint32_t trans_size;

	if (!b_read) {
    34b8:	1dfb      	adds	r3, r7, #7
    34ba:	781b      	ldrb	r3, [r3, #0]
    34bc:	2201      	movs	r2, #1
    34be:	4053      	eors	r3, r2
    34c0:	b2db      	uxtb	r3, r3
    34c2:	2b00      	cmp	r3, #0
    34c4:	d00c      	beq.n	34e0 <udi_msc_sbc_trans+0x34>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    34c6:	4b23      	ldr	r3, [pc, #140]	; (3554 <udi_msc_sbc_trans+0xa8>)
    34c8:	7b5b      	ldrb	r3, [r3, #13]
    34ca:	1c18      	adds	r0, r3, #0
    34cc:	4b22      	ldr	r3, [pc, #136]	; (3558 <udi_msc_sbc_trans+0xac>)
    34ce:	4798      	blx	r3
    34d0:	1c03      	adds	r3, r0, #0
    34d2:	2b00      	cmp	r3, #0
    34d4:	d004      	beq.n	34e0 <udi_msc_sbc_trans+0x34>
			// Write not authorized
			udi_msc_sense_fail_protected();
    34d6:	4b21      	ldr	r3, [pc, #132]	; (355c <udi_msc_sbc_trans+0xb0>)
    34d8:	4798      	blx	r3
			udi_msc_csw_process();
    34da:	4b21      	ldr	r3, [pc, #132]	; (3560 <udi_msc_sbc_trans+0xb4>)
    34dc:	4798      	blx	r3
			return;
    34de:	e035      	b.n	354c <udi_msc_sbc_trans+0xa0>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    34e0:	4b20      	ldr	r3, [pc, #128]	; (3564 <udi_msc_sbc_trans+0xb8>)
    34e2:	4a1c      	ldr	r2, [pc, #112]	; (3554 <udi_msc_sbc_trans+0xa8>)
    34e4:	7c52      	ldrb	r2, [r2, #17]
    34e6:	701a      	strb	r2, [r3, #0]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    34e8:	4b1f      	ldr	r3, [pc, #124]	; (3568 <udi_msc_sbc_trans+0xbc>)
    34ea:	4a1a      	ldr	r2, [pc, #104]	; (3554 <udi_msc_sbc_trans+0xa8>)
    34ec:	7c92      	ldrb	r2, [r2, #18]
    34ee:	701a      	strb	r2, [r3, #0]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    34f0:	4b1e      	ldr	r3, [pc, #120]	; (356c <udi_msc_sbc_trans+0xc0>)
    34f2:	4a18      	ldr	r2, [pc, #96]	; (3554 <udi_msc_sbc_trans+0xa8>)
    34f4:	7cd2      	ldrb	r2, [r2, #19]
    34f6:	701a      	strb	r2, [r3, #0]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    34f8:	4b1d      	ldr	r3, [pc, #116]	; (3570 <udi_msc_sbc_trans+0xc4>)
    34fa:	4a16      	ldr	r2, [pc, #88]	; (3554 <udi_msc_sbc_trans+0xa8>)
    34fc:	7d12      	ldrb	r2, [r2, #20]
    34fe:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    3500:	4b1c      	ldr	r3, [pc, #112]	; (3574 <udi_msc_sbc_trans+0xc8>)
    3502:	4a14      	ldr	r2, [pc, #80]	; (3554 <udi_msc_sbc_trans+0xa8>)
    3504:	7d92      	ldrb	r2, [r2, #22]
    3506:	701a      	strb	r2, [r3, #0]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    3508:	4b1b      	ldr	r3, [pc, #108]	; (3578 <udi_msc_sbc_trans+0xcc>)
    350a:	4a12      	ldr	r2, [pc, #72]	; (3554 <udi_msc_sbc_trans+0xa8>)
    350c:	7dd2      	ldrb	r2, [r2, #23]
    350e:	701a      	strb	r2, [r3, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    3510:	4b19      	ldr	r3, [pc, #100]	; (3578 <udi_msc_sbc_trans+0xcc>)
    3512:	881b      	ldrh	r3, [r3, #0]
    3514:	025b      	lsls	r3, r3, #9
    3516:	60fb      	str	r3, [r7, #12]
	if (!udi_msc_cbw_validate(trans_size,
    3518:	1dfb      	adds	r3, r7, #7
    351a:	781b      	ldrb	r3, [r3, #0]
    351c:	2b00      	cmp	r3, #0
    351e:	d001      	beq.n	3524 <udi_msc_sbc_trans+0x78>
    3520:	2380      	movs	r3, #128	; 0x80
    3522:	e000      	b.n	3526 <udi_msc_sbc_trans+0x7a>
    3524:	2300      	movs	r3, #0
    3526:	68fa      	ldr	r2, [r7, #12]
    3528:	1c10      	adds	r0, r2, #0
    352a:	1c19      	adds	r1, r3, #0
    352c:	4b13      	ldr	r3, [pc, #76]	; (357c <udi_msc_sbc_trans+0xd0>)
    352e:	4798      	blx	r3
    3530:	1c03      	adds	r3, r0, #0
    3532:	2201      	movs	r2, #1
    3534:	4053      	eors	r3, r2
    3536:	b2db      	uxtb	r3, r3
    3538:	2b00      	cmp	r3, #0
    353a:	d000      	beq.n	353e <udi_msc_sbc_trans+0x92>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;
    353c:	e006      	b.n	354c <udi_msc_sbc_trans+0xa0>

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    353e:	4b10      	ldr	r3, [pc, #64]	; (3580 <udi_msc_sbc_trans+0xd4>)
    3540:	1dfa      	adds	r2, r7, #7
    3542:	7812      	ldrb	r2, [r2, #0]
    3544:	701a      	strb	r2, [r3, #0]
	udi_msc_b_trans_req = true;
    3546:	4b0f      	ldr	r3, [pc, #60]	; (3584 <udi_msc_sbc_trans+0xd8>)
    3548:	2201      	movs	r2, #1
    354a:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    354c:	46bd      	mov	sp, r7
    354e:	b004      	add	sp, #16
    3550:	bd80      	pop	{r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	20006bc0 	.word	0x20006bc0
    3558:	00001031 	.word	0x00001031
    355c:	00002fa5 	.word	0x00002fa5
    3560:	00002de1 	.word	0x00002de1
    3564:	20006bff 	.word	0x20006bff
    3568:	20006bfe 	.word	0x20006bfe
    356c:	20006bfd 	.word	0x20006bfd
    3570:	20006bfc 	.word	0x20006bfc
    3574:	20006c01 	.word	0x20006c01
    3578:	20006c00 	.word	0x20006c00
    357c:	00002cfd 	.word	0x00002cfd
    3580:	20006bfa 	.word	0x20006bfa
    3584:	20006bf9 	.word	0x20006bf9

00003588 <udi_msc_process_trans>:


bool udi_msc_process_trans(void)
{
    3588:	b590      	push	{r4, r7, lr}
    358a:	b083      	sub	sp, #12
    358c:	af00      	add	r7, sp, #0
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
    358e:	4b2a      	ldr	r3, [pc, #168]	; (3638 <udi_msc_process_trans+0xb0>)
    3590:	781b      	ldrb	r3, [r3, #0]
    3592:	2201      	movs	r2, #1
    3594:	4053      	eors	r3, r2
    3596:	b2db      	uxtb	r3, r3
    3598:	2b00      	cmp	r3, #0
    359a:	d001      	beq.n	35a0 <udi_msc_process_trans+0x18>
		return false;	// No Transfer request to do
    359c:	2300      	movs	r3, #0
    359e:	e047      	b.n	3630 <udi_msc_process_trans+0xa8>
	udi_msc_b_trans_req = false;
    35a0:	4b25      	ldr	r3, [pc, #148]	; (3638 <udi_msc_process_trans+0xb0>)
    35a2:	2200      	movs	r2, #0
    35a4:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = false;
    35a6:	4b25      	ldr	r3, [pc, #148]	; (363c <udi_msc_process_trans+0xb4>)
    35a8:	2200      	movs	r2, #0
    35aa:	701a      	strb	r2, [r3, #0]

	// Start transfer
	if (udi_msc_b_read) {
    35ac:	4b24      	ldr	r3, [pc, #144]	; (3640 <udi_msc_process_trans+0xb8>)
    35ae:	781b      	ldrb	r3, [r3, #0]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d00e      	beq.n	35d2 <udi_msc_process_trans+0x4a>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    35b4:	4b23      	ldr	r3, [pc, #140]	; (3644 <udi_msc_process_trans+0xbc>)
    35b6:	7b59      	ldrb	r1, [r3, #13]
    35b8:	4b23      	ldr	r3, [pc, #140]	; (3648 <udi_msc_process_trans+0xc0>)
    35ba:	681a      	ldr	r2, [r3, #0]
    35bc:	4b23      	ldr	r3, [pc, #140]	; (364c <udi_msc_process_trans+0xc4>)
    35be:	881b      	ldrh	r3, [r3, #0]
    35c0:	1dfc      	adds	r4, r7, #7
    35c2:	1c08      	adds	r0, r1, #0
    35c4:	1c11      	adds	r1, r2, #0
    35c6:	1c1a      	adds	r2, r3, #0
    35c8:	4b21      	ldr	r3, [pc, #132]	; (3650 <udi_msc_process_trans+0xc8>)
    35ca:	4798      	blx	r3
    35cc:	1c03      	adds	r3, r0, #0
    35ce:	7023      	strb	r3, [r4, #0]
    35d0:	e00d      	b.n	35ee <udi_msc_process_trans+0x66>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    35d2:	4b1c      	ldr	r3, [pc, #112]	; (3644 <udi_msc_process_trans+0xbc>)
    35d4:	7b59      	ldrb	r1, [r3, #13]
    35d6:	4b1c      	ldr	r3, [pc, #112]	; (3648 <udi_msc_process_trans+0xc0>)
    35d8:	681a      	ldr	r2, [r3, #0]
    35da:	4b1c      	ldr	r3, [pc, #112]	; (364c <udi_msc_process_trans+0xc4>)
    35dc:	881b      	ldrh	r3, [r3, #0]
    35de:	1dfc      	adds	r4, r7, #7
    35e0:	1c08      	adds	r0, r1, #0
    35e2:	1c11      	adds	r1, r2, #0
    35e4:	1c1a      	adds	r2, r3, #0
    35e6:	4b1b      	ldr	r3, [pc, #108]	; (3654 <udi_msc_process_trans+0xcc>)
    35e8:	4798      	blx	r3
    35ea:	1c03      	adds	r3, r0, #0
    35ec:	7023      	strb	r3, [r4, #0]
				udi_msc_nb_block);
	}

	// Check if transfer is aborted by reset
	if (udi_msc_b_reset_trans) {
    35ee:	4b13      	ldr	r3, [pc, #76]	; (363c <udi_msc_process_trans+0xb4>)
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	b2db      	uxtb	r3, r3
    35f4:	2b00      	cmp	r3, #0
    35f6:	d004      	beq.n	3602 <udi_msc_process_trans+0x7a>
		udi_msc_b_reset_trans = false;
    35f8:	4b10      	ldr	r3, [pc, #64]	; (363c <udi_msc_process_trans+0xb4>)
    35fa:	2200      	movs	r2, #0
    35fc:	701a      	strb	r2, [r3, #0]
		return true;
    35fe:	2301      	movs	r3, #1
    3600:	e016      	b.n	3630 <udi_msc_process_trans+0xa8>
	}

	// Check status of transfer
	switch (status) {
    3602:	1dfb      	adds	r3, r7, #7
    3604:	781b      	ldrb	r3, [r3, #0]
    3606:	2b02      	cmp	r3, #2
    3608:	d009      	beq.n	361e <udi_msc_process_trans+0x96>
    360a:	2b03      	cmp	r3, #3
    360c:	d004      	beq.n	3618 <udi_msc_process_trans+0x90>
    360e:	2b00      	cmp	r3, #0
    3610:	d108      	bne.n	3624 <udi_msc_process_trans+0x9c>
	case CTRL_GOOD:
		udi_msc_sense_pass();
    3612:	4b11      	ldr	r3, [pc, #68]	; (3658 <udi_msc_process_trans+0xd0>)
    3614:	4798      	blx	r3
		break;
    3616:	e008      	b.n	362a <udi_msc_process_trans+0xa2>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    3618:	4b10      	ldr	r3, [pc, #64]	; (365c <udi_msc_process_trans+0xd4>)
    361a:	4798      	blx	r3
		break;
    361c:	e005      	b.n	362a <udi_msc_process_trans+0xa2>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    361e:	4b10      	ldr	r3, [pc, #64]	; (3660 <udi_msc_process_trans+0xd8>)
    3620:	4798      	blx	r3
		break;
    3622:	e002      	b.n	362a <udi_msc_process_trans+0xa2>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
    3624:	4b0f      	ldr	r3, [pc, #60]	; (3664 <udi_msc_process_trans+0xdc>)
    3626:	4798      	blx	r3
		break;
    3628:	46c0      	nop			; (mov r8, r8)
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
    362a:	4b0f      	ldr	r3, [pc, #60]	; (3668 <udi_msc_process_trans+0xe0>)
    362c:	4798      	blx	r3
	return true;
    362e:	2301      	movs	r3, #1
}
    3630:	1c18      	adds	r0, r3, #0
    3632:	46bd      	mov	sp, r7
    3634:	b003      	add	sp, #12
    3636:	bd90      	pop	{r4, r7, pc}
    3638:	20006bf9 	.word	0x20006bf9
    363c:	200001bd 	.word	0x200001bd
    3640:	20006bfa 	.word	0x20006bfa
    3644:	20006bc0 	.word	0x20006bc0
    3648:	20006bfc 	.word	0x20006bfc
    364c:	20006c00 	.word	0x20006c00
    3650:	000010e9 	.word	0x000010e9
    3654:	0000114d 	.word	0x0000114d
    3658:	00002f39 	.word	0x00002f39
    365c:	00002f71 	.word	0x00002f71
    3660:	00002f55 	.word	0x00002f55
    3664:	00002f8d 	.word	0x00002f8d
    3668:	00002de1 	.word	0x00002de1

0000366c <udi_msc_trans_ack>:


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
    3672:	6039      	str	r1, [r7, #0]
    3674:	1dfb      	adds	r3, r7, #7
    3676:	1c01      	adds	r1, r0, #0
    3678:	7019      	strb	r1, [r3, #0]
    367a:	1dbb      	adds	r3, r7, #6
    367c:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    367e:	1dfb      	adds	r3, r7, #7
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	1e5a      	subs	r2, r3, #1
    3684:	4193      	sbcs	r3, r2
    3686:	b2da      	uxtb	r2, r3
    3688:	4b03      	ldr	r3, [pc, #12]	; (3698 <udi_msc_trans_ack+0x2c>)
    368a:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    368c:	4b03      	ldr	r3, [pc, #12]	; (369c <udi_msc_trans_ack+0x30>)
    368e:	2201      	movs	r2, #1
    3690:	701a      	strb	r2, [r3, #0]
}
    3692:	46bd      	mov	sp, r7
    3694:	b002      	add	sp, #8
    3696:	bd80      	pop	{r7, pc}
    3698:	20006dc9 	.word	0x20006dc9
    369c:	200001bc 	.word	0x200001bc

000036a0 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    36a0:	b5b0      	push	{r4, r5, r7, lr}
    36a2:	b086      	sub	sp, #24
    36a4:	af02      	add	r7, sp, #8
    36a6:	60b9      	str	r1, [r7, #8]
    36a8:	607a      	str	r2, [r7, #4]
    36aa:	603b      	str	r3, [r7, #0]
    36ac:	1c3b      	adds	r3, r7, #0
    36ae:	330f      	adds	r3, #15
    36b0:	1c02      	adds	r2, r0, #0
    36b2:	701a      	strb	r2, [r3, #0]
	if (!udi_msc_b_ack_trans)
    36b4:	4b30      	ldr	r3, [pc, #192]	; (3778 <udi_msc_trans_block+0xd8>)
    36b6:	781b      	ldrb	r3, [r3, #0]
    36b8:	b2db      	uxtb	r3, r3
    36ba:	2201      	movs	r2, #1
    36bc:	4053      	eors	r3, r2
    36be:	b2db      	uxtb	r3, r3
    36c0:	2b00      	cmp	r3, #0
    36c2:	d001      	beq.n	36c8 <udi_msc_trans_block+0x28>
		return false;	// No possible, transfer on going
    36c4:	2300      	movs	r3, #0
    36c6:	e052      	b.n	376e <udi_msc_trans_block+0xce>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    36c8:	4b2b      	ldr	r3, [pc, #172]	; (3778 <udi_msc_trans_block+0xd8>)
    36ca:	2200      	movs	r2, #0
    36cc:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    36ce:	1c3b      	adds	r3, r7, #0
    36d0:	330f      	adds	r3, #15
    36d2:	781b      	ldrb	r3, [r3, #0]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d001      	beq.n	36dc <udi_msc_trans_block+0x3c>
    36d8:	2381      	movs	r3, #129	; 0x81
    36da:	e000      	b.n	36de <udi_msc_trans_block+0x3e>
    36dc:	2302      	movs	r3, #2
    36de:	683a      	ldr	r2, [r7, #0]
    36e0:	2a00      	cmp	r2, #0
    36e2:	d001      	beq.n	36e8 <udi_msc_trans_block+0x48>
    36e4:	683a      	ldr	r2, [r7, #0]
    36e6:	e000      	b.n	36ea <udi_msc_trans_block+0x4a>
    36e8:	4a24      	ldr	r2, [pc, #144]	; (377c <udi_msc_trans_block+0xdc>)
    36ea:	68bd      	ldr	r5, [r7, #8]
    36ec:	687c      	ldr	r4, [r7, #4]
    36ee:	9200      	str	r2, [sp, #0]
    36f0:	1c18      	adds	r0, r3, #0
    36f2:	2100      	movs	r1, #0
    36f4:	1c2a      	adds	r2, r5, #0
    36f6:	1c23      	adds	r3, r4, #0
    36f8:	4c21      	ldr	r4, [pc, #132]	; (3780 <udi_msc_trans_block+0xe0>)
    36fa:	47a0      	blx	r4
    36fc:	1c03      	adds	r3, r0, #0
    36fe:	2201      	movs	r2, #1
    3700:	4053      	eors	r3, r2
    3702:	b2db      	uxtb	r3, r3
    3704:	2b00      	cmp	r3, #0
    3706:	d004      	beq.n	3712 <udi_msc_trans_block+0x72>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
    3708:	4b1b      	ldr	r3, [pc, #108]	; (3778 <udi_msc_trans_block+0xd8>)
    370a:	2201      	movs	r2, #1
    370c:	701a      	strb	r2, [r3, #0]
		return false;
    370e:	2300      	movs	r3, #0
    3710:	e02d      	b.n	376e <udi_msc_trans_block+0xce>
	}
	if (NULL == callback) {
    3712:	683b      	ldr	r3, [r7, #0]
    3714:	2b00      	cmp	r3, #0
    3716:	d123      	bne.n	3760 <udi_msc_trans_block+0xc0>
		while (!udi_msc_b_ack_trans);
    3718:	46c0      	nop			; (mov r8, r8)
    371a:	4b17      	ldr	r3, [pc, #92]	; (3778 <udi_msc_trans_block+0xd8>)
    371c:	781b      	ldrb	r3, [r3, #0]
    371e:	b2db      	uxtb	r3, r3
    3720:	2201      	movs	r2, #1
    3722:	4053      	eors	r3, r2
    3724:	b2db      	uxtb	r3, r3
    3726:	2b00      	cmp	r3, #0
    3728:	d1f7      	bne.n	371a <udi_msc_trans_block+0x7a>
		if (udi_msc_b_abort_trans) {
    372a:	4b16      	ldr	r3, [pc, #88]	; (3784 <udi_msc_trans_block+0xe4>)
    372c:	781b      	ldrb	r3, [r3, #0]
    372e:	b2db      	uxtb	r3, r3
    3730:	2b00      	cmp	r3, #0
    3732:	d001      	beq.n	3738 <udi_msc_trans_block+0x98>
			return false;
    3734:	2300      	movs	r3, #0
    3736:	e01a      	b.n	376e <udi_msc_trans_block+0xce>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
    3738:	4b13      	ldr	r3, [pc, #76]	; (3788 <udi_msc_trans_block+0xe8>)
    373a:	689a      	ldr	r2, [r3, #8]
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	1ad2      	subs	r2, r2, r3
    3740:	4b11      	ldr	r3, [pc, #68]	; (3788 <udi_msc_trans_block+0xe8>)
    3742:	609a      	str	r2, [r3, #8]
		return (!udi_msc_b_abort_trans);
    3744:	4b0f      	ldr	r3, [pc, #60]	; (3784 <udi_msc_trans_block+0xe4>)
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	b2db      	uxtb	r3, r3
    374a:	1e5a      	subs	r2, r3, #1
    374c:	4193      	sbcs	r3, r2
    374e:	b2db      	uxtb	r3, r3
    3750:	2201      	movs	r2, #1
    3752:	4053      	eors	r3, r2
    3754:	b2db      	uxtb	r3, r3
    3756:	1c1a      	adds	r2, r3, #0
    3758:	2301      	movs	r3, #1
    375a:	4013      	ands	r3, r2
    375c:	b2db      	uxtb	r3, r3
    375e:	e006      	b.n	376e <udi_msc_trans_block+0xce>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    3760:	4b09      	ldr	r3, [pc, #36]	; (3788 <udi_msc_trans_block+0xe8>)
    3762:	689a      	ldr	r2, [r3, #8]
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	1ad2      	subs	r2, r2, r3
    3768:	4b07      	ldr	r3, [pc, #28]	; (3788 <udi_msc_trans_block+0xe8>)
    376a:	609a      	str	r2, [r3, #8]
	return true;
    376c:	2301      	movs	r3, #1
}
    376e:	1c18      	adds	r0, r3, #0
    3770:	46bd      	mov	sp, r7
    3772:	b004      	add	sp, #16
    3774:	bdb0      	pop	{r4, r5, r7, pc}
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	200001bc 	.word	0x200001bc
    377c:	0000366d 	.word	0x0000366d
    3780:	0000793d 	.word	0x0000793d
    3784:	20006dc9 	.word	0x20006dc9
    3788:	200001ac 	.word	0x200001ac

0000378c <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    378c:	b580      	push	{r7, lr}
    378e:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    3790:	4b01      	ldr	r3, [pc, #4]	; (3798 <udc_get_string_serial_name+0xc>)
	}
    3792:	1c18      	adds	r0, r3, #0
    3794:	46bd      	mov	sp, r7
    3796:	bd80      	pop	{r7, pc}
    3798:	0000b278 	.word	0x0000b278

0000379c <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
    379c:	b580      	push	{r7, lr}
    379e:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
    37a0:	4b02      	ldr	r3, [pc, #8]	; (37ac <udc_get_interface_desc+0x10>)
    37a2:	681b      	ldr	r3, [r3, #0]
}
    37a4:	1c18      	adds	r0, r3, #0
    37a6:	46bd      	mov	sp, r7
    37a8:	bd80      	pop	{r7, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	20006c30 	.word	0x20006c30

000037b0 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    37b0:	b580      	push	{r7, lr}
    37b2:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    37b4:	4b07      	ldr	r3, [pc, #28]	; (37d4 <udc_get_eof_conf+0x24>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    37ba:	4b06      	ldr	r3, [pc, #24]	; (37d4 <udc_get_eof_conf+0x24>)
    37bc:	681b      	ldr	r3, [r3, #0]
    37be:	681b      	ldr	r3, [r3, #0]
    37c0:	7899      	ldrb	r1, [r3, #2]
    37c2:	78db      	ldrb	r3, [r3, #3]
    37c4:	021b      	lsls	r3, r3, #8
    37c6:	430b      	orrs	r3, r1
    37c8:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    37ca:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
    37cc:	1c18      	adds	r0, r3, #0
    37ce:	46bd      	mov	sp, r7
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	20006c2c 	.word	0x20006c2c

000037d8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    37d8:	b580      	push	{r7, lr}
    37da:	b084      	sub	sp, #16
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	1c0a      	adds	r2, r1, #0
    37e2:	1cfb      	adds	r3, r7, #3
    37e4:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    37e6:	4b12      	ldr	r3, [pc, #72]	; (3830 <udc_next_desc_in_iface+0x58>)
    37e8:	4798      	blx	r3
    37ea:	1c03      	adds	r3, r0, #0
    37ec:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    37f2:	687a      	ldr	r2, [r7, #4]
    37f4:	18d3      	adds	r3, r2, r3
    37f6:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    37f8:	e011      	b.n	381e <udc_next_desc_in_iface+0x46>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	785b      	ldrb	r3, [r3, #1]
    37fe:	2b04      	cmp	r3, #4
    3800:	d100      	bne.n	3804 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
    3802:	e010      	b.n	3826 <udc_next_desc_in_iface+0x4e>
		}
		if (desc_id == desc->bDescriptorType) {
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	785b      	ldrb	r3, [r3, #1]
    3808:	1cfa      	adds	r2, r7, #3
    380a:	7812      	ldrb	r2, [r2, #0]
    380c:	429a      	cmp	r2, r3
    380e:	d101      	bne.n	3814 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	e009      	b.n	3828 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3818:	687a      	ldr	r2, [r7, #4]
    381a:	18d3      	adds	r3, r2, r3
    381c:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    381e:	68fa      	ldr	r2, [r7, #12]
    3820:	687b      	ldr	r3, [r7, #4]
    3822:	429a      	cmp	r2, r3
    3824:	d8e9      	bhi.n	37fa <udc_next_desc_in_iface+0x22>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3826:	2300      	movs	r3, #0
}
    3828:	1c18      	adds	r0, r3, #0
    382a:	46bd      	mov	sp, r7
    382c:	b004      	add	sp, #16
    382e:	bd80      	pop	{r7, pc}
    3830:	000037b1 	.word	0x000037b1

00003834 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    3834:	b580      	push	{r7, lr}
    3836:	b084      	sub	sp, #16
    3838:	af00      	add	r7, sp, #0
    383a:	1c0a      	adds	r2, r1, #0
    383c:	1dfb      	adds	r3, r7, #7
    383e:	1c01      	adds	r1, r0, #0
    3840:	7019      	strb	r1, [r3, #0]
    3842:	1dbb      	adds	r3, r7, #6
    3844:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3846:	4b20      	ldr	r3, [pc, #128]	; (38c8 <udc_update_iface_desc+0x94>)
    3848:	781b      	ldrb	r3, [r3, #0]
    384a:	2b00      	cmp	r3, #0
    384c:	d101      	bne.n	3852 <udc_update_iface_desc+0x1e>
		return false;
    384e:	2300      	movs	r3, #0
    3850:	e036      	b.n	38c0 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3852:	4b1e      	ldr	r3, [pc, #120]	; (38cc <udc_update_iface_desc+0x98>)
    3854:	681b      	ldr	r3, [r3, #0]
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	791b      	ldrb	r3, [r3, #4]
    385a:	1dfa      	adds	r2, r7, #7
    385c:	7812      	ldrb	r2, [r2, #0]
    385e:	429a      	cmp	r2, r3
    3860:	d301      	bcc.n	3866 <udc_update_iface_desc+0x32>
		return false;
    3862:	2300      	movs	r3, #0
    3864:	e02c      	b.n	38c0 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    3866:	4b19      	ldr	r3, [pc, #100]	; (38cc <udc_update_iface_desc+0x98>)
    3868:	681b      	ldr	r3, [r3, #0]
    386a:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    386c:	4b18      	ldr	r3, [pc, #96]	; (38d0 <udc_update_iface_desc+0x9c>)
    386e:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3870:	4b18      	ldr	r3, [pc, #96]	; (38d4 <udc_update_iface_desc+0xa0>)
    3872:	4798      	blx	r3
    3874:	1c03      	adds	r3, r0, #0
    3876:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3878:	e01c      	b.n	38b4 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    387a:	4b15      	ldr	r3, [pc, #84]	; (38d0 <udc_update_iface_desc+0x9c>)
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	785b      	ldrb	r3, [r3, #1]
    3880:	2b04      	cmp	r3, #4
    3882:	d10f      	bne.n	38a4 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3884:	4b12      	ldr	r3, [pc, #72]	; (38d0 <udc_update_iface_desc+0x9c>)
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	789b      	ldrb	r3, [r3, #2]
    388a:	1dfa      	adds	r2, r7, #7
    388c:	7812      	ldrb	r2, [r2, #0]
    388e:	429a      	cmp	r2, r3
    3890:	d108      	bne.n	38a4 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    3892:	4b0f      	ldr	r3, [pc, #60]	; (38d0 <udc_update_iface_desc+0x9c>)
    3894:	681b      	ldr	r3, [r3, #0]
    3896:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3898:	1dba      	adds	r2, r7, #6
    389a:	7812      	ldrb	r2, [r2, #0]
    389c:	429a      	cmp	r2, r3
    389e:	d101      	bne.n	38a4 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    38a0:	2301      	movs	r3, #1
    38a2:	e00d      	b.n	38c0 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    38a4:	4b0a      	ldr	r3, [pc, #40]	; (38d0 <udc_update_iface_desc+0x9c>)
    38a6:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    38a8:	4b09      	ldr	r3, [pc, #36]	; (38d0 <udc_update_iface_desc+0x9c>)
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    38ae:	18d2      	adds	r2, r2, r3
    38b0:	4b07      	ldr	r3, [pc, #28]	; (38d0 <udc_update_iface_desc+0x9c>)
    38b2:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    38b4:	4b06      	ldr	r3, [pc, #24]	; (38d0 <udc_update_iface_desc+0x9c>)
    38b6:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    38b8:	68fa      	ldr	r2, [r7, #12]
    38ba:	429a      	cmp	r2, r3
    38bc:	d8dd      	bhi.n	387a <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    38be:	2300      	movs	r3, #0
}
    38c0:	1c18      	adds	r0, r3, #0
    38c2:	46bd      	mov	sp, r7
    38c4:	b004      	add	sp, #16
    38c6:	bd80      	pop	{r7, pc}
    38c8:	20006c28 	.word	0x20006c28
    38cc:	20006c2c 	.word	0x20006c2c
    38d0:	20006c30 	.word	0x20006c30
    38d4:	000037b1 	.word	0x000037b1

000038d8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    38d8:	b580      	push	{r7, lr}
    38da:	b084      	sub	sp, #16
    38dc:	af00      	add	r7, sp, #0
    38de:	1c02      	adds	r2, r0, #0
    38e0:	1dfb      	adds	r3, r7, #7
    38e2:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	1c18      	adds	r0, r3, #0
    38ea:	2100      	movs	r1, #0
    38ec:	4b20      	ldr	r3, [pc, #128]	; (3970 <udc_iface_disable+0x98>)
    38ee:	4798      	blx	r3
    38f0:	1c03      	adds	r3, r0, #0
    38f2:	2201      	movs	r2, #1
    38f4:	4053      	eors	r3, r2
    38f6:	b2db      	uxtb	r3, r3
    38f8:	2b00      	cmp	r3, #0
    38fa:	d001      	beq.n	3900 <udc_iface_disable+0x28>
		return false;
    38fc:	2300      	movs	r3, #0
    38fe:	e033      	b.n	3968 <udc_iface_disable+0x90>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3900:	4b1c      	ldr	r3, [pc, #112]	; (3974 <udc_iface_disable+0x9c>)
    3902:	681b      	ldr	r3, [r3, #0]
    3904:	685a      	ldr	r2, [r3, #4]
    3906:	1dfb      	adds	r3, r7, #7
    3908:	781b      	ldrb	r3, [r3, #0]
    390a:	009b      	lsls	r3, r3, #2
    390c:	18d3      	adds	r3, r2, r3
    390e:	681b      	ldr	r3, [r3, #0]
    3910:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3912:	68bb      	ldr	r3, [r7, #8]
    3914:	68db      	ldr	r3, [r3, #12]
    3916:	4798      	blx	r3
    3918:	1c03      	adds	r3, r0, #0
    391a:	1dfa      	adds	r2, r7, #7
    391c:	7812      	ldrb	r2, [r2, #0]
    391e:	1c10      	adds	r0, r2, #0
    3920:	1c19      	adds	r1, r3, #0
    3922:	4b13      	ldr	r3, [pc, #76]	; (3970 <udc_iface_disable+0x98>)
    3924:	4798      	blx	r3
    3926:	1c03      	adds	r3, r0, #0
    3928:	2201      	movs	r2, #1
    392a:	4053      	eors	r3, r2
    392c:	b2db      	uxtb	r3, r3
    392e:	2b00      	cmp	r3, #0
    3930:	d001      	beq.n	3936 <udc_iface_disable+0x5e>
		return false;
    3932:	2300      	movs	r3, #0
    3934:	e018      	b.n	3968 <udc_iface_disable+0x90>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3936:	4b10      	ldr	r3, [pc, #64]	; (3978 <udc_iface_disable+0xa0>)
    3938:	681b      	ldr	r3, [r3, #0]
    393a:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    393c:	68fb      	ldr	r3, [r7, #12]
    393e:	1c18      	adds	r0, r3, #0
    3940:	2105      	movs	r1, #5
    3942:	4b0e      	ldr	r3, [pc, #56]	; (397c <udc_iface_disable+0xa4>)
    3944:	4798      	blx	r3
    3946:	1c03      	adds	r3, r0, #0
    3948:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    394a:	68fb      	ldr	r3, [r7, #12]
    394c:	2b00      	cmp	r3, #0
    394e:	d105      	bne.n	395c <udc_iface_disable+0x84>
				break;
    3950:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    3952:	68bb      	ldr	r3, [r7, #8]
    3954:	685b      	ldr	r3, [r3, #4]
    3956:	4798      	blx	r3
	return true;
    3958:	2301      	movs	r3, #1
    395a:	e005      	b.n	3968 <udc_iface_disable+0x90>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    395c:	68fb      	ldr	r3, [r7, #12]
    395e:	789b      	ldrb	r3, [r3, #2]
    3960:	1c18      	adds	r0, r3, #0
    3962:	4b07      	ldr	r3, [pc, #28]	; (3980 <udc_iface_disable+0xa8>)
    3964:	4798      	blx	r3
		}
    3966:	e7e9      	b.n	393c <udc_iface_disable+0x64>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    3968:	1c18      	adds	r0, r3, #0
    396a:	46bd      	mov	sp, r7
    396c:	b004      	add	sp, #16
    396e:	bd80      	pop	{r7, pc}
    3970:	00003835 	.word	0x00003835
    3974:	20006c2c 	.word	0x20006c2c
    3978:	20006c30 	.word	0x20006c30
    397c:	000037d9 	.word	0x000037d9
    3980:	00007531 	.word	0x00007531

00003984 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3984:	b580      	push	{r7, lr}
    3986:	b084      	sub	sp, #16
    3988:	af00      	add	r7, sp, #0
    398a:	1c0a      	adds	r2, r1, #0
    398c:	1dfb      	adds	r3, r7, #7
    398e:	1c01      	adds	r1, r0, #0
    3990:	7019      	strb	r1, [r3, #0]
    3992:	1dbb      	adds	r3, r7, #6
    3994:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3996:	1dfb      	adds	r3, r7, #7
    3998:	781a      	ldrb	r2, [r3, #0]
    399a:	1dbb      	adds	r3, r7, #6
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	1c10      	adds	r0, r2, #0
    39a0:	1c19      	adds	r1, r3, #0
    39a2:	4b20      	ldr	r3, [pc, #128]	; (3a24 <udc_iface_enable+0xa0>)
    39a4:	4798      	blx	r3
    39a6:	1c03      	adds	r3, r0, #0
    39a8:	2201      	movs	r2, #1
    39aa:	4053      	eors	r3, r2
    39ac:	b2db      	uxtb	r3, r3
    39ae:	2b00      	cmp	r3, #0
    39b0:	d001      	beq.n	39b6 <udc_iface_enable+0x32>
		return false;
    39b2:	2300      	movs	r3, #0
    39b4:	e031      	b.n	3a1a <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    39b6:	4b1c      	ldr	r3, [pc, #112]	; (3a28 <udc_iface_enable+0xa4>)
    39b8:	681b      	ldr	r3, [r3, #0]
    39ba:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	1c18      	adds	r0, r3, #0
    39c0:	2105      	movs	r1, #5
    39c2:	4b1a      	ldr	r3, [pc, #104]	; (3a2c <udc_iface_enable+0xa8>)
    39c4:	4798      	blx	r3
    39c6:	1c03      	adds	r3, r0, #0
    39c8:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    39ca:	68fb      	ldr	r3, [r7, #12]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d10c      	bne.n	39ea <udc_iface_enable+0x66>
			break;
    39d0:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    39d2:	4b17      	ldr	r3, [pc, #92]	; (3a30 <udc_iface_enable+0xac>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	685a      	ldr	r2, [r3, #4]
    39d8:	1dfb      	adds	r3, r7, #7
    39da:	781b      	ldrb	r3, [r3, #0]
    39dc:	009b      	lsls	r3, r3, #2
    39de:	18d3      	adds	r3, r2, r3
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	4798      	blx	r3
    39e6:	1c03      	adds	r3, r0, #0
    39e8:	e017      	b.n	3a1a <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    39ea:	68fb      	ldr	r3, [r7, #12]
    39ec:	7899      	ldrb	r1, [r3, #2]
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	78da      	ldrb	r2, [r3, #3]
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	7918      	ldrb	r0, [r3, #4]
    39f6:	795b      	ldrb	r3, [r3, #5]
    39f8:	021b      	lsls	r3, r3, #8
    39fa:	4303      	orrs	r3, r0
    39fc:	b29b      	uxth	r3, r3
    39fe:	1c08      	adds	r0, r1, #0
    3a00:	1c11      	adds	r1, r2, #0
    3a02:	1c1a      	adds	r2, r3, #0
    3a04:	4b0b      	ldr	r3, [pc, #44]	; (3a34 <udc_iface_enable+0xb0>)
    3a06:	4798      	blx	r3
    3a08:	1c03      	adds	r3, r0, #0
    3a0a:	2201      	movs	r2, #1
    3a0c:	4053      	eors	r3, r2
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2b00      	cmp	r3, #0
    3a12:	d001      	beq.n	3a18 <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    3a14:	2300      	movs	r3, #0
    3a16:	e000      	b.n	3a1a <udc_iface_enable+0x96>
		}
	}
    3a18:	e7d0      	b.n	39bc <udc_iface_enable+0x38>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    3a1a:	1c18      	adds	r0, r3, #0
    3a1c:	46bd      	mov	sp, r7
    3a1e:	b004      	add	sp, #16
    3a20:	bd80      	pop	{r7, pc}
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	00003835 	.word	0x00003835
    3a28:	20006c30 	.word	0x20006c30
    3a2c:	000037d9 	.word	0x000037d9
    3a30:	20006c2c 	.word	0x20006c2c
    3a34:	000075c1 	.word	0x000075c1

00003a38 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	af00      	add	r7, sp, #0
	udd_enable();
    3a3c:	4b01      	ldr	r3, [pc, #4]	; (3a44 <udc_start+0xc>)
    3a3e:	4798      	blx	r3
}
    3a40:	46bd      	mov	sp, r7
    3a42:	bd80      	pop	{r7, pc}
    3a44:	00008565 	.word	0x00008565

00003a48 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	b082      	sub	sp, #8
    3a4c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3a4e:	4b16      	ldr	r3, [pc, #88]	; (3aa8 <udc_reset+0x60>)
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d015      	beq.n	3a82 <udc_reset+0x3a>
		for (iface_num = 0;
    3a56:	1dfb      	adds	r3, r7, #7
    3a58:	2200      	movs	r2, #0
    3a5a:	701a      	strb	r2, [r3, #0]
    3a5c:	e009      	b.n	3a72 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3a5e:	1dfb      	adds	r3, r7, #7
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	1c18      	adds	r0, r3, #0
    3a64:	4b11      	ldr	r3, [pc, #68]	; (3aac <udc_reset+0x64>)
    3a66:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3a68:	1dfb      	adds	r3, r7, #7
    3a6a:	781a      	ldrb	r2, [r3, #0]
    3a6c:	1dfb      	adds	r3, r7, #7
    3a6e:	3201      	adds	r2, #1
    3a70:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3a72:	4b0f      	ldr	r3, [pc, #60]	; (3ab0 <udc_reset+0x68>)
    3a74:	681b      	ldr	r3, [r3, #0]
    3a76:	681b      	ldr	r3, [r3, #0]
    3a78:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3a7a:	1dfa      	adds	r2, r7, #7
    3a7c:	7812      	ldrb	r2, [r2, #0]
    3a7e:	429a      	cmp	r2, r3
    3a80:	d3ed      	bcc.n	3a5e <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3a82:	4b09      	ldr	r3, [pc, #36]	; (3aa8 <udc_reset+0x60>)
    3a84:	2200      	movs	r2, #0
    3a86:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    3a88:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <udc_reset+0x6c>)
    3a8a:	881a      	ldrh	r2, [r3, #0]
    3a8c:	2302      	movs	r3, #2
    3a8e:	4013      	ands	r3, r2
    3a90:	b29b      	uxth	r3, r3
    3a92:	2b00      	cmp	r3, #0
    3a94:	d001      	beq.n	3a9a <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    3a96:	4b08      	ldr	r3, [pc, #32]	; (3ab8 <udc_reset+0x70>)
    3a98:	4798      	blx	r3
	}
#endif
	udc_device_status =
    3a9a:	4b06      	ldr	r3, [pc, #24]	; (3ab4 <udc_reset+0x6c>)
    3a9c:	2201      	movs	r2, #1
    3a9e:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3aa0:	46bd      	mov	sp, r7
    3aa2:	b002      	add	sp, #8
    3aa4:	bd80      	pop	{r7, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	20006c28 	.word	0x20006c28
    3aac:	000038d9 	.word	0x000038d9
    3ab0:	20006c2c 	.word	0x20006c2c
    3ab4:	20006c20 	.word	0x20006c20
    3ab8:	0000a6dd 	.word	0x0000a6dd

00003abc <udc_sof_notify>:

void udc_sof_notify(void)
{
    3abc:	b580      	push	{r7, lr}
    3abe:	b082      	sub	sp, #8
    3ac0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    3ac2:	4b16      	ldr	r3, [pc, #88]	; (3b1c <udc_sof_notify+0x60>)
    3ac4:	781b      	ldrb	r3, [r3, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d025      	beq.n	3b16 <udc_sof_notify+0x5a>
		for (iface_num = 0;
    3aca:	1dfb      	adds	r3, r7, #7
    3acc:	2200      	movs	r2, #0
    3ace:	701a      	strb	r2, [r3, #0]
    3ad0:	e019      	b.n	3b06 <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3ad2:	4b13      	ldr	r3, [pc, #76]	; (3b20 <udc_sof_notify+0x64>)
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	685a      	ldr	r2, [r3, #4]
    3ad8:	1dfb      	adds	r3, r7, #7
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	009b      	lsls	r3, r3, #2
    3ade:	18d3      	adds	r3, r2, r3
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	691b      	ldr	r3, [r3, #16]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d009      	beq.n	3afc <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3ae8:	4b0d      	ldr	r3, [pc, #52]	; (3b20 <udc_sof_notify+0x64>)
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	685a      	ldr	r2, [r3, #4]
    3aee:	1dfb      	adds	r3, r7, #7
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	009b      	lsls	r3, r3, #2
    3af4:	18d3      	adds	r3, r2, r3
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	691b      	ldr	r3, [r3, #16]
    3afa:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3afc:	1dfb      	adds	r3, r7, #7
    3afe:	781a      	ldrb	r2, [r3, #0]
    3b00:	1dfb      	adds	r3, r7, #7
    3b02:	3201      	adds	r2, #1
    3b04:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3b06:	4b06      	ldr	r3, [pc, #24]	; (3b20 <udc_sof_notify+0x64>)
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3b0e:	1dfa      	adds	r2, r7, #7
    3b10:	7812      	ldrb	r2, [r2, #0]
    3b12:	429a      	cmp	r2, r3
    3b14:	d3dd      	bcc.n	3ad2 <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3b16:	46bd      	mov	sp, r7
    3b18:	b002      	add	sp, #8
    3b1a:	bd80      	pop	{r7, pc}
    3b1c:	20006c28 	.word	0x20006c28
    3b20:	20006c2c 	.word	0x20006c2c

00003b24 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    3b24:	b580      	push	{r7, lr}
    3b26:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3b28:	4b07      	ldr	r3, [pc, #28]	; (3b48 <udc_req_std_dev_get_status+0x24>)
    3b2a:	88db      	ldrh	r3, [r3, #6]
    3b2c:	2b02      	cmp	r3, #2
    3b2e:	d001      	beq.n	3b34 <udc_req_std_dev_get_status+0x10>
		return false;
    3b30:	2300      	movs	r3, #0
    3b32:	e005      	b.n	3b40 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3b34:	4b05      	ldr	r3, [pc, #20]	; (3b4c <udc_req_std_dev_get_status+0x28>)
    3b36:	1c18      	adds	r0, r3, #0
    3b38:	2102      	movs	r1, #2
    3b3a:	4b05      	ldr	r3, [pc, #20]	; (3b50 <udc_req_std_dev_get_status+0x2c>)
    3b3c:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    3b3e:	2301      	movs	r3, #1
}
    3b40:	1c18      	adds	r0, r3, #0
    3b42:	46bd      	mov	sp, r7
    3b44:	bd80      	pop	{r7, pc}
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	20006fc4 	.word	0x20006fc4
    3b4c:	20006c20 	.word	0x20006c20
    3b50:	00007cb1 	.word	0x00007cb1

00003b54 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    3b54:	b580      	push	{r7, lr}
    3b56:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    3b58:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <udc_req_std_ep_get_status+0x38>)
    3b5a:	88db      	ldrh	r3, [r3, #6]
    3b5c:	2b02      	cmp	r3, #2
    3b5e:	d001      	beq.n	3b64 <udc_req_std_ep_get_status+0x10>
		return false;
    3b60:	2300      	movs	r3, #0
    3b62:	e00f      	b.n	3b84 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    3b64:	4b09      	ldr	r3, [pc, #36]	; (3b8c <udc_req_std_ep_get_status+0x38>)
    3b66:	889b      	ldrh	r3, [r3, #4]
    3b68:	b2db      	uxtb	r3, r3
    3b6a:	1c18      	adds	r0, r3, #0
    3b6c:	4b08      	ldr	r3, [pc, #32]	; (3b90 <udc_req_std_ep_get_status+0x3c>)
    3b6e:	4798      	blx	r3
    3b70:	1c03      	adds	r3, r0, #0
    3b72:	1c1a      	adds	r2, r3, #0
    3b74:	4b07      	ldr	r3, [pc, #28]	; (3b94 <udc_req_std_ep_get_status+0x40>)
    3b76:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3b78:	4b06      	ldr	r3, [pc, #24]	; (3b94 <udc_req_std_ep_get_status+0x40>)
    3b7a:	1c18      	adds	r0, r3, #0
    3b7c:	2102      	movs	r1, #2
    3b7e:	4b06      	ldr	r3, [pc, #24]	; (3b98 <udc_req_std_ep_get_status+0x44>)
    3b80:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    3b82:	2301      	movs	r3, #1
}
    3b84:	1c18      	adds	r0, r3, #0
    3b86:	46bd      	mov	sp, r7
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	20006fc4 	.word	0x20006fc4
    3b90:	00007765 	.word	0x00007765
    3b94:	20006c34 	.word	0x20006c34
    3b98:	00007cb1 	.word	0x00007cb1

00003b9c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3ba0:	4b0c      	ldr	r3, [pc, #48]	; (3bd4 <udc_req_std_dev_clear_feature+0x38>)
    3ba2:	88db      	ldrh	r3, [r3, #6]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d001      	beq.n	3bac <udc_req_std_dev_clear_feature+0x10>
		return false;
    3ba8:	2300      	movs	r3, #0
    3baa:	e00f      	b.n	3bcc <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    3bac:	4b09      	ldr	r3, [pc, #36]	; (3bd4 <udc_req_std_dev_clear_feature+0x38>)
    3bae:	885b      	ldrh	r3, [r3, #2]
    3bb0:	2b01      	cmp	r3, #1
    3bb2:	d10a      	bne.n	3bca <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    3bb4:	4b08      	ldr	r3, [pc, #32]	; (3bd8 <udc_req_std_dev_clear_feature+0x3c>)
    3bb6:	881b      	ldrh	r3, [r3, #0]
    3bb8:	2202      	movs	r2, #2
    3bba:	4393      	bics	r3, r2
    3bbc:	b29a      	uxth	r2, r3
    3bbe:	4b06      	ldr	r3, [pc, #24]	; (3bd8 <udc_req_std_dev_clear_feature+0x3c>)
    3bc0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <udc_req_std_dev_clear_feature+0x40>)
    3bc4:	4798      	blx	r3
#endif
		return true;
    3bc6:	2301      	movs	r3, #1
    3bc8:	e000      	b.n	3bcc <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    3bca:	2300      	movs	r3, #0
}
    3bcc:	1c18      	adds	r0, r3, #0
    3bce:	46bd      	mov	sp, r7
    3bd0:	bd80      	pop	{r7, pc}
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	20006fc4 	.word	0x20006fc4
    3bd8:	20006c20 	.word	0x20006c20
    3bdc:	0000a6dd 	.word	0x0000a6dd

00003be0 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    3be0:	b580      	push	{r7, lr}
    3be2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3be4:	4b0a      	ldr	r3, [pc, #40]	; (3c10 <udc_req_std_ep_clear_feature+0x30>)
    3be6:	88db      	ldrh	r3, [r3, #6]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d001      	beq.n	3bf0 <udc_req_std_ep_clear_feature+0x10>
		return false;
    3bec:	2300      	movs	r3, #0
    3bee:	e00c      	b.n	3c0a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3bf0:	4b07      	ldr	r3, [pc, #28]	; (3c10 <udc_req_std_ep_clear_feature+0x30>)
    3bf2:	885b      	ldrh	r3, [r3, #2]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d107      	bne.n	3c08 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3bf8:	4b05      	ldr	r3, [pc, #20]	; (3c10 <udc_req_std_ep_clear_feature+0x30>)
    3bfa:	889b      	ldrh	r3, [r3, #4]
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	1c18      	adds	r0, r3, #0
    3c00:	4b04      	ldr	r3, [pc, #16]	; (3c14 <udc_req_std_ep_clear_feature+0x34>)
    3c02:	4798      	blx	r3
    3c04:	1c03      	adds	r3, r0, #0
    3c06:	e000      	b.n	3c0a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    3c08:	2300      	movs	r3, #0
}
    3c0a:	1c18      	adds	r0, r3, #0
    3c0c:	46bd      	mov	sp, r7
    3c0e:	bd80      	pop	{r7, pc}
    3c10:	20006fc4 	.word	0x20006fc4
    3c14:	000077e9 	.word	0x000077e9

00003c18 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3c1c:	4b0c      	ldr	r3, [pc, #48]	; (3c50 <udc_req_std_dev_set_feature+0x38>)
    3c1e:	88db      	ldrh	r3, [r3, #6]
    3c20:	2b00      	cmp	r3, #0
    3c22:	d001      	beq.n	3c28 <udc_req_std_dev_set_feature+0x10>
		return false;
    3c24:	2300      	movs	r3, #0
    3c26:	e010      	b.n	3c4a <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    3c28:	4b09      	ldr	r3, [pc, #36]	; (3c50 <udc_req_std_dev_set_feature+0x38>)
    3c2a:	885b      	ldrh	r3, [r3, #2]
    3c2c:	2b01      	cmp	r3, #1
    3c2e:	d002      	beq.n	3c36 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    3c30:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    3c32:	2300      	movs	r3, #0
    3c34:	e009      	b.n	3c4a <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    3c36:	4b07      	ldr	r3, [pc, #28]	; (3c54 <udc_req_std_dev_set_feature+0x3c>)
    3c38:	881b      	ldrh	r3, [r3, #0]
    3c3a:	2202      	movs	r2, #2
    3c3c:	4313      	orrs	r3, r2
    3c3e:	b29a      	uxth	r2, r3
    3c40:	4b04      	ldr	r3, [pc, #16]	; (3c54 <udc_req_std_dev_set_feature+0x3c>)
    3c42:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    3c44:	4b04      	ldr	r3, [pc, #16]	; (3c58 <udc_req_std_dev_set_feature+0x40>)
    3c46:	4798      	blx	r3
		return true;
    3c48:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    3c4a:	1c18      	adds	r0, r3, #0
    3c4c:	46bd      	mov	sp, r7
    3c4e:	bd80      	pop	{r7, pc}
    3c50:	20006fc4 	.word	0x20006fc4
    3c54:	20006c20 	.word	0x20006c20
    3c58:	0000a6cd 	.word	0x0000a6cd

00003c5c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3c60:	4b0d      	ldr	r3, [pc, #52]	; (3c98 <udc_req_std_ep_set_feature+0x3c>)
    3c62:	88db      	ldrh	r3, [r3, #6]
    3c64:	2b00      	cmp	r3, #0
    3c66:	d001      	beq.n	3c6c <udc_req_std_ep_set_feature+0x10>
		return false;
    3c68:	2300      	movs	r3, #0
    3c6a:	e012      	b.n	3c92 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    3c6c:	4b0a      	ldr	r3, [pc, #40]	; (3c98 <udc_req_std_ep_set_feature+0x3c>)
    3c6e:	885b      	ldrh	r3, [r3, #2]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d10d      	bne.n	3c90 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c74:	4b08      	ldr	r3, [pc, #32]	; (3c98 <udc_req_std_ep_set_feature+0x3c>)
    3c76:	889b      	ldrh	r3, [r3, #4]
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	1c18      	adds	r0, r3, #0
    3c7c:	4b07      	ldr	r3, [pc, #28]	; (3c9c <udc_req_std_ep_set_feature+0x40>)
    3c7e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    3c80:	4b05      	ldr	r3, [pc, #20]	; (3c98 <udc_req_std_ep_set_feature+0x3c>)
    3c82:	889b      	ldrh	r3, [r3, #4]
    3c84:	b2db      	uxtb	r3, r3
    3c86:	1c18      	adds	r0, r3, #0
    3c88:	4b05      	ldr	r3, [pc, #20]	; (3ca0 <udc_req_std_ep_set_feature+0x44>)
    3c8a:	4798      	blx	r3
    3c8c:	1c03      	adds	r3, r0, #0
    3c8e:	e000      	b.n	3c92 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    3c90:	2300      	movs	r3, #0
}
    3c92:	1c18      	adds	r0, r3, #0
    3c94:	46bd      	mov	sp, r7
    3c96:	bd80      	pop	{r7, pc}
    3c98:	20006fc4 	.word	0x20006fc4
    3c9c:	0000747d 	.word	0x0000747d
    3ca0:	00007791 	.word	0x00007791

00003ca4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3ca8:	4b05      	ldr	r3, [pc, #20]	; (3cc0 <udc_valid_address+0x1c>)
    3caa:	885b      	ldrh	r3, [r3, #2]
    3cac:	b2da      	uxtb	r2, r3
    3cae:	237f      	movs	r3, #127	; 0x7f
    3cb0:	4013      	ands	r3, r2
    3cb2:	b2db      	uxtb	r3, r3
    3cb4:	1c18      	adds	r0, r3, #0
    3cb6:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <udc_valid_address+0x20>)
    3cb8:	4798      	blx	r3
}
    3cba:	46bd      	mov	sp, r7
    3cbc:	bd80      	pop	{r7, pc}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	20006fc4 	.word	0x20006fc4
    3cc4:	00007c1d 	.word	0x00007c1d

00003cc8 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    3ccc:	4b06      	ldr	r3, [pc, #24]	; (3ce8 <udc_req_std_dev_set_address+0x20>)
    3cce:	88db      	ldrh	r3, [r3, #6]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d001      	beq.n	3cd8 <udc_req_std_dev_set_address+0x10>
		return false;
    3cd4:	2300      	movs	r3, #0
    3cd6:	e003      	b.n	3ce0 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    3cd8:	4b03      	ldr	r3, [pc, #12]	; (3ce8 <udc_req_std_dev_set_address+0x20>)
    3cda:	4a04      	ldr	r2, [pc, #16]	; (3cec <udc_req_std_dev_set_address+0x24>)
    3cdc:	611a      	str	r2, [r3, #16]
	return true;
    3cde:	2301      	movs	r3, #1
}
    3ce0:	1c18      	adds	r0, r3, #0
    3ce2:	46bd      	mov	sp, r7
    3ce4:	bd80      	pop	{r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	20006fc4 	.word	0x20006fc4
    3cec:	00003ca5 	.word	0x00003ca5

00003cf0 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	b084      	sub	sp, #16
    3cf4:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    3cf6:	1dfb      	adds	r3, r7, #7
    3cf8:	2200      	movs	r2, #0
    3cfa:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3cfc:	4b34      	ldr	r3, [pc, #208]	; (3dd0 <udc_req_std_dev_get_str_desc+0xe0>)
    3cfe:	885b      	ldrh	r3, [r3, #2]
    3d00:	1c1a      	adds	r2, r3, #0
    3d02:	23ff      	movs	r3, #255	; 0xff
    3d04:	4013      	ands	r3, r2
    3d06:	2b01      	cmp	r3, #1
    3d08:	d00e      	beq.n	3d28 <udc_req_std_dev_get_str_desc+0x38>
    3d0a:	dc02      	bgt.n	3d12 <udc_req_std_dev_get_str_desc+0x22>
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d005      	beq.n	3d1c <udc_req_std_dev_get_str_desc+0x2c>
    3d10:	e01e      	b.n	3d50 <udc_req_std_dev_get_str_desc+0x60>
    3d12:	2b02      	cmp	r3, #2
    3d14:	d00e      	beq.n	3d34 <udc_req_std_dev_get_str_desc+0x44>
    3d16:	2b03      	cmp	r3, #3
    3d18:	d012      	beq.n	3d40 <udc_req_std_dev_get_str_desc+0x50>
    3d1a:	e019      	b.n	3d50 <udc_req_std_dev_get_str_desc+0x60>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3d1c:	4b2d      	ldr	r3, [pc, #180]	; (3dd4 <udc_req_std_dev_get_str_desc+0xe4>)
    3d1e:	1c18      	adds	r0, r3, #0
    3d20:	2104      	movs	r1, #4
    3d22:	4b2d      	ldr	r3, [pc, #180]	; (3dd8 <udc_req_std_dev_get_str_desc+0xe8>)
    3d24:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    3d26:	e01b      	b.n	3d60 <udc_req_std_dev_get_str_desc+0x70>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3d28:	1dfb      	adds	r3, r7, #7
    3d2a:	220a      	movs	r2, #10
    3d2c:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    3d2e:	4b2b      	ldr	r3, [pc, #172]	; (3ddc <udc_req_std_dev_get_str_desc+0xec>)
    3d30:	60bb      	str	r3, [r7, #8]
		break;
    3d32:	e015      	b.n	3d60 <udc_req_std_dev_get_str_desc+0x70>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    3d34:	1dfb      	adds	r3, r7, #7
    3d36:	2220      	movs	r2, #32
    3d38:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    3d3a:	4b29      	ldr	r3, [pc, #164]	; (3de0 <udc_req_std_dev_get_str_desc+0xf0>)
    3d3c:	60bb      	str	r3, [r7, #8]
		break;
    3d3e:	e00f      	b.n	3d60 <udc_req_std_dev_get_str_desc+0x70>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	220c      	movs	r2, #12
    3d44:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    3d46:	4b27      	ldr	r3, [pc, #156]	; (3de4 <udc_req_std_dev_get_str_desc+0xf4>)
    3d48:	4798      	blx	r3
    3d4a:	1c03      	adds	r3, r0, #0
    3d4c:	60bb      	str	r3, [r7, #8]
		break;
    3d4e:	e007      	b.n	3d60 <udc_req_std_dev_get_str_desc+0x70>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
    3d50:	4b25      	ldr	r3, [pc, #148]	; (3de8 <udc_req_std_dev_get_str_desc+0xf8>)
    3d52:	4798      	blx	r3
    3d54:	1c03      	adds	r3, r0, #0
    3d56:	2b00      	cmp	r3, #0
    3d58:	d000      	beq.n	3d5c <udc_req_std_dev_get_str_desc+0x6c>
			break;
    3d5a:	e001      	b.n	3d60 <udc_req_std_dev_get_str_desc+0x70>
		}
#endif
		return false;
    3d5c:	2300      	movs	r3, #0
    3d5e:	e033      	b.n	3dc8 <udc_req_std_dev_get_str_desc+0xd8>
	}

	if (str_length) {
    3d60:	1dfb      	adds	r3, r7, #7
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	2b00      	cmp	r3, #0
    3d66:	d02e      	beq.n	3dc6 <udc_req_std_dev_get_str_desc+0xd6>
		for(i = 0; i < str_length; i++) {
    3d68:	1c3b      	adds	r3, r7, #0
    3d6a:	330f      	adds	r3, #15
    3d6c:	2200      	movs	r2, #0
    3d6e:	701a      	strb	r2, [r3, #0]
    3d70:	e013      	b.n	3d9a <udc_req_std_dev_get_str_desc+0xaa>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3d72:	1c3b      	adds	r3, r7, #0
    3d74:	330f      	adds	r3, #15
    3d76:	781b      	ldrb	r3, [r3, #0]
    3d78:	1c3a      	adds	r2, r7, #0
    3d7a:	320f      	adds	r2, #15
    3d7c:	7812      	ldrb	r2, [r2, #0]
    3d7e:	68b9      	ldr	r1, [r7, #8]
    3d80:	188a      	adds	r2, r1, r2
    3d82:	7812      	ldrb	r2, [r2, #0]
    3d84:	4919      	ldr	r1, [pc, #100]	; (3dec <udc_req_std_dev_get_str_desc+0xfc>)
    3d86:	005b      	lsls	r3, r3, #1
    3d88:	18cb      	adds	r3, r1, r3
    3d8a:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3d8c:	1c3b      	adds	r3, r7, #0
    3d8e:	330f      	adds	r3, #15
    3d90:	781a      	ldrb	r2, [r3, #0]
    3d92:	1c3b      	adds	r3, r7, #0
    3d94:	330f      	adds	r3, #15
    3d96:	3201      	adds	r2, #1
    3d98:	701a      	strb	r2, [r3, #0]
    3d9a:	1c3a      	adds	r2, r7, #0
    3d9c:	320f      	adds	r2, #15
    3d9e:	1dfb      	adds	r3, r7, #7
    3da0:	7812      	ldrb	r2, [r2, #0]
    3da2:	781b      	ldrb	r3, [r3, #0]
    3da4:	429a      	cmp	r2, r3
    3da6:	d3e4      	bcc.n	3d72 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3da8:	1dfb      	adds	r3, r7, #7
    3daa:	781b      	ldrb	r3, [r3, #0]
    3dac:	3301      	adds	r3, #1
    3dae:	b2db      	uxtb	r3, r3
    3db0:	18db      	adds	r3, r3, r3
    3db2:	b2da      	uxtb	r2, r3
    3db4:	4b0d      	ldr	r3, [pc, #52]	; (3dec <udc_req_std_dev_get_str_desc+0xfc>)
    3db6:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    3db8:	4b0c      	ldr	r3, [pc, #48]	; (3dec <udc_req_std_dev_get_str_desc+0xfc>)
    3dba:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    3dbc:	4a0b      	ldr	r2, [pc, #44]	; (3dec <udc_req_std_dev_get_str_desc+0xfc>)
    3dbe:	1c10      	adds	r0, r2, #0
    3dc0:	1c19      	adds	r1, r3, #0
    3dc2:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <udc_req_std_dev_get_str_desc+0xe8>)
    3dc4:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    3dc6:	2301      	movs	r3, #1
}
    3dc8:	1c18      	adds	r0, r3, #0
    3dca:	46bd      	mov	sp, r7
    3dcc:	b004      	add	sp, #16
    3dce:	bd80      	pop	{r7, pc}
    3dd0:	20006fc4 	.word	0x20006fc4
    3dd4:	200001e4 	.word	0x200001e4
    3dd8:	00007cb1 	.word	0x00007cb1
    3ddc:	200001e8 	.word	0x200001e8
    3de0:	200001f4 	.word	0x200001f4
    3de4:	0000378d 	.word	0x0000378d
    3de8:	0000a6ed 	.word	0x0000a6ed
    3dec:	20000218 	.word	0x20000218

00003df0 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b082      	sub	sp, #8
    3df4:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3df6:	4b39      	ldr	r3, [pc, #228]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3df8:	885a      	ldrh	r2, [r3, #2]
    3dfa:	1dfb      	adds	r3, r7, #7
    3dfc:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3dfe:	4b37      	ldr	r3, [pc, #220]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3e00:	885b      	ldrh	r3, [r3, #2]
    3e02:	0a1b      	lsrs	r3, r3, #8
    3e04:	b29b      	uxth	r3, r3
    3e06:	b2db      	uxtb	r3, r3
    3e08:	2b02      	cmp	r3, #2
    3e0a:	d012      	beq.n	3e32 <udc_req_std_dev_get_descriptor+0x42>
    3e0c:	dc02      	bgt.n	3e14 <udc_req_std_dev_get_descriptor+0x24>
    3e0e:	2b01      	cmp	r3, #1
    3e10:	d005      	beq.n	3e1e <udc_req_std_dev_get_descriptor+0x2e>
    3e12:	e052      	b.n	3eba <udc_req_std_dev_get_descriptor+0xca>
    3e14:	2b03      	cmp	r3, #3
    3e16:	d045      	beq.n	3ea4 <udc_req_std_dev_get_descriptor+0xb4>
    3e18:	2b0f      	cmp	r3, #15
    3e1a:	d02f      	beq.n	3e7c <udc_req_std_dev_get_descriptor+0x8c>
    3e1c:	e04d      	b.n	3eba <udc_req_std_dev_get_descriptor+0xca>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    3e1e:	4b30      	ldr	r3, [pc, #192]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e20:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    3e22:	4b2f      	ldr	r3, [pc, #188]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3e28:	1c10      	adds	r0, r2, #0
    3e2a:	1c19      	adds	r1, r3, #0
    3e2c:	4b2d      	ldr	r3, [pc, #180]	; (3ee4 <udc_req_std_dev_get_descriptor+0xf4>)
    3e2e:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    3e30:	e045      	b.n	3ebe <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3e32:	4b2b      	ldr	r3, [pc, #172]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e34:	681b      	ldr	r3, [r3, #0]
    3e36:	7c5b      	ldrb	r3, [r3, #17]
    3e38:	1dfa      	adds	r2, r7, #7
    3e3a:	7812      	ldrb	r2, [r2, #0]
    3e3c:	429a      	cmp	r2, r3
    3e3e:	d301      	bcc.n	3e44 <udc_req_std_dev_get_descriptor+0x54>
					bNumConfigurations) {
				return false;
    3e40:	2300      	movs	r3, #0
    3e42:	e047      	b.n	3ed4 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    3e44:	4b26      	ldr	r3, [pc, #152]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e46:	685a      	ldr	r2, [r3, #4]
    3e48:	1dfb      	adds	r3, r7, #7
    3e4a:	781b      	ldrb	r3, [r3, #0]
    3e4c:	00db      	lsls	r3, r3, #3
    3e4e:	18d3      	adds	r3, r2, r3
    3e50:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3e52:	4b23      	ldr	r3, [pc, #140]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e54:	6859      	ldr	r1, [r3, #4]
    3e56:	1dfb      	adds	r3, r7, #7
    3e58:	781b      	ldrb	r3, [r3, #0]
    3e5a:	00db      	lsls	r3, r3, #3
    3e5c:	18cb      	adds	r3, r1, r3
    3e5e:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3e60:	7899      	ldrb	r1, [r3, #2]
    3e62:	78db      	ldrb	r3, [r3, #3]
    3e64:	021b      	lsls	r3, r3, #8
    3e66:	430b      	orrs	r3, r1
    3e68:	b29b      	uxth	r3, r3
    3e6a:	1c10      	adds	r0, r2, #0
    3e6c:	1c19      	adds	r1, r3, #0
    3e6e:	4b1d      	ldr	r3, [pc, #116]	; (3ee4 <udc_req_std_dev_get_descriptor+0xf4>)
    3e70:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3e72:	4b1a      	ldr	r3, [pc, #104]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3e74:	689b      	ldr	r3, [r3, #8]
    3e76:	2202      	movs	r2, #2
    3e78:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    3e7a:	e020      	b.n	3ebe <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3e7c:	4b18      	ldr	r3, [pc, #96]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e7e:	689b      	ldr	r3, [r3, #8]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d101      	bne.n	3e88 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    3e84:	2300      	movs	r3, #0
    3e86:	e025      	b.n	3ed4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3e88:	4b15      	ldr	r3, [pc, #84]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e8a:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    3e8c:	4b14      	ldr	r3, [pc, #80]	; (3ee0 <udc_req_std_dev_get_descriptor+0xf0>)
    3e8e:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3e90:	7899      	ldrb	r1, [r3, #2]
    3e92:	78db      	ldrb	r3, [r3, #3]
    3e94:	021b      	lsls	r3, r3, #8
    3e96:	430b      	orrs	r3, r1
    3e98:	b29b      	uxth	r3, r3
    3e9a:	1c10      	adds	r0, r2, #0
    3e9c:	1c19      	adds	r1, r3, #0
    3e9e:	4b11      	ldr	r3, [pc, #68]	; (3ee4 <udc_req_std_dev_get_descriptor+0xf4>)
    3ea0:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    3ea2:	e00c      	b.n	3ebe <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    3ea4:	4b10      	ldr	r3, [pc, #64]	; (3ee8 <udc_req_std_dev_get_descriptor+0xf8>)
    3ea6:	4798      	blx	r3
    3ea8:	1c03      	adds	r3, r0, #0
    3eaa:	2201      	movs	r2, #1
    3eac:	4053      	eors	r3, r2
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d001      	beq.n	3eb8 <udc_req_std_dev_get_descriptor+0xc8>
			return false;
    3eb4:	2300      	movs	r3, #0
    3eb6:	e00d      	b.n	3ed4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;
    3eb8:	e001      	b.n	3ebe <udc_req_std_dev_get_descriptor+0xce>

	default:
		// Unknown descriptor requested
		return false;
    3eba:	2300      	movs	r3, #0
    3ebc:	e00a      	b.n	3ed4 <udc_req_std_dev_get_descriptor+0xe4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3ebe:	4b07      	ldr	r3, [pc, #28]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3ec0:	88da      	ldrh	r2, [r3, #6]
    3ec2:	4b06      	ldr	r3, [pc, #24]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3ec4:	899b      	ldrh	r3, [r3, #12]
    3ec6:	429a      	cmp	r2, r3
    3ec8:	d203      	bcs.n	3ed2 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3eca:	4b04      	ldr	r3, [pc, #16]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3ecc:	88da      	ldrh	r2, [r3, #6]
    3ece:	4b03      	ldr	r3, [pc, #12]	; (3edc <udc_req_std_dev_get_descriptor+0xec>)
    3ed0:	819a      	strh	r2, [r3, #12]
	}
	return true;
    3ed2:	2301      	movs	r3, #1
}
    3ed4:	1c18      	adds	r0, r3, #0
    3ed6:	46bd      	mov	sp, r7
    3ed8:	b002      	add	sp, #8
    3eda:	bd80      	pop	{r7, pc}
    3edc:	20006fc4 	.word	0x20006fc4
    3ee0:	200000f4 	.word	0x200000f4
    3ee4:	00007cb1 	.word	0x00007cb1
    3ee8:	00003cf1 	.word	0x00003cf1

00003eec <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    3ef0:	4b07      	ldr	r3, [pc, #28]	; (3f10 <udc_req_std_dev_get_configuration+0x24>)
    3ef2:	88db      	ldrh	r3, [r3, #6]
    3ef4:	2b01      	cmp	r3, #1
    3ef6:	d001      	beq.n	3efc <udc_req_std_dev_get_configuration+0x10>
		return false;
    3ef8:	2300      	movs	r3, #0
    3efa:	e005      	b.n	3f08 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3efc:	4b05      	ldr	r3, [pc, #20]	; (3f14 <udc_req_std_dev_get_configuration+0x28>)
    3efe:	1c18      	adds	r0, r3, #0
    3f00:	2101      	movs	r1, #1
    3f02:	4b05      	ldr	r3, [pc, #20]	; (3f18 <udc_req_std_dev_get_configuration+0x2c>)
    3f04:	4798      	blx	r3
	return true;
    3f06:	2301      	movs	r3, #1
}
    3f08:	1c18      	adds	r0, r3, #0
    3f0a:	46bd      	mov	sp, r7
    3f0c:	bd80      	pop	{r7, pc}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	20006fc4 	.word	0x20006fc4
    3f14:	20006c28 	.word	0x20006c28
    3f18:	00007cb1 	.word	0x00007cb1

00003f1c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    3f1c:	b580      	push	{r7, lr}
    3f1e:	b082      	sub	sp, #8
    3f20:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    3f22:	4b2a      	ldr	r3, [pc, #168]	; (3fcc <udc_req_std_dev_set_configuration+0xb0>)
    3f24:	88db      	ldrh	r3, [r3, #6]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d001      	beq.n	3f2e <udc_req_std_dev_set_configuration+0x12>
		return false;
    3f2a:	2300      	movs	r3, #0
    3f2c:	e049      	b.n	3fc2 <udc_req_std_dev_set_configuration+0xa6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    3f2e:	4b28      	ldr	r3, [pc, #160]	; (3fd0 <udc_req_std_dev_set_configuration+0xb4>)
    3f30:	4798      	blx	r3
    3f32:	1c03      	adds	r3, r0, #0
    3f34:	2b00      	cmp	r3, #0
    3f36:	d101      	bne.n	3f3c <udc_req_std_dev_set_configuration+0x20>
		return false;
    3f38:	2300      	movs	r3, #0
    3f3a:	e042      	b.n	3fc2 <udc_req_std_dev_set_configuration+0xa6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3f3c:	4b23      	ldr	r3, [pc, #140]	; (3fcc <udc_req_std_dev_set_configuration+0xb0>)
    3f3e:	885b      	ldrh	r3, [r3, #2]
    3f40:	1c1a      	adds	r2, r3, #0
    3f42:	23ff      	movs	r3, #255	; 0xff
    3f44:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    3f46:	4b23      	ldr	r3, [pc, #140]	; (3fd4 <udc_req_std_dev_set_configuration+0xb8>)
    3f48:	681b      	ldr	r3, [r3, #0]
    3f4a:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    3f4c:	429a      	cmp	r2, r3
    3f4e:	dd01      	ble.n	3f54 <udc_req_std_dev_set_configuration+0x38>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    3f50:	2300      	movs	r3, #0
    3f52:	e036      	b.n	3fc2 <udc_req_std_dev_set_configuration+0xa6>
		}
	}

	// Reset current configuration
	udc_reset();
    3f54:	4b20      	ldr	r3, [pc, #128]	; (3fd8 <udc_req_std_dev_set_configuration+0xbc>)
    3f56:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    3f58:	4b1c      	ldr	r3, [pc, #112]	; (3fcc <udc_req_std_dev_set_configuration+0xb0>)
    3f5a:	885b      	ldrh	r3, [r3, #2]
    3f5c:	b2da      	uxtb	r2, r3
    3f5e:	4b1f      	ldr	r3, [pc, #124]	; (3fdc <udc_req_std_dev_set_configuration+0xc0>)
    3f60:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    3f62:	4b1e      	ldr	r3, [pc, #120]	; (3fdc <udc_req_std_dev_set_configuration+0xc0>)
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d101      	bne.n	3f6e <udc_req_std_dev_set_configuration+0x52>
		return true; // Default empty configuration requested
    3f6a:	2301      	movs	r3, #1
    3f6c:	e029      	b.n	3fc2 <udc_req_std_dev_set_configuration+0xa6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    3f6e:	4b19      	ldr	r3, [pc, #100]	; (3fd4 <udc_req_std_dev_set_configuration+0xb8>)
    3f70:	685a      	ldr	r2, [r3, #4]
    3f72:	4b1a      	ldr	r3, [pc, #104]	; (3fdc <udc_req_std_dev_set_configuration+0xc0>)
    3f74:	781b      	ldrb	r3, [r3, #0]
    3f76:	491a      	ldr	r1, [pc, #104]	; (3fe0 <udc_req_std_dev_set_configuration+0xc4>)
    3f78:	185b      	adds	r3, r3, r1
    3f7a:	00db      	lsls	r3, r3, #3
    3f7c:	18d2      	adds	r2, r2, r3
    3f7e:	4b19      	ldr	r3, [pc, #100]	; (3fe4 <udc_req_std_dev_set_configuration+0xc8>)
    3f80:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3f82:	1dfb      	adds	r3, r7, #7
    3f84:	2200      	movs	r2, #0
    3f86:	701a      	strb	r2, [r3, #0]
    3f88:	e012      	b.n	3fb0 <udc_req_std_dev_set_configuration+0x94>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    3f8a:	1dfb      	adds	r3, r7, #7
    3f8c:	781b      	ldrb	r3, [r3, #0]
    3f8e:	1c18      	adds	r0, r3, #0
    3f90:	2100      	movs	r1, #0
    3f92:	4b15      	ldr	r3, [pc, #84]	; (3fe8 <udc_req_std_dev_set_configuration+0xcc>)
    3f94:	4798      	blx	r3
    3f96:	1c03      	adds	r3, r0, #0
    3f98:	2201      	movs	r2, #1
    3f9a:	4053      	eors	r3, r2
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d001      	beq.n	3fa6 <udc_req_std_dev_set_configuration+0x8a>
			return false;
    3fa2:	2300      	movs	r3, #0
    3fa4:	e00d      	b.n	3fc2 <udc_req_std_dev_set_configuration+0xa6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    3fa6:	1dfb      	adds	r3, r7, #7
    3fa8:	781a      	ldrb	r2, [r3, #0]
    3faa:	1dfb      	adds	r3, r7, #7
    3fac:	3201      	adds	r2, #1
    3fae:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3fb0:	4b0c      	ldr	r3, [pc, #48]	; (3fe4 <udc_req_std_dev_set_configuration+0xc8>)
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	791b      	ldrb	r3, [r3, #4]
    3fb8:	1dfa      	adds	r2, r7, #7
    3fba:	7812      	ldrb	r2, [r2, #0]
    3fbc:	429a      	cmp	r2, r3
    3fbe:	d3e4      	bcc.n	3f8a <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    3fc0:	2301      	movs	r3, #1
}
    3fc2:	1c18      	adds	r0, r3, #0
    3fc4:	46bd      	mov	sp, r7
    3fc6:	b002      	add	sp, #8
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	20006fc4 	.word	0x20006fc4
    3fd0:	00007c45 	.word	0x00007c45
    3fd4:	200000f4 	.word	0x200000f4
    3fd8:	00003a49 	.word	0x00003a49
    3fdc:	20006c28 	.word	0x20006c28
    3fe0:	1fffffff 	.word	0x1fffffff
    3fe4:	20006c2c 	.word	0x20006c2c
    3fe8:	00003985 	.word	0x00003985

00003fec <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    3fec:	b580      	push	{r7, lr}
    3fee:	b082      	sub	sp, #8
    3ff0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3ff2:	4b21      	ldr	r3, [pc, #132]	; (4078 <udc_req_std_iface_get_setting+0x8c>)
    3ff4:	88db      	ldrh	r3, [r3, #6]
    3ff6:	2b01      	cmp	r3, #1
    3ff8:	d001      	beq.n	3ffe <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    3ffa:	2300      	movs	r3, #0
    3ffc:	e037      	b.n	406e <udc_req_std_iface_get_setting+0x82>
	}
	if (!udc_num_configuration) {
    3ffe:	4b1f      	ldr	r3, [pc, #124]	; (407c <udc_req_std_iface_get_setting+0x90>)
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	2b00      	cmp	r3, #0
    4004:	d101      	bne.n	400a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    4006:	2300      	movs	r3, #0
    4008:	e031      	b.n	406e <udc_req_std_iface_get_setting+0x82>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    400a:	4b1b      	ldr	r3, [pc, #108]	; (4078 <udc_req_std_iface_get_setting+0x8c>)
    400c:	889a      	ldrh	r2, [r3, #4]
    400e:	1dfb      	adds	r3, r7, #7
    4010:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4012:	4b1b      	ldr	r3, [pc, #108]	; (4080 <udc_req_std_iface_get_setting+0x94>)
    4014:	681b      	ldr	r3, [r3, #0]
    4016:	681b      	ldr	r3, [r3, #0]
    4018:	791b      	ldrb	r3, [r3, #4]
    401a:	1dfa      	adds	r2, r7, #7
    401c:	7812      	ldrb	r2, [r2, #0]
    401e:	429a      	cmp	r2, r3
    4020:	d301      	bcc.n	4026 <udc_req_std_iface_get_setting+0x3a>
		return false;
    4022:	2300      	movs	r3, #0
    4024:	e023      	b.n	406e <udc_req_std_iface_get_setting+0x82>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4026:	1dfb      	adds	r3, r7, #7
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	1c18      	adds	r0, r3, #0
    402c:	2100      	movs	r1, #0
    402e:	4b15      	ldr	r3, [pc, #84]	; (4084 <udc_req_std_iface_get_setting+0x98>)
    4030:	4798      	blx	r3
    4032:	1c03      	adds	r3, r0, #0
    4034:	2201      	movs	r2, #1
    4036:	4053      	eors	r3, r2
    4038:	b2db      	uxtb	r3, r3
    403a:	2b00      	cmp	r3, #0
    403c:	d001      	beq.n	4042 <udc_req_std_iface_get_setting+0x56>
		return false;
    403e:	2300      	movs	r3, #0
    4040:	e015      	b.n	406e <udc_req_std_iface_get_setting+0x82>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4042:	4b0f      	ldr	r3, [pc, #60]	; (4080 <udc_req_std_iface_get_setting+0x94>)
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	685a      	ldr	r2, [r3, #4]
    4048:	1dfb      	adds	r3, r7, #7
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	009b      	lsls	r3, r3, #2
    404e:	18d3      	adds	r3, r2, r3
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    4054:	683b      	ldr	r3, [r7, #0]
    4056:	68db      	ldr	r3, [r3, #12]
    4058:	4798      	blx	r3
    405a:	1c03      	adds	r3, r0, #0
    405c:	1c1a      	adds	r2, r3, #0
    405e:	4b0a      	ldr	r3, [pc, #40]	; (4088 <udc_req_std_iface_get_setting+0x9c>)
    4060:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4062:	4b09      	ldr	r3, [pc, #36]	; (4088 <udc_req_std_iface_get_setting+0x9c>)
    4064:	1c18      	adds	r0, r3, #0
    4066:	2101      	movs	r1, #1
    4068:	4b08      	ldr	r3, [pc, #32]	; (408c <udc_req_std_iface_get_setting+0xa0>)
    406a:	4798      	blx	r3
	return true;
    406c:	2301      	movs	r3, #1
}
    406e:	1c18      	adds	r0, r3, #0
    4070:	46bd      	mov	sp, r7
    4072:	b002      	add	sp, #8
    4074:	bd80      	pop	{r7, pc}
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	20006fc4 	.word	0x20006fc4
    407c:	20006c28 	.word	0x20006c28
    4080:	20006c2c 	.word	0x20006c2c
    4084:	00003835 	.word	0x00003835
    4088:	20006c24 	.word	0x20006c24
    408c:	00007cb1 	.word	0x00007cb1

00004090 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    4090:	b580      	push	{r7, lr}
    4092:	b082      	sub	sp, #8
    4094:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4096:	4b17      	ldr	r3, [pc, #92]	; (40f4 <udc_req_std_iface_set_setting+0x64>)
    4098:	88db      	ldrh	r3, [r3, #6]
    409a:	2b00      	cmp	r3, #0
    409c:	d001      	beq.n	40a2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    409e:	2300      	movs	r3, #0
    40a0:	e023      	b.n	40ea <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
    40a2:	4b15      	ldr	r3, [pc, #84]	; (40f8 <udc_req_std_iface_set_setting+0x68>)
    40a4:	781b      	ldrb	r3, [r3, #0]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d101      	bne.n	40ae <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    40aa:	2300      	movs	r3, #0
    40ac:	e01d      	b.n	40ea <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    40ae:	4b11      	ldr	r3, [pc, #68]	; (40f4 <udc_req_std_iface_set_setting+0x64>)
    40b0:	889a      	ldrh	r2, [r3, #4]
    40b2:	1dfb      	adds	r3, r7, #7
    40b4:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    40b6:	4b0f      	ldr	r3, [pc, #60]	; (40f4 <udc_req_std_iface_set_setting+0x64>)
    40b8:	885a      	ldrh	r2, [r3, #2]
    40ba:	1dbb      	adds	r3, r7, #6
    40bc:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    40be:	1dfb      	adds	r3, r7, #7
    40c0:	781b      	ldrb	r3, [r3, #0]
    40c2:	1c18      	adds	r0, r3, #0
    40c4:	4b0d      	ldr	r3, [pc, #52]	; (40fc <udc_req_std_iface_set_setting+0x6c>)
    40c6:	4798      	blx	r3
    40c8:	1c03      	adds	r3, r0, #0
    40ca:	2201      	movs	r2, #1
    40cc:	4053      	eors	r3, r2
    40ce:	b2db      	uxtb	r3, r3
    40d0:	2b00      	cmp	r3, #0
    40d2:	d001      	beq.n	40d8 <udc_req_std_iface_set_setting+0x48>
		return false;
    40d4:	2300      	movs	r3, #0
    40d6:	e008      	b.n	40ea <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    40d8:	1dfb      	adds	r3, r7, #7
    40da:	781a      	ldrb	r2, [r3, #0]
    40dc:	1dbb      	adds	r3, r7, #6
    40de:	781b      	ldrb	r3, [r3, #0]
    40e0:	1c10      	adds	r0, r2, #0
    40e2:	1c19      	adds	r1, r3, #0
    40e4:	4b06      	ldr	r3, [pc, #24]	; (4100 <udc_req_std_iface_set_setting+0x70>)
    40e6:	4798      	blx	r3
    40e8:	1c03      	adds	r3, r0, #0
}
    40ea:	1c18      	adds	r0, r3, #0
    40ec:	46bd      	mov	sp, r7
    40ee:	b002      	add	sp, #8
    40f0:	bd80      	pop	{r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	20006fc4 	.word	0x20006fc4
    40f8:	20006c28 	.word	0x20006c28
    40fc:	000038d9 	.word	0x000038d9
    4100:	00003985 	.word	0x00003985

00004104 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    4104:	b580      	push	{r7, lr}
    4106:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    4108:	4b48      	ldr	r3, [pc, #288]	; (422c <udc_reqstd+0x128>)
    410a:	781b      	ldrb	r3, [r3, #0]
    410c:	b2db      	uxtb	r3, r3
    410e:	b25b      	sxtb	r3, r3
    4110:	2b00      	cmp	r3, #0
    4112:	da41      	bge.n	4198 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    4114:	4b45      	ldr	r3, [pc, #276]	; (422c <udc_reqstd+0x128>)
    4116:	88db      	ldrh	r3, [r3, #6]
    4118:	2b00      	cmp	r3, #0
    411a:	d101      	bne.n	4120 <udc_reqstd+0x1c>
			return false; // Error for USB host
    411c:	2300      	movs	r3, #0
    411e:	e082      	b.n	4226 <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4120:	4b42      	ldr	r3, [pc, #264]	; (422c <udc_reqstd+0x128>)
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	1c1a      	adds	r2, r3, #0
    4126:	231f      	movs	r3, #31
    4128:	4013      	ands	r3, r2
    412a:	d114      	bne.n	4156 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    412c:	4b3f      	ldr	r3, [pc, #252]	; (422c <udc_reqstd+0x128>)
    412e:	785b      	ldrb	r3, [r3, #1]
    4130:	2b06      	cmp	r3, #6
    4132:	d008      	beq.n	4146 <udc_reqstd+0x42>
    4134:	2b08      	cmp	r3, #8
    4136:	d00a      	beq.n	414e <udc_reqstd+0x4a>
    4138:	2b00      	cmp	r3, #0
    413a:	d000      	beq.n	413e <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    413c:	e00b      	b.n	4156 <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    413e:	4b3c      	ldr	r3, [pc, #240]	; (4230 <udc_reqstd+0x12c>)
    4140:	4798      	blx	r3
    4142:	1c03      	adds	r3, r0, #0
    4144:	e06f      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    4146:	4b3b      	ldr	r3, [pc, #236]	; (4234 <udc_reqstd+0x130>)
    4148:	4798      	blx	r3
    414a:	1c03      	adds	r3, r0, #0
    414c:	e06b      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    414e:	4b3a      	ldr	r3, [pc, #232]	; (4238 <udc_reqstd+0x134>)
    4150:	4798      	blx	r3
    4152:	1c03      	adds	r3, r0, #0
    4154:	e067      	b.n	4226 <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4156:	4b35      	ldr	r3, [pc, #212]	; (422c <udc_reqstd+0x128>)
    4158:	781b      	ldrb	r3, [r3, #0]
    415a:	1c1a      	adds	r2, r3, #0
    415c:	231f      	movs	r3, #31
    415e:	4013      	ands	r3, r2
    4160:	2b01      	cmp	r3, #1
    4162:	d108      	bne.n	4176 <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4164:	4b31      	ldr	r3, [pc, #196]	; (422c <udc_reqstd+0x128>)
    4166:	785b      	ldrb	r3, [r3, #1]
    4168:	2b0a      	cmp	r3, #10
    416a:	d000      	beq.n	416e <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    416c:	e003      	b.n	4176 <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    416e:	4b33      	ldr	r3, [pc, #204]	; (423c <udc_reqstd+0x138>)
    4170:	4798      	blx	r3
    4172:	1c03      	adds	r3, r0, #0
    4174:	e057      	b.n	4226 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4176:	4b2d      	ldr	r3, [pc, #180]	; (422c <udc_reqstd+0x128>)
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	1c1a      	adds	r2, r3, #0
    417c:	231f      	movs	r3, #31
    417e:	4013      	ands	r3, r2
    4180:	2b02      	cmp	r3, #2
    4182:	d14f      	bne.n	4224 <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4184:	4b29      	ldr	r3, [pc, #164]	; (422c <udc_reqstd+0x128>)
    4186:	785b      	ldrb	r3, [r3, #1]
    4188:	2b00      	cmp	r3, #0
    418a:	d001      	beq.n	4190 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    418c:	46c0      	nop			; (mov r8, r8)
    418e:	e049      	b.n	4224 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    4190:	4b2b      	ldr	r3, [pc, #172]	; (4240 <udc_reqstd+0x13c>)
    4192:	4798      	blx	r3
    4194:	1c03      	adds	r3, r0, #0
    4196:	e046      	b.n	4226 <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4198:	4b24      	ldr	r3, [pc, #144]	; (422c <udc_reqstd+0x128>)
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	1c1a      	adds	r2, r3, #0
    419e:	231f      	movs	r3, #31
    41a0:	4013      	ands	r3, r2
    41a2:	d119      	bne.n	41d8 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    41a4:	4b21      	ldr	r3, [pc, #132]	; (422c <udc_reqstd+0x128>)
    41a6:	785b      	ldrb	r3, [r3, #1]
    41a8:	2b09      	cmp	r3, #9
    41aa:	d814      	bhi.n	41d6 <udc_reqstd+0xd2>
    41ac:	009a      	lsls	r2, r3, #2
    41ae:	4b25      	ldr	r3, [pc, #148]	; (4244 <udc_reqstd+0x140>)
    41b0:	18d3      	adds	r3, r2, r3
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    41b6:	4b24      	ldr	r3, [pc, #144]	; (4248 <udc_reqstd+0x144>)
    41b8:	4798      	blx	r3
    41ba:	1c03      	adds	r3, r0, #0
    41bc:	e033      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    41be:	4b23      	ldr	r3, [pc, #140]	; (424c <udc_reqstd+0x148>)
    41c0:	4798      	blx	r3
    41c2:	1c03      	adds	r3, r0, #0
    41c4:	e02f      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    41c6:	4b22      	ldr	r3, [pc, #136]	; (4250 <udc_reqstd+0x14c>)
    41c8:	4798      	blx	r3
    41ca:	1c03      	adds	r3, r0, #0
    41cc:	e02b      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    41ce:	4b21      	ldr	r3, [pc, #132]	; (4254 <udc_reqstd+0x150>)
    41d0:	4798      	blx	r3
    41d2:	1c03      	adds	r3, r0, #0
    41d4:	e027      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    41d6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    41d8:	4b14      	ldr	r3, [pc, #80]	; (422c <udc_reqstd+0x128>)
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	1c1a      	adds	r2, r3, #0
    41de:	231f      	movs	r3, #31
    41e0:	4013      	ands	r3, r2
    41e2:	2b01      	cmp	r3, #1
    41e4:	d108      	bne.n	41f8 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    41e6:	4b11      	ldr	r3, [pc, #68]	; (422c <udc_reqstd+0x128>)
    41e8:	785b      	ldrb	r3, [r3, #1]
    41ea:	2b0b      	cmp	r3, #11
    41ec:	d000      	beq.n	41f0 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    41ee:	e003      	b.n	41f8 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    41f0:	4b19      	ldr	r3, [pc, #100]	; (4258 <udc_reqstd+0x154>)
    41f2:	4798      	blx	r3
    41f4:	1c03      	adds	r3, r0, #0
    41f6:	e016      	b.n	4226 <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    41f8:	4b0c      	ldr	r3, [pc, #48]	; (422c <udc_reqstd+0x128>)
    41fa:	781b      	ldrb	r3, [r3, #0]
    41fc:	1c1a      	adds	r2, r3, #0
    41fe:	231f      	movs	r3, #31
    4200:	4013      	ands	r3, r2
    4202:	2b02      	cmp	r3, #2
    4204:	d10e      	bne.n	4224 <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4206:	4b09      	ldr	r3, [pc, #36]	; (422c <udc_reqstd+0x128>)
    4208:	785b      	ldrb	r3, [r3, #1]
    420a:	2b01      	cmp	r3, #1
    420c:	d002      	beq.n	4214 <udc_reqstd+0x110>
    420e:	2b03      	cmp	r3, #3
    4210:	d004      	beq.n	421c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    4212:	e007      	b.n	4224 <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    4214:	4b11      	ldr	r3, [pc, #68]	; (425c <udc_reqstd+0x158>)
    4216:	4798      	blx	r3
    4218:	1c03      	adds	r3, r0, #0
    421a:	e004      	b.n	4226 <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    421c:	4b10      	ldr	r3, [pc, #64]	; (4260 <udc_reqstd+0x15c>)
    421e:	4798      	blx	r3
    4220:	1c03      	adds	r3, r0, #0
    4222:	e000      	b.n	4226 <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    4224:	2300      	movs	r3, #0
}
    4226:	1c18      	adds	r0, r3, #0
    4228:	46bd      	mov	sp, r7
    422a:	bd80      	pop	{r7, pc}
    422c:	20006fc4 	.word	0x20006fc4
    4230:	00003b25 	.word	0x00003b25
    4234:	00003df1 	.word	0x00003df1
    4238:	00003eed 	.word	0x00003eed
    423c:	00003fed 	.word	0x00003fed
    4240:	00003b55 	.word	0x00003b55
    4244:	0000b288 	.word	0x0000b288
    4248:	00003cc9 	.word	0x00003cc9
    424c:	00003b9d 	.word	0x00003b9d
    4250:	00003c19 	.word	0x00003c19
    4254:	00003f1d 	.word	0x00003f1d
    4258:	00004091 	.word	0x00004091
    425c:	00003be1 	.word	0x00003be1
    4260:	00003c5d 	.word	0x00003c5d

00004264 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    4264:	b580      	push	{r7, lr}
    4266:	b082      	sub	sp, #8
    4268:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    426a:	4b22      	ldr	r3, [pc, #136]	; (42f4 <udc_req_iface+0x90>)
    426c:	781b      	ldrb	r3, [r3, #0]
    426e:	2b00      	cmp	r3, #0
    4270:	d101      	bne.n	4276 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    4272:	2300      	movs	r3, #0
    4274:	e03a      	b.n	42ec <udc_req_iface+0x88>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4276:	4b20      	ldr	r3, [pc, #128]	; (42f8 <udc_req_iface+0x94>)
    4278:	889a      	ldrh	r2, [r3, #4]
    427a:	1dfb      	adds	r3, r7, #7
    427c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    427e:	4b1f      	ldr	r3, [pc, #124]	; (42fc <udc_req_iface+0x98>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	791b      	ldrb	r3, [r3, #4]
    4286:	1dfa      	adds	r2, r7, #7
    4288:	7812      	ldrb	r2, [r2, #0]
    428a:	429a      	cmp	r2, r3
    428c:	d301      	bcc.n	4292 <udc_req_iface+0x2e>
		return false;
    428e:	2300      	movs	r3, #0
    4290:	e02c      	b.n	42ec <udc_req_iface+0x88>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4292:	1dfb      	adds	r3, r7, #7
    4294:	781b      	ldrb	r3, [r3, #0]
    4296:	1c18      	adds	r0, r3, #0
    4298:	2100      	movs	r1, #0
    429a:	4b19      	ldr	r3, [pc, #100]	; (4300 <udc_req_iface+0x9c>)
    429c:	4798      	blx	r3
    429e:	1c03      	adds	r3, r0, #0
    42a0:	2201      	movs	r2, #1
    42a2:	4053      	eors	r3, r2
    42a4:	b2db      	uxtb	r3, r3
    42a6:	2b00      	cmp	r3, #0
    42a8:	d001      	beq.n	42ae <udc_req_iface+0x4a>
		return false;
    42aa:	2300      	movs	r3, #0
    42ac:	e01e      	b.n	42ec <udc_req_iface+0x88>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    42ae:	4b13      	ldr	r3, [pc, #76]	; (42fc <udc_req_iface+0x98>)
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	685a      	ldr	r2, [r3, #4]
    42b4:	1dfb      	adds	r3, r7, #7
    42b6:	781b      	ldrb	r3, [r3, #0]
    42b8:	009b      	lsls	r3, r3, #2
    42ba:	18d3      	adds	r3, r2, r3
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    42c0:	683b      	ldr	r3, [r7, #0]
    42c2:	68db      	ldr	r3, [r3, #12]
    42c4:	4798      	blx	r3
    42c6:	1c03      	adds	r3, r0, #0
    42c8:	1dfa      	adds	r2, r7, #7
    42ca:	7812      	ldrb	r2, [r2, #0]
    42cc:	1c10      	adds	r0, r2, #0
    42ce:	1c19      	adds	r1, r3, #0
    42d0:	4b0b      	ldr	r3, [pc, #44]	; (4300 <udc_req_iface+0x9c>)
    42d2:	4798      	blx	r3
    42d4:	1c03      	adds	r3, r0, #0
    42d6:	2201      	movs	r2, #1
    42d8:	4053      	eors	r3, r2
    42da:	b2db      	uxtb	r3, r3
    42dc:	2b00      	cmp	r3, #0
    42de:	d001      	beq.n	42e4 <udc_req_iface+0x80>
		return false;
    42e0:	2300      	movs	r3, #0
    42e2:	e003      	b.n	42ec <udc_req_iface+0x88>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    42e4:	683b      	ldr	r3, [r7, #0]
    42e6:	689b      	ldr	r3, [r3, #8]
    42e8:	4798      	blx	r3
    42ea:	1c03      	adds	r3, r0, #0
}
    42ec:	1c18      	adds	r0, r3, #0
    42ee:	46bd      	mov	sp, r7
    42f0:	b002      	add	sp, #8
    42f2:	bd80      	pop	{r7, pc}
    42f4:	20006c28 	.word	0x20006c28
    42f8:	20006fc4 	.word	0x20006fc4
    42fc:	20006c2c 	.word	0x20006c2c
    4300:	00003835 	.word	0x00003835

00004304 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    4304:	b580      	push	{r7, lr}
    4306:	b082      	sub	sp, #8
    4308:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    430a:	4b21      	ldr	r3, [pc, #132]	; (4390 <udc_req_ep+0x8c>)
    430c:	781b      	ldrb	r3, [r3, #0]
    430e:	2b00      	cmp	r3, #0
    4310:	d101      	bne.n	4316 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    4312:	2300      	movs	r3, #0
    4314:	e038      	b.n	4388 <udc_req_ep+0x84>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4316:	4b1f      	ldr	r3, [pc, #124]	; (4394 <udc_req_ep+0x90>)
    4318:	889a      	ldrh	r2, [r3, #4]
    431a:	1dfb      	adds	r3, r7, #7
    431c:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    431e:	1dfb      	adds	r3, r7, #7
    4320:	2200      	movs	r2, #0
    4322:	701a      	strb	r2, [r3, #0]
    4324:	e027      	b.n	4376 <udc_req_ep+0x72>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4326:	4b1c      	ldr	r3, [pc, #112]	; (4398 <udc_req_ep+0x94>)
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	685a      	ldr	r2, [r3, #4]
    432c:	1dfb      	adds	r3, r7, #7
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	009b      	lsls	r3, r3, #2
    4332:	18d3      	adds	r3, r2, r3
    4334:	681b      	ldr	r3, [r3, #0]
    4336:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4338:	683b      	ldr	r3, [r7, #0]
    433a:	68db      	ldr	r3, [r3, #12]
    433c:	4798      	blx	r3
    433e:	1c03      	adds	r3, r0, #0
    4340:	1dfa      	adds	r2, r7, #7
    4342:	7812      	ldrb	r2, [r2, #0]
    4344:	1c10      	adds	r0, r2, #0
    4346:	1c19      	adds	r1, r3, #0
    4348:	4b14      	ldr	r3, [pc, #80]	; (439c <udc_req_ep+0x98>)
    434a:	4798      	blx	r3
    434c:	1c03      	adds	r3, r0, #0
    434e:	2201      	movs	r2, #1
    4350:	4053      	eors	r3, r2
    4352:	b2db      	uxtb	r3, r3
    4354:	2b00      	cmp	r3, #0
    4356:	d001      	beq.n	435c <udc_req_ep+0x58>
			return false;
    4358:	2300      	movs	r3, #0
    435a:	e015      	b.n	4388 <udc_req_ep+0x84>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    435c:	683b      	ldr	r3, [r7, #0]
    435e:	689b      	ldr	r3, [r3, #8]
    4360:	4798      	blx	r3
    4362:	1c03      	adds	r3, r0, #0
    4364:	2b00      	cmp	r3, #0
    4366:	d001      	beq.n	436c <udc_req_ep+0x68>
			return true;
    4368:	2301      	movs	r3, #1
    436a:	e00d      	b.n	4388 <udc_req_ep+0x84>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    436c:	1dfb      	adds	r3, r7, #7
    436e:	781a      	ldrb	r2, [r3, #0]
    4370:	1dfb      	adds	r3, r7, #7
    4372:	3201      	adds	r2, #1
    4374:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4376:	4b08      	ldr	r3, [pc, #32]	; (4398 <udc_req_ep+0x94>)
    4378:	681b      	ldr	r3, [r3, #0]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	791b      	ldrb	r3, [r3, #4]
    437e:	1dfa      	adds	r2, r7, #7
    4380:	7812      	ldrb	r2, [r2, #0]
    4382:	429a      	cmp	r2, r3
    4384:	d3cf      	bcc.n	4326 <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4386:	2300      	movs	r3, #0
}
    4388:	1c18      	adds	r0, r3, #0
    438a:	46bd      	mov	sp, r7
    438c:	b002      	add	sp, #8
    438e:	bd80      	pop	{r7, pc}
    4390:	20006c28 	.word	0x20006c28
    4394:	20006fc4 	.word	0x20006fc4
    4398:	20006c2c 	.word	0x20006c2c
    439c:	00003835 	.word	0x00003835

000043a0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    43a0:	b580      	push	{r7, lr}
    43a2:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    43a4:	4b20      	ldr	r3, [pc, #128]	; (4428 <udc_process_setup+0x88>)
    43a6:	2200      	movs	r2, #0
    43a8:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <udc_process_setup+0x88>)
    43ac:	2200      	movs	r2, #0
    43ae:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    43b0:	4b1d      	ldr	r3, [pc, #116]	; (4428 <udc_process_setup+0x88>)
    43b2:	2200      	movs	r2, #0
    43b4:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    43b6:	4b1c      	ldr	r3, [pc, #112]	; (4428 <udc_process_setup+0x88>)
    43b8:	781b      	ldrb	r3, [r3, #0]
    43ba:	b2db      	uxtb	r3, r3
    43bc:	b25b      	sxtb	r3, r3
    43be:	2b00      	cmp	r3, #0
    43c0:	da05      	bge.n	43ce <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    43c2:	4b19      	ldr	r3, [pc, #100]	; (4428 <udc_process_setup+0x88>)
    43c4:	88db      	ldrh	r3, [r3, #6]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d101      	bne.n	43ce <udc_process_setup+0x2e>
			return false; // Error from USB host
    43ca:	2300      	movs	r3, #0
    43cc:	e029      	b.n	4422 <udc_process_setup+0x82>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    43ce:	4b16      	ldr	r3, [pc, #88]	; (4428 <udc_process_setup+0x88>)
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	1c1a      	adds	r2, r3, #0
    43d4:	2360      	movs	r3, #96	; 0x60
    43d6:	4013      	ands	r3, r2
    43d8:	d106      	bne.n	43e8 <udc_process_setup+0x48>
		if (udc_reqstd()) {
    43da:	4b14      	ldr	r3, [pc, #80]	; (442c <udc_process_setup+0x8c>)
    43dc:	4798      	blx	r3
    43de:	1c03      	adds	r3, r0, #0
    43e0:	2b00      	cmp	r3, #0
    43e2:	d001      	beq.n	43e8 <udc_process_setup+0x48>
			return true;
    43e4:	2301      	movs	r3, #1
    43e6:	e01c      	b.n	4422 <udc_process_setup+0x82>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    43e8:	4b0f      	ldr	r3, [pc, #60]	; (4428 <udc_process_setup+0x88>)
    43ea:	781b      	ldrb	r3, [r3, #0]
    43ec:	1c1a      	adds	r2, r3, #0
    43ee:	231f      	movs	r3, #31
    43f0:	4013      	ands	r3, r2
    43f2:	2b01      	cmp	r3, #1
    43f4:	d106      	bne.n	4404 <udc_process_setup+0x64>
		if (udc_req_iface()) {
    43f6:	4b0e      	ldr	r3, [pc, #56]	; (4430 <udc_process_setup+0x90>)
    43f8:	4798      	blx	r3
    43fa:	1c03      	adds	r3, r0, #0
    43fc:	2b00      	cmp	r3, #0
    43fe:	d001      	beq.n	4404 <udc_process_setup+0x64>
			return true;
    4400:	2301      	movs	r3, #1
    4402:	e00e      	b.n	4422 <udc_process_setup+0x82>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4404:	4b08      	ldr	r3, [pc, #32]	; (4428 <udc_process_setup+0x88>)
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	1c1a      	adds	r2, r3, #0
    440a:	231f      	movs	r3, #31
    440c:	4013      	ands	r3, r2
    440e:	2b02      	cmp	r3, #2
    4410:	d106      	bne.n	4420 <udc_process_setup+0x80>
		if (udc_req_ep()) {
    4412:	4b08      	ldr	r3, [pc, #32]	; (4434 <udc_process_setup+0x94>)
    4414:	4798      	blx	r3
    4416:	1c03      	adds	r3, r0, #0
    4418:	2b00      	cmp	r3, #0
    441a:	d001      	beq.n	4420 <udc_process_setup+0x80>
			return true;
    441c:	2301      	movs	r3, #1
    441e:	e000      	b.n	4422 <udc_process_setup+0x82>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4420:	2300      	movs	r3, #0
#endif
}
    4422:	1c18      	adds	r0, r3, #0
    4424:	46bd      	mov	sp, r7
    4426:	bd80      	pop	{r7, pc}
    4428:	20006fc4 	.word	0x20006fc4
    442c:	00004105 	.word	0x00004105
    4430:	00004265 	.word	0x00004265
    4434:	00004305 	.word	0x00004305

00004438 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4438:	b580      	push	{r7, lr}
    443a:	b082      	sub	sp, #8
    443c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    443e:	4b0f      	ldr	r3, [pc, #60]	; (447c <cpu_irq_enter_critical+0x44>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	2b00      	cmp	r3, #0
    4444:	d112      	bne.n	446c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4446:	f3ef 8310 	mrs	r3, PRIMASK
    444a:	607b      	str	r3, [r7, #4]
  return(result);
    444c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    444e:	2b00      	cmp	r3, #0
    4450:	d109      	bne.n	4466 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4452:	b672      	cpsid	i
    4454:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4458:	4b09      	ldr	r3, [pc, #36]	; (4480 <cpu_irq_enter_critical+0x48>)
    445a:	2200      	movs	r2, #0
    445c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    445e:	4b09      	ldr	r3, [pc, #36]	; (4484 <cpu_irq_enter_critical+0x4c>)
    4460:	2201      	movs	r2, #1
    4462:	701a      	strb	r2, [r3, #0]
    4464:	e002      	b.n	446c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4466:	4b07      	ldr	r3, [pc, #28]	; (4484 <cpu_irq_enter_critical+0x4c>)
    4468:	2200      	movs	r2, #0
    446a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    446c:	4b03      	ldr	r3, [pc, #12]	; (447c <cpu_irq_enter_critical+0x44>)
    446e:	681b      	ldr	r3, [r3, #0]
    4470:	1c5a      	adds	r2, r3, #1
    4472:	4b02      	ldr	r3, [pc, #8]	; (447c <cpu_irq_enter_critical+0x44>)
    4474:	601a      	str	r2, [r3, #0]
}
    4476:	46bd      	mov	sp, r7
    4478:	b002      	add	sp, #8
    447a:	bd80      	pop	{r7, pc}
    447c:	20006c38 	.word	0x20006c38
    4480:	2000025c 	.word	0x2000025c
    4484:	20006c3c 	.word	0x20006c3c

00004488 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4488:	b580      	push	{r7, lr}
    448a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    448c:	4b0a      	ldr	r3, [pc, #40]	; (44b8 <cpu_irq_leave_critical+0x30>)
    448e:	681b      	ldr	r3, [r3, #0]
    4490:	1e5a      	subs	r2, r3, #1
    4492:	4b09      	ldr	r3, [pc, #36]	; (44b8 <cpu_irq_leave_critical+0x30>)
    4494:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4496:	4b08      	ldr	r3, [pc, #32]	; (44b8 <cpu_irq_leave_critical+0x30>)
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	2b00      	cmp	r3, #0
    449c:	d10a      	bne.n	44b4 <cpu_irq_leave_critical+0x2c>
    449e:	4b07      	ldr	r3, [pc, #28]	; (44bc <cpu_irq_leave_critical+0x34>)
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	b2db      	uxtb	r3, r3
    44a4:	2b00      	cmp	r3, #0
    44a6:	d005      	beq.n	44b4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    44a8:	4b05      	ldr	r3, [pc, #20]	; (44c0 <cpu_irq_leave_critical+0x38>)
    44aa:	2201      	movs	r2, #1
    44ac:	701a      	strb	r2, [r3, #0]
    44ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    44b2:	b662      	cpsie	i
	}
}
    44b4:	46bd      	mov	sp, r7
    44b6:	bd80      	pop	{r7, pc}
    44b8:	20006c38 	.word	0x20006c38
    44bc:	20006c3c 	.word	0x20006c3c
    44c0:	2000025c 	.word	0x2000025c

000044c4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    44c4:	b580      	push	{r7, lr}
    44c6:	b084      	sub	sp, #16
    44c8:	af00      	add	r7, sp, #0
    44ca:	1c02      	adds	r2, r0, #0
    44cc:	1dfb      	adds	r3, r7, #7
    44ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    44d0:	1c3b      	adds	r3, r7, #0
    44d2:	330f      	adds	r3, #15
    44d4:	1dfa      	adds	r2, r7, #7
    44d6:	7812      	ldrb	r2, [r2, #0]
    44d8:	09d2      	lsrs	r2, r2, #7
    44da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    44dc:	1c3b      	adds	r3, r7, #0
    44de:	330e      	adds	r3, #14
    44e0:	1dfa      	adds	r2, r7, #7
    44e2:	7812      	ldrb	r2, [r2, #0]
    44e4:	0952      	lsrs	r2, r2, #5
    44e6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    44e8:	4b0d      	ldr	r3, [pc, #52]	; (4520 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    44ea:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    44ec:	1c3b      	adds	r3, r7, #0
    44ee:	330f      	adds	r3, #15
    44f0:	781b      	ldrb	r3, [r3, #0]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d10e      	bne.n	4514 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    44f6:	1c3b      	adds	r3, r7, #0
    44f8:	330f      	adds	r3, #15
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	009b      	lsls	r3, r3, #2
    44fe:	2210      	movs	r2, #16
    4500:	19d2      	adds	r2, r2, r7
    4502:	18d3      	adds	r3, r2, r3
    4504:	3b08      	subs	r3, #8
    4506:	681a      	ldr	r2, [r3, #0]
    4508:	1c3b      	adds	r3, r7, #0
    450a:	330e      	adds	r3, #14
    450c:	781b      	ldrb	r3, [r3, #0]
    450e:	01db      	lsls	r3, r3, #7
    4510:	18d3      	adds	r3, r2, r3
    4512:	e000      	b.n	4516 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4514:	2300      	movs	r3, #0
	}
}
    4516:	1c18      	adds	r0, r3, #0
    4518:	46bd      	mov	sp, r7
    451a:	b004      	add	sp, #16
    451c:	bd80      	pop	{r7, pc}
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	41004400 	.word	0x41004400

00004524 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4524:	b580      	push	{r7, lr}
    4526:	b082      	sub	sp, #8
    4528:	af00      	add	r7, sp, #0
    452a:	1c02      	adds	r2, r0, #0
    452c:	1dfb      	adds	r3, r7, #7
    452e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4530:	1dfb      	adds	r3, r7, #7
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	1c18      	adds	r0, r3, #0
    4536:	4b03      	ldr	r3, [pc, #12]	; (4544 <port_get_group_from_gpio_pin+0x20>)
    4538:	4798      	blx	r3
    453a:	1c03      	adds	r3, r0, #0
}
    453c:	1c18      	adds	r0, r3, #0
    453e:	46bd      	mov	sp, r7
    4540:	b002      	add	sp, #8
    4542:	bd80      	pop	{r7, pc}
    4544:	000044c5 	.word	0x000044c5

00004548 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4548:	b580      	push	{r7, lr}
    454a:	b082      	sub	sp, #8
    454c:	af00      	add	r7, sp, #0
    454e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	2200      	movs	r2, #0
    4554:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	2201      	movs	r2, #1
    455a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	2200      	movs	r2, #0
    4560:	709a      	strb	r2, [r3, #2]
}
    4562:	46bd      	mov	sp, r7
    4564:	b002      	add	sp, #8
    4566:	bd80      	pop	{r7, pc}

00004568 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4568:	b580      	push	{r7, lr}
    456a:	b084      	sub	sp, #16
    456c:	af00      	add	r7, sp, #0
    456e:	1c0a      	adds	r2, r1, #0
    4570:	1dfb      	adds	r3, r7, #7
    4572:	1c01      	adds	r1, r0, #0
    4574:	7019      	strb	r1, [r3, #0]
    4576:	1dbb      	adds	r3, r7, #6
    4578:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    457a:	1dfb      	adds	r3, r7, #7
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	1c18      	adds	r0, r3, #0
    4580:	4b0d      	ldr	r3, [pc, #52]	; (45b8 <port_pin_set_output_level+0x50>)
    4582:	4798      	blx	r3
    4584:	1c03      	adds	r3, r0, #0
    4586:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4588:	1dfb      	adds	r3, r7, #7
    458a:	781a      	ldrb	r2, [r3, #0]
    458c:	231f      	movs	r3, #31
    458e:	4013      	ands	r3, r2
    4590:	2201      	movs	r2, #1
    4592:	1c11      	adds	r1, r2, #0
    4594:	4099      	lsls	r1, r3
    4596:	1c0b      	adds	r3, r1, #0
    4598:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    459a:	1dbb      	adds	r3, r7, #6
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	2b00      	cmp	r3, #0
    45a0:	d003      	beq.n	45aa <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	68ba      	ldr	r2, [r7, #8]
    45a6:	619a      	str	r2, [r3, #24]
    45a8:	e002      	b.n	45b0 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	68ba      	ldr	r2, [r7, #8]
    45ae:	615a      	str	r2, [r3, #20]
	}
}
    45b0:	46bd      	mov	sp, r7
    45b2:	b004      	add	sp, #16
    45b4:	bd80      	pop	{r7, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	00004525 	.word	0x00004525

000045bc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45bc:	b580      	push	{r7, lr}
    45be:	b082      	sub	sp, #8
    45c0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    45c2:	1d3b      	adds	r3, r7, #4
    45c4:	1c18      	adds	r0, r3, #0
    45c6:	4b0e      	ldr	r3, [pc, #56]	; (4600 <system_board_init+0x44>)
    45c8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45ca:	1d3b      	adds	r3, r7, #4
    45cc:	2201      	movs	r2, #1
    45ce:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45d0:	1d3b      	adds	r3, r7, #4
    45d2:	203e      	movs	r0, #62	; 0x3e
    45d4:	1c19      	adds	r1, r3, #0
    45d6:	4b0b      	ldr	r3, [pc, #44]	; (4604 <system_board_init+0x48>)
    45d8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    45da:	203e      	movs	r0, #62	; 0x3e
    45dc:	2101      	movs	r1, #1
    45de:	4b0a      	ldr	r3, [pc, #40]	; (4608 <system_board_init+0x4c>)
    45e0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45e2:	1d3b      	adds	r3, r7, #4
    45e4:	2200      	movs	r2, #0
    45e6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45e8:	1d3b      	adds	r3, r7, #4
    45ea:	2201      	movs	r2, #1
    45ec:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45ee:	1d3b      	adds	r3, r7, #4
    45f0:	200f      	movs	r0, #15
    45f2:	1c19      	adds	r1, r3, #0
    45f4:	4b03      	ldr	r3, [pc, #12]	; (4604 <system_board_init+0x48>)
    45f6:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    45f8:	46bd      	mov	sp, r7
    45fa:	b002      	add	sp, #8
    45fc:	bd80      	pop	{r7, pc}
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	00004549 	.word	0x00004549
    4604:	00004c1d 	.word	0x00004c1d
    4608:	00004569 	.word	0x00004569

0000460c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    460c:	b580      	push	{r7, lr}
    460e:	b084      	sub	sp, #16
    4610:	af00      	add	r7, sp, #0
    4612:	1c02      	adds	r2, r0, #0
    4614:	1dfb      	adds	r3, r7, #7
    4616:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4618:	1c3b      	adds	r3, r7, #0
    461a:	330f      	adds	r3, #15
    461c:	1dfa      	adds	r2, r7, #7
    461e:	7812      	ldrb	r2, [r2, #0]
    4620:	0952      	lsrs	r2, r2, #5
    4622:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4624:	1c3b      	adds	r3, r7, #0
    4626:	330f      	adds	r3, #15
    4628:	781b      	ldrb	r3, [r3, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	d10b      	bne.n	4646 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    462e:	4b08      	ldr	r3, [pc, #32]	; (4650 <_extint_get_eic_from_channel+0x44>)
    4630:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4632:	1c3b      	adds	r3, r7, #0
    4634:	330f      	adds	r3, #15
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	009b      	lsls	r3, r3, #2
    463a:	2210      	movs	r2, #16
    463c:	19d2      	adds	r2, r2, r7
    463e:	18d3      	adds	r3, r2, r3
    4640:	3b08      	subs	r3, #8
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	e000      	b.n	4648 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    4646:	2300      	movs	r3, #0
	}
}
    4648:	1c18      	adds	r0, r3, #0
    464a:	46bd      	mov	sp, r7
    464c:	b004      	add	sp, #16
    464e:	bd80      	pop	{r7, pc}
    4650:	40001800 	.word	0x40001800

00004654 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4654:	b580      	push	{r7, lr}
    4656:	b084      	sub	sp, #16
    4658:	af00      	add	r7, sp, #0
    465a:	1c02      	adds	r2, r0, #0
    465c:	1dfb      	adds	r3, r7, #7
    465e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4660:	1dfb      	adds	r3, r7, #7
    4662:	781b      	ldrb	r3, [r3, #0]
    4664:	1c18      	adds	r0, r3, #0
    4666:	4b0c      	ldr	r3, [pc, #48]	; (4698 <extint_chan_is_detected+0x44>)
    4668:	4798      	blx	r3
    466a:	1c03      	adds	r3, r0, #0
    466c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    466e:	1dfb      	adds	r3, r7, #7
    4670:	781a      	ldrb	r2, [r3, #0]
    4672:	231f      	movs	r3, #31
    4674:	4013      	ands	r3, r2
    4676:	2201      	movs	r2, #1
    4678:	1c11      	adds	r1, r2, #0
    467a:	4099      	lsls	r1, r3
    467c:	1c0b      	adds	r3, r1, #0
    467e:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4680:	68fb      	ldr	r3, [r7, #12]
    4682:	691b      	ldr	r3, [r3, #16]
    4684:	68ba      	ldr	r2, [r7, #8]
    4686:	4013      	ands	r3, r2
    4688:	1e5a      	subs	r2, r3, #1
    468a:	4193      	sbcs	r3, r2
    468c:	b2db      	uxtb	r3, r3
}
    468e:	1c18      	adds	r0, r3, #0
    4690:	46bd      	mov	sp, r7
    4692:	b004      	add	sp, #16
    4694:	bd80      	pop	{r7, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	0000460d 	.word	0x0000460d

0000469c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    469c:	b580      	push	{r7, lr}
    469e:	b084      	sub	sp, #16
    46a0:	af00      	add	r7, sp, #0
    46a2:	1c02      	adds	r2, r0, #0
    46a4:	1dfb      	adds	r3, r7, #7
    46a6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    46a8:	1dfb      	adds	r3, r7, #7
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	1c18      	adds	r0, r3, #0
    46ae:	4b09      	ldr	r3, [pc, #36]	; (46d4 <extint_chan_clear_detected+0x38>)
    46b0:	4798      	blx	r3
    46b2:	1c03      	adds	r3, r0, #0
    46b4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    46b6:	1dfb      	adds	r3, r7, #7
    46b8:	781a      	ldrb	r2, [r3, #0]
    46ba:	231f      	movs	r3, #31
    46bc:	4013      	ands	r3, r2
    46be:	2201      	movs	r2, #1
    46c0:	1c11      	adds	r1, r2, #0
    46c2:	4099      	lsls	r1, r3
    46c4:	1c0b      	adds	r3, r1, #0
    46c6:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    46c8:	68fb      	ldr	r3, [r7, #12]
    46ca:	68ba      	ldr	r2, [r7, #8]
    46cc:	611a      	str	r2, [r3, #16]
}
    46ce:	46bd      	mov	sp, r7
    46d0:	b004      	add	sp, #16
    46d2:	bd80      	pop	{r7, pc}
    46d4:	0000460d 	.word	0x0000460d

000046d8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    46d8:	b580      	push	{r7, lr}
    46da:	b082      	sub	sp, #8
    46dc:	af00      	add	r7, sp, #0
    46de:	6078      	str	r0, [r7, #4]
    46e0:	1cfb      	adds	r3, r7, #3
    46e2:	7019      	strb	r1, [r3, #0]
    46e4:	1cbb      	adds	r3, r7, #2
    46e6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    46e8:	1cbb      	adds	r3, r7, #2
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	2b00      	cmp	r3, #0
    46ee:	d001      	beq.n	46f4 <extint_register_callback+0x1c>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    46f0:	2317      	movs	r3, #23
    46f2:	e019      	b.n	4728 <extint_register_callback+0x50>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    46f4:	1cfb      	adds	r3, r7, #3
    46f6:	781a      	ldrb	r2, [r3, #0]
    46f8:	4b0d      	ldr	r3, [pc, #52]	; (4730 <extint_register_callback+0x58>)
    46fa:	0092      	lsls	r2, r2, #2
    46fc:	58d3      	ldr	r3, [r2, r3]
    46fe:	2b00      	cmp	r3, #0
    4700:	d107      	bne.n	4712 <extint_register_callback+0x3a>
		_extint_dev.callbacks[channel] = callback;
    4702:	1cfb      	adds	r3, r7, #3
    4704:	781a      	ldrb	r2, [r3, #0]
    4706:	4b0a      	ldr	r3, [pc, #40]	; (4730 <extint_register_callback+0x58>)
    4708:	0092      	lsls	r2, r2, #2
    470a:	6879      	ldr	r1, [r7, #4]
    470c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    470e:	2300      	movs	r3, #0
    4710:	e00a      	b.n	4728 <extint_register_callback+0x50>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4712:	1cfb      	adds	r3, r7, #3
    4714:	781a      	ldrb	r2, [r3, #0]
    4716:	4b06      	ldr	r3, [pc, #24]	; (4730 <extint_register_callback+0x58>)
    4718:	0092      	lsls	r2, r2, #2
    471a:	58d2      	ldr	r2, [r2, r3]
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	429a      	cmp	r2, r3
    4720:	d101      	bne.n	4726 <extint_register_callback+0x4e>
		return STATUS_OK;
    4722:	2300      	movs	r3, #0
    4724:	e000      	b.n	4728 <extint_register_callback+0x50>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4726:	231d      	movs	r3, #29
}
    4728:	1c18      	adds	r0, r3, #0
    472a:	46bd      	mov	sp, r7
    472c:	b002      	add	sp, #8
    472e:	bd80      	pop	{r7, pc}
    4730:	20006dcc 	.word	0x20006dcc

00004734 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4734:	b580      	push	{r7, lr}
    4736:	b084      	sub	sp, #16
    4738:	af00      	add	r7, sp, #0
    473a:	1c0a      	adds	r2, r1, #0
    473c:	1dfb      	adds	r3, r7, #7
    473e:	1c01      	adds	r1, r0, #0
    4740:	7019      	strb	r1, [r3, #0]
    4742:	1dbb      	adds	r3, r7, #6
    4744:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4746:	1dbb      	adds	r3, r7, #6
    4748:	781b      	ldrb	r3, [r3, #0]
    474a:	2b00      	cmp	r3, #0
    474c:	d10e      	bne.n	476c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    474e:	1dfb      	adds	r3, r7, #7
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	1c18      	adds	r0, r3, #0
    4754:	4b08      	ldr	r3, [pc, #32]	; (4778 <extint_chan_enable_callback+0x44>)
    4756:	4798      	blx	r3
    4758:	1c03      	adds	r3, r0, #0
    475a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    475c:	1dfb      	adds	r3, r7, #7
    475e:	781b      	ldrb	r3, [r3, #0]
    4760:	2201      	movs	r2, #1
    4762:	409a      	lsls	r2, r3
    4764:	68fb      	ldr	r3, [r7, #12]
    4766:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4768:	2300      	movs	r3, #0
    476a:	e000      	b.n	476e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    476c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    476e:	1c18      	adds	r0, r3, #0
    4770:	46bd      	mov	sp, r7
    4772:	b004      	add	sp, #16
    4774:	bd80      	pop	{r7, pc}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	0000460d 	.word	0x0000460d

0000477c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    477c:	b580      	push	{r7, lr}
    477e:	b084      	sub	sp, #16
    4780:	af00      	add	r7, sp, #0
    4782:	1c0a      	adds	r2, r1, #0
    4784:	1dfb      	adds	r3, r7, #7
    4786:	1c01      	adds	r1, r0, #0
    4788:	7019      	strb	r1, [r3, #0]
    478a:	1dbb      	adds	r3, r7, #6
    478c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    478e:	1dbb      	adds	r3, r7, #6
    4790:	781b      	ldrb	r3, [r3, #0]
    4792:	2b00      	cmp	r3, #0
    4794:	d10e      	bne.n	47b4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4796:	1dfb      	adds	r3, r7, #7
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	1c18      	adds	r0, r3, #0
    479c:	4b08      	ldr	r3, [pc, #32]	; (47c0 <extint_chan_disable_callback+0x44>)
    479e:	4798      	blx	r3
    47a0:	1c03      	adds	r3, r0, #0
    47a2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    47a4:	1dfb      	adds	r3, r7, #7
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	2201      	movs	r2, #1
    47aa:	409a      	lsls	r2, r3
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    47b0:	2300      	movs	r3, #0
    47b2:	e000      	b.n	47b6 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    47b4:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    47b6:	1c18      	adds	r0, r3, #0
    47b8:	46bd      	mov	sp, r7
    47ba:	b004      	add	sp, #16
    47bc:	bd80      	pop	{r7, pc}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	0000460d 	.word	0x0000460d

000047c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    47c8:	4b15      	ldr	r3, [pc, #84]	; (4820 <EIC_Handler+0x5c>)
    47ca:	2200      	movs	r2, #0
    47cc:	701a      	strb	r2, [r3, #0]
    47ce:	e021      	b.n	4814 <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    47d0:	4b13      	ldr	r3, [pc, #76]	; (4820 <EIC_Handler+0x5c>)
    47d2:	781b      	ldrb	r3, [r3, #0]
    47d4:	1c18      	adds	r0, r3, #0
    47d6:	4b13      	ldr	r3, [pc, #76]	; (4824 <EIC_Handler+0x60>)
    47d8:	4798      	blx	r3
    47da:	1c03      	adds	r3, r0, #0
    47dc:	2b00      	cmp	r3, #0
    47de:	d013      	beq.n	4808 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    47e0:	4b0f      	ldr	r3, [pc, #60]	; (4820 <EIC_Handler+0x5c>)
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	1c18      	adds	r0, r3, #0
    47e6:	4b10      	ldr	r3, [pc, #64]	; (4828 <EIC_Handler+0x64>)
    47e8:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    47ea:	4b0d      	ldr	r3, [pc, #52]	; (4820 <EIC_Handler+0x5c>)
    47ec:	781b      	ldrb	r3, [r3, #0]
    47ee:	1c1a      	adds	r2, r3, #0
    47f0:	4b0e      	ldr	r3, [pc, #56]	; (482c <EIC_Handler+0x68>)
    47f2:	0092      	lsls	r2, r2, #2
    47f4:	58d3      	ldr	r3, [r2, r3]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d006      	beq.n	4808 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    47fa:	4b09      	ldr	r3, [pc, #36]	; (4820 <EIC_Handler+0x5c>)
    47fc:	781b      	ldrb	r3, [r3, #0]
    47fe:	1c1a      	adds	r2, r3, #0
    4800:	4b0a      	ldr	r3, [pc, #40]	; (482c <EIC_Handler+0x68>)
    4802:	0092      	lsls	r2, r2, #2
    4804:	58d3      	ldr	r3, [r2, r3]
    4806:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4808:	4b05      	ldr	r3, [pc, #20]	; (4820 <EIC_Handler+0x5c>)
    480a:	781b      	ldrb	r3, [r3, #0]
    480c:	3301      	adds	r3, #1
    480e:	b2da      	uxtb	r2, r3
    4810:	4b03      	ldr	r3, [pc, #12]	; (4820 <EIC_Handler+0x5c>)
    4812:	701a      	strb	r2, [r3, #0]
    4814:	4b02      	ldr	r3, [pc, #8]	; (4820 <EIC_Handler+0x5c>)
    4816:	781b      	ldrb	r3, [r3, #0]
    4818:	2b0f      	cmp	r3, #15
    481a:	d9d9      	bls.n	47d0 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    481c:	46bd      	mov	sp, r7
    481e:	bd80      	pop	{r7, pc}
    4820:	20006dca 	.word	0x20006dca
    4824:	00004655 	.word	0x00004655
    4828:	0000469d 	.word	0x0000469d
    482c:	20006dcc 	.word	0x20006dcc

00004830 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4830:	b580      	push	{r7, lr}
    4832:	b082      	sub	sp, #8
    4834:	af00      	add	r7, sp, #0
    4836:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	2200      	movs	r2, #0
    483c:	701a      	strb	r2, [r3, #0]
}
    483e:	46bd      	mov	sp, r7
    4840:	b002      	add	sp, #8
    4842:	bd80      	pop	{r7, pc}

00004844 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4844:	b580      	push	{r7, lr}
    4846:	b082      	sub	sp, #8
    4848:	af00      	add	r7, sp, #0
    484a:	1c02      	adds	r2, r0, #0
    484c:	6039      	str	r1, [r7, #0]
    484e:	1dfb      	adds	r3, r7, #7
    4850:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4852:	1dfb      	adds	r3, r7, #7
    4854:	781b      	ldrb	r3, [r3, #0]
    4856:	2b01      	cmp	r3, #1
    4858:	d00a      	beq.n	4870 <system_apb_clock_set_mask+0x2c>
    485a:	2b02      	cmp	r3, #2
    485c:	d00f      	beq.n	487e <system_apb_clock_set_mask+0x3a>
    485e:	2b00      	cmp	r3, #0
    4860:	d114      	bne.n	488c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4862:	4b0e      	ldr	r3, [pc, #56]	; (489c <system_apb_clock_set_mask+0x58>)
    4864:	4a0d      	ldr	r2, [pc, #52]	; (489c <system_apb_clock_set_mask+0x58>)
    4866:	6991      	ldr	r1, [r2, #24]
    4868:	683a      	ldr	r2, [r7, #0]
    486a:	430a      	orrs	r2, r1
    486c:	619a      	str	r2, [r3, #24]
			break;
    486e:	e00f      	b.n	4890 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4870:	4b0a      	ldr	r3, [pc, #40]	; (489c <system_apb_clock_set_mask+0x58>)
    4872:	4a0a      	ldr	r2, [pc, #40]	; (489c <system_apb_clock_set_mask+0x58>)
    4874:	69d1      	ldr	r1, [r2, #28]
    4876:	683a      	ldr	r2, [r7, #0]
    4878:	430a      	orrs	r2, r1
    487a:	61da      	str	r2, [r3, #28]
			break;
    487c:	e008      	b.n	4890 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    487e:	4b07      	ldr	r3, [pc, #28]	; (489c <system_apb_clock_set_mask+0x58>)
    4880:	4a06      	ldr	r2, [pc, #24]	; (489c <system_apb_clock_set_mask+0x58>)
    4882:	6a11      	ldr	r1, [r2, #32]
    4884:	683a      	ldr	r2, [r7, #0]
    4886:	430a      	orrs	r2, r1
    4888:	621a      	str	r2, [r3, #32]
			break;
    488a:	e001      	b.n	4890 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    488c:	2317      	movs	r3, #23
    488e:	e000      	b.n	4892 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4890:	2300      	movs	r3, #0
}
    4892:	1c18      	adds	r0, r3, #0
    4894:	46bd      	mov	sp, r7
    4896:	b002      	add	sp, #8
    4898:	bd80      	pop	{r7, pc}
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	40000400 	.word	0x40000400

000048a0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    48a0:	b580      	push	{r7, lr}
    48a2:	b082      	sub	sp, #8
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    48a8:	687b      	ldr	r3, [r7, #4]
    48aa:	2280      	movs	r2, #128	; 0x80
    48ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    48ae:	687b      	ldr	r3, [r7, #4]
    48b0:	2200      	movs	r2, #0
    48b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	2201      	movs	r2, #1
    48b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2200      	movs	r2, #0
    48be:	70da      	strb	r2, [r3, #3]
}
    48c0:	46bd      	mov	sp, r7
    48c2:	b002      	add	sp, #8
    48c4:	bd80      	pop	{r7, pc}
    48c6:	46c0      	nop			; (mov r8, r8)

000048c8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b082      	sub	sp, #8
    48cc:	af00      	add	r7, sp, #0
    48ce:	1c02      	adds	r2, r0, #0
    48d0:	1dfb      	adds	r3, r7, #7
    48d2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    48d4:	4b06      	ldr	r3, [pc, #24]	; (48f0 <system_interrupt_enable+0x28>)
    48d6:	1dfa      	adds	r2, r7, #7
    48d8:	7812      	ldrb	r2, [r2, #0]
    48da:	1c11      	adds	r1, r2, #0
    48dc:	221f      	movs	r2, #31
    48de:	400a      	ands	r2, r1
    48e0:	2101      	movs	r1, #1
    48e2:	1c08      	adds	r0, r1, #0
    48e4:	4090      	lsls	r0, r2
    48e6:	1c02      	adds	r2, r0, #0
    48e8:	601a      	str	r2, [r3, #0]
}
    48ea:	46bd      	mov	sp, r7
    48ec:	b002      	add	sp, #8
    48ee:	bd80      	pop	{r7, pc}
    48f0:	e000e100 	.word	0xe000e100

000048f4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	b084      	sub	sp, #16
    48f8:	af00      	add	r7, sp, #0
    48fa:	1c02      	adds	r2, r0, #0
    48fc:	1dfb      	adds	r3, r7, #7
    48fe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4900:	1c3b      	adds	r3, r7, #0
    4902:	330f      	adds	r3, #15
    4904:	1dfa      	adds	r2, r7, #7
    4906:	7812      	ldrb	r2, [r2, #0]
    4908:	0952      	lsrs	r2, r2, #5
    490a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    490c:	1c3b      	adds	r3, r7, #0
    490e:	330f      	adds	r3, #15
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	2b00      	cmp	r3, #0
    4914:	d10b      	bne.n	492e <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4916:	4b08      	ldr	r3, [pc, #32]	; (4938 <_extint_get_eic_from_channel+0x44>)
    4918:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    491a:	1c3b      	adds	r3, r7, #0
    491c:	330f      	adds	r3, #15
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	009b      	lsls	r3, r3, #2
    4922:	2210      	movs	r2, #16
    4924:	19d2      	adds	r2, r2, r7
    4926:	18d3      	adds	r3, r2, r3
    4928:	3b08      	subs	r3, #8
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	e000      	b.n	4930 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    492e:	2300      	movs	r3, #0
	}
}
    4930:	1c18      	adds	r0, r3, #0
    4932:	46bd      	mov	sp, r7
    4934:	b004      	add	sp, #16
    4936:	bd80      	pop	{r7, pc}
    4938:	40001800 	.word	0x40001800

0000493c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    493c:	b580      	push	{r7, lr}
    493e:	b082      	sub	sp, #8
    4940:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4942:	4b0f      	ldr	r3, [pc, #60]	; (4980 <extint_is_syncing+0x44>)
    4944:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4946:	2300      	movs	r3, #0
    4948:	607b      	str	r3, [r7, #4]
    494a:	e011      	b.n	4970 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    494c:	687b      	ldr	r3, [r7, #4]
    494e:	009b      	lsls	r3, r3, #2
    4950:	2208      	movs	r2, #8
    4952:	19d2      	adds	r2, r2, r7
    4954:	18d3      	adds	r3, r2, r3
    4956:	3b08      	subs	r3, #8
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	785b      	ldrb	r3, [r3, #1]
    495c:	b2db      	uxtb	r3, r3
    495e:	b2db      	uxtb	r3, r3
    4960:	b25b      	sxtb	r3, r3
    4962:	2b00      	cmp	r3, #0
    4964:	da01      	bge.n	496a <extint_is_syncing+0x2e>
			return true;
    4966:	2301      	movs	r3, #1
    4968:	e006      	b.n	4978 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	3301      	adds	r3, #1
    496e:	607b      	str	r3, [r7, #4]
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	2b00      	cmp	r3, #0
    4974:	d0ea      	beq.n	494c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4976:	2300      	movs	r3, #0
}
    4978:	1c18      	adds	r0, r3, #0
    497a:	46bd      	mov	sp, r7
    497c:	b002      	add	sp, #8
    497e:	bd80      	pop	{r7, pc}
    4980:	40001800 	.word	0x40001800

00004984 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4984:	b580      	push	{r7, lr}
    4986:	b084      	sub	sp, #16
    4988:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    498a:	4b2c      	ldr	r3, [pc, #176]	; (4a3c <_system_extint_init+0xb8>)
    498c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    498e:	2000      	movs	r0, #0
    4990:	2140      	movs	r1, #64	; 0x40
    4992:	4b2b      	ldr	r3, [pc, #172]	; (4a40 <_system_extint_init+0xbc>)
    4994:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4996:	1c3b      	adds	r3, r7, #0
    4998:	1c18      	adds	r0, r3, #0
    499a:	4b2a      	ldr	r3, [pc, #168]	; (4a44 <_system_extint_init+0xc0>)
    499c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    499e:	1c3b      	adds	r3, r7, #0
    49a0:	2200      	movs	r2, #0
    49a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    49a4:	1c3b      	adds	r3, r7, #0
    49a6:	2005      	movs	r0, #5
    49a8:	1c19      	adds	r1, r3, #0
    49aa:	4b27      	ldr	r3, [pc, #156]	; (4a48 <_system_extint_init+0xc4>)
    49ac:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    49ae:	2005      	movs	r0, #5
    49b0:	4b26      	ldr	r3, [pc, #152]	; (4a4c <_system_extint_init+0xc8>)
    49b2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49b4:	2300      	movs	r3, #0
    49b6:	60fb      	str	r3, [r7, #12]
    49b8:	e016      	b.n	49e8 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    49ba:	68fb      	ldr	r3, [r7, #12]
    49bc:	009b      	lsls	r3, r3, #2
    49be:	2110      	movs	r1, #16
    49c0:	19c9      	adds	r1, r1, r7
    49c2:	18cb      	adds	r3, r1, r3
    49c4:	3b0c      	subs	r3, #12
    49c6:	681a      	ldr	r2, [r3, #0]
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	009b      	lsls	r3, r3, #2
    49cc:	2110      	movs	r1, #16
    49ce:	19c9      	adds	r1, r1, r7
    49d0:	18cb      	adds	r3, r1, r3
    49d2:	3b0c      	subs	r3, #12
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	781b      	ldrb	r3, [r3, #0]
    49d8:	b2db      	uxtb	r3, r3
    49da:	2101      	movs	r1, #1
    49dc:	430b      	orrs	r3, r1
    49de:	b2db      	uxtb	r3, r3
    49e0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	3301      	adds	r3, #1
    49e6:	60fb      	str	r3, [r7, #12]
    49e8:	68fb      	ldr	r3, [r7, #12]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d0e5      	beq.n	49ba <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	4b17      	ldr	r3, [pc, #92]	; (4a50 <_system_extint_init+0xcc>)
    49f2:	4798      	blx	r3
    49f4:	1c03      	adds	r3, r0, #0
    49f6:	2b00      	cmp	r3, #0
    49f8:	d1fa      	bne.n	49f0 <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    49fa:	1c3b      	adds	r3, r7, #0
    49fc:	330b      	adds	r3, #11
    49fe:	2200      	movs	r2, #0
    4a00:	701a      	strb	r2, [r3, #0]
    4a02:	e00d      	b.n	4a20 <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    4a04:	1c3b      	adds	r3, r7, #0
    4a06:	330b      	adds	r3, #11
    4a08:	781a      	ldrb	r2, [r3, #0]
    4a0a:	4b12      	ldr	r3, [pc, #72]	; (4a54 <_system_extint_init+0xd0>)
    4a0c:	0092      	lsls	r2, r2, #2
    4a0e:	2100      	movs	r1, #0
    4a10:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a12:	1c3b      	adds	r3, r7, #0
    4a14:	330b      	adds	r3, #11
    4a16:	781a      	ldrb	r2, [r3, #0]
    4a18:	1c3b      	adds	r3, r7, #0
    4a1a:	330b      	adds	r3, #11
    4a1c:	3201      	adds	r2, #1
    4a1e:	701a      	strb	r2, [r3, #0]
    4a20:	1c3b      	adds	r3, r7, #0
    4a22:	330b      	adds	r3, #11
    4a24:	781b      	ldrb	r3, [r3, #0]
    4a26:	2b0f      	cmp	r3, #15
    4a28:	d9ec      	bls.n	4a04 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4a2a:	2004      	movs	r0, #4
    4a2c:	4b0a      	ldr	r3, [pc, #40]	; (4a58 <_system_extint_init+0xd4>)
    4a2e:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4a30:	4b0a      	ldr	r3, [pc, #40]	; (4a5c <_system_extint_init+0xd8>)
    4a32:	4798      	blx	r3
}
    4a34:	46bd      	mov	sp, r7
    4a36:	b004      	add	sp, #16
    4a38:	bd80      	pop	{r7, pc}
    4a3a:	46c0      	nop			; (mov r8, r8)
    4a3c:	40001800 	.word	0x40001800
    4a40:	00004845 	.word	0x00004845
    4a44:	00004831 	.word	0x00004831
    4a48:	00006965 	.word	0x00006965
    4a4c:	000069a5 	.word	0x000069a5
    4a50:	0000493d 	.word	0x0000493d
    4a54:	20006dcc 	.word	0x20006dcc
    4a58:	000048c9 	.word	0x000048c9
    4a5c:	00004a61 	.word	0x00004a61

00004a60 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4a60:	b580      	push	{r7, lr}
    4a62:	b082      	sub	sp, #8
    4a64:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4a66:	4b14      	ldr	r3, [pc, #80]	; (4ab8 <_extint_enable+0x58>)
    4a68:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4a6a:	2300      	movs	r3, #0
    4a6c:	607b      	str	r3, [r7, #4]
    4a6e:	e016      	b.n	4a9e <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	009b      	lsls	r3, r3, #2
    4a74:	2108      	movs	r1, #8
    4a76:	19c9      	adds	r1, r1, r7
    4a78:	18cb      	adds	r3, r1, r3
    4a7a:	3b08      	subs	r3, #8
    4a7c:	681a      	ldr	r2, [r3, #0]
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	009b      	lsls	r3, r3, #2
    4a82:	2108      	movs	r1, #8
    4a84:	19c9      	adds	r1, r1, r7
    4a86:	18cb      	adds	r3, r1, r3
    4a88:	3b08      	subs	r3, #8
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	781b      	ldrb	r3, [r3, #0]
    4a8e:	b2db      	uxtb	r3, r3
    4a90:	2102      	movs	r1, #2
    4a92:	430b      	orrs	r3, r1
    4a94:	b2db      	uxtb	r3, r3
    4a96:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	3301      	adds	r3, #1
    4a9c:	607b      	str	r3, [r7, #4]
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	d0e5      	beq.n	4a70 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4aa4:	46c0      	nop			; (mov r8, r8)
    4aa6:	4b05      	ldr	r3, [pc, #20]	; (4abc <_extint_enable+0x5c>)
    4aa8:	4798      	blx	r3
    4aaa:	1c03      	adds	r3, r0, #0
    4aac:	2b00      	cmp	r3, #0
    4aae:	d1fa      	bne.n	4aa6 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4ab0:	46bd      	mov	sp, r7
    4ab2:	b002      	add	sp, #8
    4ab4:	bd80      	pop	{r7, pc}
    4ab6:	46c0      	nop			; (mov r8, r8)
    4ab8:	40001800 	.word	0x40001800
    4abc:	0000493d 	.word	0x0000493d

00004ac0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    4ac0:	b580      	push	{r7, lr}
    4ac2:	b082      	sub	sp, #8
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	2200      	movs	r2, #0
    4acc:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	2200      	movs	r2, #0
    4ad2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	2201      	movs	r2, #1
    4ad8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	2201      	movs	r2, #1
    4ade:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	2200      	movs	r2, #0
    4ae4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	2202      	movs	r2, #2
    4aea:	72da      	strb	r2, [r3, #11]
}
    4aec:	46bd      	mov	sp, r7
    4aee:	b002      	add	sp, #8
    4af0:	bd80      	pop	{r7, pc}
    4af2:	46c0      	nop			; (mov r8, r8)

00004af4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4af4:	b590      	push	{r4, r7, lr}
    4af6:	b087      	sub	sp, #28
    4af8:	af00      	add	r7, sp, #0
    4afa:	1c02      	adds	r2, r0, #0
    4afc:	6039      	str	r1, [r7, #0]
    4afe:	1dfb      	adds	r3, r7, #7
    4b00:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4b02:	1c3b      	adds	r3, r7, #0
    4b04:	3308      	adds	r3, #8
    4b06:	1c18      	adds	r0, r3, #0
    4b08:	4b37      	ldr	r3, [pc, #220]	; (4be8 <extint_chan_set_config+0xf4>)
    4b0a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    4b0c:	683b      	ldr	r3, [r7, #0]
    4b0e:	685b      	ldr	r3, [r3, #4]
    4b10:	b2da      	uxtb	r2, r3
    4b12:	1c3b      	adds	r3, r7, #0
    4b14:	3308      	adds	r3, #8
    4b16:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b18:	1c3b      	adds	r3, r7, #0
    4b1a:	3308      	adds	r3, #8
    4b1c:	2200      	movs	r2, #0
    4b1e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4b20:	683b      	ldr	r3, [r7, #0]
    4b22:	7a1a      	ldrb	r2, [r3, #8]
    4b24:	1c3b      	adds	r3, r7, #0
    4b26:	3308      	adds	r3, #8
    4b28:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4b2a:	683b      	ldr	r3, [r7, #0]
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	b2da      	uxtb	r2, r3
    4b30:	1c3b      	adds	r3, r7, #0
    4b32:	3308      	adds	r3, #8
    4b34:	1c10      	adds	r0, r2, #0
    4b36:	1c19      	adds	r1, r3, #0
    4b38:	4b2c      	ldr	r3, [pc, #176]	; (4bec <extint_chan_set_config+0xf8>)
    4b3a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    4b3c:	1dfb      	adds	r3, r7, #7
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	1c18      	adds	r0, r3, #0
    4b42:	4b2b      	ldr	r3, [pc, #172]	; (4bf0 <extint_chan_set_config+0xfc>)
    4b44:	4798      	blx	r3
    4b46:	1c03      	adds	r3, r0, #0
    4b48:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    4b4a:	1dfb      	adds	r3, r7, #7
    4b4c:	781a      	ldrb	r2, [r3, #0]
    4b4e:	2307      	movs	r3, #7
    4b50:	4013      	ands	r3, r2
    4b52:	009b      	lsls	r3, r3, #2
    4b54:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4b56:	683b      	ldr	r3, [r7, #0]
    4b58:	7adb      	ldrb	r3, [r3, #11]
    4b5a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4b5c:	683b      	ldr	r3, [r7, #0]
    4b5e:	7a9b      	ldrb	r3, [r3, #10]
    4b60:	2b00      	cmp	r3, #0
    4b62:	d003      	beq.n	4b6c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    4b64:	697b      	ldr	r3, [r7, #20]
    4b66:	2208      	movs	r2, #8
    4b68:	4313      	orrs	r3, r2
    4b6a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    4b6c:	1dfb      	adds	r3, r7, #7
    4b6e:	781b      	ldrb	r3, [r3, #0]
    4b70:	08db      	lsrs	r3, r3, #3
    4b72:	b2db      	uxtb	r3, r3
    4b74:	1c1a      	adds	r2, r3, #0
		= (EIC_module->CONFIG[channel / 8].reg &
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781b      	ldrb	r3, [r3, #0]
    4b7a:	08db      	lsrs	r3, r3, #3
    4b7c:	b2db      	uxtb	r3, r3
    4b7e:	1c19      	adds	r1, r3, #0
    4b80:	693b      	ldr	r3, [r7, #16]
    4b82:	3106      	adds	r1, #6
    4b84:	0089      	lsls	r1, r1, #2
    4b86:	58cb      	ldr	r3, [r1, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b88:	68f9      	ldr	r1, [r7, #12]
    4b8a:	200f      	movs	r0, #15
    4b8c:	1c04      	adds	r4, r0, #0
    4b8e:	408c      	lsls	r4, r1
    4b90:	1c21      	adds	r1, r4, #0
    4b92:	43c9      	mvns	r1, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4b94:	4019      	ands	r1, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    4b96:	68fb      	ldr	r3, [r7, #12]
    4b98:	6978      	ldr	r0, [r7, #20]
    4b9a:	1c04      	adds	r4, r0, #0
    4b9c:	409c      	lsls	r4, r3
    4b9e:	1c23      	adds	r3, r4, #0
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4ba0:	4319      	orrs	r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4ba2:	693b      	ldr	r3, [r7, #16]
    4ba4:	3206      	adds	r2, #6
    4ba6:	0092      	lsls	r2, r2, #2
    4ba8:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4baa:	683b      	ldr	r3, [r7, #0]
    4bac:	7a5b      	ldrb	r3, [r3, #9]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d00b      	beq.n	4bca <extint_chan_set_config+0xd6>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4bb2:	693b      	ldr	r3, [r7, #16]
    4bb4:	695a      	ldr	r2, [r3, #20]
    4bb6:	1dfb      	adds	r3, r7, #7
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	2101      	movs	r1, #1
    4bbc:	1c08      	adds	r0, r1, #0
    4bbe:	4098      	lsls	r0, r3
    4bc0:	1c03      	adds	r3, r0, #0
    4bc2:	431a      	orrs	r2, r3
    4bc4:	693b      	ldr	r3, [r7, #16]
    4bc6:	615a      	str	r2, [r3, #20]
    4bc8:	e00b      	b.n	4be2 <extint_chan_set_config+0xee>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4bca:	693b      	ldr	r3, [r7, #16]
    4bcc:	695b      	ldr	r3, [r3, #20]
    4bce:	1dfa      	adds	r2, r7, #7
    4bd0:	7812      	ldrb	r2, [r2, #0]
    4bd2:	2101      	movs	r1, #1
    4bd4:	1c0c      	adds	r4, r1, #0
    4bd6:	4094      	lsls	r4, r2
    4bd8:	1c22      	adds	r2, r4, #0
    4bda:	43d2      	mvns	r2, r2
    4bdc:	401a      	ands	r2, r3
    4bde:	693b      	ldr	r3, [r7, #16]
    4be0:	615a      	str	r2, [r3, #20]
	}
}
    4be2:	46bd      	mov	sp, r7
    4be4:	b007      	add	sp, #28
    4be6:	bd90      	pop	{r4, r7, pc}
    4be8:	000048a1 	.word	0x000048a1
    4bec:	00006c49 	.word	0x00006c49
    4bf0:	000048f5 	.word	0x000048f5

00004bf4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	2280      	movs	r2, #128	; 0x80
    4c00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	2200      	movs	r2, #0
    4c06:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	2201      	movs	r2, #1
    4c0c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	2200      	movs	r2, #0
    4c12:	70da      	strb	r2, [r3, #3]
}
    4c14:	46bd      	mov	sp, r7
    4c16:	b002      	add	sp, #8
    4c18:	bd80      	pop	{r7, pc}
    4c1a:	46c0      	nop			; (mov r8, r8)

00004c1c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b084      	sub	sp, #16
    4c20:	af00      	add	r7, sp, #0
    4c22:	1c02      	adds	r2, r0, #0
    4c24:	6039      	str	r1, [r7, #0]
    4c26:	1dfb      	adds	r3, r7, #7
    4c28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4c2a:	1c3b      	adds	r3, r7, #0
    4c2c:	330c      	adds	r3, #12
    4c2e:	1c18      	adds	r0, r3, #0
    4c30:	4b0f      	ldr	r3, [pc, #60]	; (4c70 <port_pin_set_config+0x54>)
    4c32:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4c34:	1c3b      	adds	r3, r7, #0
    4c36:	330c      	adds	r3, #12
    4c38:	2280      	movs	r2, #128	; 0x80
    4c3a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4c3c:	683b      	ldr	r3, [r7, #0]
    4c3e:	781a      	ldrb	r2, [r3, #0]
    4c40:	1c3b      	adds	r3, r7, #0
    4c42:	330c      	adds	r3, #12
    4c44:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4c46:	683b      	ldr	r3, [r7, #0]
    4c48:	785a      	ldrb	r2, [r3, #1]
    4c4a:	1c3b      	adds	r3, r7, #0
    4c4c:	330c      	adds	r3, #12
    4c4e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4c50:	683b      	ldr	r3, [r7, #0]
    4c52:	789a      	ldrb	r2, [r3, #2]
    4c54:	1c3b      	adds	r3, r7, #0
    4c56:	330c      	adds	r3, #12
    4c58:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4c5a:	1dfb      	adds	r3, r7, #7
    4c5c:	781a      	ldrb	r2, [r3, #0]
    4c5e:	1c3b      	adds	r3, r7, #0
    4c60:	330c      	adds	r3, #12
    4c62:	1c10      	adds	r0, r2, #0
    4c64:	1c19      	adds	r1, r3, #0
    4c66:	4b03      	ldr	r3, [pc, #12]	; (4c74 <port_pin_set_config+0x58>)
    4c68:	4798      	blx	r3
}
    4c6a:	46bd      	mov	sp, r7
    4c6c:	b004      	add	sp, #16
    4c6e:	bd80      	pop	{r7, pc}
    4c70:	00004bf5 	.word	0x00004bf5
    4c74:	00006c49 	.word	0x00006c49

00004c78 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	b082      	sub	sp, #8
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	2200      	movs	r2, #0
    4c84:	701a      	strb	r2, [r3, #0]
}
    4c86:	46bd      	mov	sp, r7
    4c88:	b002      	add	sp, #8
    4c8a:	bd80      	pop	{r7, pc}

00004c8c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4c8c:	b5b0      	push	{r4, r5, r7, lr}
    4c8e:	b08e      	sub	sp, #56	; 0x38
    4c90:	af00      	add	r7, sp, #0
    4c92:	6138      	str	r0, [r7, #16]
    4c94:	6179      	str	r1, [r7, #20]
    4c96:	60ba      	str	r2, [r7, #8]
    4c98:	60fb      	str	r3, [r7, #12]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4c9a:	2200      	movs	r2, #0
    4c9c:	2300      	movs	r3, #0
    4c9e:	62ba      	str	r2, [r7, #40]	; 0x28
    4ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    4ca2:	2200      	movs	r2, #0
    4ca4:	2300      	movs	r3, #0
    4ca6:	623a      	str	r2, [r7, #32]
    4ca8:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    4caa:	233f      	movs	r3, #63	; 0x3f
    4cac:	637b      	str	r3, [r7, #52]	; 0x34
    4cae:	e05b      	b.n	4d68 <long_division+0xdc>
		bit_shift = (uint64_t)1 << i;
    4cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4cb2:	3b20      	subs	r3, #32
    4cb4:	2b00      	cmp	r3, #0
    4cb6:	db05      	blt.n	4cc4 <long_division+0x38>
    4cb8:	2201      	movs	r2, #1
    4cba:	1c10      	adds	r0, r2, #0
    4cbc:	4098      	lsls	r0, r3
    4cbe:	1c03      	adds	r3, r0, #0
    4cc0:	61fb      	str	r3, [r7, #28]
    4cc2:	e00d      	b.n	4ce0 <long_division+0x54>
    4cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4cc6:	2220      	movs	r2, #32
    4cc8:	1ad3      	subs	r3, r2, r3
    4cca:	2201      	movs	r2, #1
    4ccc:	1c11      	adds	r1, r2, #0
    4cce:	40d9      	lsrs	r1, r3
    4cd0:	1c0b      	adds	r3, r1, #0
    4cd2:	2100      	movs	r1, #0
    4cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4cd6:	1c08      	adds	r0, r1, #0
    4cd8:	4090      	lsls	r0, r2
    4cda:	1c02      	adds	r2, r0, #0
    4cdc:	4313      	orrs	r3, r2
    4cde:	61fb      	str	r3, [r7, #28]
    4ce0:	2201      	movs	r2, #1
    4ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4ce4:	1c11      	adds	r1, r2, #0
    4ce6:	4099      	lsls	r1, r3
    4ce8:	1c0b      	adds	r3, r1, #0
    4cea:	61bb      	str	r3, [r7, #24]

		r = r << 1;
    4cec:	6a3a      	ldr	r2, [r7, #32]
    4cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cf0:	1892      	adds	r2, r2, r2
    4cf2:	415b      	adcs	r3, r3
    4cf4:	623a      	str	r2, [r7, #32]
    4cf6:	627b      	str	r3, [r7, #36]	; 0x24

		if (n & bit_shift) {
    4cf8:	693b      	ldr	r3, [r7, #16]
    4cfa:	69ba      	ldr	r2, [r7, #24]
    4cfc:	1c14      	adds	r4, r2, #0
    4cfe:	401c      	ands	r4, r3
    4d00:	697b      	ldr	r3, [r7, #20]
    4d02:	69fa      	ldr	r2, [r7, #28]
    4d04:	1c15      	adds	r5, r2, #0
    4d06:	401d      	ands	r5, r3
    4d08:	1c23      	adds	r3, r4, #0
    4d0a:	432b      	orrs	r3, r5
    4d0c:	d007      	beq.n	4d1e <long_division+0x92>
			r |= 0x01;
    4d0e:	6a3b      	ldr	r3, [r7, #32]
    4d10:	2201      	movs	r2, #1
    4d12:	4313      	orrs	r3, r2
    4d14:	623b      	str	r3, [r7, #32]
    4d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d18:	2200      	movs	r2, #0
    4d1a:	4313      	orrs	r3, r2
    4d1c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (r >= d) {
    4d1e:	68fa      	ldr	r2, [r7, #12]
    4d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d22:	429a      	cmp	r2, r3
    4d24:	d81d      	bhi.n	4d62 <long_division+0xd6>
    4d26:	68fa      	ldr	r2, [r7, #12]
    4d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d2a:	429a      	cmp	r2, r3
    4d2c:	d103      	bne.n	4d36 <long_division+0xaa>
    4d2e:	68ba      	ldr	r2, [r7, #8]
    4d30:	6a3b      	ldr	r3, [r7, #32]
    4d32:	429a      	cmp	r2, r3
    4d34:	d815      	bhi.n	4d62 <long_division+0xd6>
			r = r - d;
    4d36:	6a3a      	ldr	r2, [r7, #32]
    4d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d3a:	603a      	str	r2, [r7, #0]
    4d3c:	607b      	str	r3, [r7, #4]
    4d3e:	68ba      	ldr	r2, [r7, #8]
    4d40:	68fb      	ldr	r3, [r7, #12]
    4d42:	6838      	ldr	r0, [r7, #0]
    4d44:	6879      	ldr	r1, [r7, #4]
    4d46:	1a80      	subs	r0, r0, r2
    4d48:	4199      	sbcs	r1, r3
    4d4a:	1c02      	adds	r2, r0, #0
    4d4c:	1c0b      	adds	r3, r1, #0
    4d4e:	623a      	str	r2, [r7, #32]
    4d50:	627b      	str	r3, [r7, #36]	; 0x24
			q |= bit_shift;
    4d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4d54:	69bb      	ldr	r3, [r7, #24]
    4d56:	4313      	orrs	r3, r2
    4d58:	62bb      	str	r3, [r7, #40]	; 0x28
    4d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4d5c:	69fb      	ldr	r3, [r7, #28]
    4d5e:	4313      	orrs	r3, r2
    4d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    4d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4d64:	3b01      	subs	r3, #1
    4d66:	637b      	str	r3, [r7, #52]	; 0x34
    4d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	daa0      	bge.n	4cb0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    4d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4d70:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
    4d72:	1c18      	adds	r0, r3, #0
    4d74:	1c21      	adds	r1, r4, #0
    4d76:	46bd      	mov	sp, r7
    4d78:	b00e      	add	sp, #56	; 0x38
    4d7a:	bdb0      	pop	{r4, r5, r7, pc}

00004d7c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b086      	sub	sp, #24
    4d80:	af00      	add	r7, sp, #0
    4d82:	60f8      	str	r0, [r7, #12]
    4d84:	60b9      	str	r1, [r7, #8]
    4d86:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4d88:	1c3b      	adds	r3, r7, #0
    4d8a:	3316      	adds	r3, #22
    4d8c:	2200      	movs	r2, #0
    4d8e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    4d90:	68bb      	ldr	r3, [r7, #8]
    4d92:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    4d94:	68bb      	ldr	r3, [r7, #8]
    4d96:	085a      	lsrs	r2, r3, #1
    4d98:	68fb      	ldr	r3, [r7, #12]
    4d9a:	429a      	cmp	r2, r3
    4d9c:	d201      	bcs.n	4da2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d9e:	2340      	movs	r3, #64	; 0x40
    4da0:	e026      	b.n	4df0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    4da2:	68bb      	ldr	r3, [r7, #8]
    4da4:	085b      	lsrs	r3, r3, #1
    4da6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4da8:	e00a      	b.n	4dc0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4daa:	693a      	ldr	r2, [r7, #16]
    4dac:	68fb      	ldr	r3, [r7, #12]
    4dae:	1ad3      	subs	r3, r2, r3
    4db0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    4db2:	1c3b      	adds	r3, r7, #0
    4db4:	3316      	adds	r3, #22
    4db6:	881a      	ldrh	r2, [r3, #0]
    4db8:	1c3b      	adds	r3, r7, #0
    4dba:	3316      	adds	r3, #22
    4dbc:	3201      	adds	r2, #1
    4dbe:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    4dc0:	693a      	ldr	r2, [r7, #16]
    4dc2:	68fb      	ldr	r3, [r7, #12]
    4dc4:	429a      	cmp	r2, r3
    4dc6:	d2f0      	bcs.n	4daa <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    4dc8:	1c3b      	adds	r3, r7, #0
    4dca:	3316      	adds	r3, #22
    4dcc:	1c3a      	adds	r2, r7, #0
    4dce:	3216      	adds	r2, #22
    4dd0:	8812      	ldrh	r2, [r2, #0]
    4dd2:	3a01      	subs	r2, #1
    4dd4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4dd6:	1c3b      	adds	r3, r7, #0
    4dd8:	3316      	adds	r3, #22
    4dda:	881b      	ldrh	r3, [r3, #0]
    4ddc:	2bff      	cmp	r3, #255	; 0xff
    4dde:	d901      	bls.n	4de4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4de0:	2340      	movs	r3, #64	; 0x40
    4de2:	e005      	b.n	4df0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	1c3a      	adds	r2, r7, #0
    4de8:	3216      	adds	r2, #22
    4dea:	8812      	ldrh	r2, [r2, #0]
    4dec:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4dee:	2300      	movs	r3, #0
	}
}
    4df0:	1c18      	adds	r0, r3, #0
    4df2:	46bd      	mov	sp, r7
    4df4:	b006      	add	sp, #24
    4df6:	bd80      	pop	{r7, pc}

00004df8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dfa:	b09d      	sub	sp, #116	; 0x74
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    4e00:	63b9      	str	r1, [r7, #56]	; 0x38
    4e02:	637a      	str	r2, [r7, #52]	; 0x34
    4e04:	1c3a      	adds	r2, r7, #0
    4e06:	3233      	adds	r2, #51	; 0x33
    4e08:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    4e0a:	2300      	movs	r3, #0
    4e0c:	2400      	movs	r4, #0
    4e0e:	65bb      	str	r3, [r7, #88]	; 0x58
    4e10:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    4e12:	2300      	movs	r3, #0
    4e14:	2400      	movs	r4, #0
    4e16:	653b      	str	r3, [r7, #80]	; 0x50
    4e18:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    4e1a:	2300      	movs	r3, #0
    4e1c:	2400      	movs	r4, #0
    4e1e:	66bb      	str	r3, [r7, #104]	; 0x68
    4e20:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    4e22:	2300      	movs	r3, #0
    4e24:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4e26:	1c3b      	adds	r3, r7, #0
    4e28:	3388      	adds	r3, #136	; 0x88
    4e2a:	781a      	ldrb	r2, [r3, #0]
    4e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e2e:	435a      	muls	r2, r3
    4e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e32:	429a      	cmp	r2, r3
    4e34:	d901      	bls.n	4e3a <_sercom_get_async_baud_val+0x42>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4e36:	2340      	movs	r3, #64	; 0x40
    4e38:	e0af      	b.n	4f9a <_sercom_get_async_baud_val+0x1a2>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4e3a:	1c3b      	adds	r3, r7, #0
    4e3c:	3333      	adds	r3, #51	; 0x33
    4e3e:	781b      	ldrb	r3, [r3, #0]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d143      	bne.n	4ecc <_sercom_get_async_baud_val+0xd4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4e44:	1c3b      	adds	r3, r7, #0
    4e46:	3388      	adds	r3, #136	; 0x88
    4e48:	781b      	ldrb	r3, [r3, #0]
    4e4a:	b2db      	uxtb	r3, r3
    4e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    4e4e:	2300      	movs	r3, #0
    4e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    4e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e54:	623b      	str	r3, [r7, #32]
    4e56:	2300      	movs	r3, #0
    4e58:	627b      	str	r3, [r7, #36]	; 0x24
    4e5a:	4c55      	ldr	r4, [pc, #340]	; (4fb0 <_sercom_get_async_baud_val+0x1b8>)
    4e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    4e60:	6a3a      	ldr	r2, [r7, #32]
    4e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4e64:	47a0      	blx	r4
    4e66:	1c03      	adds	r3, r0, #0
    4e68:	1c0c      	adds	r4, r1, #0
    4e6a:	001b      	movs	r3, r3
    4e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    4e6e:	2300      	movs	r3, #0
    4e70:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    4e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e74:	61bb      	str	r3, [r7, #24]
    4e76:	2300      	movs	r3, #0
    4e78:	61fb      	str	r3, [r7, #28]
    4e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4e7c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    4e7e:	1c18      	adds	r0, r3, #0
    4e80:	1c21      	adds	r1, r4, #0
    4e82:	69ba      	ldr	r2, [r7, #24]
    4e84:	69fb      	ldr	r3, [r7, #28]
    4e86:	4c4b      	ldr	r4, [pc, #300]	; (4fb4 <_sercom_get_async_baud_val+0x1bc>)
    4e88:	47a0      	blx	r4
    4e8a:	1c03      	adds	r3, r0, #0
    4e8c:	1c0c      	adds	r4, r1, #0
    4e8e:	65bb      	str	r3, [r7, #88]	; 0x58
    4e90:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4e92:	4a46      	ldr	r2, [pc, #280]	; (4fac <_sercom_get_async_baud_val+0x1b4>)
    4e94:	4944      	ldr	r1, [pc, #272]	; (4fa8 <_sercom_get_async_baud_val+0x1b0>)
    4e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4e98:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4e9a:	1c0d      	adds	r5, r1, #0
    4e9c:	1c16      	adds	r6, r2, #0
    4e9e:	1aed      	subs	r5, r5, r3
    4ea0:	41a6      	sbcs	r6, r4
    4ea2:	1c2b      	adds	r3, r5, #0
    4ea4:	1c34      	adds	r4, r6, #0
    4ea6:	653b      	str	r3, [r7, #80]	; 0x50
    4ea8:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    4eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4eac:	0c1b      	lsrs	r3, r3, #16
    4eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4eb0:	0412      	lsls	r2, r2, #16
    4eb2:	617a      	str	r2, [r7, #20]
    4eb4:	697e      	ldr	r6, [r7, #20]
    4eb6:	431e      	orrs	r6, r3
    4eb8:	617e      	str	r6, [r7, #20]
    4eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4ebc:	041b      	lsls	r3, r3, #16
    4ebe:	613b      	str	r3, [r7, #16]
    4ec0:	697a      	ldr	r2, [r7, #20]
    4ec2:	0013      	movs	r3, r2
    4ec4:	66bb      	str	r3, [r7, #104]	; 0x68
    4ec6:	2300      	movs	r3, #0
    4ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
    4eca:	e060      	b.n	4f8e <_sercom_get_async_baud_val+0x196>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4ecc:	1c3b      	adds	r3, r7, #0
    4ece:	3333      	adds	r3, #51	; 0x33
    4ed0:	781b      	ldrb	r3, [r3, #0]
    4ed2:	2b01      	cmp	r3, #1
    4ed4:	d15b      	bne.n	4f8e <_sercom_get_async_baud_val+0x196>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4ed6:	1c3b      	adds	r3, r7, #0
    4ed8:	3367      	adds	r3, #103	; 0x67
    4eda:	2200      	movs	r2, #0
    4edc:	701a      	strb	r2, [r3, #0]
    4ede:	e040      	b.n	4f62 <_sercom_get_async_baud_val+0x16a>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    4ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4ee2:	1c1d      	adds	r5, r3, #0
    4ee4:	2300      	movs	r3, #0
    4ee6:	1c1e      	adds	r6, r3, #0
    4ee8:	0f6b      	lsrs	r3, r5, #29
    4eea:	00f2      	lsls	r2, r6, #3
    4eec:	4313      	orrs	r3, r2
    4eee:	64fb      	str	r3, [r7, #76]	; 0x4c
    4ef0:	00eb      	lsls	r3, r5, #3
    4ef2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    4ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4ef6:	60bb      	str	r3, [r7, #8]
    4ef8:	2300      	movs	r3, #0
    4efa:	60fb      	str	r3, [r7, #12]
    4efc:	1c3b      	adds	r3, r7, #0
    4efe:	3388      	adds	r3, #136	; 0x88
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2db      	uxtb	r3, r3
    4f04:	603b      	str	r3, [r7, #0]
    4f06:	2300      	movs	r3, #0
    4f08:	607b      	str	r3, [r7, #4]
    4f0a:	4c29      	ldr	r4, [pc, #164]	; (4fb0 <_sercom_get_async_baud_val+0x1b8>)
    4f0c:	68b8      	ldr	r0, [r7, #8]
    4f0e:	68f9      	ldr	r1, [r7, #12]
    4f10:	683a      	ldr	r2, [r7, #0]
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	47a0      	blx	r4
    4f16:	1c03      	adds	r3, r0, #0
    4f18:	1c0c      	adds	r4, r1, #0
    4f1a:	643b      	str	r3, [r7, #64]	; 0x40
    4f1c:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    4f1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    4f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f24:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    4f26:	1c08      	adds	r0, r1, #0
    4f28:	1c11      	adds	r1, r2, #0
    4f2a:	1c1a      	adds	r2, r3, #0
    4f2c:	1c23      	adds	r3, r4, #0
    4f2e:	4c21      	ldr	r4, [pc, #132]	; (4fb4 <_sercom_get_async_baud_val+0x1bc>)
    4f30:	47a0      	blx	r4
    4f32:	1c03      	adds	r3, r0, #0
    4f34:	1c0c      	adds	r4, r1, #0
    4f36:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    4f38:	1c3b      	adds	r3, r7, #0
    4f3a:	3367      	adds	r3, #103	; 0x67
    4f3c:	781b      	ldrb	r3, [r3, #0]
    4f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4f40:	1ad3      	subs	r3, r2, r3
    4f42:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    4f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f46:	08db      	lsrs	r3, r3, #3
    4f48:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    4f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4f4c:	4b1a      	ldr	r3, [pc, #104]	; (4fb8 <_sercom_get_async_baud_val+0x1c0>)
    4f4e:	429a      	cmp	r2, r3
    4f50:	d800      	bhi.n	4f54 <_sercom_get_async_baud_val+0x15c>
				break;
    4f52:	e00b      	b.n	4f6c <_sercom_get_async_baud_val+0x174>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4f54:	1c3b      	adds	r3, r7, #0
    4f56:	3367      	adds	r3, #103	; 0x67
    4f58:	781a      	ldrb	r2, [r3, #0]
    4f5a:	1c3b      	adds	r3, r7, #0
    4f5c:	3367      	adds	r3, #103	; 0x67
    4f5e:	3201      	adds	r2, #1
    4f60:	701a      	strb	r2, [r3, #0]
    4f62:	1c3b      	adds	r3, r7, #0
    4f64:	3367      	adds	r3, #103	; 0x67
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	2b07      	cmp	r3, #7
    4f6a:	d9b9      	bls.n	4ee0 <_sercom_get_async_baud_val+0xe8>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    4f6c:	1c3b      	adds	r3, r7, #0
    4f6e:	3367      	adds	r3, #103	; 0x67
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	2b08      	cmp	r3, #8
    4f74:	d101      	bne.n	4f7a <_sercom_get_async_baud_val+0x182>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f76:	2340      	movs	r3, #64	; 0x40
    4f78:	e00f      	b.n	4f9a <_sercom_get_async_baud_val+0x1a2>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    4f7a:	1c3b      	adds	r3, r7, #0
    4f7c:	3367      	adds	r3, #103	; 0x67
    4f7e:	781b      	ldrb	r3, [r3, #0]
    4f80:	035b      	lsls	r3, r3, #13
    4f82:	1c1a      	adds	r2, r3, #0
    4f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f86:	4313      	orrs	r3, r2
    4f88:	66bb      	str	r3, [r7, #104]	; 0x68
    4f8a:	2300      	movs	r3, #0
    4f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    4f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4f90:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    4f92:	b29a      	uxth	r2, r3
    4f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f96:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4f98:	2300      	movs	r3, #0
}
    4f9a:	1c18      	adds	r0, r3, #0
    4f9c:	46bd      	mov	sp, r7
    4f9e:	b01d      	add	sp, #116	; 0x74
    4fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	46c0      	nop			; (mov r8, r8)
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	00000000 	.word	0x00000000
    4fac:	00000001 	.word	0x00000001
    4fb0:	0000b01d 	.word	0x0000b01d
    4fb4:	00004c8d 	.word	0x00004c8d
    4fb8:	00001fff 	.word	0x00001fff
    4fbc:	46c0      	nop			; (mov r8, r8)
    4fbe:	46c0      	nop			; (mov r8, r8)

00004fc0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4fc0:	b580      	push	{r7, lr}
    4fc2:	b084      	sub	sp, #16
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	1c0a      	adds	r2, r1, #0
    4fc8:	1dfb      	adds	r3, r7, #7
    4fca:	1c01      	adds	r1, r0, #0
    4fcc:	7019      	strb	r1, [r3, #0]
    4fce:	1dbb      	adds	r3, r7, #6
    4fd0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    4fd2:	4b1a      	ldr	r3, [pc, #104]	; (503c <sercom_set_gclk_generator+0x7c>)
    4fd4:	781b      	ldrb	r3, [r3, #0]
    4fd6:	2201      	movs	r2, #1
    4fd8:	4053      	eors	r3, r2
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d103      	bne.n	4fe8 <sercom_set_gclk_generator+0x28>
    4fe0:	1dbb      	adds	r3, r7, #6
    4fe2:	781b      	ldrb	r3, [r3, #0]
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d01b      	beq.n	5020 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4fe8:	1c3b      	adds	r3, r7, #0
    4fea:	330c      	adds	r3, #12
    4fec:	1c18      	adds	r0, r3, #0
    4fee:	4b14      	ldr	r3, [pc, #80]	; (5040 <sercom_set_gclk_generator+0x80>)
    4ff0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4ff2:	1c3b      	adds	r3, r7, #0
    4ff4:	330c      	adds	r3, #12
    4ff6:	1dfa      	adds	r2, r7, #7
    4ff8:	7812      	ldrb	r2, [r2, #0]
    4ffa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4ffc:	1c3b      	adds	r3, r7, #0
    4ffe:	330c      	adds	r3, #12
    5000:	2013      	movs	r0, #19
    5002:	1c19      	adds	r1, r3, #0
    5004:	4b0f      	ldr	r3, [pc, #60]	; (5044 <sercom_set_gclk_generator+0x84>)
    5006:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5008:	2013      	movs	r0, #19
    500a:	4b0f      	ldr	r3, [pc, #60]	; (5048 <sercom_set_gclk_generator+0x88>)
    500c:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    500e:	4b0b      	ldr	r3, [pc, #44]	; (503c <sercom_set_gclk_generator+0x7c>)
    5010:	1dfa      	adds	r2, r7, #7
    5012:	7812      	ldrb	r2, [r2, #0]
    5014:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    5016:	4b09      	ldr	r3, [pc, #36]	; (503c <sercom_set_gclk_generator+0x7c>)
    5018:	2201      	movs	r2, #1
    501a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    501c:	2300      	movs	r3, #0
    501e:	e008      	b.n	5032 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    5020:	4b06      	ldr	r3, [pc, #24]	; (503c <sercom_set_gclk_generator+0x7c>)
    5022:	785b      	ldrb	r3, [r3, #1]
    5024:	1dfa      	adds	r2, r7, #7
    5026:	7812      	ldrb	r2, [r2, #0]
    5028:	429a      	cmp	r2, r3
    502a:	d101      	bne.n	5030 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    502c:	2300      	movs	r3, #0
    502e:	e000      	b.n	5032 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5030:	231d      	movs	r3, #29
}
    5032:	1c18      	adds	r0, r3, #0
    5034:	46bd      	mov	sp, r7
    5036:	b004      	add	sp, #16
    5038:	bd80      	pop	{r7, pc}
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	20006c40 	.word	0x20006c40
    5040:	00004c79 	.word	0x00004c79
    5044:	00006965 	.word	0x00006965
    5048:	000069a5 	.word	0x000069a5

0000504c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    504c:	b580      	push	{r7, lr}
    504e:	b082      	sub	sp, #8
    5050:	af00      	add	r7, sp, #0
    5052:	6078      	str	r0, [r7, #4]
    5054:	1c0a      	adds	r2, r1, #0
    5056:	1cfb      	adds	r3, r7, #3
    5058:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	4a4d      	ldr	r2, [pc, #308]	; (5194 <_sercom_get_default_pad+0x148>)
    505e:	4293      	cmp	r3, r2
    5060:	d03f      	beq.n	50e2 <_sercom_get_default_pad+0x96>
    5062:	4a4c      	ldr	r2, [pc, #304]	; (5194 <_sercom_get_default_pad+0x148>)
    5064:	4293      	cmp	r3, r2
    5066:	d806      	bhi.n	5076 <_sercom_get_default_pad+0x2a>
    5068:	4a4b      	ldr	r2, [pc, #300]	; (5198 <_sercom_get_default_pad+0x14c>)
    506a:	4293      	cmp	r3, r2
    506c:	d00f      	beq.n	508e <_sercom_get_default_pad+0x42>
    506e:	4a4b      	ldr	r2, [pc, #300]	; (519c <_sercom_get_default_pad+0x150>)
    5070:	4293      	cmp	r3, r2
    5072:	d021      	beq.n	50b8 <_sercom_get_default_pad+0x6c>
    5074:	e089      	b.n	518a <_sercom_get_default_pad+0x13e>
    5076:	4a4a      	ldr	r2, [pc, #296]	; (51a0 <_sercom_get_default_pad+0x154>)
    5078:	4293      	cmp	r3, r2
    507a:	d100      	bne.n	507e <_sercom_get_default_pad+0x32>
    507c:	e05b      	b.n	5136 <_sercom_get_default_pad+0xea>
    507e:	4a49      	ldr	r2, [pc, #292]	; (51a4 <_sercom_get_default_pad+0x158>)
    5080:	4293      	cmp	r3, r2
    5082:	d100      	bne.n	5086 <_sercom_get_default_pad+0x3a>
    5084:	e06c      	b.n	5160 <_sercom_get_default_pad+0x114>
    5086:	4a48      	ldr	r2, [pc, #288]	; (51a8 <_sercom_get_default_pad+0x15c>)
    5088:	4293      	cmp	r3, r2
    508a:	d03f      	beq.n	510c <_sercom_get_default_pad+0xc0>
    508c:	e07d      	b.n	518a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    508e:	1cfb      	adds	r3, r7, #3
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	2b01      	cmp	r3, #1
    5094:	d00a      	beq.n	50ac <_sercom_get_default_pad+0x60>
    5096:	dc02      	bgt.n	509e <_sercom_get_default_pad+0x52>
    5098:	2b00      	cmp	r3, #0
    509a:	d005      	beq.n	50a8 <_sercom_get_default_pad+0x5c>
    509c:	e075      	b.n	518a <_sercom_get_default_pad+0x13e>
    509e:	2b02      	cmp	r3, #2
    50a0:	d006      	beq.n	50b0 <_sercom_get_default_pad+0x64>
    50a2:	2b03      	cmp	r3, #3
    50a4:	d006      	beq.n	50b4 <_sercom_get_default_pad+0x68>
    50a6:	e070      	b.n	518a <_sercom_get_default_pad+0x13e>
    50a8:	4b40      	ldr	r3, [pc, #256]	; (51ac <_sercom_get_default_pad+0x160>)
    50aa:	e06f      	b.n	518c <_sercom_get_default_pad+0x140>
    50ac:	4b40      	ldr	r3, [pc, #256]	; (51b0 <_sercom_get_default_pad+0x164>)
    50ae:	e06d      	b.n	518c <_sercom_get_default_pad+0x140>
    50b0:	4b40      	ldr	r3, [pc, #256]	; (51b4 <_sercom_get_default_pad+0x168>)
    50b2:	e06b      	b.n	518c <_sercom_get_default_pad+0x140>
    50b4:	4b40      	ldr	r3, [pc, #256]	; (51b8 <_sercom_get_default_pad+0x16c>)
    50b6:	e069      	b.n	518c <_sercom_get_default_pad+0x140>
    50b8:	1cfb      	adds	r3, r7, #3
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	2b01      	cmp	r3, #1
    50be:	d00a      	beq.n	50d6 <_sercom_get_default_pad+0x8a>
    50c0:	dc02      	bgt.n	50c8 <_sercom_get_default_pad+0x7c>
    50c2:	2b00      	cmp	r3, #0
    50c4:	d005      	beq.n	50d2 <_sercom_get_default_pad+0x86>
    50c6:	e060      	b.n	518a <_sercom_get_default_pad+0x13e>
    50c8:	2b02      	cmp	r3, #2
    50ca:	d006      	beq.n	50da <_sercom_get_default_pad+0x8e>
    50cc:	2b03      	cmp	r3, #3
    50ce:	d006      	beq.n	50de <_sercom_get_default_pad+0x92>
    50d0:	e05b      	b.n	518a <_sercom_get_default_pad+0x13e>
    50d2:	2303      	movs	r3, #3
    50d4:	e05a      	b.n	518c <_sercom_get_default_pad+0x140>
    50d6:	4b39      	ldr	r3, [pc, #228]	; (51bc <_sercom_get_default_pad+0x170>)
    50d8:	e058      	b.n	518c <_sercom_get_default_pad+0x140>
    50da:	4b39      	ldr	r3, [pc, #228]	; (51c0 <_sercom_get_default_pad+0x174>)
    50dc:	e056      	b.n	518c <_sercom_get_default_pad+0x140>
    50de:	4b39      	ldr	r3, [pc, #228]	; (51c4 <_sercom_get_default_pad+0x178>)
    50e0:	e054      	b.n	518c <_sercom_get_default_pad+0x140>
    50e2:	1cfb      	adds	r3, r7, #3
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	2b01      	cmp	r3, #1
    50e8:	d00a      	beq.n	5100 <_sercom_get_default_pad+0xb4>
    50ea:	dc02      	bgt.n	50f2 <_sercom_get_default_pad+0xa6>
    50ec:	2b00      	cmp	r3, #0
    50ee:	d005      	beq.n	50fc <_sercom_get_default_pad+0xb0>
    50f0:	e04b      	b.n	518a <_sercom_get_default_pad+0x13e>
    50f2:	2b02      	cmp	r3, #2
    50f4:	d006      	beq.n	5104 <_sercom_get_default_pad+0xb8>
    50f6:	2b03      	cmp	r3, #3
    50f8:	d006      	beq.n	5108 <_sercom_get_default_pad+0xbc>
    50fa:	e046      	b.n	518a <_sercom_get_default_pad+0x13e>
    50fc:	4b32      	ldr	r3, [pc, #200]	; (51c8 <_sercom_get_default_pad+0x17c>)
    50fe:	e045      	b.n	518c <_sercom_get_default_pad+0x140>
    5100:	4b32      	ldr	r3, [pc, #200]	; (51cc <_sercom_get_default_pad+0x180>)
    5102:	e043      	b.n	518c <_sercom_get_default_pad+0x140>
    5104:	4b32      	ldr	r3, [pc, #200]	; (51d0 <_sercom_get_default_pad+0x184>)
    5106:	e041      	b.n	518c <_sercom_get_default_pad+0x140>
    5108:	4b32      	ldr	r3, [pc, #200]	; (51d4 <_sercom_get_default_pad+0x188>)
    510a:	e03f      	b.n	518c <_sercom_get_default_pad+0x140>
    510c:	1cfb      	adds	r3, r7, #3
    510e:	781b      	ldrb	r3, [r3, #0]
    5110:	2b01      	cmp	r3, #1
    5112:	d00a      	beq.n	512a <_sercom_get_default_pad+0xde>
    5114:	dc02      	bgt.n	511c <_sercom_get_default_pad+0xd0>
    5116:	2b00      	cmp	r3, #0
    5118:	d005      	beq.n	5126 <_sercom_get_default_pad+0xda>
    511a:	e036      	b.n	518a <_sercom_get_default_pad+0x13e>
    511c:	2b02      	cmp	r3, #2
    511e:	d006      	beq.n	512e <_sercom_get_default_pad+0xe2>
    5120:	2b03      	cmp	r3, #3
    5122:	d006      	beq.n	5132 <_sercom_get_default_pad+0xe6>
    5124:	e031      	b.n	518a <_sercom_get_default_pad+0x13e>
    5126:	4b2c      	ldr	r3, [pc, #176]	; (51d8 <_sercom_get_default_pad+0x18c>)
    5128:	e030      	b.n	518c <_sercom_get_default_pad+0x140>
    512a:	4b2c      	ldr	r3, [pc, #176]	; (51dc <_sercom_get_default_pad+0x190>)
    512c:	e02e      	b.n	518c <_sercom_get_default_pad+0x140>
    512e:	4b2c      	ldr	r3, [pc, #176]	; (51e0 <_sercom_get_default_pad+0x194>)
    5130:	e02c      	b.n	518c <_sercom_get_default_pad+0x140>
    5132:	4b2c      	ldr	r3, [pc, #176]	; (51e4 <_sercom_get_default_pad+0x198>)
    5134:	e02a      	b.n	518c <_sercom_get_default_pad+0x140>
    5136:	1cfb      	adds	r3, r7, #3
    5138:	781b      	ldrb	r3, [r3, #0]
    513a:	2b01      	cmp	r3, #1
    513c:	d00a      	beq.n	5154 <_sercom_get_default_pad+0x108>
    513e:	dc02      	bgt.n	5146 <_sercom_get_default_pad+0xfa>
    5140:	2b00      	cmp	r3, #0
    5142:	d005      	beq.n	5150 <_sercom_get_default_pad+0x104>
    5144:	e021      	b.n	518a <_sercom_get_default_pad+0x13e>
    5146:	2b02      	cmp	r3, #2
    5148:	d006      	beq.n	5158 <_sercom_get_default_pad+0x10c>
    514a:	2b03      	cmp	r3, #3
    514c:	d006      	beq.n	515c <_sercom_get_default_pad+0x110>
    514e:	e01c      	b.n	518a <_sercom_get_default_pad+0x13e>
    5150:	4b25      	ldr	r3, [pc, #148]	; (51e8 <_sercom_get_default_pad+0x19c>)
    5152:	e01b      	b.n	518c <_sercom_get_default_pad+0x140>
    5154:	4b25      	ldr	r3, [pc, #148]	; (51ec <_sercom_get_default_pad+0x1a0>)
    5156:	e019      	b.n	518c <_sercom_get_default_pad+0x140>
    5158:	4b25      	ldr	r3, [pc, #148]	; (51f0 <_sercom_get_default_pad+0x1a4>)
    515a:	e017      	b.n	518c <_sercom_get_default_pad+0x140>
    515c:	4b25      	ldr	r3, [pc, #148]	; (51f4 <_sercom_get_default_pad+0x1a8>)
    515e:	e015      	b.n	518c <_sercom_get_default_pad+0x140>
    5160:	1cfb      	adds	r3, r7, #3
    5162:	781b      	ldrb	r3, [r3, #0]
    5164:	2b01      	cmp	r3, #1
    5166:	d00a      	beq.n	517e <_sercom_get_default_pad+0x132>
    5168:	dc02      	bgt.n	5170 <_sercom_get_default_pad+0x124>
    516a:	2b00      	cmp	r3, #0
    516c:	d005      	beq.n	517a <_sercom_get_default_pad+0x12e>
    516e:	e00c      	b.n	518a <_sercom_get_default_pad+0x13e>
    5170:	2b02      	cmp	r3, #2
    5172:	d006      	beq.n	5182 <_sercom_get_default_pad+0x136>
    5174:	2b03      	cmp	r3, #3
    5176:	d006      	beq.n	5186 <_sercom_get_default_pad+0x13a>
    5178:	e007      	b.n	518a <_sercom_get_default_pad+0x13e>
    517a:	4b1f      	ldr	r3, [pc, #124]	; (51f8 <_sercom_get_default_pad+0x1ac>)
    517c:	e006      	b.n	518c <_sercom_get_default_pad+0x140>
    517e:	4b1f      	ldr	r3, [pc, #124]	; (51fc <_sercom_get_default_pad+0x1b0>)
    5180:	e004      	b.n	518c <_sercom_get_default_pad+0x140>
    5182:	4b1f      	ldr	r3, [pc, #124]	; (5200 <_sercom_get_default_pad+0x1b4>)
    5184:	e002      	b.n	518c <_sercom_get_default_pad+0x140>
    5186:	4b1f      	ldr	r3, [pc, #124]	; (5204 <_sercom_get_default_pad+0x1b8>)
    5188:	e000      	b.n	518c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    518a:	2300      	movs	r3, #0
}
    518c:	1c18      	adds	r0, r3, #0
    518e:	46bd      	mov	sp, r7
    5190:	b002      	add	sp, #8
    5192:	bd80      	pop	{r7, pc}
    5194:	42001000 	.word	0x42001000
    5198:	42000800 	.word	0x42000800
    519c:	42000c00 	.word	0x42000c00
    51a0:	42001800 	.word	0x42001800
    51a4:	42001c00 	.word	0x42001c00
    51a8:	42001400 	.word	0x42001400
    51ac:	00040003 	.word	0x00040003
    51b0:	00050003 	.word	0x00050003
    51b4:	00060003 	.word	0x00060003
    51b8:	00070003 	.word	0x00070003
    51bc:	00010003 	.word	0x00010003
    51c0:	001e0003 	.word	0x001e0003
    51c4:	001f0003 	.word	0x001f0003
    51c8:	00080003 	.word	0x00080003
    51cc:	00090003 	.word	0x00090003
    51d0:	000a0003 	.word	0x000a0003
    51d4:	000b0003 	.word	0x000b0003
    51d8:	00100003 	.word	0x00100003
    51dc:	00110003 	.word	0x00110003
    51e0:	00120003 	.word	0x00120003
    51e4:	00130003 	.word	0x00130003
    51e8:	000c0003 	.word	0x000c0003
    51ec:	000d0003 	.word	0x000d0003
    51f0:	000e0003 	.word	0x000e0003
    51f4:	000f0003 	.word	0x000f0003
    51f8:	00160003 	.word	0x00160003
    51fc:	00170003 	.word	0x00170003
    5200:	00180003 	.word	0x00180003
    5204:	00190003 	.word	0x00190003

00005208 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5208:	b590      	push	{r4, r7, lr}
    520a:	b08b      	sub	sp, #44	; 0x2c
    520c:	af00      	add	r7, sp, #0
    520e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5210:	1c3b      	adds	r3, r7, #0
    5212:	330c      	adds	r3, #12
    5214:	4a0e      	ldr	r2, [pc, #56]	; (5250 <_sercom_get_sercom_inst_index+0x48>)
    5216:	ca13      	ldmia	r2!, {r0, r1, r4}
    5218:	c313      	stmia	r3!, {r0, r1, r4}
    521a:	ca13      	ldmia	r2!, {r0, r1, r4}
    521c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    521e:	2300      	movs	r3, #0
    5220:	627b      	str	r3, [r7, #36]	; 0x24
    5222:	e00d      	b.n	5240 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5224:	687a      	ldr	r2, [r7, #4]
    5226:	1c3b      	adds	r3, r7, #0
    5228:	330c      	adds	r3, #12
    522a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    522c:	0089      	lsls	r1, r1, #2
    522e:	58cb      	ldr	r3, [r1, r3]
    5230:	429a      	cmp	r2, r3
    5232:	d102      	bne.n	523a <_sercom_get_sercom_inst_index+0x32>
			return i;
    5234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5236:	b2db      	uxtb	r3, r3
    5238:	e006      	b.n	5248 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    523c:	3301      	adds	r3, #1
    523e:	627b      	str	r3, [r7, #36]	; 0x24
    5240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5242:	2b05      	cmp	r3, #5
    5244:	d9ee      	bls.n	5224 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5246:	2300      	movs	r3, #0
}
    5248:	1c18      	adds	r0, r3, #0
    524a:	46bd      	mov	sp, r7
    524c:	b00b      	add	sp, #44	; 0x2c
    524e:	bd90      	pop	{r4, r7, pc}
    5250:	0000b2b0 	.word	0x0000b2b0

00005254 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    5254:	b580      	push	{r7, lr}
    5256:	b082      	sub	sp, #8
    5258:	af00      	add	r7, sp, #0
    525a:	1c02      	adds	r2, r0, #0
    525c:	1dfb      	adds	r3, r7, #7
    525e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    5260:	46bd      	mov	sp, r7
    5262:	b002      	add	sp, #8
    5264:	bd80      	pop	{r7, pc}
    5266:	46c0      	nop			; (mov r8, r8)

00005268 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5268:	b580      	push	{r7, lr}
    526a:	b084      	sub	sp, #16
    526c:	af00      	add	r7, sp, #0
    526e:	1c02      	adds	r2, r0, #0
    5270:	6039      	str	r1, [r7, #0]
    5272:	1dfb      	adds	r3, r7, #7
    5274:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    5276:	4b13      	ldr	r3, [pc, #76]	; (52c4 <_sercom_set_handler+0x5c>)
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	2201      	movs	r2, #1
    527c:	4053      	eors	r3, r2
    527e:	b2db      	uxtb	r3, r3
    5280:	2b00      	cmp	r3, #0
    5282:	d015      	beq.n	52b0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5284:	2300      	movs	r3, #0
    5286:	60fb      	str	r3, [r7, #12]
    5288:	e00c      	b.n	52a4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    528a:	4b0f      	ldr	r3, [pc, #60]	; (52c8 <_sercom_set_handler+0x60>)
    528c:	68fa      	ldr	r2, [r7, #12]
    528e:	0092      	lsls	r2, r2, #2
    5290:	490e      	ldr	r1, [pc, #56]	; (52cc <_sercom_set_handler+0x64>)
    5292:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    5294:	4b0e      	ldr	r3, [pc, #56]	; (52d0 <_sercom_set_handler+0x68>)
    5296:	68fa      	ldr	r2, [r7, #12]
    5298:	0092      	lsls	r2, r2, #2
    529a:	2100      	movs	r1, #0
    529c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    529e:	68fb      	ldr	r3, [r7, #12]
    52a0:	3301      	adds	r3, #1
    52a2:	60fb      	str	r3, [r7, #12]
    52a4:	68fb      	ldr	r3, [r7, #12]
    52a6:	2b05      	cmp	r3, #5
    52a8:	d9ef      	bls.n	528a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    52aa:	4b06      	ldr	r3, [pc, #24]	; (52c4 <_sercom_set_handler+0x5c>)
    52ac:	2201      	movs	r2, #1
    52ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    52b0:	1dfb      	adds	r3, r7, #7
    52b2:	781a      	ldrb	r2, [r3, #0]
    52b4:	4b04      	ldr	r3, [pc, #16]	; (52c8 <_sercom_set_handler+0x60>)
    52b6:	0092      	lsls	r2, r2, #2
    52b8:	6839      	ldr	r1, [r7, #0]
    52ba:	50d1      	str	r1, [r2, r3]
}
    52bc:	46bd      	mov	sp, r7
    52be:	b004      	add	sp, #16
    52c0:	bd80      	pop	{r7, pc}
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	20006c44 	.word	0x20006c44
    52c8:	20006c48 	.word	0x20006c48
    52cc:	00005255 	.word	0x00005255
    52d0:	20006e0c 	.word	0x20006e0c

000052d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    52d4:	b590      	push	{r4, r7, lr}
    52d6:	b085      	sub	sp, #20
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    52dc:	1c3a      	adds	r2, r7, #0
    52de:	3208      	adds	r2, #8
    52e0:	4b0e      	ldr	r3, [pc, #56]	; (531c <_sercom_get_interrupt_vector+0x48>)
    52e2:	1c11      	adds	r1, r2, #0
    52e4:	1c1a      	adds	r2, r3, #0
    52e6:	2306      	movs	r3, #6
    52e8:	1c08      	adds	r0, r1, #0
    52ea:	1c11      	adds	r1, r2, #0
    52ec:	1c1a      	adds	r2, r3, #0
    52ee:	4b0c      	ldr	r3, [pc, #48]	; (5320 <_sercom_get_interrupt_vector+0x4c>)
    52f0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    52f2:	1c3c      	adds	r4, r7, #0
    52f4:	340f      	adds	r4, #15
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	1c18      	adds	r0, r3, #0
    52fa:	4b0a      	ldr	r3, [pc, #40]	; (5324 <_sercom_get_interrupt_vector+0x50>)
    52fc:	4798      	blx	r3
    52fe:	1c03      	adds	r3, r0, #0
    5300:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5302:	1c3b      	adds	r3, r7, #0
    5304:	330f      	adds	r3, #15
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	1c3a      	adds	r2, r7, #0
    530a:	3208      	adds	r2, #8
    530c:	5cd3      	ldrb	r3, [r2, r3]
    530e:	b2db      	uxtb	r3, r3
    5310:	b25b      	sxtb	r3, r3
}
    5312:	1c18      	adds	r0, r3, #0
    5314:	46bd      	mov	sp, r7
    5316:	b005      	add	sp, #20
    5318:	bd90      	pop	{r4, r7, pc}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	0000b2c8 	.word	0x0000b2c8
    5320:	0000b0ad 	.word	0x0000b0ad
    5324:	00005209 	.word	0x00005209

00005328 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5328:	b580      	push	{r7, lr}
    532a:	af00      	add	r7, sp, #0
    532c:	4b02      	ldr	r3, [pc, #8]	; (5338 <SERCOM0_Handler+0x10>)
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	2000      	movs	r0, #0
    5332:	4798      	blx	r3
    5334:	46bd      	mov	sp, r7
    5336:	bd80      	pop	{r7, pc}
    5338:	20006c48 	.word	0x20006c48

0000533c <SERCOM1_Handler>:
    533c:	b580      	push	{r7, lr}
    533e:	af00      	add	r7, sp, #0
    5340:	4b02      	ldr	r3, [pc, #8]	; (534c <SERCOM1_Handler+0x10>)
    5342:	685b      	ldr	r3, [r3, #4]
    5344:	2001      	movs	r0, #1
    5346:	4798      	blx	r3
    5348:	46bd      	mov	sp, r7
    534a:	bd80      	pop	{r7, pc}
    534c:	20006c48 	.word	0x20006c48

00005350 <SERCOM2_Handler>:
    5350:	b580      	push	{r7, lr}
    5352:	af00      	add	r7, sp, #0
    5354:	4b02      	ldr	r3, [pc, #8]	; (5360 <SERCOM2_Handler+0x10>)
    5356:	689b      	ldr	r3, [r3, #8]
    5358:	2002      	movs	r0, #2
    535a:	4798      	blx	r3
    535c:	46bd      	mov	sp, r7
    535e:	bd80      	pop	{r7, pc}
    5360:	20006c48 	.word	0x20006c48

00005364 <SERCOM3_Handler>:
    5364:	b580      	push	{r7, lr}
    5366:	af00      	add	r7, sp, #0
    5368:	4b02      	ldr	r3, [pc, #8]	; (5374 <SERCOM3_Handler+0x10>)
    536a:	68db      	ldr	r3, [r3, #12]
    536c:	2003      	movs	r0, #3
    536e:	4798      	blx	r3
    5370:	46bd      	mov	sp, r7
    5372:	bd80      	pop	{r7, pc}
    5374:	20006c48 	.word	0x20006c48

00005378 <SERCOM4_Handler>:
    5378:	b580      	push	{r7, lr}
    537a:	af00      	add	r7, sp, #0
    537c:	4b02      	ldr	r3, [pc, #8]	; (5388 <SERCOM4_Handler+0x10>)
    537e:	691b      	ldr	r3, [r3, #16]
    5380:	2004      	movs	r0, #4
    5382:	4798      	blx	r3
    5384:	46bd      	mov	sp, r7
    5386:	bd80      	pop	{r7, pc}
    5388:	20006c48 	.word	0x20006c48

0000538c <SERCOM5_Handler>:
    538c:	b580      	push	{r7, lr}
    538e:	af00      	add	r7, sp, #0
    5390:	4b02      	ldr	r3, [pc, #8]	; (539c <SERCOM5_Handler+0x10>)
    5392:	695b      	ldr	r3, [r3, #20]
    5394:	2005      	movs	r0, #5
    5396:	4798      	blx	r3
    5398:	46bd      	mov	sp, r7
    539a:	bd80      	pop	{r7, pc}
    539c:	20006c48 	.word	0x20006c48

000053a0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	2200      	movs	r2, #0
    53ac:	701a      	strb	r2, [r3, #0]
}
    53ae:	46bd      	mov	sp, r7
    53b0:	b002      	add	sp, #8
    53b2:	bd80      	pop	{r7, pc}

000053b4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b082      	sub	sp, #8
    53b8:	af00      	add	r7, sp, #0
    53ba:	1c02      	adds	r2, r0, #0
    53bc:	6039      	str	r1, [r7, #0]
    53be:	1dfb      	adds	r3, r7, #7
    53c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    53c2:	1dfb      	adds	r3, r7, #7
    53c4:	781b      	ldrb	r3, [r3, #0]
    53c6:	2b01      	cmp	r3, #1
    53c8:	d00a      	beq.n	53e0 <system_apb_clock_set_mask+0x2c>
    53ca:	2b02      	cmp	r3, #2
    53cc:	d00f      	beq.n	53ee <system_apb_clock_set_mask+0x3a>
    53ce:	2b00      	cmp	r3, #0
    53d0:	d114      	bne.n	53fc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    53d2:	4b0e      	ldr	r3, [pc, #56]	; (540c <system_apb_clock_set_mask+0x58>)
    53d4:	4a0d      	ldr	r2, [pc, #52]	; (540c <system_apb_clock_set_mask+0x58>)
    53d6:	6991      	ldr	r1, [r2, #24]
    53d8:	683a      	ldr	r2, [r7, #0]
    53da:	430a      	orrs	r2, r1
    53dc:	619a      	str	r2, [r3, #24]
			break;
    53de:	e00f      	b.n	5400 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    53e0:	4b0a      	ldr	r3, [pc, #40]	; (540c <system_apb_clock_set_mask+0x58>)
    53e2:	4a0a      	ldr	r2, [pc, #40]	; (540c <system_apb_clock_set_mask+0x58>)
    53e4:	69d1      	ldr	r1, [r2, #28]
    53e6:	683a      	ldr	r2, [r7, #0]
    53e8:	430a      	orrs	r2, r1
    53ea:	61da      	str	r2, [r3, #28]
			break;
    53ec:	e008      	b.n	5400 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    53ee:	4b07      	ldr	r3, [pc, #28]	; (540c <system_apb_clock_set_mask+0x58>)
    53f0:	4a06      	ldr	r2, [pc, #24]	; (540c <system_apb_clock_set_mask+0x58>)
    53f2:	6a11      	ldr	r1, [r2, #32]
    53f4:	683a      	ldr	r2, [r7, #0]
    53f6:	430a      	orrs	r2, r1
    53f8:	621a      	str	r2, [r3, #32]
			break;
    53fa:	e001      	b.n	5400 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    53fc:	2317      	movs	r3, #23
    53fe:	e000      	b.n	5402 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5400:	2300      	movs	r3, #0
}
    5402:	1c18      	adds	r0, r3, #0
    5404:	46bd      	mov	sp, r7
    5406:	b002      	add	sp, #8
    5408:	bd80      	pop	{r7, pc}
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	40000400 	.word	0x40000400

00005410 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5410:	b580      	push	{r7, lr}
    5412:	b082      	sub	sp, #8
    5414:	af00      	add	r7, sp, #0
    5416:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	2280      	movs	r2, #128	; 0x80
    541c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	2200      	movs	r2, #0
    5422:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5424:	687b      	ldr	r3, [r7, #4]
    5426:	2201      	movs	r2, #1
    5428:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    542a:	687b      	ldr	r3, [r7, #4]
    542c:	2200      	movs	r2, #0
    542e:	70da      	strb	r2, [r3, #3]
}
    5430:	46bd      	mov	sp, r7
    5432:	b002      	add	sp, #8
    5434:	bd80      	pop	{r7, pc}
    5436:	46c0      	nop			; (mov r8, r8)

00005438 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5438:	b580      	push	{r7, lr}
    543a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    543c:	4b05      	ldr	r3, [pc, #20]	; (5454 <system_is_debugger_present+0x1c>)
    543e:	789b      	ldrb	r3, [r3, #2]
    5440:	b2db      	uxtb	r3, r3
    5442:	1c1a      	adds	r2, r3, #0
    5444:	2302      	movs	r3, #2
    5446:	4013      	ands	r3, r2
    5448:	1e5a      	subs	r2, r3, #1
    544a:	4193      	sbcs	r3, r2
    544c:	b2db      	uxtb	r3, r3
}
    544e:	1c18      	adds	r0, r3, #0
    5450:	46bd      	mov	sp, r7
    5452:	bd80      	pop	{r7, pc}
    5454:	41002000 	.word	0x41002000

00005458 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5458:	b580      	push	{r7, lr}
    545a:	b084      	sub	sp, #16
    545c:	af00      	add	r7, sp, #0
    545e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5466:	68fb      	ldr	r3, [r7, #12]
    5468:	69db      	ldr	r3, [r3, #28]
    546a:	1e5a      	subs	r2, r3, #1
    546c:	4193      	sbcs	r3, r2
    546e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5470:	1c18      	adds	r0, r3, #0
    5472:	46bd      	mov	sp, r7
    5474:	b004      	add	sp, #16
    5476:	bd80      	pop	{r7, pc}

00005478 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5478:	b580      	push	{r7, lr}
    547a:	b082      	sub	sp, #8
    547c:	af00      	add	r7, sp, #0
    547e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5480:	46c0      	nop			; (mov r8, r8)
    5482:	687b      	ldr	r3, [r7, #4]
    5484:	1c18      	adds	r0, r3, #0
    5486:	4b04      	ldr	r3, [pc, #16]	; (5498 <_usart_wait_for_sync+0x20>)
    5488:	4798      	blx	r3
    548a:	1c03      	adds	r3, r0, #0
    548c:	2b00      	cmp	r3, #0
    548e:	d1f8      	bne.n	5482 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5490:	46bd      	mov	sp, r7
    5492:	b002      	add	sp, #8
    5494:	bd80      	pop	{r7, pc}
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	00005459 	.word	0x00005459

0000549c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    549c:	b5b0      	push	{r4, r5, r7, lr}
    549e:	b08c      	sub	sp, #48	; 0x30
    54a0:	af02      	add	r7, sp, #8
    54a2:	6078      	str	r0, [r7, #4]
    54a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	1c18      	adds	r0, r3, #0
    54b2:	4bad      	ldr	r3, [pc, #692]	; (5768 <_usart_set_config+0x2cc>)
    54b4:	4798      	blx	r3
    54b6:	1c03      	adds	r3, r0, #0
    54b8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    54ba:	697b      	ldr	r3, [r7, #20]
    54bc:	3314      	adds	r3, #20
    54be:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    54c0:	2300      	movs	r3, #0
    54c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    54c4:	2300      	movs	r3, #0
    54c6:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    54c8:	1c3b      	adds	r3, r7, #0
    54ca:	330e      	adds	r3, #14
    54cc:	2200      	movs	r2, #0
    54ce:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    54d0:	1c3b      	adds	r3, r7, #0
    54d2:	331f      	adds	r3, #31
    54d4:	2200      	movs	r2, #0
    54d6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    54d8:	1c3b      	adds	r3, r7, #0
    54da:	331e      	adds	r3, #30
    54dc:	2210      	movs	r2, #16
    54de:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    54e0:	683b      	ldr	r3, [r7, #0]
    54e2:	8a1b      	ldrh	r3, [r3, #16]
    54e4:	2280      	movs	r2, #128	; 0x80
    54e6:	01d2      	lsls	r2, r2, #7
    54e8:	4293      	cmp	r3, r2
    54ea:	d01c      	beq.n	5526 <_usart_set_config+0x8a>
    54ec:	2280      	movs	r2, #128	; 0x80
    54ee:	01d2      	lsls	r2, r2, #7
    54f0:	4293      	cmp	r3, r2
    54f2:	dc06      	bgt.n	5502 <_usart_set_config+0x66>
    54f4:	2b00      	cmp	r3, #0
    54f6:	d00d      	beq.n	5514 <_usart_set_config+0x78>
    54f8:	2280      	movs	r2, #128	; 0x80
    54fa:	0192      	lsls	r2, r2, #6
    54fc:	4293      	cmp	r3, r2
    54fe:	d024      	beq.n	554a <_usart_set_config+0xae>
    5500:	e035      	b.n	556e <_usart_set_config+0xd2>
    5502:	22c0      	movs	r2, #192	; 0xc0
    5504:	01d2      	lsls	r2, r2, #7
    5506:	4293      	cmp	r3, r2
    5508:	d028      	beq.n	555c <_usart_set_config+0xc0>
    550a:	2280      	movs	r2, #128	; 0x80
    550c:	0212      	lsls	r2, r2, #8
    550e:	4293      	cmp	r3, r2
    5510:	d012      	beq.n	5538 <_usart_set_config+0x9c>
    5512:	e02c      	b.n	556e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5514:	1c3b      	adds	r3, r7, #0
    5516:	331f      	adds	r3, #31
    5518:	2200      	movs	r2, #0
    551a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    551c:	1c3b      	adds	r3, r7, #0
    551e:	331e      	adds	r3, #30
    5520:	2210      	movs	r2, #16
    5522:	701a      	strb	r2, [r3, #0]
			break;
    5524:	e023      	b.n	556e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5526:	1c3b      	adds	r3, r7, #0
    5528:	331f      	adds	r3, #31
    552a:	2200      	movs	r2, #0
    552c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    552e:	1c3b      	adds	r3, r7, #0
    5530:	331e      	adds	r3, #30
    5532:	2208      	movs	r2, #8
    5534:	701a      	strb	r2, [r3, #0]
			break;
    5536:	e01a      	b.n	556e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5538:	1c3b      	adds	r3, r7, #0
    553a:	331f      	adds	r3, #31
    553c:	2200      	movs	r2, #0
    553e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5540:	1c3b      	adds	r3, r7, #0
    5542:	331e      	adds	r3, #30
    5544:	2203      	movs	r2, #3
    5546:	701a      	strb	r2, [r3, #0]
			break;
    5548:	e011      	b.n	556e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    554a:	1c3b      	adds	r3, r7, #0
    554c:	331f      	adds	r3, #31
    554e:	2201      	movs	r2, #1
    5550:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5552:	1c3b      	adds	r3, r7, #0
    5554:	331e      	adds	r3, #30
    5556:	2210      	movs	r2, #16
    5558:	701a      	strb	r2, [r3, #0]
			break;
    555a:	e008      	b.n	556e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    555c:	1c3b      	adds	r3, r7, #0
    555e:	331f      	adds	r3, #31
    5560:	2201      	movs	r2, #1
    5562:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5564:	1c3b      	adds	r3, r7, #0
    5566:	331e      	adds	r3, #30
    5568:	2208      	movs	r2, #8
    556a:	701a      	strb	r2, [r3, #0]
			break;
    556c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    556e:	683b      	ldr	r3, [r7, #0]
    5570:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5572:	683b      	ldr	r3, [r7, #0]
    5574:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5576:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5578:	683b      	ldr	r3, [r7, #0]
    557a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    557c:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    557e:	683b      	ldr	r3, [r7, #0]
    5580:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5582:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5584:	683b      	ldr	r3, [r7, #0]
    5586:	7e1b      	ldrb	r3, [r3, #24]
    5588:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    558a:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    558c:	6839      	ldr	r1, [r7, #0]
    558e:	2326      	movs	r3, #38	; 0x26
    5590:	5ccb      	ldrb	r3, [r1, r3]
    5592:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5594:	4313      	orrs	r3, r2
    5596:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    5598:	1c3b      	adds	r3, r7, #0
    559a:	331d      	adds	r3, #29
    559c:	2200      	movs	r2, #0
    559e:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    55a0:	683b      	ldr	r3, [r7, #0]
    55a2:	685b      	ldr	r3, [r3, #4]
    55a4:	2b00      	cmp	r3, #0
    55a6:	d020      	beq.n	55ea <_usart_set_config+0x14e>
    55a8:	2280      	movs	r2, #128	; 0x80
    55aa:	0552      	lsls	r2, r2, #21
    55ac:	4293      	cmp	r3, r2
    55ae:	d14e      	bne.n	564e <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    55b0:	683a      	ldr	r2, [r7, #0]
    55b2:	2327      	movs	r3, #39	; 0x27
    55b4:	5cd3      	ldrb	r3, [r2, r3]
    55b6:	2201      	movs	r2, #1
    55b8:	4053      	eors	r3, r2
    55ba:	b2db      	uxtb	r3, r3
    55bc:	2b00      	cmp	r3, #0
    55be:	d013      	beq.n	55e8 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    55c0:	683b      	ldr	r3, [r7, #0]
    55c2:	6a1d      	ldr	r5, [r3, #32]
    55c4:	693b      	ldr	r3, [r7, #16]
    55c6:	b2db      	uxtb	r3, r3
    55c8:	1c18      	adds	r0, r3, #0
    55ca:	4b68      	ldr	r3, [pc, #416]	; (576c <_usart_set_config+0x2d0>)
    55cc:	4798      	blx	r3
    55ce:	1c02      	adds	r2, r0, #0
    55d0:	1c3c      	adds	r4, r7, #0
    55d2:	341d      	adds	r4, #29
    55d4:	1c3b      	adds	r3, r7, #0
    55d6:	330e      	adds	r3, #14
    55d8:	1c28      	adds	r0, r5, #0
    55da:	1c11      	adds	r1, r2, #0
    55dc:	1c1a      	adds	r2, r3, #0
    55de:	4b64      	ldr	r3, [pc, #400]	; (5770 <_usart_set_config+0x2d4>)
    55e0:	4798      	blx	r3
    55e2:	1c03      	adds	r3, r0, #0
    55e4:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    55e6:	e032      	b.n	564e <_usart_set_config+0x1b2>
    55e8:	e031      	b.n	564e <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    55ea:	683a      	ldr	r2, [r7, #0]
    55ec:	2327      	movs	r3, #39	; 0x27
    55ee:	5cd3      	ldrb	r3, [r2, r3]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d013      	beq.n	561c <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    55f4:	683b      	ldr	r3, [r7, #0]
    55f6:	6a18      	ldr	r0, [r3, #32]
    55f8:	683b      	ldr	r3, [r7, #0]
    55fa:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    55fc:	1c3c      	adds	r4, r7, #0
    55fe:	341d      	adds	r4, #29
    5600:	1c3a      	adds	r2, r7, #0
    5602:	320e      	adds	r2, #14
    5604:	1c3b      	adds	r3, r7, #0
    5606:	331f      	adds	r3, #31
    5608:	781b      	ldrb	r3, [r3, #0]
    560a:	1c3d      	adds	r5, r7, #0
    560c:	351e      	adds	r5, #30
    560e:	782d      	ldrb	r5, [r5, #0]
    5610:	9500      	str	r5, [sp, #0]
    5612:	4d58      	ldr	r5, [pc, #352]	; (5774 <_usart_set_config+0x2d8>)
    5614:	47a8      	blx	r5
    5616:	1c03      	adds	r3, r0, #0
    5618:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    561a:	e017      	b.n	564c <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    561c:	683b      	ldr	r3, [r7, #0]
    561e:	6a1d      	ldr	r5, [r3, #32]
    5620:	693b      	ldr	r3, [r7, #16]
    5622:	b2db      	uxtb	r3, r3
    5624:	1c18      	adds	r0, r3, #0
    5626:	4b51      	ldr	r3, [pc, #324]	; (576c <_usart_set_config+0x2d0>)
    5628:	4798      	blx	r3
    562a:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    562c:	1c3c      	adds	r4, r7, #0
    562e:	341d      	adds	r4, #29
    5630:	1c3a      	adds	r2, r7, #0
    5632:	320e      	adds	r2, #14
    5634:	1c3b      	adds	r3, r7, #0
    5636:	331f      	adds	r3, #31
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	1c38      	adds	r0, r7, #0
    563c:	301e      	adds	r0, #30
    563e:	7800      	ldrb	r0, [r0, #0]
    5640:	9000      	str	r0, [sp, #0]
    5642:	1c28      	adds	r0, r5, #0
    5644:	4d4b      	ldr	r5, [pc, #300]	; (5774 <_usart_set_config+0x2d8>)
    5646:	47a8      	blx	r5
    5648:	1c03      	adds	r3, r0, #0
    564a:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    564c:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    564e:	1c3b      	adds	r3, r7, #0
    5650:	331d      	adds	r3, #29
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	2b00      	cmp	r3, #0
    5656:	d003      	beq.n	5660 <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    5658:	1c3b      	adds	r3, r7, #0
    565a:	331d      	adds	r3, #29
    565c:	781b      	ldrb	r3, [r3, #0]
    565e:	e07e      	b.n	575e <_usart_set_config+0x2c2>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5660:	683b      	ldr	r3, [r7, #0]
    5662:	7e5b      	ldrb	r3, [r3, #25]
    5664:	2b00      	cmp	r3, #0
    5666:	d003      	beq.n	5670 <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5668:	683b      	ldr	r3, [r7, #0]
    566a:	7e9a      	ldrb	r2, [r3, #26]
    566c:	69bb      	ldr	r3, [r7, #24]
    566e:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	1c18      	adds	r0, r3, #0
    5674:	4b40      	ldr	r3, [pc, #256]	; (5778 <_usart_set_config+0x2dc>)
    5676:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5678:	1c3b      	adds	r3, r7, #0
    567a:	330e      	adds	r3, #14
    567c:	881a      	ldrh	r2, [r3, #0]
    567e:	69bb      	ldr	r3, [r7, #24]
    5680:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    5682:	683b      	ldr	r3, [r7, #0]
    5684:	685b      	ldr	r3, [r3, #4]
    5686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5688:	4313      	orrs	r3, r2
    568a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    568c:	683a      	ldr	r2, [r7, #0]
    568e:	2327      	movs	r3, #39	; 0x27
    5690:	5cd3      	ldrb	r3, [r2, r3]
    5692:	2201      	movs	r2, #1
    5694:	4053      	eors	r3, r2
    5696:	b2db      	uxtb	r3, r3
    5698:	2b00      	cmp	r3, #0
    569a:	d003      	beq.n	56a4 <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    569e:	2204      	movs	r2, #4
    56a0:	4313      	orrs	r3, r2
    56a2:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    56a4:	683b      	ldr	r3, [r7, #0]
    56a6:	7a9a      	ldrb	r2, [r3, #10]
    56a8:	683b      	ldr	r3, [r7, #0]
    56aa:	7adb      	ldrb	r3, [r3, #11]
    56ac:	4313      	orrs	r3, r2
    56ae:	b2db      	uxtb	r3, r3
    56b0:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	7e5b      	ldrb	r3, [r3, #25]
    56b6:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    56b8:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	7f1b      	ldrb	r3, [r3, #28]
    56be:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    56c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    56c2:	683b      	ldr	r3, [r7, #0]
    56c4:	7f5b      	ldrb	r3, [r3, #29]
    56c6:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    56c8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    56ca:	6839      	ldr	r1, [r7, #0]
    56cc:	2324      	movs	r3, #36	; 0x24
    56ce:	5ccb      	ldrb	r3, [r1, r3]
    56d0:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    56d2:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    56d4:	6839      	ldr	r1, [r7, #0]
    56d6:	2325      	movs	r3, #37	; 0x25
    56d8:	5ccb      	ldrb	r3, [r1, r3]
    56da:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    56dc:	4313      	orrs	r3, r2
    56de:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    56e0:	683b      	ldr	r3, [r7, #0]
    56e2:	891b      	ldrh	r3, [r3, #8]
    56e4:	2bff      	cmp	r3, #255	; 0xff
    56e6:	d014      	beq.n	5712 <_usart_set_config+0x276>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    56e8:	683b      	ldr	r3, [r7, #0]
    56ea:	7edb      	ldrb	r3, [r3, #27]
    56ec:	2b00      	cmp	r3, #0
    56ee:	d005      	beq.n	56fc <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    56f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56f2:	22a0      	movs	r2, #160	; 0xa0
    56f4:	04d2      	lsls	r2, r2, #19
    56f6:	4313      	orrs	r3, r2
    56f8:	627b      	str	r3, [r7, #36]	; 0x24
    56fa:	e004      	b.n	5706 <_usart_set_config+0x26a>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    56fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    56fe:	2280      	movs	r2, #128	; 0x80
    5700:	0452      	lsls	r2, r2, #17
    5702:	4313      	orrs	r3, r2
    5704:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    5706:	683b      	ldr	r3, [r7, #0]
    5708:	891b      	ldrh	r3, [r3, #8]
    570a:	6a3a      	ldr	r2, [r7, #32]
    570c:	4313      	orrs	r3, r2
    570e:	623b      	str	r3, [r7, #32]
    5710:	e008      	b.n	5724 <_usart_set_config+0x288>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5712:	683b      	ldr	r3, [r7, #0]
    5714:	7edb      	ldrb	r3, [r3, #27]
    5716:	2b00      	cmp	r3, #0
    5718:	d004      	beq.n	5724 <_usart_set_config+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    571c:	2280      	movs	r2, #128	; 0x80
    571e:	04d2      	lsls	r2, r2, #19
    5720:	4313      	orrs	r3, r2
    5722:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5724:	683a      	ldr	r2, [r7, #0]
    5726:	232c      	movs	r3, #44	; 0x2c
    5728:	5cd3      	ldrb	r3, [r2, r3]
    572a:	2b00      	cmp	r3, #0
    572c:	d104      	bne.n	5738 <_usart_set_config+0x29c>
    572e:	4b13      	ldr	r3, [pc, #76]	; (577c <_usart_set_config+0x2e0>)
    5730:	4798      	blx	r3
    5732:	1c03      	adds	r3, r0, #0
    5734:	2b00      	cmp	r3, #0
    5736:	d003      	beq.n	5740 <_usart_set_config+0x2a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    573a:	2280      	movs	r2, #128	; 0x80
    573c:	4313      	orrs	r3, r2
    573e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5740:	687b      	ldr	r3, [r7, #4]
    5742:	1c18      	adds	r0, r3, #0
    5744:	4b0c      	ldr	r3, [pc, #48]	; (5778 <_usart_set_config+0x2dc>)
    5746:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5748:	69bb      	ldr	r3, [r7, #24]
    574a:	6a3a      	ldr	r2, [r7, #32]
    574c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    574e:	687b      	ldr	r3, [r7, #4]
    5750:	1c18      	adds	r0, r3, #0
    5752:	4b09      	ldr	r3, [pc, #36]	; (5778 <_usart_set_config+0x2dc>)
    5754:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5756:	69bb      	ldr	r3, [r7, #24]
    5758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    575a:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    575c:	2300      	movs	r3, #0
}
    575e:	1c18      	adds	r0, r3, #0
    5760:	46bd      	mov	sp, r7
    5762:	b00a      	add	sp, #40	; 0x28
    5764:	bdb0      	pop	{r4, r5, r7, pc}
    5766:	46c0      	nop			; (mov r8, r8)
    5768:	00005209 	.word	0x00005209
    576c:	00006a81 	.word	0x00006a81
    5770:	00004d7d 	.word	0x00004d7d
    5774:	00004df9 	.word	0x00004df9
    5778:	00005479 	.word	0x00005479
    577c:	00005439 	.word	0x00005439

00005780 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5780:	b590      	push	{r4, r7, lr}
    5782:	b093      	sub	sp, #76	; 0x4c
    5784:	af00      	add	r7, sp, #0
    5786:	60f8      	str	r0, [r7, #12]
    5788:	60b9      	str	r1, [r7, #8]
    578a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    578c:	1c3b      	adds	r3, r7, #0
    578e:	333b      	adds	r3, #59	; 0x3b
    5790:	2200      	movs	r2, #0
    5792:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5794:	68fb      	ldr	r3, [r7, #12]
    5796:	68ba      	ldr	r2, [r7, #8]
    5798:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    57a0:	68fb      	ldr	r3, [r7, #12]
    57a2:	681b      	ldr	r3, [r3, #0]
    57a4:	1c18      	adds	r0, r3, #0
    57a6:	4b86      	ldr	r3, [pc, #536]	; (59c0 <usart_init+0x240>)
    57a8:	4798      	blx	r3
    57aa:	1c03      	adds	r3, r0, #0
    57ac:	633b      	str	r3, [r7, #48]	; 0x30
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    57ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    57b0:	3302      	adds	r3, #2
    57b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    57b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    57b6:	3314      	adds	r3, #20
    57b8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    57ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    57bc:	681a      	ldr	r2, [r3, #0]
    57be:	2301      	movs	r3, #1
    57c0:	4013      	ands	r3, r2
    57c2:	d001      	beq.n	57c8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    57c4:	2305      	movs	r3, #5
    57c6:	e0f6      	b.n	59b6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    57c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    57ca:	681a      	ldr	r2, [r3, #0]
    57cc:	2302      	movs	r3, #2
    57ce:	4013      	ands	r3, r2
    57d0:	d001      	beq.n	57d6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    57d2:	231c      	movs	r3, #28
    57d4:	e0ef      	b.n	59b6 <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    57d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    57d8:	2201      	movs	r2, #1
    57da:	1c11      	adds	r1, r2, #0
    57dc:	4099      	lsls	r1, r3
    57de:	1c0b      	adds	r3, r1, #0
    57e0:	2002      	movs	r0, #2
    57e2:	1c19      	adds	r1, r3, #0
    57e4:	4b77      	ldr	r3, [pc, #476]	; (59c4 <usart_init+0x244>)
    57e6:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    57e8:	1c3b      	adds	r3, r7, #0
    57ea:	3324      	adds	r3, #36	; 0x24
    57ec:	1c18      	adds	r0, r3, #0
    57ee:	4b76      	ldr	r3, [pc, #472]	; (59c8 <usart_init+0x248>)
    57f0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    57f2:	687a      	ldr	r2, [r7, #4]
    57f4:	232d      	movs	r3, #45	; 0x2d
    57f6:	5cd2      	ldrb	r2, [r2, r3]
    57f8:	1c3b      	adds	r3, r7, #0
    57fa:	3324      	adds	r3, #36	; 0x24
    57fc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    57fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5800:	b2da      	uxtb	r2, r3
    5802:	1c3b      	adds	r3, r7, #0
    5804:	3324      	adds	r3, #36	; 0x24
    5806:	1c10      	adds	r0, r2, #0
    5808:	1c19      	adds	r1, r3, #0
    580a:	4b70      	ldr	r3, [pc, #448]	; (59cc <usart_init+0x24c>)
    580c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5810:	b2db      	uxtb	r3, r3
    5812:	1c18      	adds	r0, r3, #0
    5814:	4b6e      	ldr	r3, [pc, #440]	; (59d0 <usart_init+0x250>)
    5816:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5818:	687a      	ldr	r2, [r7, #4]
    581a:	232d      	movs	r3, #45	; 0x2d
    581c:	5cd3      	ldrb	r3, [r2, r3]
    581e:	1c18      	adds	r0, r3, #0
    5820:	2100      	movs	r1, #0
    5822:	4b6c      	ldr	r3, [pc, #432]	; (59d4 <usart_init+0x254>)
    5824:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	7ada      	ldrb	r2, [r3, #11]
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    582e:	687a      	ldr	r2, [r7, #4]
    5830:	2324      	movs	r3, #36	; 0x24
    5832:	5cd2      	ldrb	r2, [r2, r3]
    5834:	68fb      	ldr	r3, [r7, #12]
    5836:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5838:	687a      	ldr	r2, [r7, #4]
    583a:	2325      	movs	r3, #37	; 0x25
    583c:	5cd2      	ldrb	r2, [r2, r3]
    583e:	68fb      	ldr	r3, [r7, #12]
    5840:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5842:	687b      	ldr	r3, [r7, #4]
    5844:	7eda      	ldrb	r2, [r3, #27]
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	7f1a      	ldrb	r2, [r3, #28]
    584e:	68fb      	ldr	r3, [r7, #12]
    5850:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5852:	1c3c      	adds	r4, r7, #0
    5854:	343b      	adds	r4, #59	; 0x3b
    5856:	68fa      	ldr	r2, [r7, #12]
    5858:	687b      	ldr	r3, [r7, #4]
    585a:	1c10      	adds	r0, r2, #0
    585c:	1c19      	adds	r1, r3, #0
    585e:	4b5e      	ldr	r3, [pc, #376]	; (59d8 <usart_init+0x258>)
    5860:	4798      	blx	r3
    5862:	1c03      	adds	r3, r0, #0
    5864:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5866:	1c3b      	adds	r3, r7, #0
    5868:	333b      	adds	r3, #59	; 0x3b
    586a:	781b      	ldrb	r3, [r3, #0]
    586c:	2b00      	cmp	r3, #0
    586e:	d003      	beq.n	5878 <usart_init+0xf8>
		return status_code;
    5870:	1c3b      	adds	r3, r7, #0
    5872:	333b      	adds	r3, #59	; 0x3b
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	e09e      	b.n	59b6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5878:	1c3b      	adds	r3, r7, #0
    587a:	3320      	adds	r3, #32
    587c:	1c18      	adds	r0, r3, #0
    587e:	4b57      	ldr	r3, [pc, #348]	; (59dc <usart_init+0x25c>)
    5880:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5882:	1c3b      	adds	r3, r7, #0
    5884:	3320      	adds	r3, #32
    5886:	2200      	movs	r2, #0
    5888:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    588a:	1c3b      	adds	r3, r7, #0
    588c:	3320      	adds	r3, #32
    588e:	2200      	movs	r2, #0
    5890:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5896:	1c3b      	adds	r3, r7, #0
    5898:	3310      	adds	r3, #16
    589a:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    58a0:	1c3b      	adds	r3, r7, #0
    58a2:	3310      	adds	r3, #16
    58a4:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    58aa:	1c3b      	adds	r3, r7, #0
    58ac:	3310      	adds	r3, #16
    58ae:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    58b0:	687b      	ldr	r3, [r7, #4]
    58b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    58b4:	1c3b      	adds	r3, r7, #0
    58b6:	3310      	adds	r3, #16
    58b8:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    58ba:	1c3b      	adds	r3, r7, #0
    58bc:	3347      	adds	r3, #71	; 0x47
    58be:	2200      	movs	r2, #0
    58c0:	701a      	strb	r2, [r3, #0]
    58c2:	e02c      	b.n	591e <usart_init+0x19e>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    58c4:	1c3b      	adds	r3, r7, #0
    58c6:	3347      	adds	r3, #71	; 0x47
    58c8:	781a      	ldrb	r2, [r3, #0]
    58ca:	1c3b      	adds	r3, r7, #0
    58cc:	3310      	adds	r3, #16
    58ce:	0092      	lsls	r2, r2, #2
    58d0:	58d3      	ldr	r3, [r2, r3]
    58d2:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    58d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    58d6:	2b00      	cmp	r3, #0
    58d8:	d109      	bne.n	58ee <usart_init+0x16e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    58da:	68ba      	ldr	r2, [r7, #8]
    58dc:	1c3b      	adds	r3, r7, #0
    58de:	3347      	adds	r3, #71	; 0x47
    58e0:	781b      	ldrb	r3, [r3, #0]
    58e2:	1c10      	adds	r0, r2, #0
    58e4:	1c19      	adds	r1, r3, #0
    58e6:	4b3e      	ldr	r3, [pc, #248]	; (59e0 <usart_init+0x260>)
    58e8:	4798      	blx	r3
    58ea:	1c03      	adds	r3, r0, #0
    58ec:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    58ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    58f0:	3301      	adds	r3, #1
    58f2:	d00d      	beq.n	5910 <usart_init+0x190>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    58f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    58f6:	b2da      	uxtb	r2, r3
    58f8:	1c3b      	adds	r3, r7, #0
    58fa:	3320      	adds	r3, #32
    58fc:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    58fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5900:	0c1b      	lsrs	r3, r3, #16
    5902:	b2da      	uxtb	r2, r3
    5904:	1c3b      	adds	r3, r7, #0
    5906:	3320      	adds	r3, #32
    5908:	1c10      	adds	r0, r2, #0
    590a:	1c19      	adds	r1, r3, #0
    590c:	4b35      	ldr	r3, [pc, #212]	; (59e4 <usart_init+0x264>)
    590e:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5910:	1c3b      	adds	r3, r7, #0
    5912:	3347      	adds	r3, #71	; 0x47
    5914:	781a      	ldrb	r2, [r3, #0]
    5916:	1c3b      	adds	r3, r7, #0
    5918:	3347      	adds	r3, #71	; 0x47
    591a:	3201      	adds	r2, #1
    591c:	701a      	strb	r2, [r3, #0]
    591e:	1c3b      	adds	r3, r7, #0
    5920:	3347      	adds	r3, #71	; 0x47
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	2b03      	cmp	r3, #3
    5926:	d9cd      	bls.n	58c4 <usart_init+0x144>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5928:	2300      	movs	r3, #0
    592a:	63fb      	str	r3, [r7, #60]	; 0x3c
    592c:	e009      	b.n	5942 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    592e:	68fa      	ldr	r2, [r7, #12]
    5930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5932:	3302      	adds	r3, #2
    5934:	009b      	lsls	r3, r3, #2
    5936:	18d3      	adds	r3, r2, r3
    5938:	2200      	movs	r2, #0
    593a:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    593e:	3301      	adds	r3, #1
    5940:	63fb      	str	r3, [r7, #60]	; 0x3c
    5942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5944:	2b05      	cmp	r3, #5
    5946:	d9f2      	bls.n	592e <usart_init+0x1ae>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    5948:	68fb      	ldr	r3, [r7, #12]
    594a:	2200      	movs	r2, #0
    594c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    594e:	68fb      	ldr	r3, [r7, #12]
    5950:	2200      	movs	r2, #0
    5952:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5954:	68fb      	ldr	r3, [r7, #12]
    5956:	2200      	movs	r2, #0
    5958:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    595a:	68fb      	ldr	r3, [r7, #12]
    595c:	2200      	movs	r2, #0
    595e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5960:	68fa      	ldr	r2, [r7, #12]
    5962:	2330      	movs	r3, #48	; 0x30
    5964:	2100      	movs	r1, #0
    5966:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    5968:	68fa      	ldr	r2, [r7, #12]
    596a:	2331      	movs	r3, #49	; 0x31
    596c:	2100      	movs	r1, #0
    596e:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    5970:	68fa      	ldr	r2, [r7, #12]
    5972:	2332      	movs	r3, #50	; 0x32
    5974:	2100      	movs	r1, #0
    5976:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    5978:	68fa      	ldr	r2, [r7, #12]
    597a:	2333      	movs	r3, #51	; 0x33
    597c:	2100      	movs	r1, #0
    597e:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5980:	68fb      	ldr	r3, [r7, #12]
    5982:	681b      	ldr	r3, [r3, #0]
    5984:	1c3c      	adds	r4, r7, #0
    5986:	3427      	adds	r4, #39	; 0x27
    5988:	1c18      	adds	r0, r3, #0
    598a:	4b0d      	ldr	r3, [pc, #52]	; (59c0 <usart_init+0x240>)
    598c:	4798      	blx	r3
    598e:	1c03      	adds	r3, r0, #0
    5990:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5992:	1c3b      	adds	r3, r7, #0
    5994:	3327      	adds	r3, #39	; 0x27
    5996:	781a      	ldrb	r2, [r3, #0]
    5998:	4b13      	ldr	r3, [pc, #76]	; (59e8 <usart_init+0x268>)
    599a:	1c10      	adds	r0, r2, #0
    599c:	1c19      	adds	r1, r3, #0
    599e:	4b13      	ldr	r3, [pc, #76]	; (59ec <usart_init+0x26c>)
    59a0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    59a2:	1c3b      	adds	r3, r7, #0
    59a4:	3327      	adds	r3, #39	; 0x27
    59a6:	781a      	ldrb	r2, [r3, #0]
    59a8:	4b11      	ldr	r3, [pc, #68]	; (59f0 <usart_init+0x270>)
    59aa:	0092      	lsls	r2, r2, #2
    59ac:	68f9      	ldr	r1, [r7, #12]
    59ae:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    59b0:	1c3b      	adds	r3, r7, #0
    59b2:	333b      	adds	r3, #59	; 0x3b
    59b4:	781b      	ldrb	r3, [r3, #0]
}
    59b6:	1c18      	adds	r0, r3, #0
    59b8:	46bd      	mov	sp, r7
    59ba:	b013      	add	sp, #76	; 0x4c
    59bc:	bd90      	pop	{r4, r7, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	00005209 	.word	0x00005209
    59c4:	000053b5 	.word	0x000053b5
    59c8:	000053a1 	.word	0x000053a1
    59cc:	00006965 	.word	0x00006965
    59d0:	000069a5 	.word	0x000069a5
    59d4:	00004fc1 	.word	0x00004fc1
    59d8:	0000549d 	.word	0x0000549d
    59dc:	00005411 	.word	0x00005411
    59e0:	0000504d 	.word	0x0000504d
    59e4:	00006c49 	.word	0x00006c49
    59e8:	00005c0d 	.word	0x00005c0d
    59ec:	00005269 	.word	0x00005269
    59f0:	20006e0c 	.word	0x20006e0c

000059f4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    59f4:	b580      	push	{r7, lr}
    59f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    59f8:	4b01      	ldr	r3, [pc, #4]	; (5a00 <system_interrupt_enter_critical_section+0xc>)
    59fa:	4798      	blx	r3
}
    59fc:	46bd      	mov	sp, r7
    59fe:	bd80      	pop	{r7, pc}
    5a00:	00004439 	.word	0x00004439

00005a04 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5a04:	b580      	push	{r7, lr}
    5a06:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5a08:	4b01      	ldr	r3, [pc, #4]	; (5a10 <system_interrupt_leave_critical_section+0xc>)
    5a0a:	4798      	blx	r3
}
    5a0c:	46bd      	mov	sp, r7
    5a0e:	bd80      	pop	{r7, pc}
    5a10:	00004489 	.word	0x00004489

00005a14 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    5a14:	b580      	push	{r7, lr}
    5a16:	b084      	sub	sp, #16
    5a18:	af00      	add	r7, sp, #0
    5a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5a1c:	687b      	ldr	r3, [r7, #4]
    5a1e:	681b      	ldr	r3, [r3, #0]
    5a20:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5a22:	68fb      	ldr	r3, [r7, #12]
    5a24:	69db      	ldr	r3, [r3, #28]
    5a26:	1e5a      	subs	r2, r3, #1
    5a28:	4193      	sbcs	r3, r2
    5a2a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5a2c:	1c18      	adds	r0, r3, #0
    5a2e:	46bd      	mov	sp, r7
    5a30:	b004      	add	sp, #16
    5a32:	bd80      	pop	{r7, pc}

00005a34 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b082      	sub	sp, #8
    5a38:	af00      	add	r7, sp, #0
    5a3a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    5a3c:	46c0      	nop			; (mov r8, r8)
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	1c18      	adds	r0, r3, #0
    5a42:	4b04      	ldr	r3, [pc, #16]	; (5a54 <_usart_wait_for_sync+0x20>)
    5a44:	4798      	blx	r3
    5a46:	1c03      	adds	r3, r0, #0
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d1f8      	bne.n	5a3e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5a4c:	46bd      	mov	sp, r7
    5a4e:	b002      	add	sp, #8
    5a50:	bd80      	pop	{r7, pc}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	00005a15 	.word	0x00005a15

00005a58 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b086      	sub	sp, #24
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	60f8      	str	r0, [r7, #12]
    5a60:	60b9      	str	r1, [r7, #8]
    5a62:	1dbb      	adds	r3, r7, #6
    5a64:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5a6c:	4b0f      	ldr	r3, [pc, #60]	; (5aac <_usart_write_buffer+0x54>)
    5a6e:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a74:	b29b      	uxth	r3, r3
    5a76:	2b00      	cmp	r3, #0
    5a78:	d003      	beq.n	5a82 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5a7a:	4b0d      	ldr	r3, [pc, #52]	; (5ab0 <_usart_write_buffer+0x58>)
    5a7c:	4798      	blx	r3
		return STATUS_BUSY;
    5a7e:	2305      	movs	r3, #5
    5a80:	e010      	b.n	5aa4 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5a82:	68fb      	ldr	r3, [r7, #12]
    5a84:	1dba      	adds	r2, r7, #6
    5a86:	8812      	ldrh	r2, [r2, #0]
    5a88:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5a8a:	4b09      	ldr	r3, [pc, #36]	; (5ab0 <_usart_write_buffer+0x58>)
    5a8c:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	68ba      	ldr	r2, [r7, #8]
    5a92:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5a94:	68fa      	ldr	r2, [r7, #12]
    5a96:	2333      	movs	r3, #51	; 0x33
    5a98:	2105      	movs	r1, #5
    5a9a:	54d1      	strb	r1, [r2, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5a9c:	697b      	ldr	r3, [r7, #20]
    5a9e:	2201      	movs	r2, #1
    5aa0:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5aa2:	2300      	movs	r3, #0
}
    5aa4:	1c18      	adds	r0, r3, #0
    5aa6:	46bd      	mov	sp, r7
    5aa8:	b006      	add	sp, #24
    5aaa:	bd80      	pop	{r7, pc}
    5aac:	000059f5 	.word	0x000059f5
    5ab0:	00005a05 	.word	0x00005a05

00005ab4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5ab4:	b580      	push	{r7, lr}
    5ab6:	b086      	sub	sp, #24
    5ab8:	af00      	add	r7, sp, #0
    5aba:	60f8      	str	r0, [r7, #12]
    5abc:	60b9      	str	r1, [r7, #8]
    5abe:	1dbb      	adds	r3, r7, #6
    5ac0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ac2:	68fb      	ldr	r3, [r7, #12]
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5ac8:	4b16      	ldr	r3, [pc, #88]	; (5b24 <_usart_read_buffer+0x70>)
    5aca:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5acc:	68fb      	ldr	r3, [r7, #12]
    5ace:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5ad0:	b29b      	uxth	r3, r3
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d003      	beq.n	5ade <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5ad6:	4b14      	ldr	r3, [pc, #80]	; (5b28 <_usart_read_buffer+0x74>)
    5ad8:	4798      	blx	r3
		return STATUS_BUSY;
    5ada:	2305      	movs	r3, #5
    5adc:	e01e      	b.n	5b1c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	1dba      	adds	r2, r7, #6
    5ae2:	8812      	ldrh	r2, [r2, #0]
    5ae4:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5ae6:	4b10      	ldr	r3, [pc, #64]	; (5b28 <_usart_read_buffer+0x74>)
    5ae8:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	68ba      	ldr	r2, [r7, #8]
    5aee:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5af0:	68fa      	ldr	r2, [r7, #12]
    5af2:	2332      	movs	r3, #50	; 0x32
    5af4:	2105      	movs	r1, #5
    5af6:	54d1      	strb	r1, [r2, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5af8:	697b      	ldr	r3, [r7, #20]
    5afa:	2204      	movs	r2, #4
    5afc:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5afe:	68fb      	ldr	r3, [r7, #12]
    5b00:	7a1b      	ldrb	r3, [r3, #8]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d002      	beq.n	5b0c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5b06:	697b      	ldr	r3, [r7, #20]
    5b08:	2220      	movs	r2, #32
    5b0a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5b0c:	68fb      	ldr	r3, [r7, #12]
    5b0e:	7a5b      	ldrb	r3, [r3, #9]
    5b10:	2b00      	cmp	r3, #0
    5b12:	d002      	beq.n	5b1a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5b14:	697b      	ldr	r3, [r7, #20]
    5b16:	2208      	movs	r2, #8
    5b18:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5b1a:	2300      	movs	r3, #0
}
    5b1c:	1c18      	adds	r0, r3, #0
    5b1e:	46bd      	mov	sp, r7
    5b20:	b006      	add	sp, #24
    5b22:	bd80      	pop	{r7, pc}
    5b24:	000059f5 	.word	0x000059f5
    5b28:	00005a05 	.word	0x00005a05

00005b2c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5b2c:	b580      	push	{r7, lr}
    5b2e:	b084      	sub	sp, #16
    5b30:	af00      	add	r7, sp, #0
    5b32:	60f8      	str	r0, [r7, #12]
    5b34:	60b9      	str	r1, [r7, #8]
    5b36:	1dfb      	adds	r3, r7, #7
    5b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5b3a:	1dfb      	adds	r3, r7, #7
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	68fa      	ldr	r2, [r7, #12]
    5b40:	3302      	adds	r3, #2
    5b42:	009b      	lsls	r3, r3, #2
    5b44:	18d3      	adds	r3, r2, r3
    5b46:	68ba      	ldr	r2, [r7, #8]
    5b48:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5b4a:	68fa      	ldr	r2, [r7, #12]
    5b4c:	2330      	movs	r3, #48	; 0x30
    5b4e:	5cd3      	ldrb	r3, [r2, r3]
    5b50:	b2da      	uxtb	r2, r3
    5b52:	1dfb      	adds	r3, r7, #7
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	2101      	movs	r1, #1
    5b58:	1c08      	adds	r0, r1, #0
    5b5a:	4098      	lsls	r0, r3
    5b5c:	1c03      	adds	r3, r0, #0
    5b5e:	b2db      	uxtb	r3, r3
    5b60:	4313      	orrs	r3, r2
    5b62:	b2db      	uxtb	r3, r3
    5b64:	b2d9      	uxtb	r1, r3
    5b66:	68fa      	ldr	r2, [r7, #12]
    5b68:	2330      	movs	r3, #48	; 0x30
    5b6a:	54d1      	strb	r1, [r2, r3]
}
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b004      	add	sp, #16
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)

00005b74 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5b74:	b580      	push	{r7, lr}
    5b76:	b084      	sub	sp, #16
    5b78:	af00      	add	r7, sp, #0
    5b7a:	60f8      	str	r0, [r7, #12]
    5b7c:	60b9      	str	r1, [r7, #8]
    5b7e:	1dbb      	adds	r3, r7, #6
    5b80:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5b82:	1dbb      	adds	r3, r7, #6
    5b84:	881b      	ldrh	r3, [r3, #0]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d101      	bne.n	5b8e <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5b8a:	2317      	movs	r3, #23
    5b8c:	e012      	b.n	5bb4 <usart_write_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    5b8e:	68fb      	ldr	r3, [r7, #12]
    5b90:	79db      	ldrb	r3, [r3, #7]
    5b92:	2201      	movs	r2, #1
    5b94:	4053      	eors	r3, r2
    5b96:	b2db      	uxtb	r3, r3
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d001      	beq.n	5ba0 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5b9c:	231c      	movs	r3, #28
    5b9e:	e009      	b.n	5bb4 <usart_write_buffer_job+0x40>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5ba0:	68f9      	ldr	r1, [r7, #12]
    5ba2:	68ba      	ldr	r2, [r7, #8]
    5ba4:	1dbb      	adds	r3, r7, #6
    5ba6:	881b      	ldrh	r3, [r3, #0]
    5ba8:	1c08      	adds	r0, r1, #0
    5baa:	1c11      	adds	r1, r2, #0
    5bac:	1c1a      	adds	r2, r3, #0
    5bae:	4b03      	ldr	r3, [pc, #12]	; (5bbc <usart_write_buffer_job+0x48>)
    5bb0:	4798      	blx	r3
    5bb2:	1c03      	adds	r3, r0, #0
}
    5bb4:	1c18      	adds	r0, r3, #0
    5bb6:	46bd      	mov	sp, r7
    5bb8:	b004      	add	sp, #16
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	00005a59 	.word	0x00005a59

00005bc0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b084      	sub	sp, #16
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	60f8      	str	r0, [r7, #12]
    5bc8:	60b9      	str	r1, [r7, #8]
    5bca:	1dbb      	adds	r3, r7, #6
    5bcc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5bce:	1dbb      	adds	r3, r7, #6
    5bd0:	881b      	ldrh	r3, [r3, #0]
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d101      	bne.n	5bda <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5bd6:	2317      	movs	r3, #23
    5bd8:	e012      	b.n	5c00 <usart_read_buffer_job+0x40>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	799b      	ldrb	r3, [r3, #6]
    5bde:	2201      	movs	r2, #1
    5be0:	4053      	eors	r3, r2
    5be2:	b2db      	uxtb	r3, r3
    5be4:	2b00      	cmp	r3, #0
    5be6:	d001      	beq.n	5bec <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5be8:	231c      	movs	r3, #28
    5bea:	e009      	b.n	5c00 <usart_read_buffer_job+0x40>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5bec:	68f9      	ldr	r1, [r7, #12]
    5bee:	68ba      	ldr	r2, [r7, #8]
    5bf0:	1dbb      	adds	r3, r7, #6
    5bf2:	881b      	ldrh	r3, [r3, #0]
    5bf4:	1c08      	adds	r0, r1, #0
    5bf6:	1c11      	adds	r1, r2, #0
    5bf8:	1c1a      	adds	r2, r3, #0
    5bfa:	4b03      	ldr	r3, [pc, #12]	; (5c08 <usart_read_buffer_job+0x48>)
    5bfc:	4798      	blx	r3
    5bfe:	1c03      	adds	r3, r0, #0
}
    5c00:	1c18      	adds	r0, r3, #0
    5c02:	46bd      	mov	sp, r7
    5c04:	b004      	add	sp, #16
    5c06:	bd80      	pop	{r7, pc}
    5c08:	00005ab5 	.word	0x00005ab5

00005c0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	b088      	sub	sp, #32
    5c10:	af00      	add	r7, sp, #0
    5c12:	1c02      	adds	r2, r0, #0
    5c14:	1dfb      	adds	r3, r7, #7
    5c16:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5c18:	1dfb      	adds	r3, r7, #7
    5c1a:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5c1c:	4bb0      	ldr	r3, [pc, #704]	; (5ee0 <_usart_interrupt_handler+0x2d4>)
    5c1e:	0092      	lsls	r2, r2, #2
    5c20:	58d3      	ldr	r3, [r2, r3]
    5c22:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5c24:	69bb      	ldr	r3, [r7, #24]
    5c26:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    5c28:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5c2a:	69bb      	ldr	r3, [r7, #24]
    5c2c:	1c18      	adds	r0, r3, #0
    5c2e:	4bad      	ldr	r3, [pc, #692]	; (5ee4 <_usart_interrupt_handler+0x2d8>)
    5c30:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5c32:	697b      	ldr	r3, [r7, #20]
    5c34:	7e1b      	ldrb	r3, [r3, #24]
    5c36:	b2da      	uxtb	r2, r3
    5c38:	1c3b      	adds	r3, r7, #0
    5c3a:	3312      	adds	r3, #18
    5c3c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5c3e:	697b      	ldr	r3, [r7, #20]
    5c40:	7d9b      	ldrb	r3, [r3, #22]
    5c42:	b2db      	uxtb	r3, r3
    5c44:	1c1a      	adds	r2, r3, #0
    5c46:	1c3b      	adds	r3, r7, #0
    5c48:	3312      	adds	r3, #18
    5c4a:	1c39      	adds	r1, r7, #0
    5c4c:	3112      	adds	r1, #18
    5c4e:	8809      	ldrh	r1, [r1, #0]
    5c50:	400a      	ands	r2, r1
    5c52:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5c54:	69ba      	ldr	r2, [r7, #24]
    5c56:	2330      	movs	r3, #48	; 0x30
    5c58:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    5c5a:	69b9      	ldr	r1, [r7, #24]
    5c5c:	2231      	movs	r2, #49	; 0x31
    5c5e:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    5c60:	4013      	ands	r3, r2
    5c62:	b2da      	uxtb	r2, r3
    5c64:	1c3b      	adds	r3, r7, #0
    5c66:	3310      	adds	r3, #16
    5c68:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5c6a:	1c3b      	adds	r3, r7, #0
    5c6c:	3312      	adds	r3, #18
    5c6e:	881a      	ldrh	r2, [r3, #0]
    5c70:	2301      	movs	r3, #1
    5c72:	4013      	ands	r3, r2
    5c74:	d044      	beq.n	5d00 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5c76:	69bb      	ldr	r3, [r7, #24]
    5c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5c7a:	b29b      	uxth	r3, r3
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d03c      	beq.n	5cfa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c80:	69bb      	ldr	r3, [r7, #24]
    5c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	b2da      	uxtb	r2, r3
    5c88:	1c3b      	adds	r3, r7, #0
    5c8a:	331c      	adds	r3, #28
    5c8c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5c8e:	69bb      	ldr	r3, [r7, #24]
    5c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c92:	1c5a      	adds	r2, r3, #1
    5c94:	69bb      	ldr	r3, [r7, #24]
    5c96:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5c98:	69bb      	ldr	r3, [r7, #24]
    5c9a:	795b      	ldrb	r3, [r3, #5]
    5c9c:	2b01      	cmp	r3, #1
    5c9e:	d112      	bne.n	5cc6 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5ca0:	69bb      	ldr	r3, [r7, #24]
    5ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ca4:	781b      	ldrb	r3, [r3, #0]
    5ca6:	b2db      	uxtb	r3, r3
    5ca8:	021b      	lsls	r3, r3, #8
    5caa:	b29a      	uxth	r2, r3
    5cac:	1c3b      	adds	r3, r7, #0
    5cae:	331c      	adds	r3, #28
    5cb0:	881b      	ldrh	r3, [r3, #0]
    5cb2:	4313      	orrs	r3, r2
    5cb4:	b29a      	uxth	r2, r3
    5cb6:	1c3b      	adds	r3, r7, #0
    5cb8:	331c      	adds	r3, #28
    5cba:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5cbc:	69bb      	ldr	r3, [r7, #24]
    5cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5cc0:	1c5a      	adds	r2, r3, #1
    5cc2:	69bb      	ldr	r3, [r7, #24]
    5cc4:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5cc6:	1c3b      	adds	r3, r7, #0
    5cc8:	331c      	adds	r3, #28
    5cca:	881b      	ldrh	r3, [r3, #0]
    5ccc:	05db      	lsls	r3, r3, #23
    5cce:	0ddb      	lsrs	r3, r3, #23
    5cd0:	b29a      	uxth	r2, r3
    5cd2:	697b      	ldr	r3, [r7, #20]
    5cd4:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5cd6:	69bb      	ldr	r3, [r7, #24]
    5cd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5cda:	b29b      	uxth	r3, r3
    5cdc:	3b01      	subs	r3, #1
    5cde:	b29b      	uxth	r3, r3
    5ce0:	69ba      	ldr	r2, [r7, #24]
    5ce2:	1c19      	adds	r1, r3, #0
    5ce4:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d106      	bne.n	5cf8 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5cea:	697b      	ldr	r3, [r7, #20]
    5cec:	2201      	movs	r2, #1
    5cee:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5cf0:	697b      	ldr	r3, [r7, #20]
    5cf2:	2202      	movs	r2, #2
    5cf4:	759a      	strb	r2, [r3, #22]
    5cf6:	e003      	b.n	5d00 <_usart_interrupt_handler+0xf4>
    5cf8:	e002      	b.n	5d00 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5cfa:	697b      	ldr	r3, [r7, #20]
    5cfc:	2201      	movs	r2, #1
    5cfe:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5d00:	1c3b      	adds	r3, r7, #0
    5d02:	3312      	adds	r3, #18
    5d04:	881a      	ldrh	r2, [r3, #0]
    5d06:	2302      	movs	r3, #2
    5d08:	4013      	ands	r3, r2
    5d0a:	d011      	beq.n	5d30 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5d0c:	697b      	ldr	r3, [r7, #20]
    5d0e:	2202      	movs	r2, #2
    5d10:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5d12:	69ba      	ldr	r2, [r7, #24]
    5d14:	2333      	movs	r3, #51	; 0x33
    5d16:	2100      	movs	r1, #0
    5d18:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5d1a:	1c3b      	adds	r3, r7, #0
    5d1c:	3310      	adds	r3, #16
    5d1e:	881a      	ldrh	r2, [r3, #0]
    5d20:	2301      	movs	r3, #1
    5d22:	4013      	ands	r3, r2
    5d24:	d004      	beq.n	5d30 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5d26:	69bb      	ldr	r3, [r7, #24]
    5d28:	68db      	ldr	r3, [r3, #12]
    5d2a:	69ba      	ldr	r2, [r7, #24]
    5d2c:	1c10      	adds	r0, r2, #0
    5d2e:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5d30:	1c3b      	adds	r3, r7, #0
    5d32:	3312      	adds	r3, #18
    5d34:	881a      	ldrh	r2, [r3, #0]
    5d36:	2304      	movs	r3, #4
    5d38:	4013      	ands	r3, r2
    5d3a:	d100      	bne.n	5d3e <_usart_interrupt_handler+0x132>
    5d3c:	e0d7      	b.n	5eee <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    5d3e:	69bb      	ldr	r3, [r7, #24]
    5d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5d42:	b29b      	uxth	r3, r3
    5d44:	2b00      	cmp	r3, #0
    5d46:	d100      	bne.n	5d4a <_usart_interrupt_handler+0x13e>
    5d48:	e0ce      	b.n	5ee8 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5d4a:	697b      	ldr	r3, [r7, #20]
    5d4c:	8b5b      	ldrh	r3, [r3, #26]
    5d4e:	b29b      	uxth	r3, r3
    5d50:	b2d9      	uxtb	r1, r3
    5d52:	1c3b      	adds	r3, r7, #0
    5d54:	331f      	adds	r3, #31
    5d56:	223f      	movs	r2, #63	; 0x3f
    5d58:	400a      	ands	r2, r1
    5d5a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5d5c:	1c3b      	adds	r3, r7, #0
    5d5e:	331f      	adds	r3, #31
    5d60:	781a      	ldrb	r2, [r3, #0]
    5d62:	2308      	movs	r3, #8
    5d64:	4013      	ands	r3, r2
    5d66:	d007      	beq.n	5d78 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5d68:	1c3b      	adds	r3, r7, #0
    5d6a:	331f      	adds	r3, #31
    5d6c:	1c3a      	adds	r2, r7, #0
    5d6e:	321f      	adds	r2, #31
    5d70:	7812      	ldrb	r2, [r2, #0]
    5d72:	2108      	movs	r1, #8
    5d74:	438a      	bics	r2, r1
    5d76:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5d78:	1c3b      	adds	r3, r7, #0
    5d7a:	331f      	adds	r3, #31
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d100      	bne.n	5d84 <_usart_interrupt_handler+0x178>
    5d82:	e069      	b.n	5e58 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5d84:	1c3b      	adds	r3, r7, #0
    5d86:	331f      	adds	r3, #31
    5d88:	781a      	ldrb	r2, [r3, #0]
    5d8a:	2302      	movs	r3, #2
    5d8c:	4013      	ands	r3, r2
    5d8e:	d00c      	beq.n	5daa <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5d90:	69ba      	ldr	r2, [r7, #24]
    5d92:	2332      	movs	r3, #50	; 0x32
    5d94:	211a      	movs	r1, #26
    5d96:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    5d98:	697b      	ldr	r3, [r7, #20]
    5d9a:	8b5b      	ldrh	r3, [r3, #26]
    5d9c:	b29b      	uxth	r3, r3
    5d9e:	2202      	movs	r2, #2
    5da0:	4313      	orrs	r3, r2
    5da2:	b29a      	uxth	r2, r3
    5da4:	697b      	ldr	r3, [r7, #20]
    5da6:	835a      	strh	r2, [r3, #26]
    5da8:	e04a      	b.n	5e40 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5daa:	1c3b      	adds	r3, r7, #0
    5dac:	331f      	adds	r3, #31
    5dae:	781a      	ldrb	r2, [r3, #0]
    5db0:	2304      	movs	r3, #4
    5db2:	4013      	ands	r3, r2
    5db4:	d00c      	beq.n	5dd0 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5db6:	69ba      	ldr	r2, [r7, #24]
    5db8:	2332      	movs	r3, #50	; 0x32
    5dba:	211e      	movs	r1, #30
    5dbc:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    5dbe:	697b      	ldr	r3, [r7, #20]
    5dc0:	8b5b      	ldrh	r3, [r3, #26]
    5dc2:	b29b      	uxth	r3, r3
    5dc4:	2204      	movs	r2, #4
    5dc6:	4313      	orrs	r3, r2
    5dc8:	b29a      	uxth	r2, r3
    5dca:	697b      	ldr	r3, [r7, #20]
    5dcc:	835a      	strh	r2, [r3, #26]
    5dce:	e037      	b.n	5e40 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5dd0:	1c3b      	adds	r3, r7, #0
    5dd2:	331f      	adds	r3, #31
    5dd4:	781a      	ldrb	r2, [r3, #0]
    5dd6:	2301      	movs	r3, #1
    5dd8:	4013      	ands	r3, r2
    5dda:	d00c      	beq.n	5df6 <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5ddc:	69ba      	ldr	r2, [r7, #24]
    5dde:	2332      	movs	r3, #50	; 0x32
    5de0:	2113      	movs	r1, #19
    5de2:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5de4:	697b      	ldr	r3, [r7, #20]
    5de6:	8b5b      	ldrh	r3, [r3, #26]
    5de8:	b29b      	uxth	r3, r3
    5dea:	2201      	movs	r2, #1
    5dec:	4313      	orrs	r3, r2
    5dee:	b29a      	uxth	r2, r3
    5df0:	697b      	ldr	r3, [r7, #20]
    5df2:	835a      	strh	r2, [r3, #26]
    5df4:	e024      	b.n	5e40 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5df6:	1c3b      	adds	r3, r7, #0
    5df8:	331f      	adds	r3, #31
    5dfa:	781a      	ldrb	r2, [r3, #0]
    5dfc:	2310      	movs	r3, #16
    5dfe:	4013      	ands	r3, r2
    5e00:	d00c      	beq.n	5e1c <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5e02:	69ba      	ldr	r2, [r7, #24]
    5e04:	2332      	movs	r3, #50	; 0x32
    5e06:	2142      	movs	r1, #66	; 0x42
    5e08:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    5e0a:	697b      	ldr	r3, [r7, #20]
    5e0c:	8b5b      	ldrh	r3, [r3, #26]
    5e0e:	b29b      	uxth	r3, r3
    5e10:	2210      	movs	r2, #16
    5e12:	4313      	orrs	r3, r2
    5e14:	b29a      	uxth	r2, r3
    5e16:	697b      	ldr	r3, [r7, #20]
    5e18:	835a      	strh	r2, [r3, #26]
    5e1a:	e011      	b.n	5e40 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5e1c:	1c3b      	adds	r3, r7, #0
    5e1e:	331f      	adds	r3, #31
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	2320      	movs	r3, #32
    5e24:	4013      	ands	r3, r2
    5e26:	d00b      	beq.n	5e40 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5e28:	69ba      	ldr	r2, [r7, #24]
    5e2a:	2332      	movs	r3, #50	; 0x32
    5e2c:	2141      	movs	r1, #65	; 0x41
    5e2e:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    5e30:	697b      	ldr	r3, [r7, #20]
    5e32:	8b5b      	ldrh	r3, [r3, #26]
    5e34:	b29b      	uxth	r3, r3
    5e36:	2220      	movs	r2, #32
    5e38:	4313      	orrs	r3, r2
    5e3a:	b29a      	uxth	r2, r3
    5e3c:	697b      	ldr	r3, [r7, #20]
    5e3e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5e40:	1c3b      	adds	r3, r7, #0
    5e42:	3310      	adds	r3, #16
    5e44:	881a      	ldrh	r2, [r3, #0]
    5e46:	2304      	movs	r3, #4
    5e48:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    5e4a:	d050      	beq.n	5eee <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5e4c:	69bb      	ldr	r3, [r7, #24]
    5e4e:	695b      	ldr	r3, [r3, #20]
    5e50:	69ba      	ldr	r2, [r7, #24]
    5e52:	1c10      	adds	r0, r2, #0
    5e54:	4798      	blx	r3
    5e56:	e04a      	b.n	5eee <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5e58:	697b      	ldr	r3, [r7, #20]
    5e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5e5c:	b29a      	uxth	r2, r3
    5e5e:	1c3b      	adds	r3, r7, #0
    5e60:	330e      	adds	r3, #14
    5e62:	05d2      	lsls	r2, r2, #23
    5e64:	0dd2      	lsrs	r2, r2, #23
    5e66:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5e68:	69bb      	ldr	r3, [r7, #24]
    5e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e6c:	1c3a      	adds	r2, r7, #0
    5e6e:	320e      	adds	r2, #14
    5e70:	8812      	ldrh	r2, [r2, #0]
    5e72:	b2d2      	uxtb	r2, r2
    5e74:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5e76:	69bb      	ldr	r3, [r7, #24]
    5e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e7a:	1c5a      	adds	r2, r3, #1
    5e7c:	69bb      	ldr	r3, [r7, #24]
    5e7e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5e80:	69bb      	ldr	r3, [r7, #24]
    5e82:	795b      	ldrb	r3, [r3, #5]
    5e84:	2b01      	cmp	r3, #1
    5e86:	d10d      	bne.n	5ea4 <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5e88:	69bb      	ldr	r3, [r7, #24]
    5e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e8c:	1c3a      	adds	r2, r7, #0
    5e8e:	320e      	adds	r2, #14
    5e90:	8812      	ldrh	r2, [r2, #0]
    5e92:	0a12      	lsrs	r2, r2, #8
    5e94:	b292      	uxth	r2, r2
    5e96:	b2d2      	uxtb	r2, r2
    5e98:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5e9a:	69bb      	ldr	r3, [r7, #24]
    5e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e9e:	1c5a      	adds	r2, r3, #1
    5ea0:	69bb      	ldr	r3, [r7, #24]
    5ea2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5ea4:	69bb      	ldr	r3, [r7, #24]
    5ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5ea8:	b29b      	uxth	r3, r3
    5eaa:	3b01      	subs	r3, #1
    5eac:	b29b      	uxth	r3, r3
    5eae:	69ba      	ldr	r2, [r7, #24]
    5eb0:	1c19      	adds	r1, r3, #0
    5eb2:	8591      	strh	r1, [r2, #44]	; 0x2c
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d112      	bne.n	5ede <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5eb8:	697b      	ldr	r3, [r7, #20]
    5eba:	2204      	movs	r2, #4
    5ebc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5ebe:	69ba      	ldr	r2, [r7, #24]
    5ec0:	2332      	movs	r3, #50	; 0x32
    5ec2:	2100      	movs	r1, #0
    5ec4:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5ec6:	1c3b      	adds	r3, r7, #0
    5ec8:	3310      	adds	r3, #16
    5eca:	881a      	ldrh	r2, [r3, #0]
    5ecc:	2302      	movs	r3, #2
    5ece:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    5ed0:	d005      	beq.n	5ede <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5ed2:	69bb      	ldr	r3, [r7, #24]
    5ed4:	691b      	ldr	r3, [r3, #16]
    5ed6:	69ba      	ldr	r2, [r7, #24]
    5ed8:	1c10      	adds	r0, r2, #0
    5eda:	4798      	blx	r3
    5edc:	e007      	b.n	5eee <_usart_interrupt_handler+0x2e2>
    5ede:	e006      	b.n	5eee <_usart_interrupt_handler+0x2e2>
    5ee0:	20006e0c 	.word	0x20006e0c
    5ee4:	00005a35 	.word	0x00005a35
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5ee8:	697b      	ldr	r3, [r7, #20]
    5eea:	2204      	movs	r2, #4
    5eec:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5eee:	1c3b      	adds	r3, r7, #0
    5ef0:	3312      	adds	r3, #18
    5ef2:	881a      	ldrh	r2, [r3, #0]
    5ef4:	2310      	movs	r3, #16
    5ef6:	4013      	ands	r3, r2
    5ef8:	d010      	beq.n	5f1c <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5efa:	697b      	ldr	r3, [r7, #20]
    5efc:	2210      	movs	r2, #16
    5efe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5f00:	697b      	ldr	r3, [r7, #20]
    5f02:	2210      	movs	r2, #16
    5f04:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5f06:	1c3b      	adds	r3, r7, #0
    5f08:	3310      	adds	r3, #16
    5f0a:	881a      	ldrh	r2, [r3, #0]
    5f0c:	2310      	movs	r3, #16
    5f0e:	4013      	ands	r3, r2
    5f10:	d004      	beq.n	5f1c <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5f12:	69bb      	ldr	r3, [r7, #24]
    5f14:	69db      	ldr	r3, [r3, #28]
    5f16:	69ba      	ldr	r2, [r7, #24]
    5f18:	1c10      	adds	r0, r2, #0
    5f1a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5f1c:	1c3b      	adds	r3, r7, #0
    5f1e:	3312      	adds	r3, #18
    5f20:	881a      	ldrh	r2, [r3, #0]
    5f22:	2320      	movs	r3, #32
    5f24:	4013      	ands	r3, r2
    5f26:	d010      	beq.n	5f4a <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5f28:	697b      	ldr	r3, [r7, #20]
    5f2a:	2220      	movs	r2, #32
    5f2c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5f2e:	697b      	ldr	r3, [r7, #20]
    5f30:	2220      	movs	r2, #32
    5f32:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5f34:	1c3b      	adds	r3, r7, #0
    5f36:	3310      	adds	r3, #16
    5f38:	881a      	ldrh	r2, [r3, #0]
    5f3a:	2308      	movs	r3, #8
    5f3c:	4013      	ands	r3, r2
    5f3e:	d004      	beq.n	5f4a <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5f40:	69bb      	ldr	r3, [r7, #24]
    5f42:	699b      	ldr	r3, [r3, #24]
    5f44:	69ba      	ldr	r2, [r7, #24]
    5f46:	1c10      	adds	r0, r2, #0
    5f48:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5f4a:	1c3b      	adds	r3, r7, #0
    5f4c:	3312      	adds	r3, #18
    5f4e:	881a      	ldrh	r2, [r3, #0]
    5f50:	2308      	movs	r3, #8
    5f52:	4013      	ands	r3, r2
    5f54:	d010      	beq.n	5f78 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5f56:	697b      	ldr	r3, [r7, #20]
    5f58:	2208      	movs	r2, #8
    5f5a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5f5c:	697b      	ldr	r3, [r7, #20]
    5f5e:	2208      	movs	r2, #8
    5f60:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5f62:	1c3b      	adds	r3, r7, #0
    5f64:	3310      	adds	r3, #16
    5f66:	881a      	ldrh	r2, [r3, #0]
    5f68:	2320      	movs	r3, #32
    5f6a:	4013      	ands	r3, r2
    5f6c:	d004      	beq.n	5f78 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5f6e:	69bb      	ldr	r3, [r7, #24]
    5f70:	6a1b      	ldr	r3, [r3, #32]
    5f72:	69ba      	ldr	r2, [r7, #24]
    5f74:	1c10      	adds	r0, r2, #0
    5f76:	4798      	blx	r3
		}
	}
#endif
}
    5f78:	46bd      	mov	sp, r7
    5f7a:	b008      	add	sp, #32
    5f7c:	bd80      	pop	{r7, pc}
    5f7e:	46c0      	nop			; (mov r8, r8)

00005f80 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    5f80:	b580      	push	{r7, lr}
    5f82:	b082      	sub	sp, #8
    5f84:	af00      	add	r7, sp, #0
    5f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	2201      	movs	r2, #1
    5f8c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	2200      	movs	r2, #0
    5f92:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	2206      	movs	r2, #6
    5f98:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    5f9a:	687b      	ldr	r3, [r7, #4]
    5f9c:	2200      	movs	r2, #0
    5f9e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	2200      	movs	r2, #0
    5fa4:	725a      	strb	r2, [r3, #9]
}
    5fa6:	46bd      	mov	sp, r7
    5fa8:	b002      	add	sp, #8
    5faa:	bd80      	pop	{r7, pc}

00005fac <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b082      	sub	sp, #8
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	2203      	movs	r2, #3
    5fb8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	2200      	movs	r2, #0
    5fbe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	2201      	movs	r2, #1
    5fc4:	709a      	strb	r2, [r3, #2]
}
    5fc6:	46bd      	mov	sp, r7
    5fc8:	b002      	add	sp, #8
    5fca:	bd80      	pop	{r7, pc}

00005fcc <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5fcc:	b580      	push	{r7, lr}
    5fce:	b082      	sub	sp, #8
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	2200      	movs	r2, #0
    5fd8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	2200      	movs	r2, #0
    5fde:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	2200      	movs	r2, #0
    5fe4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	2200      	movs	r2, #0
    5fea:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	2200      	movs	r2, #0
    5ff0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	2201      	movs	r2, #1
    5ff6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	2207      	movs	r2, #7
    5ffc:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5ffe:	687b      	ldr	r3, [r7, #4]
    6000:	223f      	movs	r2, #63	; 0x3f
    6002:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	2201      	movs	r2, #1
    6008:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    600a:	687b      	ldr	r3, [r7, #4]
    600c:	2201      	movs	r2, #1
    600e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	2206      	movs	r2, #6
    6014:	821a      	strh	r2, [r3, #16]
}
    6016:	46bd      	mov	sp, r7
    6018:	b002      	add	sp, #8
    601a:	bd80      	pop	{r7, pc}

0000601c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    601c:	b580      	push	{r7, lr}
    601e:	b082      	sub	sp, #8
    6020:	af00      	add	r7, sp, #0
    6022:	1c02      	adds	r2, r0, #0
    6024:	1dfb      	adds	r3, r7, #7
    6026:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    6028:	4b03      	ldr	r3, [pc, #12]	; (6038 <system_cpu_clock_set_divider+0x1c>)
    602a:	1dfa      	adds	r2, r7, #7
    602c:	7812      	ldrb	r2, [r2, #0]
    602e:	721a      	strb	r2, [r3, #8]
}
    6030:	46bd      	mov	sp, r7
    6032:	b002      	add	sp, #8
    6034:	bd80      	pop	{r7, pc}
    6036:	46c0      	nop			; (mov r8, r8)
    6038:	40000400 	.word	0x40000400

0000603c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    603c:	b580      	push	{r7, lr}
    603e:	b082      	sub	sp, #8
    6040:	af00      	add	r7, sp, #0
    6042:	1c0a      	adds	r2, r1, #0
    6044:	1dfb      	adds	r3, r7, #7
    6046:	1c01      	adds	r1, r0, #0
    6048:	7019      	strb	r1, [r3, #0]
    604a:	1dbb      	adds	r3, r7, #6
    604c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    604e:	1dfb      	adds	r3, r7, #7
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	2b01      	cmp	r3, #1
    6054:	d008      	beq.n	6068 <system_apb_clock_set_divider+0x2c>
    6056:	2b02      	cmp	r3, #2
    6058:	d00b      	beq.n	6072 <system_apb_clock_set_divider+0x36>
    605a:	2b00      	cmp	r3, #0
    605c:	d10e      	bne.n	607c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    605e:	4b0b      	ldr	r3, [pc, #44]	; (608c <system_apb_clock_set_divider+0x50>)
    6060:	1dba      	adds	r2, r7, #6
    6062:	7812      	ldrb	r2, [r2, #0]
    6064:	725a      	strb	r2, [r3, #9]
			break;
    6066:	e00b      	b.n	6080 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    6068:	4b08      	ldr	r3, [pc, #32]	; (608c <system_apb_clock_set_divider+0x50>)
    606a:	1dba      	adds	r2, r7, #6
    606c:	7812      	ldrb	r2, [r2, #0]
    606e:	729a      	strb	r2, [r3, #10]
			break;
    6070:	e006      	b.n	6080 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    6072:	4b06      	ldr	r3, [pc, #24]	; (608c <system_apb_clock_set_divider+0x50>)
    6074:	1dba      	adds	r2, r7, #6
    6076:	7812      	ldrb	r2, [r2, #0]
    6078:	72da      	strb	r2, [r3, #11]
			break;
    607a:	e001      	b.n	6080 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    607c:	2317      	movs	r3, #23
    607e:	e000      	b.n	6082 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    6080:	2300      	movs	r3, #0
}
    6082:	1c18      	adds	r0, r3, #0
    6084:	46bd      	mov	sp, r7
    6086:	b002      	add	sp, #8
    6088:	bd80      	pop	{r7, pc}
    608a:	46c0      	nop			; (mov r8, r8)
    608c:	40000400 	.word	0x40000400

00006090 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6090:	b580      	push	{r7, lr}
    6092:	b082      	sub	sp, #8
    6094:	af00      	add	r7, sp, #0
    6096:	1c02      	adds	r2, r0, #0
    6098:	1dfb      	adds	r3, r7, #7
    609a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    609c:	4b08      	ldr	r3, [pc, #32]	; (60c0 <system_flash_set_waitstates+0x30>)
    609e:	1dfa      	adds	r2, r7, #7
    60a0:	7811      	ldrb	r1, [r2, #0]
    60a2:	220f      	movs	r2, #15
    60a4:	400a      	ands	r2, r1
    60a6:	b2d1      	uxtb	r1, r2
    60a8:	220f      	movs	r2, #15
    60aa:	400a      	ands	r2, r1
    60ac:	0052      	lsls	r2, r2, #1
    60ae:	6859      	ldr	r1, [r3, #4]
    60b0:	201e      	movs	r0, #30
    60b2:	4381      	bics	r1, r0
    60b4:	430a      	orrs	r2, r1
    60b6:	605a      	str	r2, [r3, #4]
}
    60b8:	46bd      	mov	sp, r7
    60ba:	b002      	add	sp, #8
    60bc:	bd80      	pop	{r7, pc}
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	41004000 	.word	0x41004000

000060c4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    60c4:	b580      	push	{r7, lr}
    60c6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    60c8:	46c0      	nop			; (mov r8, r8)
    60ca:	4b03      	ldr	r3, [pc, #12]	; (60d8 <_system_dfll_wait_for_sync+0x14>)
    60cc:	68da      	ldr	r2, [r3, #12]
    60ce:	2310      	movs	r3, #16
    60d0:	4013      	ands	r3, r2
    60d2:	d0fa      	beq.n	60ca <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    60d4:	46bd      	mov	sp, r7
    60d6:	bd80      	pop	{r7, pc}
    60d8:	40000800 	.word	0x40000800

000060dc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    60dc:	b580      	push	{r7, lr}
    60de:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    60e0:	4a0c      	ldr	r2, [pc, #48]	; (6114 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60e2:	4b0d      	ldr	r3, [pc, #52]	; (6118 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	b29b      	uxth	r3, r3
    60e8:	2180      	movs	r1, #128	; 0x80
    60ea:	438b      	bics	r3, r1
    60ec:	b29b      	uxth	r3, r3
    60ee:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    60f0:	4b0a      	ldr	r3, [pc, #40]	; (611c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    60f2:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    60f4:	4b07      	ldr	r3, [pc, #28]	; (6114 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60f6:	4a08      	ldr	r2, [pc, #32]	; (6118 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    60f8:	6892      	ldr	r2, [r2, #8]
    60fa:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    60fc:	4b05      	ldr	r3, [pc, #20]	; (6114 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    60fe:	4a06      	ldr	r2, [pc, #24]	; (6118 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6100:	6852      	ldr	r2, [r2, #4]
    6102:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6104:	4a03      	ldr	r2, [pc, #12]	; (6114 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6106:	4b04      	ldr	r3, [pc, #16]	; (6118 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	b29b      	uxth	r3, r3
    610c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    610e:	46bd      	mov	sp, r7
    6110:	bd80      	pop	{r7, pc}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	40000800 	.word	0x40000800
    6118:	20006c60 	.word	0x20006c60
    611c:	000060c5 	.word	0x000060c5

00006120 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6120:	b580      	push	{r7, lr}
    6122:	b082      	sub	sp, #8
    6124:	af00      	add	r7, sp, #0
    6126:	1c02      	adds	r2, r0, #0
    6128:	1dfb      	adds	r3, r7, #7
    612a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    612c:	1dfb      	adds	r3, r7, #7
    612e:	781b      	ldrb	r3, [r3, #0]
    6130:	2b08      	cmp	r3, #8
    6132:	d843      	bhi.n	61bc <system_clock_source_get_hz+0x9c>
    6134:	009a      	lsls	r2, r3, #2
    6136:	4b24      	ldr	r3, [pc, #144]	; (61c8 <system_clock_source_get_hz+0xa8>)
    6138:	18d3      	adds	r3, r2, r3
    613a:	681b      	ldr	r3, [r3, #0]
    613c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    613e:	4b23      	ldr	r3, [pc, #140]	; (61cc <system_clock_source_get_hz+0xac>)
    6140:	691b      	ldr	r3, [r3, #16]
    6142:	e03c      	b.n	61be <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6144:	4b22      	ldr	r3, [pc, #136]	; (61d0 <system_clock_source_get_hz+0xb0>)
    6146:	6a1b      	ldr	r3, [r3, #32]
    6148:	0a1b      	lsrs	r3, r3, #8
    614a:	1c1a      	adds	r2, r3, #0
    614c:	2303      	movs	r3, #3
    614e:	4013      	ands	r3, r2
    6150:	b2db      	uxtb	r3, r3
    6152:	4a20      	ldr	r2, [pc, #128]	; (61d4 <system_clock_source_get_hz+0xb4>)
    6154:	1c11      	adds	r1, r2, #0
    6156:	40d9      	lsrs	r1, r3
    6158:	1c0b      	adds	r3, r1, #0
    615a:	e030      	b.n	61be <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    615c:	2380      	movs	r3, #128	; 0x80
    615e:	021b      	lsls	r3, r3, #8
    6160:	e02d      	b.n	61be <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6162:	2380      	movs	r3, #128	; 0x80
    6164:	021b      	lsls	r3, r3, #8
    6166:	e02a      	b.n	61be <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6168:	4b18      	ldr	r3, [pc, #96]	; (61cc <system_clock_source_get_hz+0xac>)
    616a:	695b      	ldr	r3, [r3, #20]
    616c:	e027      	b.n	61be <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    616e:	4b17      	ldr	r3, [pc, #92]	; (61cc <system_clock_source_get_hz+0xac>)
    6170:	681a      	ldr	r2, [r3, #0]
    6172:	2302      	movs	r3, #2
    6174:	4013      	ands	r3, r2
    6176:	d101      	bne.n	617c <system_clock_source_get_hz+0x5c>
			return 0;
    6178:	2300      	movs	r3, #0
    617a:	e020      	b.n	61be <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    617c:	4b16      	ldr	r3, [pc, #88]	; (61d8 <system_clock_source_get_hz+0xb8>)
    617e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    6180:	4b12      	ldr	r3, [pc, #72]	; (61cc <system_clock_source_get_hz+0xac>)
    6182:	681a      	ldr	r2, [r3, #0]
    6184:	2304      	movs	r3, #4
    6186:	4013      	ands	r3, r2
    6188:	d009      	beq.n	619e <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    618a:	2000      	movs	r0, #0
    618c:	4b13      	ldr	r3, [pc, #76]	; (61dc <system_clock_source_get_hz+0xbc>)
    618e:	4798      	blx	r3
    6190:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    6192:	4b0e      	ldr	r3, [pc, #56]	; (61cc <system_clock_source_get_hz+0xac>)
    6194:	689b      	ldr	r3, [r3, #8]
    6196:	041b      	lsls	r3, r3, #16
    6198:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    619a:	4353      	muls	r3, r2
    619c:	e00f      	b.n	61be <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    619e:	4b10      	ldr	r3, [pc, #64]	; (61e0 <system_clock_source_get_hz+0xc0>)
    61a0:	e00d      	b.n	61be <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    61a2:	4a0b      	ldr	r2, [pc, #44]	; (61d0 <system_clock_source_get_hz+0xb0>)
    61a4:	2350      	movs	r3, #80	; 0x50
    61a6:	5cd3      	ldrb	r3, [r2, r3]
    61a8:	b2db      	uxtb	r3, r3
    61aa:	1c1a      	adds	r2, r3, #0
    61ac:	2304      	movs	r3, #4
    61ae:	4013      	ands	r3, r2
    61b0:	d101      	bne.n	61b6 <system_clock_source_get_hz+0x96>
			return 0;
    61b2:	2300      	movs	r3, #0
    61b4:	e003      	b.n	61be <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    61b6:	4b05      	ldr	r3, [pc, #20]	; (61cc <system_clock_source_get_hz+0xac>)
    61b8:	68db      	ldr	r3, [r3, #12]
    61ba:	e000      	b.n	61be <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    61bc:	2300      	movs	r3, #0
	}
}
    61be:	1c18      	adds	r0, r3, #0
    61c0:	46bd      	mov	sp, r7
    61c2:	b002      	add	sp, #8
    61c4:	bd80      	pop	{r7, pc}
    61c6:	46c0      	nop			; (mov r8, r8)
    61c8:	0000b2d0 	.word	0x0000b2d0
    61cc:	20006c60 	.word	0x20006c60
    61d0:	40000800 	.word	0x40000800
    61d4:	007a1200 	.word	0x007a1200
    61d8:	000060c5 	.word	0x000060c5
    61dc:	00006a81 	.word	0x00006a81
    61e0:	02dc6c00 	.word	0x02dc6c00

000061e4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    61e4:	b580      	push	{r7, lr}
    61e6:	b084      	sub	sp, #16
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    61ec:	4b16      	ldr	r3, [pc, #88]	; (6248 <system_clock_source_osc8m_set_config+0x64>)
    61ee:	6a1b      	ldr	r3, [r3, #32]
    61f0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	1c1a      	adds	r2, r3, #0
    61f8:	2303      	movs	r3, #3
    61fa:	4013      	ands	r3, r2
    61fc:	b2d9      	uxtb	r1, r3
    61fe:	1c3b      	adds	r3, r7, #0
    6200:	330d      	adds	r3, #13
    6202:	2203      	movs	r2, #3
    6204:	400a      	ands	r2, r1
    6206:	7819      	ldrb	r1, [r3, #0]
    6208:	2003      	movs	r0, #3
    620a:	4381      	bics	r1, r0
    620c:	430a      	orrs	r2, r1
    620e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6210:	687b      	ldr	r3, [r7, #4]
    6212:	789a      	ldrb	r2, [r3, #2]
    6214:	1c3b      	adds	r3, r7, #0
    6216:	330c      	adds	r3, #12
    6218:	01d2      	lsls	r2, r2, #7
    621a:	7818      	ldrb	r0, [r3, #0]
    621c:	217f      	movs	r1, #127	; 0x7f
    621e:	4001      	ands	r1, r0
    6220:	430a      	orrs	r2, r1
    6222:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	7859      	ldrb	r1, [r3, #1]
    6228:	1c3b      	adds	r3, r7, #0
    622a:	330c      	adds	r3, #12
    622c:	2201      	movs	r2, #1
    622e:	400a      	ands	r2, r1
    6230:	0192      	lsls	r2, r2, #6
    6232:	7819      	ldrb	r1, [r3, #0]
    6234:	2040      	movs	r0, #64	; 0x40
    6236:	4381      	bics	r1, r0
    6238:	430a      	orrs	r2, r1
    623a:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    623c:	4b02      	ldr	r3, [pc, #8]	; (6248 <system_clock_source_osc8m_set_config+0x64>)
    623e:	68fa      	ldr	r2, [r7, #12]
    6240:	621a      	str	r2, [r3, #32]
}
    6242:	46bd      	mov	sp, r7
    6244:	b004      	add	sp, #16
    6246:	bd80      	pop	{r7, pc}
    6248:	40000800 	.word	0x40000800

0000624c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    624c:	b580      	push	{r7, lr}
    624e:	b082      	sub	sp, #8
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	7a1b      	ldrb	r3, [r3, #8]
    6258:	029b      	lsls	r3, r3, #10
    625a:	041b      	lsls	r3, r3, #16
    625c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	895b      	ldrh	r3, [r3, #10]
    6262:	059b      	lsls	r3, r3, #22
    6264:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6266:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    6268:	4b22      	ldr	r3, [pc, #136]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    626a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6274:	4313      	orrs	r3, r2
    6276:	b2db      	uxtb	r3, r3
    6278:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    627e:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    6280:	687b      	ldr	r3, [r7, #4]
    6282:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6284:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	785b      	ldrb	r3, [r3, #1]
    628a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    628c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    628e:	4b19      	ldr	r3, [pc, #100]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    6290:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	781b      	ldrb	r3, [r3, #0]
    6296:	2b04      	cmp	r3, #4
    6298:	d116      	bne.n	62c8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	7b1b      	ldrb	r3, [r3, #12]
    629e:	069b      	lsls	r3, r3, #26
    62a0:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    62a2:	687b      	ldr	r3, [r7, #4]
    62a4:	89db      	ldrh	r3, [r3, #14]
    62a6:	041b      	lsls	r3, r3, #16
    62a8:	1c19      	adds	r1, r3, #0
    62aa:	4b13      	ldr	r3, [pc, #76]	; (62f8 <system_clock_source_dfll_set_config+0xac>)
    62ac:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    62ae:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    62b0:	687b      	ldr	r3, [r7, #4]
    62b2:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    62b4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    62b6:	4b0f      	ldr	r3, [pc, #60]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62b8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    62ba:	4b0e      	ldr	r3, [pc, #56]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62bc:	681a      	ldr	r2, [r3, #0]
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	431a      	orrs	r2, r3
    62c4:	4b0b      	ldr	r3, [pc, #44]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62c6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	781b      	ldrb	r3, [r3, #0]
    62cc:	2b20      	cmp	r3, #32
    62ce:	d10e      	bne.n	62ee <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	8a1b      	ldrh	r3, [r3, #16]
    62d4:	1c1a      	adds	r2, r3, #0
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    62d6:	4b07      	ldr	r3, [pc, #28]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62d8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    62da:	4b06      	ldr	r3, [pc, #24]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62dc:	681a      	ldr	r2, [r3, #0]
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	4313      	orrs	r3, r2
    62e4:	2280      	movs	r2, #128	; 0x80
    62e6:	00d2      	lsls	r2, r2, #3
    62e8:	431a      	orrs	r2, r3
    62ea:	4b02      	ldr	r3, [pc, #8]	; (62f4 <system_clock_source_dfll_set_config+0xa8>)
    62ec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    62ee:	46bd      	mov	sp, r7
    62f0:	b002      	add	sp, #8
    62f2:	bd80      	pop	{r7, pc}
    62f4:	20006c60 	.word	0x20006c60
    62f8:	03ff0000 	.word	0x03ff0000

000062fc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b082      	sub	sp, #8
    6300:	af00      	add	r7, sp, #0
    6302:	1c02      	adds	r2, r0, #0
    6304:	1dfb      	adds	r3, r7, #7
    6306:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6308:	1dfb      	adds	r3, r7, #7
    630a:	781b      	ldrb	r3, [r3, #0]
    630c:	2b08      	cmp	r3, #8
    630e:	d83b      	bhi.n	6388 <system_clock_source_enable+0x8c>
    6310:	009a      	lsls	r2, r3, #2
    6312:	4b21      	ldr	r3, [pc, #132]	; (6398 <system_clock_source_enable+0x9c>)
    6314:	18d3      	adds	r3, r2, r3
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    631a:	4b20      	ldr	r3, [pc, #128]	; (639c <system_clock_source_enable+0xa0>)
    631c:	4a1f      	ldr	r2, [pc, #124]	; (639c <system_clock_source_enable+0xa0>)
    631e:	6a12      	ldr	r2, [r2, #32]
    6320:	2102      	movs	r1, #2
    6322:	430a      	orrs	r2, r1
    6324:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6326:	2300      	movs	r3, #0
    6328:	e031      	b.n	638e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    632a:	4b1c      	ldr	r3, [pc, #112]	; (639c <system_clock_source_enable+0xa0>)
    632c:	4a1b      	ldr	r2, [pc, #108]	; (639c <system_clock_source_enable+0xa0>)
    632e:	6992      	ldr	r2, [r2, #24]
    6330:	2102      	movs	r1, #2
    6332:	430a      	orrs	r2, r1
    6334:	619a      	str	r2, [r3, #24]
		break;
    6336:	e029      	b.n	638c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6338:	4b18      	ldr	r3, [pc, #96]	; (639c <system_clock_source_enable+0xa0>)
    633a:	4a18      	ldr	r2, [pc, #96]	; (639c <system_clock_source_enable+0xa0>)
    633c:	8a12      	ldrh	r2, [r2, #16]
    633e:	b292      	uxth	r2, r2
    6340:	2102      	movs	r1, #2
    6342:	430a      	orrs	r2, r1
    6344:	b292      	uxth	r2, r2
    6346:	821a      	strh	r2, [r3, #16]
		break;
    6348:	e020      	b.n	638c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    634a:	4b14      	ldr	r3, [pc, #80]	; (639c <system_clock_source_enable+0xa0>)
    634c:	4a13      	ldr	r2, [pc, #76]	; (639c <system_clock_source_enable+0xa0>)
    634e:	8a92      	ldrh	r2, [r2, #20]
    6350:	b292      	uxth	r2, r2
    6352:	2102      	movs	r1, #2
    6354:	430a      	orrs	r2, r1
    6356:	b292      	uxth	r2, r2
    6358:	829a      	strh	r2, [r3, #20]
		break;
    635a:	e017      	b.n	638c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    635c:	4b10      	ldr	r3, [pc, #64]	; (63a0 <system_clock_source_enable+0xa4>)
    635e:	681b      	ldr	r3, [r3, #0]
    6360:	2202      	movs	r2, #2
    6362:	431a      	orrs	r2, r3
    6364:	4b0e      	ldr	r3, [pc, #56]	; (63a0 <system_clock_source_enable+0xa4>)
    6366:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6368:	4b0e      	ldr	r3, [pc, #56]	; (63a4 <system_clock_source_enable+0xa8>)
    636a:	4798      	blx	r3
		break;
    636c:	e00e      	b.n	638c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    636e:	4a0b      	ldr	r2, [pc, #44]	; (639c <system_clock_source_enable+0xa0>)
    6370:	490a      	ldr	r1, [pc, #40]	; (639c <system_clock_source_enable+0xa0>)
    6372:	2344      	movs	r3, #68	; 0x44
    6374:	5ccb      	ldrb	r3, [r1, r3]
    6376:	b2db      	uxtb	r3, r3
    6378:	2102      	movs	r1, #2
    637a:	430b      	orrs	r3, r1
    637c:	b2d9      	uxtb	r1, r3
    637e:	2344      	movs	r3, #68	; 0x44
    6380:	54d1      	strb	r1, [r2, r3]
		break;
    6382:	e003      	b.n	638c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6384:	2300      	movs	r3, #0
    6386:	e002      	b.n	638e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6388:	2317      	movs	r3, #23
    638a:	e000      	b.n	638e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    638c:	2300      	movs	r3, #0
}
    638e:	1c18      	adds	r0, r3, #0
    6390:	46bd      	mov	sp, r7
    6392:	b002      	add	sp, #8
    6394:	bd80      	pop	{r7, pc}
    6396:	46c0      	nop			; (mov r8, r8)
    6398:	0000b2f4 	.word	0x0000b2f4
    639c:	40000800 	.word	0x40000800
    63a0:	20006c60 	.word	0x20006c60
    63a4:	000060dd 	.word	0x000060dd

000063a8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b084      	sub	sp, #16
    63ac:	af00      	add	r7, sp, #0
    63ae:	1c02      	adds	r2, r0, #0
    63b0:	1dfb      	adds	r3, r7, #7
    63b2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    63b4:	2300      	movs	r3, #0
    63b6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    63b8:	1dfb      	adds	r3, r7, #7
    63ba:	781b      	ldrb	r3, [r3, #0]
    63bc:	2b08      	cmp	r3, #8
    63be:	d821      	bhi.n	6404 <system_clock_source_is_ready+0x5c>
    63c0:	009a      	lsls	r2, r3, #2
    63c2:	4b18      	ldr	r3, [pc, #96]	; (6424 <system_clock_source_is_ready+0x7c>)
    63c4:	18d3      	adds	r3, r2, r3
    63c6:	681b      	ldr	r3, [r3, #0]
    63c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    63ca:	2308      	movs	r3, #8
    63cc:	60fb      	str	r3, [r7, #12]
		break;
    63ce:	e01b      	b.n	6408 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    63d0:	2304      	movs	r3, #4
    63d2:	60fb      	str	r3, [r7, #12]
		break;
    63d4:	e018      	b.n	6408 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    63d6:	2301      	movs	r3, #1
    63d8:	60fb      	str	r3, [r7, #12]
		break;
    63da:	e015      	b.n	6408 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    63dc:	2302      	movs	r3, #2
    63de:	60fb      	str	r3, [r7, #12]
		break;
    63e0:	e012      	b.n	6408 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    63e2:	2310      	movs	r3, #16
    63e4:	60fb      	str	r3, [r7, #12]
		}
		break;
    63e6:	e00f      	b.n	6408 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    63e8:	4a0f      	ldr	r2, [pc, #60]	; (6428 <system_clock_source_is_ready+0x80>)
    63ea:	2350      	movs	r3, #80	; 0x50
    63ec:	5cd3      	ldrb	r3, [r2, r3]
    63ee:	b2db      	uxtb	r3, r3
    63f0:	1c1a      	adds	r2, r3, #0
    63f2:	2303      	movs	r3, #3
    63f4:	4013      	ands	r3, r2
    63f6:	3b03      	subs	r3, #3
    63f8:	425a      	negs	r2, r3
    63fa:	4153      	adcs	r3, r2
    63fc:	b2db      	uxtb	r3, r3
    63fe:	e00c      	b.n	641a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6400:	2301      	movs	r3, #1
    6402:	e00a      	b.n	641a <system_clock_source_is_ready+0x72>

	default:
		return false;
    6404:	2300      	movs	r3, #0
    6406:	e008      	b.n	641a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6408:	4b07      	ldr	r3, [pc, #28]	; (6428 <system_clock_source_is_ready+0x80>)
    640a:	68db      	ldr	r3, [r3, #12]
    640c:	68fa      	ldr	r2, [r7, #12]
    640e:	401a      	ands	r2, r3
    6410:	68fb      	ldr	r3, [r7, #12]
    6412:	1ad3      	subs	r3, r2, r3
    6414:	425a      	negs	r2, r3
    6416:	4153      	adcs	r3, r2
    6418:	b2db      	uxtb	r3, r3
}
    641a:	1c18      	adds	r0, r3, #0
    641c:	46bd      	mov	sp, r7
    641e:	b004      	add	sp, #16
    6420:	bd80      	pop	{r7, pc}
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	0000b318 	.word	0x0000b318
    6428:	40000800 	.word	0x40000800

0000642c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    642c:	b580      	push	{r7, lr}
    642e:	b082      	sub	sp, #8
    6430:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    6432:	1c3b      	adds	r3, r7, #0
    6434:	2201      	movs	r2, #1
    6436:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6438:	2300      	movs	r3, #0
    643a:	607b      	str	r3, [r7, #4]
    643c:	e009      	b.n	6452 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	b2da      	uxtb	r2, r3
    6442:	1c3b      	adds	r3, r7, #0
    6444:	1c10      	adds	r0, r2, #0
    6446:	1c19      	adds	r1, r3, #0
    6448:	4b05      	ldr	r3, [pc, #20]	; (6460 <_switch_peripheral_gclk+0x34>)
    644a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	3301      	adds	r3, #1
    6450:	607b      	str	r3, [r7, #4]
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	2b24      	cmp	r3, #36	; 0x24
    6456:	d9f2      	bls.n	643e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    6458:	46bd      	mov	sp, r7
    645a:	b002      	add	sp, #8
    645c:	bd80      	pop	{r7, pc}
    645e:	46c0      	nop			; (mov r8, r8)
    6460:	00006965 	.word	0x00006965

00006464 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6464:	b580      	push	{r7, lr}
    6466:	b0a6      	sub	sp, #152	; 0x98
    6468:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    646a:	4b5c      	ldr	r3, [pc, #368]	; (65dc <system_clock_init+0x178>)
    646c:	22c2      	movs	r2, #194	; 0xc2
    646e:	00d2      	lsls	r2, r2, #3
    6470:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6472:	2002      	movs	r0, #2
    6474:	4b5a      	ldr	r3, [pc, #360]	; (65e0 <system_clock_init+0x17c>)
    6476:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6478:	4b5a      	ldr	r3, [pc, #360]	; (65e4 <system_clock_init+0x180>)
    647a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    647c:	1c3b      	adds	r3, r7, #0
    647e:	3380      	adds	r3, #128	; 0x80
    6480:	1c18      	adds	r0, r3, #0
    6482:	4b59      	ldr	r3, [pc, #356]	; (65e8 <system_clock_init+0x184>)
    6484:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6486:	1c3b      	adds	r3, r7, #0
    6488:	3380      	adds	r3, #128	; 0x80
    648a:	2220      	movs	r2, #32
    648c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    648e:	1c3b      	adds	r3, r7, #0
    6490:	3380      	adds	r3, #128	; 0x80
    6492:	2200      	movs	r2, #0
    6494:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE and FINE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL. COARSE and DFLL.FINE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6496:	4b55      	ldr	r3, [pc, #340]	; (65ec <system_clock_init+0x188>)
    6498:	681b      	ldr	r3, [r3, #0]
    649a:	0e9b      	lsrs	r3, r3, #26
    649c:	2294      	movs	r2, #148	; 0x94
    649e:	19d2      	adds	r2, r2, r7
    64a0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    64a2:	2294      	movs	r2, #148	; 0x94
    64a4:	19d2      	adds	r2, r2, r7
    64a6:	6813      	ldr	r3, [r2, #0]
    64a8:	2b3f      	cmp	r3, #63	; 0x3f
    64aa:	d103      	bne.n	64b4 <system_clock_init+0x50>
		coarse = 0x1f;
    64ac:	231f      	movs	r3, #31
    64ae:	2294      	movs	r2, #148	; 0x94
    64b0:	19d2      	adds	r2, r2, r7
    64b2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    64b4:	2294      	movs	r2, #148	; 0x94
    64b6:	19d2      	adds	r2, r2, r7
    64b8:	6813      	ldr	r3, [r2, #0]
    64ba:	b2da      	uxtb	r2, r3
    64bc:	1c3b      	adds	r3, r7, #0
    64be:	3380      	adds	r3, #128	; 0x80
    64c0:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    64c2:	1c3b      	adds	r3, r7, #0
    64c4:	3380      	adds	r3, #128	; 0x80
    64c6:	2200      	movs	r2, #0
    64c8:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    64ca:	1c3b      	adds	r3, r7, #0
    64cc:	3380      	adds	r3, #128	; 0x80
    64ce:	2200      	movs	r2, #0
    64d0:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    64d2:	1c3b      	adds	r3, r7, #0
    64d4:	3380      	adds	r3, #128	; 0x80
    64d6:	2200      	movs	r2, #0
    64d8:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    64da:	1c3b      	adds	r3, r7, #0
    64dc:	3380      	adds	r3, #128	; 0x80
    64de:	2200      	movs	r2, #0
    64e0:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    64e2:	1c3b      	adds	r3, r7, #0
    64e4:	3380      	adds	r3, #128	; 0x80
    64e6:	2207      	movs	r2, #7
    64e8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    64ea:	1c3b      	adds	r3, r7, #0
    64ec:	3380      	adds	r3, #128	; 0x80
    64ee:	223f      	movs	r2, #63	; 0x3f
    64f0:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_value   = 0x1ff;
    64f2:	1c3b      	adds	r3, r7, #0
    64f4:	3380      	adds	r3, #128	; 0x80
    64f6:	4a3e      	ldr	r2, [pc, #248]	; (65f0 <system_clock_init+0x18c>)
    64f8:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    64fa:	1c3b      	adds	r3, r7, #0
    64fc:	3380      	adds	r3, #128	; 0x80
    64fe:	2200      	movs	r2, #0
    6500:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
    6502:	1c3b      	adds	r3, r7, #0
    6504:	3380      	adds	r3, #128	; 0x80
    6506:	2208      	movs	r2, #8
    6508:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    650a:	1c3b      	adds	r3, r7, #0
    650c:	3380      	adds	r3, #128	; 0x80
    650e:	2200      	movs	r2, #0
    6510:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    6512:	1c3b      	adds	r3, r7, #0
    6514:	3380      	adds	r3, #128	; 0x80
    6516:	2280      	movs	r2, #128	; 0x80
    6518:	0052      	lsls	r2, r2, #1
    651a:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    651c:	1c3b      	adds	r3, r7, #0
    651e:	3380      	adds	r3, #128	; 0x80
    6520:	4a34      	ldr	r2, [pc, #208]	; (65f4 <system_clock_init+0x190>)
    6522:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6524:	1c3b      	adds	r3, r7, #0
    6526:	3380      	adds	r3, #128	; 0x80
    6528:	1c18      	adds	r0, r3, #0
    652a:	4b33      	ldr	r3, [pc, #204]	; (65f8 <system_clock_init+0x194>)
    652c:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    652e:	1c3b      	adds	r3, r7, #0
    6530:	337c      	adds	r3, #124	; 0x7c
    6532:	1c18      	adds	r0, r3, #0
    6534:	4b31      	ldr	r3, [pc, #196]	; (65fc <system_clock_init+0x198>)
    6536:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6538:	1c3b      	adds	r3, r7, #0
    653a:	337c      	adds	r3, #124	; 0x7c
    653c:	2200      	movs	r2, #0
    653e:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6540:	1c3b      	adds	r3, r7, #0
    6542:	337c      	adds	r3, #124	; 0x7c
    6544:	2201      	movs	r2, #1
    6546:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6548:	1c3b      	adds	r3, r7, #0
    654a:	337c      	adds	r3, #124	; 0x7c
    654c:	2200      	movs	r2, #0
    654e:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6550:	1c3b      	adds	r3, r7, #0
    6552:	337c      	adds	r3, #124	; 0x7c
    6554:	1c18      	adds	r0, r3, #0
    6556:	4b2a      	ldr	r3, [pc, #168]	; (6600 <system_clock_init+0x19c>)
    6558:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    655a:	2006      	movs	r0, #6
    655c:	4b29      	ldr	r3, [pc, #164]	; (6604 <system_clock_init+0x1a0>)
    655e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6560:	4b29      	ldr	r3, [pc, #164]	; (6608 <system_clock_init+0x1a4>)
    6562:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6564:	2007      	movs	r0, #7
    6566:	4b27      	ldr	r3, [pc, #156]	; (6604 <system_clock_init+0x1a0>)
    6568:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	2007      	movs	r0, #7
    656e:	4b27      	ldr	r3, [pc, #156]	; (660c <system_clock_init+0x1a8>)
    6570:	4798      	blx	r3
    6572:	1c03      	adds	r3, r0, #0
    6574:	2201      	movs	r2, #1
    6576:	4053      	eors	r3, r2
    6578:	b2db      	uxtb	r3, r3
    657a:	2b00      	cmp	r3, #0
    657c:	d1f6      	bne.n	656c <system_clock_init+0x108>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    657e:	4b17      	ldr	r3, [pc, #92]	; (65dc <system_clock_init+0x178>)
    6580:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    6582:	2180      	movs	r1, #128	; 0x80
    6584:	430a      	orrs	r2, r1
    6586:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6588:	2000      	movs	r0, #0
    658a:	4b21      	ldr	r3, [pc, #132]	; (6610 <system_clock_init+0x1ac>)
    658c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    658e:	2000      	movs	r0, #0
    6590:	2100      	movs	r1, #0
    6592:	4b20      	ldr	r3, [pc, #128]	; (6614 <system_clock_init+0x1b0>)
    6594:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6596:	2001      	movs	r0, #1
    6598:	2100      	movs	r1, #0
    659a:	4b1e      	ldr	r3, [pc, #120]	; (6614 <system_clock_init+0x1b0>)
    659c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    659e:	2002      	movs	r0, #2
    65a0:	2100      	movs	r1, #0
    65a2:	4b1c      	ldr	r3, [pc, #112]	; (6614 <system_clock_init+0x1b0>)
    65a4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    65a6:	1c3b      	adds	r3, r7, #0
    65a8:	1c18      	adds	r0, r3, #0
    65aa:	4b1b      	ldr	r3, [pc, #108]	; (6618 <system_clock_init+0x1b4>)
    65ac:	4798      	blx	r3
    65ae:	1c3b      	adds	r3, r7, #0
    65b0:	2207      	movs	r2, #7
    65b2:	701a      	strb	r2, [r3, #0]
    65b4:	1c3b      	adds	r3, r7, #0
    65b6:	2201      	movs	r2, #1
    65b8:	605a      	str	r2, [r3, #4]
    65ba:	1c3b      	adds	r3, r7, #0
    65bc:	2201      	movs	r2, #1
    65be:	721a      	strb	r2, [r3, #8]
    65c0:	1c3b      	adds	r3, r7, #0
    65c2:	2200      	movs	r2, #0
    65c4:	725a      	strb	r2, [r3, #9]
    65c6:	1c3b      	adds	r3, r7, #0
    65c8:	2000      	movs	r0, #0
    65ca:	1c19      	adds	r1, r3, #0
    65cc:	4b13      	ldr	r3, [pc, #76]	; (661c <system_clock_init+0x1b8>)
    65ce:	4798      	blx	r3
    65d0:	2000      	movs	r0, #0
    65d2:	4b13      	ldr	r3, [pc, #76]	; (6620 <system_clock_init+0x1bc>)
    65d4:	4798      	blx	r3
#endif
}
    65d6:	46bd      	mov	sp, r7
    65d8:	b026      	add	sp, #152	; 0x98
    65da:	bd80      	pop	{r7, pc}
    65dc:	40000800 	.word	0x40000800
    65e0:	00006091 	.word	0x00006091
    65e4:	0000642d 	.word	0x0000642d
    65e8:	00005fcd 	.word	0x00005fcd
    65ec:	00806024 	.word	0x00806024
    65f0:	000001ff 	.word	0x000001ff
    65f4:	ffffbb80 	.word	0xffffbb80
    65f8:	0000624d 	.word	0x0000624d
    65fc:	00005fad 	.word	0x00005fad
    6600:	000061e5 	.word	0x000061e5
    6604:	000062fd 	.word	0x000062fd
    6608:	000066c5 	.word	0x000066c5
    660c:	000063a9 	.word	0x000063a9
    6610:	0000601d 	.word	0x0000601d
    6614:	0000603d 	.word	0x0000603d
    6618:	00005f81 	.word	0x00005f81
    661c:	000066f5 	.word	0x000066f5
    6620:	0000681d 	.word	0x0000681d

00006624 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6624:	b580      	push	{r7, lr}
    6626:	b082      	sub	sp, #8
    6628:	af00      	add	r7, sp, #0
    662a:	1c02      	adds	r2, r0, #0
    662c:	6039      	str	r1, [r7, #0]
    662e:	1dfb      	adds	r3, r7, #7
    6630:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6632:	1dfb      	adds	r3, r7, #7
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	2b01      	cmp	r3, #1
    6638:	d00a      	beq.n	6650 <system_apb_clock_set_mask+0x2c>
    663a:	2b02      	cmp	r3, #2
    663c:	d00f      	beq.n	665e <system_apb_clock_set_mask+0x3a>
    663e:	2b00      	cmp	r3, #0
    6640:	d114      	bne.n	666c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6642:	4b0e      	ldr	r3, [pc, #56]	; (667c <system_apb_clock_set_mask+0x58>)
    6644:	4a0d      	ldr	r2, [pc, #52]	; (667c <system_apb_clock_set_mask+0x58>)
    6646:	6991      	ldr	r1, [r2, #24]
    6648:	683a      	ldr	r2, [r7, #0]
    664a:	430a      	orrs	r2, r1
    664c:	619a      	str	r2, [r3, #24]
			break;
    664e:	e00f      	b.n	6670 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6650:	4b0a      	ldr	r3, [pc, #40]	; (667c <system_apb_clock_set_mask+0x58>)
    6652:	4a0a      	ldr	r2, [pc, #40]	; (667c <system_apb_clock_set_mask+0x58>)
    6654:	69d1      	ldr	r1, [r2, #28]
    6656:	683a      	ldr	r2, [r7, #0]
    6658:	430a      	orrs	r2, r1
    665a:	61da      	str	r2, [r3, #28]
			break;
    665c:	e008      	b.n	6670 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    665e:	4b07      	ldr	r3, [pc, #28]	; (667c <system_apb_clock_set_mask+0x58>)
    6660:	4a06      	ldr	r2, [pc, #24]	; (667c <system_apb_clock_set_mask+0x58>)
    6662:	6a11      	ldr	r1, [r2, #32]
    6664:	683a      	ldr	r2, [r7, #0]
    6666:	430a      	orrs	r2, r1
    6668:	621a      	str	r2, [r3, #32]
			break;
    666a:	e001      	b.n	6670 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    666c:	2317      	movs	r3, #23
    666e:	e000      	b.n	6672 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6670:	2300      	movs	r3, #0
}
    6672:	1c18      	adds	r0, r3, #0
    6674:	46bd      	mov	sp, r7
    6676:	b002      	add	sp, #8
    6678:	bd80      	pop	{r7, pc}
    667a:	46c0      	nop			; (mov r8, r8)
    667c:	40000400 	.word	0x40000400

00006680 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6680:	b580      	push	{r7, lr}
    6682:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6684:	4b01      	ldr	r3, [pc, #4]	; (668c <system_interrupt_enter_critical_section+0xc>)
    6686:	4798      	blx	r3
}
    6688:	46bd      	mov	sp, r7
    668a:	bd80      	pop	{r7, pc}
    668c:	00004439 	.word	0x00004439

00006690 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6690:	b580      	push	{r7, lr}
    6692:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6694:	4b01      	ldr	r3, [pc, #4]	; (669c <system_interrupt_leave_critical_section+0xc>)
    6696:	4798      	blx	r3
}
    6698:	46bd      	mov	sp, r7
    669a:	bd80      	pop	{r7, pc}
    669c:	00004489 	.word	0x00004489

000066a0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    66a0:	b580      	push	{r7, lr}
    66a2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    66a4:	4b06      	ldr	r3, [pc, #24]	; (66c0 <system_gclk_is_syncing+0x20>)
    66a6:	785b      	ldrb	r3, [r3, #1]
    66a8:	b2db      	uxtb	r3, r3
    66aa:	b2db      	uxtb	r3, r3
    66ac:	b25b      	sxtb	r3, r3
    66ae:	2b00      	cmp	r3, #0
    66b0:	da01      	bge.n	66b6 <system_gclk_is_syncing+0x16>
		return true;
    66b2:	2301      	movs	r3, #1
    66b4:	e000      	b.n	66b8 <system_gclk_is_syncing+0x18>
	}

	return false;
    66b6:	2300      	movs	r3, #0
}
    66b8:	1c18      	adds	r0, r3, #0
    66ba:	46bd      	mov	sp, r7
    66bc:	bd80      	pop	{r7, pc}
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	40000c00 	.word	0x40000c00

000066c4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    66c8:	2000      	movs	r0, #0
    66ca:	2108      	movs	r1, #8
    66cc:	4b07      	ldr	r3, [pc, #28]	; (66ec <system_gclk_init+0x28>)
    66ce:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    66d0:	4b07      	ldr	r3, [pc, #28]	; (66f0 <system_gclk_init+0x2c>)
    66d2:	2201      	movs	r2, #1
    66d4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	4b05      	ldr	r3, [pc, #20]	; (66f0 <system_gclk_init+0x2c>)
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	b2db      	uxtb	r3, r3
    66de:	1c1a      	adds	r2, r3, #0
    66e0:	2301      	movs	r3, #1
    66e2:	4013      	ands	r3, r2
    66e4:	d1f8      	bne.n	66d8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    66e6:	46bd      	mov	sp, r7
    66e8:	bd80      	pop	{r7, pc}
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	00006625 	.word	0x00006625
    66f0:	40000c00 	.word	0x40000c00

000066f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b086      	sub	sp, #24
    66f8:	af00      	add	r7, sp, #0
    66fa:	1c02      	adds	r2, r0, #0
    66fc:	6039      	str	r1, [r7, #0]
    66fe:	1dfb      	adds	r3, r7, #7
    6700:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6702:	1dfb      	adds	r3, r7, #7
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6708:	1dfb      	adds	r3, r7, #7
    670a:	781b      	ldrb	r3, [r3, #0]
    670c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    670e:	683b      	ldr	r3, [r7, #0]
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	021b      	lsls	r3, r3, #8
    6714:	697a      	ldr	r2, [r7, #20]
    6716:	4313      	orrs	r3, r2
    6718:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    671a:	683b      	ldr	r3, [r7, #0]
    671c:	785b      	ldrb	r3, [r3, #1]
    671e:	2b00      	cmp	r3, #0
    6720:	d004      	beq.n	672c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6722:	697b      	ldr	r3, [r7, #20]
    6724:	2280      	movs	r2, #128	; 0x80
    6726:	02d2      	lsls	r2, r2, #11
    6728:	4313      	orrs	r3, r2
    672a:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    672c:	683b      	ldr	r3, [r7, #0]
    672e:	7a5b      	ldrb	r3, [r3, #9]
    6730:	2b00      	cmp	r3, #0
    6732:	d004      	beq.n	673e <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6734:	697b      	ldr	r3, [r7, #20]
    6736:	2280      	movs	r2, #128	; 0x80
    6738:	0312      	lsls	r2, r2, #12
    673a:	4313      	orrs	r3, r2
    673c:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    673e:	683b      	ldr	r3, [r7, #0]
    6740:	685b      	ldr	r3, [r3, #4]
    6742:	2b01      	cmp	r3, #1
    6744:	d92c      	bls.n	67a0 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6746:	683b      	ldr	r3, [r7, #0]
    6748:	685a      	ldr	r2, [r3, #4]
    674a:	683b      	ldr	r3, [r7, #0]
    674c:	685b      	ldr	r3, [r3, #4]
    674e:	3b01      	subs	r3, #1
    6750:	4013      	ands	r3, r2
    6752:	d11a      	bne.n	678a <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6754:	2300      	movs	r3, #0
    6756:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6758:	2302      	movs	r3, #2
    675a:	60bb      	str	r3, [r7, #8]
    675c:	e005      	b.n	676a <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    675e:	68fb      	ldr	r3, [r7, #12]
    6760:	3301      	adds	r3, #1
    6762:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    6764:	68bb      	ldr	r3, [r7, #8]
    6766:	005b      	lsls	r3, r3, #1
    6768:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    676a:	683b      	ldr	r3, [r7, #0]
    676c:	685a      	ldr	r2, [r3, #4]
    676e:	68bb      	ldr	r3, [r7, #8]
    6770:	429a      	cmp	r2, r3
    6772:	d8f4      	bhi.n	675e <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6774:	68fb      	ldr	r3, [r7, #12]
    6776:	021b      	lsls	r3, r3, #8
    6778:	693a      	ldr	r2, [r7, #16]
    677a:	4313      	orrs	r3, r2
    677c:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    677e:	697b      	ldr	r3, [r7, #20]
    6780:	2280      	movs	r2, #128	; 0x80
    6782:	0352      	lsls	r2, r2, #13
    6784:	4313      	orrs	r3, r2
    6786:	617b      	str	r3, [r7, #20]
    6788:	e00a      	b.n	67a0 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    678a:	683b      	ldr	r3, [r7, #0]
    678c:	685b      	ldr	r3, [r3, #4]
    678e:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6790:	693a      	ldr	r2, [r7, #16]
    6792:	4313      	orrs	r3, r2
    6794:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6796:	697b      	ldr	r3, [r7, #20]
    6798:	2280      	movs	r2, #128	; 0x80
    679a:	0292      	lsls	r2, r2, #10
    679c:	4313      	orrs	r3, r2
    679e:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    67a0:	683b      	ldr	r3, [r7, #0]
    67a2:	7a1b      	ldrb	r3, [r3, #8]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d005      	beq.n	67b4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    67a8:	697b      	ldr	r3, [r7, #20]
    67aa:	2280      	movs	r2, #128	; 0x80
    67ac:	0392      	lsls	r2, r2, #14
    67ae:	4313      	orrs	r3, r2
    67b0:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    67b2:	e7ff      	b.n	67b4 <system_gclk_gen_set_config+0xc0>
    67b4:	46c0      	nop			; (mov r8, r8)
    67b6:	4b14      	ldr	r3, [pc, #80]	; (6808 <system_gclk_gen_set_config+0x114>)
    67b8:	4798      	blx	r3
    67ba:	1c03      	adds	r3, r0, #0
    67bc:	2b00      	cmp	r3, #0
    67be:	d1fa      	bne.n	67b6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    67c0:	4b12      	ldr	r3, [pc, #72]	; (680c <system_gclk_gen_set_config+0x118>)
    67c2:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    67c4:	4b12      	ldr	r3, [pc, #72]	; (6810 <system_gclk_gen_set_config+0x11c>)
    67c6:	1dfa      	adds	r2, r7, #7
    67c8:	7812      	ldrb	r2, [r2, #0]
    67ca:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    67cc:	46c0      	nop			; (mov r8, r8)
    67ce:	4b0e      	ldr	r3, [pc, #56]	; (6808 <system_gclk_gen_set_config+0x114>)
    67d0:	4798      	blx	r3
    67d2:	1c03      	adds	r3, r0, #0
    67d4:	2b00      	cmp	r3, #0
    67d6:	d1fa      	bne.n	67ce <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    67d8:	4b0e      	ldr	r3, [pc, #56]	; (6814 <system_gclk_gen_set_config+0x120>)
    67da:	693a      	ldr	r2, [r7, #16]
    67dc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    67de:	46c0      	nop			; (mov r8, r8)
    67e0:	4b09      	ldr	r3, [pc, #36]	; (6808 <system_gclk_gen_set_config+0x114>)
    67e2:	4798      	blx	r3
    67e4:	1c03      	adds	r3, r0, #0
    67e6:	2b00      	cmp	r3, #0
    67e8:	d1fa      	bne.n	67e0 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    67ea:	4b0a      	ldr	r3, [pc, #40]	; (6814 <system_gclk_gen_set_config+0x120>)
    67ec:	4a09      	ldr	r2, [pc, #36]	; (6814 <system_gclk_gen_set_config+0x120>)
    67ee:	6851      	ldr	r1, [r2, #4]
    67f0:	2280      	movs	r2, #128	; 0x80
    67f2:	0252      	lsls	r2, r2, #9
    67f4:	4011      	ands	r1, r2
    67f6:	697a      	ldr	r2, [r7, #20]
    67f8:	430a      	orrs	r2, r1
    67fa:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    67fc:	4b06      	ldr	r3, [pc, #24]	; (6818 <system_gclk_gen_set_config+0x124>)
    67fe:	4798      	blx	r3
}
    6800:	46bd      	mov	sp, r7
    6802:	b006      	add	sp, #24
    6804:	bd80      	pop	{r7, pc}
    6806:	46c0      	nop			; (mov r8, r8)
    6808:	000066a1 	.word	0x000066a1
    680c:	00006681 	.word	0x00006681
    6810:	40000c08 	.word	0x40000c08
    6814:	40000c00 	.word	0x40000c00
    6818:	00006691 	.word	0x00006691

0000681c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
    6822:	1c02      	adds	r2, r0, #0
    6824:	1dfb      	adds	r3, r7, #7
    6826:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6828:	46c0      	nop			; (mov r8, r8)
    682a:	4b0e      	ldr	r3, [pc, #56]	; (6864 <system_gclk_gen_enable+0x48>)
    682c:	4798      	blx	r3
    682e:	1c03      	adds	r3, r0, #0
    6830:	2b00      	cmp	r3, #0
    6832:	d1fa      	bne.n	682a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6834:	4b0c      	ldr	r3, [pc, #48]	; (6868 <system_gclk_gen_enable+0x4c>)
    6836:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6838:	4b0c      	ldr	r3, [pc, #48]	; (686c <system_gclk_gen_enable+0x50>)
    683a:	1dfa      	adds	r2, r7, #7
    683c:	7812      	ldrb	r2, [r2, #0]
    683e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6840:	46c0      	nop			; (mov r8, r8)
    6842:	4b08      	ldr	r3, [pc, #32]	; (6864 <system_gclk_gen_enable+0x48>)
    6844:	4798      	blx	r3
    6846:	1c03      	adds	r3, r0, #0
    6848:	2b00      	cmp	r3, #0
    684a:	d1fa      	bne.n	6842 <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    684c:	4b08      	ldr	r3, [pc, #32]	; (6870 <system_gclk_gen_enable+0x54>)
    684e:	4a08      	ldr	r2, [pc, #32]	; (6870 <system_gclk_gen_enable+0x54>)
    6850:	6852      	ldr	r2, [r2, #4]
    6852:	2180      	movs	r1, #128	; 0x80
    6854:	0249      	lsls	r1, r1, #9
    6856:	430a      	orrs	r2, r1
    6858:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    685a:	4b06      	ldr	r3, [pc, #24]	; (6874 <system_gclk_gen_enable+0x58>)
    685c:	4798      	blx	r3
}
    685e:	46bd      	mov	sp, r7
    6860:	b002      	add	sp, #8
    6862:	bd80      	pop	{r7, pc}
    6864:	000066a1 	.word	0x000066a1
    6868:	00006681 	.word	0x00006681
    686c:	40000c04 	.word	0x40000c04
    6870:	40000c00 	.word	0x40000c00
    6874:	00006691 	.word	0x00006691

00006878 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6878:	b580      	push	{r7, lr}
    687a:	b086      	sub	sp, #24
    687c:	af00      	add	r7, sp, #0
    687e:	1c02      	adds	r2, r0, #0
    6880:	1dfb      	adds	r3, r7, #7
    6882:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6884:	46c0      	nop			; (mov r8, r8)
    6886:	4b2f      	ldr	r3, [pc, #188]	; (6944 <system_gclk_gen_get_hz+0xcc>)
    6888:	4798      	blx	r3
    688a:	1c03      	adds	r3, r0, #0
    688c:	2b00      	cmp	r3, #0
    688e:	d1fa      	bne.n	6886 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6890:	4b2d      	ldr	r3, [pc, #180]	; (6948 <system_gclk_gen_get_hz+0xd0>)
    6892:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6894:	4b2d      	ldr	r3, [pc, #180]	; (694c <system_gclk_gen_get_hz+0xd4>)
    6896:	1dfa      	adds	r2, r7, #7
    6898:	7812      	ldrb	r2, [r2, #0]
    689a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    689c:	46c0      	nop			; (mov r8, r8)
    689e:	4b29      	ldr	r3, [pc, #164]	; (6944 <system_gclk_gen_get_hz+0xcc>)
    68a0:	4798      	blx	r3
    68a2:	1c03      	adds	r3, r0, #0
    68a4:	2b00      	cmp	r3, #0
    68a6:	d1fa      	bne.n	689e <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    68a8:	4b29      	ldr	r3, [pc, #164]	; (6950 <system_gclk_gen_get_hz+0xd8>)
    68aa:	685b      	ldr	r3, [r3, #4]
    68ac:	0a1b      	lsrs	r3, r3, #8
    68ae:	1c1a      	adds	r2, r3, #0
    68b0:	231f      	movs	r3, #31
    68b2:	4013      	ands	r3, r2
    68b4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    68b6:	1c18      	adds	r0, r3, #0
    68b8:	4b26      	ldr	r3, [pc, #152]	; (6954 <system_gclk_gen_get_hz+0xdc>)
    68ba:	4798      	blx	r3
    68bc:	1c03      	adds	r3, r0, #0
    68be:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    68c0:	4b22      	ldr	r3, [pc, #136]	; (694c <system_gclk_gen_get_hz+0xd4>)
    68c2:	1dfa      	adds	r2, r7, #7
    68c4:	7812      	ldrb	r2, [r2, #0]
    68c6:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    68c8:	4b21      	ldr	r3, [pc, #132]	; (6950 <system_gclk_gen_get_hz+0xd8>)
    68ca:	685b      	ldr	r3, [r3, #4]
    68cc:	0d1b      	lsrs	r3, r3, #20
    68ce:	1c1a      	adds	r2, r3, #0
    68d0:	2301      	movs	r3, #1
    68d2:	4013      	ands	r3, r2
    68d4:	b2da      	uxtb	r2, r3
    68d6:	1c3b      	adds	r3, r7, #0
    68d8:	3313      	adds	r3, #19
    68da:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    68dc:	4b1e      	ldr	r3, [pc, #120]	; (6958 <system_gclk_gen_get_hz+0xe0>)
    68de:	1dfa      	adds	r2, r7, #7
    68e0:	7812      	ldrb	r2, [r2, #0]
    68e2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    68e4:	46c0      	nop			; (mov r8, r8)
    68e6:	4b17      	ldr	r3, [pc, #92]	; (6944 <system_gclk_gen_get_hz+0xcc>)
    68e8:	4798      	blx	r3
    68ea:	1c03      	adds	r3, r0, #0
    68ec:	2b00      	cmp	r3, #0
    68ee:	d1fa      	bne.n	68e6 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    68f0:	4b17      	ldr	r3, [pc, #92]	; (6950 <system_gclk_gen_get_hz+0xd8>)
    68f2:	689b      	ldr	r3, [r3, #8]
    68f4:	0a1b      	lsrs	r3, r3, #8
    68f6:	2200      	movs	r2, #0
    68f8:	4393      	bics	r3, r2
    68fa:	b29b      	uxth	r3, r3
    68fc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    68fe:	4b17      	ldr	r3, [pc, #92]	; (695c <system_gclk_gen_get_hz+0xe4>)
    6900:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6902:	1c3b      	adds	r3, r7, #0
    6904:	3313      	adds	r3, #19
    6906:	781b      	ldrb	r3, [r3, #0]
    6908:	2b00      	cmp	r3, #0
    690a:	d109      	bne.n	6920 <system_gclk_gen_get_hz+0xa8>
    690c:	68fb      	ldr	r3, [r7, #12]
    690e:	2b01      	cmp	r3, #1
    6910:	d906      	bls.n	6920 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    6912:	4b13      	ldr	r3, [pc, #76]	; (6960 <system_gclk_gen_get_hz+0xe8>)
    6914:	6978      	ldr	r0, [r7, #20]
    6916:	68f9      	ldr	r1, [r7, #12]
    6918:	4798      	blx	r3
    691a:	1c03      	adds	r3, r0, #0
    691c:	617b      	str	r3, [r7, #20]
    691e:	e00b      	b.n	6938 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    6920:	1c3b      	adds	r3, r7, #0
    6922:	3313      	adds	r3, #19
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	2b00      	cmp	r3, #0
    6928:	d006      	beq.n	6938 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    692a:	68fb      	ldr	r3, [r7, #12]
    692c:	3301      	adds	r3, #1
    692e:	697a      	ldr	r2, [r7, #20]
    6930:	1c11      	adds	r1, r2, #0
    6932:	40d9      	lsrs	r1, r3
    6934:	1c0b      	adds	r3, r1, #0
    6936:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6938:	697b      	ldr	r3, [r7, #20]
}
    693a:	1c18      	adds	r0, r3, #0
    693c:	46bd      	mov	sp, r7
    693e:	b006      	add	sp, #24
    6940:	bd80      	pop	{r7, pc}
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	000066a1 	.word	0x000066a1
    6948:	00006681 	.word	0x00006681
    694c:	40000c04 	.word	0x40000c04
    6950:	40000c00 	.word	0x40000c00
    6954:	00006121 	.word	0x00006121
    6958:	40000c08 	.word	0x40000c08
    695c:	00006691 	.word	0x00006691
    6960:	0000ae7d 	.word	0x0000ae7d

00006964 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6964:	b580      	push	{r7, lr}
    6966:	b084      	sub	sp, #16
    6968:	af00      	add	r7, sp, #0
    696a:	1c02      	adds	r2, r0, #0
    696c:	6039      	str	r1, [r7, #0]
    696e:	1dfb      	adds	r3, r7, #7
    6970:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6972:	1dfb      	adds	r3, r7, #7
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6978:	683b      	ldr	r3, [r7, #0]
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	021b      	lsls	r3, r3, #8
    697e:	68fa      	ldr	r2, [r7, #12]
    6980:	4313      	orrs	r3, r2
    6982:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6984:	1dfb      	adds	r3, r7, #7
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	1c18      	adds	r0, r3, #0
    698a:	4b04      	ldr	r3, [pc, #16]	; (699c <system_gclk_chan_set_config+0x38>)
    698c:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    698e:	4b04      	ldr	r3, [pc, #16]	; (69a0 <system_gclk_chan_set_config+0x3c>)
    6990:	68fa      	ldr	r2, [r7, #12]
    6992:	b292      	uxth	r2, r2
    6994:	805a      	strh	r2, [r3, #2]
}
    6996:	46bd      	mov	sp, r7
    6998:	b004      	add	sp, #16
    699a:	bd80      	pop	{r7, pc}
    699c:	000069e9 	.word	0x000069e9
    69a0:	40000c00 	.word	0x40000c00

000069a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    69a4:	b580      	push	{r7, lr}
    69a6:	b082      	sub	sp, #8
    69a8:	af00      	add	r7, sp, #0
    69aa:	1c02      	adds	r2, r0, #0
    69ac:	1dfb      	adds	r3, r7, #7
    69ae:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    69b0:	4b09      	ldr	r3, [pc, #36]	; (69d8 <system_gclk_chan_enable+0x34>)
    69b2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    69b4:	4b09      	ldr	r3, [pc, #36]	; (69dc <system_gclk_chan_enable+0x38>)
    69b6:	1dfa      	adds	r2, r7, #7
    69b8:	7812      	ldrb	r2, [r2, #0]
    69ba:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    69bc:	4b08      	ldr	r3, [pc, #32]	; (69e0 <system_gclk_chan_enable+0x3c>)
    69be:	4a08      	ldr	r2, [pc, #32]	; (69e0 <system_gclk_chan_enable+0x3c>)
    69c0:	8852      	ldrh	r2, [r2, #2]
    69c2:	b292      	uxth	r2, r2
    69c4:	2180      	movs	r1, #128	; 0x80
    69c6:	01c9      	lsls	r1, r1, #7
    69c8:	430a      	orrs	r2, r1
    69ca:	b292      	uxth	r2, r2
    69cc:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    69ce:	4b05      	ldr	r3, [pc, #20]	; (69e4 <system_gclk_chan_enable+0x40>)
    69d0:	4798      	blx	r3
}
    69d2:	46bd      	mov	sp, r7
    69d4:	b002      	add	sp, #8
    69d6:	bd80      	pop	{r7, pc}
    69d8:	00006681 	.word	0x00006681
    69dc:	40000c02 	.word	0x40000c02
    69e0:	40000c00 	.word	0x40000c00
    69e4:	00006691 	.word	0x00006691

000069e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    69e8:	b580      	push	{r7, lr}
    69ea:	b084      	sub	sp, #16
    69ec:	af00      	add	r7, sp, #0
    69ee:	1c02      	adds	r2, r0, #0
    69f0:	1dfb      	adds	r3, r7, #7
    69f2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    69f4:	4b1c      	ldr	r3, [pc, #112]	; (6a68 <system_gclk_chan_disable+0x80>)
    69f6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    69f8:	4b1c      	ldr	r3, [pc, #112]	; (6a6c <system_gclk_chan_disable+0x84>)
    69fa:	1dfa      	adds	r2, r7, #7
    69fc:	7812      	ldrb	r2, [r2, #0]
    69fe:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6a00:	4b1b      	ldr	r3, [pc, #108]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a02:	885b      	ldrh	r3, [r3, #2]
    6a04:	b29b      	uxth	r3, r3
    6a06:	0a1b      	lsrs	r3, r3, #8
    6a08:	1c1a      	adds	r2, r3, #0
    6a0a:	230f      	movs	r3, #15
    6a0c:	4013      	ands	r3, r2
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6a12:	4b17      	ldr	r3, [pc, #92]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a14:	8859      	ldrh	r1, [r3, #2]
    6a16:	4a17      	ldr	r2, [pc, #92]	; (6a74 <system_gclk_chan_disable+0x8c>)
    6a18:	400a      	ands	r2, r1
    6a1a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6a1c:	4b14      	ldr	r3, [pc, #80]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a1e:	4a14      	ldr	r2, [pc, #80]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a20:	8852      	ldrh	r2, [r2, #2]
    6a22:	b291      	uxth	r1, r2
    6a24:	4a14      	ldr	r2, [pc, #80]	; (6a78 <system_gclk_chan_disable+0x90>)
    6a26:	400a      	ands	r2, r1
    6a28:	b292      	uxth	r2, r2
    6a2a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6a2c:	46c0      	nop			; (mov r8, r8)
    6a2e:	4b10      	ldr	r3, [pc, #64]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a30:	885b      	ldrh	r3, [r3, #2]
    6a32:	b29b      	uxth	r3, r3
    6a34:	1c1a      	adds	r2, r3, #0
    6a36:	2380      	movs	r3, #128	; 0x80
    6a38:	01db      	lsls	r3, r3, #7
    6a3a:	4013      	ands	r3, r2
    6a3c:	d1f7      	bne.n	6a2e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6a3e:	4b0c      	ldr	r3, [pc, #48]	; (6a70 <system_gclk_chan_disable+0x88>)
    6a40:	68fa      	ldr	r2, [r7, #12]
    6a42:	b2d2      	uxtb	r2, r2
    6a44:	1c11      	adds	r1, r2, #0
    6a46:	220f      	movs	r2, #15
    6a48:	400a      	ands	r2, r1
    6a4a:	b2d1      	uxtb	r1, r2
    6a4c:	220f      	movs	r2, #15
    6a4e:	400a      	ands	r2, r1
    6a50:	0212      	lsls	r2, r2, #8
    6a52:	8858      	ldrh	r0, [r3, #2]
    6a54:	4907      	ldr	r1, [pc, #28]	; (6a74 <system_gclk_chan_disable+0x8c>)
    6a56:	4001      	ands	r1, r0
    6a58:	430a      	orrs	r2, r1
    6a5a:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    6a5c:	4b07      	ldr	r3, [pc, #28]	; (6a7c <system_gclk_chan_disable+0x94>)
    6a5e:	4798      	blx	r3
}
    6a60:	46bd      	mov	sp, r7
    6a62:	b004      	add	sp, #16
    6a64:	bd80      	pop	{r7, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	00006681 	.word	0x00006681
    6a6c:	40000c02 	.word	0x40000c02
    6a70:	40000c00 	.word	0x40000c00
    6a74:	fffff0ff 	.word	0xfffff0ff
    6a78:	ffffbfff 	.word	0xffffbfff
    6a7c:	00006691 	.word	0x00006691

00006a80 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b084      	sub	sp, #16
    6a84:	af00      	add	r7, sp, #0
    6a86:	1c02      	adds	r2, r0, #0
    6a88:	1dfb      	adds	r3, r7, #7
    6a8a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6a8c:	4b0e      	ldr	r3, [pc, #56]	; (6ac8 <system_gclk_chan_get_hz+0x48>)
    6a8e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6a90:	4b0e      	ldr	r3, [pc, #56]	; (6acc <system_gclk_chan_get_hz+0x4c>)
    6a92:	1dfa      	adds	r2, r7, #7
    6a94:	7812      	ldrb	r2, [r2, #0]
    6a96:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6a98:	4b0d      	ldr	r3, [pc, #52]	; (6ad0 <system_gclk_chan_get_hz+0x50>)
    6a9a:	885b      	ldrh	r3, [r3, #2]
    6a9c:	b29b      	uxth	r3, r3
    6a9e:	0a1b      	lsrs	r3, r3, #8
    6aa0:	1c1a      	adds	r2, r3, #0
    6aa2:	230f      	movs	r3, #15
    6aa4:	4013      	ands	r3, r2
    6aa6:	b2da      	uxtb	r2, r3
    6aa8:	1c3b      	adds	r3, r7, #0
    6aaa:	330f      	adds	r3, #15
    6aac:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6aae:	4b09      	ldr	r3, [pc, #36]	; (6ad4 <system_gclk_chan_get_hz+0x54>)
    6ab0:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6ab2:	1c3b      	adds	r3, r7, #0
    6ab4:	330f      	adds	r3, #15
    6ab6:	781b      	ldrb	r3, [r3, #0]
    6ab8:	1c18      	adds	r0, r3, #0
    6aba:	4b07      	ldr	r3, [pc, #28]	; (6ad8 <system_gclk_chan_get_hz+0x58>)
    6abc:	4798      	blx	r3
    6abe:	1c03      	adds	r3, r0, #0
}
    6ac0:	1c18      	adds	r0, r3, #0
    6ac2:	46bd      	mov	sp, r7
    6ac4:	b004      	add	sp, #16
    6ac6:	bd80      	pop	{r7, pc}
    6ac8:	00006681 	.word	0x00006681
    6acc:	40000c02 	.word	0x40000c02
    6ad0:	40000c00 	.word	0x40000c00
    6ad4:	00006691 	.word	0x00006691
    6ad8:	00006879 	.word	0x00006879

00006adc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	b084      	sub	sp, #16
    6ae0:	af00      	add	r7, sp, #0
    6ae2:	1c02      	adds	r2, r0, #0
    6ae4:	1dfb      	adds	r3, r7, #7
    6ae6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ae8:	1c3b      	adds	r3, r7, #0
    6aea:	330f      	adds	r3, #15
    6aec:	1dfa      	adds	r2, r7, #7
    6aee:	7812      	ldrb	r2, [r2, #0]
    6af0:	09d2      	lsrs	r2, r2, #7
    6af2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6af4:	1c3b      	adds	r3, r7, #0
    6af6:	330e      	adds	r3, #14
    6af8:	1dfa      	adds	r2, r7, #7
    6afa:	7812      	ldrb	r2, [r2, #0]
    6afc:	0952      	lsrs	r2, r2, #5
    6afe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6b00:	4b0d      	ldr	r3, [pc, #52]	; (6b38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6b02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6b04:	1c3b      	adds	r3, r7, #0
    6b06:	330f      	adds	r3, #15
    6b08:	781b      	ldrb	r3, [r3, #0]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d10e      	bne.n	6b2c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6b0e:	1c3b      	adds	r3, r7, #0
    6b10:	330f      	adds	r3, #15
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	009b      	lsls	r3, r3, #2
    6b16:	2210      	movs	r2, #16
    6b18:	19d2      	adds	r2, r2, r7
    6b1a:	18d3      	adds	r3, r2, r3
    6b1c:	3b08      	subs	r3, #8
    6b1e:	681a      	ldr	r2, [r3, #0]
    6b20:	1c3b      	adds	r3, r7, #0
    6b22:	330e      	adds	r3, #14
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	01db      	lsls	r3, r3, #7
    6b28:	18d3      	adds	r3, r2, r3
    6b2a:	e000      	b.n	6b2e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6b2c:	2300      	movs	r3, #0
	}
}
    6b2e:	1c18      	adds	r0, r3, #0
    6b30:	46bd      	mov	sp, r7
    6b32:	b004      	add	sp, #16
    6b34:	bd80      	pop	{r7, pc}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	41004400 	.word	0x41004400

00006b3c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	b088      	sub	sp, #32
    6b40:	af00      	add	r7, sp, #0
    6b42:	60f8      	str	r0, [r7, #12]
    6b44:	60b9      	str	r1, [r7, #8]
    6b46:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6b48:	2300      	movs	r3, #0
    6b4a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	78db      	ldrb	r3, [r3, #3]
    6b50:	2201      	movs	r2, #1
    6b52:	4053      	eors	r3, r2
    6b54:	b2db      	uxtb	r3, r3
    6b56:	2b00      	cmp	r3, #0
    6b58:	d034      	beq.n	6bc4 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	781b      	ldrb	r3, [r3, #0]
    6b5e:	2b80      	cmp	r3, #128	; 0x80
    6b60:	d00a      	beq.n	6b78 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6b62:	69fb      	ldr	r3, [r7, #28]
    6b64:	2280      	movs	r2, #128	; 0x80
    6b66:	0252      	lsls	r2, r2, #9
    6b68:	4313      	orrs	r3, r2
    6b6a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	781b      	ldrb	r3, [r3, #0]
    6b70:	061b      	lsls	r3, r3, #24
    6b72:	69fa      	ldr	r2, [r7, #28]
    6b74:	4313      	orrs	r3, r2
    6b76:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	785b      	ldrb	r3, [r3, #1]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d003      	beq.n	6b88 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b84:	2b02      	cmp	r3, #2
    6b86:	d110      	bne.n	6baa <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6b88:	69fb      	ldr	r3, [r7, #28]
    6b8a:	2280      	movs	r2, #128	; 0x80
    6b8c:	0292      	lsls	r2, r2, #10
    6b8e:	4313      	orrs	r3, r2
    6b90:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	789b      	ldrb	r3, [r3, #2]
    6b96:	2b00      	cmp	r3, #0
    6b98:	d004      	beq.n	6ba4 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b9a:	69fb      	ldr	r3, [r7, #28]
    6b9c:	2280      	movs	r2, #128	; 0x80
    6b9e:	02d2      	lsls	r2, r2, #11
    6ba0:	4313      	orrs	r3, r2
    6ba2:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ba4:	68fb      	ldr	r3, [r7, #12]
    6ba6:	68ba      	ldr	r2, [r7, #8]
    6ba8:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	785b      	ldrb	r3, [r3, #1]
    6bae:	2b01      	cmp	r3, #1
    6bb0:	d003      	beq.n	6bba <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6bb6:	2b02      	cmp	r3, #2
    6bb8:	d107      	bne.n	6bca <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6bba:	69fa      	ldr	r2, [r7, #28]
    6bbc:	4b21      	ldr	r3, [pc, #132]	; (6c44 <_system_pinmux_config+0x108>)
    6bbe:	4013      	ands	r3, r2
    6bc0:	61fb      	str	r3, [r7, #28]
    6bc2:	e002      	b.n	6bca <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6bc4:	68fb      	ldr	r3, [r7, #12]
    6bc6:	68ba      	ldr	r2, [r7, #8]
    6bc8:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6bca:	68bb      	ldr	r3, [r7, #8]
    6bcc:	041b      	lsls	r3, r3, #16
    6bce:	0c1b      	lsrs	r3, r3, #16
    6bd0:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6bd2:	68bb      	ldr	r3, [r7, #8]
    6bd4:	0c1b      	lsrs	r3, r3, #16
    6bd6:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bd8:	69ba      	ldr	r2, [r7, #24]
    6bda:	69fb      	ldr	r3, [r7, #28]
    6bdc:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6bde:	22a0      	movs	r2, #160	; 0xa0
    6be0:	05d2      	lsls	r2, r2, #23
    6be2:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6be4:	68fb      	ldr	r3, [r7, #12]
    6be6:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6be8:	697a      	ldr	r2, [r7, #20]
    6bea:	69fb      	ldr	r3, [r7, #28]
    6bec:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6bee:	22d0      	movs	r2, #208	; 0xd0
    6bf0:	0612      	lsls	r2, r2, #24
    6bf2:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6bf4:	68fb      	ldr	r3, [r7, #12]
    6bf6:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	78db      	ldrb	r3, [r3, #3]
    6bfc:	2201      	movs	r2, #1
    6bfe:	4053      	eors	r3, r2
    6c00:	b2db      	uxtb	r3, r3
    6c02:	2b00      	cmp	r3, #0
    6c04:	d01a      	beq.n	6c3c <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6c06:	69fa      	ldr	r2, [r7, #28]
    6c08:	2380      	movs	r3, #128	; 0x80
    6c0a:	02db      	lsls	r3, r3, #11
    6c0c:	4013      	ands	r3, r2
    6c0e:	d00a      	beq.n	6c26 <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	789b      	ldrb	r3, [r3, #2]
    6c14:	2b01      	cmp	r3, #1
    6c16:	d103      	bne.n	6c20 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    6c18:	68fb      	ldr	r3, [r7, #12]
    6c1a:	68ba      	ldr	r2, [r7, #8]
    6c1c:	619a      	str	r2, [r3, #24]
    6c1e:	e002      	b.n	6c26 <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    6c20:	68fb      	ldr	r3, [r7, #12]
    6c22:	68ba      	ldr	r2, [r7, #8]
    6c24:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	785b      	ldrb	r3, [r3, #1]
    6c2a:	2b01      	cmp	r3, #1
    6c2c:	d003      	beq.n	6c36 <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6c2e:	687b      	ldr	r3, [r7, #4]
    6c30:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6c32:	2b02      	cmp	r3, #2
    6c34:	d102      	bne.n	6c3c <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6c36:	68fb      	ldr	r3, [r7, #12]
    6c38:	68ba      	ldr	r2, [r7, #8]
    6c3a:	609a      	str	r2, [r3, #8]
		}
	}
}
    6c3c:	46bd      	mov	sp, r7
    6c3e:	b008      	add	sp, #32
    6c40:	bd80      	pop	{r7, pc}
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	fffbffff 	.word	0xfffbffff

00006c48 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b084      	sub	sp, #16
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	1c02      	adds	r2, r0, #0
    6c50:	6039      	str	r1, [r7, #0]
    6c52:	1dfb      	adds	r3, r7, #7
    6c54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6c56:	1dfb      	adds	r3, r7, #7
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	1c18      	adds	r0, r3, #0
    6c5c:	4b0b      	ldr	r3, [pc, #44]	; (6c8c <system_pinmux_pin_set_config+0x44>)
    6c5e:	4798      	blx	r3
    6c60:	1c03      	adds	r3, r0, #0
    6c62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6c64:	1dfb      	adds	r3, r7, #7
    6c66:	781a      	ldrb	r2, [r3, #0]
    6c68:	231f      	movs	r3, #31
    6c6a:	4013      	ands	r3, r2
    6c6c:	2201      	movs	r2, #1
    6c6e:	1c11      	adds	r1, r2, #0
    6c70:	4099      	lsls	r1, r3
    6c72:	1c0b      	adds	r3, r1, #0
    6c74:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6c76:	68f9      	ldr	r1, [r7, #12]
    6c78:	68ba      	ldr	r2, [r7, #8]
    6c7a:	683b      	ldr	r3, [r7, #0]
    6c7c:	1c08      	adds	r0, r1, #0
    6c7e:	1c11      	adds	r1, r2, #0
    6c80:	1c1a      	adds	r2, r3, #0
    6c82:	4b03      	ldr	r3, [pc, #12]	; (6c90 <system_pinmux_pin_set_config+0x48>)
    6c84:	4798      	blx	r3
}
    6c86:	46bd      	mov	sp, r7
    6c88:	b004      	add	sp, #16
    6c8a:	bd80      	pop	{r7, pc}
    6c8c:	00006add 	.word	0x00006add
    6c90:	00006b3d 	.word	0x00006b3d

00006c94 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6c94:	b580      	push	{r7, lr}
    6c96:	af00      	add	r7, sp, #0
	return;
    6c98:	46c0      	nop			; (mov r8, r8)
}
    6c9a:	46bd      	mov	sp, r7
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	46c0      	nop			; (mov r8, r8)

00006ca0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6ca0:	b580      	push	{r7, lr}
    6ca2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6ca4:	4b04      	ldr	r3, [pc, #16]	; (6cb8 <system_init+0x18>)
    6ca6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6ca8:	4b04      	ldr	r3, [pc, #16]	; (6cbc <system_init+0x1c>)
    6caa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6cac:	4b04      	ldr	r3, [pc, #16]	; (6cc0 <system_init+0x20>)
    6cae:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6cb0:	4b04      	ldr	r3, [pc, #16]	; (6cc4 <system_init+0x24>)
    6cb2:	4798      	blx	r3
}
    6cb4:	46bd      	mov	sp, r7
    6cb6:	bd80      	pop	{r7, pc}
    6cb8:	00006465 	.word	0x00006465
    6cbc:	000045bd 	.word	0x000045bd
    6cc0:	00006c95 	.word	0x00006c95
    6cc4:	00004985 	.word	0x00004985

00006cc8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b082      	sub	sp, #8
    6ccc:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6cce:	f3ef 8310 	mrs	r3, PRIMASK
    6cd2:	603b      	str	r3, [r7, #0]
  return(result);
    6cd4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    6cd6:	425a      	negs	r2, r3
    6cd8:	4153      	adcs	r3, r2
    6cda:	b2db      	uxtb	r3, r3
    6cdc:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    6cde:	b672      	cpsid	i
    6ce0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    6ce4:	4b03      	ldr	r3, [pc, #12]	; (6cf4 <cpu_irq_save+0x2c>)
    6ce6:	2200      	movs	r2, #0
    6ce8:	701a      	strb	r2, [r3, #0]
	return flags;
    6cea:	687b      	ldr	r3, [r7, #4]
}
    6cec:	1c18      	adds	r0, r3, #0
    6cee:	46bd      	mov	sp, r7
    6cf0:	b002      	add	sp, #8
    6cf2:	bd80      	pop	{r7, pc}
    6cf4:	2000025c 	.word	0x2000025c

00006cf8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	6078      	str	r0, [r7, #4]
	return (flags);
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	1e5a      	subs	r2, r3, #1
    6d04:	4193      	sbcs	r3, r2
    6d06:	b2db      	uxtb	r3, r3
}
    6d08:	1c18      	adds	r0, r3, #0
    6d0a:	46bd      	mov	sp, r7
    6d0c:	b002      	add	sp, #8
    6d0e:	bd80      	pop	{r7, pc}

00006d10 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    6d10:	b580      	push	{r7, lr}
    6d12:	b082      	sub	sp, #8
    6d14:	af00      	add	r7, sp, #0
    6d16:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	1c18      	adds	r0, r3, #0
    6d1c:	4b06      	ldr	r3, [pc, #24]	; (6d38 <cpu_irq_restore+0x28>)
    6d1e:	4798      	blx	r3
    6d20:	1c03      	adds	r3, r0, #0
    6d22:	2b00      	cmp	r3, #0
    6d24:	d005      	beq.n	6d32 <cpu_irq_restore+0x22>
		cpu_irq_enable();
    6d26:	4b05      	ldr	r3, [pc, #20]	; (6d3c <cpu_irq_restore+0x2c>)
    6d28:	2201      	movs	r2, #1
    6d2a:	701a      	strb	r2, [r3, #0]
    6d2c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6d30:	b662      	cpsie	i
}
    6d32:	46bd      	mov	sp, r7
    6d34:	b002      	add	sp, #8
    6d36:	bd80      	pop	{r7, pc}
    6d38:	00006cf9 	.word	0x00006cf9
    6d3c:	2000025c 	.word	0x2000025c

00006d40 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6d40:	b580      	push	{r7, lr}
    6d42:	b084      	sub	sp, #16
    6d44:	af00      	add	r7, sp, #0
    6d46:	1c02      	adds	r2, r0, #0
    6d48:	1dfb      	adds	r3, r7, #7
    6d4a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6d4c:	1c3b      	adds	r3, r7, #0
    6d4e:	330f      	adds	r3, #15
    6d50:	1dfa      	adds	r2, r7, #7
    6d52:	7812      	ldrb	r2, [r2, #0]
    6d54:	09d2      	lsrs	r2, r2, #7
    6d56:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6d58:	1c3b      	adds	r3, r7, #0
    6d5a:	330e      	adds	r3, #14
    6d5c:	1dfa      	adds	r2, r7, #7
    6d5e:	7812      	ldrb	r2, [r2, #0]
    6d60:	0952      	lsrs	r2, r2, #5
    6d62:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6d64:	4b0d      	ldr	r3, [pc, #52]	; (6d9c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6d66:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6d68:	1c3b      	adds	r3, r7, #0
    6d6a:	330f      	adds	r3, #15
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	2b00      	cmp	r3, #0
    6d70:	d10e      	bne.n	6d90 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    6d72:	1c3b      	adds	r3, r7, #0
    6d74:	330f      	adds	r3, #15
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	009b      	lsls	r3, r3, #2
    6d7a:	2210      	movs	r2, #16
    6d7c:	19d2      	adds	r2, r2, r7
    6d7e:	18d3      	adds	r3, r2, r3
    6d80:	3b08      	subs	r3, #8
    6d82:	681a      	ldr	r2, [r3, #0]
    6d84:	1c3b      	adds	r3, r7, #0
    6d86:	330e      	adds	r3, #14
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	01db      	lsls	r3, r3, #7
    6d8c:	18d3      	adds	r3, r2, r3
    6d8e:	e000      	b.n	6d92 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6d90:	2300      	movs	r3, #0
	}
}
    6d92:	1c18      	adds	r0, r3, #0
    6d94:	46bd      	mov	sp, r7
    6d96:	b004      	add	sp, #16
    6d98:	bd80      	pop	{r7, pc}
    6d9a:	46c0      	nop			; (mov r8, r8)
    6d9c:	41004400 	.word	0x41004400

00006da0 <usb_get_state_machine_status>:
 * \brief Get the status of USB module's state machine
 *
 * \param module_inst Pointer to USB module instance
 */
static inline uint8_t usb_get_state_machine_status(struct usb_module *module_inst)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b082      	sub	sp, #8
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    6da8:	687b      	ldr	r3, [r7, #4]
    6daa:	681b      	ldr	r3, [r3, #0]
    6dac:	7b5b      	ldrb	r3, [r3, #13]
    6dae:	b2db      	uxtb	r3, r3
}
    6db0:	1c18      	adds	r0, r3, #0
    6db2:	46bd      	mov	sp, r7
    6db4:	b002      	add	sp, #8
    6db6:	bd80      	pop	{r7, pc}

00006db8 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b082      	sub	sp, #8
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	681a      	ldr	r2, [r3, #0]
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	681b      	ldr	r3, [r3, #0]
    6dc8:	891b      	ldrh	r3, [r3, #8]
    6dca:	b29b      	uxth	r3, r3
    6dcc:	2101      	movs	r1, #1
    6dce:	438b      	bics	r3, r1
    6dd0:	b29b      	uxth	r3, r3
    6dd2:	8113      	strh	r3, [r2, #8]
}
    6dd4:	46bd      	mov	sp, r7
    6dd6:	b002      	add	sp, #8
    6dd8:	bd80      	pop	{r7, pc}
    6dda:	46c0      	nop			; (mov r8, r8)

00006ddc <usb_device_detach>:
 * \brief Detach USB device from the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	b082      	sub	sp, #8
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	681a      	ldr	r2, [r3, #0]
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	681b      	ldr	r3, [r3, #0]
    6dec:	891b      	ldrh	r3, [r3, #8]
    6dee:	b29b      	uxth	r3, r3
    6df0:	2101      	movs	r1, #1
    6df2:	430b      	orrs	r3, r1
    6df4:	b29b      	uxth	r3, r3
    6df6:	8113      	strh	r3, [r2, #8]
}
    6df8:	46bd      	mov	sp, r7
    6dfa:	b002      	add	sp, #8
    6dfc:	bd80      	pop	{r7, pc}
    6dfe:	46c0      	nop			; (mov r8, r8)

00006e00 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b082      	sub	sp, #8
    6e04:	af00      	add	r7, sp, #0
    6e06:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	681b      	ldr	r3, [r3, #0]
    6e0c:	7a9a      	ldrb	r2, [r3, #10]
    6e0e:	237f      	movs	r3, #127	; 0x7f
    6e10:	4013      	ands	r3, r2
    6e12:	b2db      	uxtb	r3, r3
}
    6e14:	1c18      	adds	r0, r3, #0
    6e16:	46bd      	mov	sp, r7
    6e18:	b002      	add	sp, #8
    6e1a:	bd80      	pop	{r7, pc}

00006e1c <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b082      	sub	sp, #8
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
    6e24:	1c0a      	adds	r2, r1, #0
    6e26:	1cfb      	adds	r3, r7, #3
    6e28:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	1cfa      	adds	r2, r7, #3
    6e30:	7812      	ldrb	r2, [r2, #0]
    6e32:	2180      	movs	r1, #128	; 0x80
    6e34:	4249      	negs	r1, r1
    6e36:	430a      	orrs	r2, r1
    6e38:	b2d2      	uxtb	r2, r2
    6e3a:	729a      	strb	r2, [r3, #10]
}
    6e3c:	46bd      	mov	sp, r7
    6e3e:	b002      	add	sp, #8
    6e40:	bd80      	pop	{r7, pc}
    6e42:	46c0      	nop			; (mov r8, r8)

00006e44 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b082      	sub	sp, #8
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	681b      	ldr	r3, [r3, #0]
    6e50:	8a1b      	ldrh	r3, [r3, #16]
    6e52:	b29b      	uxth	r3, r3
    6e54:	08db      	lsrs	r3, r3, #3
    6e56:	055b      	lsls	r3, r3, #21
    6e58:	0d5b      	lsrs	r3, r3, #21
    6e5a:	b29b      	uxth	r3, r3
}
    6e5c:	1c18      	adds	r0, r3, #0
    6e5e:	46bd      	mov	sp, r7
    6e60:	b002      	add	sp, #8
    6e62:	bd80      	pop	{r7, pc}

00006e64 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    6e64:	b580      	push	{r7, lr}
    6e66:	b082      	sub	sp, #8
    6e68:	af00      	add	r7, sp, #0
    6e6a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	681b      	ldr	r3, [r3, #0]
    6e70:	8a1b      	ldrh	r3, [r3, #16]
    6e72:	b29b      	uxth	r3, r3
}
    6e74:	1c18      	adds	r0, r3, #0
    6e76:	46bd      	mov	sp, r7
    6e78:	b002      	add	sp, #8
    6e7a:	bd80      	pop	{r7, pc}

00006e7c <usb_device_send_remote_wake_up>:
 * \brief USB device send the resume wakeup
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	af00      	add	r7, sp, #0
    6e82:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	681a      	ldr	r2, [r3, #0]
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	681b      	ldr	r3, [r3, #0]
    6e8c:	891b      	ldrh	r3, [r3, #8]
    6e8e:	b29b      	uxth	r3, r3
    6e90:	2102      	movs	r1, #2
    6e92:	430b      	orrs	r3, r1
    6e94:	b29b      	uxth	r3, r3
    6e96:	8113      	strh	r3, [r2, #8]
}
    6e98:	46bd      	mov	sp, r7
    6e9a:	b002      	add	sp, #8
    6e9c:	bd80      	pop	{r7, pc}
    6e9e:	46c0      	nop			; (mov r8, r8)

00006ea0 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b082      	sub	sp, #8
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
    6ea8:	1c0a      	adds	r2, r1, #0
    6eaa:	1cfb      	adds	r3, r7, #3
    6eac:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	681b      	ldr	r3, [r3, #0]
    6eb2:	1cfa      	adds	r2, r7, #3
    6eb4:	7811      	ldrb	r1, [r2, #0]
    6eb6:	2203      	movs	r2, #3
    6eb8:	400a      	ands	r2, r1
    6eba:	b2d1      	uxtb	r1, r2
    6ebc:	2203      	movs	r2, #3
    6ebe:	400a      	ands	r2, r1
    6ec0:	0292      	lsls	r2, r2, #10
    6ec2:	8918      	ldrh	r0, [r3, #8]
    6ec4:	4903      	ldr	r1, [pc, #12]	; (6ed4 <usb_device_set_lpm_mode+0x34>)
    6ec6:	4001      	ands	r1, r0
    6ec8:	430a      	orrs	r2, r1
    6eca:	811a      	strh	r2, [r3, #8]
}
    6ecc:	46bd      	mov	sp, r7
    6ece:	b002      	add	sp, #8
    6ed0:	bd80      	pop	{r7, pc}
    6ed2:	46c0      	nop			; (mov r8, r8)
    6ed4:	fffff3ff 	.word	0xfffff3ff

00006ed8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6ed8:	b580      	push	{r7, lr}
    6eda:	b082      	sub	sp, #8
    6edc:	af00      	add	r7, sp, #0
    6ede:	1c02      	adds	r2, r0, #0
    6ee0:	1dfb      	adds	r3, r7, #7
    6ee2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6ee4:	1dfb      	adds	r3, r7, #7
    6ee6:	781b      	ldrb	r3, [r3, #0]
    6ee8:	1c18      	adds	r0, r3, #0
    6eea:	4b03      	ldr	r3, [pc, #12]	; (6ef8 <port_get_group_from_gpio_pin+0x20>)
    6eec:	4798      	blx	r3
    6eee:	1c03      	adds	r3, r0, #0
}
    6ef0:	1c18      	adds	r0, r3, #0
    6ef2:	46bd      	mov	sp, r7
    6ef4:	b002      	add	sp, #8
    6ef6:	bd80      	pop	{r7, pc}
    6ef8:	00006d41 	.word	0x00006d41

00006efc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    6efc:	b580      	push	{r7, lr}
    6efe:	b084      	sub	sp, #16
    6f00:	af00      	add	r7, sp, #0
    6f02:	1c02      	adds	r2, r0, #0
    6f04:	1dfb      	adds	r3, r7, #7
    6f06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6f08:	1dfb      	adds	r3, r7, #7
    6f0a:	781b      	ldrb	r3, [r3, #0]
    6f0c:	1c18      	adds	r0, r3, #0
    6f0e:	4b0c      	ldr	r3, [pc, #48]	; (6f40 <port_pin_get_input_level+0x44>)
    6f10:	4798      	blx	r3
    6f12:	1c03      	adds	r3, r0, #0
    6f14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6f16:	1dfb      	adds	r3, r7, #7
    6f18:	781a      	ldrb	r2, [r3, #0]
    6f1a:	231f      	movs	r3, #31
    6f1c:	4013      	ands	r3, r2
    6f1e:	2201      	movs	r2, #1
    6f20:	1c11      	adds	r1, r2, #0
    6f22:	4099      	lsls	r1, r3
    6f24:	1c0b      	adds	r3, r1, #0
    6f26:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    6f28:	68fb      	ldr	r3, [r7, #12]
    6f2a:	6a1b      	ldr	r3, [r3, #32]
    6f2c:	68ba      	ldr	r2, [r7, #8]
    6f2e:	4013      	ands	r3, r2
    6f30:	1e5a      	subs	r2, r3, #1
    6f32:	4193      	sbcs	r3, r2
    6f34:	b2db      	uxtb	r3, r3
}
    6f36:	1c18      	adds	r0, r3, #0
    6f38:	46bd      	mov	sp, r7
    6f3a:	b004      	add	sp, #16
    6f3c:	bd80      	pop	{r7, pc}
    6f3e:	46c0      	nop			; (mov r8, r8)
    6f40:	00006ed9 	.word	0x00006ed9

00006f44 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    6f44:	b580      	push	{r7, lr}
    6f46:	b084      	sub	sp, #16
    6f48:	af00      	add	r7, sp, #0
    6f4a:	1c02      	adds	r2, r0, #0
    6f4c:	1dfb      	adds	r3, r7, #7
    6f4e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    6f50:	1dfb      	adds	r3, r7, #7
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	4a0b      	ldr	r2, [pc, #44]	; (6f84 <sleepmgr_lock_mode+0x40>)
    6f56:	5cd3      	ldrb	r3, [r2, r3]
    6f58:	2bff      	cmp	r3, #255	; 0xff
    6f5a:	d100      	bne.n	6f5e <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    6f5c:	e7fe      	b.n	6f5c <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    6f5e:	4b0a      	ldr	r3, [pc, #40]	; (6f88 <sleepmgr_lock_mode+0x44>)
    6f60:	4798      	blx	r3
    6f62:	1c03      	adds	r3, r0, #0
    6f64:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    6f66:	1dfb      	adds	r3, r7, #7
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	4a06      	ldr	r2, [pc, #24]	; (6f84 <sleepmgr_lock_mode+0x40>)
    6f6c:	5cd2      	ldrb	r2, [r2, r3]
    6f6e:	3201      	adds	r2, #1
    6f70:	b2d1      	uxtb	r1, r2
    6f72:	4a04      	ldr	r2, [pc, #16]	; (6f84 <sleepmgr_lock_mode+0x40>)
    6f74:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    6f76:	68fb      	ldr	r3, [r7, #12]
    6f78:	1c18      	adds	r0, r3, #0
    6f7a:	4b04      	ldr	r3, [pc, #16]	; (6f8c <sleepmgr_lock_mode+0x48>)
    6f7c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    6f7e:	46bd      	mov	sp, r7
    6f80:	b004      	add	sp, #16
    6f82:	bd80      	pop	{r7, pc}
    6f84:	20006dc4 	.word	0x20006dc4
    6f88:	00006cc9 	.word	0x00006cc9
    6f8c:	00006d11 	.word	0x00006d11

00006f90 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    6f90:	b580      	push	{r7, lr}
    6f92:	b084      	sub	sp, #16
    6f94:	af00      	add	r7, sp, #0
    6f96:	1c02      	adds	r2, r0, #0
    6f98:	1dfb      	adds	r3, r7, #7
    6f9a:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    6f9c:	1dfb      	adds	r3, r7, #7
    6f9e:	781b      	ldrb	r3, [r3, #0]
    6fa0:	4a0b      	ldr	r2, [pc, #44]	; (6fd0 <sleepmgr_unlock_mode+0x40>)
    6fa2:	5cd3      	ldrb	r3, [r2, r3]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d100      	bne.n	6faa <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    6fa8:	e7fe      	b.n	6fa8 <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    6faa:	4b0a      	ldr	r3, [pc, #40]	; (6fd4 <sleepmgr_unlock_mode+0x44>)
    6fac:	4798      	blx	r3
    6fae:	1c03      	adds	r3, r0, #0
    6fb0:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    6fb2:	1dfb      	adds	r3, r7, #7
    6fb4:	781b      	ldrb	r3, [r3, #0]
    6fb6:	4a06      	ldr	r2, [pc, #24]	; (6fd0 <sleepmgr_unlock_mode+0x40>)
    6fb8:	5cd2      	ldrb	r2, [r2, r3]
    6fba:	3a01      	subs	r2, #1
    6fbc:	b2d1      	uxtb	r1, r2
    6fbe:	4a04      	ldr	r2, [pc, #16]	; (6fd0 <sleepmgr_unlock_mode+0x40>)
    6fc0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    6fc2:	68fb      	ldr	r3, [r7, #12]
    6fc4:	1c18      	adds	r0, r3, #0
    6fc6:	4b04      	ldr	r3, [pc, #16]	; (6fd8 <sleepmgr_unlock_mode+0x48>)
    6fc8:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    6fca:	46bd      	mov	sp, r7
    6fcc:	b004      	add	sp, #16
    6fce:	bd80      	pop	{r7, pc}
    6fd0:	20006dc4 	.word	0x20006dc4
    6fd4:	00006cc9 	.word	0x00006cc9
    6fd8:	00006d11 	.word	0x00006d11

00006fdc <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    6fdc:	b580      	push	{r7, lr}
    6fde:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    6fe0:	4b0b      	ldr	r3, [pc, #44]	; (7010 <udd_wait_clock_ready+0x34>)
    6fe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    6fe4:	b29b      	uxth	r3, r3
    6fe6:	1c1a      	adds	r2, r3, #0
    6fe8:	2320      	movs	r3, #32
    6fea:	4013      	ands	r3, r2
    6fec:	d107      	bne.n	6ffe <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	4b07      	ldr	r3, [pc, #28]	; (7010 <udd_wait_clock_ready+0x34>)
    6ff2:	68da      	ldr	r2, [r3, #12]
    6ff4:	23d0      	movs	r3, #208	; 0xd0
    6ff6:	4013      	ands	r3, r2
    6ff8:	2bd0      	cmp	r3, #208	; 0xd0
    6ffa:	d1f9      	bne.n	6ff0 <udd_wait_clock_ready+0x14>
    6ffc:	e005      	b.n	700a <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    6ffe:	46c0      	nop			; (mov r8, r8)
    7000:	4b03      	ldr	r3, [pc, #12]	; (7010 <udd_wait_clock_ready+0x34>)
    7002:	68da      	ldr	r2, [r3, #12]
    7004:	2310      	movs	r3, #16
    7006:	4013      	ands	r3, r2
    7008:	d0fa      	beq.n	7000 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    700a:	46bd      	mov	sp, r7
    700c:	bd80      	pop	{r7, pc}
    700e:	46c0      	nop			; (mov r8, r8)
    7010:	40000800 	.word	0x40000800

00007014 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    7014:	b580      	push	{r7, lr}
    7016:	b084      	sub	sp, #16
    7018:	af00      	add	r7, sp, #0
    701a:	1c02      	adds	r2, r0, #0
    701c:	1dfb      	adds	r3, r7, #7
    701e:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    7020:	1c3a      	adds	r2, r7, #0
    7022:	320c      	adds	r2, #12
    7024:	4b16      	ldr	r3, [pc, #88]	; (7080 <udd_sleep_mode+0x6c>)
    7026:	1c11      	adds	r1, r2, #0
    7028:	1c1a      	adds	r2, r3, #0
    702a:	2304      	movs	r3, #4
    702c:	1c08      	adds	r0, r1, #0
    702e:	1c11      	adds	r1, r2, #0
    7030:	1c1a      	adds	r2, r3, #0
    7032:	4b14      	ldr	r3, [pc, #80]	; (7084 <udd_sleep_mode+0x70>)
    7034:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    7036:	4b14      	ldr	r3, [pc, #80]	; (7088 <udd_sleep_mode+0x74>)
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	1dfa      	adds	r2, r7, #7
    703c:	7812      	ldrb	r2, [r2, #0]
    703e:	429a      	cmp	r2, r3
    7040:	d01b      	beq.n	707a <udd_sleep_mode+0x66>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    7042:	1dfb      	adds	r3, r7, #7
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	2b00      	cmp	r3, #0
    7048:	d007      	beq.n	705a <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    704a:	1dfb      	adds	r3, r7, #7
    704c:	781b      	ldrb	r3, [r3, #0]
    704e:	1c3a      	adds	r2, r7, #0
    7050:	320c      	adds	r2, #12
    7052:	5cd3      	ldrb	r3, [r2, r3]
    7054:	1c18      	adds	r0, r3, #0
    7056:	4b0d      	ldr	r3, [pc, #52]	; (708c <udd_sleep_mode+0x78>)
    7058:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    705a:	4b0b      	ldr	r3, [pc, #44]	; (7088 <udd_sleep_mode+0x74>)
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	2b00      	cmp	r3, #0
    7060:	d007      	beq.n	7072 <udd_sleep_mode+0x5e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    7062:	4b09      	ldr	r3, [pc, #36]	; (7088 <udd_sleep_mode+0x74>)
    7064:	781b      	ldrb	r3, [r3, #0]
    7066:	1c3a      	adds	r2, r7, #0
    7068:	320c      	adds	r2, #12
    706a:	5cd3      	ldrb	r3, [r2, r3]
    706c:	1c18      	adds	r0, r3, #0
    706e:	4b08      	ldr	r3, [pc, #32]	; (7090 <udd_sleep_mode+0x7c>)
    7070:	4798      	blx	r3
	}
	udd_state = new_state;
    7072:	4b05      	ldr	r3, [pc, #20]	; (7088 <udd_sleep_mode+0x74>)
    7074:	1dfa      	adds	r2, r7, #7
    7076:	7812      	ldrb	r2, [r2, #0]
    7078:	701a      	strb	r2, [r3, #0]
}
    707a:	46bd      	mov	sp, r7
    707c:	b004      	add	sp, #16
    707e:	bd80      	pop	{r7, pc}
    7080:	0000b33c 	.word	0x0000b33c
    7084:	0000b0ad 	.word	0x0000b0ad
    7088:	20006d98 	.word	0x20006d98
    708c:	00006f45 	.word	0x00006f45
    7090:	00006f91 	.word	0x00006f91

00007094 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    7094:	b580      	push	{r7, lr}
    7096:	b082      	sub	sp, #8
    7098:	af00      	add	r7, sp, #0
    709a:	1c02      	adds	r2, r0, #0
    709c:	1dfb      	adds	r3, r7, #7
    709e:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    70a0:	1dfb      	adds	r3, r7, #7
    70a2:	781a      	ldrb	r2, [r3, #0]
    70a4:	230f      	movs	r3, #15
    70a6:	4013      	ands	r3, r2
    70a8:	005a      	lsls	r2, r3, #1
    70aa:	1dfb      	adds	r3, r7, #7
    70ac:	781b      	ldrb	r3, [r3, #0]
    70ae:	09db      	lsrs	r3, r3, #7
    70b0:	b2db      	uxtb	r3, r3
    70b2:	18d3      	adds	r3, r2, r3
    70b4:	1e9a      	subs	r2, r3, #2
    70b6:	1c13      	adds	r3, r2, #0
    70b8:	009b      	lsls	r3, r3, #2
    70ba:	189b      	adds	r3, r3, r2
    70bc:	009b      	lsls	r3, r3, #2
    70be:	4a03      	ldr	r2, [pc, #12]	; (70cc <udd_ep_get_job+0x38>)
    70c0:	189b      	adds	r3, r3, r2
}
    70c2:	1c18      	adds	r0, r3, #0
    70c4:	46bd      	mov	sp, r7
    70c6:	b002      	add	sp, #8
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	20006c80 	.word	0x20006c80

000070d0 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    70d0:	b590      	push	{r4, r7, lr}
    70d2:	b089      	sub	sp, #36	; 0x24
    70d4:	af00      	add	r7, sp, #0
    70d6:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    70dc:	1c3b      	adds	r3, r7, #0
    70de:	3317      	adds	r3, #23
    70e0:	69ba      	ldr	r2, [r7, #24]
    70e2:	7992      	ldrb	r2, [r2, #6]
    70e4:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    70e6:	1c3b      	adds	r3, r7, #0
    70e8:	3317      	adds	r3, #23
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	1c18      	adds	r0, r3, #0
    70ee:	4b55      	ldr	r3, [pc, #340]	; (7244 <udd_ep_trans_in_next+0x174>)
    70f0:	4798      	blx	r3
    70f2:	1c03      	adds	r3, r0, #0
    70f4:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    70f6:	1c3b      	adds	r3, r7, #0
    70f8:	330f      	adds	r3, #15
    70fa:	1c3a      	adds	r2, r7, #0
    70fc:	3217      	adds	r2, #23
    70fe:	7811      	ldrb	r1, [r2, #0]
    7100:	220f      	movs	r2, #15
    7102:	400a      	ands	r2, r1
    7104:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    7106:	1c3b      	adds	r3, r7, #0
    7108:	330c      	adds	r3, #12
    710a:	693a      	ldr	r2, [r7, #16]
    710c:	8a12      	ldrh	r2, [r2, #16]
    710e:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    7110:	1c3b      	adds	r3, r7, #0
    7112:	330a      	adds	r3, #10
    7114:	69ba      	ldr	r2, [r7, #24]
    7116:	8852      	ldrh	r2, [r2, #2]
    7118:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    711a:	693b      	ldr	r3, [r7, #16]
    711c:	68da      	ldr	r2, [r3, #12]
    711e:	1c3b      	adds	r3, r7, #0
    7120:	330a      	adds	r3, #10
    7122:	881b      	ldrh	r3, [r3, #0]
    7124:	18d2      	adds	r2, r2, r3
    7126:	693b      	ldr	r3, [r7, #16]
    7128:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    712a:	693b      	ldr	r3, [r7, #16]
    712c:	68da      	ldr	r2, [r3, #12]
    712e:	693b      	ldr	r3, [r7, #16]
    7130:	689b      	ldr	r3, [r3, #8]
    7132:	429a      	cmp	r2, r3
    7134:	d053      	beq.n	71de <udd_ep_trans_in_next+0x10e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7136:	693b      	ldr	r3, [r7, #16]
    7138:	689b      	ldr	r3, [r3, #8]
    713a:	b299      	uxth	r1, r3
    713c:	693b      	ldr	r3, [r7, #16]
    713e:	68db      	ldr	r3, [r3, #12]
    7140:	b29a      	uxth	r2, r3
    7142:	1c3b      	adds	r3, r7, #0
    7144:	331e      	adds	r3, #30
    7146:	1a8a      	subs	r2, r1, r2
    7148:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    714a:	1c3b      	adds	r3, r7, #0
    714c:	331e      	adds	r3, #30
    714e:	881a      	ldrh	r2, [r3, #0]
    7150:	4b3d      	ldr	r3, [pc, #244]	; (7248 <udd_ep_trans_in_next+0x178>)
    7152:	429a      	cmp	r2, r3
    7154:	d90e      	bls.n	7174 <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    7156:	1c3b      	adds	r3, r7, #0
    7158:	330c      	adds	r3, #12
    715a:	881a      	ldrh	r2, [r3, #0]
    715c:	493a      	ldr	r1, [pc, #232]	; (7248 <udd_ep_trans_in_next+0x178>)
    715e:	4b3b      	ldr	r3, [pc, #236]	; (724c <udd_ep_trans_in_next+0x17c>)
    7160:	1c08      	adds	r0, r1, #0
    7162:	1c11      	adds	r1, r2, #0
    7164:	4798      	blx	r3
    7166:	1c0b      	adds	r3, r1, #0
    7168:	b29a      	uxth	r2, r3
    716a:	1c3b      	adds	r3, r7, #0
    716c:	331e      	adds	r3, #30
    716e:	4936      	ldr	r1, [pc, #216]	; (7248 <udd_ep_trans_in_next+0x178>)
    7170:	1a8a      	subs	r2, r1, r2
    7172:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    7174:	693b      	ldr	r3, [r7, #16]
    7176:	7c9b      	ldrb	r3, [r3, #18]
    7178:	079b      	lsls	r3, r3, #30
    717a:	0fdb      	lsrs	r3, r3, #31
    717c:	b2db      	uxtb	r3, r3
    717e:	2b00      	cmp	r3, #0
    7180:	d00f      	beq.n	71a2 <udd_ep_trans_in_next+0xd2>
    7182:	1c3a      	adds	r2, r7, #0
    7184:	321e      	adds	r2, #30
    7186:	1c3b      	adds	r3, r7, #0
    7188:	330c      	adds	r3, #12
    718a:	8811      	ldrh	r1, [r2, #0]
    718c:	881a      	ldrh	r2, [r3, #0]
    718e:	4b30      	ldr	r3, [pc, #192]	; (7250 <udd_ep_trans_in_next+0x180>)
    7190:	1c08      	adds	r0, r1, #0
    7192:	1c11      	adds	r1, r2, #0
    7194:	4798      	blx	r3
    7196:	1c0b      	adds	r3, r1, #0
    7198:	b29b      	uxth	r3, r3
    719a:	2b00      	cmp	r3, #0
    719c:	d101      	bne.n	71a2 <udd_ep_trans_in_next+0xd2>
    719e:	2301      	movs	r3, #1
    71a0:	e000      	b.n	71a4 <udd_ep_trans_in_next+0xd4>
    71a2:	2300      	movs	r3, #0
    71a4:	b2db      	uxtb	r3, r3
    71a6:	1c1a      	adds	r2, r3, #0
    71a8:	2301      	movs	r3, #1
    71aa:	4013      	ands	r3, r2
    71ac:	b2d9      	uxtb	r1, r3
    71ae:	693b      	ldr	r3, [r7, #16]
    71b0:	2201      	movs	r2, #1
    71b2:	400a      	ands	r2, r1
    71b4:	1892      	adds	r2, r2, r2
    71b6:	7c99      	ldrb	r1, [r3, #18]
    71b8:	2002      	movs	r0, #2
    71ba:	4381      	bics	r1, r0
    71bc:	430a      	orrs	r2, r1
    71be:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    71c0:	693b      	ldr	r3, [r7, #16]
    71c2:	685a      	ldr	r2, [r3, #4]
    71c4:	693b      	ldr	r3, [r7, #16]
    71c6:	68db      	ldr	r3, [r3, #12]
    71c8:	18d2      	adds	r2, r2, r3
    71ca:	1c3b      	adds	r3, r7, #0
    71cc:	331e      	adds	r3, #30
    71ce:	881b      	ldrh	r3, [r3, #0]
    71d0:	4820      	ldr	r0, [pc, #128]	; (7254 <udd_ep_trans_in_next+0x184>)
    71d2:	1c39      	adds	r1, r7, #0
    71d4:	310f      	adds	r1, #15
    71d6:	7809      	ldrb	r1, [r1, #0]
    71d8:	4c1f      	ldr	r4, [pc, #124]	; (7258 <udd_ep_trans_in_next+0x188>)
    71da:	47a0      	blx	r4
		return;
    71dc:	e02f      	b.n	723e <udd_ep_trans_in_next+0x16e>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    71de:	693b      	ldr	r3, [r7, #16]
    71e0:	7c9b      	ldrb	r3, [r3, #18]
    71e2:	079b      	lsls	r3, r3, #30
    71e4:	0fdb      	lsrs	r3, r3, #31
    71e6:	b2db      	uxtb	r3, r3
    71e8:	2b00      	cmp	r3, #0
    71ea:	d014      	beq.n	7216 <udd_ep_trans_in_next+0x146>
		ptr_job->b_shortpacket = false;
    71ec:	693b      	ldr	r3, [r7, #16]
    71ee:	7c9a      	ldrb	r2, [r3, #18]
    71f0:	2102      	movs	r1, #2
    71f2:	438a      	bics	r2, r1
    71f4:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    71f6:	693b      	ldr	r3, [r7, #16]
    71f8:	685a      	ldr	r2, [r3, #4]
    71fa:	693b      	ldr	r3, [r7, #16]
    71fc:	68db      	ldr	r3, [r3, #12]
    71fe:	18d3      	adds	r3, r2, r3
    7200:	4914      	ldr	r1, [pc, #80]	; (7254 <udd_ep_trans_in_next+0x184>)
    7202:	1c3a      	adds	r2, r7, #0
    7204:	320f      	adds	r2, #15
    7206:	7812      	ldrb	r2, [r2, #0]
    7208:	1c08      	adds	r0, r1, #0
    720a:	1c11      	adds	r1, r2, #0
    720c:	1c1a      	adds	r2, r3, #0
    720e:	2300      	movs	r3, #0
    7210:	4c11      	ldr	r4, [pc, #68]	; (7258 <udd_ep_trans_in_next+0x188>)
    7212:	47a0      	blx	r4
		return;
    7214:	e013      	b.n	723e <udd_ep_trans_in_next+0x16e>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    7216:	693b      	ldr	r3, [r7, #16]
    7218:	7c9a      	ldrb	r2, [r3, #18]
    721a:	2101      	movs	r1, #1
    721c:	438a      	bics	r2, r1
    721e:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    7220:	693b      	ldr	r3, [r7, #16]
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	2b00      	cmp	r3, #0
    7226:	d00a      	beq.n	723e <udd_ep_trans_in_next+0x16e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    7228:	693b      	ldr	r3, [r7, #16]
    722a:	681c      	ldr	r4, [r3, #0]
    722c:	693b      	ldr	r3, [r7, #16]
    722e:	68da      	ldr	r2, [r3, #12]
    7230:	1c3b      	adds	r3, r7, #0
    7232:	3317      	adds	r3, #23
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	2000      	movs	r0, #0
    7238:	1c11      	adds	r1, r2, #0
    723a:	1c1a      	adds	r2, r3, #0
    723c:	47a0      	blx	r4
	}
}
    723e:	46bd      	mov	sp, r7
    7240:	b009      	add	sp, #36	; 0x24
    7242:	bd90      	pop	{r4, r7, pc}
    7244:	00007095 	.word	0x00007095
    7248:	00001fff 	.word	0x00001fff
    724c:	0000afc5 	.word	0x0000afc5
    7250:	0000af05 	.word	0x0000af05
    7254:	20006e5c 	.word	0x20006e5c
    7258:	00009871 	.word	0x00009871

0000725c <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    725c:	b5b0      	push	{r4, r5, r7, lr}
    725e:	b088      	sub	sp, #32
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7264:	687b      	ldr	r3, [r7, #4]
    7266:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7268:	1c3b      	adds	r3, r7, #0
    726a:	3317      	adds	r3, #23
    726c:	69ba      	ldr	r2, [r7, #24]
    726e:	7992      	ldrb	r2, [r2, #6]
    7270:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    7272:	1c3b      	adds	r3, r7, #0
    7274:	3317      	adds	r3, #23
    7276:	781b      	ldrb	r3, [r3, #0]
    7278:	1c18      	adds	r0, r3, #0
    727a:	4b67      	ldr	r3, [pc, #412]	; (7418 <udd_ep_trans_out_next+0x1bc>)
    727c:	4798      	blx	r3
    727e:	1c03      	adds	r3, r0, #0
    7280:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    7282:	1c3b      	adds	r3, r7, #0
    7284:	330f      	adds	r3, #15
    7286:	1c3a      	adds	r2, r7, #0
    7288:	3217      	adds	r2, #23
    728a:	7811      	ldrb	r1, [r2, #0]
    728c:	220f      	movs	r2, #15
    728e:	400a      	ands	r2, r1
    7290:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    7292:	1c3b      	adds	r3, r7, #0
    7294:	330c      	adds	r3, #12
    7296:	693a      	ldr	r2, [r7, #16]
    7298:	8a12      	ldrh	r2, [r2, #16]
    729a:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    729c:	1c3b      	adds	r3, r7, #0
    729e:	330a      	adds	r3, #10
    72a0:	69ba      	ldr	r2, [r7, #24]
    72a2:	8812      	ldrh	r2, [r2, #0]
    72a4:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    72a6:	693b      	ldr	r3, [r7, #16]
    72a8:	7c9b      	ldrb	r3, [r3, #18]
    72aa:	075b      	lsls	r3, r3, #29
    72ac:	0fdb      	lsrs	r3, r3, #31
    72ae:	b2db      	uxtb	r3, r3
    72b0:	2b00      	cmp	r3, #0
    72b2:	d01a      	beq.n	72ea <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    72b4:	693b      	ldr	r3, [r7, #16]
    72b6:	685a      	ldr	r2, [r3, #4]
    72b8:	693b      	ldr	r3, [r7, #16]
    72ba:	68db      	ldr	r3, [r3, #12]
    72bc:	18d5      	adds	r5, r2, r3
    72be:	1c3b      	adds	r3, r7, #0
    72c0:	330f      	adds	r3, #15
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	3b01      	subs	r3, #1
    72c6:	00da      	lsls	r2, r3, #3
    72c8:	4b54      	ldr	r3, [pc, #336]	; (741c <udd_ep_trans_out_next+0x1c0>)
    72ca:	18d4      	adds	r4, r2, r3
    72cc:	693b      	ldr	r3, [r7, #16]
    72ce:	6899      	ldr	r1, [r3, #8]
    72d0:	1c3b      	adds	r3, r7, #0
    72d2:	330c      	adds	r3, #12
    72d4:	881a      	ldrh	r2, [r3, #0]
    72d6:	4b52      	ldr	r3, [pc, #328]	; (7420 <udd_ep_trans_out_next+0x1c4>)
    72d8:	1c08      	adds	r0, r1, #0
    72da:	1c11      	adds	r1, r2, #0
    72dc:	4798      	blx	r3
    72de:	1c0b      	adds	r3, r1, #0
    72e0:	1c28      	adds	r0, r5, #0
    72e2:	1c21      	adds	r1, r4, #0
    72e4:	1c1a      	adds	r2, r3, #0
    72e6:	4b4f      	ldr	r3, [pc, #316]	; (7424 <udd_ep_trans_out_next+0x1c8>)
    72e8:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    72ea:	693b      	ldr	r3, [r7, #16]
    72ec:	68da      	ldr	r2, [r3, #12]
    72ee:	1c3b      	adds	r3, r7, #0
    72f0:	330a      	adds	r3, #10
    72f2:	881b      	ldrh	r3, [r3, #0]
    72f4:	18d2      	adds	r2, r2, r3
    72f6:	693b      	ldr	r3, [r7, #16]
    72f8:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    72fa:	693b      	ldr	r3, [r7, #16]
    72fc:	68da      	ldr	r2, [r3, #12]
    72fe:	693b      	ldr	r3, [r7, #16]
    7300:	689b      	ldr	r3, [r3, #8]
    7302:	429a      	cmp	r2, r3
    7304:	d903      	bls.n	730e <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    7306:	693b      	ldr	r3, [r7, #16]
    7308:	689a      	ldr	r2, [r3, #8]
    730a:	693b      	ldr	r3, [r7, #16]
    730c:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    730e:	69bb      	ldr	r3, [r7, #24]
    7310:	889b      	ldrh	r3, [r3, #4]
    7312:	1c3a      	adds	r2, r7, #0
    7314:	320a      	adds	r2, #10
    7316:	8812      	ldrh	r2, [r2, #0]
    7318:	429a      	cmp	r2, r3
    731a:	d165      	bne.n	73e8 <udd_ep_trans_out_next+0x18c>
    731c:	693b      	ldr	r3, [r7, #16]
    731e:	68da      	ldr	r2, [r3, #12]
    7320:	693b      	ldr	r3, [r7, #16]
    7322:	689b      	ldr	r3, [r3, #8]
    7324:	429a      	cmp	r2, r3
    7326:	d05f      	beq.n	73e8 <udd_ep_trans_out_next+0x18c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    7328:	693b      	ldr	r3, [r7, #16]
    732a:	689b      	ldr	r3, [r3, #8]
    732c:	b299      	uxth	r1, r3
    732e:	693b      	ldr	r3, [r7, #16]
    7330:	68db      	ldr	r3, [r3, #12]
    7332:	b29a      	uxth	r2, r3
    7334:	1c3b      	adds	r3, r7, #0
    7336:	331e      	adds	r3, #30
    7338:	1a8a      	subs	r2, r1, r2
    733a:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    733c:	1c3b      	adds	r3, r7, #0
    733e:	331e      	adds	r3, #30
    7340:	881a      	ldrh	r2, [r3, #0]
    7342:	4b39      	ldr	r3, [pc, #228]	; (7428 <udd_ep_trans_out_next+0x1cc>)
    7344:	429a      	cmp	r2, r3
    7346:	d90f      	bls.n	7368 <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    7348:	1c3b      	adds	r3, r7, #0
    734a:	330c      	adds	r3, #12
    734c:	881a      	ldrh	r2, [r3, #0]
    734e:	4936      	ldr	r1, [pc, #216]	; (7428 <udd_ep_trans_out_next+0x1cc>)
    7350:	4b36      	ldr	r3, [pc, #216]	; (742c <udd_ep_trans_out_next+0x1d0>)
    7352:	1c08      	adds	r0, r1, #0
    7354:	1c11      	adds	r1, r2, #0
    7356:	4798      	blx	r3
    7358:	1c0b      	adds	r3, r1, #0
    735a:	b29a      	uxth	r2, r3
    735c:	1c3b      	adds	r3, r7, #0
    735e:	331e      	adds	r3, #30
    7360:	4931      	ldr	r1, [pc, #196]	; (7428 <udd_ep_trans_out_next+0x1cc>)
    7362:	1a8a      	subs	r2, r1, r2
    7364:	801a      	strh	r2, [r3, #0]
    7366:	e012      	b.n	738e <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    7368:	1c3a      	adds	r2, r7, #0
    736a:	321e      	adds	r2, #30
    736c:	1c3b      	adds	r3, r7, #0
    736e:	330c      	adds	r3, #12
    7370:	8811      	ldrh	r1, [r2, #0]
    7372:	881a      	ldrh	r2, [r3, #0]
    7374:	4b2a      	ldr	r3, [pc, #168]	; (7420 <udd_ep_trans_out_next+0x1c4>)
    7376:	1c08      	adds	r0, r1, #0
    7378:	1c11      	adds	r1, r2, #0
    737a:	4798      	blx	r3
    737c:	1c0b      	adds	r3, r1, #0
    737e:	b29a      	uxth	r2, r3
    7380:	1c3b      	adds	r3, r7, #0
    7382:	331e      	adds	r3, #30
    7384:	1c39      	adds	r1, r7, #0
    7386:	311e      	adds	r1, #30
    7388:	8809      	ldrh	r1, [r1, #0]
    738a:	1a8a      	subs	r2, r1, r2
    738c:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    738e:	1c3a      	adds	r2, r7, #0
    7390:	321e      	adds	r2, #30
    7392:	1c3b      	adds	r3, r7, #0
    7394:	330c      	adds	r3, #12
    7396:	8812      	ldrh	r2, [r2, #0]
    7398:	881b      	ldrh	r3, [r3, #0]
    739a:	429a      	cmp	r2, r3
    739c:	d215      	bcs.n	73ca <udd_ep_trans_out_next+0x16e>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    739e:	693b      	ldr	r3, [r7, #16]
    73a0:	7c9a      	ldrb	r2, [r3, #18]
    73a2:	2104      	movs	r1, #4
    73a4:	430a      	orrs	r2, r1
    73a6:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    73a8:	1c3b      	adds	r3, r7, #0
    73aa:	330f      	adds	r3, #15
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	3b01      	subs	r3, #1
    73b0:	00da      	lsls	r2, r3, #3
    73b2:	4b1a      	ldr	r3, [pc, #104]	; (741c <udd_ep_trans_out_next+0x1c0>)
    73b4:	18d2      	adds	r2, r2, r3
    73b6:	1c3b      	adds	r3, r7, #0
    73b8:	330c      	adds	r3, #12
    73ba:	881b      	ldrh	r3, [r3, #0]
    73bc:	481c      	ldr	r0, [pc, #112]	; (7430 <udd_ep_trans_out_next+0x1d4>)
    73be:	1c39      	adds	r1, r7, #0
    73c0:	310f      	adds	r1, #15
    73c2:	7809      	ldrb	r1, [r1, #0]
    73c4:	4c1b      	ldr	r4, [pc, #108]	; (7434 <udd_ep_trans_out_next+0x1d8>)
    73c6:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    73c8:	e022      	b.n	7410 <udd_ep_trans_out_next+0x1b4>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    73ca:	693b      	ldr	r3, [r7, #16]
    73cc:	685a      	ldr	r2, [r3, #4]
    73ce:	693b      	ldr	r3, [r7, #16]
    73d0:	68db      	ldr	r3, [r3, #12]
    73d2:	18d2      	adds	r2, r2, r3
    73d4:	1c3b      	adds	r3, r7, #0
    73d6:	331e      	adds	r3, #30
    73d8:	881b      	ldrh	r3, [r3, #0]
    73da:	4815      	ldr	r0, [pc, #84]	; (7430 <udd_ep_trans_out_next+0x1d4>)
    73dc:	1c39      	adds	r1, r7, #0
    73de:	310f      	adds	r1, #15
    73e0:	7809      	ldrb	r1, [r1, #0]
    73e2:	4c14      	ldr	r4, [pc, #80]	; (7434 <udd_ep_trans_out_next+0x1d8>)
    73e4:	47a0      	blx	r4
		}
		return;
    73e6:	e013      	b.n	7410 <udd_ep_trans_out_next+0x1b4>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    73e8:	693b      	ldr	r3, [r7, #16]
    73ea:	7c9a      	ldrb	r2, [r3, #18]
    73ec:	2101      	movs	r1, #1
    73ee:	438a      	bics	r2, r1
    73f0:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    73f2:	693b      	ldr	r3, [r7, #16]
    73f4:	681b      	ldr	r3, [r3, #0]
    73f6:	2b00      	cmp	r3, #0
    73f8:	d00a      	beq.n	7410 <udd_ep_trans_out_next+0x1b4>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    73fa:	693b      	ldr	r3, [r7, #16]
    73fc:	681c      	ldr	r4, [r3, #0]
    73fe:	693b      	ldr	r3, [r7, #16]
    7400:	68da      	ldr	r2, [r3, #12]
    7402:	1c3b      	adds	r3, r7, #0
    7404:	3317      	adds	r3, #23
    7406:	781b      	ldrb	r3, [r3, #0]
    7408:	2000      	movs	r0, #0
    740a:	1c11      	adds	r1, r2, #0
    740c:	1c1a      	adds	r2, r3, #0
    740e:	47a0      	blx	r4
	}
}
    7410:	46bd      	mov	sp, r7
    7412:	b008      	add	sp, #32
    7414:	bdb0      	pop	{r4, r5, r7, pc}
    7416:	46c0      	nop			; (mov r8, r8)
    7418:	00007095 	.word	0x00007095
    741c:	20006e24 	.word	0x20006e24
    7420:	0000af05 	.word	0x0000af05
    7424:	0000b0ad 	.word	0x0000b0ad
    7428:	00001fff 	.word	0x00001fff
    742c:	0000afc5 	.word	0x0000afc5
    7430:	20006e5c 	.word	0x20006e5c
    7434:	00009929 	.word	0x00009929

00007438 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    7438:	b580      	push	{r7, lr}
    743a:	b084      	sub	sp, #16
    743c:	af00      	add	r7, sp, #0
    743e:	6078      	str	r0, [r7, #4]
    7440:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    7446:	1c3b      	adds	r3, r7, #0
    7448:	330b      	adds	r3, #11
    744a:	68fa      	ldr	r2, [r7, #12]
    744c:	7992      	ldrb	r2, [r2, #6]
    744e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    7450:	1c3b      	adds	r3, r7, #0
    7452:	330b      	adds	r3, #11
    7454:	781b      	ldrb	r3, [r3, #0]
    7456:	b25b      	sxtb	r3, r3
    7458:	2b00      	cmp	r3, #0
    745a:	da04      	bge.n	7466 <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    745c:	683b      	ldr	r3, [r7, #0]
    745e:	1c18      	adds	r0, r3, #0
    7460:	4b04      	ldr	r3, [pc, #16]	; (7474 <udd_ep_transfer_process+0x3c>)
    7462:	4798      	blx	r3
    7464:	e003      	b.n	746e <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    7466:	683b      	ldr	r3, [r7, #0]
    7468:	1c18      	adds	r0, r3, #0
    746a:	4b03      	ldr	r3, [pc, #12]	; (7478 <udd_ep_transfer_process+0x40>)
    746c:	4798      	blx	r3
	}
}
    746e:	46bd      	mov	sp, r7
    7470:	b004      	add	sp, #16
    7472:	bd80      	pop	{r7, pc}
    7474:	000070d1 	.word	0x000070d1
    7478:	0000725d 	.word	0x0000725d

0000747c <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    747c:	b590      	push	{r4, r7, lr}
    747e:	b085      	sub	sp, #20
    7480:	af00      	add	r7, sp, #0
    7482:	1c02      	adds	r2, r0, #0
    7484:	1dfb      	adds	r3, r7, #7
    7486:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    7488:	4a15      	ldr	r2, [pc, #84]	; (74e0 <udd_ep_abort+0x64>)
    748a:	1dfb      	adds	r3, r7, #7
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	1c10      	adds	r0, r2, #0
    7490:	1c19      	adds	r1, r3, #0
    7492:	4b14      	ldr	r3, [pc, #80]	; (74e4 <udd_ep_abort+0x68>)
    7494:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    7496:	1dfb      	adds	r3, r7, #7
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	1c18      	adds	r0, r3, #0
    749c:	4b12      	ldr	r3, [pc, #72]	; (74e8 <udd_ep_abort+0x6c>)
    749e:	4798      	blx	r3
    74a0:	1c03      	adds	r3, r0, #0
    74a2:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    74a4:	68fb      	ldr	r3, [r7, #12]
    74a6:	7c9b      	ldrb	r3, [r3, #18]
    74a8:	07db      	lsls	r3, r3, #31
    74aa:	0fdb      	lsrs	r3, r3, #31
    74ac:	b2db      	uxtb	r3, r3
    74ae:	2b00      	cmp	r3, #0
    74b0:	d100      	bne.n	74b4 <udd_ep_abort+0x38>
		return;
    74b2:	e012      	b.n	74da <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    74b4:	68fb      	ldr	r3, [r7, #12]
    74b6:	7c9a      	ldrb	r2, [r3, #18]
    74b8:	2101      	movs	r1, #1
    74ba:	438a      	bics	r2, r1
    74bc:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    74be:	68fb      	ldr	r3, [r7, #12]
    74c0:	681b      	ldr	r3, [r3, #0]
    74c2:	2b00      	cmp	r3, #0
    74c4:	d009      	beq.n	74da <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    74c6:	68fb      	ldr	r3, [r7, #12]
    74c8:	681c      	ldr	r4, [r3, #0]
    74ca:	68fb      	ldr	r3, [r7, #12]
    74cc:	68da      	ldr	r2, [r3, #12]
    74ce:	1dfb      	adds	r3, r7, #7
    74d0:	781b      	ldrb	r3, [r3, #0]
    74d2:	2001      	movs	r0, #1
    74d4:	1c11      	adds	r1, r2, #0
    74d6:	1c1a      	adds	r2, r3, #0
    74d8:	47a0      	blx	r4
	}
}
    74da:	46bd      	mov	sp, r7
    74dc:	b005      	add	sp, #20
    74de:	bd90      	pop	{r4, r7, pc}
    74e0:	20006e5c 	.word	0x20006e5c
    74e4:	00009611 	.word	0x00009611
    74e8:	00007095 	.word	0x00007095

000074ec <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    74ec:	b580      	push	{r7, lr}
    74ee:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21
	return false;
    74f0:	2300      	movs	r3, #0
#endif
}
    74f2:	1c18      	adds	r0, r3, #0
    74f4:	46bd      	mov	sp, r7
    74f6:	bd80      	pop	{r7, pc}

000074f8 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    74f8:	b580      	push	{r7, lr}
    74fa:	af00      	add	r7, sp, #0
	return usb_device_get_frame_number(&usb_device);
    74fc:	4b03      	ldr	r3, [pc, #12]	; (750c <udd_get_frame_number+0x14>)
    74fe:	1c18      	adds	r0, r3, #0
    7500:	4b03      	ldr	r3, [pc, #12]	; (7510 <udd_get_frame_number+0x18>)
    7502:	4798      	blx	r3
    7504:	1c03      	adds	r3, r0, #0
}
    7506:	1c18      	adds	r0, r3, #0
    7508:	46bd      	mov	sp, r7
    750a:	bd80      	pop	{r7, pc}
    750c:	20006e5c 	.word	0x20006e5c
    7510:	00006e45 	.word	0x00006e45

00007514 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    7514:	b580      	push	{r7, lr}
    7516:	af00      	add	r7, sp, #0
	return usb_device_get_micro_frame_number(&usb_device);
    7518:	4b03      	ldr	r3, [pc, #12]	; (7528 <udd_get_micro_frame_number+0x14>)
    751a:	1c18      	adds	r0, r3, #0
    751c:	4b03      	ldr	r3, [pc, #12]	; (752c <udd_get_micro_frame_number+0x18>)
    751e:	4798      	blx	r3
    7520:	1c03      	adds	r3, r0, #0
}
    7522:	1c18      	adds	r0, r3, #0
    7524:	46bd      	mov	sp, r7
    7526:	bd80      	pop	{r7, pc}
    7528:	20006e5c 	.word	0x20006e5c
    752c:	00006e65 	.word	0x00006e65

00007530 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    7530:	b580      	push	{r7, lr}
    7532:	b084      	sub	sp, #16
    7534:	af00      	add	r7, sp, #0
    7536:	1c02      	adds	r2, r0, #0
    7538:	1dfb      	adds	r3, r7, #7
    753a:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    753c:	1c3b      	adds	r3, r7, #0
    753e:	3308      	adds	r3, #8
    7540:	1c18      	adds	r0, r3, #0
    7542:	4b19      	ldr	r3, [pc, #100]	; (75a8 <udd_ep_free+0x78>)
    7544:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    7546:	1c3b      	adds	r3, r7, #0
    7548:	330f      	adds	r3, #15
    754a:	1dfa      	adds	r2, r7, #7
    754c:	7811      	ldrb	r1, [r2, #0]
    754e:	220f      	movs	r2, #15
    7550:	400a      	ands	r2, r1
    7552:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    7554:	1dfb      	adds	r3, r7, #7
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	1c18      	adds	r0, r3, #0
    755a:	4b14      	ldr	r3, [pc, #80]	; (75ac <udd_ep_free+0x7c>)
    755c:	4798      	blx	r3

	config_ep.ep_address = ep;
    755e:	1c3b      	adds	r3, r7, #0
    7560:	3308      	adds	r3, #8
    7562:	1dfa      	adds	r2, r7, #7
    7564:	7812      	ldrb	r2, [r2, #0]
    7566:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    7568:	1c3b      	adds	r3, r7, #0
    756a:	3308      	adds	r3, #8
    756c:	2200      	movs	r2, #0
    756e:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    7570:	4a0f      	ldr	r2, [pc, #60]	; (75b0 <udd_ep_free+0x80>)
    7572:	1c3b      	adds	r3, r7, #0
    7574:	3308      	adds	r3, #8
    7576:	1c10      	adds	r0, r2, #0
    7578:	1c19      	adds	r1, r3, #0
    757a:	4b0e      	ldr	r3, [pc, #56]	; (75b4 <udd_ep_free+0x84>)
    757c:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    757e:	4a0c      	ldr	r2, [pc, #48]	; (75b0 <udd_ep_free+0x80>)
    7580:	1c3b      	adds	r3, r7, #0
    7582:	330f      	adds	r3, #15
    7584:	781b      	ldrb	r3, [r3, #0]
    7586:	1c10      	adds	r0, r2, #0
    7588:	1c19      	adds	r1, r3, #0
    758a:	2200      	movs	r2, #0
    758c:	4b0a      	ldr	r3, [pc, #40]	; (75b8 <udd_ep_free+0x88>)
    758e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    7590:	4a07      	ldr	r2, [pc, #28]	; (75b0 <udd_ep_free+0x80>)
    7592:	1dfb      	adds	r3, r7, #7
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	1c10      	adds	r0, r2, #0
    7598:	1c19      	adds	r1, r3, #0
    759a:	2200      	movs	r2, #0
    759c:	4b07      	ldr	r3, [pc, #28]	; (75bc <udd_ep_free+0x8c>)
    759e:	4798      	blx	r3
}
    75a0:	46bd      	mov	sp, r7
    75a2:	b004      	add	sp, #16
    75a4:	bd80      	pop	{r7, pc}
    75a6:	46c0      	nop			; (mov r8, r8)
    75a8:	00009099 	.word	0x00009099
    75ac:	0000747d 	.word	0x0000747d
    75b0:	20006e5c 	.word	0x20006e5c
    75b4:	000090c1 	.word	0x000090c1
    75b8:	00008d01 	.word	0x00008d01
    75bc:	00008efd 	.word	0x00008efd

000075c0 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    75c0:	b590      	push	{r4, r7, lr}
    75c2:	b087      	sub	sp, #28
    75c4:	af00      	add	r7, sp, #0
    75c6:	1dfb      	adds	r3, r7, #7
    75c8:	7018      	strb	r0, [r3, #0]
    75ca:	1dbb      	adds	r3, r7, #6
    75cc:	7019      	strb	r1, [r3, #0]
    75ce:	1d3b      	adds	r3, r7, #4
    75d0:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    75d2:	1c3b      	adds	r3, r7, #0
    75d4:	330c      	adds	r3, #12
    75d6:	1c18      	adds	r0, r3, #0
    75d8:	4b5a      	ldr	r3, [pc, #360]	; (7744 <udd_ep_alloc+0x184>)
    75da:	4798      	blx	r3

	config_ep.ep_address = ep;
    75dc:	1c3b      	adds	r3, r7, #0
    75de:	330c      	adds	r3, #12
    75e0:	1dfa      	adds	r2, r7, #7
    75e2:	7812      	ldrb	r2, [r2, #0]
    75e4:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    75e6:	1d3b      	adds	r3, r7, #4
    75e8:	881b      	ldrh	r3, [r3, #0]
    75ea:	2b08      	cmp	r3, #8
    75ec:	d804      	bhi.n	75f8 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    75ee:	1c3b      	adds	r3, r7, #0
    75f0:	330c      	adds	r3, #12
    75f2:	2200      	movs	r2, #0
    75f4:	705a      	strb	r2, [r3, #1]
    75f6:	e045      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 16) {
    75f8:	1d3b      	adds	r3, r7, #4
    75fa:	881b      	ldrh	r3, [r3, #0]
    75fc:	2b10      	cmp	r3, #16
    75fe:	d804      	bhi.n	760a <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    7600:	1c3b      	adds	r3, r7, #0
    7602:	330c      	adds	r3, #12
    7604:	2201      	movs	r2, #1
    7606:	705a      	strb	r2, [r3, #1]
    7608:	e03c      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 32) {
    760a:	1d3b      	adds	r3, r7, #4
    760c:	881b      	ldrh	r3, [r3, #0]
    760e:	2b20      	cmp	r3, #32
    7610:	d804      	bhi.n	761c <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    7612:	1c3b      	adds	r3, r7, #0
    7614:	330c      	adds	r3, #12
    7616:	2202      	movs	r2, #2
    7618:	705a      	strb	r2, [r3, #1]
    761a:	e033      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 64) {
    761c:	1d3b      	adds	r3, r7, #4
    761e:	881b      	ldrh	r3, [r3, #0]
    7620:	2b40      	cmp	r3, #64	; 0x40
    7622:	d804      	bhi.n	762e <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    7624:	1c3b      	adds	r3, r7, #0
    7626:	330c      	adds	r3, #12
    7628:	2203      	movs	r2, #3
    762a:	705a      	strb	r2, [r3, #1]
    762c:	e02a      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 128) {
    762e:	1d3b      	adds	r3, r7, #4
    7630:	881b      	ldrh	r3, [r3, #0]
    7632:	2b80      	cmp	r3, #128	; 0x80
    7634:	d804      	bhi.n	7640 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    7636:	1c3b      	adds	r3, r7, #0
    7638:	330c      	adds	r3, #12
    763a:	2204      	movs	r2, #4
    763c:	705a      	strb	r2, [r3, #1]
    763e:	e021      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 256) {
    7640:	1d3b      	adds	r3, r7, #4
    7642:	881a      	ldrh	r2, [r3, #0]
    7644:	2380      	movs	r3, #128	; 0x80
    7646:	005b      	lsls	r3, r3, #1
    7648:	429a      	cmp	r2, r3
    764a:	d804      	bhi.n	7656 <udd_ep_alloc+0x96>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    764c:	1c3b      	adds	r3, r7, #0
    764e:	330c      	adds	r3, #12
    7650:	2205      	movs	r2, #5
    7652:	705a      	strb	r2, [r3, #1]
    7654:	e016      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 512) {
    7656:	1d3b      	adds	r3, r7, #4
    7658:	881a      	ldrh	r2, [r3, #0]
    765a:	2380      	movs	r3, #128	; 0x80
    765c:	009b      	lsls	r3, r3, #2
    765e:	429a      	cmp	r2, r3
    7660:	d804      	bhi.n	766c <udd_ep_alloc+0xac>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    7662:	1c3b      	adds	r3, r7, #0
    7664:	330c      	adds	r3, #12
    7666:	2206      	movs	r2, #6
    7668:	705a      	strb	r2, [r3, #1]
    766a:	e00b      	b.n	7684 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 1023) {
    766c:	1d3b      	adds	r3, r7, #4
    766e:	881a      	ldrh	r2, [r3, #0]
    7670:	4b35      	ldr	r3, [pc, #212]	; (7748 <udd_ep_alloc+0x188>)
    7672:	429a      	cmp	r2, r3
    7674:	d804      	bhi.n	7680 <udd_ep_alloc+0xc0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    7676:	1c3b      	adds	r3, r7, #0
    7678:	330c      	adds	r3, #12
    767a:	2207      	movs	r2, #7
    767c:	705a      	strb	r2, [r3, #1]
    767e:	e001      	b.n	7684 <udd_ep_alloc+0xc4>
	} else {
		return false;
    7680:	2300      	movs	r3, #0
    7682:	e05b      	b.n	773c <udd_ep_alloc+0x17c>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    7684:	1dfb      	adds	r3, r7, #7
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	1c18      	adds	r0, r3, #0
    768a:	4b30      	ldr	r3, [pc, #192]	; (774c <udd_ep_alloc+0x18c>)
    768c:	4798      	blx	r3
    768e:	1c03      	adds	r3, r0, #0
    7690:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    7692:	697b      	ldr	r3, [r7, #20]
    7694:	1d3a      	adds	r2, r7, #4
    7696:	8812      	ldrh	r2, [r2, #0]
    7698:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    769a:	1dbb      	adds	r3, r7, #6
    769c:	1dba      	adds	r2, r7, #6
    769e:	7811      	ldrb	r1, [r2, #0]
    76a0:	2203      	movs	r2, #3
    76a2:	400a      	ands	r2, r1
    76a4:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    76a6:	1dbb      	adds	r3, r7, #6
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	2b01      	cmp	r3, #1
    76ac:	d104      	bne.n	76b8 <udd_ep_alloc+0xf8>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    76ae:	1c3b      	adds	r3, r7, #0
    76b0:	330c      	adds	r3, #12
    76b2:	2202      	movs	r2, #2
    76b4:	70da      	strb	r2, [r3, #3]
    76b6:	e013      	b.n	76e0 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    76b8:	1dbb      	adds	r3, r7, #6
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	2b02      	cmp	r3, #2
    76be:	d104      	bne.n	76ca <udd_ep_alloc+0x10a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    76c0:	1c3b      	adds	r3, r7, #0
    76c2:	330c      	adds	r3, #12
    76c4:	2203      	movs	r2, #3
    76c6:	70da      	strb	r2, [r3, #3]
    76c8:	e00a      	b.n	76e0 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    76ca:	1dbb      	adds	r3, r7, #6
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	2b03      	cmp	r3, #3
    76d0:	d104      	bne.n	76dc <udd_ep_alloc+0x11c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    76d2:	1c3b      	adds	r3, r7, #0
    76d4:	330c      	adds	r3, #12
    76d6:	2204      	movs	r2, #4
    76d8:	70da      	strb	r2, [r3, #3]
    76da:	e001      	b.n	76e0 <udd_ep_alloc+0x120>
	} else {
		return false;
    76dc:	2300      	movs	r3, #0
    76de:	e02d      	b.n	773c <udd_ep_alloc+0x17c>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    76e0:	1c3b      	adds	r3, r7, #0
    76e2:	3313      	adds	r3, #19
    76e4:	1dfa      	adds	r2, r7, #7
    76e6:	7811      	ldrb	r1, [r2, #0]
    76e8:	220f      	movs	r2, #15
    76ea:	400a      	ands	r2, r1
    76ec:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    76ee:	4a18      	ldr	r2, [pc, #96]	; (7750 <udd_ep_alloc+0x190>)
    76f0:	1c3b      	adds	r3, r7, #0
    76f2:	330c      	adds	r3, #12
    76f4:	1c10      	adds	r0, r2, #0
    76f6:	1c19      	adds	r1, r3, #0
    76f8:	4b16      	ldr	r3, [pc, #88]	; (7754 <udd_ep_alloc+0x194>)
    76fa:	4798      	blx	r3
    76fc:	1c03      	adds	r3, r0, #0
    76fe:	2b00      	cmp	r3, #0
    7700:	d001      	beq.n	7706 <udd_ep_alloc+0x146>
		return false;
    7702:	2300      	movs	r3, #0
    7704:	e01a      	b.n	773c <udd_ep_alloc+0x17c>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    7706:	4912      	ldr	r1, [pc, #72]	; (7750 <udd_ep_alloc+0x190>)
    7708:	1c3b      	adds	r3, r7, #0
    770a:	3313      	adds	r3, #19
    770c:	781a      	ldrb	r2, [r3, #0]
    770e:	4b12      	ldr	r3, [pc, #72]	; (7758 <udd_ep_alloc+0x198>)
    7710:	1c08      	adds	r0, r1, #0
    7712:	1c11      	adds	r1, r2, #0
    7714:	2200      	movs	r2, #0
    7716:	4c11      	ldr	r4, [pc, #68]	; (775c <udd_ep_alloc+0x19c>)
    7718:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    771a:	4a0d      	ldr	r2, [pc, #52]	; (7750 <udd_ep_alloc+0x190>)
    771c:	1dfb      	adds	r3, r7, #7
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	1c10      	adds	r0, r2, #0
    7722:	1c19      	adds	r1, r3, #0
    7724:	2200      	movs	r2, #0
    7726:	4b0e      	ldr	r3, [pc, #56]	; (7760 <udd_ep_alloc+0x1a0>)
    7728:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    772a:	4a09      	ldr	r2, [pc, #36]	; (7750 <udd_ep_alloc+0x190>)
    772c:	1dfb      	adds	r3, r7, #7
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	1c10      	adds	r0, r2, #0
    7732:	1c19      	adds	r1, r3, #0
    7734:	2201      	movs	r2, #1
    7736:	4b0a      	ldr	r3, [pc, #40]	; (7760 <udd_ep_alloc+0x1a0>)
    7738:	4798      	blx	r3

	return true;
    773a:	2301      	movs	r3, #1
}
    773c:	1c18      	adds	r0, r3, #0
    773e:	46bd      	mov	sp, r7
    7740:	b007      	add	sp, #28
    7742:	bd90      	pop	{r4, r7, pc}
    7744:	00009099 	.word	0x00009099
    7748:	000003ff 	.word	0x000003ff
    774c:	00007095 	.word	0x00007095
    7750:	20006e5c 	.word	0x20006e5c
    7754:	000090c1 	.word	0x000090c1
    7758:	00007439 	.word	0x00007439
    775c:	00008c8d 	.word	0x00008c8d
    7760:	00008d6d 	.word	0x00008d6d

00007764 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    7764:	b580      	push	{r7, lr}
    7766:	b082      	sub	sp, #8
    7768:	af00      	add	r7, sp, #0
    776a:	1c02      	adds	r2, r0, #0
    776c:	1dfb      	adds	r3, r7, #7
    776e:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    7770:	4a05      	ldr	r2, [pc, #20]	; (7788 <udd_ep_is_halted+0x24>)
    7772:	1dfb      	adds	r3, r7, #7
    7774:	781b      	ldrb	r3, [r3, #0]
    7776:	1c10      	adds	r0, r2, #0
    7778:	1c19      	adds	r1, r3, #0
    777a:	4b04      	ldr	r3, [pc, #16]	; (778c <udd_ep_is_halted+0x28>)
    777c:	4798      	blx	r3
    777e:	1c03      	adds	r3, r0, #0
}
    7780:	1c18      	adds	r0, r3, #0
    7782:	46bd      	mov	sp, r7
    7784:	b002      	add	sp, #8
    7786:	bd80      	pop	{r7, pc}
    7788:	20006e5c 	.word	0x20006e5c
    778c:	00009691 	.word	0x00009691

00007790 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    7790:	b580      	push	{r7, lr}
    7792:	b084      	sub	sp, #16
    7794:	af00      	add	r7, sp, #0
    7796:	1c02      	adds	r2, r0, #0
    7798:	1dfb      	adds	r3, r7, #7
    779a:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    779c:	1c3b      	adds	r3, r7, #0
    779e:	330f      	adds	r3, #15
    77a0:	1dfa      	adds	r2, r7, #7
    77a2:	7811      	ldrb	r1, [r2, #0]
    77a4:	220f      	movs	r2, #15
    77a6:	400a      	ands	r2, r1
    77a8:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    77aa:	1c3b      	adds	r3, r7, #0
    77ac:	330f      	adds	r3, #15
    77ae:	781b      	ldrb	r3, [r3, #0]
    77b0:	2b07      	cmp	r3, #7
    77b2:	d901      	bls.n	77b8 <udd_ep_set_halt+0x28>
		return false;
    77b4:	2300      	movs	r3, #0
    77b6:	e00c      	b.n	77d2 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    77b8:	4a08      	ldr	r2, [pc, #32]	; (77dc <udd_ep_set_halt+0x4c>)
    77ba:	1dfb      	adds	r3, r7, #7
    77bc:	781b      	ldrb	r3, [r3, #0]
    77be:	1c10      	adds	r0, r2, #0
    77c0:	1c19      	adds	r1, r3, #0
    77c2:	4b07      	ldr	r3, [pc, #28]	; (77e0 <udd_ep_set_halt+0x50>)
    77c4:	4798      	blx	r3

	udd_ep_abort(ep);
    77c6:	1dfb      	adds	r3, r7, #7
    77c8:	781b      	ldrb	r3, [r3, #0]
    77ca:	1c18      	adds	r0, r3, #0
    77cc:	4b05      	ldr	r3, [pc, #20]	; (77e4 <udd_ep_set_halt+0x54>)
    77ce:	4798      	blx	r3
	return true;
    77d0:	2301      	movs	r3, #1
}
    77d2:	1c18      	adds	r0, r3, #0
    77d4:	46bd      	mov	sp, r7
    77d6:	b004      	add	sp, #16
    77d8:	bd80      	pop	{r7, pc}
    77da:	46c0      	nop			; (mov r8, r8)
    77dc:	20006e5c 	.word	0x20006e5c
    77e0:	00009701 	.word	0x00009701
    77e4:	0000747d 	.word	0x0000747d

000077e8 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    77e8:	b580      	push	{r7, lr}
    77ea:	b084      	sub	sp, #16
    77ec:	af00      	add	r7, sp, #0
    77ee:	1c02      	adds	r2, r0, #0
    77f0:	1dfb      	adds	r3, r7, #7
    77f2:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    77f4:	1c3b      	adds	r3, r7, #0
    77f6:	330f      	adds	r3, #15
    77f8:	1dfa      	adds	r2, r7, #7
    77fa:	7811      	ldrb	r1, [r2, #0]
    77fc:	220f      	movs	r2, #15
    77fe:	400a      	ands	r2, r1
    7800:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    7802:	1c3b      	adds	r3, r7, #0
    7804:	330f      	adds	r3, #15
    7806:	781b      	ldrb	r3, [r3, #0]
    7808:	2b07      	cmp	r3, #7
    780a:	d901      	bls.n	7810 <udd_ep_clear_halt+0x28>
		return false;
    780c:	2300      	movs	r3, #0
    780e:	e01d      	b.n	784c <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    7810:	1dfb      	adds	r3, r7, #7
    7812:	781b      	ldrb	r3, [r3, #0]
    7814:	1c18      	adds	r0, r3, #0
    7816:	4b0f      	ldr	r3, [pc, #60]	; (7854 <udd_ep_clear_halt+0x6c>)
    7818:	4798      	blx	r3
    781a:	1c03      	adds	r3, r0, #0
    781c:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    781e:	4a0e      	ldr	r2, [pc, #56]	; (7858 <udd_ep_clear_halt+0x70>)
    7820:	1dfb      	adds	r3, r7, #7
    7822:	781b      	ldrb	r3, [r3, #0]
    7824:	1c10      	adds	r0, r2, #0
    7826:	1c19      	adds	r1, r3, #0
    7828:	4b0c      	ldr	r3, [pc, #48]	; (785c <udd_ep_clear_halt+0x74>)
    782a:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    782c:	68bb      	ldr	r3, [r7, #8]
    782e:	7c9b      	ldrb	r3, [r3, #18]
    7830:	07db      	lsls	r3, r3, #31
    7832:	0fdb      	lsrs	r3, r3, #31
    7834:	b2db      	uxtb	r3, r3
    7836:	2b01      	cmp	r3, #1
    7838:	d107      	bne.n	784a <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    783a:	68bb      	ldr	r3, [r7, #8]
    783c:	7c9a      	ldrb	r2, [r3, #18]
    783e:	2101      	movs	r1, #1
    7840:	438a      	bics	r2, r1
    7842:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    7844:	68bb      	ldr	r3, [r7, #8]
    7846:	681b      	ldr	r3, [r3, #0]
    7848:	4798      	blx	r3
	}

	return true;
    784a:	2301      	movs	r3, #1
}
    784c:	1c18      	adds	r0, r3, #0
    784e:	46bd      	mov	sp, r7
    7850:	b004      	add	sp, #16
    7852:	bd80      	pop	{r7, pc}
    7854:	00007095 	.word	0x00007095
    7858:	20006e5c 	.word	0x20006e5c
    785c:	00009759 	.word	0x00009759

00007860 <udd_ep_wait_stall_clear>:

bool udd_ep_wait_stall_clear(udd_ep_id_t ep, udd_callback_halt_cleared_t callback)
{
    7860:	b580      	push	{r7, lr}
    7862:	b084      	sub	sp, #16
    7864:	af00      	add	r7, sp, #0
    7866:	1c02      	adds	r2, r0, #0
    7868:	6039      	str	r1, [r7, #0]
    786a:	1dfb      	adds	r3, r7, #7
    786c:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ep_num = ep & USB_EP_ADDR_MASK;
    786e:	1c3b      	adds	r3, r7, #0
    7870:	330f      	adds	r3, #15
    7872:	1dfa      	adds	r2, r7, #7
    7874:	7811      	ldrb	r1, [r2, #0]
    7876:	220f      	movs	r2, #15
    7878:	400a      	ands	r2, r1
    787a:	701a      	strb	r2, [r3, #0]
	if (USB_DEVICE_MAX_EP < ep_num) {
    787c:	1c3b      	adds	r3, r7, #0
    787e:	330f      	adds	r3, #15
    7880:	781b      	ldrb	r3, [r3, #0]
    7882:	2b07      	cmp	r3, #7
    7884:	d901      	bls.n	788a <udd_ep_wait_stall_clear+0x2a>
		return false;
    7886:	2300      	movs	r3, #0
    7888:	e032      	b.n	78f0 <udd_ep_wait_stall_clear+0x90>
	}

	ptr_job = udd_ep_get_job(ep);
    788a:	1dfb      	adds	r3, r7, #7
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	1c18      	adds	r0, r3, #0
    7890:	4b19      	ldr	r3, [pc, #100]	; (78f8 <udd_ep_wait_stall_clear+0x98>)
    7892:	4798      	blx	r3
    7894:	1c03      	adds	r3, r0, #0
    7896:	60bb      	str	r3, [r7, #8]
	if (ptr_job->busy == true) {
    7898:	68bb      	ldr	r3, [r7, #8]
    789a:	7c9b      	ldrb	r3, [r3, #18]
    789c:	07db      	lsls	r3, r3, #31
    789e:	0fdb      	lsrs	r3, r3, #31
    78a0:	b2db      	uxtb	r3, r3
    78a2:	2b01      	cmp	r3, #1
    78a4:	d101      	bne.n	78aa <udd_ep_wait_stall_clear+0x4a>
		return false; /* Job already on going */
    78a6:	2300      	movs	r3, #0
    78a8:	e022      	b.n	78f0 <udd_ep_wait_stall_clear+0x90>
	}

	/* Wait clear halt endpoint */
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    78aa:	4a14      	ldr	r2, [pc, #80]	; (78fc <udd_ep_wait_stall_clear+0x9c>)
    78ac:	1dfb      	adds	r3, r7, #7
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	1c10      	adds	r0, r2, #0
    78b2:	1c19      	adds	r1, r3, #0
    78b4:	4b12      	ldr	r3, [pc, #72]	; (7900 <udd_ep_wait_stall_clear+0xa0>)
    78b6:	4798      	blx	r3
    78b8:	1c03      	adds	r3, r0, #0
    78ba:	2b00      	cmp	r3, #0
    78bc:	d009      	beq.n	78d2 <udd_ep_wait_stall_clear+0x72>
		/* Endpoint halted then registers the callback */
		ptr_job->busy = true;
    78be:	68bb      	ldr	r3, [r7, #8]
    78c0:	7c9a      	ldrb	r2, [r3, #18]
    78c2:	2101      	movs	r1, #1
    78c4:	430a      	orrs	r2, r1
    78c6:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt = callback;
    78c8:	68bb      	ldr	r3, [r7, #8]
    78ca:	683a      	ldr	r2, [r7, #0]
    78cc:	601a      	str	r2, [r3, #0]
		return true;
    78ce:	2301      	movs	r3, #1
    78d0:	e00e      	b.n	78f0 <udd_ep_wait_stall_clear+0x90>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    78d2:	4a0a      	ldr	r2, [pc, #40]	; (78fc <udd_ep_wait_stall_clear+0x9c>)
    78d4:	1dfb      	adds	r3, r7, #7
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	1c10      	adds	r0, r2, #0
    78da:	1c19      	adds	r1, r3, #0
    78dc:	4b09      	ldr	r3, [pc, #36]	; (7904 <udd_ep_wait_stall_clear+0xa4>)
    78de:	4798      	blx	r3
    78e0:	1c03      	adds	r3, r0, #0
    78e2:	2b00      	cmp	r3, #0
    78e4:	d003      	beq.n	78ee <udd_ep_wait_stall_clear+0x8e>
		callback(); /* Endpoint not halted then call directly callback */
    78e6:	683b      	ldr	r3, [r7, #0]
    78e8:	4798      	blx	r3
		return true;
    78ea:	2301      	movs	r3, #1
    78ec:	e000      	b.n	78f0 <udd_ep_wait_stall_clear+0x90>
	} else {
		return false;
    78ee:	2300      	movs	r3, #0
	}
}
    78f0:	1c18      	adds	r0, r3, #0
    78f2:	46bd      	mov	sp, r7
    78f4:	b004      	add	sp, #16
    78f6:	bd80      	pop	{r7, pc}
    78f8:	00007095 	.word	0x00007095
    78fc:	20006e5c 	.word	0x20006e5c
    7900:	00009691 	.word	0x00009691
    7904:	00009595 	.word	0x00009595

00007908 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    7908:	b580      	push	{r7, lr}
    790a:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    790c:	4b07      	ldr	r3, [pc, #28]	; (792c <udd_ctrl_stall_data+0x24>)
    790e:	2205      	movs	r2, #5
    7910:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    7912:	4b07      	ldr	r3, [pc, #28]	; (7930 <udd_ctrl_stall_data+0x28>)
    7914:	1c18      	adds	r0, r3, #0
    7916:	2180      	movs	r1, #128	; 0x80
    7918:	4b06      	ldr	r3, [pc, #24]	; (7934 <udd_ctrl_stall_data+0x2c>)
    791a:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    791c:	4b04      	ldr	r3, [pc, #16]	; (7930 <udd_ctrl_stall_data+0x28>)
    791e:	1c18      	adds	r0, r3, #0
    7920:	2100      	movs	r1, #0
    7922:	4b05      	ldr	r3, [pc, #20]	; (7938 <udd_ctrl_stall_data+0x30>)
    7924:	4798      	blx	r3
}
    7926:	46bd      	mov	sp, r7
    7928:	bd80      	pop	{r7, pc}
    792a:	46c0      	nop			; (mov r8, r8)
    792c:	20006c78 	.word	0x20006c78
    7930:	20006e5c 	.word	0x20006e5c
    7934:	00009701 	.word	0x00009701
    7938:	00009759 	.word	0x00009759

0000793c <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    793c:	b590      	push	{r4, r7, lr}
    793e:	b089      	sub	sp, #36	; 0x24
    7940:	af00      	add	r7, sp, #0
    7942:	60ba      	str	r2, [r7, #8]
    7944:	607b      	str	r3, [r7, #4]
    7946:	1c3b      	adds	r3, r7, #0
    7948:	330f      	adds	r3, #15
    794a:	1c02      	adds	r2, r0, #0
    794c:	701a      	strb	r2, [r3, #0]
    794e:	1c3b      	adds	r3, r7, #0
    7950:	330e      	adds	r3, #14
    7952:	1c0a      	adds	r2, r1, #0
    7954:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    7956:	1c3b      	adds	r3, r7, #0
    7958:	331d      	adds	r3, #29
    795a:	1c3a      	adds	r2, r7, #0
    795c:	320f      	adds	r2, #15
    795e:	7811      	ldrb	r1, [r2, #0]
    7960:	220f      	movs	r2, #15
    7962:	400a      	ands	r2, r1
    7964:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    7966:	1c3b      	adds	r3, r7, #0
    7968:	331d      	adds	r3, #29
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	2b07      	cmp	r3, #7
    796e:	d808      	bhi.n	7982 <udd_ep_run+0x46>
    7970:	1c3b      	adds	r3, r7, #0
    7972:	330f      	adds	r3, #15
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	1c18      	adds	r0, r3, #0
    7978:	4b9d      	ldr	r3, [pc, #628]	; (7bf0 <udd_ep_run+0x2b4>)
    797a:	4798      	blx	r3
    797c:	1c03      	adds	r3, r0, #0
    797e:	2b00      	cmp	r3, #0
    7980:	d001      	beq.n	7986 <udd_ep_run+0x4a>
		return false;
    7982:	2300      	movs	r3, #0
    7984:	e130      	b.n	7be8 <udd_ep_run+0x2ac>
	}

	ptr_job = udd_ep_get_job(ep);
    7986:	1c3b      	adds	r3, r7, #0
    7988:	330f      	adds	r3, #15
    798a:	781b      	ldrb	r3, [r3, #0]
    798c:	1c18      	adds	r0, r3, #0
    798e:	4b99      	ldr	r3, [pc, #612]	; (7bf4 <udd_ep_run+0x2b8>)
    7990:	4798      	blx	r3
    7992:	1c03      	adds	r3, r0, #0
    7994:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    7996:	4b98      	ldr	r3, [pc, #608]	; (7bf8 <udd_ep_run+0x2bc>)
    7998:	4798      	blx	r3
    799a:	1c03      	adds	r3, r0, #0
    799c:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    799e:	69bb      	ldr	r3, [r7, #24]
    79a0:	7c9b      	ldrb	r3, [r3, #18]
    79a2:	07db      	lsls	r3, r3, #31
    79a4:	0fdb      	lsrs	r3, r3, #31
    79a6:	b2db      	uxtb	r3, r3
    79a8:	2b01      	cmp	r3, #1
    79aa:	d105      	bne.n	79b8 <udd_ep_run+0x7c>
		cpu_irq_restore(flags);
    79ac:	697b      	ldr	r3, [r7, #20]
    79ae:	1c18      	adds	r0, r3, #0
    79b0:	4b92      	ldr	r3, [pc, #584]	; (7bfc <udd_ep_run+0x2c0>)
    79b2:	4798      	blx	r3
		return false; /* Job already on going */
    79b4:	2300      	movs	r3, #0
    79b6:	e117      	b.n	7be8 <udd_ep_run+0x2ac>
	}
	ptr_job->busy = true;
    79b8:	69bb      	ldr	r3, [r7, #24]
    79ba:	7c9a      	ldrb	r2, [r3, #18]
    79bc:	2101      	movs	r1, #1
    79be:	430a      	orrs	r2, r1
    79c0:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    79c2:	697b      	ldr	r3, [r7, #20]
    79c4:	1c18      	adds	r0, r3, #0
    79c6:	4b8d      	ldr	r3, [pc, #564]	; (7bfc <udd_ep_run+0x2c0>)
    79c8:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    79ca:	69bb      	ldr	r3, [r7, #24]
    79cc:	68ba      	ldr	r2, [r7, #8]
    79ce:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    79d0:	69bb      	ldr	r3, [r7, #24]
    79d2:	687a      	ldr	r2, [r7, #4]
    79d4:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    79d6:	69bb      	ldr	r3, [r7, #24]
    79d8:	2200      	movs	r2, #0
    79da:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    79dc:	69bb      	ldr	r3, [r7, #24]
    79de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    79e0:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    79e2:	69bb      	ldr	r3, [r7, #24]
    79e4:	1c3a      	adds	r2, r7, #0
    79e6:	320e      	adds	r2, #14
    79e8:	7811      	ldrb	r1, [r2, #0]
    79ea:	2201      	movs	r2, #1
    79ec:	400a      	ands	r2, r1
    79ee:	1892      	adds	r2, r2, r2
    79f0:	7c99      	ldrb	r1, [r3, #18]
    79f2:	2002      	movs	r0, #2
    79f4:	4381      	bics	r1, r0
    79f6:	430a      	orrs	r2, r1
    79f8:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    79fa:	69bb      	ldr	r3, [r7, #24]
    79fc:	7c9a      	ldrb	r2, [r3, #18]
    79fe:	2104      	movs	r1, #4
    7a00:	438a      	bics	r2, r1
    7a02:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    7a04:	1c3b      	adds	r3, r7, #0
    7a06:	330f      	adds	r3, #15
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	b25b      	sxtb	r3, r3
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	db00      	blt.n	7a12 <udd_ep_run+0xd6>
    7a10:	e077      	b.n	7b02 <udd_ep_run+0x1c6>
		if (0 != ptr_job->buf_size) {
    7a12:	69bb      	ldr	r3, [r7, #24]
    7a14:	689b      	ldr	r3, [r3, #8]
    7a16:	2b00      	cmp	r3, #0
    7a18:	d03f      	beq.n	7a9a <udd_ep_run+0x15e>
			next_trans = ptr_job->buf_size;
    7a1a:	69bb      	ldr	r3, [r7, #24]
    7a1c:	689a      	ldr	r2, [r3, #8]
    7a1e:	1c3b      	adds	r3, r7, #0
    7a20:	331e      	adds	r3, #30
    7a22:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7a24:	1c3b      	adds	r3, r7, #0
    7a26:	331e      	adds	r3, #30
    7a28:	881a      	ldrh	r2, [r3, #0]
    7a2a:	4b75      	ldr	r3, [pc, #468]	; (7c00 <udd_ep_run+0x2c4>)
    7a2c:	429a      	cmp	r2, r3
    7a2e:	d90e      	bls.n	7a4e <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7a30:	69bb      	ldr	r3, [r7, #24]
    7a32:	8a1b      	ldrh	r3, [r3, #16]
    7a34:	1c1a      	adds	r2, r3, #0
    7a36:	4972      	ldr	r1, [pc, #456]	; (7c00 <udd_ep_run+0x2c4>)
    7a38:	4b72      	ldr	r3, [pc, #456]	; (7c04 <udd_ep_run+0x2c8>)
    7a3a:	1c08      	adds	r0, r1, #0
    7a3c:	1c11      	adds	r1, r2, #0
    7a3e:	4798      	blx	r3
    7a40:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    7a42:	b29a      	uxth	r2, r3
    7a44:	1c3b      	adds	r3, r7, #0
    7a46:	331e      	adds	r3, #30
    7a48:	496d      	ldr	r1, [pc, #436]	; (7c00 <udd_ep_run+0x2c4>)
    7a4a:	1a8a      	subs	r2, r1, r2
    7a4c:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    7a4e:	69bb      	ldr	r3, [r7, #24]
    7a50:	7c9b      	ldrb	r3, [r3, #18]
    7a52:	079b      	lsls	r3, r3, #30
    7a54:	0fdb      	lsrs	r3, r3, #31
    7a56:	b2db      	uxtb	r3, r3
    7a58:	2b00      	cmp	r3, #0
    7a5a:	d00e      	beq.n	7a7a <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    7a5c:	69bb      	ldr	r3, [r7, #24]
    7a5e:	8a1a      	ldrh	r2, [r3, #16]
    7a60:	1c3b      	adds	r3, r7, #0
    7a62:	331e      	adds	r3, #30
    7a64:	8819      	ldrh	r1, [r3, #0]
    7a66:	4b68      	ldr	r3, [pc, #416]	; (7c08 <udd_ep_run+0x2cc>)
    7a68:	1c08      	adds	r0, r1, #0
    7a6a:	1c11      	adds	r1, r2, #0
    7a6c:	4798      	blx	r3
    7a6e:	1c0b      	adds	r3, r1, #0
    7a70:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    7a72:	2b00      	cmp	r3, #0
    7a74:	d101      	bne.n	7a7a <udd_ep_run+0x13e>
    7a76:	2301      	movs	r3, #1
    7a78:	e000      	b.n	7a7c <udd_ep_run+0x140>
    7a7a:	2300      	movs	r3, #0
    7a7c:	b2db      	uxtb	r3, r3
    7a7e:	1c1a      	adds	r2, r3, #0
    7a80:	2301      	movs	r3, #1
    7a82:	4013      	ands	r3, r2
    7a84:	b2d9      	uxtb	r1, r3
    7a86:	69bb      	ldr	r3, [r7, #24]
    7a88:	2201      	movs	r2, #1
    7a8a:	400a      	ands	r2, r1
    7a8c:	1892      	adds	r2, r2, r2
    7a8e:	7c99      	ldrb	r1, [r3, #18]
    7a90:	2002      	movs	r0, #2
    7a92:	4381      	bics	r1, r0
    7a94:	430a      	orrs	r2, r1
    7a96:	749a      	strb	r2, [r3, #18]
    7a98:	e023      	b.n	7ae2 <udd_ep_run+0x1a6>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    7a9a:	69bb      	ldr	r3, [r7, #24]
    7a9c:	7c9b      	ldrb	r3, [r3, #18]
    7a9e:	079b      	lsls	r3, r3, #30
    7aa0:	0fdb      	lsrs	r3, r3, #31
    7aa2:	b2db      	uxtb	r3, r3
    7aa4:	2b01      	cmp	r3, #1
    7aa6:	d109      	bne.n	7abc <udd_ep_run+0x180>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    7aa8:	69bb      	ldr	r3, [r7, #24]
    7aaa:	7c9a      	ldrb	r2, [r3, #18]
    7aac:	2102      	movs	r1, #2
    7aae:	438a      	bics	r2, r1
    7ab0:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    7ab2:	1c3b      	adds	r3, r7, #0
    7ab4:	331e      	adds	r3, #30
    7ab6:	2200      	movs	r2, #0
    7ab8:	801a      	strh	r2, [r3, #0]
    7aba:	e012      	b.n	7ae2 <udd_ep_run+0x1a6>
		} else {
			ptr_job->busy = false;
    7abc:	69bb      	ldr	r3, [r7, #24]
    7abe:	7c9a      	ldrb	r2, [r3, #18]
    7ac0:	2101      	movs	r1, #1
    7ac2:	438a      	bics	r2, r1
    7ac4:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    7ac6:	69bb      	ldr	r3, [r7, #24]
    7ac8:	681b      	ldr	r3, [r3, #0]
    7aca:	2b00      	cmp	r3, #0
    7acc:	d007      	beq.n	7ade <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    7ace:	69bb      	ldr	r3, [r7, #24]
    7ad0:	681b      	ldr	r3, [r3, #0]
    7ad2:	1c3a      	adds	r2, r7, #0
    7ad4:	320f      	adds	r2, #15
    7ad6:	7812      	ldrb	r2, [r2, #0]
    7ad8:	2000      	movs	r0, #0
    7ada:	2100      	movs	r1, #0
    7adc:	4798      	blx	r3
			}
			return true;
    7ade:	2301      	movs	r3, #1
    7ae0:	e082      	b.n	7be8 <udd_ep_run+0x2ac>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    7ae2:	69bb      	ldr	r3, [r7, #24]
    7ae4:	685a      	ldr	r2, [r3, #4]
    7ae6:	1c3b      	adds	r3, r7, #0
    7ae8:	331e      	adds	r3, #30
    7aea:	881b      	ldrh	r3, [r3, #0]
    7aec:	4847      	ldr	r0, [pc, #284]	; (7c0c <udd_ep_run+0x2d0>)
    7aee:	1c39      	adds	r1, r7, #0
    7af0:	311d      	adds	r1, #29
    7af2:	7809      	ldrb	r1, [r1, #0]
    7af4:	4c46      	ldr	r4, [pc, #280]	; (7c10 <udd_ep_run+0x2d4>)
    7af6:	47a0      	blx	r4
    7af8:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    7afa:	425a      	negs	r2, r3
    7afc:	4153      	adcs	r3, r2
    7afe:	b2db      	uxtb	r3, r3
    7b00:	e072      	b.n	7be8 <udd_ep_run+0x2ac>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    7b02:	69bb      	ldr	r3, [r7, #24]
    7b04:	689b      	ldr	r3, [r3, #8]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d05c      	beq.n	7bc4 <udd_ep_run+0x288>
			next_trans = ptr_job->buf_size;
    7b0a:	69bb      	ldr	r3, [r7, #24]
    7b0c:	689a      	ldr	r2, [r3, #8]
    7b0e:	1c3b      	adds	r3, r7, #0
    7b10:	331e      	adds	r3, #30
    7b12:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    7b14:	1c3b      	adds	r3, r7, #0
    7b16:	331e      	adds	r3, #30
    7b18:	881a      	ldrh	r2, [r3, #0]
    7b1a:	4b39      	ldr	r3, [pc, #228]	; (7c00 <udd_ep_run+0x2c4>)
    7b1c:	429a      	cmp	r2, r3
    7b1e:	d90f      	bls.n	7b40 <udd_ep_run+0x204>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    7b20:	69bb      	ldr	r3, [r7, #24]
    7b22:	8a1b      	ldrh	r3, [r3, #16]
    7b24:	1c1a      	adds	r2, r3, #0
    7b26:	4936      	ldr	r1, [pc, #216]	; (7c00 <udd_ep_run+0x2c4>)
    7b28:	4b36      	ldr	r3, [pc, #216]	; (7c04 <udd_ep_run+0x2c8>)
    7b2a:	1c08      	adds	r0, r1, #0
    7b2c:	1c11      	adds	r1, r2, #0
    7b2e:	4798      	blx	r3
    7b30:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    7b32:	b29a      	uxth	r2, r3
    7b34:	1c3b      	adds	r3, r7, #0
    7b36:	331e      	adds	r3, #30
    7b38:	4931      	ldr	r1, [pc, #196]	; (7c00 <udd_ep_run+0x2c4>)
    7b3a:	1a8a      	subs	r2, r1, r2
    7b3c:	801a      	strh	r2, [r3, #0]
    7b3e:	e011      	b.n	7b64 <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    7b40:	69bb      	ldr	r3, [r7, #24]
    7b42:	8a1a      	ldrh	r2, [r3, #16]
    7b44:	1c3b      	adds	r3, r7, #0
    7b46:	331e      	adds	r3, #30
    7b48:	8819      	ldrh	r1, [r3, #0]
    7b4a:	4b2f      	ldr	r3, [pc, #188]	; (7c08 <udd_ep_run+0x2cc>)
    7b4c:	1c08      	adds	r0, r1, #0
    7b4e:	1c11      	adds	r1, r2, #0
    7b50:	4798      	blx	r3
    7b52:	1c0b      	adds	r3, r1, #0
    7b54:	b29a      	uxth	r2, r3
    7b56:	1c3b      	adds	r3, r7, #0
    7b58:	331e      	adds	r3, #30
    7b5a:	1c39      	adds	r1, r7, #0
    7b5c:	311e      	adds	r1, #30
    7b5e:	8809      	ldrh	r1, [r1, #0]
    7b60:	1a8a      	subs	r2, r1, r2
    7b62:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    7b64:	69bb      	ldr	r3, [r7, #24]
    7b66:	8a1b      	ldrh	r3, [r3, #16]
    7b68:	1c3a      	adds	r2, r7, #0
    7b6a:	321e      	adds	r2, #30
    7b6c:	8812      	ldrh	r2, [r2, #0]
    7b6e:	429a      	cmp	r2, r3
    7b70:	d218      	bcs.n	7ba4 <udd_ep_run+0x268>
				ptr_job->b_use_out_cache_buffer = true;
    7b72:	69bb      	ldr	r3, [r7, #24]
    7b74:	7c9a      	ldrb	r2, [r3, #18]
    7b76:	2104      	movs	r1, #4
    7b78:	430a      	orrs	r2, r1
    7b7a:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    7b7c:	1c3b      	adds	r3, r7, #0
    7b7e:	331d      	adds	r3, #29
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	3b01      	subs	r3, #1
    7b84:	00da      	lsls	r2, r3, #3
    7b86:	4b23      	ldr	r3, [pc, #140]	; (7c14 <udd_ep_run+0x2d8>)
    7b88:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    7b8a:	69bb      	ldr	r3, [r7, #24]
    7b8c:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    7b8e:	481f      	ldr	r0, [pc, #124]	; (7c0c <udd_ep_run+0x2d0>)
    7b90:	1c39      	adds	r1, r7, #0
    7b92:	311d      	adds	r1, #29
    7b94:	7809      	ldrb	r1, [r1, #0]
    7b96:	4c20      	ldr	r4, [pc, #128]	; (7c18 <udd_ep_run+0x2dc>)
    7b98:	47a0      	blx	r4
    7b9a:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    7b9c:	425a      	negs	r2, r3
    7b9e:	4153      	adcs	r3, r2
    7ba0:	b2db      	uxtb	r3, r3
    7ba2:	e021      	b.n	7be8 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    7ba4:	69bb      	ldr	r3, [r7, #24]
    7ba6:	685a      	ldr	r2, [r3, #4]
    7ba8:	1c3b      	adds	r3, r7, #0
    7baa:	331e      	adds	r3, #30
    7bac:	881b      	ldrh	r3, [r3, #0]
    7bae:	4817      	ldr	r0, [pc, #92]	; (7c0c <udd_ep_run+0x2d0>)
    7bb0:	1c39      	adds	r1, r7, #0
    7bb2:	311d      	adds	r1, #29
    7bb4:	7809      	ldrb	r1, [r1, #0]
    7bb6:	4c18      	ldr	r4, [pc, #96]	; (7c18 <udd_ep_run+0x2dc>)
    7bb8:	47a0      	blx	r4
    7bba:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    7bbc:	425a      	negs	r2, r3
    7bbe:	4153      	adcs	r3, r2
    7bc0:	b2db      	uxtb	r3, r3
    7bc2:	e011      	b.n	7be8 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    7bc4:	69bb      	ldr	r3, [r7, #24]
    7bc6:	7c9a      	ldrb	r2, [r3, #18]
    7bc8:	2101      	movs	r1, #1
    7bca:	438a      	bics	r2, r1
    7bcc:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    7bce:	69bb      	ldr	r3, [r7, #24]
    7bd0:	681b      	ldr	r3, [r3, #0]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d007      	beq.n	7be6 <udd_ep_run+0x2aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    7bd6:	69bb      	ldr	r3, [r7, #24]
    7bd8:	681b      	ldr	r3, [r3, #0]
    7bda:	1c3a      	adds	r2, r7, #0
    7bdc:	320f      	adds	r2, #15
    7bde:	7812      	ldrb	r2, [r2, #0]
    7be0:	2000      	movs	r0, #0
    7be2:	2100      	movs	r1, #0
    7be4:	4798      	blx	r3
			}
			return true;
    7be6:	2301      	movs	r3, #1
		}
	}
}
    7be8:	1c18      	adds	r0, r3, #0
    7bea:	46bd      	mov	sp, r7
    7bec:	b009      	add	sp, #36	; 0x24
    7bee:	bd90      	pop	{r4, r7, pc}
    7bf0:	00007765 	.word	0x00007765
    7bf4:	00007095 	.word	0x00007095
    7bf8:	00006cc9 	.word	0x00006cc9
    7bfc:	00006d11 	.word	0x00006d11
    7c00:	00001fff 	.word	0x00001fff
    7c04:	0000afc5 	.word	0x0000afc5
    7c08:	0000af05 	.word	0x0000af05
    7c0c:	20006e5c 	.word	0x20006e5c
    7c10:	00009871 	.word	0x00009871
    7c14:	20006e24 	.word	0x20006e24
    7c18:	00009929 	.word	0x00009929

00007c1c <udd_set_address>:

void udd_set_address(uint8_t address)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b082      	sub	sp, #8
    7c20:	af00      	add	r7, sp, #0
    7c22:	1c02      	adds	r2, r0, #0
    7c24:	1dfb      	adds	r3, r7, #7
    7c26:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    7c28:	4a04      	ldr	r2, [pc, #16]	; (7c3c <udd_set_address+0x20>)
    7c2a:	1dfb      	adds	r3, r7, #7
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	1c10      	adds	r0, r2, #0
    7c30:	1c19      	adds	r1, r3, #0
    7c32:	4b03      	ldr	r3, [pc, #12]	; (7c40 <udd_set_address+0x24>)
    7c34:	4798      	blx	r3
}
    7c36:	46bd      	mov	sp, r7
    7c38:	b002      	add	sp, #8
    7c3a:	bd80      	pop	{r7, pc}
    7c3c:	20006e5c 	.word	0x20006e5c
    7c40:	00006e1d 	.word	0x00006e1d

00007c44 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    7c44:	b580      	push	{r7, lr}
    7c46:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    7c48:	4b03      	ldr	r3, [pc, #12]	; (7c58 <udd_getaddress+0x14>)
    7c4a:	1c18      	adds	r0, r3, #0
    7c4c:	4b03      	ldr	r3, [pc, #12]	; (7c5c <udd_getaddress+0x18>)
    7c4e:	4798      	blx	r3
    7c50:	1c03      	adds	r3, r0, #0
}
    7c52:	1c18      	adds	r0, r3, #0
    7c54:	46bd      	mov	sp, r7
    7c56:	bd80      	pop	{r7, pc}
    7c58:	20006e5c 	.word	0x20006e5c
    7c5c:	00006e01 	.word	0x00006e01

00007c60 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b082      	sub	sp, #8
    7c64:	af00      	add	r7, sp, #0
	uint32_t try = 5;
    7c66:	2305      	movs	r3, #5
    7c68:	607b      	str	r3, [r7, #4]
	udd_wait_clock_ready();
    7c6a:	4b0c      	ldr	r3, [pc, #48]	; (7c9c <udd_send_remotewakeup+0x3c>)
    7c6c:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_IDLE);
    7c6e:	2003      	movs	r0, #3
    7c70:	4b0b      	ldr	r3, [pc, #44]	; (7ca0 <udd_send_remotewakeup+0x40>)
    7c72:	4798      	blx	r3
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    7c74:	e003      	b.n	7c7e <udd_send_remotewakeup+0x1e>
		usb_device_send_remote_wake_up(&usb_device);
    7c76:	4b0b      	ldr	r3, [pc, #44]	; (7ca4 <udd_send_remotewakeup+0x44>)
    7c78:	1c18      	adds	r0, r3, #0
    7c7a:	4b0b      	ldr	r3, [pc, #44]	; (7ca8 <udd_send_remotewakeup+0x48>)
    7c7c:	4798      	blx	r3
void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    7c7e:	4b09      	ldr	r3, [pc, #36]	; (7ca4 <udd_send_remotewakeup+0x44>)
    7c80:	1c18      	adds	r0, r3, #0
    7c82:	4b0a      	ldr	r3, [pc, #40]	; (7cac <udd_send_remotewakeup+0x4c>)
    7c84:	4798      	blx	r3
    7c86:	1c03      	adds	r3, r0, #0
    7c88:	2b02      	cmp	r3, #2
    7c8a:	d004      	beq.n	7c96 <udd_send_remotewakeup+0x36>
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	1e5a      	subs	r2, r3, #1
    7c90:	607a      	str	r2, [r7, #4]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d1ef      	bne.n	7c76 <udd_send_remotewakeup+0x16>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    7c96:	46bd      	mov	sp, r7
    7c98:	b002      	add	sp, #8
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	00006fdd 	.word	0x00006fdd
    7ca0:	00007015 	.word	0x00007015
    7ca4:	20006e5c 	.word	0x20006e5c
    7ca8:	00006e7d 	.word	0x00006e7d
    7cac:	00006da1 	.word	0x00006da1

00007cb0 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b082      	sub	sp, #8
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	6078      	str	r0, [r7, #4]
    7cb8:	1c0a      	adds	r2, r1, #0
    7cba:	1cbb      	adds	r3, r7, #2
    7cbc:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    7cbe:	4b05      	ldr	r3, [pc, #20]	; (7cd4 <udd_set_setup_payload+0x24>)
    7cc0:	687a      	ldr	r2, [r7, #4]
    7cc2:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    7cc4:	4b03      	ldr	r3, [pc, #12]	; (7cd4 <udd_set_setup_payload+0x24>)
    7cc6:	1cba      	adds	r2, r7, #2
    7cc8:	8812      	ldrh	r2, [r2, #0]
    7cca:	819a      	strh	r2, [r3, #12]
}
    7ccc:	46bd      	mov	sp, r7
    7cce:	b002      	add	sp, #8
    7cd0:	bd80      	pop	{r7, pc}
    7cd2:	46c0      	nop			; (mov r8, r8)
    7cd4:	20006fc4 	.word	0x20006fc4

00007cd8 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    7cdc:	4b13      	ldr	r3, [pc, #76]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7cde:	781a      	ldrb	r2, [r3, #0]
    7ce0:	4b13      	ldr	r3, [pc, #76]	; (7d30 <udd_ctrl_fetch_ram+0x58>)
    7ce2:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    7ce4:	4b11      	ldr	r3, [pc, #68]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7ce6:	785a      	ldrb	r2, [r3, #1]
    7ce8:	4b11      	ldr	r3, [pc, #68]	; (7d30 <udd_ctrl_fetch_ram+0x58>)
    7cea:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    7cec:	4b0f      	ldr	r3, [pc, #60]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7cee:	78db      	ldrb	r3, [r3, #3]
    7cf0:	021b      	lsls	r3, r3, #8
    7cf2:	b29a      	uxth	r2, r3
    7cf4:	4b0d      	ldr	r3, [pc, #52]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7cf6:	789b      	ldrb	r3, [r3, #2]
    7cf8:	18d3      	adds	r3, r2, r3
    7cfa:	b29a      	uxth	r2, r3
    7cfc:	4b0c      	ldr	r3, [pc, #48]	; (7d30 <udd_ctrl_fetch_ram+0x58>)
    7cfe:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    7d00:	4b0a      	ldr	r3, [pc, #40]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7d02:	795b      	ldrb	r3, [r3, #5]
    7d04:	021b      	lsls	r3, r3, #8
    7d06:	b29a      	uxth	r2, r3
    7d08:	4b08      	ldr	r3, [pc, #32]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7d0a:	791b      	ldrb	r3, [r3, #4]
    7d0c:	18d3      	adds	r3, r2, r3
    7d0e:	b29a      	uxth	r2, r3
    7d10:	4b07      	ldr	r3, [pc, #28]	; (7d30 <udd_ctrl_fetch_ram+0x58>)
    7d12:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    7d14:	4b05      	ldr	r3, [pc, #20]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7d16:	79db      	ldrb	r3, [r3, #7]
    7d18:	021b      	lsls	r3, r3, #8
    7d1a:	b29a      	uxth	r2, r3
    7d1c:	4b03      	ldr	r3, [pc, #12]	; (7d2c <udd_ctrl_fetch_ram+0x54>)
    7d1e:	799b      	ldrb	r3, [r3, #6]
    7d20:	18d3      	adds	r3, r2, r3
    7d22:	b29a      	uxth	r2, r3
    7d24:	4b02      	ldr	r3, [pc, #8]	; (7d30 <udd_ctrl_fetch_ram+0x58>)
    7d26:	80da      	strh	r2, [r3, #6]
}
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	20006fdc 	.word	0x20006fdc
    7d30:	20006fc4 	.word	0x20006fc4

00007d34 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    7d34:	b598      	push	{r3, r4, r7, lr}
    7d36:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    7d38:	4b09      	ldr	r3, [pc, #36]	; (7d60 <udd_ctrl_send_zlp_in+0x2c>)
    7d3a:	2203      	movs	r2, #3
    7d3c:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7d3e:	4a09      	ldr	r2, [pc, #36]	; (7d64 <udd_ctrl_send_zlp_in+0x30>)
    7d40:	4b09      	ldr	r3, [pc, #36]	; (7d68 <udd_ctrl_send_zlp_in+0x34>)
    7d42:	1c10      	adds	r0, r2, #0
    7d44:	1c19      	adds	r1, r3, #0
    7d46:	4b09      	ldr	r3, [pc, #36]	; (7d6c <udd_ctrl_send_zlp_in+0x38>)
    7d48:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    7d4a:	4b09      	ldr	r3, [pc, #36]	; (7d70 <udd_ctrl_send_zlp_in+0x3c>)
    7d4c:	689b      	ldr	r3, [r3, #8]
    7d4e:	4a05      	ldr	r2, [pc, #20]	; (7d64 <udd_ctrl_send_zlp_in+0x30>)
    7d50:	1c10      	adds	r0, r2, #0
    7d52:	2100      	movs	r1, #0
    7d54:	1c1a      	adds	r2, r3, #0
    7d56:	2300      	movs	r3, #0
    7d58:	4c06      	ldr	r4, [pc, #24]	; (7d74 <udd_ctrl_send_zlp_in+0x40>)
    7d5a:	47a0      	blx	r4
}
    7d5c:	46bd      	mov	sp, r7
    7d5e:	bd98      	pop	{r3, r4, r7, pc}
    7d60:	20006c78 	.word	0x20006c78
    7d64:	20006e5c 	.word	0x20006e5c
    7d68:	20006fdc 	.word	0x20006fdc
    7d6c:	000099d5 	.word	0x000099d5
    7d70:	20006fc4 	.word	0x20006fc4
    7d74:	00009871 	.word	0x00009871

00007d78 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    7d78:	b590      	push	{r4, r7, lr}
    7d7a:	b083      	sub	sp, #12
    7d7c:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7d7e:	4b30      	ldr	r3, [pc, #192]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7d80:	8999      	ldrh	r1, [r3, #12]
    7d82:	4b30      	ldr	r3, [pc, #192]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7d84:	881a      	ldrh	r2, [r3, #0]
    7d86:	1dbb      	adds	r3, r7, #6
    7d88:	1a8a      	subs	r2, r1, r2
    7d8a:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    7d8c:	1dbb      	adds	r3, r7, #6
    7d8e:	881b      	ldrh	r3, [r3, #0]
    7d90:	2b00      	cmp	r3, #0
    7d92:	d12f      	bne.n	7df4 <udd_ctrl_in_sent+0x7c>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    7d94:	4b2c      	ldr	r3, [pc, #176]	; (7e48 <udd_ctrl_in_sent+0xd0>)
    7d96:	881a      	ldrh	r2, [r3, #0]
    7d98:	4b2a      	ldr	r3, [pc, #168]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7d9a:	881b      	ldrh	r3, [r3, #0]
    7d9c:	18d3      	adds	r3, r2, r3
    7d9e:	b29a      	uxth	r2, r3
    7da0:	4b29      	ldr	r3, [pc, #164]	; (7e48 <udd_ctrl_in_sent+0xd0>)
    7da2:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    7da4:	4b26      	ldr	r3, [pc, #152]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7da6:	88da      	ldrh	r2, [r3, #6]
    7da8:	4b27      	ldr	r3, [pc, #156]	; (7e48 <udd_ctrl_in_sent+0xd0>)
    7daa:	881b      	ldrh	r3, [r3, #0]
    7dac:	429a      	cmp	r2, r3
    7dae:	d003      	beq.n	7db8 <udd_ctrl_in_sent+0x40>
    7db0:	4b26      	ldr	r3, [pc, #152]	; (7e4c <udd_ctrl_in_sent+0xd4>)
    7db2:	781b      	ldrb	r3, [r3, #0]
    7db4:	2b00      	cmp	r3, #0
    7db6:	d009      	beq.n	7dcc <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    7db8:	4b25      	ldr	r3, [pc, #148]	; (7e50 <udd_ctrl_in_sent+0xd8>)
    7dba:	2204      	movs	r2, #4
    7dbc:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    7dbe:	4a25      	ldr	r2, [pc, #148]	; (7e54 <udd_ctrl_in_sent+0xdc>)
    7dc0:	4b25      	ldr	r3, [pc, #148]	; (7e58 <udd_ctrl_in_sent+0xe0>)
    7dc2:	1c10      	adds	r0, r2, #0
    7dc4:	1c19      	adds	r1, r3, #0
    7dc6:	4b25      	ldr	r3, [pc, #148]	; (7e5c <udd_ctrl_in_sent+0xe4>)
    7dc8:	4798      	blx	r3
			return;
    7dca:	e035      	b.n	7e38 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    7dcc:	4b1c      	ldr	r3, [pc, #112]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7dce:	695b      	ldr	r3, [r3, #20]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d00f      	beq.n	7df4 <udd_ctrl_in_sent+0x7c>
    7dd4:	4b1a      	ldr	r3, [pc, #104]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7dd6:	695b      	ldr	r3, [r3, #20]
    7dd8:	4798      	blx	r3
    7dda:	1c03      	adds	r3, r0, #0
    7ddc:	2201      	movs	r2, #1
    7dde:	4053      	eors	r3, r2
    7de0:	b2db      	uxtb	r3, r3
    7de2:	2b00      	cmp	r3, #0
    7de4:	d106      	bne.n	7df4 <udd_ctrl_in_sent+0x7c>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    7de6:	4b17      	ldr	r3, [pc, #92]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7de8:	2200      	movs	r2, #0
    7dea:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    7dec:	1dbb      	adds	r3, r7, #6
    7dee:	4a14      	ldr	r2, [pc, #80]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7df0:	8992      	ldrh	r2, [r2, #12]
    7df2:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    7df4:	1dbb      	adds	r3, r7, #6
    7df6:	881b      	ldrh	r3, [r3, #0]
    7df8:	2b3f      	cmp	r3, #63	; 0x3f
    7dfa:	d906      	bls.n	7e0a <udd_ctrl_in_sent+0x92>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    7dfc:	1dbb      	adds	r3, r7, #6
    7dfe:	2240      	movs	r2, #64	; 0x40
    7e00:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    7e02:	4b12      	ldr	r3, [pc, #72]	; (7e4c <udd_ctrl_in_sent+0xd4>)
    7e04:	2200      	movs	r2, #0
    7e06:	701a      	strb	r2, [r3, #0]
    7e08:	e002      	b.n	7e10 <udd_ctrl_in_sent+0x98>
	} else {
		b_shortpacket = true;
    7e0a:	4b10      	ldr	r3, [pc, #64]	; (7e4c <udd_ctrl_in_sent+0xd4>)
    7e0c:	2201      	movs	r2, #1
    7e0e:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    7e10:	4b0b      	ldr	r3, [pc, #44]	; (7e40 <udd_ctrl_in_sent+0xc8>)
    7e12:	689a      	ldr	r2, [r3, #8]
    7e14:	4b0b      	ldr	r3, [pc, #44]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7e16:	881b      	ldrh	r3, [r3, #0]
    7e18:	18d2      	adds	r2, r2, r3
    7e1a:	1dbb      	adds	r3, r7, #6
    7e1c:	881b      	ldrh	r3, [r3, #0]
    7e1e:	490d      	ldr	r1, [pc, #52]	; (7e54 <udd_ctrl_in_sent+0xdc>)
    7e20:	1c08      	adds	r0, r1, #0
    7e22:	2100      	movs	r1, #0
    7e24:	4c0e      	ldr	r4, [pc, #56]	; (7e60 <udd_ctrl_in_sent+0xe8>)
    7e26:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    7e28:	4b06      	ldr	r3, [pc, #24]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7e2a:	881a      	ldrh	r2, [r3, #0]
    7e2c:	1dbb      	adds	r3, r7, #6
    7e2e:	881b      	ldrh	r3, [r3, #0]
    7e30:	18d3      	adds	r3, r2, r3
    7e32:	b29a      	uxth	r2, r3
    7e34:	4b03      	ldr	r3, [pc, #12]	; (7e44 <udd_ctrl_in_sent+0xcc>)
    7e36:	801a      	strh	r2, [r3, #0]
}
    7e38:	46bd      	mov	sp, r7
    7e3a:	b003      	add	sp, #12
    7e3c:	bd90      	pop	{r4, r7, pc}
    7e3e:	46c0      	nop			; (mov r8, r8)
    7e40:	20006fc4 	.word	0x20006fc4
    7e44:	20006c7c 	.word	0x20006c7c
    7e48:	20006c7a 	.word	0x20006c7a
    7e4c:	20006d99 	.word	0x20006d99
    7e50:	20006c78 	.word	0x20006c78
    7e54:	20006e5c 	.word	0x20006e5c
    7e58:	20006fdc 	.word	0x20006fdc
    7e5c:	000099d5 	.word	0x000099d5
    7e60:	00009871 	.word	0x00009871

00007e64 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    7e64:	b590      	push	{r4, r7, lr}
    7e66:	b085      	sub	sp, #20
    7e68:	af00      	add	r7, sp, #0
    7e6a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    7e70:	1c3b      	adds	r3, r7, #0
    7e72:	330e      	adds	r3, #14
    7e74:	68ba      	ldr	r2, [r7, #8]
    7e76:	8812      	ldrh	r2, [r2, #0]
    7e78:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    7e7a:	4b46      	ldr	r3, [pc, #280]	; (7f94 <udd_ctrl_out_received+0x130>)
    7e7c:	899b      	ldrh	r3, [r3, #12]
    7e7e:	1c1a      	adds	r2, r3, #0
    7e80:	4b45      	ldr	r3, [pc, #276]	; (7f98 <udd_ctrl_out_received+0x134>)
    7e82:	881b      	ldrh	r3, [r3, #0]
    7e84:	1c19      	adds	r1, r3, #0
    7e86:	1c3b      	adds	r3, r7, #0
    7e88:	330e      	adds	r3, #14
    7e8a:	881b      	ldrh	r3, [r3, #0]
    7e8c:	18cb      	adds	r3, r1, r3
    7e8e:	429a      	cmp	r2, r3
    7e90:	da07      	bge.n	7ea2 <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    7e92:	4b40      	ldr	r3, [pc, #256]	; (7f94 <udd_ctrl_out_received+0x130>)
    7e94:	8999      	ldrh	r1, [r3, #12]
    7e96:	4b40      	ldr	r3, [pc, #256]	; (7f98 <udd_ctrl_out_received+0x134>)
    7e98:	881a      	ldrh	r2, [r3, #0]
    7e9a:	1c3b      	adds	r3, r7, #0
    7e9c:	330e      	adds	r3, #14
    7e9e:	1a8a      	subs	r2, r1, r2
    7ea0:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    7ea2:	4b3c      	ldr	r3, [pc, #240]	; (7f94 <udd_ctrl_out_received+0x130>)
    7ea4:	689a      	ldr	r2, [r3, #8]
    7ea6:	4b3c      	ldr	r3, [pc, #240]	; (7f98 <udd_ctrl_out_received+0x134>)
    7ea8:	881b      	ldrh	r3, [r3, #0]
    7eaa:	18d1      	adds	r1, r2, r3
    7eac:	1c3b      	adds	r3, r7, #0
    7eae:	330e      	adds	r3, #14
    7eb0:	881b      	ldrh	r3, [r3, #0]
    7eb2:	4a3a      	ldr	r2, [pc, #232]	; (7f9c <udd_ctrl_out_received+0x138>)
    7eb4:	1c08      	adds	r0, r1, #0
    7eb6:	1c11      	adds	r1, r2, #0
    7eb8:	1c1a      	adds	r2, r3, #0
    7eba:	4b39      	ldr	r3, [pc, #228]	; (7fa0 <udd_ctrl_out_received+0x13c>)
    7ebc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    7ebe:	4b36      	ldr	r3, [pc, #216]	; (7f98 <udd_ctrl_out_received+0x134>)
    7ec0:	881a      	ldrh	r2, [r3, #0]
    7ec2:	1c3b      	adds	r3, r7, #0
    7ec4:	330e      	adds	r3, #14
    7ec6:	881b      	ldrh	r3, [r3, #0]
    7ec8:	18d3      	adds	r3, r2, r3
    7eca:	b29a      	uxth	r2, r3
    7ecc:	4b32      	ldr	r3, [pc, #200]	; (7f98 <udd_ctrl_out_received+0x134>)
    7ece:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    7ed0:	1c3b      	adds	r3, r7, #0
    7ed2:	330e      	adds	r3, #14
    7ed4:	881b      	ldrh	r3, [r3, #0]
    7ed6:	2b40      	cmp	r3, #64	; 0x40
    7ed8:	d10a      	bne.n	7ef0 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    7eda:	4b2e      	ldr	r3, [pc, #184]	; (7f94 <udd_ctrl_out_received+0x130>)
    7edc:	88db      	ldrh	r3, [r3, #6]
    7ede:	1c1a      	adds	r2, r3, #0
    7ee0:	4b30      	ldr	r3, [pc, #192]	; (7fa4 <udd_ctrl_out_received+0x140>)
    7ee2:	881b      	ldrh	r3, [r3, #0]
    7ee4:	1c19      	adds	r1, r3, #0
    7ee6:	4b2c      	ldr	r3, [pc, #176]	; (7f98 <udd_ctrl_out_received+0x134>)
    7ee8:	881b      	ldrh	r3, [r3, #0]
    7eea:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    7eec:	429a      	cmp	r2, r3
    7eee:	dc1a      	bgt.n	7f26 <udd_ctrl_out_received+0xc2>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    7ef0:	4b29      	ldr	r3, [pc, #164]	; (7f98 <udd_ctrl_out_received+0x134>)
    7ef2:	881a      	ldrh	r2, [r3, #0]
    7ef4:	4b27      	ldr	r3, [pc, #156]	; (7f94 <udd_ctrl_out_received+0x130>)
    7ef6:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    7ef8:	4b26      	ldr	r3, [pc, #152]	; (7f94 <udd_ctrl_out_received+0x130>)
    7efa:	695b      	ldr	r3, [r3, #20]
    7efc:	2b00      	cmp	r3, #0
    7efe:	d00f      	beq.n	7f20 <udd_ctrl_out_received+0xbc>
			if (!udd_g_ctrlreq.over_under_run()) {
    7f00:	4b24      	ldr	r3, [pc, #144]	; (7f94 <udd_ctrl_out_received+0x130>)
    7f02:	695b      	ldr	r3, [r3, #20]
    7f04:	4798      	blx	r3
    7f06:	1c03      	adds	r3, r0, #0
    7f08:	2201      	movs	r2, #1
    7f0a:	4053      	eors	r3, r2
    7f0c:	b2db      	uxtb	r3, r3
    7f0e:	2b00      	cmp	r3, #0
    7f10:	d006      	beq.n	7f20 <udd_ctrl_out_received+0xbc>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7f12:	4b25      	ldr	r3, [pc, #148]	; (7fa8 <udd_ctrl_out_received+0x144>)
    7f14:	2205      	movs	r2, #5
    7f16:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    7f18:	2000      	movs	r0, #0
    7f1a:	4b24      	ldr	r3, [pc, #144]	; (7fac <udd_ctrl_out_received+0x148>)
    7f1c:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    7f1e:	e036      	b.n	7f8e <udd_ctrl_out_received+0x12a>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    7f20:	4b23      	ldr	r3, [pc, #140]	; (7fb0 <udd_ctrl_out_received+0x14c>)
    7f22:	4798      	blx	r3
		return;
    7f24:	e033      	b.n	7f8e <udd_ctrl_out_received+0x12a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    7f26:	4b1b      	ldr	r3, [pc, #108]	; (7f94 <udd_ctrl_out_received+0x130>)
    7f28:	899a      	ldrh	r2, [r3, #12]
    7f2a:	4b1b      	ldr	r3, [pc, #108]	; (7f98 <udd_ctrl_out_received+0x134>)
    7f2c:	881b      	ldrh	r3, [r3, #0]
    7f2e:	429a      	cmp	r2, r3
    7f30:	d125      	bne.n	7f7e <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    7f32:	4b18      	ldr	r3, [pc, #96]	; (7f94 <udd_ctrl_out_received+0x130>)
    7f34:	695b      	ldr	r3, [r3, #20]
    7f36:	2b00      	cmp	r3, #0
    7f38:	d106      	bne.n	7f48 <udd_ctrl_out_received+0xe4>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7f3a:	4b1b      	ldr	r3, [pc, #108]	; (7fa8 <udd_ctrl_out_received+0x144>)
    7f3c:	2205      	movs	r2, #5
    7f3e:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    7f40:	2000      	movs	r0, #0
    7f42:	4b1a      	ldr	r3, [pc, #104]	; (7fac <udd_ctrl_out_received+0x148>)
    7f44:	4798      	blx	r3
			return;
    7f46:	e022      	b.n	7f8e <udd_ctrl_out_received+0x12a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    7f48:	4b12      	ldr	r3, [pc, #72]	; (7f94 <udd_ctrl_out_received+0x130>)
    7f4a:	695b      	ldr	r3, [r3, #20]
    7f4c:	4798      	blx	r3
    7f4e:	1c03      	adds	r3, r0, #0
    7f50:	2201      	movs	r2, #1
    7f52:	4053      	eors	r3, r2
    7f54:	b2db      	uxtb	r3, r3
    7f56:	2b00      	cmp	r3, #0
    7f58:	d006      	beq.n	7f68 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    7f5a:	4b13      	ldr	r3, [pc, #76]	; (7fa8 <udd_ctrl_out_received+0x144>)
    7f5c:	2205      	movs	r2, #5
    7f5e:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    7f60:	2000      	movs	r0, #0
    7f62:	4b12      	ldr	r3, [pc, #72]	; (7fac <udd_ctrl_out_received+0x148>)
    7f64:	4798      	blx	r3
			return;
    7f66:	e012      	b.n	7f8e <udd_ctrl_out_received+0x12a>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    7f68:	4b0e      	ldr	r3, [pc, #56]	; (7fa4 <udd_ctrl_out_received+0x140>)
    7f6a:	881a      	ldrh	r2, [r3, #0]
    7f6c:	4b0a      	ldr	r3, [pc, #40]	; (7f98 <udd_ctrl_out_received+0x134>)
    7f6e:	881b      	ldrh	r3, [r3, #0]
    7f70:	18d3      	adds	r3, r2, r3
    7f72:	b29a      	uxth	r2, r3
    7f74:	4b0b      	ldr	r3, [pc, #44]	; (7fa4 <udd_ctrl_out_received+0x140>)
    7f76:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    7f78:	4b07      	ldr	r3, [pc, #28]	; (7f98 <udd_ctrl_out_received+0x134>)
    7f7a:	2200      	movs	r2, #0
    7f7c:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    7f7e:	4a0d      	ldr	r2, [pc, #52]	; (7fb4 <udd_ctrl_out_received+0x150>)
    7f80:	4b06      	ldr	r3, [pc, #24]	; (7f9c <udd_ctrl_out_received+0x138>)
    7f82:	1c10      	adds	r0, r2, #0
    7f84:	2100      	movs	r1, #0
    7f86:	1c1a      	adds	r2, r3, #0
    7f88:	2340      	movs	r3, #64	; 0x40
    7f8a:	4c0b      	ldr	r4, [pc, #44]	; (7fb8 <udd_ctrl_out_received+0x154>)
    7f8c:	47a0      	blx	r4
}
    7f8e:	46bd      	mov	sp, r7
    7f90:	b005      	add	sp, #20
    7f92:	bd90      	pop	{r4, r7, pc}
    7f94:	20006fc4 	.word	0x20006fc4
    7f98:	20006c7c 	.word	0x20006c7c
    7f9c:	20006fdc 	.word	0x20006fdc
    7fa0:	0000b0ad 	.word	0x0000b0ad
    7fa4:	20006c7a 	.word	0x20006c7a
    7fa8:	20006c78 	.word	0x20006c78
    7fac:	00007791 	.word	0x00007791
    7fb0:	00007d35 	.word	0x00007d35
    7fb4:	20006e5c 	.word	0x20006e5c
    7fb8:	00009929 	.word	0x00009929

00007fbc <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    7fbc:	b590      	push	{r4, r7, lr}
    7fbe:	b085      	sub	sp, #20
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	6078      	str	r0, [r7, #4]
    7fc4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    7fc6:	683b      	ldr	r3, [r7, #0]
    7fc8:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    7fca:	4b2b      	ldr	r3, [pc, #172]	; (8078 <_usb_ep0_on_setup+0xbc>)
    7fcc:	781b      	ldrb	r3, [r3, #0]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d009      	beq.n	7fe6 <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    7fd2:	4b2a      	ldr	r3, [pc, #168]	; (807c <_usb_ep0_on_setup+0xc0>)
    7fd4:	691b      	ldr	r3, [r3, #16]
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	d002      	beq.n	7fe0 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    7fda:	4b28      	ldr	r3, [pc, #160]	; (807c <_usb_ep0_on_setup+0xc0>)
    7fdc:	691b      	ldr	r3, [r3, #16]
    7fde:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    7fe0:	4b25      	ldr	r3, [pc, #148]	; (8078 <_usb_ep0_on_setup+0xbc>)
    7fe2:	2200      	movs	r2, #0
    7fe4:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    7fe6:	68fb      	ldr	r3, [r7, #12]
    7fe8:	881b      	ldrh	r3, [r3, #0]
    7fea:	2b08      	cmp	r3, #8
    7fec:	d002      	beq.n	7ff4 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    7fee:	4b24      	ldr	r3, [pc, #144]	; (8080 <_usb_ep0_on_setup+0xc4>)
    7ff0:	4798      	blx	r3
		return;
    7ff2:	e03e      	b.n	8072 <_usb_ep0_on_setup+0xb6>
	} else {
		udd_ctrl_fetch_ram();
    7ff4:	4b23      	ldr	r3, [pc, #140]	; (8084 <_usb_ep0_on_setup+0xc8>)
    7ff6:	4798      	blx	r3
		if (false == udc_process_setup()) {
    7ff8:	4b23      	ldr	r3, [pc, #140]	; (8088 <_usb_ep0_on_setup+0xcc>)
    7ffa:	4798      	blx	r3
    7ffc:	1c03      	adds	r3, r0, #0
    7ffe:	2201      	movs	r2, #1
    8000:	4053      	eors	r3, r2
    8002:	b2db      	uxtb	r3, r3
    8004:	2b00      	cmp	r3, #0
    8006:	d002      	beq.n	800e <_usb_ep0_on_setup+0x52>
			udd_ctrl_stall_data();
    8008:	4b1d      	ldr	r3, [pc, #116]	; (8080 <_usb_ep0_on_setup+0xc4>)
    800a:	4798      	blx	r3
			return;
    800c:	e031      	b.n	8072 <_usb_ep0_on_setup+0xb6>
		} else if (Udd_setup_is_in()) {
    800e:	4b1b      	ldr	r3, [pc, #108]	; (807c <_usb_ep0_on_setup+0xc0>)
    8010:	781b      	ldrb	r3, [r3, #0]
    8012:	b2db      	uxtb	r3, r3
    8014:	b25b      	sxtb	r3, r3
    8016:	2b00      	cmp	r3, #0
    8018:	da13      	bge.n	8042 <_usb_ep0_on_setup+0x86>
			udd_ctrl_prev_payload_nb_trans = 0;
    801a:	4b1c      	ldr	r3, [pc, #112]	; (808c <_usb_ep0_on_setup+0xd0>)
    801c:	2200      	movs	r2, #0
    801e:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    8020:	4b1b      	ldr	r3, [pc, #108]	; (8090 <_usb_ep0_on_setup+0xd4>)
    8022:	2200      	movs	r2, #0
    8024:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    8026:	4b14      	ldr	r3, [pc, #80]	; (8078 <_usb_ep0_on_setup+0xbc>)
    8028:	2202      	movs	r2, #2
    802a:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    802c:	4a19      	ldr	r2, [pc, #100]	; (8094 <_usb_ep0_on_setup+0xd8>)
    802e:	4b1a      	ldr	r3, [pc, #104]	; (8098 <_usb_ep0_on_setup+0xdc>)
    8030:	1c10      	adds	r0, r2, #0
    8032:	2100      	movs	r1, #0
    8034:	1c1a      	adds	r2, r3, #0
    8036:	2340      	movs	r3, #64	; 0x40
    8038:	4c18      	ldr	r4, [pc, #96]	; (809c <_usb_ep0_on_setup+0xe0>)
    803a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    803c:	4b18      	ldr	r3, [pc, #96]	; (80a0 <_usb_ep0_on_setup+0xe4>)
    803e:	4798      	blx	r3
    8040:	e017      	b.n	8072 <_usb_ep0_on_setup+0xb6>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    8042:	4b0e      	ldr	r3, [pc, #56]	; (807c <_usb_ep0_on_setup+0xc0>)
    8044:	88db      	ldrh	r3, [r3, #6]
    8046:	2b00      	cmp	r3, #0
    8048:	d102      	bne.n	8050 <_usb_ep0_on_setup+0x94>
				udd_ctrl_send_zlp_in();
    804a:	4b16      	ldr	r3, [pc, #88]	; (80a4 <_usb_ep0_on_setup+0xe8>)
    804c:	4798      	blx	r3
				return;
    804e:	e010      	b.n	8072 <_usb_ep0_on_setup+0xb6>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    8050:	4b0e      	ldr	r3, [pc, #56]	; (808c <_usb_ep0_on_setup+0xd0>)
    8052:	2200      	movs	r2, #0
    8054:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    8056:	4b0e      	ldr	r3, [pc, #56]	; (8090 <_usb_ep0_on_setup+0xd4>)
    8058:	2200      	movs	r2, #0
    805a:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    805c:	4b06      	ldr	r3, [pc, #24]	; (8078 <_usb_ep0_on_setup+0xbc>)
    805e:	2201      	movs	r2, #1
    8060:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    8062:	4a0c      	ldr	r2, [pc, #48]	; (8094 <_usb_ep0_on_setup+0xd8>)
    8064:	4b0c      	ldr	r3, [pc, #48]	; (8098 <_usb_ep0_on_setup+0xdc>)
    8066:	1c10      	adds	r0, r2, #0
    8068:	2100      	movs	r1, #0
    806a:	1c1a      	adds	r2, r3, #0
    806c:	2340      	movs	r3, #64	; 0x40
    806e:	4c0b      	ldr	r4, [pc, #44]	; (809c <_usb_ep0_on_setup+0xe0>)
    8070:	47a0      	blx	r4
			}
		}
	}
}
    8072:	46bd      	mov	sp, r7
    8074:	b005      	add	sp, #20
    8076:	bd90      	pop	{r4, r7, pc}
    8078:	20006c78 	.word	0x20006c78
    807c:	20006fc4 	.word	0x20006fc4
    8080:	00007909 	.word	0x00007909
    8084:	00007cd9 	.word	0x00007cd9
    8088:	000043a1 	.word	0x000043a1
    808c:	20006c7a 	.word	0x20006c7a
    8090:	20006c7c 	.word	0x20006c7c
    8094:	20006e5c 	.word	0x20006e5c
    8098:	20006fdc 	.word	0x20006fdc
    809c:	00009929 	.word	0x00009929
    80a0:	00007d79 	.word	0x00007d79
    80a4:	00007d35 	.word	0x00007d35

000080a8 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    80a8:	b580      	push	{r7, lr}
    80aa:	b084      	sub	sp, #16
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    80b4:	4b0a      	ldr	r3, [pc, #40]	; (80e0 <udd_ctrl_underflow+0x38>)
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	2b01      	cmp	r3, #1
    80ba:	d102      	bne.n	80c2 <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    80bc:	4b09      	ldr	r3, [pc, #36]	; (80e4 <udd_ctrl_underflow+0x3c>)
    80be:	4798      	blx	r3
    80c0:	e00a      	b.n	80d8 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    80c2:	4b07      	ldr	r3, [pc, #28]	; (80e0 <udd_ctrl_underflow+0x38>)
    80c4:	781b      	ldrb	r3, [r3, #0]
    80c6:	2b04      	cmp	r3, #4
    80c8:	d106      	bne.n	80d8 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    80ca:	68fb      	ldr	r3, [r7, #12]
    80cc:	799b      	ldrb	r3, [r3, #6]
    80ce:	4a06      	ldr	r2, [pc, #24]	; (80e8 <udd_ctrl_underflow+0x40>)
    80d0:	1c10      	adds	r0, r2, #0
    80d2:	1c19      	adds	r1, r3, #0
    80d4:	4b05      	ldr	r3, [pc, #20]	; (80ec <udd_ctrl_underflow+0x44>)
    80d6:	4798      	blx	r3
	}
}
    80d8:	46bd      	mov	sp, r7
    80da:	b004      	add	sp, #16
    80dc:	bd80      	pop	{r7, pc}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	20006c78 	.word	0x20006c78
    80e4:	00007d35 	.word	0x00007d35
    80e8:	20006e5c 	.word	0x20006e5c
    80ec:	00009701 	.word	0x00009701

000080f0 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    80f0:	b580      	push	{r7, lr}
    80f2:	b084      	sub	sp, #16
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    80fc:	4b0a      	ldr	r3, [pc, #40]	; (8128 <udd_ctrl_overflow+0x38>)
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	2b02      	cmp	r3, #2
    8102:	d103      	bne.n	810c <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    8104:	4b08      	ldr	r3, [pc, #32]	; (8128 <udd_ctrl_overflow+0x38>)
    8106:	2204      	movs	r2, #4
    8108:	701a      	strb	r2, [r3, #0]
    810a:	e00a      	b.n	8122 <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    810c:	4b06      	ldr	r3, [pc, #24]	; (8128 <udd_ctrl_overflow+0x38>)
    810e:	781b      	ldrb	r3, [r3, #0]
    8110:	2b03      	cmp	r3, #3
    8112:	d106      	bne.n	8122 <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    8114:	68fb      	ldr	r3, [r7, #12]
    8116:	799b      	ldrb	r3, [r3, #6]
    8118:	4a04      	ldr	r2, [pc, #16]	; (812c <udd_ctrl_overflow+0x3c>)
    811a:	1c10      	adds	r0, r2, #0
    811c:	1c19      	adds	r1, r3, #0
    811e:	4b04      	ldr	r3, [pc, #16]	; (8130 <udd_ctrl_overflow+0x40>)
    8120:	4798      	blx	r3
	}
}
    8122:	46bd      	mov	sp, r7
    8124:	b004      	add	sp, #16
    8126:	bd80      	pop	{r7, pc}
    8128:	20006c78 	.word	0x20006c78
    812c:	20006e5c 	.word	0x20006e5c
    8130:	00009701 	.word	0x00009701

00008134 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    8134:	b580      	push	{r7, lr}
    8136:	b084      	sub	sp, #16
    8138:	af00      	add	r7, sp, #0
    813a:	6078      	str	r0, [r7, #4]
    813c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    813e:	683b      	ldr	r3, [r7, #0]
    8140:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    8142:	68fb      	ldr	r3, [r7, #12]
    8144:	799b      	ldrb	r3, [r3, #6]
    8146:	b2db      	uxtb	r3, r3
    8148:	b25b      	sxtb	r3, r3
    814a:	2b00      	cmp	r3, #0
    814c:	da04      	bge.n	8158 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    814e:	683b      	ldr	r3, [r7, #0]
    8150:	1c18      	adds	r0, r3, #0
    8152:	4b05      	ldr	r3, [pc, #20]	; (8168 <_usb_ep0_on_tansfer_fail+0x34>)
    8154:	4798      	blx	r3
    8156:	e003      	b.n	8160 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    8158:	683b      	ldr	r3, [r7, #0]
    815a:	1c18      	adds	r0, r3, #0
    815c:	4b03      	ldr	r3, [pc, #12]	; (816c <_usb_ep0_on_tansfer_fail+0x38>)
    815e:	4798      	blx	r3
	}
}
    8160:	46bd      	mov	sp, r7
    8162:	b004      	add	sp, #16
    8164:	bd80      	pop	{r7, pc}
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	000080a9 	.word	0x000080a9
    816c:	000080f1 	.word	0x000080f1

00008170 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    8170:	b580      	push	{r7, lr}
    8172:	b082      	sub	sp, #8
    8174:	af00      	add	r7, sp, #0
    8176:	6078      	str	r0, [r7, #4]
    8178:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    817a:	4b0e      	ldr	r3, [pc, #56]	; (81b4 <_usb_ep0_on_tansfer_ok+0x44>)
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	2b01      	cmp	r3, #1
    8180:	d104      	bne.n	818c <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    8182:	683b      	ldr	r3, [r7, #0]
    8184:	1c18      	adds	r0, r3, #0
    8186:	4b0c      	ldr	r3, [pc, #48]	; (81b8 <_usb_ep0_on_tansfer_ok+0x48>)
    8188:	4798      	blx	r3
    818a:	e010      	b.n	81ae <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    818c:	4b09      	ldr	r3, [pc, #36]	; (81b4 <_usb_ep0_on_tansfer_ok+0x44>)
    818e:	781b      	ldrb	r3, [r3, #0]
    8190:	2b02      	cmp	r3, #2
    8192:	d102      	bne.n	819a <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    8194:	4b09      	ldr	r3, [pc, #36]	; (81bc <_usb_ep0_on_tansfer_ok+0x4c>)
    8196:	4798      	blx	r3
    8198:	e009      	b.n	81ae <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    819a:	4b09      	ldr	r3, [pc, #36]	; (81c0 <_usb_ep0_on_tansfer_ok+0x50>)
    819c:	691b      	ldr	r3, [r3, #16]
    819e:	2b00      	cmp	r3, #0
    81a0:	d002      	beq.n	81a8 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    81a2:	4b07      	ldr	r3, [pc, #28]	; (81c0 <_usb_ep0_on_tansfer_ok+0x50>)
    81a4:	691b      	ldr	r3, [r3, #16]
    81a6:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    81a8:	4b02      	ldr	r3, [pc, #8]	; (81b4 <_usb_ep0_on_tansfer_ok+0x44>)
    81aa:	2200      	movs	r2, #0
    81ac:	701a      	strb	r2, [r3, #0]
		}
}
    81ae:	46bd      	mov	sp, r7
    81b0:	b002      	add	sp, #8
    81b2:	bd80      	pop	{r7, pc}
    81b4:	20006c78 	.word	0x20006c78
    81b8:	00007e65 	.word	0x00007e65
    81bc:	00007d79 	.word	0x00007d79
    81c0:	20006fc4 	.word	0x20006fc4

000081c4 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    81c4:	b590      	push	{r4, r7, lr}
    81c6:	b085      	sub	sp, #20
    81c8:	af00      	add	r7, sp, #0
    81ca:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    81cc:	1c3b      	adds	r3, r7, #0
    81ce:	330c      	adds	r3, #12
    81d0:	1c18      	adds	r0, r3, #0
    81d2:	4b22      	ldr	r3, [pc, #136]	; (825c <udd_ctrl_ep_enable+0x98>)
    81d4:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    81d6:	1c3b      	adds	r3, r7, #0
    81d8:	330c      	adds	r3, #12
    81da:	2203      	movs	r2, #3
    81dc:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    81de:	687a      	ldr	r2, [r7, #4]
    81e0:	1c3b      	adds	r3, r7, #0
    81e2:	330c      	adds	r3, #12
    81e4:	1c10      	adds	r0, r2, #0
    81e6:	1c19      	adds	r1, r3, #0
    81e8:	4b1d      	ldr	r3, [pc, #116]	; (8260 <udd_ctrl_ep_enable+0x9c>)
    81ea:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    81ec:	687a      	ldr	r2, [r7, #4]
    81ee:	4b1d      	ldr	r3, [pc, #116]	; (8264 <udd_ctrl_ep_enable+0xa0>)
    81f0:	1c10      	adds	r0, r2, #0
    81f2:	1c19      	adds	r1, r3, #0
    81f4:	4b1c      	ldr	r3, [pc, #112]	; (8268 <udd_ctrl_ep_enable+0xa4>)
    81f6:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    81f8:	687a      	ldr	r2, [r7, #4]
    81fa:	4b1c      	ldr	r3, [pc, #112]	; (826c <udd_ctrl_ep_enable+0xa8>)
    81fc:	1c10      	adds	r0, r2, #0
    81fe:	2100      	movs	r1, #0
    8200:	2202      	movs	r2, #2
    8202:	4c1b      	ldr	r4, [pc, #108]	; (8270 <udd_ctrl_ep_enable+0xac>)
    8204:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    8206:	687a      	ldr	r2, [r7, #4]
    8208:	4b1a      	ldr	r3, [pc, #104]	; (8274 <udd_ctrl_ep_enable+0xb0>)
    820a:	1c10      	adds	r0, r2, #0
    820c:	2100      	movs	r1, #0
    820e:	2200      	movs	r2, #0
    8210:	4c17      	ldr	r4, [pc, #92]	; (8270 <udd_ctrl_ep_enable+0xac>)
    8212:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    8214:	687a      	ldr	r2, [r7, #4]
    8216:	4b18      	ldr	r3, [pc, #96]	; (8278 <udd_ctrl_ep_enable+0xb4>)
    8218:	1c10      	adds	r0, r2, #0
    821a:	2100      	movs	r1, #0
    821c:	2201      	movs	r2, #1
    821e:	4c14      	ldr	r4, [pc, #80]	; (8270 <udd_ctrl_ep_enable+0xac>)
    8220:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    8222:	687b      	ldr	r3, [r7, #4]
    8224:	1c18      	adds	r0, r3, #0
    8226:	2100      	movs	r1, #0
    8228:	2202      	movs	r2, #2
    822a:	4b14      	ldr	r3, [pc, #80]	; (827c <udd_ctrl_ep_enable+0xb8>)
    822c:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    822e:	687b      	ldr	r3, [r7, #4]
    8230:	1c18      	adds	r0, r3, #0
    8232:	2100      	movs	r1, #0
    8234:	2200      	movs	r2, #0
    8236:	4b11      	ldr	r3, [pc, #68]	; (827c <udd_ctrl_ep_enable+0xb8>)
    8238:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    823a:	687b      	ldr	r3, [r7, #4]
    823c:	1c18      	adds	r0, r3, #0
    823e:	2100      	movs	r1, #0
    8240:	2201      	movs	r2, #1
    8242:	4b0e      	ldr	r3, [pc, #56]	; (827c <udd_ctrl_ep_enable+0xb8>)
    8244:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    8246:	687b      	ldr	r3, [r7, #4]
    8248:	1c18      	adds	r0, r3, #0
    824a:	2101      	movs	r1, #1
    824c:	4b0c      	ldr	r3, [pc, #48]	; (8280 <udd_ctrl_ep_enable+0xbc>)
    824e:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    8250:	4b0c      	ldr	r3, [pc, #48]	; (8284 <udd_ctrl_ep_enable+0xc0>)
    8252:	2200      	movs	r2, #0
    8254:	701a      	strb	r2, [r3, #0]
}
    8256:	46bd      	mov	sp, r7
    8258:	b005      	add	sp, #20
    825a:	bd90      	pop	{r4, r7, pc}
    825c:	00009099 	.word	0x00009099
    8260:	000090c1 	.word	0x000090c1
    8264:	20006fdc 	.word	0x20006fdc
    8268:	000099d5 	.word	0x000099d5
    826c:	00007fbd 	.word	0x00007fbd
    8270:	00008c8d 	.word	0x00008c8d
    8274:	00008171 	.word	0x00008171
    8278:	00008135 	.word	0x00008135
    827c:	00008d6d 	.word	0x00008d6d
    8280:	00006ea1 	.word	0x00006ea1
    8284:	20006c78 	.word	0x20006c78

00008288 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
    8290:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8292:	4b09      	ldr	r3, [pc, #36]	; (82b8 <_usb_on_suspend+0x30>)
    8294:	1c18      	adds	r0, r3, #0
    8296:	2104      	movs	r1, #4
    8298:	4b08      	ldr	r3, [pc, #32]	; (82bc <_usb_on_suspend+0x34>)
    829a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    829c:	4b06      	ldr	r3, [pc, #24]	; (82b8 <_usb_on_suspend+0x30>)
    829e:	1c18      	adds	r0, r3, #0
    82a0:	2102      	movs	r1, #2
    82a2:	4b07      	ldr	r3, [pc, #28]	; (82c0 <_usb_on_suspend+0x38>)
    82a4:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    82a6:	2001      	movs	r0, #1
    82a8:	4b06      	ldr	r3, [pc, #24]	; (82c4 <_usb_on_suspend+0x3c>)
    82aa:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    82ac:	4b06      	ldr	r3, [pc, #24]	; (82c8 <_usb_on_suspend+0x40>)
    82ae:	4798      	blx	r3
#endif
}
    82b0:	46bd      	mov	sp, r7
    82b2:	b002      	add	sp, #8
    82b4:	bd80      	pop	{r7, pc}
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	20006e5c 	.word	0x20006e5c
    82bc:	00008c39 	.word	0x00008c39
    82c0:	00008bdd 	.word	0x00008bdd
    82c4:	00007015 	.word	0x00007015
    82c8:	0000a63d 	.word	0x0000a63d

000082cc <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b084      	sub	sp, #16
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
    82d4:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    82d6:	683b      	ldr	r3, [r7, #0]
    82d8:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    82da:	4b0a      	ldr	r3, [pc, #40]	; (8304 <_usb_device_lpm_suspend+0x38>)
    82dc:	1c18      	adds	r0, r3, #0
    82de:	2106      	movs	r1, #6
    82e0:	4b09      	ldr	r3, [pc, #36]	; (8308 <_usb_device_lpm_suspend+0x3c>)
    82e2:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    82e4:	4b07      	ldr	r3, [pc, #28]	; (8304 <_usb_device_lpm_suspend+0x38>)
    82e6:	1c18      	adds	r0, r3, #0
    82e8:	2104      	movs	r1, #4
    82ea:	4b07      	ldr	r3, [pc, #28]	; (8308 <_usb_device_lpm_suspend+0x3c>)
    82ec:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    82ee:	4b05      	ldr	r3, [pc, #20]	; (8304 <_usb_device_lpm_suspend+0x38>)
    82f0:	1c18      	adds	r0, r3, #0
    82f2:	2102      	movs	r1, #2
    82f4:	4b05      	ldr	r3, [pc, #20]	; (830c <_usb_device_lpm_suspend+0x40>)
    82f6:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    82f8:	2002      	movs	r0, #2
    82fa:	4b05      	ldr	r3, [pc, #20]	; (8310 <_usb_device_lpm_suspend+0x44>)
    82fc:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    82fe:	46bd      	mov	sp, r7
    8300:	b004      	add	sp, #16
    8302:	bd80      	pop	{r7, pc}
    8304:	20006e5c 	.word	0x20006e5c
    8308:	00008c39 	.word	0x00008c39
    830c:	00008bdd 	.word	0x00008bdd
    8310:	00007015 	.word	0x00007015

00008314 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    8314:	b580      	push	{r7, lr}
    8316:	b082      	sub	sp, #8
    8318:	af00      	add	r7, sp, #0
    831a:	6078      	str	r0, [r7, #4]
    831c:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    831e:	4b03      	ldr	r3, [pc, #12]	; (832c <_usb_on_sof_notify+0x18>)
    8320:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    8322:	4b03      	ldr	r3, [pc, #12]	; (8330 <_usb_on_sof_notify+0x1c>)
    8324:	4798      	blx	r3
#endif
}
    8326:	46bd      	mov	sp, r7
    8328:	b002      	add	sp, #8
    832a:	bd80      	pop	{r7, pc}
    832c:	00003abd 	.word	0x00003abd
    8330:	0000a65d 	.word	0x0000a65d

00008334 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
    833c:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    833e:	4b07      	ldr	r3, [pc, #28]	; (835c <_usb_on_bus_reset+0x28>)
    8340:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    8342:	687b      	ldr	r3, [r7, #4]
    8344:	1c18      	adds	r0, r3, #0
    8346:	2100      	movs	r1, #0
    8348:	4b05      	ldr	r3, [pc, #20]	; (8360 <_usb_on_bus_reset+0x2c>)
    834a:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    834c:	687b      	ldr	r3, [r7, #4]
    834e:	1c18      	adds	r0, r3, #0
    8350:	4b04      	ldr	r3, [pc, #16]	; (8364 <_usb_on_bus_reset+0x30>)
    8352:	4798      	blx	r3
}
    8354:	46bd      	mov	sp, r7
    8356:	b002      	add	sp, #8
    8358:	bd80      	pop	{r7, pc}
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	00003a49 	.word	0x00003a49
    8360:	00006e1d 	.word	0x00006e1d
    8364:	000081c5 	.word	0x000081c5

00008368 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    8368:	b580      	push	{r7, lr}
    836a:	b082      	sub	sp, #8
    836c:	af00      	add	r7, sp, #0
    836e:	6078      	str	r0, [r7, #4]
    8370:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    8372:	4b10      	ldr	r3, [pc, #64]	; (83b4 <_usb_on_wakeup+0x4c>)
    8374:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8376:	4b10      	ldr	r3, [pc, #64]	; (83b8 <_usb_on_wakeup+0x50>)
    8378:	1c18      	adds	r0, r3, #0
    837a:	2102      	movs	r1, #2
    837c:	4b0f      	ldr	r3, [pc, #60]	; (83bc <_usb_on_wakeup+0x54>)
    837e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8380:	4b0d      	ldr	r3, [pc, #52]	; (83b8 <_usb_on_wakeup+0x50>)
    8382:	1c18      	adds	r0, r3, #0
    8384:	2104      	movs	r1, #4
    8386:	4b0e      	ldr	r3, [pc, #56]	; (83c0 <_usb_on_wakeup+0x58>)
    8388:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    838a:	4a0b      	ldr	r2, [pc, #44]	; (83b8 <_usb_on_wakeup+0x50>)
    838c:	4b0d      	ldr	r3, [pc, #52]	; (83c4 <_usb_on_wakeup+0x5c>)
    838e:	1c10      	adds	r0, r2, #0
    8390:	2106      	movs	r1, #6
    8392:	1c1a      	adds	r2, r3, #0
    8394:	4b0c      	ldr	r3, [pc, #48]	; (83c8 <_usb_on_wakeup+0x60>)
    8396:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8398:	4b07      	ldr	r3, [pc, #28]	; (83b8 <_usb_on_wakeup+0x50>)
    839a:	1c18      	adds	r0, r3, #0
    839c:	2106      	movs	r1, #6
    839e:	4b08      	ldr	r3, [pc, #32]	; (83c0 <_usb_on_wakeup+0x58>)
    83a0:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    83a2:	2003      	movs	r0, #3
    83a4:	4b09      	ldr	r3, [pc, #36]	; (83cc <_usb_on_wakeup+0x64>)
    83a6:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    83a8:	4b09      	ldr	r3, [pc, #36]	; (83d0 <_usb_on_wakeup+0x68>)
    83aa:	4798      	blx	r3
#endif
}
    83ac:	46bd      	mov	sp, r7
    83ae:	b002      	add	sp, #8
    83b0:	bd80      	pop	{r7, pc}
    83b2:	46c0      	nop			; (mov r8, r8)
    83b4:	00006fdd 	.word	0x00006fdd
    83b8:	20006e5c 	.word	0x20006e5c
    83bc:	00008c39 	.word	0x00008c39
    83c0:	00008bdd 	.word	0x00008bdd
    83c4:	000082cd 	.word	0x000082cd
    83c8:	00008b8d 	.word	0x00008b8d
    83cc:	00007015 	.word	0x00007015
    83d0:	0000a64d 	.word	0x0000a64d

000083d4 <udd_detach>:

void udd_detach(void)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	af00      	add	r7, sp, #0
	usb_device_detach(&usb_device);
    83d8:	4b04      	ldr	r3, [pc, #16]	; (83ec <udd_detach+0x18>)
    83da:	1c18      	adds	r0, r3, #0
    83dc:	4b04      	ldr	r3, [pc, #16]	; (83f0 <udd_detach+0x1c>)
    83de:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    83e0:	2001      	movs	r0, #1
    83e2:	4b04      	ldr	r3, [pc, #16]	; (83f4 <udd_detach+0x20>)
    83e4:	4798      	blx	r3
}
    83e6:	46bd      	mov	sp, r7
    83e8:	bd80      	pop	{r7, pc}
    83ea:	46c0      	nop			; (mov r8, r8)
    83ec:	20006e5c 	.word	0x20006e5c
    83f0:	00006ddd 	.word	0x00006ddd
    83f4:	00007015 	.word	0x00007015

000083f8 <udd_attach>:

void udd_attach(void)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    83fc:	2003      	movs	r0, #3
    83fe:	4b22      	ldr	r3, [pc, #136]	; (8488 <udd_attach+0x90>)
    8400:	4798      	blx	r3
	usb_device_attach(&usb_device);
    8402:	4b22      	ldr	r3, [pc, #136]	; (848c <udd_attach+0x94>)
    8404:	1c18      	adds	r0, r3, #0
    8406:	4b22      	ldr	r3, [pc, #136]	; (8490 <udd_attach+0x98>)
    8408:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    840a:	4a20      	ldr	r2, [pc, #128]	; (848c <udd_attach+0x94>)
    840c:	4b21      	ldr	r3, [pc, #132]	; (8494 <udd_attach+0x9c>)
    840e:	1c10      	adds	r0, r2, #0
    8410:	2104      	movs	r1, #4
    8412:	1c1a      	adds	r2, r3, #0
    8414:	4b20      	ldr	r3, [pc, #128]	; (8498 <udd_attach+0xa0>)
    8416:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    8418:	4a1c      	ldr	r2, [pc, #112]	; (848c <udd_attach+0x94>)
    841a:	4b20      	ldr	r3, [pc, #128]	; (849c <udd_attach+0xa4>)
    841c:	1c10      	adds	r0, r2, #0
    841e:	2100      	movs	r1, #0
    8420:	1c1a      	adds	r2, r3, #0
    8422:	4b1d      	ldr	r3, [pc, #116]	; (8498 <udd_attach+0xa0>)
    8424:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    8426:	4a19      	ldr	r2, [pc, #100]	; (848c <udd_attach+0x94>)
    8428:	4b1d      	ldr	r3, [pc, #116]	; (84a0 <udd_attach+0xa8>)
    842a:	1c10      	adds	r0, r2, #0
    842c:	2101      	movs	r1, #1
    842e:	1c1a      	adds	r2, r3, #0
    8430:	4b19      	ldr	r3, [pc, #100]	; (8498 <udd_attach+0xa0>)
    8432:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    8434:	4a15      	ldr	r2, [pc, #84]	; (848c <udd_attach+0x94>)
    8436:	4b1b      	ldr	r3, [pc, #108]	; (84a4 <udd_attach+0xac>)
    8438:	1c10      	adds	r0, r2, #0
    843a:	2102      	movs	r1, #2
    843c:	1c1a      	adds	r2, r3, #0
    843e:	4b16      	ldr	r3, [pc, #88]	; (8498 <udd_attach+0xa0>)
    8440:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    8442:	4b12      	ldr	r3, [pc, #72]	; (848c <udd_attach+0x94>)
    8444:	1c18      	adds	r0, r3, #0
    8446:	2104      	movs	r1, #4
    8448:	4b17      	ldr	r3, [pc, #92]	; (84a8 <udd_attach+0xb0>)
    844a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    844c:	4b0f      	ldr	r3, [pc, #60]	; (848c <udd_attach+0x94>)
    844e:	1c18      	adds	r0, r3, #0
    8450:	2100      	movs	r1, #0
    8452:	4b15      	ldr	r3, [pc, #84]	; (84a8 <udd_attach+0xb0>)
    8454:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    8456:	4b0d      	ldr	r3, [pc, #52]	; (848c <udd_attach+0x94>)
    8458:	1c18      	adds	r0, r3, #0
    845a:	2101      	movs	r1, #1
    845c:	4b12      	ldr	r3, [pc, #72]	; (84a8 <udd_attach+0xb0>)
    845e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    8460:	4b0a      	ldr	r3, [pc, #40]	; (848c <udd_attach+0x94>)
    8462:	1c18      	adds	r0, r3, #0
    8464:	2102      	movs	r1, #2
    8466:	4b10      	ldr	r3, [pc, #64]	; (84a8 <udd_attach+0xb0>)
    8468:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    846a:	4a08      	ldr	r2, [pc, #32]	; (848c <udd_attach+0x94>)
    846c:	4b0f      	ldr	r3, [pc, #60]	; (84ac <udd_attach+0xb4>)
    846e:	1c10      	adds	r0, r2, #0
    8470:	2106      	movs	r1, #6
    8472:	1c1a      	adds	r2, r3, #0
    8474:	4b08      	ldr	r3, [pc, #32]	; (8498 <udd_attach+0xa0>)
    8476:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    8478:	4b04      	ldr	r3, [pc, #16]	; (848c <udd_attach+0x94>)
    847a:	1c18      	adds	r0, r3, #0
    847c:	2106      	movs	r1, #6
    847e:	4b0a      	ldr	r3, [pc, #40]	; (84a8 <udd_attach+0xb0>)
    8480:	4798      	blx	r3
#endif
}
    8482:	46bd      	mov	sp, r7
    8484:	bd80      	pop	{r7, pc}
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	00007015 	.word	0x00007015
    848c:	20006e5c 	.word	0x20006e5c
    8490:	00006db9 	.word	0x00006db9
    8494:	00008289 	.word	0x00008289
    8498:	00008b8d 	.word	0x00008b8d
    849c:	00008315 	.word	0x00008315
    84a0:	00008335 	.word	0x00008335
    84a4:	00008369 	.word	0x00008369
    84a8:	00008bdd 	.word	0x00008bdd
    84ac:	000082cd 	.word	0x000082cd

000084b0 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	af00      	add	r7, sp, #0
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    84b4:	200e      	movs	r0, #14
    84b6:	2100      	movs	r1, #0
    84b8:	4b09      	ldr	r3, [pc, #36]	; (84e0 <_uhd_vbus_handler+0x30>)
    84ba:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    84bc:	200e      	movs	r0, #14
    84be:	4b09      	ldr	r3, [pc, #36]	; (84e4 <_uhd_vbus_handler+0x34>)
    84c0:	4798      	blx	r3
    84c2:	1c03      	adds	r3, r0, #0
    84c4:	2b00      	cmp	r3, #0
    84c6:	d002      	beq.n	84ce <_uhd_vbus_handler+0x1e>
		udd_attach();
    84c8:	4b07      	ldr	r3, [pc, #28]	; (84e8 <_uhd_vbus_handler+0x38>)
    84ca:	4798      	blx	r3
    84cc:	e001      	b.n	84d2 <_uhd_vbus_handler+0x22>
	} else {
		udd_detach();
    84ce:	4b07      	ldr	r3, [pc, #28]	; (84ec <_uhd_vbus_handler+0x3c>)
    84d0:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    84d2:	200e      	movs	r0, #14
    84d4:	2100      	movs	r1, #0
    84d6:	4b06      	ldr	r3, [pc, #24]	; (84f0 <_uhd_vbus_handler+0x40>)
    84d8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    84da:	46bd      	mov	sp, r7
    84dc:	bd80      	pop	{r7, pc}
    84de:	46c0      	nop			; (mov r8, r8)
    84e0:	0000477d 	.word	0x0000477d
    84e4:	00006efd 	.word	0x00006efd
    84e8:	000083f9 	.word	0x000083f9
    84ec:	000083d5 	.word	0x000083d5
    84f0:	00004735 	.word	0x00004735

000084f4 <_usb_vbus_config>:
/**
 * \internal
 * \brief USB VBUS pin configuration
 */
static void _usb_vbus_config(void)
{
    84f4:	b580      	push	{r7, lr}
    84f6:	b084      	sub	sp, #16
    84f8:	af00      	add	r7, sp, #0

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    84fa:	1d3b      	adds	r3, r7, #4
    84fc:	1c18      	adds	r0, r3, #0
    84fe:	4b13      	ldr	r3, [pc, #76]	; (854c <_usb_vbus_config+0x58>)
    8500:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    8502:	1d3b      	adds	r3, r7, #4
    8504:	220e      	movs	r2, #14
    8506:	601a      	str	r2, [r3, #0]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    8508:	1d3b      	adds	r3, r7, #4
    850a:	2200      	movs	r2, #0
    850c:	605a      	str	r2, [r3, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    850e:	1d3b      	adds	r3, r7, #4
    8510:	2200      	movs	r2, #0
    8512:	721a      	strb	r2, [r3, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    8514:	1d3b      	adds	r3, r7, #4
    8516:	2203      	movs	r2, #3
    8518:	72da      	strb	r2, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    851a:	1d3b      	adds	r3, r7, #4
    851c:	2201      	movs	r2, #1
    851e:	729a      	strb	r2, [r3, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    8520:	200e      	movs	r0, #14
    8522:	2100      	movs	r1, #0
    8524:	4b0a      	ldr	r3, [pc, #40]	; (8550 <_usb_vbus_config+0x5c>)
    8526:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    8528:	1d3b      	adds	r3, r7, #4
    852a:	200e      	movs	r0, #14
    852c:	1c19      	adds	r1, r3, #0
    852e:	4b09      	ldr	r3, [pc, #36]	; (8554 <_usb_vbus_config+0x60>)
    8530:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    8532:	4b09      	ldr	r3, [pc, #36]	; (8558 <_usb_vbus_config+0x64>)
    8534:	1c18      	adds	r0, r3, #0
    8536:	210e      	movs	r1, #14
    8538:	2200      	movs	r2, #0
    853a:	4b08      	ldr	r3, [pc, #32]	; (855c <_usb_vbus_config+0x68>)
    853c:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    853e:	200e      	movs	r0, #14
    8540:	2100      	movs	r1, #0
    8542:	4b07      	ldr	r3, [pc, #28]	; (8560 <_usb_vbus_config+0x6c>)
    8544:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8546:	46bd      	mov	sp, r7
    8548:	b004      	add	sp, #16
    854a:	bd80      	pop	{r7, pc}
    854c:	00004ac1 	.word	0x00004ac1
    8550:	0000477d 	.word	0x0000477d
    8554:	00004af5 	.word	0x00004af5
    8558:	000084b1 	.word	0x000084b1
    855c:	000046d9 	.word	0x000046d9
    8560:	00004735 	.word	0x00004735

00008564 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    8564:	b580      	push	{r7, lr}
    8566:	b082      	sub	sp, #8
    8568:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    856a:	4b16      	ldr	r3, [pc, #88]	; (85c4 <udd_enable+0x60>)
    856c:	4798      	blx	r3
    856e:	1c03      	adds	r3, r0, #0
    8570:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    8572:	1c3b      	adds	r3, r7, #0
    8574:	1c18      	adds	r0, r3, #0
    8576:	4b14      	ldr	r3, [pc, #80]	; (85c8 <udd_enable+0x64>)
    8578:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    857a:	1c3b      	adds	r3, r7, #0
    857c:	2200      	movs	r2, #0
    857e:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    8580:	4912      	ldr	r1, [pc, #72]	; (85cc <udd_enable+0x68>)
    8582:	4a13      	ldr	r2, [pc, #76]	; (85d0 <udd_enable+0x6c>)
    8584:	1c3b      	adds	r3, r7, #0
    8586:	1c08      	adds	r0, r1, #0
    8588:	1c11      	adds	r1, r2, #0
    858a:	1c1a      	adds	r2, r3, #0
    858c:	4b11      	ldr	r3, [pc, #68]	; (85d4 <udd_enable+0x70>)
    858e:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    8590:	4b0e      	ldr	r3, [pc, #56]	; (85cc <udd_enable+0x68>)
    8592:	1c18      	adds	r0, r3, #0
    8594:	4b10      	ldr	r3, [pc, #64]	; (85d8 <udd_enable+0x74>)
    8596:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    8598:	4b10      	ldr	r3, [pc, #64]	; (85dc <udd_enable+0x78>)
    859a:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    859c:	2001      	movs	r0, #1
    859e:	4b10      	ldr	r3, [pc, #64]	; (85e0 <udd_enable+0x7c>)
    85a0:	4798      	blx	r3

#if USB_VBUS_EIC
	_usb_vbus_config();
    85a2:	4b10      	ldr	r3, [pc, #64]	; (85e4 <udd_enable+0x80>)
    85a4:	4798      	blx	r3
	if (is_usb_vbus_high()) {
    85a6:	200e      	movs	r0, #14
    85a8:	4b0f      	ldr	r3, [pc, #60]	; (85e8 <udd_enable+0x84>)
    85aa:	4798      	blx	r3
    85ac:	1c03      	adds	r3, r0, #0
    85ae:	2b00      	cmp	r3, #0
    85b0:	d001      	beq.n	85b6 <udd_enable+0x52>
		/* USB Attach */
		_uhd_vbus_handler();
    85b2:	4b0e      	ldr	r3, [pc, #56]	; (85ec <udd_enable+0x88>)
    85b4:	4798      	blx	r3
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
    85b6:	687b      	ldr	r3, [r7, #4]
    85b8:	1c18      	adds	r0, r3, #0
    85ba:	4b0d      	ldr	r3, [pc, #52]	; (85f0 <udd_enable+0x8c>)
    85bc:	4798      	blx	r3
}
    85be:	46bd      	mov	sp, r7
    85c0:	b002      	add	sp, #8
    85c2:	bd80      	pop	{r7, pc}
    85c4:	00006cc9 	.word	0x00006cc9
    85c8:	00009fd5 	.word	0x00009fd5
    85cc:	20006e5c 	.word	0x20006e5c
    85d0:	41005000 	.word	0x41005000
    85d4:	00009ffd 	.word	0x00009ffd
    85d8:	00009f75 	.word	0x00009f75
    85dc:	00006fdd 	.word	0x00006fdd
    85e0:	00007015 	.word	0x00007015
    85e4:	000084f5 	.word	0x000084f5
    85e8:	00006efd 	.word	0x00006efd
    85ec:	000084b1 	.word	0x000084b1
    85f0:	00006d11 	.word	0x00006d11

000085f4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    85f4:	b580      	push	{r7, lr}
    85f6:	b082      	sub	sp, #8
    85f8:	af00      	add	r7, sp, #0
    85fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    85fc:	687b      	ldr	r3, [r7, #4]
    85fe:	2200      	movs	r2, #0
    8600:	701a      	strb	r2, [r3, #0]
}
    8602:	46bd      	mov	sp, r7
    8604:	b002      	add	sp, #8
    8606:	bd80      	pop	{r7, pc}

00008608 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	1c02      	adds	r2, r0, #0
    8610:	6039      	str	r1, [r7, #0]
    8612:	1dfb      	adds	r3, r7, #7
    8614:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8616:	1dfb      	adds	r3, r7, #7
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	2b01      	cmp	r3, #1
    861c:	d00a      	beq.n	8634 <system_apb_clock_set_mask+0x2c>
    861e:	2b02      	cmp	r3, #2
    8620:	d00f      	beq.n	8642 <system_apb_clock_set_mask+0x3a>
    8622:	2b00      	cmp	r3, #0
    8624:	d114      	bne.n	8650 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8626:	4b0e      	ldr	r3, [pc, #56]	; (8660 <system_apb_clock_set_mask+0x58>)
    8628:	4a0d      	ldr	r2, [pc, #52]	; (8660 <system_apb_clock_set_mask+0x58>)
    862a:	6991      	ldr	r1, [r2, #24]
    862c:	683a      	ldr	r2, [r7, #0]
    862e:	430a      	orrs	r2, r1
    8630:	619a      	str	r2, [r3, #24]
			break;
    8632:	e00f      	b.n	8654 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8634:	4b0a      	ldr	r3, [pc, #40]	; (8660 <system_apb_clock_set_mask+0x58>)
    8636:	4a0a      	ldr	r2, [pc, #40]	; (8660 <system_apb_clock_set_mask+0x58>)
    8638:	69d1      	ldr	r1, [r2, #28]
    863a:	683a      	ldr	r2, [r7, #0]
    863c:	430a      	orrs	r2, r1
    863e:	61da      	str	r2, [r3, #28]
			break;
    8640:	e008      	b.n	8654 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8642:	4b07      	ldr	r3, [pc, #28]	; (8660 <system_apb_clock_set_mask+0x58>)
    8644:	4a06      	ldr	r2, [pc, #24]	; (8660 <system_apb_clock_set_mask+0x58>)
    8646:	6a11      	ldr	r1, [r2, #32]
    8648:	683a      	ldr	r2, [r7, #0]
    864a:	430a      	orrs	r2, r1
    864c:	621a      	str	r2, [r3, #32]
			break;
    864e:	e001      	b.n	8654 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8650:	2317      	movs	r3, #23
    8652:	e000      	b.n	8656 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8654:	2300      	movs	r3, #0
}
    8656:	1c18      	adds	r0, r3, #0
    8658:	46bd      	mov	sp, r7
    865a:	b002      	add	sp, #8
    865c:	bd80      	pop	{r7, pc}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	40000400 	.word	0x40000400

00008664 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8664:	b580      	push	{r7, lr}
    8666:	b082      	sub	sp, #8
    8668:	af00      	add	r7, sp, #0
    866a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	2280      	movs	r2, #128	; 0x80
    8670:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	2200      	movs	r2, #0
    8676:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	2201      	movs	r2, #1
    867c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	2200      	movs	r2, #0
    8682:	70da      	strb	r2, [r3, #3]
}
    8684:	46bd      	mov	sp, r7
    8686:	b002      	add	sp, #8
    8688:	bd80      	pop	{r7, pc}
    868a:	46c0      	nop			; (mov r8, r8)

0000868c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    868c:	b580      	push	{r7, lr}
    868e:	b082      	sub	sp, #8
    8690:	af00      	add	r7, sp, #0
    8692:	1c02      	adds	r2, r0, #0
    8694:	1dfb      	adds	r3, r7, #7
    8696:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8698:	4b06      	ldr	r3, [pc, #24]	; (86b4 <system_interrupt_enable+0x28>)
    869a:	1dfa      	adds	r2, r7, #7
    869c:	7812      	ldrb	r2, [r2, #0]
    869e:	1c11      	adds	r1, r2, #0
    86a0:	221f      	movs	r2, #31
    86a2:	400a      	ands	r2, r1
    86a4:	2101      	movs	r1, #1
    86a6:	1c08      	adds	r0, r1, #0
    86a8:	4090      	lsls	r0, r2
    86aa:	1c02      	adds	r2, r0, #0
    86ac:	601a      	str	r2, [r3, #0]
}
    86ae:	46bd      	mov	sp, r7
    86b0:	b002      	add	sp, #8
    86b2:	bd80      	pop	{r7, pc}
    86b4:	e000e100 	.word	0xe000e100

000086b8 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	b082      	sub	sp, #8
    86bc:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    86be:	4bbe      	ldr	r3, [pc, #760]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	681b      	ldr	r3, [r3, #0]
    86c4:	8c1b      	ldrh	r3, [r3, #32]
    86c6:	b29b      	uxth	r3, r3
    86c8:	1c1a      	adds	r2, r3, #0
    86ca:	4bbc      	ldr	r3, [pc, #752]	; (89bc <_usb_host_interrupt_handler+0x304>)
    86cc:	1c10      	adds	r0, r2, #0
    86ce:	4798      	blx	r3
    86d0:	1c03      	adds	r3, r0, #0
    86d2:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    86d4:	687b      	ldr	r3, [r7, #4]
    86d6:	2b1f      	cmp	r3, #31
    86d8:	d900      	bls.n	86dc <_usb_host_interrupt_handler+0x24>
    86da:	e179      	b.n	89d0 <_usb_host_interrupt_handler+0x318>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    86dc:	4bb6      	ldr	r3, [pc, #728]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    86de:	681b      	ldr	r3, [r3, #0]
    86e0:	681a      	ldr	r2, [r3, #0]
    86e2:	687b      	ldr	r3, [r7, #4]
    86e4:	3308      	adds	r3, #8
    86e6:	015b      	lsls	r3, r3, #5
    86e8:	18d3      	adds	r3, r2, r3
    86ea:	79db      	ldrb	r3, [r3, #7]
    86ec:	b2db      	uxtb	r3, r3
    86ee:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    86f0:	683a      	ldr	r2, [r7, #0]
    86f2:	2303      	movs	r3, #3
    86f4:	4013      	ands	r3, r2
    86f6:	d100      	bne.n	86fa <_usb_host_interrupt_handler+0x42>
    86f8:	e08a      	b.n	8810 <_usb_host_interrupt_handler+0x158>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    86fa:	687b      	ldr	r3, [r7, #4]
    86fc:	2201      	movs	r2, #1
    86fe:	1c11      	adds	r1, r2, #0
    8700:	4099      	lsls	r1, r3
    8702:	1c0b      	adds	r3, r1, #0
    8704:	43db      	mvns	r3, r3
    8706:	1c1a      	adds	r2, r3, #0
    8708:	4bad      	ldr	r3, [pc, #692]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    870a:	681b      	ldr	r3, [r3, #0]
    870c:	401a      	ands	r2, r3
    870e:	4bac      	ldr	r3, [pc, #688]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    8710:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8712:	4ba9      	ldr	r3, [pc, #676]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8714:	681b      	ldr	r3, [r3, #0]
    8716:	681a      	ldr	r2, [r3, #0]
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	3308      	adds	r3, #8
    871c:	015b      	lsls	r3, r3, #5
    871e:	18d3      	adds	r3, r2, r3
    8720:	2203      	movs	r2, #3
    8722:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8724:	4ba4      	ldr	r3, [pc, #656]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8726:	6819      	ldr	r1, [r3, #0]
    8728:	23a8      	movs	r3, #168	; 0xa8
    872a:	687a      	ldr	r2, [r7, #4]
    872c:	188a      	adds	r2, r1, r2
    872e:	18d3      	adds	r3, r2, r3
    8730:	799b      	ldrb	r3, [r3, #6]
    8732:	1c1a      	adds	r2, r3, #0
    8734:	2301      	movs	r3, #1
    8736:	4013      	ands	r3, r2
    8738:	d06a      	beq.n	8810 <_usb_host_interrupt_handler+0x158>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	b2da      	uxtb	r2, r3
    873e:	4ba1      	ldr	r3, [pc, #644]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    8740:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    8742:	4b9d      	ldr	r3, [pc, #628]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8744:	681b      	ldr	r3, [r3, #0]
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	687a      	ldr	r2, [r7, #4]
    874a:	3208      	adds	r2, #8
    874c:	0152      	lsls	r2, r2, #5
    874e:	5cd2      	ldrb	r2, [r2, r3]
    8750:	2303      	movs	r3, #3
    8752:	4013      	ands	r3, r2
    8754:	b2db      	uxtb	r3, r3
    8756:	2b01      	cmp	r3, #1
    8758:	d11f      	bne.n	879a <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    875a:	4a9b      	ldr	r2, [pc, #620]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    875c:	687b      	ldr	r3, [r7, #4]
    875e:	015b      	lsls	r3, r3, #5
    8760:	18d3      	adds	r3, r2, r3
    8762:	685b      	ldr	r3, [r3, #4]
    8764:	049b      	lsls	r3, r3, #18
    8766:	0c9b      	lsrs	r3, r3, #18
    8768:	b29b      	uxth	r3, r3
    876a:	1c1a      	adds	r2, r3, #0
    876c:	4b95      	ldr	r3, [pc, #596]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    876e:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8770:	4a95      	ldr	r2, [pc, #596]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    8772:	687b      	ldr	r3, [r7, #4]
    8774:	015b      	lsls	r3, r3, #5
    8776:	18d3      	adds	r3, r2, r3
    8778:	685b      	ldr	r3, [r3, #4]
    877a:	0b9b      	lsrs	r3, r3, #14
    877c:	049b      	lsls	r3, r3, #18
    877e:	0c9b      	lsrs	r3, r3, #18
    8780:	b29b      	uxth	r3, r3
    8782:	1c1a      	adds	r2, r3, #0
    8784:	4b8f      	ldr	r3, [pc, #572]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    8786:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    8788:	4a8f      	ldr	r2, [pc, #572]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	015b      	lsls	r3, r3, #5
    878e:	18d3      	adds	r3, r2, r3
    8790:	685a      	ldr	r2, [r3, #4]
    8792:	0b92      	lsrs	r2, r2, #14
    8794:	0392      	lsls	r2, r2, #14
    8796:	605a      	str	r2, [r3, #4]
    8798:	e02d      	b.n	87f6 <_usb_host_interrupt_handler+0x13e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    879a:	4a8b      	ldr	r2, [pc, #556]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	015b      	lsls	r3, r3, #5
    87a0:	18d3      	adds	r3, r2, r3
    87a2:	685b      	ldr	r3, [r3, #4]
    87a4:	0b9b      	lsrs	r3, r3, #14
    87a6:	049b      	lsls	r3, r3, #18
    87a8:	0c9b      	lsrs	r3, r3, #18
    87aa:	b29b      	uxth	r3, r3
    87ac:	1c1a      	adds	r2, r3, #0
    87ae:	4b85      	ldr	r3, [pc, #532]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    87b0:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    87b2:	4a85      	ldr	r2, [pc, #532]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    87b4:	687b      	ldr	r3, [r7, #4]
    87b6:	015b      	lsls	r3, r3, #5
    87b8:	18d3      	adds	r3, r2, r3
    87ba:	685b      	ldr	r3, [r3, #4]
    87bc:	049b      	lsls	r3, r3, #18
    87be:	0c9b      	lsrs	r3, r3, #18
    87c0:	b29b      	uxth	r3, r3
    87c2:	1c1a      	adds	r2, r3, #0
    87c4:	4b7f      	ldr	r3, [pc, #508]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    87c6:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    87c8:	4a7f      	ldr	r2, [pc, #508]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	015b      	lsls	r3, r3, #5
    87ce:	18d3      	adds	r3, r2, r3
    87d0:	6859      	ldr	r1, [r3, #4]
    87d2:	4a7e      	ldr	r2, [pc, #504]	; (89cc <_usb_host_interrupt_handler+0x314>)
    87d4:	400a      	ands	r2, r1
    87d6:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    87d8:	4b7a      	ldr	r3, [pc, #488]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    87da:	885b      	ldrh	r3, [r3, #2]
    87dc:	2b00      	cmp	r3, #0
    87de:	d10a      	bne.n	87f6 <_usb_host_interrupt_handler+0x13e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    87e0:	4a79      	ldr	r2, [pc, #484]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    87e2:	687b      	ldr	r3, [r7, #4]
    87e4:	015b      	lsls	r3, r3, #5
    87e6:	18d3      	adds	r3, r2, r3
    87e8:	685b      	ldr	r3, [r3, #4]
    87ea:	049b      	lsls	r3, r3, #18
    87ec:	0c9b      	lsrs	r3, r3, #18
    87ee:	b29b      	uxth	r3, r3
    87f0:	1c1a      	adds	r2, r3, #0
    87f2:	4b74      	ldr	r3, [pc, #464]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    87f4:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    87f6:	4b70      	ldr	r3, [pc, #448]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    87f8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	3302      	adds	r3, #2
    87fe:	011b      	lsls	r3, r3, #4
    8800:	18d3      	adds	r3, r2, r3
    8802:	685a      	ldr	r2, [r3, #4]
    8804:	4b6c      	ldr	r3, [pc, #432]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8806:	6819      	ldr	r1, [r3, #0]
    8808:	4b6e      	ldr	r3, [pc, #440]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    880a:	1c08      	adds	r0, r1, #0
    880c:	1c19      	adds	r1, r3, #0
    880e:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    8810:	683a      	ldr	r2, [r7, #0]
    8812:	2304      	movs	r3, #4
    8814:	4013      	ands	r3, r2
    8816:	d014      	beq.n	8842 <_usb_host_interrupt_handler+0x18a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	2201      	movs	r2, #1
    881c:	1c11      	adds	r1, r2, #0
    881e:	4099      	lsls	r1, r3
    8820:	1c0b      	adds	r3, r1, #0
    8822:	43db      	mvns	r3, r3
    8824:	1c1a      	adds	r2, r3, #0
    8826:	4b66      	ldr	r3, [pc, #408]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	401a      	ands	r2, r3
    882c:	4b64      	ldr	r3, [pc, #400]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    882e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8830:	4b61      	ldr	r3, [pc, #388]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8832:	681b      	ldr	r3, [r3, #0]
    8834:	681a      	ldr	r2, [r3, #0]
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	3308      	adds	r3, #8
    883a:	015b      	lsls	r3, r3, #5
    883c:	18d3      	adds	r3, r2, r3
    883e:	2204      	movs	r2, #4
    8840:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    8842:	683a      	ldr	r2, [r7, #0]
    8844:	2308      	movs	r3, #8
    8846:	4013      	ands	r3, r2
    8848:	d03d      	beq.n	88c6 <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	2201      	movs	r2, #1
    884e:	1c11      	adds	r1, r2, #0
    8850:	4099      	lsls	r1, r3
    8852:	1c0b      	adds	r3, r1, #0
    8854:	43db      	mvns	r3, r3
    8856:	1c1a      	adds	r2, r3, #0
    8858:	4b59      	ldr	r3, [pc, #356]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    885a:	681b      	ldr	r3, [r3, #0]
    885c:	401a      	ands	r2, r3
    885e:	4b58      	ldr	r3, [pc, #352]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    8860:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8862:	4b55      	ldr	r3, [pc, #340]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8864:	681b      	ldr	r3, [r3, #0]
    8866:	681a      	ldr	r2, [r3, #0]
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	3308      	adds	r3, #8
    886c:	015b      	lsls	r3, r3, #5
    886e:	18d3      	adds	r3, r2, r3
    8870:	2208      	movs	r2, #8
    8872:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    8874:	4b50      	ldr	r3, [pc, #320]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8876:	6819      	ldr	r1, [r3, #0]
    8878:	23a8      	movs	r3, #168	; 0xa8
    887a:	687a      	ldr	r2, [r7, #4]
    887c:	188a      	adds	r2, r1, r2
    887e:	18d3      	adds	r3, r2, r3
    8880:	799b      	ldrb	r3, [r3, #6]
    8882:	1c1a      	adds	r2, r3, #0
    8884:	2302      	movs	r3, #2
    8886:	4013      	ands	r3, r2
    8888:	d01d      	beq.n	88c6 <_usb_host_interrupt_handler+0x20e>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    888a:	687b      	ldr	r3, [r7, #4]
    888c:	b2da      	uxtb	r2, r3
    888e:	4b4d      	ldr	r3, [pc, #308]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    8890:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    8892:	4a4d      	ldr	r2, [pc, #308]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    8894:	687b      	ldr	r3, [r7, #4]
    8896:	015b      	lsls	r3, r3, #5
    8898:	18d3      	adds	r3, r2, r3
    889a:	3308      	adds	r3, #8
    889c:	88db      	ldrh	r3, [r3, #6]
    889e:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    88a0:	b2da      	uxtb	r2, r3
    88a2:	231f      	movs	r3, #31
    88a4:	4013      	ands	r3, r2
    88a6:	b2da      	uxtb	r2, r3
    88a8:	4b46      	ldr	r3, [pc, #280]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    88aa:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    88ac:	4b42      	ldr	r3, [pc, #264]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    88ae:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	011b      	lsls	r3, r3, #4
    88b4:	18d3      	adds	r3, r2, r3
    88b6:	3324      	adds	r3, #36	; 0x24
    88b8:	685a      	ldr	r2, [r3, #4]
    88ba:	4b3f      	ldr	r3, [pc, #252]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    88bc:	6819      	ldr	r1, [r3, #0]
    88be:	4b41      	ldr	r3, [pc, #260]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    88c0:	1c08      	adds	r0, r1, #0
    88c2:	1c19      	adds	r1, r3, #0
    88c4:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    88c6:	683a      	ldr	r2, [r7, #0]
    88c8:	2310      	movs	r3, #16
    88ca:	4013      	ands	r3, r2
    88cc:	d03b      	beq.n	8946 <_usb_host_interrupt_handler+0x28e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    88ce:	687b      	ldr	r3, [r7, #4]
    88d0:	2201      	movs	r2, #1
    88d2:	1c11      	adds	r1, r2, #0
    88d4:	4099      	lsls	r1, r3
    88d6:	1c0b      	adds	r3, r1, #0
    88d8:	43db      	mvns	r3, r3
    88da:	1c1a      	adds	r2, r3, #0
    88dc:	4b38      	ldr	r3, [pc, #224]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    88de:	681b      	ldr	r3, [r3, #0]
    88e0:	401a      	ands	r2, r3
    88e2:	4b37      	ldr	r3, [pc, #220]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    88e4:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    88e6:	4b34      	ldr	r3, [pc, #208]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    88e8:	681b      	ldr	r3, [r3, #0]
    88ea:	681a      	ldr	r2, [r3, #0]
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	3308      	adds	r3, #8
    88f0:	015b      	lsls	r3, r3, #5
    88f2:	18d3      	adds	r3, r2, r3
    88f4:	2210      	movs	r2, #16
    88f6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    88f8:	4b2f      	ldr	r3, [pc, #188]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    88fa:	6819      	ldr	r1, [r3, #0]
    88fc:	23a8      	movs	r3, #168	; 0xa8
    88fe:	687a      	ldr	r2, [r7, #4]
    8900:	188a      	adds	r2, r1, r2
    8902:	18d3      	adds	r3, r2, r3
    8904:	799b      	ldrb	r3, [r3, #6]
    8906:	1c1a      	adds	r2, r3, #0
    8908:	2304      	movs	r3, #4
    890a:	4013      	ands	r3, r2
    890c:	d01b      	beq.n	8946 <_usb_host_interrupt_handler+0x28e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	b2da      	uxtb	r2, r3
    8912:	4b2c      	ldr	r3, [pc, #176]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    8914:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    8916:	4a2c      	ldr	r2, [pc, #176]	; (89c8 <_usb_host_interrupt_handler+0x310>)
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	015b      	lsls	r3, r3, #5
    891c:	18d3      	adds	r3, r2, r3
    891e:	685b      	ldr	r3, [r3, #4]
    8920:	0b9b      	lsrs	r3, r3, #14
    8922:	049b      	lsls	r3, r3, #18
    8924:	0c9b      	lsrs	r3, r3, #18
    8926:	b29b      	uxth	r3, r3
    8928:	1c1a      	adds	r2, r3, #0
    892a:	4b26      	ldr	r3, [pc, #152]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    892c:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    892e:	4b22      	ldr	r3, [pc, #136]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    8930:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	011b      	lsls	r3, r3, #4
    8936:	18d3      	adds	r3, r2, r3
    8938:	3328      	adds	r3, #40	; 0x28
    893a:	685a      	ldr	r2, [r3, #4]
    893c:	4b1e      	ldr	r3, [pc, #120]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    893e:	681b      	ldr	r3, [r3, #0]
    8940:	1c18      	adds	r0, r3, #0
    8942:	2100      	movs	r1, #0
    8944:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    8946:	683a      	ldr	r2, [r7, #0]
    8948:	2320      	movs	r3, #32
    894a:	4013      	ands	r3, r2
    894c:	d100      	bne.n	8950 <_usb_host_interrupt_handler+0x298>
    894e:	e115      	b.n	8b7c <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    8950:	687b      	ldr	r3, [r7, #4]
    8952:	2201      	movs	r2, #1
    8954:	1c11      	adds	r1, r2, #0
    8956:	4099      	lsls	r1, r3
    8958:	1c0b      	adds	r3, r1, #0
    895a:	43db      	mvns	r3, r3
    895c:	1c1a      	adds	r2, r3, #0
    895e:	4b18      	ldr	r3, [pc, #96]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    8960:	681b      	ldr	r3, [r3, #0]
    8962:	401a      	ands	r2, r3
    8964:	4b16      	ldr	r3, [pc, #88]	; (89c0 <_usb_host_interrupt_handler+0x308>)
    8966:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    8968:	4b13      	ldr	r3, [pc, #76]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    896a:	681b      	ldr	r3, [r3, #0]
    896c:	681a      	ldr	r2, [r3, #0]
    896e:	687b      	ldr	r3, [r7, #4]
    8970:	3308      	adds	r3, #8
    8972:	015b      	lsls	r3, r3, #5
    8974:	18d3      	adds	r3, r2, r3
    8976:	2220      	movs	r2, #32
    8978:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    897a:	4b0f      	ldr	r3, [pc, #60]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    897c:	6819      	ldr	r1, [r3, #0]
    897e:	23a8      	movs	r3, #168	; 0xa8
    8980:	687a      	ldr	r2, [r7, #4]
    8982:	188a      	adds	r2, r1, r2
    8984:	18d3      	adds	r3, r2, r3
    8986:	799b      	ldrb	r3, [r3, #6]
    8988:	1c1a      	adds	r2, r3, #0
    898a:	2308      	movs	r3, #8
    898c:	4013      	ands	r3, r2
    898e:	d100      	bne.n	8992 <_usb_host_interrupt_handler+0x2da>
    8990:	e0f4      	b.n	8b7c <_usb_host_interrupt_handler+0x4c4>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	b2da      	uxtb	r2, r3
    8996:	4b0b      	ldr	r3, [pc, #44]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    8998:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    899a:	4b07      	ldr	r3, [pc, #28]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    899c:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	011b      	lsls	r3, r3, #4
    89a2:	18d3      	adds	r3, r2, r3
    89a4:	332c      	adds	r3, #44	; 0x2c
    89a6:	685a      	ldr	r2, [r3, #4]
    89a8:	4b03      	ldr	r3, [pc, #12]	; (89b8 <_usb_host_interrupt_handler+0x300>)
    89aa:	6819      	ldr	r1, [r3, #0]
    89ac:	4b05      	ldr	r3, [pc, #20]	; (89c4 <_usb_host_interrupt_handler+0x30c>)
    89ae:	1c08      	adds	r0, r1, #0
    89b0:	1c19      	adds	r1, r3, #0
    89b2:	4790      	blx	r2
    89b4:	e0e2      	b.n	8b7c <_usb_host_interrupt_handler+0x4c4>
    89b6:	46c0      	nop			; (mov r8, r8)
    89b8:	20006d9c 	.word	0x20006d9c
    89bc:	0000afdd 	.word	0x0000afdd
    89c0:	20006db4 	.word	0x20006db4
    89c4:	20006da0 	.word	0x20006da0
    89c8:	2000701c 	.word	0x2000701c
    89cc:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    89d0:	4b6c      	ldr	r3, [pc, #432]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    89d2:	681b      	ldr	r3, [r3, #0]
    89d4:	681b      	ldr	r3, [r3, #0]
    89d6:	8b9b      	ldrh	r3, [r3, #28]
    89d8:	b29b      	uxth	r3, r3
    89da:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    89dc:	683a      	ldr	r2, [r7, #0]
    89de:	2304      	movs	r3, #4
    89e0:	4013      	ands	r3, r2
    89e2:	d013      	beq.n	8a0c <_usb_host_interrupt_handler+0x354>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    89e4:	4b67      	ldr	r3, [pc, #412]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    89e6:	681b      	ldr	r3, [r3, #0]
    89e8:	681b      	ldr	r3, [r3, #0]
    89ea:	2204      	movs	r2, #4
    89ec:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    89ee:	4b65      	ldr	r3, [pc, #404]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    89f0:	681a      	ldr	r2, [r3, #0]
    89f2:	23a5      	movs	r3, #165	; 0xa5
    89f4:	5cd3      	ldrb	r3, [r2, r3]
    89f6:	1c1a      	adds	r2, r3, #0
    89f8:	2301      	movs	r3, #1
    89fa:	4013      	ands	r3, r2
    89fc:	d006      	beq.n	8a0c <_usb_host_interrupt_handler+0x354>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    89fe:	4b61      	ldr	r3, [pc, #388]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a00:	681b      	ldr	r3, [r3, #0]
    8a02:	685a      	ldr	r2, [r3, #4]
    8a04:	4b5f      	ldr	r3, [pc, #380]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a06:	681b      	ldr	r3, [r3, #0]
    8a08:	1c18      	adds	r0, r3, #0
    8a0a:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    8a0c:	683a      	ldr	r2, [r7, #0]
    8a0e:	2308      	movs	r3, #8
    8a10:	4013      	ands	r3, r2
    8a12:	d016      	beq.n	8a42 <_usb_host_interrupt_handler+0x38a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8a14:	4b5c      	ldr	r3, [pc, #368]	; (8b88 <_usb_host_interrupt_handler+0x4d0>)
    8a16:	2200      	movs	r2, #0
    8a18:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    8a1a:	4b5a      	ldr	r3, [pc, #360]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a1c:	681b      	ldr	r3, [r3, #0]
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	2208      	movs	r2, #8
    8a22:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    8a24:	4b57      	ldr	r3, [pc, #348]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a26:	681a      	ldr	r2, [r3, #0]
    8a28:	23a5      	movs	r3, #165	; 0xa5
    8a2a:	5cd3      	ldrb	r3, [r2, r3]
    8a2c:	1c1a      	adds	r2, r3, #0
    8a2e:	2302      	movs	r3, #2
    8a30:	4013      	ands	r3, r2
    8a32:	d006      	beq.n	8a42 <_usb_host_interrupt_handler+0x38a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    8a34:	4b53      	ldr	r3, [pc, #332]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a36:	681b      	ldr	r3, [r3, #0]
    8a38:	689a      	ldr	r2, [r3, #8]
    8a3a:	4b52      	ldr	r3, [pc, #328]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a3c:	681b      	ldr	r3, [r3, #0]
    8a3e:	1c18      	adds	r0, r3, #0
    8a40:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    8a42:	683a      	ldr	r2, [r7, #0]
    8a44:	2340      	movs	r3, #64	; 0x40
    8a46:	4013      	ands	r3, r2
    8a48:	d013      	beq.n	8a72 <_usb_host_interrupt_handler+0x3ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    8a4a:	4b4e      	ldr	r3, [pc, #312]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	2240      	movs	r2, #64	; 0x40
    8a52:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    8a54:	4b4b      	ldr	r3, [pc, #300]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a56:	681a      	ldr	r2, [r3, #0]
    8a58:	23a5      	movs	r3, #165	; 0xa5
    8a5a:	5cd3      	ldrb	r3, [r2, r3]
    8a5c:	1c1a      	adds	r2, r3, #0
    8a5e:	2310      	movs	r3, #16
    8a60:	4013      	ands	r3, r2
    8a62:	d006      	beq.n	8a72 <_usb_host_interrupt_handler+0x3ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    8a64:	4b47      	ldr	r3, [pc, #284]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a66:	681b      	ldr	r3, [r3, #0]
    8a68:	695a      	ldr	r2, [r3, #20]
    8a6a:	4b46      	ldr	r3, [pc, #280]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a6c:	681b      	ldr	r3, [r3, #0]
    8a6e:	1c18      	adds	r0, r3, #0
    8a70:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    8a72:	683a      	ldr	r2, [r7, #0]
    8a74:	2320      	movs	r3, #32
    8a76:	4013      	ands	r3, r2
    8a78:	d013      	beq.n	8aa2 <_usb_host_interrupt_handler+0x3ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    8a7a:	4b42      	ldr	r3, [pc, #264]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a7c:	681b      	ldr	r3, [r3, #0]
    8a7e:	681b      	ldr	r3, [r3, #0]
    8a80:	2220      	movs	r2, #32
    8a82:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    8a84:	4b3f      	ldr	r3, [pc, #252]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a86:	681a      	ldr	r2, [r3, #0]
    8a88:	23a5      	movs	r3, #165	; 0xa5
    8a8a:	5cd3      	ldrb	r3, [r2, r3]
    8a8c:	1c1a      	adds	r2, r3, #0
    8a8e:	2308      	movs	r3, #8
    8a90:	4013      	ands	r3, r2
    8a92:	d006      	beq.n	8aa2 <_usb_host_interrupt_handler+0x3ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    8a94:	4b3b      	ldr	r3, [pc, #236]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a96:	681b      	ldr	r3, [r3, #0]
    8a98:	691a      	ldr	r2, [r3, #16]
    8a9a:	4b3a      	ldr	r3, [pc, #232]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8a9c:	681b      	ldr	r3, [r3, #0]
    8a9e:	1c18      	adds	r0, r3, #0
    8aa0:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    8aa2:	683a      	ldr	r2, [r7, #0]
    8aa4:	2310      	movs	r3, #16
    8aa6:	4013      	ands	r3, r2
    8aa8:	d013      	beq.n	8ad2 <_usb_host_interrupt_handler+0x41a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    8aaa:	4b36      	ldr	r3, [pc, #216]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8aac:	681b      	ldr	r3, [r3, #0]
    8aae:	681b      	ldr	r3, [r3, #0]
    8ab0:	2210      	movs	r2, #16
    8ab2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    8ab4:	4b33      	ldr	r3, [pc, #204]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8ab6:	681a      	ldr	r2, [r3, #0]
    8ab8:	23a5      	movs	r3, #165	; 0xa5
    8aba:	5cd3      	ldrb	r3, [r2, r3]
    8abc:	1c1a      	adds	r2, r3, #0
    8abe:	2304      	movs	r3, #4
    8ac0:	4013      	ands	r3, r2
    8ac2:	d006      	beq.n	8ad2 <_usb_host_interrupt_handler+0x41a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    8ac4:	4b2f      	ldr	r3, [pc, #188]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8ac6:	681b      	ldr	r3, [r3, #0]
    8ac8:	68da      	ldr	r2, [r3, #12]
    8aca:	4b2e      	ldr	r3, [pc, #184]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8acc:	681b      	ldr	r3, [r3, #0]
    8ace:	1c18      	adds	r0, r3, #0
    8ad0:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    8ad2:	683a      	ldr	r2, [r7, #0]
    8ad4:	2380      	movs	r3, #128	; 0x80
    8ad6:	4013      	ands	r3, r2
    8ad8:	d016      	beq.n	8b08 <_usb_host_interrupt_handler+0x450>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8ada:	4b2b      	ldr	r3, [pc, #172]	; (8b88 <_usb_host_interrupt_handler+0x4d0>)
    8adc:	2200      	movs	r2, #0
    8ade:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    8ae0:	4b28      	ldr	r3, [pc, #160]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8ae2:	681b      	ldr	r3, [r3, #0]
    8ae4:	681b      	ldr	r3, [r3, #0]
    8ae6:	2280      	movs	r2, #128	; 0x80
    8ae8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    8aea:	4b26      	ldr	r3, [pc, #152]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8aec:	681a      	ldr	r2, [r3, #0]
    8aee:	23a5      	movs	r3, #165	; 0xa5
    8af0:	5cd3      	ldrb	r3, [r2, r3]
    8af2:	1c1a      	adds	r2, r3, #0
    8af4:	2320      	movs	r3, #32
    8af6:	4013      	ands	r3, r2
    8af8:	d006      	beq.n	8b08 <_usb_host_interrupt_handler+0x450>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    8afa:	4b22      	ldr	r3, [pc, #136]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8afc:	681b      	ldr	r3, [r3, #0]
    8afe:	699a      	ldr	r2, [r3, #24]
    8b00:	4b20      	ldr	r3, [pc, #128]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b02:	681b      	ldr	r3, [r3, #0]
    8b04:	1c18      	adds	r0, r3, #0
    8b06:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    8b08:	683a      	ldr	r2, [r7, #0]
    8b0a:	2380      	movs	r3, #128	; 0x80
    8b0c:	005b      	lsls	r3, r3, #1
    8b0e:	4013      	ands	r3, r2
    8b10:	d017      	beq.n	8b42 <_usb_host_interrupt_handler+0x48a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8b12:	4b1d      	ldr	r3, [pc, #116]	; (8b88 <_usb_host_interrupt_handler+0x4d0>)
    8b14:	2200      	movs	r2, #0
    8b16:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    8b18:	4b1a      	ldr	r3, [pc, #104]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b1a:	681b      	ldr	r3, [r3, #0]
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	2280      	movs	r2, #128	; 0x80
    8b20:	0052      	lsls	r2, r2, #1
    8b22:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    8b24:	4b17      	ldr	r3, [pc, #92]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b26:	681a      	ldr	r2, [r3, #0]
    8b28:	23a5      	movs	r3, #165	; 0xa5
    8b2a:	5cd3      	ldrb	r3, [r2, r3]
    8b2c:	1c1a      	adds	r2, r3, #0
    8b2e:	2340      	movs	r3, #64	; 0x40
    8b30:	4013      	ands	r3, r2
    8b32:	d006      	beq.n	8b42 <_usb_host_interrupt_handler+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    8b34:	4b13      	ldr	r3, [pc, #76]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	69da      	ldr	r2, [r3, #28]
    8b3a:	4b12      	ldr	r3, [pc, #72]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	1c18      	adds	r0, r3, #0
    8b40:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    8b42:	683a      	ldr	r2, [r7, #0]
    8b44:	2380      	movs	r3, #128	; 0x80
    8b46:	009b      	lsls	r3, r3, #2
    8b48:	4013      	ands	r3, r2
    8b4a:	d017      	beq.n	8b7c <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    8b4c:	4b0e      	ldr	r3, [pc, #56]	; (8b88 <_usb_host_interrupt_handler+0x4d0>)
    8b4e:	2200      	movs	r2, #0
    8b50:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    8b52:	4b0c      	ldr	r3, [pc, #48]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b54:	681b      	ldr	r3, [r3, #0]
    8b56:	681b      	ldr	r3, [r3, #0]
    8b58:	2280      	movs	r2, #128	; 0x80
    8b5a:	0092      	lsls	r2, r2, #2
    8b5c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    8b5e:	4b09      	ldr	r3, [pc, #36]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b60:	681a      	ldr	r2, [r3, #0]
    8b62:	23a5      	movs	r3, #165	; 0xa5
    8b64:	5cd3      	ldrb	r3, [r2, r3]
    8b66:	b2db      	uxtb	r3, r3
    8b68:	b25b      	sxtb	r3, r3
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	da06      	bge.n	8b7c <_usb_host_interrupt_handler+0x4c4>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    8b6e:	4b05      	ldr	r3, [pc, #20]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b70:	681b      	ldr	r3, [r3, #0]
    8b72:	6a1a      	ldr	r2, [r3, #32]
    8b74:	4b03      	ldr	r3, [pc, #12]	; (8b84 <_usb_host_interrupt_handler+0x4cc>)
    8b76:	681b      	ldr	r3, [r3, #0]
    8b78:	1c18      	adds	r0, r3, #0
    8b7a:	4790      	blx	r2
			}
		}

	}
}
    8b7c:	46bd      	mov	sp, r7
    8b7e:	b002      	add	sp, #8
    8b80:	bd80      	pop	{r7, pc}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	20006d9c 	.word	0x20006d9c
    8b88:	20006db4 	.word	0x20006db4

00008b8c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    8b8c:	b580      	push	{r7, lr}
    8b8e:	b084      	sub	sp, #16
    8b90:	af00      	add	r7, sp, #0
    8b92:	60f8      	str	r0, [r7, #12]
    8b94:	607a      	str	r2, [r7, #4]
    8b96:	1c3b      	adds	r3, r7, #0
    8b98:	330b      	adds	r3, #11
    8b9a:	1c0a      	adds	r2, r1, #0
    8b9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    8b9e:	1c3b      	adds	r3, r7, #0
    8ba0:	330b      	adds	r3, #11
    8ba2:	781a      	ldrb	r2, [r3, #0]
    8ba4:	68fb      	ldr	r3, [r7, #12]
    8ba6:	322e      	adds	r2, #46	; 0x2e
    8ba8:	0092      	lsls	r2, r2, #2
    8baa:	6879      	ldr	r1, [r7, #4]
    8bac:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    8bae:	68fa      	ldr	r2, [r7, #12]
    8bb0:	23aa      	movs	r3, #170	; 0xaa
    8bb2:	005b      	lsls	r3, r3, #1
    8bb4:	5ad2      	ldrh	r2, [r2, r3]
    8bb6:	1c3b      	adds	r3, r7, #0
    8bb8:	330b      	adds	r3, #11
    8bba:	7819      	ldrb	r1, [r3, #0]
    8bbc:	4b06      	ldr	r3, [pc, #24]	; (8bd8 <usb_device_register_callback+0x4c>)
    8bbe:	0049      	lsls	r1, r1, #1
    8bc0:	5acb      	ldrh	r3, [r1, r3]
    8bc2:	4313      	orrs	r3, r2
    8bc4:	b299      	uxth	r1, r3
    8bc6:	68fa      	ldr	r2, [r7, #12]
    8bc8:	23aa      	movs	r3, #170	; 0xaa
    8bca:	005b      	lsls	r3, r3, #1
    8bcc:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    8bce:	2300      	movs	r3, #0
}
    8bd0:	1c18      	adds	r0, r3, #0
    8bd2:	46bd      	mov	sp, r7
    8bd4:	b004      	add	sp, #16
    8bd6:	bd80      	pop	{r7, pc}
    8bd8:	0000b340 	.word	0x0000b340

00008bdc <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    8bdc:	b580      	push	{r7, lr}
    8bde:	b082      	sub	sp, #8
    8be0:	af00      	add	r7, sp, #0
    8be2:	6078      	str	r0, [r7, #4]
    8be4:	1c0a      	adds	r2, r1, #0
    8be6:	1cfb      	adds	r3, r7, #3
    8be8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	1cfa      	adds	r2, r7, #3
    8bf0:	7811      	ldrb	r1, [r2, #0]
    8bf2:	4a10      	ldr	r2, [pc, #64]	; (8c34 <usb_device_enable_callback+0x58>)
    8bf4:	0049      	lsls	r1, r1, #1
    8bf6:	5a8a      	ldrh	r2, [r1, r2]
    8bf8:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    8bfa:	687a      	ldr	r2, [r7, #4]
    8bfc:	23ab      	movs	r3, #171	; 0xab
    8bfe:	005b      	lsls	r3, r3, #1
    8c00:	5ad2      	ldrh	r2, [r2, r3]
    8c02:	1cfb      	adds	r3, r7, #3
    8c04:	7819      	ldrb	r1, [r3, #0]
    8c06:	4b0b      	ldr	r3, [pc, #44]	; (8c34 <usb_device_enable_callback+0x58>)
    8c08:	0049      	lsls	r1, r1, #1
    8c0a:	5acb      	ldrh	r3, [r1, r3]
    8c0c:	4313      	orrs	r3, r2
    8c0e:	b299      	uxth	r1, r3
    8c10:	687a      	ldr	r2, [r7, #4]
    8c12:	23ab      	movs	r3, #171	; 0xab
    8c14:	005b      	lsls	r3, r3, #1
    8c16:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	1cfa      	adds	r2, r7, #3
    8c1e:	7811      	ldrb	r1, [r2, #0]
    8c20:	4a04      	ldr	r2, [pc, #16]	; (8c34 <usb_device_enable_callback+0x58>)
    8c22:	0049      	lsls	r1, r1, #1
    8c24:	5a8a      	ldrh	r2, [r1, r2]
    8c26:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    8c28:	2300      	movs	r3, #0
}
    8c2a:	1c18      	adds	r0, r3, #0
    8c2c:	46bd      	mov	sp, r7
    8c2e:	b002      	add	sp, #8
    8c30:	bd80      	pop	{r7, pc}
    8c32:	46c0      	nop			; (mov r8, r8)
    8c34:	0000b340 	.word	0x0000b340

00008c38 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    8c38:	b580      	push	{r7, lr}
    8c3a:	b082      	sub	sp, #8
    8c3c:	af00      	add	r7, sp, #0
    8c3e:	6078      	str	r0, [r7, #4]
    8c40:	1c0a      	adds	r2, r1, #0
    8c42:	1cfb      	adds	r3, r7, #3
    8c44:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    8c46:	687a      	ldr	r2, [r7, #4]
    8c48:	23ab      	movs	r3, #171	; 0xab
    8c4a:	005b      	lsls	r3, r3, #1
    8c4c:	5ad3      	ldrh	r3, [r2, r3]
    8c4e:	b29b      	uxth	r3, r3
    8c50:	1cfa      	adds	r2, r7, #3
    8c52:	7811      	ldrb	r1, [r2, #0]
    8c54:	4a0c      	ldr	r2, [pc, #48]	; (8c88 <usb_device_disable_callback+0x50>)
    8c56:	0049      	lsls	r1, r1, #1
    8c58:	5a8a      	ldrh	r2, [r1, r2]
    8c5a:	b292      	uxth	r2, r2
    8c5c:	43d2      	mvns	r2, r2
    8c5e:	b292      	uxth	r2, r2
    8c60:	4013      	ands	r3, r2
    8c62:	b29b      	uxth	r3, r3
    8c64:	b299      	uxth	r1, r3
    8c66:	687a      	ldr	r2, [r7, #4]
    8c68:	23ab      	movs	r3, #171	; 0xab
    8c6a:	005b      	lsls	r3, r3, #1
    8c6c:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    8c6e:	687b      	ldr	r3, [r7, #4]
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	1cfa      	adds	r2, r7, #3
    8c74:	7811      	ldrb	r1, [r2, #0]
    8c76:	4a04      	ldr	r2, [pc, #16]	; (8c88 <usb_device_disable_callback+0x50>)
    8c78:	0049      	lsls	r1, r1, #1
    8c7a:	5a8a      	ldrh	r2, [r1, r2]
    8c7c:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    8c7e:	2300      	movs	r3, #0
}
    8c80:	1c18      	adds	r0, r3, #0
    8c82:	46bd      	mov	sp, r7
    8c84:	b002      	add	sp, #8
    8c86:	bd80      	pop	{r7, pc}
    8c88:	0000b340 	.word	0x0000b340

00008c8c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b084      	sub	sp, #16
    8c90:	af00      	add	r7, sp, #0
    8c92:	60f8      	str	r0, [r7, #12]
    8c94:	607b      	str	r3, [r7, #4]
    8c96:	1c3b      	adds	r3, r7, #0
    8c98:	330b      	adds	r3, #11
    8c9a:	7019      	strb	r1, [r3, #0]
    8c9c:	1c3b      	adds	r3, r7, #0
    8c9e:	330a      	adds	r3, #10
    8ca0:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    8ca2:	1c3b      	adds	r3, r7, #0
    8ca4:	330b      	adds	r3, #11
    8ca6:	7819      	ldrb	r1, [r3, #0]
    8ca8:	1c3b      	adds	r3, r7, #0
    8caa:	330a      	adds	r3, #10
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	68fa      	ldr	r2, [r7, #12]
    8cb0:	0089      	lsls	r1, r1, #2
    8cb2:	18cb      	adds	r3, r1, r3
    8cb4:	3334      	adds	r3, #52	; 0x34
    8cb6:	009b      	lsls	r3, r3, #2
    8cb8:	18d3      	adds	r3, r2, r3
    8cba:	687a      	ldr	r2, [r7, #4]
    8cbc:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8cbe:	1c3b      	adds	r3, r7, #0
    8cc0:	330b      	adds	r3, #11
    8cc2:	7819      	ldrb	r1, [r3, #0]
    8cc4:	1c3b      	adds	r3, r7, #0
    8cc6:	330b      	adds	r3, #11
    8cc8:	781a      	ldrb	r2, [r3, #0]
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	23ac      	movs	r3, #172	; 0xac
    8cce:	005b      	lsls	r3, r3, #1
    8cd0:	1882      	adds	r2, r0, r2
    8cd2:	18d3      	adds	r3, r2, r3
    8cd4:	781a      	ldrb	r2, [r3, #0]
    8cd6:	1c3b      	adds	r3, r7, #0
    8cd8:	330a      	adds	r3, #10
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	4807      	ldr	r0, [pc, #28]	; (8cfc <usb_device_endpoint_register_callback+0x70>)
    8cde:	5cc3      	ldrb	r3, [r0, r3]
    8ce0:	4313      	orrs	r3, r2
    8ce2:	b2da      	uxtb	r2, r3
    8ce4:	68f8      	ldr	r0, [r7, #12]
    8ce6:	23ac      	movs	r3, #172	; 0xac
    8ce8:	005b      	lsls	r3, r3, #1
    8cea:	1841      	adds	r1, r0, r1
    8cec:	18cb      	adds	r3, r1, r3
    8cee:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8cf0:	2300      	movs	r3, #0
}
    8cf2:	1c18      	adds	r0, r3, #0
    8cf4:	46bd      	mov	sp, r7
    8cf6:	b004      	add	sp, #16
    8cf8:	bd80      	pop	{r7, pc}
    8cfa:	46c0      	nop			; (mov r8, r8)
    8cfc:	0000b350 	.word	0x0000b350

00008d00 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    8d00:	b580      	push	{r7, lr}
    8d02:	b082      	sub	sp, #8
    8d04:	af00      	add	r7, sp, #0
    8d06:	6078      	str	r0, [r7, #4]
    8d08:	1cfb      	adds	r3, r7, #3
    8d0a:	7019      	strb	r1, [r3, #0]
    8d0c:	1cbb      	adds	r3, r7, #2
    8d0e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    8d10:	1cfb      	adds	r3, r7, #3
    8d12:	7819      	ldrb	r1, [r3, #0]
    8d14:	1cbb      	adds	r3, r7, #2
    8d16:	781b      	ldrb	r3, [r3, #0]
    8d18:	687a      	ldr	r2, [r7, #4]
    8d1a:	0089      	lsls	r1, r1, #2
    8d1c:	18cb      	adds	r3, r1, r3
    8d1e:	3334      	adds	r3, #52	; 0x34
    8d20:	009b      	lsls	r3, r3, #2
    8d22:	18d3      	adds	r3, r2, r3
    8d24:	2200      	movs	r2, #0
    8d26:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8d28:	1cfb      	adds	r3, r7, #3
    8d2a:	7819      	ldrb	r1, [r3, #0]
    8d2c:	1cfb      	adds	r3, r7, #3
    8d2e:	781a      	ldrb	r2, [r3, #0]
    8d30:	6878      	ldr	r0, [r7, #4]
    8d32:	23ac      	movs	r3, #172	; 0xac
    8d34:	005b      	lsls	r3, r3, #1
    8d36:	1882      	adds	r2, r0, r2
    8d38:	18d3      	adds	r3, r2, r3
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	b2db      	uxtb	r3, r3
    8d3e:	1cba      	adds	r2, r7, #2
    8d40:	7812      	ldrb	r2, [r2, #0]
    8d42:	4809      	ldr	r0, [pc, #36]	; (8d68 <usb_device_endpoint_unregister_callback+0x68>)
    8d44:	5c82      	ldrb	r2, [r0, r2]
    8d46:	b2d2      	uxtb	r2, r2
    8d48:	43d2      	mvns	r2, r2
    8d4a:	b2d2      	uxtb	r2, r2
    8d4c:	4013      	ands	r3, r2
    8d4e:	b2db      	uxtb	r3, r3
    8d50:	b2da      	uxtb	r2, r3
    8d52:	6878      	ldr	r0, [r7, #4]
    8d54:	23ac      	movs	r3, #172	; 0xac
    8d56:	005b      	lsls	r3, r3, #1
    8d58:	1841      	adds	r1, r0, r1
    8d5a:	18cb      	adds	r3, r1, r3
    8d5c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    8d5e:	2300      	movs	r3, #0
}
    8d60:	1c18      	adds	r0, r3, #0
    8d62:	46bd      	mov	sp, r7
    8d64:	b002      	add	sp, #8
    8d66:	bd80      	pop	{r7, pc}
    8d68:	0000b350 	.word	0x0000b350

00008d6c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    8d6c:	b580      	push	{r7, lr}
    8d6e:	b084      	sub	sp, #16
    8d70:	af00      	add	r7, sp, #0
    8d72:	6078      	str	r0, [r7, #4]
    8d74:	1cfb      	adds	r3, r7, #3
    8d76:	7019      	strb	r1, [r3, #0]
    8d78:	1cbb      	adds	r3, r7, #2
    8d7a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8d7c:	1c3b      	adds	r3, r7, #0
    8d7e:	330f      	adds	r3, #15
    8d80:	1cfa      	adds	r2, r7, #3
    8d82:	7811      	ldrb	r1, [r2, #0]
    8d84:	220f      	movs	r2, #15
    8d86:	400a      	ands	r2, r1
    8d88:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    8d8a:	1c3b      	adds	r3, r7, #0
    8d8c:	330f      	adds	r3, #15
    8d8e:	7819      	ldrb	r1, [r3, #0]
    8d90:	1c3b      	adds	r3, r7, #0
    8d92:	330f      	adds	r3, #15
    8d94:	781a      	ldrb	r2, [r3, #0]
    8d96:	6878      	ldr	r0, [r7, #4]
    8d98:	23b0      	movs	r3, #176	; 0xb0
    8d9a:	005b      	lsls	r3, r3, #1
    8d9c:	1882      	adds	r2, r0, r2
    8d9e:	18d3      	adds	r3, r2, r3
    8da0:	781a      	ldrb	r2, [r3, #0]
    8da2:	1cbb      	adds	r3, r7, #2
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	4854      	ldr	r0, [pc, #336]	; (8ef8 <usb_device_endpoint_enable_callback+0x18c>)
    8da8:	5cc3      	ldrb	r3, [r0, r3]
    8daa:	4313      	orrs	r3, r2
    8dac:	b2da      	uxtb	r2, r3
    8dae:	6878      	ldr	r0, [r7, #4]
    8db0:	23b0      	movs	r3, #176	; 0xb0
    8db2:	005b      	lsls	r3, r3, #1
    8db4:	1841      	adds	r1, r0, r1
    8db6:	18cb      	adds	r3, r1, r3
    8db8:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    8dba:	1cbb      	adds	r3, r7, #2
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d12f      	bne.n	8e22 <usb_device_endpoint_enable_callback+0xb6>
		if (ep_num == 0) { // control endpoint
    8dc2:	1c3b      	adds	r3, r7, #0
    8dc4:	330f      	adds	r3, #15
    8dc6:	781b      	ldrb	r3, [r3, #0]
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d10c      	bne.n	8de6 <usb_device_endpoint_enable_callback+0x7a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	6819      	ldr	r1, [r3, #0]
    8dd0:	1c3b      	adds	r3, r7, #0
    8dd2:	330f      	adds	r3, #15
    8dd4:	781a      	ldrb	r2, [r3, #0]
    8dd6:	2384      	movs	r3, #132	; 0x84
    8dd8:	005b      	lsls	r3, r3, #1
    8dda:	0152      	lsls	r2, r2, #5
    8ddc:	188a      	adds	r2, r1, r2
    8dde:	18d3      	adds	r3, r2, r3
    8de0:	2203      	movs	r2, #3
    8de2:	705a      	strb	r2, [r3, #1]
    8de4:	e01d      	b.n	8e22 <usb_device_endpoint_enable_callback+0xb6>
		} else if (ep & USB_EP_DIR_IN) {
    8de6:	1cfb      	adds	r3, r7, #3
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	b25b      	sxtb	r3, r3
    8dec:	2b00      	cmp	r3, #0
    8dee:	da0c      	bge.n	8e0a <usb_device_endpoint_enable_callback+0x9e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	6819      	ldr	r1, [r3, #0]
    8df4:	1c3b      	adds	r3, r7, #0
    8df6:	330f      	adds	r3, #15
    8df8:	781a      	ldrb	r2, [r3, #0]
    8dfa:	2384      	movs	r3, #132	; 0x84
    8dfc:	005b      	lsls	r3, r3, #1
    8dfe:	0152      	lsls	r2, r2, #5
    8e00:	188a      	adds	r2, r1, r2
    8e02:	18d3      	adds	r3, r2, r3
    8e04:	2202      	movs	r2, #2
    8e06:	705a      	strb	r2, [r3, #1]
    8e08:	e00b      	b.n	8e22 <usb_device_endpoint_enable_callback+0xb6>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	6819      	ldr	r1, [r3, #0]
    8e0e:	1c3b      	adds	r3, r7, #0
    8e10:	330f      	adds	r3, #15
    8e12:	781a      	ldrb	r2, [r3, #0]
    8e14:	2384      	movs	r3, #132	; 0x84
    8e16:	005b      	lsls	r3, r3, #1
    8e18:	0152      	lsls	r2, r2, #5
    8e1a:	188a      	adds	r2, r1, r2
    8e1c:	18d3      	adds	r3, r2, r3
    8e1e:	2201      	movs	r2, #1
    8e20:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    8e22:	1cbb      	adds	r3, r7, #2
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	2b01      	cmp	r3, #1
    8e28:	d12f      	bne.n	8e8a <usb_device_endpoint_enable_callback+0x11e>
		if (ep_num == 0) { // control endpoint
    8e2a:	1c3b      	adds	r3, r7, #0
    8e2c:	330f      	adds	r3, #15
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	2b00      	cmp	r3, #0
    8e32:	d10c      	bne.n	8e4e <usb_device_endpoint_enable_callback+0xe2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	6819      	ldr	r1, [r3, #0]
    8e38:	1c3b      	adds	r3, r7, #0
    8e3a:	330f      	adds	r3, #15
    8e3c:	781a      	ldrb	r2, [r3, #0]
    8e3e:	2384      	movs	r3, #132	; 0x84
    8e40:	005b      	lsls	r3, r3, #1
    8e42:	0152      	lsls	r2, r2, #5
    8e44:	188a      	adds	r2, r1, r2
    8e46:	18d3      	adds	r3, r2, r3
    8e48:	220c      	movs	r2, #12
    8e4a:	705a      	strb	r2, [r3, #1]
    8e4c:	e01d      	b.n	8e8a <usb_device_endpoint_enable_callback+0x11e>
		} else if (ep & USB_EP_DIR_IN) {
    8e4e:	1cfb      	adds	r3, r7, #3
    8e50:	781b      	ldrb	r3, [r3, #0]
    8e52:	b25b      	sxtb	r3, r3
    8e54:	2b00      	cmp	r3, #0
    8e56:	da0c      	bge.n	8e72 <usb_device_endpoint_enable_callback+0x106>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    8e58:	687b      	ldr	r3, [r7, #4]
    8e5a:	6819      	ldr	r1, [r3, #0]
    8e5c:	1c3b      	adds	r3, r7, #0
    8e5e:	330f      	adds	r3, #15
    8e60:	781a      	ldrb	r2, [r3, #0]
    8e62:	2384      	movs	r3, #132	; 0x84
    8e64:	005b      	lsls	r3, r3, #1
    8e66:	0152      	lsls	r2, r2, #5
    8e68:	188a      	adds	r2, r1, r2
    8e6a:	18d3      	adds	r3, r2, r3
    8e6c:	2208      	movs	r2, #8
    8e6e:	705a      	strb	r2, [r3, #1]
    8e70:	e00b      	b.n	8e8a <usb_device_endpoint_enable_callback+0x11e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	6819      	ldr	r1, [r3, #0]
    8e76:	1c3b      	adds	r3, r7, #0
    8e78:	330f      	adds	r3, #15
    8e7a:	781a      	ldrb	r2, [r3, #0]
    8e7c:	2384      	movs	r3, #132	; 0x84
    8e7e:	005b      	lsls	r3, r3, #1
    8e80:	0152      	lsls	r2, r2, #5
    8e82:	188a      	adds	r2, r1, r2
    8e84:	18d3      	adds	r3, r2, r3
    8e86:	2204      	movs	r2, #4
    8e88:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    8e8a:	1cbb      	adds	r3, r7, #2
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	2b02      	cmp	r3, #2
    8e90:	d10b      	bne.n	8eaa <usb_device_endpoint_enable_callback+0x13e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	6819      	ldr	r1, [r3, #0]
    8e96:	1c3b      	adds	r3, r7, #0
    8e98:	330f      	adds	r3, #15
    8e9a:	781a      	ldrb	r2, [r3, #0]
    8e9c:	2384      	movs	r3, #132	; 0x84
    8e9e:	005b      	lsls	r3, r3, #1
    8ea0:	0152      	lsls	r2, r2, #5
    8ea2:	188a      	adds	r2, r1, r2
    8ea4:	18d3      	adds	r3, r2, r3
    8ea6:	2210      	movs	r2, #16
    8ea8:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    8eaa:	1cbb      	adds	r3, r7, #2
    8eac:	781b      	ldrb	r3, [r3, #0]
    8eae:	2b03      	cmp	r3, #3
    8eb0:	d11d      	bne.n	8eee <usb_device_endpoint_enable_callback+0x182>
		if (ep & USB_EP_DIR_IN) {
    8eb2:	1cfb      	adds	r3, r7, #3
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	b25b      	sxtb	r3, r3
    8eb8:	2b00      	cmp	r3, #0
    8eba:	da0c      	bge.n	8ed6 <usb_device_endpoint_enable_callback+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	6819      	ldr	r1, [r3, #0]
    8ec0:	1c3b      	adds	r3, r7, #0
    8ec2:	330f      	adds	r3, #15
    8ec4:	781a      	ldrb	r2, [r3, #0]
    8ec6:	2384      	movs	r3, #132	; 0x84
    8ec8:	005b      	lsls	r3, r3, #1
    8eca:	0152      	lsls	r2, r2, #5
    8ecc:	188a      	adds	r2, r1, r2
    8ece:	18d3      	adds	r3, r2, r3
    8ed0:	2240      	movs	r2, #64	; 0x40
    8ed2:	705a      	strb	r2, [r3, #1]
    8ed4:	e00b      	b.n	8eee <usb_device_endpoint_enable_callback+0x182>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	6819      	ldr	r1, [r3, #0]
    8eda:	1c3b      	adds	r3, r7, #0
    8edc:	330f      	adds	r3, #15
    8ede:	781a      	ldrb	r2, [r3, #0]
    8ee0:	2384      	movs	r3, #132	; 0x84
    8ee2:	005b      	lsls	r3, r3, #1
    8ee4:	0152      	lsls	r2, r2, #5
    8ee6:	188a      	adds	r2, r1, r2
    8ee8:	18d3      	adds	r3, r2, r3
    8eea:	2220      	movs	r2, #32
    8eec:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    8eee:	2300      	movs	r3, #0
}
    8ef0:	1c18      	adds	r0, r3, #0
    8ef2:	46bd      	mov	sp, r7
    8ef4:	b004      	add	sp, #16
    8ef6:	bd80      	pop	{r7, pc}
    8ef8:	0000b350 	.word	0x0000b350

00008efc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    8efc:	b580      	push	{r7, lr}
    8efe:	b084      	sub	sp, #16
    8f00:	af00      	add	r7, sp, #0
    8f02:	6078      	str	r0, [r7, #4]
    8f04:	1cfb      	adds	r3, r7, #3
    8f06:	7019      	strb	r1, [r3, #0]
    8f08:	1cbb      	adds	r3, r7, #2
    8f0a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8f0c:	1c3b      	adds	r3, r7, #0
    8f0e:	330f      	adds	r3, #15
    8f10:	1cfa      	adds	r2, r7, #3
    8f12:	7811      	ldrb	r1, [r2, #0]
    8f14:	220f      	movs	r2, #15
    8f16:	400a      	ands	r2, r1
    8f18:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    8f1a:	1c3b      	adds	r3, r7, #0
    8f1c:	330f      	adds	r3, #15
    8f1e:	7819      	ldrb	r1, [r3, #0]
    8f20:	1c3b      	adds	r3, r7, #0
    8f22:	330f      	adds	r3, #15
    8f24:	781a      	ldrb	r2, [r3, #0]
    8f26:	6878      	ldr	r0, [r7, #4]
    8f28:	23b0      	movs	r3, #176	; 0xb0
    8f2a:	005b      	lsls	r3, r3, #1
    8f2c:	1882      	adds	r2, r0, r2
    8f2e:	18d3      	adds	r3, r2, r3
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	b2db      	uxtb	r3, r3
    8f34:	1cba      	adds	r2, r7, #2
    8f36:	7812      	ldrb	r2, [r2, #0]
    8f38:	4856      	ldr	r0, [pc, #344]	; (9094 <usb_device_endpoint_disable_callback+0x198>)
    8f3a:	5c82      	ldrb	r2, [r0, r2]
    8f3c:	b2d2      	uxtb	r2, r2
    8f3e:	43d2      	mvns	r2, r2
    8f40:	b2d2      	uxtb	r2, r2
    8f42:	4013      	ands	r3, r2
    8f44:	b2db      	uxtb	r3, r3
    8f46:	b2da      	uxtb	r2, r3
    8f48:	6878      	ldr	r0, [r7, #4]
    8f4a:	23b0      	movs	r3, #176	; 0xb0
    8f4c:	005b      	lsls	r3, r3, #1
    8f4e:	1841      	adds	r1, r0, r1
    8f50:	18cb      	adds	r3, r1, r3
    8f52:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    8f54:	1cbb      	adds	r3, r7, #2
    8f56:	781b      	ldrb	r3, [r3, #0]
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d12f      	bne.n	8fbc <usb_device_endpoint_disable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    8f5c:	1c3b      	adds	r3, r7, #0
    8f5e:	330f      	adds	r3, #15
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d10c      	bne.n	8f80 <usb_device_endpoint_disable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	6819      	ldr	r1, [r3, #0]
    8f6a:	1c3b      	adds	r3, r7, #0
    8f6c:	330f      	adds	r3, #15
    8f6e:	781a      	ldrb	r2, [r3, #0]
    8f70:	2384      	movs	r3, #132	; 0x84
    8f72:	005b      	lsls	r3, r3, #1
    8f74:	0152      	lsls	r2, r2, #5
    8f76:	188a      	adds	r2, r1, r2
    8f78:	18d3      	adds	r3, r2, r3
    8f7a:	2203      	movs	r2, #3
    8f7c:	701a      	strb	r2, [r3, #0]
    8f7e:	e01d      	b.n	8fbc <usb_device_endpoint_disable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    8f80:	1cfb      	adds	r3, r7, #3
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	b25b      	sxtb	r3, r3
    8f86:	2b00      	cmp	r3, #0
    8f88:	da0c      	bge.n	8fa4 <usb_device_endpoint_disable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	6819      	ldr	r1, [r3, #0]
    8f8e:	1c3b      	adds	r3, r7, #0
    8f90:	330f      	adds	r3, #15
    8f92:	781a      	ldrb	r2, [r3, #0]
    8f94:	2384      	movs	r3, #132	; 0x84
    8f96:	005b      	lsls	r3, r3, #1
    8f98:	0152      	lsls	r2, r2, #5
    8f9a:	188a      	adds	r2, r1, r2
    8f9c:	18d3      	adds	r3, r2, r3
    8f9e:	2202      	movs	r2, #2
    8fa0:	701a      	strb	r2, [r3, #0]
    8fa2:	e00b      	b.n	8fbc <usb_device_endpoint_disable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    8fa4:	687b      	ldr	r3, [r7, #4]
    8fa6:	6819      	ldr	r1, [r3, #0]
    8fa8:	1c3b      	adds	r3, r7, #0
    8faa:	330f      	adds	r3, #15
    8fac:	781a      	ldrb	r2, [r3, #0]
    8fae:	2384      	movs	r3, #132	; 0x84
    8fb0:	005b      	lsls	r3, r3, #1
    8fb2:	0152      	lsls	r2, r2, #5
    8fb4:	188a      	adds	r2, r1, r2
    8fb6:	18d3      	adds	r3, r2, r3
    8fb8:	2201      	movs	r2, #1
    8fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    8fbc:	1cbb      	adds	r3, r7, #2
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	2b01      	cmp	r3, #1
    8fc2:	d12f      	bne.n	9024 <usb_device_endpoint_disable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    8fc4:	1c3b      	adds	r3, r7, #0
    8fc6:	330f      	adds	r3, #15
    8fc8:	781b      	ldrb	r3, [r3, #0]
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d10c      	bne.n	8fe8 <usb_device_endpoint_disable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    8fce:	687b      	ldr	r3, [r7, #4]
    8fd0:	6819      	ldr	r1, [r3, #0]
    8fd2:	1c3b      	adds	r3, r7, #0
    8fd4:	330f      	adds	r3, #15
    8fd6:	781a      	ldrb	r2, [r3, #0]
    8fd8:	2384      	movs	r3, #132	; 0x84
    8fda:	005b      	lsls	r3, r3, #1
    8fdc:	0152      	lsls	r2, r2, #5
    8fde:	188a      	adds	r2, r1, r2
    8fe0:	18d3      	adds	r3, r2, r3
    8fe2:	220c      	movs	r2, #12
    8fe4:	701a      	strb	r2, [r3, #0]
    8fe6:	e01d      	b.n	9024 <usb_device_endpoint_disable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    8fe8:	1cfb      	adds	r3, r7, #3
    8fea:	781b      	ldrb	r3, [r3, #0]
    8fec:	b25b      	sxtb	r3, r3
    8fee:	2b00      	cmp	r3, #0
    8ff0:	da0c      	bge.n	900c <usb_device_endpoint_disable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	6819      	ldr	r1, [r3, #0]
    8ff6:	1c3b      	adds	r3, r7, #0
    8ff8:	330f      	adds	r3, #15
    8ffa:	781a      	ldrb	r2, [r3, #0]
    8ffc:	2384      	movs	r3, #132	; 0x84
    8ffe:	005b      	lsls	r3, r3, #1
    9000:	0152      	lsls	r2, r2, #5
    9002:	188a      	adds	r2, r1, r2
    9004:	18d3      	adds	r3, r2, r3
    9006:	2208      	movs	r2, #8
    9008:	701a      	strb	r2, [r3, #0]
    900a:	e00b      	b.n	9024 <usb_device_endpoint_disable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	6819      	ldr	r1, [r3, #0]
    9010:	1c3b      	adds	r3, r7, #0
    9012:	330f      	adds	r3, #15
    9014:	781a      	ldrb	r2, [r3, #0]
    9016:	2384      	movs	r3, #132	; 0x84
    9018:	005b      	lsls	r3, r3, #1
    901a:	0152      	lsls	r2, r2, #5
    901c:	188a      	adds	r2, r1, r2
    901e:	18d3      	adds	r3, r2, r3
    9020:	2204      	movs	r2, #4
    9022:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    9024:	1cbb      	adds	r3, r7, #2
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	2b02      	cmp	r3, #2
    902a:	d10b      	bne.n	9044 <usb_device_endpoint_disable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	6819      	ldr	r1, [r3, #0]
    9030:	1c3b      	adds	r3, r7, #0
    9032:	330f      	adds	r3, #15
    9034:	781a      	ldrb	r2, [r3, #0]
    9036:	2384      	movs	r3, #132	; 0x84
    9038:	005b      	lsls	r3, r3, #1
    903a:	0152      	lsls	r2, r2, #5
    903c:	188a      	adds	r2, r1, r2
    903e:	18d3      	adds	r3, r2, r3
    9040:	2210      	movs	r2, #16
    9042:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    9044:	1cbb      	adds	r3, r7, #2
    9046:	781b      	ldrb	r3, [r3, #0]
    9048:	2b03      	cmp	r3, #3
    904a:	d11d      	bne.n	9088 <usb_device_endpoint_disable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    904c:	1cfb      	adds	r3, r7, #3
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	b25b      	sxtb	r3, r3
    9052:	2b00      	cmp	r3, #0
    9054:	da0c      	bge.n	9070 <usb_device_endpoint_disable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	6819      	ldr	r1, [r3, #0]
    905a:	1c3b      	adds	r3, r7, #0
    905c:	330f      	adds	r3, #15
    905e:	781a      	ldrb	r2, [r3, #0]
    9060:	2384      	movs	r3, #132	; 0x84
    9062:	005b      	lsls	r3, r3, #1
    9064:	0152      	lsls	r2, r2, #5
    9066:	188a      	adds	r2, r1, r2
    9068:	18d3      	adds	r3, r2, r3
    906a:	2240      	movs	r2, #64	; 0x40
    906c:	701a      	strb	r2, [r3, #0]
    906e:	e00b      	b.n	9088 <usb_device_endpoint_disable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	6819      	ldr	r1, [r3, #0]
    9074:	1c3b      	adds	r3, r7, #0
    9076:	330f      	adds	r3, #15
    9078:	781a      	ldrb	r2, [r3, #0]
    907a:	2384      	movs	r3, #132	; 0x84
    907c:	005b      	lsls	r3, r3, #1
    907e:	0152      	lsls	r2, r2, #5
    9080:	188a      	adds	r2, r1, r2
    9082:	18d3      	adds	r3, r2, r3
    9084:	2220      	movs	r2, #32
    9086:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    9088:	2300      	movs	r3, #0
}
    908a:	1c18      	adds	r0, r3, #0
    908c:	46bd      	mov	sp, r7
    908e:	b004      	add	sp, #16
    9090:	bd80      	pop	{r7, pc}
    9092:	46c0      	nop			; (mov r8, r8)
    9094:	0000b350 	.word	0x0000b350

00009098 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    9098:	b580      	push	{r7, lr}
    909a:	b082      	sub	sp, #8
    909c:	af00      	add	r7, sp, #0
    909e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    90a0:	687b      	ldr	r3, [r7, #4]
    90a2:	2200      	movs	r2, #0
    90a4:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	2200      	movs	r2, #0
    90aa:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	2200      	movs	r2, #0
    90b0:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	2201      	movs	r2, #1
    90b6:	70da      	strb	r2, [r3, #3]
}
    90b8:	46bd      	mov	sp, r7
    90ba:	b002      	add	sp, #8
    90bc:	bd80      	pop	{r7, pc}
    90be:	46c0      	nop			; (mov r8, r8)

000090c0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    90c0:	b590      	push	{r4, r7, lr}
    90c2:	b085      	sub	sp, #20
    90c4:	af00      	add	r7, sp, #0
    90c6:	6078      	str	r0, [r7, #4]
    90c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    90ca:	683b      	ldr	r3, [r7, #0]
    90cc:	7819      	ldrb	r1, [r3, #0]
    90ce:	1c3b      	adds	r3, r7, #0
    90d0:	330f      	adds	r3, #15
    90d2:	220f      	movs	r2, #15
    90d4:	400a      	ands	r2, r1
    90d6:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    90d8:	683b      	ldr	r3, [r7, #0]
    90da:	781b      	ldrb	r3, [r3, #0]
    90dc:	b2db      	uxtb	r3, r3
    90de:	09db      	lsrs	r3, r3, #7
    90e0:	b2da      	uxtb	r2, r3
    90e2:	1c3b      	adds	r3, r7, #0
    90e4:	330e      	adds	r3, #14
    90e6:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    90e8:	683b      	ldr	r3, [r7, #0]
    90ea:	78db      	ldrb	r3, [r3, #3]
    90ec:	2b04      	cmp	r3, #4
    90ee:	d900      	bls.n	90f2 <usb_device_endpoint_set_config+0x32>
    90f0:	e1f2      	b.n	94d8 <usb_device_endpoint_set_config+0x418>
    90f2:	009a      	lsls	r2, r3, #2
    90f4:	4bdd      	ldr	r3, [pc, #884]	; (946c <usb_device_endpoint_set_config+0x3ac>)
    90f6:	18d3      	adds	r3, r2, r3
    90f8:	681b      	ldr	r3, [r3, #0]
    90fa:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	681b      	ldr	r3, [r3, #0]
    9100:	1c3a      	adds	r2, r7, #0
    9102:	320f      	adds	r2, #15
    9104:	7812      	ldrb	r2, [r2, #0]
    9106:	3208      	adds	r2, #8
    9108:	0152      	lsls	r2, r2, #5
    910a:	2100      	movs	r1, #0
    910c:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    910e:	2300      	movs	r3, #0
    9110:	e237      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	681b      	ldr	r3, [r3, #0]
    9116:	1c3a      	adds	r2, r7, #0
    9118:	320f      	adds	r2, #15
    911a:	7812      	ldrb	r2, [r2, #0]
    911c:	3208      	adds	r2, #8
    911e:	0152      	lsls	r2, r2, #5
    9120:	5cd3      	ldrb	r3, [r2, r3]
    9122:	b2db      	uxtb	r3, r3
    9124:	1c1a      	adds	r2, r3, #0
    9126:	2307      	movs	r3, #7
    9128:	4013      	ands	r3, r2
    912a:	d12e      	bne.n	918a <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    912c:	687b      	ldr	r3, [r7, #4]
    912e:	681b      	ldr	r3, [r3, #0]
    9130:	1c3a      	adds	r2, r7, #0
    9132:	320f      	adds	r2, #15
    9134:	7812      	ldrb	r2, [r2, #0]
    9136:	3208      	adds	r2, #8
    9138:	0152      	lsls	r2, r2, #5
    913a:	5cd3      	ldrb	r3, [r2, r3]
    913c:	b2db      	uxtb	r3, r3
    913e:	1c1a      	adds	r2, r3, #0
    9140:	2370      	movs	r3, #112	; 0x70
    9142:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    9144:	d121      	bne.n	918a <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    9146:	687b      	ldr	r3, [r7, #4]
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	1c3a      	adds	r2, r7, #0
    914c:	320f      	adds	r2, #15
    914e:	7812      	ldrb	r2, [r2, #0]
    9150:	3208      	adds	r2, #8
    9152:	0152      	lsls	r2, r2, #5
    9154:	2111      	movs	r1, #17
    9156:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	681a      	ldr	r2, [r3, #0]
    915c:	1c3b      	adds	r3, r7, #0
    915e:	330f      	adds	r3, #15
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	3308      	adds	r3, #8
    9164:	015b      	lsls	r3, r3, #5
    9166:	18d3      	adds	r3, r2, r3
    9168:	2240      	movs	r2, #64	; 0x40
    916a:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	681a      	ldr	r2, [r3, #0]
    9170:	1c3b      	adds	r3, r7, #0
    9172:	330f      	adds	r3, #15
    9174:	781b      	ldrb	r3, [r3, #0]
    9176:	3308      	adds	r3, #8
    9178:	015b      	lsls	r3, r3, #5
    917a:	18d3      	adds	r3, r2, r3
    917c:	2280      	movs	r2, #128	; 0x80
    917e:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    9180:	683b      	ldr	r3, [r7, #0]
    9182:	789b      	ldrb	r3, [r3, #2]
    9184:	2b00      	cmp	r3, #0
    9186:	d102      	bne.n	918e <usb_device_endpoint_set_config+0xce>
    9188:	e026      	b.n	91d8 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    918a:	231c      	movs	r3, #28
    918c:	e1f9      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    918e:	1c3b      	adds	r3, r7, #0
    9190:	330f      	adds	r3, #15
    9192:	7818      	ldrb	r0, [r3, #0]
    9194:	1c3b      	adds	r3, r7, #0
    9196:	330f      	adds	r3, #15
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	4ab5      	ldr	r2, [pc, #724]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    919c:	015b      	lsls	r3, r3, #5
    919e:	18d3      	adds	r3, r2, r3
    91a0:	685b      	ldr	r3, [r3, #4]
    91a2:	2280      	movs	r2, #128	; 0x80
    91a4:	0612      	lsls	r2, r2, #24
    91a6:	431a      	orrs	r2, r3
    91a8:	49b1      	ldr	r1, [pc, #708]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    91aa:	0143      	lsls	r3, r0, #5
    91ac:	18cb      	adds	r3, r1, r3
    91ae:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    91b0:	1c3b      	adds	r3, r7, #0
    91b2:	330f      	adds	r3, #15
    91b4:	7818      	ldrb	r0, [r3, #0]
    91b6:	1c3b      	adds	r3, r7, #0
    91b8:	330f      	adds	r3, #15
    91ba:	781b      	ldrb	r3, [r3, #0]
    91bc:	4aac      	ldr	r2, [pc, #688]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    91be:	015b      	lsls	r3, r3, #5
    91c0:	18d3      	adds	r3, r2, r3
    91c2:	3310      	adds	r3, #16
    91c4:	685b      	ldr	r3, [r3, #4]
    91c6:	2280      	movs	r2, #128	; 0x80
    91c8:	0612      	lsls	r2, r2, #24
    91ca:	431a      	orrs	r2, r3
    91cc:	49a8      	ldr	r1, [pc, #672]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    91ce:	0143      	lsls	r3, r0, #5
    91d0:	18cb      	adds	r3, r1, r3
    91d2:	3310      	adds	r3, #16
    91d4:	605a      	str	r2, [r3, #4]
    91d6:	e021      	b.n	921c <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    91d8:	1c3b      	adds	r3, r7, #0
    91da:	330f      	adds	r3, #15
    91dc:	7818      	ldrb	r0, [r3, #0]
    91de:	1c3b      	adds	r3, r7, #0
    91e0:	330f      	adds	r3, #15
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	4aa2      	ldr	r2, [pc, #648]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    91e6:	015b      	lsls	r3, r3, #5
    91e8:	18d3      	adds	r3, r2, r3
    91ea:	685b      	ldr	r3, [r3, #4]
    91ec:	005b      	lsls	r3, r3, #1
    91ee:	085a      	lsrs	r2, r3, #1
    91f0:	499f      	ldr	r1, [pc, #636]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    91f2:	0143      	lsls	r3, r0, #5
    91f4:	18cb      	adds	r3, r1, r3
    91f6:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    91f8:	1c3b      	adds	r3, r7, #0
    91fa:	330f      	adds	r3, #15
    91fc:	7818      	ldrb	r0, [r3, #0]
    91fe:	1c3b      	adds	r3, r7, #0
    9200:	330f      	adds	r3, #15
    9202:	781b      	ldrb	r3, [r3, #0]
    9204:	4a9a      	ldr	r2, [pc, #616]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    9206:	015b      	lsls	r3, r3, #5
    9208:	18d3      	adds	r3, r2, r3
    920a:	3310      	adds	r3, #16
    920c:	685b      	ldr	r3, [r3, #4]
    920e:	005b      	lsls	r3, r3, #1
    9210:	085a      	lsrs	r2, r3, #1
    9212:	4997      	ldr	r1, [pc, #604]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    9214:	0143      	lsls	r3, r0, #5
    9216:	18cb      	adds	r3, r1, r3
    9218:	3310      	adds	r3, #16
    921a:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    921c:	1c3b      	adds	r3, r7, #0
    921e:	330f      	adds	r3, #15
    9220:	781b      	ldrb	r3, [r3, #0]
    9222:	683a      	ldr	r2, [r7, #0]
    9224:	7852      	ldrb	r2, [r2, #1]
    9226:	1c11      	adds	r1, r2, #0
    9228:	2207      	movs	r2, #7
    922a:	400a      	ands	r2, r1
    922c:	b2d1      	uxtb	r1, r2
    922e:	4a90      	ldr	r2, [pc, #576]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    9230:	015b      	lsls	r3, r3, #5
    9232:	18d3      	adds	r3, r2, r3
    9234:	2207      	movs	r2, #7
    9236:	400a      	ands	r2, r1
    9238:	0712      	lsls	r2, r2, #28
    923a:	6858      	ldr	r0, [r3, #4]
    923c:	498d      	ldr	r1, [pc, #564]	; (9474 <usb_device_endpoint_set_config+0x3b4>)
    923e:	4001      	ands	r1, r0
    9240:	430a      	orrs	r2, r1
    9242:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    9244:	1c3b      	adds	r3, r7, #0
    9246:	330f      	adds	r3, #15
    9248:	781b      	ldrb	r3, [r3, #0]
    924a:	683a      	ldr	r2, [r7, #0]
    924c:	7852      	ldrb	r2, [r2, #1]
    924e:	1c11      	adds	r1, r2, #0
    9250:	2207      	movs	r2, #7
    9252:	400a      	ands	r2, r1
    9254:	b2d1      	uxtb	r1, r2
    9256:	4a86      	ldr	r2, [pc, #536]	; (9470 <usb_device_endpoint_set_config+0x3b0>)
    9258:	015b      	lsls	r3, r3, #5
    925a:	18d3      	adds	r3, r2, r3
    925c:	3310      	adds	r3, #16
    925e:	2207      	movs	r2, #7
    9260:	400a      	ands	r2, r1
    9262:	0712      	lsls	r2, r2, #28
    9264:	6858      	ldr	r0, [r3, #4]
    9266:	4983      	ldr	r1, [pc, #524]	; (9474 <usb_device_endpoint_set_config+0x3b4>)
    9268:	4001      	ands	r1, r0
    926a:	430a      	orrs	r2, r1
    926c:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    926e:	2300      	movs	r3, #0
    9270:	e187      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    9272:	1c3b      	adds	r3, r7, #0
    9274:	330e      	adds	r3, #14
    9276:	781b      	ldrb	r3, [r3, #0]
    9278:	2b00      	cmp	r3, #0
    927a:	d02e      	beq.n	92da <usb_device_endpoint_set_config+0x21a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	681b      	ldr	r3, [r3, #0]
    9280:	1c3a      	adds	r2, r7, #0
    9282:	320f      	adds	r2, #15
    9284:	7812      	ldrb	r2, [r2, #0]
    9286:	3208      	adds	r2, #8
    9288:	0152      	lsls	r2, r2, #5
    928a:	5cd3      	ldrb	r3, [r2, r3]
    928c:	b2db      	uxtb	r3, r3
    928e:	1c1a      	adds	r2, r3, #0
    9290:	2370      	movs	r3, #112	; 0x70
    9292:	4013      	ands	r3, r2
    9294:	d11f      	bne.n	92d6 <usb_device_endpoint_set_config+0x216>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    9296:	687b      	ldr	r3, [r7, #4]
    9298:	681a      	ldr	r2, [r3, #0]
    929a:	1c3b      	adds	r3, r7, #0
    929c:	330f      	adds	r3, #15
    929e:	7818      	ldrb	r0, [r3, #0]
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	681b      	ldr	r3, [r3, #0]
    92a4:	1c39      	adds	r1, r7, #0
    92a6:	310f      	adds	r1, #15
    92a8:	7809      	ldrb	r1, [r1, #0]
    92aa:	3108      	adds	r1, #8
    92ac:	0149      	lsls	r1, r1, #5
    92ae:	5ccb      	ldrb	r3, [r1, r3]
    92b0:	b2db      	uxtb	r3, r3
    92b2:	2120      	movs	r1, #32
    92b4:	430b      	orrs	r3, r1
    92b6:	b2d9      	uxtb	r1, r3
    92b8:	1c03      	adds	r3, r0, #0
    92ba:	3308      	adds	r3, #8
    92bc:	015b      	lsls	r3, r3, #5
    92be:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    92c0:	687b      	ldr	r3, [r7, #4]
    92c2:	681a      	ldr	r2, [r3, #0]
    92c4:	1c3b      	adds	r3, r7, #0
    92c6:	330f      	adds	r3, #15
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	3308      	adds	r3, #8
    92cc:	015b      	lsls	r3, r3, #5
    92ce:	18d3      	adds	r3, r2, r3
    92d0:	2280      	movs	r2, #128	; 0x80
    92d2:	711a      	strb	r2, [r3, #4]
    92d4:	e030      	b.n	9338 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    92d6:	231c      	movs	r3, #28
    92d8:	e153      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	681b      	ldr	r3, [r3, #0]
    92de:	1c3a      	adds	r2, r7, #0
    92e0:	320f      	adds	r2, #15
    92e2:	7812      	ldrb	r2, [r2, #0]
    92e4:	3208      	adds	r2, #8
    92e6:	0152      	lsls	r2, r2, #5
    92e8:	5cd3      	ldrb	r3, [r2, r3]
    92ea:	b2db      	uxtb	r3, r3
    92ec:	1c1a      	adds	r2, r3, #0
    92ee:	2307      	movs	r3, #7
    92f0:	4013      	ands	r3, r2
    92f2:	d11f      	bne.n	9334 <usb_device_endpoint_set_config+0x274>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	681a      	ldr	r2, [r3, #0]
    92f8:	1c3b      	adds	r3, r7, #0
    92fa:	330f      	adds	r3, #15
    92fc:	7818      	ldrb	r0, [r3, #0]
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	1c39      	adds	r1, r7, #0
    9304:	310f      	adds	r1, #15
    9306:	7809      	ldrb	r1, [r1, #0]
    9308:	3108      	adds	r1, #8
    930a:	0149      	lsls	r1, r1, #5
    930c:	5ccb      	ldrb	r3, [r1, r3]
    930e:	b2db      	uxtb	r3, r3
    9310:	2102      	movs	r1, #2
    9312:	430b      	orrs	r3, r1
    9314:	b2d9      	uxtb	r1, r3
    9316:	1c03      	adds	r3, r0, #0
    9318:	3308      	adds	r3, #8
    931a:	015b      	lsls	r3, r3, #5
    931c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	681a      	ldr	r2, [r3, #0]
    9322:	1c3b      	adds	r3, r7, #0
    9324:	330f      	adds	r3, #15
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	3308      	adds	r3, #8
    932a:	015b      	lsls	r3, r3, #5
    932c:	18d3      	adds	r3, r2, r3
    932e:	2240      	movs	r2, #64	; 0x40
    9330:	715a      	strb	r2, [r3, #5]
    9332:	e001      	b.n	9338 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    9334:	231c      	movs	r3, #28
    9336:	e124      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9338:	e0cf      	b.n	94da <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    933a:	1c3b      	adds	r3, r7, #0
    933c:	330e      	adds	r3, #14
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	2b00      	cmp	r3, #0
    9342:	d02e      	beq.n	93a2 <usb_device_endpoint_set_config+0x2e2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	681b      	ldr	r3, [r3, #0]
    9348:	1c3a      	adds	r2, r7, #0
    934a:	320f      	adds	r2, #15
    934c:	7812      	ldrb	r2, [r2, #0]
    934e:	3208      	adds	r2, #8
    9350:	0152      	lsls	r2, r2, #5
    9352:	5cd3      	ldrb	r3, [r2, r3]
    9354:	b2db      	uxtb	r3, r3
    9356:	1c1a      	adds	r2, r3, #0
    9358:	2370      	movs	r3, #112	; 0x70
    935a:	4013      	ands	r3, r2
    935c:	d11f      	bne.n	939e <usb_device_endpoint_set_config+0x2de>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	681a      	ldr	r2, [r3, #0]
    9362:	1c3b      	adds	r3, r7, #0
    9364:	330f      	adds	r3, #15
    9366:	7818      	ldrb	r0, [r3, #0]
    9368:	687b      	ldr	r3, [r7, #4]
    936a:	681b      	ldr	r3, [r3, #0]
    936c:	1c39      	adds	r1, r7, #0
    936e:	310f      	adds	r1, #15
    9370:	7809      	ldrb	r1, [r1, #0]
    9372:	3108      	adds	r1, #8
    9374:	0149      	lsls	r1, r1, #5
    9376:	5ccb      	ldrb	r3, [r1, r3]
    9378:	b2db      	uxtb	r3, r3
    937a:	2130      	movs	r1, #48	; 0x30
    937c:	430b      	orrs	r3, r1
    937e:	b2d9      	uxtb	r1, r3
    9380:	1c03      	adds	r3, r0, #0
    9382:	3308      	adds	r3, #8
    9384:	015b      	lsls	r3, r3, #5
    9386:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	681a      	ldr	r2, [r3, #0]
    938c:	1c3b      	adds	r3, r7, #0
    938e:	330f      	adds	r3, #15
    9390:	781b      	ldrb	r3, [r3, #0]
    9392:	3308      	adds	r3, #8
    9394:	015b      	lsls	r3, r3, #5
    9396:	18d3      	adds	r3, r2, r3
    9398:	2280      	movs	r2, #128	; 0x80
    939a:	711a      	strb	r2, [r3, #4]
    939c:	e030      	b.n	9400 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    939e:	231c      	movs	r3, #28
    93a0:	e0ef      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	681b      	ldr	r3, [r3, #0]
    93a6:	1c3a      	adds	r2, r7, #0
    93a8:	320f      	adds	r2, #15
    93aa:	7812      	ldrb	r2, [r2, #0]
    93ac:	3208      	adds	r2, #8
    93ae:	0152      	lsls	r2, r2, #5
    93b0:	5cd3      	ldrb	r3, [r2, r3]
    93b2:	b2db      	uxtb	r3, r3
    93b4:	1c1a      	adds	r2, r3, #0
    93b6:	2307      	movs	r3, #7
    93b8:	4013      	ands	r3, r2
    93ba:	d11f      	bne.n	93fc <usb_device_endpoint_set_config+0x33c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	681a      	ldr	r2, [r3, #0]
    93c0:	1c3b      	adds	r3, r7, #0
    93c2:	330f      	adds	r3, #15
    93c4:	7818      	ldrb	r0, [r3, #0]
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	681b      	ldr	r3, [r3, #0]
    93ca:	1c39      	adds	r1, r7, #0
    93cc:	310f      	adds	r1, #15
    93ce:	7809      	ldrb	r1, [r1, #0]
    93d0:	3108      	adds	r1, #8
    93d2:	0149      	lsls	r1, r1, #5
    93d4:	5ccb      	ldrb	r3, [r1, r3]
    93d6:	b2db      	uxtb	r3, r3
    93d8:	2103      	movs	r1, #3
    93da:	430b      	orrs	r3, r1
    93dc:	b2d9      	uxtb	r1, r3
    93de:	1c03      	adds	r3, r0, #0
    93e0:	3308      	adds	r3, #8
    93e2:	015b      	lsls	r3, r3, #5
    93e4:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    93e6:	687b      	ldr	r3, [r7, #4]
    93e8:	681a      	ldr	r2, [r3, #0]
    93ea:	1c3b      	adds	r3, r7, #0
    93ec:	330f      	adds	r3, #15
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	3308      	adds	r3, #8
    93f2:	015b      	lsls	r3, r3, #5
    93f4:	18d3      	adds	r3, r2, r3
    93f6:	2240      	movs	r2, #64	; 0x40
    93f8:	715a      	strb	r2, [r3, #5]
    93fa:	e001      	b.n	9400 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    93fc:	231c      	movs	r3, #28
    93fe:	e0c0      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    9400:	e06b      	b.n	94da <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    9402:	1c3b      	adds	r3, r7, #0
    9404:	330e      	adds	r3, #14
    9406:	781b      	ldrb	r3, [r3, #0]
    9408:	2b00      	cmp	r3, #0
    940a:	d035      	beq.n	9478 <usb_device_endpoint_set_config+0x3b8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	681b      	ldr	r3, [r3, #0]
    9410:	1c3a      	adds	r2, r7, #0
    9412:	320f      	adds	r2, #15
    9414:	7812      	ldrb	r2, [r2, #0]
    9416:	3208      	adds	r2, #8
    9418:	0152      	lsls	r2, r2, #5
    941a:	5cd3      	ldrb	r3, [r2, r3]
    941c:	b2db      	uxtb	r3, r3
    941e:	1c1a      	adds	r2, r3, #0
    9420:	2370      	movs	r3, #112	; 0x70
    9422:	4013      	ands	r3, r2
    9424:	d11f      	bne.n	9466 <usb_device_endpoint_set_config+0x3a6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    9426:	687b      	ldr	r3, [r7, #4]
    9428:	681a      	ldr	r2, [r3, #0]
    942a:	1c3b      	adds	r3, r7, #0
    942c:	330f      	adds	r3, #15
    942e:	7818      	ldrb	r0, [r3, #0]
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	681b      	ldr	r3, [r3, #0]
    9434:	1c39      	adds	r1, r7, #0
    9436:	310f      	adds	r1, #15
    9438:	7809      	ldrb	r1, [r1, #0]
    943a:	3108      	adds	r1, #8
    943c:	0149      	lsls	r1, r1, #5
    943e:	5ccb      	ldrb	r3, [r1, r3]
    9440:	b2db      	uxtb	r3, r3
    9442:	2140      	movs	r1, #64	; 0x40
    9444:	430b      	orrs	r3, r1
    9446:	b2d9      	uxtb	r1, r3
    9448:	1c03      	adds	r3, r0, #0
    944a:	3308      	adds	r3, #8
    944c:	015b      	lsls	r3, r3, #5
    944e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	681a      	ldr	r2, [r3, #0]
    9454:	1c3b      	adds	r3, r7, #0
    9456:	330f      	adds	r3, #15
    9458:	781b      	ldrb	r3, [r3, #0]
    945a:	3308      	adds	r3, #8
    945c:	015b      	lsls	r3, r3, #5
    945e:	18d3      	adds	r3, r2, r3
    9460:	2280      	movs	r2, #128	; 0x80
    9462:	711a      	strb	r2, [r3, #4]
    9464:	e037      	b.n	94d6 <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    9466:	231c      	movs	r3, #28
    9468:	e08b      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	0000b354 	.word	0x0000b354
    9470:	2000701c 	.word	0x2000701c
    9474:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	681b      	ldr	r3, [r3, #0]
    947c:	1c3a      	adds	r2, r7, #0
    947e:	320f      	adds	r2, #15
    9480:	7812      	ldrb	r2, [r2, #0]
    9482:	3208      	adds	r2, #8
    9484:	0152      	lsls	r2, r2, #5
    9486:	5cd3      	ldrb	r3, [r2, r3]
    9488:	b2db      	uxtb	r3, r3
    948a:	1c1a      	adds	r2, r3, #0
    948c:	2307      	movs	r3, #7
    948e:	4013      	ands	r3, r2
    9490:	d11f      	bne.n	94d2 <usb_device_endpoint_set_config+0x412>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    9492:	687b      	ldr	r3, [r7, #4]
    9494:	681a      	ldr	r2, [r3, #0]
    9496:	1c3b      	adds	r3, r7, #0
    9498:	330f      	adds	r3, #15
    949a:	7818      	ldrb	r0, [r3, #0]
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	681b      	ldr	r3, [r3, #0]
    94a0:	1c39      	adds	r1, r7, #0
    94a2:	310f      	adds	r1, #15
    94a4:	7809      	ldrb	r1, [r1, #0]
    94a6:	3108      	adds	r1, #8
    94a8:	0149      	lsls	r1, r1, #5
    94aa:	5ccb      	ldrb	r3, [r1, r3]
    94ac:	b2db      	uxtb	r3, r3
    94ae:	2104      	movs	r1, #4
    94b0:	430b      	orrs	r3, r1
    94b2:	b2d9      	uxtb	r1, r3
    94b4:	1c03      	adds	r3, r0, #0
    94b6:	3308      	adds	r3, #8
    94b8:	015b      	lsls	r3, r3, #5
    94ba:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	681a      	ldr	r2, [r3, #0]
    94c0:	1c3b      	adds	r3, r7, #0
    94c2:	330f      	adds	r3, #15
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	3308      	adds	r3, #8
    94c8:	015b      	lsls	r3, r3, #5
    94ca:	18d3      	adds	r3, r2, r3
    94cc:	2240      	movs	r2, #64	; 0x40
    94ce:	715a      	strb	r2, [r3, #5]
    94d0:	e001      	b.n	94d6 <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    94d2:	231c      	movs	r3, #28
    94d4:	e055      	b.n	9582 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    94d6:	e000      	b.n	94da <usb_device_endpoint_set_config+0x41a>

		default:
			break;
    94d8:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    94da:	1c3b      	adds	r3, r7, #0
    94dc:	330f      	adds	r3, #15
    94de:	7818      	ldrb	r0, [r3, #0]
    94e0:	1c3b      	adds	r3, r7, #0
    94e2:	330e      	adds	r3, #14
    94e4:	781b      	ldrb	r3, [r3, #0]
    94e6:	683a      	ldr	r2, [r7, #0]
    94e8:	7852      	ldrb	r2, [r2, #1]
    94ea:	1c11      	adds	r1, r2, #0
    94ec:	2207      	movs	r2, #7
    94ee:	400a      	ands	r2, r1
    94f0:	b2d1      	uxtb	r1, r2
    94f2:	4a26      	ldr	r2, [pc, #152]	; (958c <usb_device_endpoint_set_config+0x4cc>)
    94f4:	0040      	lsls	r0, r0, #1
    94f6:	18c3      	adds	r3, r0, r3
    94f8:	011b      	lsls	r3, r3, #4
    94fa:	18d3      	adds	r3, r2, r3
    94fc:	2207      	movs	r2, #7
    94fe:	400a      	ands	r2, r1
    9500:	0712      	lsls	r2, r2, #28
    9502:	6858      	ldr	r0, [r3, #4]
    9504:	4922      	ldr	r1, [pc, #136]	; (9590 <usb_device_endpoint_set_config+0x4d0>)
    9506:	4001      	ands	r1, r0
    9508:	430a      	orrs	r2, r1
    950a:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    950c:	683b      	ldr	r3, [r7, #0]
    950e:	789b      	ldrb	r3, [r3, #2]
    9510:	2b00      	cmp	r3, #0
    9512:	d01b      	beq.n	954c <usb_device_endpoint_set_config+0x48c>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    9514:	1c3b      	adds	r3, r7, #0
    9516:	330f      	adds	r3, #15
    9518:	781c      	ldrb	r4, [r3, #0]
    951a:	1c3b      	adds	r3, r7, #0
    951c:	330e      	adds	r3, #14
    951e:	7818      	ldrb	r0, [r3, #0]
    9520:	1c3b      	adds	r3, r7, #0
    9522:	330f      	adds	r3, #15
    9524:	7819      	ldrb	r1, [r3, #0]
    9526:	1c3b      	adds	r3, r7, #0
    9528:	330e      	adds	r3, #14
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	4a17      	ldr	r2, [pc, #92]	; (958c <usb_device_endpoint_set_config+0x4cc>)
    952e:	0049      	lsls	r1, r1, #1
    9530:	18cb      	adds	r3, r1, r3
    9532:	011b      	lsls	r3, r3, #4
    9534:	18d3      	adds	r3, r2, r3
    9536:	685b      	ldr	r3, [r3, #4]
    9538:	2280      	movs	r2, #128	; 0x80
    953a:	0612      	lsls	r2, r2, #24
    953c:	431a      	orrs	r2, r3
    953e:	4913      	ldr	r1, [pc, #76]	; (958c <usb_device_endpoint_set_config+0x4cc>)
    9540:	0063      	lsls	r3, r4, #1
    9542:	181b      	adds	r3, r3, r0
    9544:	011b      	lsls	r3, r3, #4
    9546:	18cb      	adds	r3, r1, r3
    9548:	605a      	str	r2, [r3, #4]
    954a:	e019      	b.n	9580 <usb_device_endpoint_set_config+0x4c0>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    954c:	1c3b      	adds	r3, r7, #0
    954e:	330f      	adds	r3, #15
    9550:	781c      	ldrb	r4, [r3, #0]
    9552:	1c3b      	adds	r3, r7, #0
    9554:	330e      	adds	r3, #14
    9556:	7818      	ldrb	r0, [r3, #0]
    9558:	1c3b      	adds	r3, r7, #0
    955a:	330f      	adds	r3, #15
    955c:	7819      	ldrb	r1, [r3, #0]
    955e:	1c3b      	adds	r3, r7, #0
    9560:	330e      	adds	r3, #14
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	4a09      	ldr	r2, [pc, #36]	; (958c <usb_device_endpoint_set_config+0x4cc>)
    9566:	0049      	lsls	r1, r1, #1
    9568:	18cb      	adds	r3, r1, r3
    956a:	011b      	lsls	r3, r3, #4
    956c:	18d3      	adds	r3, r2, r3
    956e:	685b      	ldr	r3, [r3, #4]
    9570:	005b      	lsls	r3, r3, #1
    9572:	085a      	lsrs	r2, r3, #1
    9574:	4905      	ldr	r1, [pc, #20]	; (958c <usb_device_endpoint_set_config+0x4cc>)
    9576:	0063      	lsls	r3, r4, #1
    9578:	181b      	adds	r3, r3, r0
    957a:	011b      	lsls	r3, r3, #4
    957c:	18cb      	adds	r3, r1, r3
    957e:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    9580:	2300      	movs	r3, #0
}
    9582:	1c18      	adds	r0, r3, #0
    9584:	46bd      	mov	sp, r7
    9586:	b005      	add	sp, #20
    9588:	bd90      	pop	{r4, r7, pc}
    958a:	46c0      	nop			; (mov r8, r8)
    958c:	2000701c 	.word	0x2000701c
    9590:	8fffffff 	.word	0x8fffffff

00009594 <usb_device_endpoint_is_configured>:
 * \param ep            Endpoint address (direction & number)
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
    9594:	b580      	push	{r7, lr}
    9596:	b084      	sub	sp, #16
    9598:	af00      	add	r7, sp, #0
    959a:	6078      	str	r0, [r7, #4]
    959c:	1c0a      	adds	r2, r1, #0
    959e:	1cfb      	adds	r3, r7, #3
    95a0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    95a2:	1c3b      	adds	r3, r7, #0
    95a4:	330e      	adds	r3, #14
    95a6:	1cfa      	adds	r2, r7, #3
    95a8:	7811      	ldrb	r1, [r2, #0]
    95aa:	220f      	movs	r2, #15
    95ac:	400a      	ands	r2, r1
    95ae:	701a      	strb	r2, [r3, #0]
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    95b0:	1cfb      	adds	r3, r7, #3
    95b2:	781b      	ldrb	r3, [r3, #0]
    95b4:	b25b      	sxtb	r3, r3
    95b6:	2b00      	cmp	r3, #0
    95b8:	da11      	bge.n	95de <usb_device_endpoint_is_configured+0x4a>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	681b      	ldr	r3, [r3, #0]
    95be:	1c3a      	adds	r2, r7, #0
    95c0:	320e      	adds	r2, #14
    95c2:	7812      	ldrb	r2, [r2, #0]
    95c4:	3208      	adds	r2, #8
    95c6:	0152      	lsls	r2, r2, #5
    95c8:	5cd3      	ldrb	r3, [r2, r3]
    95ca:	b2db      	uxtb	r3, r3
    95cc:	091b      	lsrs	r3, r3, #4
    95ce:	1c1a      	adds	r2, r3, #0
    95d0:	2307      	movs	r3, #7
    95d2:	4013      	ands	r3, r2
    95d4:	b2da      	uxtb	r2, r3
    95d6:	1c3b      	adds	r3, r7, #0
    95d8:	330f      	adds	r3, #15
    95da:	701a      	strb	r2, [r3, #0]
    95dc:	e00d      	b.n	95fa <usb_device_endpoint_is_configured+0x66>
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    95de:	687b      	ldr	r3, [r7, #4]
    95e0:	681b      	ldr	r3, [r3, #0]
    95e2:	1c3a      	adds	r2, r7, #0
    95e4:	320e      	adds	r2, #14
    95e6:	7812      	ldrb	r2, [r2, #0]
    95e8:	3208      	adds	r2, #8
    95ea:	0152      	lsls	r2, r2, #5
    95ec:	5cd2      	ldrb	r2, [r2, r3]
    95ee:	2307      	movs	r3, #7
    95f0:	4013      	ands	r3, r2
    95f2:	b2da      	uxtb	r2, r3
    95f4:	1c3b      	adds	r3, r7, #0
    95f6:	330f      	adds	r3, #15
    95f8:	701a      	strb	r2, [r3, #0]
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    95fa:	1c3b      	adds	r3, r7, #0
    95fc:	330f      	adds	r3, #15
    95fe:	781b      	ldrb	r3, [r3, #0]
    9600:	1e5a      	subs	r2, r3, #1
    9602:	4193      	sbcs	r3, r2
    9604:	b2db      	uxtb	r3, r3
}
    9606:	1c18      	adds	r0, r3, #0
    9608:	46bd      	mov	sp, r7
    960a:	b004      	add	sp, #16
    960c:	bd80      	pop	{r7, pc}
    960e:	46c0      	nop			; (mov r8, r8)

00009610 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    9610:	b580      	push	{r7, lr}
    9612:	b084      	sub	sp, #16
    9614:	af00      	add	r7, sp, #0
    9616:	6078      	str	r0, [r7, #4]
    9618:	1c0a      	adds	r2, r1, #0
    961a:	1cfb      	adds	r3, r7, #3
    961c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    961e:	1c3b      	adds	r3, r7, #0
    9620:	330f      	adds	r3, #15
    9622:	1cfa      	adds	r2, r7, #3
    9624:	7811      	ldrb	r1, [r2, #0]
    9626:	220f      	movs	r2, #15
    9628:	400a      	ands	r2, r1
    962a:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    962c:	1cfb      	adds	r3, r7, #3
    962e:	781b      	ldrb	r3, [r3, #0]
    9630:	b25b      	sxtb	r3, r3
    9632:	2b00      	cmp	r3, #0
    9634:	da14      	bge.n	9660 <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	681a      	ldr	r2, [r3, #0]
    963a:	1c3b      	adds	r3, r7, #0
    963c:	330f      	adds	r3, #15
    963e:	781b      	ldrb	r3, [r3, #0]
    9640:	3308      	adds	r3, #8
    9642:	015b      	lsls	r3, r3, #5
    9644:	18d3      	adds	r3, r2, r3
    9646:	2280      	movs	r2, #128	; 0x80
    9648:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	681a      	ldr	r2, [r3, #0]
    964e:	1c3b      	adds	r3, r7, #0
    9650:	330f      	adds	r3, #15
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	3308      	adds	r3, #8
    9656:	015b      	lsls	r3, r3, #5
    9658:	18d3      	adds	r3, r2, r3
    965a:	2202      	movs	r2, #2
    965c:	71da      	strb	r2, [r3, #7]
    965e:	e013      	b.n	9688 <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    9660:	687b      	ldr	r3, [r7, #4]
    9662:	681a      	ldr	r2, [r3, #0]
    9664:	1c3b      	adds	r3, r7, #0
    9666:	330f      	adds	r3, #15
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	3308      	adds	r3, #8
    966c:	015b      	lsls	r3, r3, #5
    966e:	18d3      	adds	r3, r2, r3
    9670:	2240      	movs	r2, #64	; 0x40
    9672:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	681a      	ldr	r2, [r3, #0]
    9678:	1c3b      	adds	r3, r7, #0
    967a:	330f      	adds	r3, #15
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	3308      	adds	r3, #8
    9680:	015b      	lsls	r3, r3, #5
    9682:	18d3      	adds	r3, r2, r3
    9684:	2201      	movs	r2, #1
    9686:	71da      	strb	r2, [r3, #7]
	}
}
    9688:	46bd      	mov	sp, r7
    968a:	b004      	add	sp, #16
    968c:	bd80      	pop	{r7, pc}
    968e:	46c0      	nop			; (mov r8, r8)

00009690 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    9690:	b580      	push	{r7, lr}
    9692:	b084      	sub	sp, #16
    9694:	af00      	add	r7, sp, #0
    9696:	6078      	str	r0, [r7, #4]
    9698:	1c0a      	adds	r2, r1, #0
    969a:	1cfb      	adds	r3, r7, #3
    969c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    969e:	1c3b      	adds	r3, r7, #0
    96a0:	330f      	adds	r3, #15
    96a2:	1cfa      	adds	r2, r7, #3
    96a4:	7811      	ldrb	r1, [r2, #0]
    96a6:	220f      	movs	r2, #15
    96a8:	400a      	ands	r2, r1
    96aa:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    96ac:	1cfb      	adds	r3, r7, #3
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	b25b      	sxtb	r3, r3
    96b2:	2b00      	cmp	r3, #0
    96b4:	da10      	bge.n	96d8 <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	681a      	ldr	r2, [r3, #0]
    96ba:	1c3b      	adds	r3, r7, #0
    96bc:	330f      	adds	r3, #15
    96be:	781b      	ldrb	r3, [r3, #0]
    96c0:	3308      	adds	r3, #8
    96c2:	015b      	lsls	r3, r3, #5
    96c4:	18d3      	adds	r3, r2, r3
    96c6:	799b      	ldrb	r3, [r3, #6]
    96c8:	b2db      	uxtb	r3, r3
    96ca:	1c1a      	adds	r2, r3, #0
    96cc:	2320      	movs	r3, #32
    96ce:	4013      	ands	r3, r2
    96d0:	1e5a      	subs	r2, r3, #1
    96d2:	4193      	sbcs	r3, r2
    96d4:	b2db      	uxtb	r3, r3
    96d6:	e00f      	b.n	96f8 <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	681a      	ldr	r2, [r3, #0]
    96dc:	1c3b      	adds	r3, r7, #0
    96de:	330f      	adds	r3, #15
    96e0:	781b      	ldrb	r3, [r3, #0]
    96e2:	3308      	adds	r3, #8
    96e4:	015b      	lsls	r3, r3, #5
    96e6:	18d3      	adds	r3, r2, r3
    96e8:	799b      	ldrb	r3, [r3, #6]
    96ea:	b2db      	uxtb	r3, r3
    96ec:	1c1a      	adds	r2, r3, #0
    96ee:	2310      	movs	r3, #16
    96f0:	4013      	ands	r3, r2
    96f2:	1e5a      	subs	r2, r3, #1
    96f4:	4193      	sbcs	r3, r2
    96f6:	b2db      	uxtb	r3, r3
	}
}
    96f8:	1c18      	adds	r0, r3, #0
    96fa:	46bd      	mov	sp, r7
    96fc:	b004      	add	sp, #16
    96fe:	bd80      	pop	{r7, pc}

00009700 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    9700:	b580      	push	{r7, lr}
    9702:	b084      	sub	sp, #16
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
    9708:	1c0a      	adds	r2, r1, #0
    970a:	1cfb      	adds	r3, r7, #3
    970c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    970e:	1c3b      	adds	r3, r7, #0
    9710:	330f      	adds	r3, #15
    9712:	1cfa      	adds	r2, r7, #3
    9714:	7811      	ldrb	r1, [r2, #0]
    9716:	220f      	movs	r2, #15
    9718:	400a      	ands	r2, r1
    971a:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    971c:	1cfb      	adds	r3, r7, #3
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	b25b      	sxtb	r3, r3
    9722:	2b00      	cmp	r3, #0
    9724:	da0a      	bge.n	973c <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    9726:	687b      	ldr	r3, [r7, #4]
    9728:	681a      	ldr	r2, [r3, #0]
    972a:	1c3b      	adds	r3, r7, #0
    972c:	330f      	adds	r3, #15
    972e:	781b      	ldrb	r3, [r3, #0]
    9730:	3308      	adds	r3, #8
    9732:	015b      	lsls	r3, r3, #5
    9734:	18d3      	adds	r3, r2, r3
    9736:	2220      	movs	r2, #32
    9738:	715a      	strb	r2, [r3, #5]
    973a:	e009      	b.n	9750 <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	681a      	ldr	r2, [r3, #0]
    9740:	1c3b      	adds	r3, r7, #0
    9742:	330f      	adds	r3, #15
    9744:	781b      	ldrb	r3, [r3, #0]
    9746:	3308      	adds	r3, #8
    9748:	015b      	lsls	r3, r3, #5
    974a:	18d3      	adds	r3, r2, r3
    974c:	2210      	movs	r2, #16
    974e:	715a      	strb	r2, [r3, #5]
	}
}
    9750:	46bd      	mov	sp, r7
    9752:	b004      	add	sp, #16
    9754:	bd80      	pop	{r7, pc}
    9756:	46c0      	nop			; (mov r8, r8)

00009758 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    9758:	b580      	push	{r7, lr}
    975a:	b084      	sub	sp, #16
    975c:	af00      	add	r7, sp, #0
    975e:	6078      	str	r0, [r7, #4]
    9760:	1c0a      	adds	r2, r1, #0
    9762:	1cfb      	adds	r3, r7, #3
    9764:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9766:	1c3b      	adds	r3, r7, #0
    9768:	330f      	adds	r3, #15
    976a:	1cfa      	adds	r2, r7, #3
    976c:	7811      	ldrb	r1, [r2, #0]
    976e:	220f      	movs	r2, #15
    9770:	400a      	ands	r2, r1
    9772:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    9774:	1cfb      	adds	r3, r7, #3
    9776:	781b      	ldrb	r3, [r3, #0]
    9778:	b25b      	sxtb	r3, r3
    977a:	2b00      	cmp	r3, #0
    977c:	da3a      	bge.n	97f4 <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    977e:	687b      	ldr	r3, [r7, #4]
    9780:	681a      	ldr	r2, [r3, #0]
    9782:	1c3b      	adds	r3, r7, #0
    9784:	330f      	adds	r3, #15
    9786:	781b      	ldrb	r3, [r3, #0]
    9788:	3308      	adds	r3, #8
    978a:	015b      	lsls	r3, r3, #5
    978c:	18d3      	adds	r3, r2, r3
    978e:	799b      	ldrb	r3, [r3, #6]
    9790:	b2db      	uxtb	r3, r3
    9792:	1c1a      	adds	r2, r3, #0
    9794:	2320      	movs	r3, #32
    9796:	4013      	ands	r3, r2
    9798:	d066      	beq.n	9868 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    979a:	687b      	ldr	r3, [r7, #4]
    979c:	681a      	ldr	r2, [r3, #0]
    979e:	1c3b      	adds	r3, r7, #0
    97a0:	330f      	adds	r3, #15
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	3308      	adds	r3, #8
    97a6:	015b      	lsls	r3, r3, #5
    97a8:	18d3      	adds	r3, r2, r3
    97aa:	2220      	movs	r2, #32
    97ac:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    97ae:	687b      	ldr	r3, [r7, #4]
    97b0:	681a      	ldr	r2, [r3, #0]
    97b2:	1c3b      	adds	r3, r7, #0
    97b4:	330f      	adds	r3, #15
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	3308      	adds	r3, #8
    97ba:	015b      	lsls	r3, r3, #5
    97bc:	18d3      	adds	r3, r2, r3
    97be:	79db      	ldrb	r3, [r3, #7]
    97c0:	b2db      	uxtb	r3, r3
    97c2:	1c1a      	adds	r2, r3, #0
    97c4:	2340      	movs	r3, #64	; 0x40
    97c6:	4013      	ands	r3, r2
    97c8:	d04e      	beq.n	9868 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    97ca:	687b      	ldr	r3, [r7, #4]
    97cc:	681a      	ldr	r2, [r3, #0]
    97ce:	1c3b      	adds	r3, r7, #0
    97d0:	330f      	adds	r3, #15
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	3308      	adds	r3, #8
    97d6:	015b      	lsls	r3, r3, #5
    97d8:	18d3      	adds	r3, r2, r3
    97da:	2240      	movs	r2, #64	; 0x40
    97dc:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	681a      	ldr	r2, [r3, #0]
    97e2:	1c3b      	adds	r3, r7, #0
    97e4:	330f      	adds	r3, #15
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	3308      	adds	r3, #8
    97ea:	015b      	lsls	r3, r3, #5
    97ec:	18d3      	adds	r3, r2, r3
    97ee:	2202      	movs	r2, #2
    97f0:	711a      	strb	r2, [r3, #4]
    97f2:	e039      	b.n	9868 <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	681a      	ldr	r2, [r3, #0]
    97f8:	1c3b      	adds	r3, r7, #0
    97fa:	330f      	adds	r3, #15
    97fc:	781b      	ldrb	r3, [r3, #0]
    97fe:	3308      	adds	r3, #8
    9800:	015b      	lsls	r3, r3, #5
    9802:	18d3      	adds	r3, r2, r3
    9804:	799b      	ldrb	r3, [r3, #6]
    9806:	b2db      	uxtb	r3, r3
    9808:	1c1a      	adds	r2, r3, #0
    980a:	2310      	movs	r3, #16
    980c:	4013      	ands	r3, r2
    980e:	d02b      	beq.n	9868 <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	681a      	ldr	r2, [r3, #0]
    9814:	1c3b      	adds	r3, r7, #0
    9816:	330f      	adds	r3, #15
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	3308      	adds	r3, #8
    981c:	015b      	lsls	r3, r3, #5
    981e:	18d3      	adds	r3, r2, r3
    9820:	2210      	movs	r2, #16
    9822:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	681a      	ldr	r2, [r3, #0]
    9828:	1c3b      	adds	r3, r7, #0
    982a:	330f      	adds	r3, #15
    982c:	781b      	ldrb	r3, [r3, #0]
    982e:	3308      	adds	r3, #8
    9830:	015b      	lsls	r3, r3, #5
    9832:	18d3      	adds	r3, r2, r3
    9834:	79db      	ldrb	r3, [r3, #7]
    9836:	b2db      	uxtb	r3, r3
    9838:	1c1a      	adds	r2, r3, #0
    983a:	2320      	movs	r3, #32
    983c:	4013      	ands	r3, r2
    983e:	d013      	beq.n	9868 <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	681a      	ldr	r2, [r3, #0]
    9844:	1c3b      	adds	r3, r7, #0
    9846:	330f      	adds	r3, #15
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	3308      	adds	r3, #8
    984c:	015b      	lsls	r3, r3, #5
    984e:	18d3      	adds	r3, r2, r3
    9850:	2220      	movs	r2, #32
    9852:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    9854:	687b      	ldr	r3, [r7, #4]
    9856:	681a      	ldr	r2, [r3, #0]
    9858:	1c3b      	adds	r3, r7, #0
    985a:	330f      	adds	r3, #15
    985c:	781b      	ldrb	r3, [r3, #0]
    985e:	3308      	adds	r3, #8
    9860:	015b      	lsls	r3, r3, #5
    9862:	18d3      	adds	r3, r2, r3
    9864:	2201      	movs	r2, #1
    9866:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    9868:	46bd      	mov	sp, r7
    986a:	b004      	add	sp, #16
    986c:	bd80      	pop	{r7, pc}
    986e:	46c0      	nop			; (mov r8, r8)

00009870 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9870:	b580      	push	{r7, lr}
    9872:	b086      	sub	sp, #24
    9874:	af00      	add	r7, sp, #0
    9876:	60f8      	str	r0, [r7, #12]
    9878:	607a      	str	r2, [r7, #4]
    987a:	603b      	str	r3, [r7, #0]
    987c:	1c3b      	adds	r3, r7, #0
    987e:	330b      	adds	r3, #11
    9880:	1c0a      	adds	r2, r1, #0
    9882:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    9884:	68fb      	ldr	r3, [r7, #12]
    9886:	681b      	ldr	r3, [r3, #0]
    9888:	1c3a      	adds	r2, r7, #0
    988a:	320b      	adds	r2, #11
    988c:	7812      	ldrb	r2, [r2, #0]
    988e:	3208      	adds	r2, #8
    9890:	0152      	lsls	r2, r2, #5
    9892:	5cd3      	ldrb	r3, [r2, r3]
    9894:	b2db      	uxtb	r3, r3
    9896:	091b      	lsrs	r3, r3, #4
    9898:	1c1a      	adds	r2, r3, #0
    989a:	2307      	movs	r3, #7
    989c:	4013      	ands	r3, r2
    989e:	b2da      	uxtb	r2, r3
    98a0:	1c3b      	adds	r3, r7, #0
    98a2:	3317      	adds	r3, #23
    98a4:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    98a6:	1c3b      	adds	r3, r7, #0
    98a8:	3317      	adds	r3, #23
    98aa:	781b      	ldrb	r3, [r3, #0]
    98ac:	2b00      	cmp	r3, #0
    98ae:	d101      	bne.n	98b4 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    98b0:	231c      	movs	r3, #28
    98b2:	e031      	b.n	9918 <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    98b4:	1c3b      	adds	r3, r7, #0
    98b6:	330b      	adds	r3, #11
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	687a      	ldr	r2, [r7, #4]
    98bc:	4918      	ldr	r1, [pc, #96]	; (9920 <usb_device_endpoint_write_buffer_job+0xb0>)
    98be:	015b      	lsls	r3, r3, #5
    98c0:	18cb      	adds	r3, r1, r3
    98c2:	3310      	adds	r3, #16
    98c4:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    98c6:	1c3b      	adds	r3, r7, #0
    98c8:	330b      	adds	r3, #11
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	4a14      	ldr	r2, [pc, #80]	; (9920 <usb_device_endpoint_write_buffer_job+0xb0>)
    98ce:	015b      	lsls	r3, r3, #5
    98d0:	18d3      	adds	r3, r2, r3
    98d2:	3310      	adds	r3, #16
    98d4:	6859      	ldr	r1, [r3, #4]
    98d6:	4a13      	ldr	r2, [pc, #76]	; (9924 <usb_device_endpoint_write_buffer_job+0xb4>)
    98d8:	400a      	ands	r2, r1
    98da:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    98dc:	1c3b      	adds	r3, r7, #0
    98de:	330b      	adds	r3, #11
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	683a      	ldr	r2, [r7, #0]
    98e4:	b292      	uxth	r2, r2
    98e6:	0492      	lsls	r2, r2, #18
    98e8:	0c92      	lsrs	r2, r2, #18
    98ea:	b292      	uxth	r2, r2
    98ec:	490c      	ldr	r1, [pc, #48]	; (9920 <usb_device_endpoint_write_buffer_job+0xb0>)
    98ee:	015b      	lsls	r3, r3, #5
    98f0:	18cb      	adds	r3, r1, r3
    98f2:	3310      	adds	r3, #16
    98f4:	0492      	lsls	r2, r2, #18
    98f6:	0c92      	lsrs	r2, r2, #18
    98f8:	6859      	ldr	r1, [r3, #4]
    98fa:	0b89      	lsrs	r1, r1, #14
    98fc:	0389      	lsls	r1, r1, #14
    98fe:	430a      	orrs	r2, r1
    9900:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    9902:	68fb      	ldr	r3, [r7, #12]
    9904:	681a      	ldr	r2, [r3, #0]
    9906:	1c3b      	adds	r3, r7, #0
    9908:	330b      	adds	r3, #11
    990a:	781b      	ldrb	r3, [r3, #0]
    990c:	3308      	adds	r3, #8
    990e:	015b      	lsls	r3, r3, #5
    9910:	18d3      	adds	r3, r2, r3
    9912:	2280      	movs	r2, #128	; 0x80
    9914:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    9916:	2300      	movs	r3, #0
}
    9918:	1c18      	adds	r0, r3, #0
    991a:	46bd      	mov	sp, r7
    991c:	b006      	add	sp, #24
    991e:	bd80      	pop	{r7, pc}
    9920:	2000701c 	.word	0x2000701c
    9924:	f0003fff 	.word	0xf0003fff

00009928 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    9928:	b580      	push	{r7, lr}
    992a:	b086      	sub	sp, #24
    992c:	af00      	add	r7, sp, #0
    992e:	60f8      	str	r0, [r7, #12]
    9930:	607a      	str	r2, [r7, #4]
    9932:	603b      	str	r3, [r7, #0]
    9934:	1c3b      	adds	r3, r7, #0
    9936:	330b      	adds	r3, #11
    9938:	1c0a      	adds	r2, r1, #0
    993a:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    993c:	68fb      	ldr	r3, [r7, #12]
    993e:	681b      	ldr	r3, [r3, #0]
    9940:	1c3a      	adds	r2, r7, #0
    9942:	320b      	adds	r2, #11
    9944:	7812      	ldrb	r2, [r2, #0]
    9946:	3208      	adds	r2, #8
    9948:	0152      	lsls	r2, r2, #5
    994a:	5cd2      	ldrb	r2, [r2, r3]
    994c:	2307      	movs	r3, #7
    994e:	4013      	ands	r3, r2
    9950:	b2da      	uxtb	r2, r3
    9952:	1c3b      	adds	r3, r7, #0
    9954:	3317      	adds	r3, #23
    9956:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    9958:	1c3b      	adds	r3, r7, #0
    995a:	3317      	adds	r3, #23
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	2b00      	cmp	r3, #0
    9960:	d101      	bne.n	9966 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    9962:	231c      	movs	r3, #28
    9964:	e02e      	b.n	99c4 <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    9966:	1c3b      	adds	r3, r7, #0
    9968:	330b      	adds	r3, #11
    996a:	781a      	ldrb	r2, [r3, #0]
    996c:	6879      	ldr	r1, [r7, #4]
    996e:	4b17      	ldr	r3, [pc, #92]	; (99cc <usb_device_endpoint_read_buffer_job+0xa4>)
    9970:	0152      	lsls	r2, r2, #5
    9972:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    9974:	1c3b      	adds	r3, r7, #0
    9976:	330b      	adds	r3, #11
    9978:	781b      	ldrb	r3, [r3, #0]
    997a:	683a      	ldr	r2, [r7, #0]
    997c:	b292      	uxth	r2, r2
    997e:	0492      	lsls	r2, r2, #18
    9980:	0c92      	lsrs	r2, r2, #18
    9982:	b292      	uxth	r2, r2
    9984:	4911      	ldr	r1, [pc, #68]	; (99cc <usb_device_endpoint_read_buffer_job+0xa4>)
    9986:	015b      	lsls	r3, r3, #5
    9988:	18cb      	adds	r3, r1, r3
    998a:	0492      	lsls	r2, r2, #18
    998c:	0c92      	lsrs	r2, r2, #18
    998e:	0392      	lsls	r2, r2, #14
    9990:	6858      	ldr	r0, [r3, #4]
    9992:	490f      	ldr	r1, [pc, #60]	; (99d0 <usb_device_endpoint_read_buffer_job+0xa8>)
    9994:	4001      	ands	r1, r0
    9996:	430a      	orrs	r2, r1
    9998:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    999a:	1c3b      	adds	r3, r7, #0
    999c:	330b      	adds	r3, #11
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	4a0a      	ldr	r2, [pc, #40]	; (99cc <usb_device_endpoint_read_buffer_job+0xa4>)
    99a2:	015b      	lsls	r3, r3, #5
    99a4:	18d3      	adds	r3, r2, r3
    99a6:	685a      	ldr	r2, [r3, #4]
    99a8:	0b92      	lsrs	r2, r2, #14
    99aa:	0392      	lsls	r2, r2, #14
    99ac:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    99ae:	68fb      	ldr	r3, [r7, #12]
    99b0:	681a      	ldr	r2, [r3, #0]
    99b2:	1c3b      	adds	r3, r7, #0
    99b4:	330b      	adds	r3, #11
    99b6:	781b      	ldrb	r3, [r3, #0]
    99b8:	3308      	adds	r3, #8
    99ba:	015b      	lsls	r3, r3, #5
    99bc:	18d3      	adds	r3, r2, r3
    99be:	2240      	movs	r2, #64	; 0x40
    99c0:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    99c2:	2300      	movs	r3, #0
}
    99c4:	1c18      	adds	r0, r3, #0
    99c6:	46bd      	mov	sp, r7
    99c8:	b006      	add	sp, #24
    99ca:	bd80      	pop	{r7, pc}
    99cc:	2000701c 	.word	0x2000701c
    99d0:	f0003fff 	.word	0xf0003fff

000099d4 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b082      	sub	sp, #8
    99d8:	af00      	add	r7, sp, #0
    99da:	6078      	str	r0, [r7, #4]
    99dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    99de:	683a      	ldr	r2, [r7, #0]
    99e0:	4b0c      	ldr	r3, [pc, #48]	; (9a14 <usb_device_endpoint_setup_buffer_job+0x40>)
    99e2:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    99e4:	4b0b      	ldr	r3, [pc, #44]	; (9a14 <usb_device_endpoint_setup_buffer_job+0x40>)
    99e6:	6859      	ldr	r1, [r3, #4]
    99e8:	4a0b      	ldr	r2, [pc, #44]	; (9a18 <usb_device_endpoint_setup_buffer_job+0x44>)
    99ea:	400a      	ands	r2, r1
    99ec:	2180      	movs	r1, #128	; 0x80
    99ee:	0289      	lsls	r1, r1, #10
    99f0:	430a      	orrs	r2, r1
    99f2:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    99f4:	4b07      	ldr	r3, [pc, #28]	; (9a14 <usb_device_endpoint_setup_buffer_job+0x40>)
    99f6:	685a      	ldr	r2, [r3, #4]
    99f8:	0b92      	lsrs	r2, r2, #14
    99fa:	0392      	lsls	r2, r2, #14
    99fc:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	681a      	ldr	r2, [r3, #0]
    9a02:	2382      	movs	r3, #130	; 0x82
    9a04:	005b      	lsls	r3, r3, #1
    9a06:	2140      	movs	r1, #64	; 0x40
    9a08:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    9a0a:	2300      	movs	r3, #0
}
    9a0c:	1c18      	adds	r0, r3, #0
    9a0e:	46bd      	mov	sp, r7
    9a10:	b002      	add	sp, #8
    9a12:	bd80      	pop	{r7, pc}
    9a14:	2000701c 	.word	0x2000701c
    9a18:	f0003fff 	.word	0xf0003fff

00009a1c <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    9a1c:	b580      	push	{r7, lr}
    9a1e:	b084      	sub	sp, #16
    9a20:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    9a22:	4bcc      	ldr	r3, [pc, #816]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	681a      	ldr	r2, [r3, #0]
    9a28:	1c3b      	adds	r3, r7, #0
    9a2a:	3308      	adds	r3, #8
    9a2c:	8c12      	ldrh	r2, [r2, #32]
    9a2e:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    9a30:	1c3b      	adds	r3, r7, #0
    9a32:	3308      	adds	r3, #8
    9a34:	881b      	ldrh	r3, [r3, #0]
    9a36:	2b00      	cmp	r3, #0
    9a38:	d158      	bne.n	9aec <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    9a3a:	4bc6      	ldr	r3, [pc, #792]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9a3c:	681b      	ldr	r3, [r3, #0]
    9a3e:	681a      	ldr	r2, [r3, #0]
    9a40:	1dbb      	adds	r3, r7, #6
    9a42:	8b92      	ldrh	r2, [r2, #28]
    9a44:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    9a46:	4bc3      	ldr	r3, [pc, #780]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9a48:	681a      	ldr	r2, [r3, #0]
    9a4a:	23ab      	movs	r3, #171	; 0xab
    9a4c:	005b      	lsls	r3, r3, #1
    9a4e:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    9a50:	1dba      	adds	r2, r7, #6
    9a52:	8812      	ldrh	r2, [r2, #0]
    9a54:	4013      	ands	r3, r2
    9a56:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    9a58:	4bbe      	ldr	r3, [pc, #760]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9a5a:	6819      	ldr	r1, [r3, #0]
    9a5c:	23aa      	movs	r3, #170	; 0xaa
    9a5e:	005b      	lsls	r3, r3, #1
    9a60:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    9a62:	1d3b      	adds	r3, r7, #4
    9a64:	400a      	ands	r2, r1
    9a66:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    9a68:	2300      	movs	r3, #0
    9a6a:	60fb      	str	r3, [r7, #12]
    9a6c:	e03a      	b.n	9ae4 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    9a6e:	4bba      	ldr	r3, [pc, #744]	; (9d58 <_usb_device_interrupt_handler+0x33c>)
    9a70:	68fa      	ldr	r2, [r7, #12]
    9a72:	0052      	lsls	r2, r2, #1
    9a74:	5ad3      	ldrh	r3, [r2, r3]
    9a76:	1dba      	adds	r2, r7, #6
    9a78:	8812      	ldrh	r2, [r2, #0]
    9a7a:	4013      	ands	r3, r2
    9a7c:	b29b      	uxth	r3, r3
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d007      	beq.n	9a92 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    9a82:	4bb4      	ldr	r3, [pc, #720]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    9a88:	4ab3      	ldr	r2, [pc, #716]	; (9d58 <_usb_device_interrupt_handler+0x33c>)
    9a8a:	68f9      	ldr	r1, [r7, #12]
    9a8c:	0049      	lsls	r1, r1, #1
    9a8e:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    9a90:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    9a92:	4bb1      	ldr	r3, [pc, #708]	; (9d58 <_usb_device_interrupt_handler+0x33c>)
    9a94:	68fa      	ldr	r2, [r7, #12]
    9a96:	0052      	lsls	r2, r2, #1
    9a98:	5ad3      	ldrh	r3, [r2, r3]
    9a9a:	1d3a      	adds	r2, r7, #4
    9a9c:	8812      	ldrh	r2, [r2, #0]
    9a9e:	4013      	ands	r3, r2
    9aa0:	b29b      	uxth	r3, r3
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d01b      	beq.n	9ade <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    9aa6:	68fb      	ldr	r3, [r7, #12]
    9aa8:	2b06      	cmp	r3, #6
    9aaa:	d10c      	bne.n	9ac6 <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    9aac:	4bab      	ldr	r3, [pc, #684]	; (9d5c <_usb_device_interrupt_handler+0x340>)
    9aae:	891b      	ldrh	r3, [r3, #8]
    9ab0:	b29b      	uxth	r3, r3
    9ab2:	091b      	lsrs	r3, r3, #4
    9ab4:	055b      	lsls	r3, r3, #21
    9ab6:	0d5b      	lsrs	r3, r3, #21
    9ab8:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    9aba:	1c1a      	adds	r2, r3, #0
    9abc:	2380      	movs	r3, #128	; 0x80
    9abe:	005b      	lsls	r3, r3, #1
    9ac0:	401a      	ands	r2, r3
    9ac2:	4ba7      	ldr	r3, [pc, #668]	; (9d60 <_usb_device_interrupt_handler+0x344>)
    9ac4:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    9ac6:	4ba3      	ldr	r3, [pc, #652]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9ac8:	681b      	ldr	r3, [r3, #0]
    9aca:	68fa      	ldr	r2, [r7, #12]
    9acc:	322e      	adds	r2, #46	; 0x2e
    9ace:	0092      	lsls	r2, r2, #2
    9ad0:	58d2      	ldr	r2, [r2, r3]
    9ad2:	4ba0      	ldr	r3, [pc, #640]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9ad4:	6819      	ldr	r1, [r3, #0]
    9ad6:	4ba2      	ldr	r3, [pc, #648]	; (9d60 <_usb_device_interrupt_handler+0x344>)
    9ad8:	1c08      	adds	r0, r1, #0
    9ada:	1c19      	adds	r1, r3, #0
    9adc:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    9ade:	68fb      	ldr	r3, [r7, #12]
    9ae0:	3301      	adds	r3, #1
    9ae2:	60fb      	str	r3, [r7, #12]
    9ae4:	68fb      	ldr	r3, [r7, #12]
    9ae6:	2b06      	cmp	r3, #6
    9ae8:	ddc1      	ble.n	9a6e <_usb_device_interrupt_handler+0x52>
    9aea:	e239      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    9aec:	1c3b      	adds	r3, r7, #0
    9aee:	330b      	adds	r3, #11
    9af0:	2200      	movs	r2, #0
    9af2:	701a      	strb	r2, [r3, #0]
    9af4:	e22e      	b.n	9f54 <_usb_device_interrupt_handler+0x538>

			if (ep_inst & (1 << i)) {
    9af6:	1c3b      	adds	r3, r7, #0
    9af8:	3308      	adds	r3, #8
    9afa:	881a      	ldrh	r2, [r3, #0]
    9afc:	1c3b      	adds	r3, r7, #0
    9afe:	330b      	adds	r3, #11
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	411a      	asrs	r2, r3
    9b04:	2301      	movs	r3, #1
    9b06:	4013      	ands	r3, r2
    9b08:	d100      	bne.n	9b0c <_usb_device_interrupt_handler+0xf0>
    9b0a:	e21c      	b.n	9f46 <_usb_device_interrupt_handler+0x52a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    9b0c:	4b91      	ldr	r3, [pc, #580]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9b0e:	681b      	ldr	r3, [r3, #0]
    9b10:	681a      	ldr	r2, [r3, #0]
    9b12:	1c3b      	adds	r3, r7, #0
    9b14:	330b      	adds	r3, #11
    9b16:	781b      	ldrb	r3, [r3, #0]
    9b18:	3308      	adds	r3, #8
    9b1a:	015b      	lsls	r3, r3, #5
    9b1c:	18d3      	adds	r3, r2, r3
    9b1e:	79db      	ldrb	r3, [r3, #7]
    9b20:	b2da      	uxtb	r2, r3
    9b22:	1dbb      	adds	r3, r7, #6
    9b24:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    9b26:	4b8b      	ldr	r3, [pc, #556]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9b28:	6819      	ldr	r1, [r3, #0]
    9b2a:	1c3b      	adds	r3, r7, #0
    9b2c:	330b      	adds	r3, #11
    9b2e:	781a      	ldrb	r2, [r3, #0]
    9b30:	23b0      	movs	r3, #176	; 0xb0
    9b32:	005b      	lsls	r3, r3, #1
    9b34:	188a      	adds	r2, r1, r2
    9b36:	18d3      	adds	r3, r2, r3
    9b38:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    9b3a:	1dba      	adds	r2, r7, #6
    9b3c:	8812      	ldrh	r2, [r2, #0]
    9b3e:	4013      	ands	r3, r2
    9b40:	b29b      	uxth	r3, r3
    9b42:	b299      	uxth	r1, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    9b44:	4b83      	ldr	r3, [pc, #524]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9b46:	6818      	ldr	r0, [r3, #0]
    9b48:	1c3b      	adds	r3, r7, #0
    9b4a:	330b      	adds	r3, #11
    9b4c:	781a      	ldrb	r2, [r3, #0]
    9b4e:	23ac      	movs	r3, #172	; 0xac
    9b50:	005b      	lsls	r3, r3, #1
    9b52:	1882      	adds	r2, r0, r2
    9b54:	18d3      	adds	r3, r2, r3
    9b56:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    9b58:	1c1a      	adds	r2, r3, #0
    9b5a:	1c0b      	adds	r3, r1, #0
    9b5c:	4013      	ands	r3, r2
    9b5e:	b29a      	uxth	r2, r3
    9b60:	1d3b      	adds	r3, r7, #4
    9b62:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9b64:	1dbb      	adds	r3, r7, #6
    9b66:	881a      	ldrh	r2, [r3, #0]
    9b68:	2360      	movs	r3, #96	; 0x60
    9b6a:	4013      	ands	r3, r2
    9b6c:	d059      	beq.n	9c22 <_usb_device_interrupt_handler+0x206>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    9b6e:	4b79      	ldr	r3, [pc, #484]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9b70:	681b      	ldr	r3, [r3, #0]
    9b72:	681a      	ldr	r2, [r3, #0]
    9b74:	1c3b      	adds	r3, r7, #0
    9b76:	330b      	adds	r3, #11
    9b78:	781b      	ldrb	r3, [r3, #0]
    9b7a:	3308      	adds	r3, #8
    9b7c:	015b      	lsls	r3, r3, #5
    9b7e:	18d3      	adds	r3, r2, r3
    9b80:	79db      	ldrb	r3, [r3, #7]
    9b82:	b2db      	uxtb	r3, r3
    9b84:	1c1a      	adds	r2, r3, #0
    9b86:	2340      	movs	r3, #64	; 0x40
    9b88:	4013      	ands	r3, r2
    9b8a:	d014      	beq.n	9bb6 <_usb_device_interrupt_handler+0x19a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    9b8c:	4b71      	ldr	r3, [pc, #452]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	681a      	ldr	r2, [r3, #0]
    9b92:	1c3b      	adds	r3, r7, #0
    9b94:	330b      	adds	r3, #11
    9b96:	781b      	ldrb	r3, [r3, #0]
    9b98:	3308      	adds	r3, #8
    9b9a:	015b      	lsls	r3, r3, #5
    9b9c:	18d3      	adds	r3, r2, r3
    9b9e:	2240      	movs	r2, #64	; 0x40
    9ba0:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9ba2:	1c3b      	adds	r3, r7, #0
    9ba4:	330b      	adds	r3, #11
    9ba6:	781b      	ldrb	r3, [r3, #0]
    9ba8:	2280      	movs	r2, #128	; 0x80
    9baa:	4252      	negs	r2, r2
    9bac:	4313      	orrs	r3, r2
    9bae:	b2da      	uxtb	r2, r3
    9bb0:	4b6c      	ldr	r3, [pc, #432]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9bb2:	719a      	strb	r2, [r3, #6]
    9bb4:	e01e      	b.n	9bf4 <_usb_device_interrupt_handler+0x1d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    9bb6:	4b67      	ldr	r3, [pc, #412]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9bb8:	681b      	ldr	r3, [r3, #0]
    9bba:	681a      	ldr	r2, [r3, #0]
    9bbc:	1c3b      	adds	r3, r7, #0
    9bbe:	330b      	adds	r3, #11
    9bc0:	781b      	ldrb	r3, [r3, #0]
    9bc2:	3308      	adds	r3, #8
    9bc4:	015b      	lsls	r3, r3, #5
    9bc6:	18d3      	adds	r3, r2, r3
    9bc8:	79db      	ldrb	r3, [r3, #7]
    9bca:	b2db      	uxtb	r3, r3
    9bcc:	1c1a      	adds	r2, r3, #0
    9bce:	2320      	movs	r3, #32
    9bd0:	4013      	ands	r3, r2
    9bd2:	d00f      	beq.n	9bf4 <_usb_device_interrupt_handler+0x1d8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    9bd4:	4b5f      	ldr	r3, [pc, #380]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9bd6:	681b      	ldr	r3, [r3, #0]
    9bd8:	681a      	ldr	r2, [r3, #0]
    9bda:	1c3b      	adds	r3, r7, #0
    9bdc:	330b      	adds	r3, #11
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	3308      	adds	r3, #8
    9be2:	015b      	lsls	r3, r3, #5
    9be4:	18d3      	adds	r3, r2, r3
    9be6:	2220      	movs	r2, #32
    9be8:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9bea:	4b5e      	ldr	r3, [pc, #376]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9bec:	1c3a      	adds	r2, r7, #0
    9bee:	320b      	adds	r2, #11
    9bf0:	7812      	ldrb	r2, [r2, #0]
    9bf2:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    9bf4:	1d3b      	adds	r3, r7, #4
    9bf6:	881a      	ldrh	r2, [r3, #0]
    9bf8:	2360      	movs	r3, #96	; 0x60
    9bfa:	4013      	ands	r3, r2
    9bfc:	d010      	beq.n	9c20 <_usb_device_interrupt_handler+0x204>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    9bfe:	4b55      	ldr	r3, [pc, #340]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c00:	6819      	ldr	r1, [r3, #0]
    9c02:	1c3b      	adds	r3, r7, #0
    9c04:	330b      	adds	r3, #11
    9c06:	781a      	ldrb	r2, [r3, #0]
    9c08:	23dc      	movs	r3, #220	; 0xdc
    9c0a:	0112      	lsls	r2, r2, #4
    9c0c:	188a      	adds	r2, r1, r2
    9c0e:	18d3      	adds	r3, r2, r3
    9c10:	685a      	ldr	r2, [r3, #4]
    9c12:	4b50      	ldr	r3, [pc, #320]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c14:	6819      	ldr	r1, [r3, #0]
    9c16:	4b53      	ldr	r3, [pc, #332]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9c18:	1c08      	adds	r0, r1, #0
    9c1a:	1c19      	adds	r1, r3, #0
    9c1c:	4790      	blx	r2
					}
					return;
    9c1e:	e19f      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
    9c20:	e19e      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9c22:	1dbb      	adds	r3, r7, #6
    9c24:	881a      	ldrh	r2, [r3, #0]
    9c26:	2310      	movs	r3, #16
    9c28:	4013      	ands	r3, r2
    9c2a:	d038      	beq.n	9c9e <_usb_device_interrupt_handler+0x282>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    9c2c:	4b49      	ldr	r3, [pc, #292]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	681a      	ldr	r2, [r3, #0]
    9c32:	1c3b      	adds	r3, r7, #0
    9c34:	330b      	adds	r3, #11
    9c36:	781b      	ldrb	r3, [r3, #0]
    9c38:	3308      	adds	r3, #8
    9c3a:	015b      	lsls	r3, r3, #5
    9c3c:	18d3      	adds	r3, r2, r3
    9c3e:	2210      	movs	r2, #16
    9c40:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    9c42:	4b44      	ldr	r3, [pc, #272]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c44:	6819      	ldr	r1, [r3, #0]
    9c46:	1c3b      	adds	r3, r7, #0
    9c48:	330b      	adds	r3, #11
    9c4a:	781a      	ldrb	r2, [r3, #0]
    9c4c:	23b0      	movs	r3, #176	; 0xb0
    9c4e:	005b      	lsls	r3, r3, #1
    9c50:	188a      	adds	r2, r1, r2
    9c52:	18d3      	adds	r3, r2, r3
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	2210      	movs	r2, #16
    9c58:	4013      	ands	r3, r2
    9c5a:	b2db      	uxtb	r3, r3
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	d01d      	beq.n	9c9c <_usb_device_interrupt_handler+0x280>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9c60:	1c3b      	adds	r3, r7, #0
    9c62:	330b      	adds	r3, #11
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	4a3d      	ldr	r2, [pc, #244]	; (9d5c <_usb_device_interrupt_handler+0x340>)
    9c68:	015b      	lsls	r3, r3, #5
    9c6a:	18d3      	adds	r3, r2, r3
    9c6c:	685b      	ldr	r3, [r3, #4]
    9c6e:	049b      	lsls	r3, r3, #18
    9c70:	0c9b      	lsrs	r3, r3, #18
    9c72:	b29b      	uxth	r3, r3
    9c74:	1c1a      	adds	r2, r3, #0
    9c76:	4b3b      	ldr	r3, [pc, #236]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9c78:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    9c7a:	4b36      	ldr	r3, [pc, #216]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c7c:	6819      	ldr	r1, [r3, #0]
    9c7e:	1c3b      	adds	r3, r7, #0
    9c80:	330b      	adds	r3, #11
    9c82:	781a      	ldrb	r2, [r3, #0]
    9c84:	23d8      	movs	r3, #216	; 0xd8
    9c86:	0112      	lsls	r2, r2, #4
    9c88:	188a      	adds	r2, r1, r2
    9c8a:	18d3      	adds	r3, r2, r3
    9c8c:	685a      	ldr	r2, [r3, #4]
    9c8e:	4b31      	ldr	r3, [pc, #196]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9c90:	6819      	ldr	r1, [r3, #0]
    9c92:	4b34      	ldr	r3, [pc, #208]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9c94:	1c08      	adds	r0, r1, #0
    9c96:	1c19      	adds	r1, r3, #0
    9c98:	4790      	blx	r2
					}
					return;
    9c9a:	e161      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
    9c9c:	e160      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9c9e:	1dbb      	adds	r3, r7, #6
    9ca0:	881a      	ldrh	r2, [r3, #0]
    9ca2:	230c      	movs	r3, #12
    9ca4:	4013      	ands	r3, r2
    9ca6:	d100      	bne.n	9caa <_usb_device_interrupt_handler+0x28e>
    9ca8:	e0c5      	b.n	9e36 <_usb_device_interrupt_handler+0x41a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9caa:	4b2a      	ldr	r3, [pc, #168]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9cac:	681b      	ldr	r3, [r3, #0]
    9cae:	681a      	ldr	r2, [r3, #0]
    9cb0:	1c3b      	adds	r3, r7, #0
    9cb2:	330b      	adds	r3, #11
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	3308      	adds	r3, #8
    9cb8:	015b      	lsls	r3, r3, #5
    9cba:	18d3      	adds	r3, r2, r3
    9cbc:	79db      	ldrb	r3, [r3, #7]
    9cbe:	b2db      	uxtb	r3, r3
    9cc0:	1c1a      	adds	r2, r3, #0
    9cc2:	2308      	movs	r3, #8
    9cc4:	4013      	ands	r3, r2
    9cc6:	d04f      	beq.n	9d68 <_usb_device_interrupt_handler+0x34c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    9cc8:	4b22      	ldr	r3, [pc, #136]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9cca:	681b      	ldr	r3, [r3, #0]
    9ccc:	681a      	ldr	r2, [r3, #0]
    9cce:	1c3b      	adds	r3, r7, #0
    9cd0:	330b      	adds	r3, #11
    9cd2:	781b      	ldrb	r3, [r3, #0]
    9cd4:	3308      	adds	r3, #8
    9cd6:	015b      	lsls	r3, r3, #5
    9cd8:	18d3      	adds	r3, r2, r3
    9cda:	2208      	movs	r2, #8
    9cdc:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    9cde:	1c3b      	adds	r3, r7, #0
    9ce0:	330b      	adds	r3, #11
    9ce2:	781b      	ldrb	r3, [r3, #0]
    9ce4:	4a1d      	ldr	r2, [pc, #116]	; (9d5c <_usb_device_interrupt_handler+0x340>)
    9ce6:	015b      	lsls	r3, r3, #5
    9ce8:	18d3      	adds	r3, r2, r3
    9cea:	3318      	adds	r3, #24
    9cec:	789b      	ldrb	r3, [r3, #2]
    9cee:	b2db      	uxtb	r3, r3
    9cf0:	1c1a      	adds	r2, r3, #0
    9cf2:	2302      	movs	r3, #2
    9cf4:	4013      	ands	r3, r2
    9cf6:	d013      	beq.n	9d20 <_usb_device_interrupt_handler+0x304>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9cf8:	1c3b      	adds	r3, r7, #0
    9cfa:	330b      	adds	r3, #11
    9cfc:	781b      	ldrb	r3, [r3, #0]
    9cfe:	1c3a      	adds	r2, r7, #0
    9d00:	320b      	adds	r2, #11
    9d02:	7812      	ldrb	r2, [r2, #0]
    9d04:	4915      	ldr	r1, [pc, #84]	; (9d5c <_usb_device_interrupt_handler+0x340>)
    9d06:	0152      	lsls	r2, r2, #5
    9d08:	188a      	adds	r2, r1, r2
    9d0a:	3218      	adds	r2, #24
    9d0c:	7892      	ldrb	r2, [r2, #2]
    9d0e:	b2d2      	uxtb	r2, r2
    9d10:	2102      	movs	r1, #2
    9d12:	438a      	bics	r2, r1
    9d14:	b2d2      	uxtb	r2, r2
    9d16:	4911      	ldr	r1, [pc, #68]	; (9d5c <_usb_device_interrupt_handler+0x340>)
    9d18:	015b      	lsls	r3, r3, #5
    9d1a:	18cb      	adds	r3, r1, r3
    9d1c:	3318      	adds	r3, #24
    9d1e:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9d20:	1c3b      	adds	r3, r7, #0
    9d22:	330b      	adds	r3, #11
    9d24:	781b      	ldrb	r3, [r3, #0]
    9d26:	2280      	movs	r2, #128	; 0x80
    9d28:	4252      	negs	r2, r2
    9d2a:	4313      	orrs	r3, r2
    9d2c:	b2da      	uxtb	r2, r3
    9d2e:	4b0d      	ldr	r3, [pc, #52]	; (9d64 <_usb_device_interrupt_handler+0x348>)
    9d30:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9d32:	4b08      	ldr	r3, [pc, #32]	; (9d54 <_usb_device_interrupt_handler+0x338>)
    9d34:	681b      	ldr	r3, [r3, #0]
    9d36:	681a      	ldr	r2, [r3, #0]
    9d38:	1c3b      	adds	r3, r7, #0
    9d3a:	330b      	adds	r3, #11
    9d3c:	781b      	ldrb	r3, [r3, #0]
    9d3e:	3308      	adds	r3, #8
    9d40:	015b      	lsls	r3, r3, #5
    9d42:	18d3      	adds	r3, r2, r3
    9d44:	79db      	ldrb	r3, [r3, #7]
    9d46:	b2db      	uxtb	r3, r3
    9d48:	1c1a      	adds	r2, r3, #0
    9d4a:	2302      	movs	r3, #2
    9d4c:	4013      	ands	r3, r2
    9d4e:	d05b      	beq.n	9e08 <_usb_device_interrupt_handler+0x3ec>
							return;
    9d50:	e106      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
    9d52:	46c0      	nop			; (mov r8, r8)
    9d54:	20006d9c 	.word	0x20006d9c
    9d58:	0000b340 	.word	0x0000b340
    9d5c:	2000701c 	.word	0x2000701c
    9d60:	20006da8 	.word	0x20006da8
    9d64:	20006dac 	.word	0x20006dac
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9d68:	4b7f      	ldr	r3, [pc, #508]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	681a      	ldr	r2, [r3, #0]
    9d6e:	1c3b      	adds	r3, r7, #0
    9d70:	330b      	adds	r3, #11
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	3308      	adds	r3, #8
    9d76:	015b      	lsls	r3, r3, #5
    9d78:	18d3      	adds	r3, r2, r3
    9d7a:	79db      	ldrb	r3, [r3, #7]
    9d7c:	b2db      	uxtb	r3, r3
    9d7e:	1c1a      	adds	r2, r3, #0
    9d80:	2304      	movs	r3, #4
    9d82:	4013      	ands	r3, r2
    9d84:	d040      	beq.n	9e08 <_usb_device_interrupt_handler+0x3ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    9d86:	4b78      	ldr	r3, [pc, #480]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	681a      	ldr	r2, [r3, #0]
    9d8c:	1c3b      	adds	r3, r7, #0
    9d8e:	330b      	adds	r3, #11
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	3308      	adds	r3, #8
    9d94:	015b      	lsls	r3, r3, #5
    9d96:	18d3      	adds	r3, r2, r3
    9d98:	2204      	movs	r2, #4
    9d9a:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    9d9c:	1c3b      	adds	r3, r7, #0
    9d9e:	330b      	adds	r3, #11
    9da0:	781b      	ldrb	r3, [r3, #0]
    9da2:	4a72      	ldr	r2, [pc, #456]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9da4:	015b      	lsls	r3, r3, #5
    9da6:	18d3      	adds	r3, r2, r3
    9da8:	3308      	adds	r3, #8
    9daa:	789b      	ldrb	r3, [r3, #2]
    9dac:	b2db      	uxtb	r3, r3
    9dae:	1c1a      	adds	r2, r3, #0
    9db0:	2302      	movs	r3, #2
    9db2:	4013      	ands	r3, r2
    9db4:	d013      	beq.n	9dde <_usb_device_interrupt_handler+0x3c2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    9db6:	1c3b      	adds	r3, r7, #0
    9db8:	330b      	adds	r3, #11
    9dba:	781b      	ldrb	r3, [r3, #0]
    9dbc:	1c3a      	adds	r2, r7, #0
    9dbe:	320b      	adds	r2, #11
    9dc0:	7812      	ldrb	r2, [r2, #0]
    9dc2:	496a      	ldr	r1, [pc, #424]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9dc4:	0152      	lsls	r2, r2, #5
    9dc6:	188a      	adds	r2, r1, r2
    9dc8:	3208      	adds	r2, #8
    9dca:	7892      	ldrb	r2, [r2, #2]
    9dcc:	b2d2      	uxtb	r2, r2
    9dce:	2102      	movs	r1, #2
    9dd0:	438a      	bics	r2, r1
    9dd2:	b2d2      	uxtb	r2, r2
    9dd4:	4965      	ldr	r1, [pc, #404]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9dd6:	015b      	lsls	r3, r3, #5
    9dd8:	18cb      	adds	r3, r1, r3
    9dda:	3308      	adds	r3, #8
    9ddc:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9dde:	4b64      	ldr	r3, [pc, #400]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9de0:	1c3a      	adds	r2, r7, #0
    9de2:	320b      	adds	r2, #11
    9de4:	7812      	ldrb	r2, [r2, #0]
    9de6:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9de8:	4b5f      	ldr	r3, [pc, #380]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9dea:	681b      	ldr	r3, [r3, #0]
    9dec:	681a      	ldr	r2, [r3, #0]
    9dee:	1c3b      	adds	r3, r7, #0
    9df0:	330b      	adds	r3, #11
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	3308      	adds	r3, #8
    9df6:	015b      	lsls	r3, r3, #5
    9df8:	18d3      	adds	r3, r2, r3
    9dfa:	79db      	ldrb	r3, [r3, #7]
    9dfc:	b2db      	uxtb	r3, r3
    9dfe:	1c1a      	adds	r2, r3, #0
    9e00:	2301      	movs	r3, #1
    9e02:	4013      	ands	r3, r2
    9e04:	d000      	beq.n	9e08 <_usb_device_interrupt_handler+0x3ec>
							return;
    9e06:	e0ab      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    9e08:	1d3b      	adds	r3, r7, #4
    9e0a:	881a      	ldrh	r2, [r3, #0]
    9e0c:	230c      	movs	r3, #12
    9e0e:	4013      	ands	r3, r2
    9e10:	d010      	beq.n	9e34 <_usb_device_interrupt_handler+0x418>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    9e12:	4b55      	ldr	r3, [pc, #340]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9e14:	6819      	ldr	r1, [r3, #0]
    9e16:	1c3b      	adds	r3, r7, #0
    9e18:	330b      	adds	r3, #11
    9e1a:	781a      	ldrb	r2, [r3, #0]
    9e1c:	23d4      	movs	r3, #212	; 0xd4
    9e1e:	0112      	lsls	r2, r2, #4
    9e20:	188a      	adds	r2, r1, r2
    9e22:	18d3      	adds	r3, r2, r3
    9e24:	685a      	ldr	r2, [r3, #4]
    9e26:	4b50      	ldr	r3, [pc, #320]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9e28:	6819      	ldr	r1, [r3, #0]
    9e2a:	4b51      	ldr	r3, [pc, #324]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9e2c:	1c08      	adds	r0, r1, #0
    9e2e:	1c19      	adds	r1, r3, #0
    9e30:	4790      	blx	r2
					}
					return;
    9e32:	e095      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
    9e34:	e094      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    9e36:	1dbb      	adds	r3, r7, #6
    9e38:	881a      	ldrh	r2, [r3, #0]
    9e3a:	2303      	movs	r3, #3
    9e3c:	4013      	ands	r3, r2
    9e3e:	d100      	bne.n	9e42 <_usb_device_interrupt_handler+0x426>
    9e40:	e081      	b.n	9f46 <_usb_device_interrupt_handler+0x52a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9e42:	4b49      	ldr	r3, [pc, #292]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9e44:	681b      	ldr	r3, [r3, #0]
    9e46:	681a      	ldr	r2, [r3, #0]
    9e48:	1c3b      	adds	r3, r7, #0
    9e4a:	330b      	adds	r3, #11
    9e4c:	781b      	ldrb	r3, [r3, #0]
    9e4e:	3308      	adds	r3, #8
    9e50:	015b      	lsls	r3, r3, #5
    9e52:	18d3      	adds	r3, r2, r3
    9e54:	79db      	ldrb	r3, [r3, #7]
    9e56:	b2db      	uxtb	r3, r3
    9e58:	1c1a      	adds	r2, r3, #0
    9e5a:	2302      	movs	r3, #2
    9e5c:	4013      	ands	r3, r2
    9e5e:	d022      	beq.n	9ea6 <_usb_device_interrupt_handler+0x48a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    9e60:	4b41      	ldr	r3, [pc, #260]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9e62:	681b      	ldr	r3, [r3, #0]
    9e64:	681a      	ldr	r2, [r3, #0]
    9e66:	1c3b      	adds	r3, r7, #0
    9e68:	330b      	adds	r3, #11
    9e6a:	781b      	ldrb	r3, [r3, #0]
    9e6c:	3308      	adds	r3, #8
    9e6e:	015b      	lsls	r3, r3, #5
    9e70:	18d3      	adds	r3, r2, r3
    9e72:	2202      	movs	r2, #2
    9e74:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    9e76:	1c3b      	adds	r3, r7, #0
    9e78:	330b      	adds	r3, #11
    9e7a:	781b      	ldrb	r3, [r3, #0]
    9e7c:	2280      	movs	r2, #128	; 0x80
    9e7e:	4252      	negs	r2, r2
    9e80:	4313      	orrs	r3, r2
    9e82:	b2da      	uxtb	r2, r3
    9e84:	4b3a      	ldr	r3, [pc, #232]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9e86:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    9e88:	1c3b      	adds	r3, r7, #0
    9e8a:	330b      	adds	r3, #11
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	4a37      	ldr	r2, [pc, #220]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9e90:	015b      	lsls	r3, r3, #5
    9e92:	18d3      	adds	r3, r2, r3
    9e94:	3310      	adds	r3, #16
    9e96:	685b      	ldr	r3, [r3, #4]
    9e98:	049b      	lsls	r3, r3, #18
    9e9a:	0c9b      	lsrs	r3, r3, #18
    9e9c:	b29b      	uxth	r3, r3
    9e9e:	1c1a      	adds	r2, r3, #0
    9ea0:	4b33      	ldr	r3, [pc, #204]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9ea2:	805a      	strh	r2, [r3, #2]
    9ea4:	e039      	b.n	9f1a <_usb_device_interrupt_handler+0x4fe>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9ea6:	4b30      	ldr	r3, [pc, #192]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9ea8:	681b      	ldr	r3, [r3, #0]
    9eaa:	681a      	ldr	r2, [r3, #0]
    9eac:	1c3b      	adds	r3, r7, #0
    9eae:	330b      	adds	r3, #11
    9eb0:	781b      	ldrb	r3, [r3, #0]
    9eb2:	3308      	adds	r3, #8
    9eb4:	015b      	lsls	r3, r3, #5
    9eb6:	18d3      	adds	r3, r2, r3
    9eb8:	79db      	ldrb	r3, [r3, #7]
    9eba:	b2db      	uxtb	r3, r3
    9ebc:	1c1a      	adds	r2, r3, #0
    9ebe:	2301      	movs	r3, #1
    9ec0:	4013      	ands	r3, r2
    9ec2:	d02a      	beq.n	9f1a <_usb_device_interrupt_handler+0x4fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    9ec4:	4b28      	ldr	r3, [pc, #160]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9ec6:	681b      	ldr	r3, [r3, #0]
    9ec8:	681a      	ldr	r2, [r3, #0]
    9eca:	1c3b      	adds	r3, r7, #0
    9ecc:	330b      	adds	r3, #11
    9ece:	781b      	ldrb	r3, [r3, #0]
    9ed0:	3308      	adds	r3, #8
    9ed2:	015b      	lsls	r3, r3, #5
    9ed4:	18d3      	adds	r3, r2, r3
    9ed6:	2201      	movs	r2, #1
    9ed8:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    9eda:	4b25      	ldr	r3, [pc, #148]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9edc:	1c3a      	adds	r2, r7, #0
    9ede:	320b      	adds	r2, #11
    9ee0:	7812      	ldrb	r2, [r2, #0]
    9ee2:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    9ee4:	1c3b      	adds	r3, r7, #0
    9ee6:	330b      	adds	r3, #11
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	4a20      	ldr	r2, [pc, #128]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9eec:	015b      	lsls	r3, r3, #5
    9eee:	18d3      	adds	r3, r2, r3
    9ef0:	685b      	ldr	r3, [r3, #4]
    9ef2:	049b      	lsls	r3, r3, #18
    9ef4:	0c9b      	lsrs	r3, r3, #18
    9ef6:	b29b      	uxth	r3, r3
    9ef8:	1c1a      	adds	r2, r3, #0
    9efa:	4b1d      	ldr	r3, [pc, #116]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9efc:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    9efe:	1c3b      	adds	r3, r7, #0
    9f00:	330b      	adds	r3, #11
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	4a19      	ldr	r2, [pc, #100]	; (9f6c <_usb_device_interrupt_handler+0x550>)
    9f06:	015b      	lsls	r3, r3, #5
    9f08:	18d3      	adds	r3, r2, r3
    9f0a:	685b      	ldr	r3, [r3, #4]
    9f0c:	0b9b      	lsrs	r3, r3, #14
    9f0e:	049b      	lsls	r3, r3, #18
    9f10:	0c9b      	lsrs	r3, r3, #18
    9f12:	b29b      	uxth	r3, r3
    9f14:	1c1a      	adds	r2, r3, #0
    9f16:	4b16      	ldr	r3, [pc, #88]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9f18:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    9f1a:	1d3b      	adds	r3, r7, #4
    9f1c:	881a      	ldrh	r2, [r3, #0]
    9f1e:	2303      	movs	r3, #3
    9f20:	4013      	ands	r3, r2
    9f22:	d00f      	beq.n	9f44 <_usb_device_interrupt_handler+0x528>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    9f24:	4b10      	ldr	r3, [pc, #64]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9f26:	681a      	ldr	r2, [r3, #0]
    9f28:	1c3b      	adds	r3, r7, #0
    9f2a:	330b      	adds	r3, #11
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	330d      	adds	r3, #13
    9f30:	011b      	lsls	r3, r3, #4
    9f32:	18d3      	adds	r3, r2, r3
    9f34:	685a      	ldr	r2, [r3, #4]
    9f36:	4b0c      	ldr	r3, [pc, #48]	; (9f68 <_usb_device_interrupt_handler+0x54c>)
    9f38:	6819      	ldr	r1, [r3, #0]
    9f3a:	4b0d      	ldr	r3, [pc, #52]	; (9f70 <_usb_device_interrupt_handler+0x554>)
    9f3c:	1c08      	adds	r0, r1, #0
    9f3e:	1c19      	adds	r1, r3, #0
    9f40:	4790      	blx	r2
					}
					return;
    9f42:	e00d      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
    9f44:	e00c      	b.n	9f60 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    9f46:	1c3b      	adds	r3, r7, #0
    9f48:	330b      	adds	r3, #11
    9f4a:	781a      	ldrb	r2, [r3, #0]
    9f4c:	1c3b      	adds	r3, r7, #0
    9f4e:	330b      	adds	r3, #11
    9f50:	3201      	adds	r2, #1
    9f52:	701a      	strb	r2, [r3, #0]
    9f54:	1c3b      	adds	r3, r7, #0
    9f56:	330b      	adds	r3, #11
    9f58:	781b      	ldrb	r3, [r3, #0]
    9f5a:	2b07      	cmp	r3, #7
    9f5c:	d800      	bhi.n	9f60 <_usb_device_interrupt_handler+0x544>
    9f5e:	e5ca      	b.n	9af6 <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    9f60:	46bd      	mov	sp, r7
    9f62:	b004      	add	sp, #16
    9f64:	bd80      	pop	{r7, pc}
    9f66:	46c0      	nop			; (mov r8, r8)
    9f68:	20006d9c 	.word	0x20006d9c
    9f6c:	2000701c 	.word	0x2000701c
    9f70:	20006dac 	.word	0x20006dac

00009f74 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
    9f7a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    9f7c:	687b      	ldr	r3, [r7, #4]
    9f7e:	681a      	ldr	r2, [r3, #0]
    9f80:	687b      	ldr	r3, [r7, #4]
    9f82:	681b      	ldr	r3, [r3, #0]
    9f84:	781b      	ldrb	r3, [r3, #0]
    9f86:	b2db      	uxtb	r3, r3
    9f88:	2102      	movs	r1, #2
    9f8a:	430b      	orrs	r3, r1
    9f8c:	b2db      	uxtb	r3, r3
    9f8e:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    9f90:	46c0      	nop			; (mov r8, r8)
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	681b      	ldr	r3, [r3, #0]
    9f96:	789b      	ldrb	r3, [r3, #2]
    9f98:	b2db      	uxtb	r3, r3
    9f9a:	2b02      	cmp	r3, #2
    9f9c:	d0f9      	beq.n	9f92 <usb_enable+0x1e>
}
    9f9e:	46bd      	mov	sp, r7
    9fa0:	b002      	add	sp, #8
    9fa2:	bd80      	pop	{r7, pc}

00009fa4 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    9fa4:	b580      	push	{r7, lr}
    9fa6:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    9fa8:	4b07      	ldr	r3, [pc, #28]	; (9fc8 <USB_Handler+0x24>)
    9faa:	681b      	ldr	r3, [r3, #0]
    9fac:	681b      	ldr	r3, [r3, #0]
    9fae:	781b      	ldrb	r3, [r3, #0]
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	09db      	lsrs	r3, r3, #7
    9fb4:	b2db      	uxtb	r3, r3
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d002      	beq.n	9fc0 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    9fba:	4b04      	ldr	r3, [pc, #16]	; (9fcc <USB_Handler+0x28>)
    9fbc:	4798      	blx	r3
    9fbe:	e001      	b.n	9fc4 <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    9fc0:	4b03      	ldr	r3, [pc, #12]	; (9fd0 <USB_Handler+0x2c>)
    9fc2:	4798      	blx	r3
	}
}
    9fc4:	46bd      	mov	sp, r7
    9fc6:	bd80      	pop	{r7, pc}
    9fc8:	20006d9c 	.word	0x20006d9c
    9fcc:	000086b9 	.word	0x000086b9
    9fd0:	00009a1d 	.word	0x00009a1d

00009fd4 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    9fd4:	b580      	push	{r7, lr}
    9fd6:	b082      	sub	sp, #8
    9fd8:	af00      	add	r7, sp, #0
    9fda:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	2200      	movs	r2, #0
    9fe0:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	2201      	movs	r2, #1
    9fe6:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	2200      	movs	r2, #0
    9fec:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	2201      	movs	r2, #1
    9ff2:	70da      	strb	r2, [r3, #3]
}
    9ff4:	46bd      	mov	sp, r7
    9ff6:	b002      	add	sp, #8
    9ff8:	bd80      	pop	{r7, pc}
    9ffa:	46c0      	nop			; (mov r8, r8)

00009ffc <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    9ffc:	b580      	push	{r7, lr}
    9ffe:	b08c      	sub	sp, #48	; 0x30
    a000:	af00      	add	r7, sp, #0
    a002:	60f8      	str	r0, [r7, #12]
    a004:	60b9      	str	r1, [r7, #8]
    a006:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    a008:	4bbb      	ldr	r3, [pc, #748]	; (a2f8 <usb_init+0x2fc>)
    a00a:	2200      	movs	r2, #0
    a00c:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    a00e:	4bbb      	ldr	r3, [pc, #748]	; (a2fc <usb_init+0x300>)
    a010:	68fa      	ldr	r2, [r7, #12]
    a012:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    a014:	68fb      	ldr	r3, [r7, #12]
    a016:	68ba      	ldr	r2, [r7, #8]
    a018:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    a01a:	2001      	movs	r0, #1
    a01c:	2120      	movs	r1, #32
    a01e:	4bb8      	ldr	r3, [pc, #736]	; (a300 <usb_init+0x304>)
    a020:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    a022:	1c3b      	adds	r3, r7, #0
    a024:	3318      	adds	r3, #24
    a026:	1c18      	adds	r0, r3, #0
    a028:	4bb6      	ldr	r3, [pc, #728]	; (a304 <usb_init+0x308>)
    a02a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    a02c:	1c3b      	adds	r3, r7, #0
    a02e:	3318      	adds	r3, #24
    a030:	2206      	movs	r2, #6
    a032:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    a034:	1c3b      	adds	r3, r7, #0
    a036:	3318      	adds	r3, #24
    a038:	2018      	movs	r0, #24
    a03a:	1c19      	adds	r1, r3, #0
    a03c:	4bb2      	ldr	r3, [pc, #712]	; (a308 <usb_init+0x30c>)
    a03e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    a040:	1c3b      	adds	r3, r7, #0
    a042:	3318      	adds	r3, #24
    a044:	2206      	movs	r2, #6
    a046:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    a048:	1c3b      	adds	r3, r7, #0
    a04a:	3318      	adds	r3, #24
    a04c:	2019      	movs	r0, #25
    a04e:	1c19      	adds	r1, r3, #0
    a050:	4bad      	ldr	r3, [pc, #692]	; (a308 <usb_init+0x30c>)
    a052:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    a054:	1c3b      	adds	r3, r7, #0
    a056:	3314      	adds	r3, #20
    a058:	1c18      	adds	r0, r3, #0
    a05a:	4bac      	ldr	r3, [pc, #688]	; (a30c <usb_init+0x310>)
    a05c:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    a05e:	687b      	ldr	r3, [r7, #4]
    a060:	789a      	ldrb	r2, [r3, #2]
    a062:	1c3b      	adds	r3, r7, #0
    a064:	3314      	adds	r3, #20
    a066:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    a068:	1c3b      	adds	r3, r7, #0
    a06a:	3314      	adds	r3, #20
    a06c:	2006      	movs	r0, #6
    a06e:	1c19      	adds	r1, r3, #0
    a070:	4ba7      	ldr	r3, [pc, #668]	; (a310 <usb_init+0x314>)
    a072:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    a074:	2006      	movs	r0, #6
    a076:	4ba7      	ldr	r3, [pc, #668]	; (a314 <usb_init+0x318>)
    a078:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    a07a:	68bb      	ldr	r3, [r7, #8]
    a07c:	781a      	ldrb	r2, [r3, #0]
    a07e:	2101      	movs	r1, #1
    a080:	430a      	orrs	r2, r1
    a082:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    a084:	46c0      	nop			; (mov r8, r8)
    a086:	68bb      	ldr	r3, [r7, #8]
    a088:	789a      	ldrb	r2, [r3, #2]
    a08a:	2301      	movs	r3, #1
    a08c:	4013      	ands	r3, r2
    a08e:	b2db      	uxtb	r3, r3
    a090:	2b00      	cmp	r3, #0
    a092:	d1f8      	bne.n	a086 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a094:	4ba0      	ldr	r3, [pc, #640]	; (a318 <usb_init+0x31c>)
    a096:	78da      	ldrb	r2, [r3, #3]
    a098:	2103      	movs	r1, #3
    a09a:	438a      	bics	r2, r1
    a09c:	2102      	movs	r1, #2
    a09e:	430a      	orrs	r2, r1
    a0a0:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a0a2:	4b9d      	ldr	r3, [pc, #628]	; (a318 <usb_init+0x31c>)
    a0a4:	78da      	ldrb	r2, [r3, #3]
    a0a6:	210c      	movs	r1, #12
    a0a8:	438a      	bics	r2, r1
    a0aa:	2108      	movs	r1, #8
    a0ac:	430a      	orrs	r2, r1
    a0ae:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a0b0:	4b9a      	ldr	r3, [pc, #616]	; (a31c <usb_init+0x320>)
    a0b2:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    a0b4:	0b5a      	lsrs	r2, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    a0b6:	231f      	movs	r3, #31
    a0b8:	4013      	ands	r3, r2
    a0ba:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0be:	2b1f      	cmp	r3, #31
    a0c0:	d101      	bne.n	a0c6 <usb_init+0xca>
		pad_transn = 5;
    a0c2:	2305      	movs	r3, #5
    a0c4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0c8:	b2db      	uxtb	r3, r3
    a0ca:	1c1a      	adds	r2, r3, #0
    a0cc:	231f      	movs	r3, #31
    a0ce:	4013      	ands	r3, r2
    a0d0:	b2d9      	uxtb	r1, r3
    a0d2:	68bb      	ldr	r3, [r7, #8]
    a0d4:	221f      	movs	r2, #31
    a0d6:	400a      	ands	r2, r1
    a0d8:	0192      	lsls	r2, r2, #6
    a0da:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a0dc:	4990      	ldr	r1, [pc, #576]	; (a320 <usb_init+0x324>)
    a0de:	4001      	ands	r1, r0
    a0e0:	430a      	orrs	r2, r1
    a0e2:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a0e4:	4b8d      	ldr	r3, [pc, #564]	; (a31c <usb_init+0x320>)
    a0e6:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    a0e8:	0c9a      	lsrs	r2, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    a0ea:	231f      	movs	r3, #31
    a0ec:	4013      	ands	r3, r2
    a0ee:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    a0f0:	6a3b      	ldr	r3, [r7, #32]
    a0f2:	2b1f      	cmp	r3, #31
    a0f4:	d101      	bne.n	a0fa <usb_init+0xfe>
		pad_transp = 29;
    a0f6:	231d      	movs	r3, #29
    a0f8:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    a0fa:	6a3b      	ldr	r3, [r7, #32]
    a0fc:	b2db      	uxtb	r3, r3
    a0fe:	1c1a      	adds	r2, r3, #0
    a100:	231f      	movs	r3, #31
    a102:	4013      	ands	r3, r2
    a104:	b2d9      	uxtb	r1, r3
    a106:	68bb      	ldr	r3, [r7, #8]
    a108:	221f      	movs	r2, #31
    a10a:	400a      	ands	r2, r1
    a10c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    a10e:	201f      	movs	r0, #31
    a110:	4381      	bics	r1, r0
    a112:	430a      	orrs	r2, r1
    a114:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a116:	4b81      	ldr	r3, [pc, #516]	; (a31c <usb_init+0x320>)
    a118:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    a11a:	0dda      	lsrs	r2, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    a11c:	2307      	movs	r3, #7
    a11e:	4013      	ands	r3, r2
    a120:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    a122:	69fb      	ldr	r3, [r7, #28]
    a124:	2b07      	cmp	r3, #7
    a126:	d101      	bne.n	a12c <usb_init+0x130>
		pad_trim = 3;
    a128:	2303      	movs	r3, #3
    a12a:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    a12c:	69fb      	ldr	r3, [r7, #28]
    a12e:	b2db      	uxtb	r3, r3
    a130:	1c1a      	adds	r2, r3, #0
    a132:	2307      	movs	r3, #7
    a134:	4013      	ands	r3, r2
    a136:	b2d9      	uxtb	r1, r3
    a138:	68bb      	ldr	r3, [r7, #8]
    a13a:	2207      	movs	r2, #7
    a13c:	400a      	ands	r2, r1
    a13e:	0312      	lsls	r2, r2, #12
    a140:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    a142:	4978      	ldr	r1, [pc, #480]	; (a324 <usb_init+0x328>)
    a144:	4001      	ands	r1, r0
    a146:	430a      	orrs	r2, r1
    a148:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	781a      	ldrb	r2, [r3, #0]
    a14e:	68bb      	ldr	r3, [r7, #8]
    a150:	01d2      	lsls	r2, r2, #7
    a152:	7818      	ldrb	r0, [r3, #0]
    a154:	217f      	movs	r1, #127	; 0x7f
    a156:	4001      	ands	r1, r0
    a158:	430a      	orrs	r2, r1
    a15a:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	7859      	ldrb	r1, [r3, #1]
    a160:	68bb      	ldr	r3, [r7, #8]
    a162:	2201      	movs	r2, #1
    a164:	400a      	ands	r2, r1
    a166:	0092      	lsls	r2, r2, #2
    a168:	7819      	ldrb	r1, [r3, #0]
    a16a:	2004      	movs	r0, #4
    a16c:	4381      	bics	r1, r0
    a16e:	430a      	orrs	r2, r1
    a170:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    a172:	4a6d      	ldr	r2, [pc, #436]	; (a328 <usb_init+0x32c>)
    a174:	68bb      	ldr	r3, [r7, #8]
    a176:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    a178:	687b      	ldr	r3, [r7, #4]
    a17a:	78db      	ldrb	r3, [r3, #3]
    a17c:	2b01      	cmp	r3, #1
    a17e:	d106      	bne.n	a18e <usb_init+0x192>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	681b      	ldr	r3, [r3, #0]
    a184:	891a      	ldrh	r2, [r3, #8]
    a186:	210c      	movs	r1, #12
    a188:	438a      	bics	r2, r1
    a18a:	811a      	strh	r2, [r3, #8]
    a18c:	e00b      	b.n	a1a6 <usb_init+0x1aa>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	78db      	ldrb	r3, [r3, #3]
    a192:	2b00      	cmp	r3, #0
    a194:	d107      	bne.n	a1a6 <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    a196:	68fb      	ldr	r3, [r7, #12]
    a198:	681b      	ldr	r3, [r3, #0]
    a19a:	891a      	ldrh	r2, [r3, #8]
    a19c:	210c      	movs	r1, #12
    a19e:	438a      	bics	r2, r1
    a1a0:	2104      	movs	r1, #4
    a1a2:	430a      	orrs	r2, r1
    a1a4:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    a1a6:	4a60      	ldr	r2, [pc, #384]	; (a328 <usb_init+0x32c>)
    a1a8:	2380      	movs	r3, #128	; 0x80
    a1aa:	005b      	lsls	r3, r3, #1
    a1ac:	1c10      	adds	r0, r2, #0
    a1ae:	2100      	movs	r1, #0
    a1b0:	1c1a      	adds	r2, r3, #0
    a1b2:	4b5e      	ldr	r3, [pc, #376]	; (a32c <usb_init+0x330>)
    a1b4:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a1b6:	2300      	movs	r3, #0
    a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    a1ba:	e008      	b.n	a1ce <usb_init+0x1d2>
		module_inst->host_callback[i] = NULL;
    a1bc:	68fa      	ldr	r2, [r7, #12]
    a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1c0:	009b      	lsls	r3, r3, #2
    a1c2:	18d3      	adds	r3, r2, r3
    a1c4:	2200      	movs	r2, #0
    a1c6:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1ca:	3301      	adds	r3, #1
    a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1d0:	2b07      	cmp	r3, #7
    a1d2:	d9f3      	bls.n	a1bc <usb_init+0x1c0>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a1d4:	2300      	movs	r3, #0
    a1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a1d8:	e015      	b.n	a206 <usb_init+0x20a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a1da:	2300      	movs	r3, #0
    a1dc:	62bb      	str	r3, [r7, #40]	; 0x28
    a1de:	e00c      	b.n	a1fa <usb_init+0x1fe>
			module_inst->host_pipe_callback[i][j] = NULL;
    a1e0:	68fa      	ldr	r2, [r7, #12]
    a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a1e4:	0099      	lsls	r1, r3, #2
    a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1e8:	18cb      	adds	r3, r1, r3
    a1ea:	3308      	adds	r3, #8
    a1ec:	009b      	lsls	r3, r3, #2
    a1ee:	18d3      	adds	r3, r2, r3
    a1f0:	2200      	movs	r2, #0
    a1f2:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1f6:	3301      	adds	r3, #1
    a1f8:	62bb      	str	r3, [r7, #40]	; 0x28
    a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a1fc:	2b03      	cmp	r3, #3
    a1fe:	d9ef      	bls.n	a1e0 <usb_init+0x1e4>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a202:	3301      	adds	r3, #1
    a204:	62fb      	str	r3, [r7, #44]	; 0x2c
    a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a208:	2b07      	cmp	r3, #7
    a20a:	d9e6      	bls.n	a1da <usb_init+0x1de>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    a20c:	68fa      	ldr	r2, [r7, #12]
    a20e:	23a4      	movs	r3, #164	; 0xa4
    a210:	2100      	movs	r1, #0
    a212:	54d1      	strb	r1, [r2, r3]
	module_inst->host_enabled_callback_mask = 0;
    a214:	68fa      	ldr	r2, [r7, #12]
    a216:	23a5      	movs	r3, #165	; 0xa5
    a218:	2100      	movs	r1, #0
    a21a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a21c:	2300      	movs	r3, #0
    a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a220:	e010      	b.n	a244 <usb_init+0x248>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    a222:	68f9      	ldr	r1, [r7, #12]
    a224:	23a0      	movs	r3, #160	; 0xa0
    a226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a228:	188a      	adds	r2, r1, r2
    a22a:	18d3      	adds	r3, r2, r3
    a22c:	2200      	movs	r2, #0
    a22e:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    a230:	68f9      	ldr	r1, [r7, #12]
    a232:	23a8      	movs	r3, #168	; 0xa8
    a234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a236:	188a      	adds	r2, r1, r2
    a238:	18d3      	adds	r3, r2, r3
    a23a:	2200      	movs	r2, #0
    a23c:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a240:	3301      	adds	r3, #1
    a242:	62fb      	str	r3, [r7, #44]	; 0x2c
    a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a246:	2b07      	cmp	r3, #7
    a248:	d9eb      	bls.n	a222 <usb_init+0x226>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a24a:	2300      	movs	r3, #0
    a24c:	62fb      	str	r3, [r7, #44]	; 0x2c
    a24e:	e008      	b.n	a262 <usb_init+0x266>
		module_inst->device_callback[i] = NULL;
    a250:	68fb      	ldr	r3, [r7, #12]
    a252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a254:	322e      	adds	r2, #46	; 0x2e
    a256:	0092      	lsls	r2, r2, #2
    a258:	2100      	movs	r1, #0
    a25a:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a25e:	3301      	adds	r3, #1
    a260:	62fb      	str	r3, [r7, #44]	; 0x2c
    a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a264:	2b06      	cmp	r3, #6
    a266:	d9f3      	bls.n	a250 <usb_init+0x254>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    a268:	2300      	movs	r3, #0
    a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a26c:	e015      	b.n	a29a <usb_init+0x29e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    a26e:	2300      	movs	r3, #0
    a270:	62bb      	str	r3, [r7, #40]	; 0x28
    a272:	e00c      	b.n	a28e <usb_init+0x292>
			module_inst->device_endpoint_callback[i][j] = NULL;
    a274:	68fa      	ldr	r2, [r7, #12]
    a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a278:	0099      	lsls	r1, r3, #2
    a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a27c:	18cb      	adds	r3, r1, r3
    a27e:	3334      	adds	r3, #52	; 0x34
    a280:	009b      	lsls	r3, r3, #2
    a282:	18d3      	adds	r3, r2, r3
    a284:	2200      	movs	r2, #0
    a286:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a28a:	3301      	adds	r3, #1
    a28c:	62bb      	str	r3, [r7, #40]	; 0x28
    a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a290:	2b03      	cmp	r3, #3
    a292:	d9ef      	bls.n	a274 <usb_init+0x278>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a296:	3301      	adds	r3, #1
    a298:	62fb      	str	r3, [r7, #44]	; 0x2c
    a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a29c:	2b07      	cmp	r3, #7
    a29e:	d9e6      	bls.n	a26e <usb_init+0x272>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    a2a0:	68fa      	ldr	r2, [r7, #12]
    a2a2:	23aa      	movs	r3, #170	; 0xaa
    a2a4:	005b      	lsls	r3, r3, #1
    a2a6:	2100      	movs	r1, #0
    a2a8:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    a2aa:	68fa      	ldr	r2, [r7, #12]
    a2ac:	23ab      	movs	r3, #171	; 0xab
    a2ae:	005b      	lsls	r3, r3, #1
    a2b0:	2100      	movs	r1, #0
    a2b2:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    a2b4:	2300      	movs	r3, #0
    a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
    a2b8:	e012      	b.n	a2e0 <usb_init+0x2e4>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    a2ba:	68f9      	ldr	r1, [r7, #12]
    a2bc:	23ac      	movs	r3, #172	; 0xac
    a2be:	005b      	lsls	r3, r3, #1
    a2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a2c2:	188a      	adds	r2, r1, r2
    a2c4:	18d3      	adds	r3, r2, r3
    a2c6:	2200      	movs	r2, #0
    a2c8:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    a2ca:	68f9      	ldr	r1, [r7, #12]
    a2cc:	23b0      	movs	r3, #176	; 0xb0
    a2ce:	005b      	lsls	r3, r3, #1
    a2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a2d2:	188a      	adds	r2, r1, r2
    a2d4:	18d3      	adds	r3, r2, r3
    a2d6:	2200      	movs	r2, #0
    a2d8:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a2dc:	3301      	adds	r3, #1
    a2de:	62bb      	str	r3, [r7, #40]	; 0x28
    a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a2e2:	2b07      	cmp	r3, #7
    a2e4:	d9e9      	bls.n	a2ba <usb_init+0x2be>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    a2e6:	2007      	movs	r0, #7
    a2e8:	4b11      	ldr	r3, [pc, #68]	; (a330 <usb_init+0x334>)
    a2ea:	4798      	blx	r3

	return STATUS_OK;
    a2ec:	2300      	movs	r3, #0
}
    a2ee:	1c18      	adds	r0, r3, #0
    a2f0:	46bd      	mov	sp, r7
    a2f2:	b00c      	add	sp, #48	; 0x30
    a2f4:	bd80      	pop	{r7, pc}
    a2f6:	46c0      	nop			; (mov r8, r8)
    a2f8:	20006db4 	.word	0x20006db4
    a2fc:	20006d9c 	.word	0x20006d9c
    a300:	00008609 	.word	0x00008609
    a304:	00008665 	.word	0x00008665
    a308:	00006c49 	.word	0x00006c49
    a30c:	000085f5 	.word	0x000085f5
    a310:	00006965 	.word	0x00006965
    a314:	000069a5 	.word	0x000069a5
    a318:	41005000 	.word	0x41005000
    a31c:	00806024 	.word	0x00806024
    a320:	fffff83f 	.word	0xfffff83f
    a324:	ffff8fff 	.word	0xffff8fff
    a328:	2000701c 	.word	0x2000701c
    a32c:	0000b0bf 	.word	0x0000b0bf
    a330:	0000868d 	.word	0x0000868d

0000a334 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    a334:	b580      	push	{r7, lr}
    a336:	b082      	sub	sp, #8
    a338:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    a33a:	4b2d      	ldr	r3, [pc, #180]	; (a3f0 <Reset_Handler+0xbc>)
    a33c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    a33e:	4b2d      	ldr	r3, [pc, #180]	; (a3f4 <Reset_Handler+0xc0>)
    a340:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    a342:	687a      	ldr	r2, [r7, #4]
    a344:	683b      	ldr	r3, [r7, #0]
    a346:	429a      	cmp	r2, r3
    a348:	d00c      	beq.n	a364 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    a34a:	e007      	b.n	a35c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    a34c:	683b      	ldr	r3, [r7, #0]
    a34e:	1d1a      	adds	r2, r3, #4
    a350:	603a      	str	r2, [r7, #0]
    a352:	687a      	ldr	r2, [r7, #4]
    a354:	1d11      	adds	r1, r2, #4
    a356:	6079      	str	r1, [r7, #4]
    a358:	6812      	ldr	r2, [r2, #0]
    a35a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    a35c:	683a      	ldr	r2, [r7, #0]
    a35e:	4b26      	ldr	r3, [pc, #152]	; (a3f8 <Reset_Handler+0xc4>)
    a360:	429a      	cmp	r2, r3
    a362:	d3f3      	bcc.n	a34c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a364:	4b25      	ldr	r3, [pc, #148]	; (a3fc <Reset_Handler+0xc8>)
    a366:	603b      	str	r3, [r7, #0]
    a368:	e004      	b.n	a374 <Reset_Handler+0x40>
                *pDest++ = 0;
    a36a:	683b      	ldr	r3, [r7, #0]
    a36c:	1d1a      	adds	r2, r3, #4
    a36e:	603a      	str	r2, [r7, #0]
    a370:	2200      	movs	r2, #0
    a372:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a374:	683a      	ldr	r2, [r7, #0]
    a376:	4b22      	ldr	r3, [pc, #136]	; (a400 <Reset_Handler+0xcc>)
    a378:	429a      	cmp	r2, r3
    a37a:	d3f6      	bcc.n	a36a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    a37c:	4b21      	ldr	r3, [pc, #132]	; (a404 <Reset_Handler+0xd0>)
    a37e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    a380:	4b21      	ldr	r3, [pc, #132]	; (a408 <Reset_Handler+0xd4>)
    a382:	687a      	ldr	r2, [r7, #4]
    a384:	21ff      	movs	r1, #255	; 0xff
    a386:	438a      	bics	r2, r1
    a388:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a38a:	4a20      	ldr	r2, [pc, #128]	; (a40c <Reset_Handler+0xd8>)
    a38c:	2390      	movs	r3, #144	; 0x90
    a38e:	005b      	lsls	r3, r3, #1
    a390:	2102      	movs	r1, #2
    a392:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a394:	4b1e      	ldr	r3, [pc, #120]	; (a410 <Reset_Handler+0xdc>)
    a396:	78da      	ldrb	r2, [r3, #3]
    a398:	2103      	movs	r1, #3
    a39a:	438a      	bics	r2, r1
    a39c:	2102      	movs	r1, #2
    a39e:	430a      	orrs	r2, r1
    a3a0:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a3a2:	4b1b      	ldr	r3, [pc, #108]	; (a410 <Reset_Handler+0xdc>)
    a3a4:	78da      	ldrb	r2, [r3, #3]
    a3a6:	210c      	movs	r1, #12
    a3a8:	438a      	bics	r2, r1
    a3aa:	2108      	movs	r1, #8
    a3ac:	430a      	orrs	r2, r1
    a3ae:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    a3b0:	4b18      	ldr	r3, [pc, #96]	; (a414 <Reset_Handler+0xe0>)
    a3b2:	7b9a      	ldrb	r2, [r3, #14]
    a3b4:	2130      	movs	r1, #48	; 0x30
    a3b6:	438a      	bics	r2, r1
    a3b8:	2120      	movs	r1, #32
    a3ba:	430a      	orrs	r2, r1
    a3bc:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    a3be:	4b15      	ldr	r3, [pc, #84]	; (a414 <Reset_Handler+0xe0>)
    a3c0:	7b9a      	ldrb	r2, [r3, #14]
    a3c2:	210c      	movs	r1, #12
    a3c4:	438a      	bics	r2, r1
    a3c6:	2108      	movs	r1, #8
    a3c8:	430a      	orrs	r2, r1
    a3ca:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a3cc:	4b11      	ldr	r3, [pc, #68]	; (a414 <Reset_Handler+0xe0>)
    a3ce:	7b9a      	ldrb	r2, [r3, #14]
    a3d0:	2103      	movs	r1, #3
    a3d2:	438a      	bics	r2, r1
    a3d4:	2102      	movs	r1, #2
    a3d6:	430a      	orrs	r2, r1
    a3d8:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    a3da:	4b0f      	ldr	r3, [pc, #60]	; (a418 <Reset_Handler+0xe4>)
    a3dc:	685a      	ldr	r2, [r3, #4]
    a3de:	2180      	movs	r1, #128	; 0x80
    a3e0:	430a      	orrs	r2, r1
    a3e2:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    a3e4:	4b0d      	ldr	r3, [pc, #52]	; (a41c <Reset_Handler+0xe8>)
    a3e6:	4798      	blx	r3

        /* Branch to main function */
        main();
    a3e8:	4b0d      	ldr	r3, [pc, #52]	; (a420 <Reset_Handler+0xec>)
    a3ea:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    a3ec:	e7fe      	b.n	a3ec <Reset_Handler+0xb8>
    a3ee:	46c0      	nop			; (mov r8, r8)
    a3f0:	0000b388 	.word	0x0000b388
    a3f4:	20000000 	.word	0x20000000
    a3f8:	200002dc 	.word	0x200002dc
    a3fc:	200002dc 	.word	0x200002dc
    a400:	20007190 	.word	0x20007190
    a404:	00000000 	.word	0x00000000
    a408:	e000ed00 	.word	0xe000ed00
    a40c:	41007000 	.word	0x41007000
    a410:	41005000 	.word	0x41005000
    a414:	41004800 	.word	0x41004800
    a418:	41004000 	.word	0x41004000
    a41c:	0000b061 	.word	0x0000b061
    a420:	0000a579 	.word	0x0000a579

0000a424 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    a424:	b580      	push	{r7, lr}
    a426:	af00      	add	r7, sp, #0
        while (1) {
        }
    a428:	e7fe      	b.n	a428 <Dummy_Handler+0x4>
    a42a:	46c0      	nop			; (mov r8, r8)

0000a42c <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    a42c:	b580      	push	{r7, lr}
    a42e:	b082      	sub	sp, #8
    a430:	af00      	add	r7, sp, #0
    a432:	1c02      	adds	r2, r0, #0
    a434:	1dfb      	adds	r3, r7, #7
    a436:	701a      	strb	r2, [r3, #0]
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    a438:	4b13      	ldr	r3, [pc, #76]	; (a488 <system_set_sleepmode+0x5c>)
    a43a:	685a      	ldr	r2, [r3, #4]
    a43c:	21c0      	movs	r1, #192	; 0xc0
    a43e:	0089      	lsls	r1, r1, #2
    a440:	430a      	orrs	r2, r1
    a442:	605a      	str	r2, [r3, #4]
#endif

	switch (sleep_mode) {
    a444:	1dfb      	adds	r3, r7, #7
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	2b00      	cmp	r3, #0
    a44a:	db16      	blt.n	a47a <system_set_sleepmode+0x4e>
    a44c:	2b02      	cmp	r3, #2
    a44e:	dd02      	ble.n	a456 <system_set_sleepmode+0x2a>
    a450:	2b03      	cmp	r3, #3
    a452:	d00b      	beq.n	a46c <system_set_sleepmode+0x40>
    a454:	e011      	b.n	a47a <system_set_sleepmode+0x4e>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    a456:	4b0d      	ldr	r3, [pc, #52]	; (a48c <system_set_sleepmode+0x60>)
    a458:	4a0c      	ldr	r2, [pc, #48]	; (a48c <system_set_sleepmode+0x60>)
    a45a:	6912      	ldr	r2, [r2, #16]
    a45c:	2104      	movs	r1, #4
    a45e:	438a      	bics	r2, r1
    a460:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    a462:	4b0b      	ldr	r3, [pc, #44]	; (a490 <system_set_sleepmode+0x64>)
    a464:	1dfa      	adds	r2, r7, #7
    a466:	7812      	ldrb	r2, [r2, #0]
    a468:	705a      	strb	r2, [r3, #1]
			break;
    a46a:	e008      	b.n	a47e <system_set_sleepmode+0x52>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    a46c:	4b07      	ldr	r3, [pc, #28]	; (a48c <system_set_sleepmode+0x60>)
    a46e:	4a07      	ldr	r2, [pc, #28]	; (a48c <system_set_sleepmode+0x60>)
    a470:	6912      	ldr	r2, [r2, #16]
    a472:	2104      	movs	r1, #4
    a474:	430a      	orrs	r2, r1
    a476:	611a      	str	r2, [r3, #16]
			break;
    a478:	e001      	b.n	a47e <system_set_sleepmode+0x52>

		default:
			return STATUS_ERR_INVALID_ARG;
    a47a:	2317      	movs	r3, #23
    a47c:	e000      	b.n	a480 <system_set_sleepmode+0x54>
	}

	return STATUS_OK;
    a47e:	2300      	movs	r3, #0
}
    a480:	1c18      	adds	r0, r3, #0
    a482:	46bd      	mov	sp, r7
    a484:	b002      	add	sp, #8
    a486:	bd80      	pop	{r7, pc}
    a488:	41004000 	.word	0x41004000
    a48c:	e000ed00 	.word	0xe000ed00
    a490:	40000400 	.word	0x40000400

0000a494 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    a494:	b580      	push	{r7, lr}
    a496:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    a498:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    a49c:	bf30      	wfi
	__DSB();
	__WFI();
}
    a49e:	46bd      	mov	sp, r7
    a4a0:	bd80      	pop	{r7, pc}
    a4a2:	46c0      	nop			; (mov r8, r8)

0000a4a4 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    a4a4:	b580      	push	{r7, lr}
    a4a6:	b082      	sub	sp, #8
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	1c02      	adds	r2, r0, #0
    a4ac:	1dfb      	adds	r3, r7, #7
    a4ae:	701a      	strb	r2, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    a4b0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    a4b2:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    a4b6:	4b0a      	ldr	r3, [pc, #40]	; (a4e0 <sleepmgr_sleep+0x3c>)
    a4b8:	2200      	movs	r2, #0
    a4ba:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    a4bc:	1dfb      	adds	r3, r7, #7
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	3b01      	subs	r3, #1
    a4c2:	b2db      	uxtb	r3, r3
    a4c4:	1c18      	adds	r0, r3, #0
    a4c6:	4b07      	ldr	r3, [pc, #28]	; (a4e4 <sleepmgr_sleep+0x40>)
    a4c8:	4798      	blx	r3
	cpu_irq_enable();
    a4ca:	4b05      	ldr	r3, [pc, #20]	; (a4e0 <sleepmgr_sleep+0x3c>)
    a4cc:	2201      	movs	r2, #1
    a4ce:	701a      	strb	r2, [r3, #0]
    a4d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a4d4:	b662      	cpsie	i
	system_sleep();
    a4d6:	4b04      	ldr	r3, [pc, #16]	; (a4e8 <sleepmgr_sleep+0x44>)
    a4d8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    a4da:	46bd      	mov	sp, r7
    a4dc:	b002      	add	sp, #8
    a4de:	bd80      	pop	{r7, pc}
    a4e0:	2000025c 	.word	0x2000025c
    a4e4:	0000a42d 	.word	0x0000a42d
    a4e8:	0000a495 	.word	0x0000a495

0000a4ec <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
    a4ec:	b580      	push	{r7, lr}
    a4ee:	b082      	sub	sp, #8
    a4f0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
    a4f2:	1dfb      	adds	r3, r7, #7
    a4f4:	2200      	movs	r2, #0
    a4f6:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
    a4f8:	4b0a      	ldr	r3, [pc, #40]	; (a524 <sleepmgr_get_sleep_mode+0x38>)
    a4fa:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    a4fc:	e007      	b.n	a50e <sleepmgr_get_sleep_mode+0x22>
		lock_ptr++;
    a4fe:	683b      	ldr	r3, [r7, #0]
    a500:	3301      	adds	r3, #1
    a502:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    a504:	1dfb      	adds	r3, r7, #7
    a506:	1dfa      	adds	r2, r7, #7
    a508:	7812      	ldrb	r2, [r2, #0]
    a50a:	3201      	adds	r2, #1
    a50c:	701a      	strb	r2, [r3, #0]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    a50e:	683b      	ldr	r3, [r7, #0]
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	2b00      	cmp	r3, #0
    a514:	d0f3      	beq.n	a4fe <sleepmgr_get_sleep_mode+0x12>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
    a516:	1dfb      	adds	r3, r7, #7
    a518:	781b      	ldrb	r3, [r3, #0]
}
    a51a:	1c18      	adds	r0, r3, #0
    a51c:	46bd      	mov	sp, r7
    a51e:	b002      	add	sp, #8
    a520:	bd80      	pop	{r7, pc}
    a522:	46c0      	nop			; (mov r8, r8)
    a524:	20006dc4 	.word	0x20006dc4

0000a528 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
    a528:	b590      	push	{r4, r7, lr}
    a52a:	b083      	sub	sp, #12
    a52c:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    a52e:	b672      	cpsid	i
    a530:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    a534:	4b0d      	ldr	r3, [pc, #52]	; (a56c <sleepmgr_enter_sleep+0x44>)
    a536:	2200      	movs	r2, #0
    a538:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
    a53a:	1dfc      	adds	r4, r7, #7
    a53c:	4b0c      	ldr	r3, [pc, #48]	; (a570 <sleepmgr_enter_sleep+0x48>)
    a53e:	4798      	blx	r3
    a540:	1c03      	adds	r3, r0, #0
    a542:	7023      	strb	r3, [r4, #0]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    a544:	1dfb      	adds	r3, r7, #7
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	2b00      	cmp	r3, #0
    a54a:	d106      	bne.n	a55a <sleepmgr_enter_sleep+0x32>
		cpu_irq_enable();
    a54c:	4b07      	ldr	r3, [pc, #28]	; (a56c <sleepmgr_enter_sleep+0x44>)
    a54e:	2201      	movs	r2, #1
    a550:	701a      	strb	r2, [r3, #0]
    a552:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a556:	b662      	cpsie	i
		return;
    a558:	e004      	b.n	a564 <sleepmgr_enter_sleep+0x3c>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
    a55a:	1dfb      	adds	r3, r7, #7
    a55c:	781b      	ldrb	r3, [r3, #0]
    a55e:	1c18      	adds	r0, r3, #0
    a560:	4b04      	ldr	r3, [pc, #16]	; (a574 <sleepmgr_enter_sleep+0x4c>)
    a562:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    a564:	46bd      	mov	sp, r7
    a566:	b003      	add	sp, #12
    a568:	bd90      	pop	{r4, r7, pc}
    a56a:	46c0      	nop			; (mov r8, r8)
    a56c:	2000025c 	.word	0x2000025c
    a570:	0000a4ed 	.word	0x0000a4ed
    a574:	0000a4a5 	.word	0x0000a4a5

0000a578 <main>:
static volatile bool main_b_cdc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)//
{
    a578:	b580      	push	{r7, lr}
    a57a:	af00      	add	r7, sp, #0
	irq_initialize_vectors();
	cpu_irq_enable();
    a57c:	4b21      	ldr	r3, [pc, #132]	; (a604 <main+0x8c>)
    a57e:	2201      	movs	r2, #1
    a580:	701a      	strb	r2, [r3, #0]
    a582:	f3bf 8f5f 	dmb	sy
    a586:	b662      	cpsie	i
	//sleepmgr_init();
#if !SAMD21 && !SAMR21 && !SAML21
	sysclk_init();
	board_init();
#else
	system_init();
    a588:	4b1f      	ldr	r3, [pc, #124]	; (a608 <main+0x90>)
    a58a:	4798      	blx	r3
#endif
	ui_init();
    a58c:	4b1f      	ldr	r3, [pc, #124]	; (a60c <main+0x94>)
    a58e:	4798      	blx	r3
	ui_powerdown();
    a590:	4b1f      	ldr	r3, [pc, #124]	; (a610 <main+0x98>)
    a592:	4798      	blx	r3

	memories_initialization();
    a594:	4b1f      	ldr	r3, [pc, #124]	; (a614 <main+0x9c>)
    a596:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    a598:	4b1f      	ldr	r3, [pc, #124]	; (a618 <main+0xa0>)
    a59a:	4798      	blx	r3
	while (true) {

	//this is just an attempt to
	static volatile uint16_t virtual_sof_sub = 0;
	
	if (udd_get_frame_number()/500 == virtual_sof_sub++) 
    a59c:	4b1f      	ldr	r3, [pc, #124]	; (a61c <main+0xa4>)
    a59e:	4798      	blx	r3
    a5a0:	1c03      	adds	r3, r0, #0
    a5a2:	1c1a      	adds	r2, r3, #0
    a5a4:	4b1e      	ldr	r3, [pc, #120]	; (a620 <main+0xa8>)
    a5a6:	1c10      	adds	r0, r2, #0
    a5a8:	22fa      	movs	r2, #250	; 0xfa
    a5aa:	0051      	lsls	r1, r2, #1
    a5ac:	4798      	blx	r3
    a5ae:	1c03      	adds	r3, r0, #0
    a5b0:	b29a      	uxth	r2, r3
    a5b2:	4b1c      	ldr	r3, [pc, #112]	; (a624 <main+0xac>)
    a5b4:	881b      	ldrh	r3, [r3, #0]
    a5b6:	b29b      	uxth	r3, r3
    a5b8:	1c59      	adds	r1, r3, #1
    a5ba:	b288      	uxth	r0, r1
    a5bc:	4919      	ldr	r1, [pc, #100]	; (a624 <main+0xac>)
    a5be:	8008      	strh	r0, [r1, #0]
    a5c0:	429a      	cmp	r2, r3
    a5c2:	d10b      	bne.n	a5dc <main+0x64>
	{
		virtual_sof_sub = 0;
    a5c4:	4b17      	ldr	r3, [pc, #92]	; (a624 <main+0xac>)
    a5c6:	2200      	movs	r2, #0
    a5c8:	801a      	strh	r2, [r3, #0]
		static uint16_t virtual_sof = 0;
		ui_process(virtual_sof++);
    a5ca:	4b17      	ldr	r3, [pc, #92]	; (a628 <main+0xb0>)
    a5cc:	881b      	ldrh	r3, [r3, #0]
    a5ce:	1c5a      	adds	r2, r3, #1
    a5d0:	b291      	uxth	r1, r2
    a5d2:	4a15      	ldr	r2, [pc, #84]	; (a628 <main+0xb0>)
    a5d4:	8011      	strh	r1, [r2, #0]
    a5d6:	1c18      	adds	r0, r3, #0
    a5d8:	4b14      	ldr	r3, [pc, #80]	; (a62c <main+0xb4>)
    a5da:	4798      	blx	r3
	}
	
//	ui_process(udd_get_frame_number());
	
		if (main_b_msc_enable) {
    a5dc:	4b14      	ldr	r3, [pc, #80]	; (a630 <main+0xb8>)
    a5de:	781b      	ldrb	r3, [r3, #0]
    a5e0:	b2db      	uxtb	r3, r3
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d00a      	beq.n	a5fc <main+0x84>
			if (!udi_msc_process_trans()) {
    a5e6:	4b13      	ldr	r3, [pc, #76]	; (a634 <main+0xbc>)
    a5e8:	4798      	blx	r3
    a5ea:	1c03      	adds	r3, r0, #0
    a5ec:	2201      	movs	r2, #1
    a5ee:	4053      	eors	r3, r2
    a5f0:	b2db      	uxtb	r3, r3
    a5f2:	2b00      	cmp	r3, #0
    a5f4:	d005      	beq.n	a602 <main+0x8a>
				sleepmgr_enter_sleep();
    a5f6:	4b10      	ldr	r3, [pc, #64]	; (a638 <main+0xc0>)
    a5f8:	4798      	blx	r3
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
    a5fa:	e7cf      	b.n	a59c <main+0x24>
		if (main_b_msc_enable) {
			if (!udi_msc_process_trans()) {
				sleepmgr_enter_sleep();
			}
		}else{
			sleepmgr_enter_sleep();
    a5fc:	4b0e      	ldr	r3, [pc, #56]	; (a638 <main+0xc0>)
    a5fe:	4798      	blx	r3
		}
	}
    a600:	e7cc      	b.n	a59c <main+0x24>
    a602:	e7cb      	b.n	a59c <main+0x24>
    a604:	2000025c 	.word	0x2000025c
    a608:	00006ca1 	.word	0x00006ca1
    a60c:	00000a11 	.word	0x00000a11
    a610:	00000a89 	.word	0x00000a89
    a614:	0000a90d 	.word	0x0000a90d
    a618:	00003a39 	.word	0x00003a39
    a61c:	000074f9 	.word	0x000074f9
    a620:	0000ae7d 	.word	0x0000ae7d
    a624:	20006dbc 	.word	0x20006dbc
    a628:	20006dbe 	.word	0x20006dbe
    a62c:	00000b49 	.word	0x00000b49
    a630:	20006dba 	.word	0x20006dba
    a634:	00003589 	.word	0x00003589
    a638:	0000a529 	.word	0x0000a529

0000a63c <main_suspend_action>:
}

void main_suspend_action(void)
{
    a63c:	b580      	push	{r7, lr}
    a63e:	af00      	add	r7, sp, #0
	ui_powerdown();
    a640:	4b01      	ldr	r3, [pc, #4]	; (a648 <main_suspend_action+0xc>)
    a642:	4798      	blx	r3
}
    a644:	46bd      	mov	sp, r7
    a646:	bd80      	pop	{r7, pc}
    a648:	00000a89 	.word	0x00000a89

0000a64c <main_resume_action>:

void main_resume_action(void)
{
    a64c:	b580      	push	{r7, lr}
    a64e:	af00      	add	r7, sp, #0
	ui_wakeup();
    a650:	4b01      	ldr	r3, [pc, #4]	; (a658 <main_resume_action+0xc>)
    a652:	4798      	blx	r3
}
    a654:	46bd      	mov	sp, r7
    a656:	bd80      	pop	{r7, pc}
    a658:	00000ac5 	.word	0x00000ac5

0000a65c <main_sof_action>:

void main_sof_action(void)
{
    a65c:	b580      	push	{r7, lr}
    a65e:	af00      	add	r7, sp, #0
	if ((!main_b_mouse_enable) ||
    a660:	4b14      	ldr	r3, [pc, #80]	; (a6b4 <main_sof_action+0x58>)
    a662:	781b      	ldrb	r3, [r3, #0]
    a664:	b2db      	uxtb	r3, r3
    a666:	2201      	movs	r2, #1
    a668:	4053      	eors	r3, r2
    a66a:	b2db      	uxtb	r3, r3
    a66c:	2b00      	cmp	r3, #0
    a66e:	d117      	bne.n	a6a0 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
    a670:	4b11      	ldr	r3, [pc, #68]	; (a6b8 <main_sof_action+0x5c>)
    a672:	781b      	ldrb	r3, [r3, #0]
    a674:	b2db      	uxtb	r3, r3
    a676:	2201      	movs	r2, #1
    a678:	4053      	eors	r3, r2
    a67a:	b2db      	uxtb	r3, r3
	ui_wakeup();
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
    a67c:	2b00      	cmp	r3, #0
    a67e:	d10f      	bne.n	a6a0 <main_sof_action+0x44>
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a680:	4b0e      	ldr	r3, [pc, #56]	; (a6bc <main_sof_action+0x60>)
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	b2db      	uxtb	r3, r3
    a686:	2201      	movs	r2, #1
    a688:	4053      	eors	r3, r2
    a68a:	b2db      	uxtb	r3, r3
}

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
    a68c:	2b00      	cmp	r3, #0
    a68e:	d107      	bne.n	a6a0 <main_sof_action+0x44>
		(!main_b_keyboard_enable) ||
		(!main_b_cdc_enable))
    a690:	4b0b      	ldr	r3, [pc, #44]	; (a6c0 <main_sof_action+0x64>)
    a692:	781b      	ldrb	r3, [r3, #0]
    a694:	b2db      	uxtb	r3, r3
    a696:	2201      	movs	r2, #1
    a698:	4053      	eors	r3, r2
    a69a:	b2db      	uxtb	r3, r3

void main_sof_action(void)
{
	if ((!main_b_mouse_enable) ||
		(!main_b_msc_enable) ||
		(!main_b_keyboard_enable) ||
    a69c:	2b00      	cmp	r3, #0
    a69e:	d000      	beq.n	a6a2 <main_sof_action+0x46>
		(!main_b_cdc_enable))
		return;
    a6a0:	e005      	b.n	a6ae <main_sof_action+0x52>
	ui_process(udd_get_frame_number());
    a6a2:	4b08      	ldr	r3, [pc, #32]	; (a6c4 <main_sof_action+0x68>)
    a6a4:	4798      	blx	r3
    a6a6:	1c03      	adds	r3, r0, #0
    a6a8:	1c18      	adds	r0, r3, #0
    a6aa:	4b07      	ldr	r3, [pc, #28]	; (a6c8 <main_sof_action+0x6c>)
    a6ac:	4798      	blx	r3
}
    a6ae:	46bd      	mov	sp, r7
    a6b0:	bd80      	pop	{r7, pc}
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	20006db9 	.word	0x20006db9
    a6b8:	20006dba 	.word	0x20006dba
    a6bc:	20006db8 	.word	0x20006db8
    a6c0:	20006dbb 	.word	0x20006dbb
    a6c4:	000074f9 	.word	0x000074f9
    a6c8:	00000b49 	.word	0x00000b49

0000a6cc <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    a6cc:	b580      	push	{r7, lr}
    a6ce:	af00      	add	r7, sp, #0
	ui_wakeup_enable();
    a6d0:	4b01      	ldr	r3, [pc, #4]	; (a6d8 <main_remotewakeup_enable+0xc>)
    a6d2:	4798      	blx	r3
}
    a6d4:	46bd      	mov	sp, r7
    a6d6:	bd80      	pop	{r7, pc}
    a6d8:	00000a9d 	.word	0x00000a9d

0000a6dc <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	af00      	add	r7, sp, #0
	ui_wakeup_disable();
    a6e0:	4b01      	ldr	r3, [pc, #4]	; (a6e8 <main_remotewakeup_disable+0xc>)
    a6e2:	4798      	blx	r3
}
    a6e4:	46bd      	mov	sp, r7
    a6e6:	bd80      	pop	{r7, pc}
    a6e8:	00000ab1 	.word	0x00000ab1

0000a6ec <main_extra_string>:
 * Manufacture, Product and serial number ID.
 *
 * return true, if the string ID requested is know and managed by this functions
 */
bool main_extra_string(void)
{
    a6ec:	b580      	push	{r7, lr}
    a6ee:	b084      	sub	sp, #16
    a6f0:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
    a6f2:	1dfb      	adds	r3, r7, #7
    a6f4:	2200      	movs	r2, #0
    a6f6:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    a6f8:	4b36      	ldr	r3, [pc, #216]	; (a7d4 <main_extra_string+0xe8>)
    a6fa:	885b      	ldrh	r3, [r3, #2]
    a6fc:	1c1a      	adds	r2, r3, #0
    a6fe:	23ff      	movs	r3, #255	; 0xff
    a700:	4013      	ands	r3, r2
    a702:	2b05      	cmp	r3, #5
    a704:	d00e      	beq.n	a724 <main_extra_string+0x38>
    a706:	dc02      	bgt.n	a70e <main_extra_string+0x22>
    a708:	2b04      	cmp	r3, #4
    a70a:	d005      	beq.n	a718 <main_extra_string+0x2c>
    a70c:	e01c      	b.n	a748 <main_extra_string+0x5c>
    a70e:	2b06      	cmp	r3, #6
    a710:	d00e      	beq.n	a730 <main_extra_string+0x44>
    a712:	2b07      	cmp	r3, #7
    a714:	d012      	beq.n	a73c <main_extra_string+0x50>
    a716:	e017      	b.n	a748 <main_extra_string+0x5c>
	case UDI_CDC_IAD_STRING_ID:
		str_lgt = sizeof(udi_cdc_name)-1;
    a718:	1dfb      	adds	r3, r7, #7
    a71a:	220d      	movs	r2, #13
    a71c:	701a      	strb	r2, [r3, #0]
		str = udi_cdc_name;
    a71e:	4b2e      	ldr	r3, [pc, #184]	; (a7d8 <main_extra_string+0xec>)
    a720:	60bb      	str	r3, [r7, #8]
		break;
    a722:	e013      	b.n	a74c <main_extra_string+0x60>
	case UDI_MSC_STRING_ID:
		str_lgt = sizeof(udi_msc_name)-1;
    a724:	1dfb      	adds	r3, r7, #7
    a726:	220d      	movs	r2, #13
    a728:	701a      	strb	r2, [r3, #0]
		str = udi_msc_name;
    a72a:	4b2c      	ldr	r3, [pc, #176]	; (a7dc <main_extra_string+0xf0>)
    a72c:	60bb      	str	r3, [r7, #8]
		break;
    a72e:	e00d      	b.n	a74c <main_extra_string+0x60>
	case UDI_HID_MOUSE_STRING_ID:
		str_lgt = sizeof(udi_hid_mouse_name)-1;
    a730:	1dfb      	adds	r3, r7, #7
    a732:	2213      	movs	r2, #19
    a734:	701a      	strb	r2, [r3, #0]
		str = udi_hid_mouse_name;
    a736:	4b2a      	ldr	r3, [pc, #168]	; (a7e0 <main_extra_string+0xf4>)
    a738:	60bb      	str	r3, [r7, #8]
		break;
    a73a:	e007      	b.n	a74c <main_extra_string+0x60>
	case UDI_HID_KBD_STRING_ID:
		str_lgt = sizeof(udi_hid_kbd_name)-1;
    a73c:	1dfb      	adds	r3, r7, #7
    a73e:	2216      	movs	r2, #22
    a740:	701a      	strb	r2, [r3, #0]
		str = udi_hid_kbd_name;
    a742:	4b28      	ldr	r3, [pc, #160]	; (a7e4 <main_extra_string+0xf8>)
    a744:	60bb      	str	r3, [r7, #8]
		break;
    a746:	e001      	b.n	a74c <main_extra_string+0x60>
	default:
		return false;
    a748:	2300      	movs	r3, #0
    a74a:	e03e      	b.n	a7ca <main_extra_string+0xde>
	}

	if (str_lgt!=0) {
    a74c:	1dfb      	adds	r3, r7, #7
    a74e:	781b      	ldrb	r3, [r3, #0]
    a750:	2b00      	cmp	r3, #0
    a752:	d02f      	beq.n	a7b4 <main_extra_string+0xc8>
		for( i=0; i<str_lgt; i++) {
    a754:	1c3b      	adds	r3, r7, #0
    a756:	330f      	adds	r3, #15
    a758:	2200      	movs	r2, #0
    a75a:	701a      	strb	r2, [r3, #0]
    a75c:	e013      	b.n	a786 <main_extra_string+0x9a>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    a75e:	1c3b      	adds	r3, r7, #0
    a760:	330f      	adds	r3, #15
    a762:	781b      	ldrb	r3, [r3, #0]
    a764:	1c3a      	adds	r2, r7, #0
    a766:	320f      	adds	r2, #15
    a768:	7812      	ldrb	r2, [r2, #0]
    a76a:	68b9      	ldr	r1, [r7, #8]
    a76c:	188a      	adds	r2, r1, r2
    a76e:	7812      	ldrb	r2, [r2, #0]
    a770:	491d      	ldr	r1, [pc, #116]	; (a7e8 <main_extra_string+0xfc>)
    a772:	005b      	lsls	r3, r3, #1
    a774:	18cb      	adds	r3, r1, r3
    a776:	805a      	strh	r2, [r3, #2]
	default:
		return false;
	}

	if (str_lgt!=0) {
		for( i=0; i<str_lgt; i++) {
    a778:	1c3b      	adds	r3, r7, #0
    a77a:	330f      	adds	r3, #15
    a77c:	781a      	ldrb	r2, [r3, #0]
    a77e:	1c3b      	adds	r3, r7, #0
    a780:	330f      	adds	r3, #15
    a782:	3201      	adds	r2, #1
    a784:	701a      	strb	r2, [r3, #0]
    a786:	1c3a      	adds	r2, r7, #0
    a788:	320f      	adds	r2, #15
    a78a:	1dfb      	adds	r3, r7, #7
    a78c:	7812      	ldrb	r2, [r2, #0]
    a78e:	781b      	ldrb	r3, [r3, #0]
    a790:	429a      	cmp	r2, r3
    a792:	d3e4      	bcc.n	a75e <main_extra_string+0x72>
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		extra_strings_desc.header.bLength = 2+ (str_lgt)*2;
    a794:	1dfb      	adds	r3, r7, #7
    a796:	781b      	ldrb	r3, [r3, #0]
    a798:	3301      	adds	r3, #1
    a79a:	b2db      	uxtb	r3, r3
    a79c:	18db      	adds	r3, r3, r3
    a79e:	b2da      	uxtb	r2, r3
    a7a0:	4b11      	ldr	r3, [pc, #68]	; (a7e8 <main_extra_string+0xfc>)
    a7a2:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
    a7a4:	4b10      	ldr	r3, [pc, #64]	; (a7e8 <main_extra_string+0xfc>)
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	1c1a      	adds	r2, r3, #0
    a7aa:	4b0a      	ldr	r3, [pc, #40]	; (a7d4 <main_extra_string+0xe8>)
    a7ac:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
    a7ae:	4b09      	ldr	r3, [pc, #36]	; (a7d4 <main_extra_string+0xe8>)
    a7b0:	4a0d      	ldr	r2, [pc, #52]	; (a7e8 <main_extra_string+0xfc>)
    a7b2:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength) {
    a7b4:	4b07      	ldr	r3, [pc, #28]	; (a7d4 <main_extra_string+0xe8>)
    a7b6:	899a      	ldrh	r2, [r3, #12]
    a7b8:	4b06      	ldr	r3, [pc, #24]	; (a7d4 <main_extra_string+0xe8>)
    a7ba:	88db      	ldrh	r3, [r3, #6]
    a7bc:	429a      	cmp	r2, r3
    a7be:	d903      	bls.n	a7c8 <main_extra_string+0xdc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    a7c0:	4b04      	ldr	r3, [pc, #16]	; (a7d4 <main_extra_string+0xe8>)
    a7c2:	88da      	ldrh	r2, [r3, #6]
    a7c4:	4b03      	ldr	r3, [pc, #12]	; (a7d4 <main_extra_string+0xe8>)
    a7c6:	819a      	strh	r2, [r3, #12]
	}
	return true;
    a7c8:	2301      	movs	r3, #1
}
    a7ca:	1c18      	adds	r0, r3, #0
    a7cc:	46bd      	mov	sp, r7
    a7ce:	b004      	add	sp, #16
    a7d0:	bd80      	pop	{r7, pc}
    a7d2:	46c0      	nop			; (mov r8, r8)
    a7d4:	20006fc4 	.word	0x20006fc4
    a7d8:	20000260 	.word	0x20000260
    a7dc:	20000270 	.word	0x20000270
    a7e0:	20000280 	.word	0x20000280
    a7e4:	20000294 	.word	0x20000294
    a7e8:	200002ac 	.word	0x200002ac

0000a7ec <main_msc_enable>:

bool main_msc_enable(void)
{
    a7ec:	b580      	push	{r7, lr}
    a7ee:	af00      	add	r7, sp, #0
	main_b_msc_enable = true;
    a7f0:	4b03      	ldr	r3, [pc, #12]	; (a800 <main_msc_enable+0x14>)
    a7f2:	2201      	movs	r2, #1
    a7f4:	701a      	strb	r2, [r3, #0]
	return true;
    a7f6:	2301      	movs	r3, #1
}
    a7f8:	1c18      	adds	r0, r3, #0
    a7fa:	46bd      	mov	sp, r7
    a7fc:	bd80      	pop	{r7, pc}
    a7fe:	46c0      	nop			; (mov r8, r8)
    a800:	20006dba 	.word	0x20006dba

0000a804 <main_msc_disable>:

void main_msc_disable(void)
{
    a804:	b580      	push	{r7, lr}
    a806:	af00      	add	r7, sp, #0
	main_b_msc_enable = false;
    a808:	4b02      	ldr	r3, [pc, #8]	; (a814 <main_msc_disable+0x10>)
    a80a:	2200      	movs	r2, #0
    a80c:	701a      	strb	r2, [r3, #0]
}
    a80e:	46bd      	mov	sp, r7
    a810:	bd80      	pop	{r7, pc}
    a812:	46c0      	nop			; (mov r8, r8)
    a814:	20006dba 	.word	0x20006dba

0000a818 <main_mouse_enable>:

bool main_mouse_enable(void)
{
    a818:	b580      	push	{r7, lr}
    a81a:	af00      	add	r7, sp, #0
	main_b_mouse_enable = true;
    a81c:	4b03      	ldr	r3, [pc, #12]	; (a82c <main_mouse_enable+0x14>)
    a81e:	2201      	movs	r2, #1
    a820:	701a      	strb	r2, [r3, #0]
	return true;
    a822:	2301      	movs	r3, #1
}
    a824:	1c18      	adds	r0, r3, #0
    a826:	46bd      	mov	sp, r7
    a828:	bd80      	pop	{r7, pc}
    a82a:	46c0      	nop			; (mov r8, r8)
    a82c:	20006db9 	.word	0x20006db9

0000a830 <main_mouse_disable>:

void main_mouse_disable(void)
{
    a830:	b580      	push	{r7, lr}
    a832:	af00      	add	r7, sp, #0
	main_b_mouse_enable = false;
    a834:	4b02      	ldr	r3, [pc, #8]	; (a840 <main_mouse_disable+0x10>)
    a836:	2200      	movs	r2, #0
    a838:	701a      	strb	r2, [r3, #0]
}
    a83a:	46bd      	mov	sp, r7
    a83c:	bd80      	pop	{r7, pc}
    a83e:	46c0      	nop			; (mov r8, r8)
    a840:	20006db9 	.word	0x20006db9

0000a844 <main_keyboard_enable>:

bool main_keyboard_enable(void)
{
    a844:	b580      	push	{r7, lr}
    a846:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = true;
    a848:	4b03      	ldr	r3, [pc, #12]	; (a858 <main_keyboard_enable+0x14>)
    a84a:	2201      	movs	r2, #1
    a84c:	701a      	strb	r2, [r3, #0]
	return true;
    a84e:	2301      	movs	r3, #1
}
    a850:	1c18      	adds	r0, r3, #0
    a852:	46bd      	mov	sp, r7
    a854:	bd80      	pop	{r7, pc}
    a856:	46c0      	nop			; (mov r8, r8)
    a858:	20006db8 	.word	0x20006db8

0000a85c <main_keyboard_disable>:

void main_keyboard_disable(void)
{
    a85c:	b580      	push	{r7, lr}
    a85e:	af00      	add	r7, sp, #0
	main_b_keyboard_enable = false;
    a860:	4b02      	ldr	r3, [pc, #8]	; (a86c <main_keyboard_disable+0x10>)
    a862:	2200      	movs	r2, #0
    a864:	701a      	strb	r2, [r3, #0]
}
    a866:	46bd      	mov	sp, r7
    a868:	bd80      	pop	{r7, pc}
    a86a:	46c0      	nop			; (mov r8, r8)
    a86c:	20006db8 	.word	0x20006db8

0000a870 <main_cdc_enable>:

bool main_cdc_enable(uint8_t port)
{
    a870:	b580      	push	{r7, lr}
    a872:	b082      	sub	sp, #8
    a874:	af00      	add	r7, sp, #0
    a876:	1c02      	adds	r2, r0, #0
    a878:	1dfb      	adds	r3, r7, #7
    a87a:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = true;
    a87c:	4b06      	ldr	r3, [pc, #24]	; (a898 <main_cdc_enable+0x28>)
    a87e:	2201      	movs	r2, #1
    a880:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    a882:	1dfb      	adds	r3, r7, #7
    a884:	781b      	ldrb	r3, [r3, #0]
    a886:	1c18      	adds	r0, r3, #0
    a888:	4b04      	ldr	r3, [pc, #16]	; (a89c <main_cdc_enable+0x2c>)
    a88a:	4798      	blx	r3
	return true;
    a88c:	2301      	movs	r3, #1
}
    a88e:	1c18      	adds	r0, r3, #0
    a890:	46bd      	mov	sp, r7
    a892:	b002      	add	sp, #8
    a894:	bd80      	pop	{r7, pc}
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	20006dbb 	.word	0x20006dbb
    a89c:	0000ae35 	.word	0x0000ae35

0000a8a0 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    a8a0:	b580      	push	{r7, lr}
    a8a2:	b082      	sub	sp, #8
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	1c02      	adds	r2, r0, #0
    a8a8:	1dfb      	adds	r3, r7, #7
    a8aa:	701a      	strb	r2, [r3, #0]
	main_b_cdc_enable = false;
    a8ac:	4b05      	ldr	r3, [pc, #20]	; (a8c4 <main_cdc_disable+0x24>)
    a8ae:	2200      	movs	r2, #0
    a8b0:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    a8b2:	1dfb      	adds	r3, r7, #7
    a8b4:	781b      	ldrb	r3, [r3, #0]
    a8b6:	1c18      	adds	r0, r3, #0
    a8b8:	4b03      	ldr	r3, [pc, #12]	; (a8c8 <main_cdc_disable+0x28>)
    a8ba:	4798      	blx	r3
}
    a8bc:	46bd      	mov	sp, r7
    a8be:	b002      	add	sp, #8
    a8c0:	bd80      	pop	{r7, pc}
    a8c2:	46c0      	nop			; (mov r8, r8)
    a8c4:	20006dbb 	.word	0x20006dbb
    a8c8:	0000ae59 	.word	0x0000ae59

0000a8cc <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    a8cc:	b580      	push	{r7, lr}
    a8ce:	b082      	sub	sp, #8
    a8d0:	af00      	add	r7, sp, #0
    a8d2:	1c0a      	adds	r2, r1, #0
    a8d4:	1dfb      	adds	r3, r7, #7
    a8d6:	1c01      	adds	r1, r0, #0
    a8d8:	7019      	strb	r1, [r3, #0]
    a8da:	1dbb      	adds	r3, r7, #6
    a8dc:	701a      	strb	r2, [r3, #0]
	if (b_enable) {
    a8de:	1dbb      	adds	r3, r7, #6
    a8e0:	781b      	ldrb	r3, [r3, #0]
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d005      	beq.n	a8f2 <main_cdc_set_dtr+0x26>
		// Host terminal has open COM
		ui_com_open(port);
    a8e6:	1dfb      	adds	r3, r7, #7
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	1c18      	adds	r0, r3, #0
    a8ec:	4b05      	ldr	r3, [pc, #20]	; (a904 <main_cdc_set_dtr+0x38>)
    a8ee:	4798      	blx	r3
    a8f0:	e004      	b.n	a8fc <main_cdc_set_dtr+0x30>
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    a8f2:	1dfb      	adds	r3, r7, #7
    a8f4:	781b      	ldrb	r3, [r3, #0]
    a8f6:	1c18      	adds	r0, r3, #0
    a8f8:	4b03      	ldr	r3, [pc, #12]	; (a908 <main_cdc_set_dtr+0x3c>)
    a8fa:	4798      	blx	r3
	}
}
    a8fc:	46bd      	mov	sp, r7
    a8fe:	b002      	add	sp, #8
    a900:	bd80      	pop	{r7, pc}
    a902:	46c0      	nop			; (mov r8, r8)
    a904:	00000ad9 	.word	0x00000ad9
    a908:	00000aed 	.word	0x00000aed

0000a90c <memories_initialization>:
	   No additional actions to do */
}
#endif

void memories_initialization(void)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	af00      	add	r7, sp, #0
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    a910:	46bd      	mov	sp, r7
    a912:	bd80      	pop	{r7, pc}

0000a914 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a914:	b580      	push	{r7, lr}
    a916:	b082      	sub	sp, #8
    a918:	af00      	add	r7, sp, #0
    a91a:	1c02      	adds	r2, r0, #0
    a91c:	1dfb      	adds	r3, r7, #7
    a91e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a920:	4b06      	ldr	r3, [pc, #24]	; (a93c <system_interrupt_enable+0x28>)
    a922:	1dfa      	adds	r2, r7, #7
    a924:	7812      	ldrb	r2, [r2, #0]
    a926:	1c11      	adds	r1, r2, #0
    a928:	221f      	movs	r2, #31
    a92a:	400a      	ands	r2, r1
    a92c:	2101      	movs	r1, #1
    a92e:	1c08      	adds	r0, r1, #0
    a930:	4090      	lsls	r0, r2
    a932:	1c02      	adds	r2, r0, #0
    a934:	601a      	str	r2, [r3, #0]
}
    a936:	46bd      	mov	sp, r7
    a938:	b002      	add	sp, #8
    a93a:	bd80      	pop	{r7, pc}
    a93c:	e000e100 	.word	0xe000e100

0000a940 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    a940:	b580      	push	{r7, lr}
    a942:	b082      	sub	sp, #8
    a944:	af00      	add	r7, sp, #0
    a946:	1c02      	adds	r2, r0, #0
    a948:	1dfb      	adds	r3, r7, #7
    a94a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a94c:	4a07      	ldr	r2, [pc, #28]	; (a96c <system_interrupt_disable+0x2c>)
    a94e:	1dfb      	adds	r3, r7, #7
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	1c19      	adds	r1, r3, #0
    a954:	231f      	movs	r3, #31
    a956:	400b      	ands	r3, r1
    a958:	2101      	movs	r1, #1
    a95a:	1c08      	adds	r0, r1, #0
    a95c:	4098      	lsls	r0, r3
    a95e:	1c03      	adds	r3, r0, #0
    a960:	1c19      	adds	r1, r3, #0
    a962:	2380      	movs	r3, #128	; 0x80
    a964:	50d1      	str	r1, [r2, r3]
}
    a966:	46bd      	mov	sp, r7
    a968:	b002      	add	sp, #8
    a96a:	bd80      	pop	{r7, pc}
    a96c:	e000e100 	.word	0xe000e100

0000a970 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a970:	b580      	push	{r7, lr}
    a972:	b084      	sub	sp, #16
    a974:	af00      	add	r7, sp, #0
    a976:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	681b      	ldr	r3, [r3, #0]
    a97c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a97e:	68fb      	ldr	r3, [r7, #12]
    a980:	69db      	ldr	r3, [r3, #28]
    a982:	1e5a      	subs	r2, r3, #1
    a984:	4193      	sbcs	r3, r2
    a986:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a988:	1c18      	adds	r0, r3, #0
    a98a:	46bd      	mov	sp, r7
    a98c:	b004      	add	sp, #16
    a98e:	bd80      	pop	{r7, pc}

0000a990 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a990:	b580      	push	{r7, lr}
    a992:	b082      	sub	sp, #8
    a994:	af00      	add	r7, sp, #0
    a996:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    a998:	46c0      	nop			; (mov r8, r8)
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	1c18      	adds	r0, r3, #0
    a99e:	4b04      	ldr	r3, [pc, #16]	; (a9b0 <_usart_wait_for_sync+0x20>)
    a9a0:	4798      	blx	r3
    a9a2:	1c03      	adds	r3, r0, #0
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d1f8      	bne.n	a99a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a9a8:	46bd      	mov	sp, r7
    a9aa:	b002      	add	sp, #8
    a9ac:	bd80      	pop	{r7, pc}
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	0000a971 	.word	0x0000a971

0000a9b4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a9bc:	687b      	ldr	r3, [r7, #4]
    a9be:	2280      	movs	r2, #128	; 0x80
    a9c0:	05d2      	lsls	r2, r2, #23
    a9c2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	2200      	movs	r2, #0
    a9c8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	22ff      	movs	r2, #255	; 0xff
    a9ce:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	2200      	movs	r2, #0
    a9d4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	2200      	movs	r2, #0
    a9da:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a9dc:	687b      	ldr	r3, [r7, #4]
    a9de:	2296      	movs	r2, #150	; 0x96
    a9e0:	0192      	lsls	r2, r2, #6
    a9e2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a9e4:	687a      	ldr	r2, [r7, #4]
    a9e6:	2324      	movs	r3, #36	; 0x24
    a9e8:	2101      	movs	r1, #1
    a9ea:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    a9ec:	687a      	ldr	r2, [r7, #4]
    a9ee:	2325      	movs	r3, #37	; 0x25
    a9f0:	2101      	movs	r1, #1
    a9f2:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    a9f4:	687a      	ldr	r2, [r7, #4]
    a9f6:	2326      	movs	r3, #38	; 0x26
    a9f8:	2100      	movs	r1, #0
    a9fa:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    a9fc:	687a      	ldr	r2, [r7, #4]
    a9fe:	2327      	movs	r3, #39	; 0x27
    aa00:	2100      	movs	r1, #0
    aa02:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	2200      	movs	r2, #0
    aa08:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    aa0a:	687b      	ldr	r3, [r7, #4]
    aa0c:	2288      	movs	r2, #136	; 0x88
    aa0e:	0352      	lsls	r2, r2, #13
    aa10:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    aa12:	687a      	ldr	r2, [r7, #4]
    aa14:	232c      	movs	r3, #44	; 0x2c
    aa16:	2100      	movs	r1, #0
    aa18:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    aa1a:	687a      	ldr	r2, [r7, #4]
    aa1c:	232d      	movs	r3, #45	; 0x2d
    aa1e:	2100      	movs	r1, #0
    aa20:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    aa22:	687b      	ldr	r3, [r7, #4]
    aa24:	2200      	movs	r2, #0
    aa26:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    aa28:	687b      	ldr	r3, [r7, #4]
    aa2a:	2200      	movs	r2, #0
    aa2c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    aa2e:	687b      	ldr	r3, [r7, #4]
    aa30:	2200      	movs	r2, #0
    aa32:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    aa34:	687b      	ldr	r3, [r7, #4]
    aa36:	2200      	movs	r2, #0
    aa38:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	2200      	movs	r2, #0
    aa3e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    aa40:	687b      	ldr	r3, [r7, #4]
    aa42:	2200      	movs	r2, #0
    aa44:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    aa46:	687b      	ldr	r3, [r7, #4]
    aa48:	2200      	movs	r2, #0
    aa4a:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	2200      	movs	r2, #0
    aa50:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	2200      	movs	r2, #0
    aa56:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    aa58:	687b      	ldr	r3, [r7, #4]
    aa5a:	2200      	movs	r2, #0
    aa5c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    aa5e:	687b      	ldr	r3, [r7, #4]
    aa60:	2213      	movs	r2, #19
    aa62:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	2200      	movs	r2, #0
    aa68:	775a      	strb	r2, [r3, #29]
#endif
}
    aa6a:	46bd      	mov	sp, r7
    aa6c:	b002      	add	sp, #8
    aa6e:	bd80      	pop	{r7, pc}

0000aa70 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    aa70:	b580      	push	{r7, lr}
    aa72:	b084      	sub	sp, #16
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	681b      	ldr	r3, [r3, #0]
    aa7c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	1c18      	adds	r0, r3, #0
    aa84:	4b09      	ldr	r3, [pc, #36]	; (aaac <usart_enable+0x3c>)
    aa86:	4798      	blx	r3
    aa88:	1c03      	adds	r3, r0, #0
    aa8a:	1c18      	adds	r0, r3, #0
    aa8c:	4b08      	ldr	r3, [pc, #32]	; (aab0 <usart_enable+0x40>)
    aa8e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	1c18      	adds	r0, r3, #0
    aa94:	4b07      	ldr	r3, [pc, #28]	; (aab4 <usart_enable+0x44>)
    aa96:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    aa98:	68fb      	ldr	r3, [r7, #12]
    aa9a:	681b      	ldr	r3, [r3, #0]
    aa9c:	2202      	movs	r2, #2
    aa9e:	431a      	orrs	r2, r3
    aaa0:	68fb      	ldr	r3, [r7, #12]
    aaa2:	601a      	str	r2, [r3, #0]
}
    aaa4:	46bd      	mov	sp, r7
    aaa6:	b004      	add	sp, #16
    aaa8:	bd80      	pop	{r7, pc}
    aaaa:	46c0      	nop			; (mov r8, r8)
    aaac:	000052d5 	.word	0x000052d5
    aab0:	0000a915 	.word	0x0000a915
    aab4:	0000a991 	.word	0x0000a991

0000aab8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    aab8:	b580      	push	{r7, lr}
    aaba:	b084      	sub	sp, #16
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    aac0:	687b      	ldr	r3, [r7, #4]
    aac2:	681b      	ldr	r3, [r3, #0]
    aac4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    aac6:	687b      	ldr	r3, [r7, #4]
    aac8:	681b      	ldr	r3, [r3, #0]
    aaca:	1c18      	adds	r0, r3, #0
    aacc:	4b0a      	ldr	r3, [pc, #40]	; (aaf8 <usart_disable+0x40>)
    aace:	4798      	blx	r3
    aad0:	1c03      	adds	r3, r0, #0
    aad2:	1c18      	adds	r0, r3, #0
    aad4:	4b09      	ldr	r3, [pc, #36]	; (aafc <usart_disable+0x44>)
    aad6:	4798      	blx	r3
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    aad8:	687b      	ldr	r3, [r7, #4]
    aada:	1c18      	adds	r0, r3, #0
    aadc:	4b08      	ldr	r3, [pc, #32]	; (ab00 <usart_disable+0x48>)
    aade:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    aae0:	68fb      	ldr	r3, [r7, #12]
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	2202      	movs	r2, #2
    aae6:	1c19      	adds	r1, r3, #0
    aae8:	4391      	bics	r1, r2
    aaea:	1c0a      	adds	r2, r1, #0
    aaec:	68fb      	ldr	r3, [r7, #12]
    aaee:	601a      	str	r2, [r3, #0]
}
    aaf0:	46bd      	mov	sp, r7
    aaf2:	b004      	add	sp, #16
    aaf4:	bd80      	pop	{r7, pc}
    aaf6:	46c0      	nop			; (mov r8, r8)
    aaf8:	000052d5 	.word	0x000052d5
    aafc:	0000a941 	.word	0x0000a941
    ab00:	0000a991 	.word	0x0000a991

0000ab04 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    ab04:	b580      	push	{r7, lr}
    ab06:	b082      	sub	sp, #8
    ab08:	af00      	add	r7, sp, #0
    ab0a:	6078      	str	r0, [r7, #4]
    ab0c:	1c0a      	adds	r2, r1, #0
    ab0e:	1cfb      	adds	r3, r7, #3
    ab10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    ab12:	687a      	ldr	r2, [r7, #4]
    ab14:	2331      	movs	r3, #49	; 0x31
    ab16:	5cd3      	ldrb	r3, [r2, r3]
    ab18:	b2da      	uxtb	r2, r3
    ab1a:	1cfb      	adds	r3, r7, #3
    ab1c:	781b      	ldrb	r3, [r3, #0]
    ab1e:	2101      	movs	r1, #1
    ab20:	1c08      	adds	r0, r1, #0
    ab22:	4098      	lsls	r0, r3
    ab24:	1c03      	adds	r3, r0, #0
    ab26:	b2db      	uxtb	r3, r3
    ab28:	4313      	orrs	r3, r2
    ab2a:	b2db      	uxtb	r3, r3
    ab2c:	b2d9      	uxtb	r1, r3
    ab2e:	687a      	ldr	r2, [r7, #4]
    ab30:	2331      	movs	r3, #49	; 0x31
    ab32:	54d1      	strb	r1, [r2, r3]

}
    ab34:	46bd      	mov	sp, r7
    ab36:	b002      	add	sp, #8
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	46c0      	nop			; (mov r8, r8)

0000ab3c <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    ab3c:	b580      	push	{r7, lr}
    ab3e:	b082      	sub	sp, #8
    ab40:	af00      	add	r7, sp, #0
    ab42:	6078      	str	r0, [r7, #4]
    ab44:	1c0a      	adds	r2, r1, #0
    ab46:	1cfb      	adds	r3, r7, #3
    ab48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    ab4a:	687a      	ldr	r2, [r7, #4]
    ab4c:	2331      	movs	r3, #49	; 0x31
    ab4e:	5cd3      	ldrb	r3, [r2, r3]
    ab50:	b2db      	uxtb	r3, r3
    ab52:	1cfa      	adds	r2, r7, #3
    ab54:	7812      	ldrb	r2, [r2, #0]
    ab56:	2101      	movs	r1, #1
    ab58:	1c08      	adds	r0, r1, #0
    ab5a:	4090      	lsls	r0, r2
    ab5c:	1c02      	adds	r2, r0, #0
    ab5e:	b2d2      	uxtb	r2, r2
    ab60:	43d2      	mvns	r2, r2
    ab62:	b2d2      	uxtb	r2, r2
    ab64:	4013      	ands	r3, r2
    ab66:	b2db      	uxtb	r3, r3
    ab68:	b2d9      	uxtb	r1, r3
    ab6a:	687a      	ldr	r2, [r7, #4]
    ab6c:	2331      	movs	r3, #49	; 0x31
    ab6e:	54d1      	strb	r1, [r2, r3]
}
    ab70:	46bd      	mov	sp, r7
    ab72:	b002      	add	sp, #8
    ab74:	bd80      	pop	{r7, pc}
    ab76:	46c0      	nop			; (mov r8, r8)

0000ab78 <usart_tx_callback>:
 * Called by USART driver when transmit is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_tx_callback(struct usart_module *const module)
{
    ab78:	b580      	push	{r7, lr}
    ab7a:	b082      	sub	sp, #8
    ab7c:	af00      	add	r7, sp, #0
    ab7e:	6078      	str	r0, [r7, #4]
	/* Data ready to be sent */
	if (udi_cdc_is_rx_ready()) {
    ab80:	4b0f      	ldr	r3, [pc, #60]	; (abc0 <usart_tx_callback+0x48>)
    ab82:	4798      	blx	r3
    ab84:	1c03      	adds	r3, r0, #0
    ab86:	2b00      	cmp	r3, #0
    ab88:	d00f      	beq.n	abaa <usart_tx_callback+0x32>
		/* Transmit next data */
		ui_com_rx_start();
    ab8a:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <usart_tx_callback+0x4c>)
    ab8c:	4798      	blx	r3
		tx_data = udi_cdc_getc();
    ab8e:	4b0e      	ldr	r3, [pc, #56]	; (abc8 <usart_tx_callback+0x50>)
    ab90:	4798      	blx	r3
    ab92:	1c03      	adds	r3, r0, #0
    ab94:	b2da      	uxtb	r2, r3
    ab96:	4b0d      	ldr	r3, [pc, #52]	; (abcc <usart_tx_callback+0x54>)
    ab98:	701a      	strb	r2, [r3, #0]
		usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    ab9a:	4a0d      	ldr	r2, [pc, #52]	; (abd0 <usart_tx_callback+0x58>)
    ab9c:	4b0b      	ldr	r3, [pc, #44]	; (abcc <usart_tx_callback+0x54>)
    ab9e:	1c10      	adds	r0, r2, #0
    aba0:	1c19      	adds	r1, r3, #0
    aba2:	2201      	movs	r2, #1
    aba4:	4b0b      	ldr	r3, [pc, #44]	; (abd4 <usart_tx_callback+0x5c>)
    aba6:	4798      	blx	r3
    aba8:	e006      	b.n	abb8 <usart_tx_callback+0x40>
	} else {
		/* Fifo empty then Stop UART transmission */
		usart_disable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    abaa:	4b09      	ldr	r3, [pc, #36]	; (abd0 <usart_tx_callback+0x58>)
    abac:	1c18      	adds	r0, r3, #0
    abae:	2100      	movs	r1, #0
    abb0:	4b09      	ldr	r3, [pc, #36]	; (abd8 <usart_tx_callback+0x60>)
    abb2:	4798      	blx	r3
		ui_com_rx_stop();
    abb4:	4b09      	ldr	r3, [pc, #36]	; (abdc <usart_tx_callback+0x64>)
    abb6:	4798      	blx	r3
	}
}
    abb8:	46bd      	mov	sp, r7
    abba:	b002      	add	sp, #8
    abbc:	bd80      	pop	{r7, pc}
    abbe:	46c0      	nop			; (mov r8, r8)
    abc0:	00001edd 	.word	0x00001edd
    abc4:	00000b01 	.word	0x00000b01
    abc8:	0000203d 	.word	0x0000203d
    abcc:	20006dc0 	.word	0x20006dc0
    abd0:	2000715c 	.word	0x2000715c
    abd4:	00005b75 	.word	0x00005b75
    abd8:	0000ab3d 	.word	0x0000ab3d
    abdc:	00000b09 	.word	0x00000b09

0000abe0 <usart_rx_callback>:
 * Called by USART driver when receiving is complete.
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_rx_callback(struct usart_module *const module)
{
    abe0:	b580      	push	{r7, lr}
    abe2:	b082      	sub	sp, #8
    abe4:	af00      	add	r7, sp, #0
    abe6:	6078      	str	r0, [r7, #4]
	/* Data received */
	ui_com_tx_start();
    abe8:	4b10      	ldr	r3, [pc, #64]	; (ac2c <usart_rx_callback+0x4c>)
    abea:	4798      	blx	r3

	/* Transfer UART RX fifo to CDC TX */
	if (!udi_cdc_is_tx_ready()) {
    abec:	4b10      	ldr	r3, [pc, #64]	; (ac30 <usart_rx_callback+0x50>)
    abee:	4798      	blx	r3
    abf0:	1c03      	adds	r3, r0, #0
    abf2:	2201      	movs	r2, #1
    abf4:	4053      	eors	r3, r2
    abf6:	b2db      	uxtb	r3, r3
    abf8:	2b00      	cmp	r3, #0
    abfa:	d004      	beq.n	ac06 <usart_rx_callback+0x26>
		/* Fifo full */
		udi_cdc_signal_overrun();
    abfc:	4b0d      	ldr	r3, [pc, #52]	; (ac34 <usart_rx_callback+0x54>)
    abfe:	4798      	blx	r3
		ui_com_overflow();
    ac00:	4b0d      	ldr	r3, [pc, #52]	; (ac38 <usart_rx_callback+0x58>)
    ac02:	4798      	blx	r3
    ac04:	e004      	b.n	ac10 <usart_rx_callback+0x30>
	} else {
		udi_cdc_putc(rx_data);
    ac06:	4b0d      	ldr	r3, [pc, #52]	; (ac3c <usart_rx_callback+0x5c>)
    ac08:	781b      	ldrb	r3, [r3, #0]
    ac0a:	1c18      	adds	r0, r3, #0
    ac0c:	4b0c      	ldr	r3, [pc, #48]	; (ac40 <usart_rx_callback+0x60>)
    ac0e:	4798      	blx	r3
	}

	ui_com_tx_stop();
    ac10:	4b0c      	ldr	r3, [pc, #48]	; (ac44 <usart_rx_callback+0x64>)
    ac12:	4798      	blx	r3

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    ac14:	4a0c      	ldr	r2, [pc, #48]	; (ac48 <usart_rx_callback+0x68>)
    ac16:	4b09      	ldr	r3, [pc, #36]	; (ac3c <usart_rx_callback+0x5c>)
    ac18:	1c10      	adds	r0, r2, #0
    ac1a:	1c19      	adds	r1, r3, #0
    ac1c:	2201      	movs	r2, #1
    ac1e:	4b0b      	ldr	r3, [pc, #44]	; (ac4c <usart_rx_callback+0x6c>)
    ac20:	4798      	blx	r3

	return;
    ac22:	46c0      	nop			; (mov r8, r8)
}
    ac24:	46bd      	mov	sp, r7
    ac26:	b002      	add	sp, #8
    ac28:	bd80      	pop	{r7, pc}
    ac2a:	46c0      	nop			; (mov r8, r8)
    ac2c:	00000b11 	.word	0x00000b11
    ac30:	0000217d 	.word	0x0000217d
    ac34:	00001e19 	.word	0x00001e19
    ac38:	00000b21 	.word	0x00000b21
    ac3c:	20006dc1 	.word	0x20006dc1
    ac40:	000022bd 	.word	0x000022bd
    ac44:	00000b19 	.word	0x00000b19
    ac48:	2000715c 	.word	0x2000715c
    ac4c:	00005bc1 	.word	0x00005bc1

0000ac50 <uart_rx_notify>:

void uart_rx_notify(uint8_t port)
{
    ac50:	b580      	push	{r7, lr}
    ac52:	b082      	sub	sp, #8
    ac54:	af00      	add	r7, sp, #0
    ac56:	1c02      	adds	r2, r0, #0
    ac58:	1dfb      	adds	r3, r7, #7
    ac5a:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    ac5c:	4b0b      	ldr	r3, [pc, #44]	; (ac8c <uart_rx_notify+0x3c>)
    ac5e:	4798      	blx	r3
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    ac60:	4b0b      	ldr	r3, [pc, #44]	; (ac90 <uart_rx_notify+0x40>)
    ac62:	1c18      	adds	r0, r3, #0
    ac64:	2100      	movs	r1, #0
    ac66:	4b0b      	ldr	r3, [pc, #44]	; (ac94 <uart_rx_notify+0x44>)
    ac68:	4798      	blx	r3
	tx_data = udi_cdc_getc();
    ac6a:	4b0b      	ldr	r3, [pc, #44]	; (ac98 <uart_rx_notify+0x48>)
    ac6c:	4798      	blx	r3
    ac6e:	1c03      	adds	r3, r0, #0
    ac70:	b2da      	uxtb	r2, r3
    ac72:	4b0a      	ldr	r3, [pc, #40]	; (ac9c <uart_rx_notify+0x4c>)
    ac74:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
    ac76:	4a06      	ldr	r2, [pc, #24]	; (ac90 <uart_rx_notify+0x40>)
    ac78:	4b08      	ldr	r3, [pc, #32]	; (ac9c <uart_rx_notify+0x4c>)
    ac7a:	1c10      	adds	r0, r2, #0
    ac7c:	1c19      	adds	r1, r3, #0
    ac7e:	2201      	movs	r2, #1
    ac80:	4b07      	ldr	r3, [pc, #28]	; (aca0 <uart_rx_notify+0x50>)
    ac82:	4798      	blx	r3
}
    ac84:	46bd      	mov	sp, r7
    ac86:	b002      	add	sp, #8
    ac88:	bd80      	pop	{r7, pc}
    ac8a:	46c0      	nop			; (mov r8, r8)
    ac8c:	00000b01 	.word	0x00000b01
    ac90:	2000715c 	.word	0x2000715c
    ac94:	0000ab05 	.word	0x0000ab05
    ac98:	0000203d 	.word	0x0000203d
    ac9c:	20006dc0 	.word	0x20006dc0
    aca0:	00005b75 	.word	0x00005b75

0000aca4 <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    aca4:	b580      	push	{r7, lr}
    aca6:	b082      	sub	sp, #8
    aca8:	af00      	add	r7, sp, #0
    acaa:	1c02      	adds	r2, r0, #0
    acac:	6039      	str	r1, [r7, #0]
    acae:	1dfb      	adds	r3, r7, #7
    acb0:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    acb2:	4b51      	ldr	r3, [pc, #324]	; (adf8 <uart_config+0x154>)
    acb4:	1c18      	adds	r0, r3, #0
    acb6:	4b51      	ldr	r3, [pc, #324]	; (adfc <uart_config+0x158>)
    acb8:	4798      	blx	r3

	switch (cfg->bCharFormat) {
    acba:	683b      	ldr	r3, [r7, #0]
    acbc:	791b      	ldrb	r3, [r3, #4]
    acbe:	2b01      	cmp	r3, #1
    acc0:	d005      	beq.n	acce <uart_config+0x2a>
    acc2:	2b02      	cmp	r3, #2
    acc4:	d107      	bne.n	acd6 <uart_config+0x32>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    acc6:	4b4c      	ldr	r3, [pc, #304]	; (adf8 <uart_config+0x154>)
    acc8:	2240      	movs	r2, #64	; 0x40
    acca:	729a      	strb	r2, [r3, #10]
		break;
    accc:	e007      	b.n	acde <uart_config+0x3a>

	case CDC_STOP_BITS_1_5:
		usart_conf.stopbits = USART_STOPBITS_1;
    acce:	4b4a      	ldr	r3, [pc, #296]	; (adf8 <uart_config+0x154>)
    acd0:	2200      	movs	r2, #0
    acd2:	729a      	strb	r2, [r3, #10]
		break;
    acd4:	e003      	b.n	acde <uart_config+0x3a>

	case CDC_STOP_BITS_1:
	default:
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
    acd6:	4b48      	ldr	r3, [pc, #288]	; (adf8 <uart_config+0x154>)
    acd8:	2200      	movs	r2, #0
    acda:	729a      	strb	r2, [r3, #10]
		break;
    acdc:	46c0      	nop			; (mov r8, r8)
	}

	switch (cfg->bParityType) {
    acde:	683b      	ldr	r3, [r7, #0]
    ace0:	795b      	ldrb	r3, [r3, #5]
    ace2:	2b02      	cmp	r3, #2
    ace4:	d008      	beq.n	acf8 <uart_config+0x54>
    ace6:	dc02      	bgt.n	acee <uart_config+0x4a>
    ace8:	2b01      	cmp	r3, #1
    acea:	d009      	beq.n	ad00 <uart_config+0x5c>
    acec:	e015      	b.n	ad1a <uart_config+0x76>
    acee:	2b03      	cmp	r3, #3
    acf0:	d00b      	beq.n	ad0a <uart_config+0x66>
    acf2:	2b04      	cmp	r3, #4
    acf4:	d00d      	beq.n	ad12 <uart_config+0x6e>
    acf6:	e010      	b.n	ad1a <uart_config+0x76>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    acf8:	4b3f      	ldr	r3, [pc, #252]	; (adf8 <uart_config+0x154>)
    acfa:	2200      	movs	r2, #0
    acfc:	811a      	strh	r2, [r3, #8]
		break;
    acfe:	e010      	b.n	ad22 <uart_config+0x7e>

	case CDC_PAR_ODD:
		usart_conf.parity = USART_PARITY_ODD;
    ad00:	4b3d      	ldr	r3, [pc, #244]	; (adf8 <uart_config+0x154>)
    ad02:	2280      	movs	r2, #128	; 0x80
    ad04:	0192      	lsls	r2, r2, #6
    ad06:	811a      	strh	r2, [r3, #8]
		break;
    ad08:	e00b      	b.n	ad22 <uart_config+0x7e>

	case CDC_PAR_MARK:
		usart_conf.parity = USART_PARITY_NONE;
    ad0a:	4b3b      	ldr	r3, [pc, #236]	; (adf8 <uart_config+0x154>)
    ad0c:	22ff      	movs	r2, #255	; 0xff
    ad0e:	811a      	strh	r2, [r3, #8]
		break;
    ad10:	e007      	b.n	ad22 <uart_config+0x7e>

	case CDC_PAR_SPACE:
		usart_conf.parity = USART_PARITY_NONE;
    ad12:	4b39      	ldr	r3, [pc, #228]	; (adf8 <uart_config+0x154>)
    ad14:	22ff      	movs	r2, #255	; 0xff
    ad16:	811a      	strh	r2, [r3, #8]
		break;
    ad18:	e003      	b.n	ad22 <uart_config+0x7e>

	case CDC_PAR_NONE:
	default:
		usart_conf.parity = USART_PARITY_NONE;
    ad1a:	4b37      	ldr	r3, [pc, #220]	; (adf8 <uart_config+0x154>)
    ad1c:	22ff      	movs	r2, #255	; 0xff
    ad1e:	811a      	strh	r2, [r3, #8]
		break;
    ad20:	46c0      	nop			; (mov r8, r8)
	}

	switch(cfg->bDataBits) {
    ad22:	683b      	ldr	r3, [r7, #0]
    ad24:	799b      	ldrb	r3, [r3, #6]
    ad26:	2b06      	cmp	r3, #6
    ad28:	d007      	beq.n	ad3a <uart_config+0x96>
    ad2a:	2b07      	cmp	r3, #7
    ad2c:	d009      	beq.n	ad42 <uart_config+0x9e>
    ad2e:	2b05      	cmp	r3, #5
    ad30:	d10b      	bne.n	ad4a <uart_config+0xa6>
	case 5:
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    ad32:	4b31      	ldr	r3, [pc, #196]	; (adf8 <uart_config+0x154>)
    ad34:	2205      	movs	r2, #5
    ad36:	72da      	strb	r2, [r3, #11]
		break;
    ad38:	e00b      	b.n	ad52 <uart_config+0xae>
	case 6:
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    ad3a:	4b2f      	ldr	r3, [pc, #188]	; (adf8 <uart_config+0x154>)
    ad3c:	2206      	movs	r2, #6
    ad3e:	72da      	strb	r2, [r3, #11]
		break;
    ad40:	e007      	b.n	ad52 <uart_config+0xae>
	case 7:
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    ad42:	4b2d      	ldr	r3, [pc, #180]	; (adf8 <uart_config+0x154>)
    ad44:	2207      	movs	r2, #7
    ad46:	72da      	strb	r2, [r3, #11]
		break;
    ad48:	e003      	b.n	ad52 <uart_config+0xae>
	case 8:
	default:
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
    ad4a:	4b2b      	ldr	r3, [pc, #172]	; (adf8 <uart_config+0x154>)
    ad4c:	2200      	movs	r2, #0
    ad4e:	72da      	strb	r2, [r3, #11]
		break;
    ad50:	46c0      	nop			; (mov r8, r8)
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    ad52:	683b      	ldr	r3, [r7, #0]
    ad54:	781a      	ldrb	r2, [r3, #0]
    ad56:	7859      	ldrb	r1, [r3, #1]
    ad58:	0209      	lsls	r1, r1, #8
    ad5a:	430a      	orrs	r2, r1
    ad5c:	7899      	ldrb	r1, [r3, #2]
    ad5e:	0409      	lsls	r1, r1, #16
    ad60:	430a      	orrs	r2, r1
    ad62:	78db      	ldrb	r3, [r3, #3]
    ad64:	061b      	lsls	r3, r3, #24
    ad66:	4313      	orrs	r3, r2
    ad68:	1c1a      	adds	r2, r3, #0
    ad6a:	4b23      	ldr	r3, [pc, #140]	; (adf8 <uart_config+0x154>)
    ad6c:	621a      	str	r2, [r3, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    ad6e:	4b22      	ldr	r3, [pc, #136]	; (adf8 <uart_config+0x154>)
    ad70:	2280      	movs	r2, #128	; 0x80
    ad72:	0352      	lsls	r2, r2, #13
    ad74:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    ad76:	4b20      	ldr	r3, [pc, #128]	; (adf8 <uart_config+0x154>)
    ad78:	4a21      	ldr	r2, [pc, #132]	; (ae00 <uart_config+0x15c>)
    ad7a:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    ad7c:	4b1e      	ldr	r3, [pc, #120]	; (adf8 <uart_config+0x154>)
    ad7e:	4a21      	ldr	r2, [pc, #132]	; (ae04 <uart_config+0x160>)
    ad80:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    ad82:	4b1d      	ldr	r3, [pc, #116]	; (adf8 <uart_config+0x154>)
    ad84:	2201      	movs	r2, #1
    ad86:	4252      	negs	r2, r2
    ad88:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    ad8a:	4b1b      	ldr	r3, [pc, #108]	; (adf8 <uart_config+0x154>)
    ad8c:	2201      	movs	r2, #1
    ad8e:	4252      	negs	r2, r2
    ad90:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_disable(&usart_module_edbg);
    ad92:	4b1d      	ldr	r3, [pc, #116]	; (ae08 <uart_config+0x164>)
    ad94:	1c18      	adds	r0, r3, #0
    ad96:	4b1d      	ldr	r3, [pc, #116]	; (ae0c <uart_config+0x168>)
    ad98:	4798      	blx	r3
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    ad9a:	491b      	ldr	r1, [pc, #108]	; (ae08 <uart_config+0x164>)
    ad9c:	4a1c      	ldr	r2, [pc, #112]	; (ae10 <uart_config+0x16c>)
    ad9e:	4b16      	ldr	r3, [pc, #88]	; (adf8 <uart_config+0x154>)
    ada0:	1c08      	adds	r0, r1, #0
    ada2:	1c11      	adds	r1, r2, #0
    ada4:	1c1a      	adds	r2, r3, #0
    ada6:	4b1b      	ldr	r3, [pc, #108]	; (ae14 <uart_config+0x170>)
    ada8:	4798      	blx	r3
	usart_enable(&usart_module_edbg);
    adaa:	4b17      	ldr	r3, [pc, #92]	; (ae08 <uart_config+0x164>)
    adac:	1c18      	adds	r0, r3, #0
    adae:	4b1a      	ldr	r3, [pc, #104]	; (ae18 <uart_config+0x174>)
    adb0:	4798      	blx	r3

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    adb2:	4a15      	ldr	r2, [pc, #84]	; (ae08 <uart_config+0x164>)
    adb4:	4b19      	ldr	r3, [pc, #100]	; (ae1c <uart_config+0x178>)
    adb6:	1c10      	adds	r0, r2, #0
    adb8:	1c19      	adds	r1, r3, #0
    adba:	2200      	movs	r2, #0
    adbc:	4b18      	ldr	r3, [pc, #96]	; (ae20 <uart_config+0x17c>)
    adbe:	4798      	blx	r3
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
    adc0:	4b11      	ldr	r3, [pc, #68]	; (ae08 <uart_config+0x164>)
    adc2:	1c18      	adds	r0, r3, #0
    adc4:	2100      	movs	r1, #0
    adc6:	4b17      	ldr	r3, [pc, #92]	; (ae24 <uart_config+0x180>)
    adc8:	4798      	blx	r3
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    adca:	4a0f      	ldr	r2, [pc, #60]	; (ae08 <uart_config+0x164>)
    adcc:	4b16      	ldr	r3, [pc, #88]	; (ae28 <uart_config+0x184>)
    adce:	1c10      	adds	r0, r2, #0
    add0:	1c19      	adds	r1, r3, #0
    add2:	2201      	movs	r2, #1
    add4:	4b12      	ldr	r3, [pc, #72]	; (ae20 <uart_config+0x17c>)
    add6:	4798      	blx	r3
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
    add8:	4b0b      	ldr	r3, [pc, #44]	; (ae08 <uart_config+0x164>)
    adda:	1c18      	adds	r0, r3, #0
    addc:	2101      	movs	r1, #1
    adde:	4b11      	ldr	r3, [pc, #68]	; (ae24 <uart_config+0x180>)
    ade0:	4798      	blx	r3
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    ade2:	4a09      	ldr	r2, [pc, #36]	; (ae08 <uart_config+0x164>)
    ade4:	4b11      	ldr	r3, [pc, #68]	; (ae2c <uart_config+0x188>)
    ade6:	1c10      	adds	r0, r2, #0
    ade8:	1c19      	adds	r1, r3, #0
    adea:	2201      	movs	r2, #1
    adec:	4b10      	ldr	r3, [pc, #64]	; (ae30 <uart_config+0x18c>)
    adee:	4798      	blx	r3
}
    adf0:	46bd      	mov	sp, r7
    adf2:	b002      	add	sp, #8
    adf4:	bd80      	pop	{r7, pc}
    adf6:	46c0      	nop			; (mov r8, r8)
    adf8:	2000711c 	.word	0x2000711c
    adfc:	0000a9b5 	.word	0x0000a9b5
    ae00:	00160002 	.word	0x00160002
    ae04:	00170002 	.word	0x00170002
    ae08:	2000715c 	.word	0x2000715c
    ae0c:	0000aab9 	.word	0x0000aab9
    ae10:	42001400 	.word	0x42001400
    ae14:	00005781 	.word	0x00005781
    ae18:	0000aa71 	.word	0x0000aa71
    ae1c:	0000ab79 	.word	0x0000ab79
    ae20:	00005b2d 	.word	0x00005b2d
    ae24:	0000ab05 	.word	0x0000ab05
    ae28:	0000abe1 	.word	0x0000abe1
    ae2c:	20006dc1 	.word	0x20006dc1
    ae30:	00005bc1 	.word	0x00005bc1

0000ae34 <uart_open>:

void uart_open(uint8_t port)
{
    ae34:	b580      	push	{r7, lr}
    ae36:	b082      	sub	sp, #8
    ae38:	af00      	add	r7, sp, #0
    ae3a:	1c02      	adds	r2, r0, #0
    ae3c:	1dfb      	adds	r3, r7, #7
    ae3e:	701a      	strb	r2, [r3, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
    ae40:	4b03      	ldr	r3, [pc, #12]	; (ae50 <uart_open+0x1c>)
    ae42:	1c18      	adds	r0, r3, #0
    ae44:	4b03      	ldr	r3, [pc, #12]	; (ae54 <uart_open+0x20>)
    ae46:	4798      	blx	r3
}
    ae48:	46bd      	mov	sp, r7
    ae4a:	b002      	add	sp, #8
    ae4c:	bd80      	pop	{r7, pc}
    ae4e:	46c0      	nop			; (mov r8, r8)
    ae50:	2000715c 	.word	0x2000715c
    ae54:	0000aa71 	.word	0x0000aa71

0000ae58 <uart_close>:

void uart_close(uint8_t port)
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	1c02      	adds	r2, r0, #0
    ae60:	1dfb      	adds	r3, r7, #7
    ae62:	701a      	strb	r2, [r3, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
    ae64:	4b03      	ldr	r3, [pc, #12]	; (ae74 <uart_close+0x1c>)
    ae66:	1c18      	adds	r0, r3, #0
    ae68:	4b03      	ldr	r3, [pc, #12]	; (ae78 <uart_close+0x20>)
    ae6a:	4798      	blx	r3
}
    ae6c:	46bd      	mov	sp, r7
    ae6e:	b002      	add	sp, #8
    ae70:	bd80      	pop	{r7, pc}
    ae72:	46c0      	nop			; (mov r8, r8)
    ae74:	2000715c 	.word	0x2000715c
    ae78:	0000aab9 	.word	0x0000aab9

0000ae7c <__aeabi_uidiv>:
    ae7c:	2900      	cmp	r1, #0
    ae7e:	d034      	beq.n	aeea <.udivsi3_skip_div0_test+0x6a>

0000ae80 <.udivsi3_skip_div0_test>:
    ae80:	2301      	movs	r3, #1
    ae82:	2200      	movs	r2, #0
    ae84:	b410      	push	{r4}
    ae86:	4288      	cmp	r0, r1
    ae88:	d32c      	bcc.n	aee4 <.udivsi3_skip_div0_test+0x64>
    ae8a:	2401      	movs	r4, #1
    ae8c:	0724      	lsls	r4, r4, #28
    ae8e:	42a1      	cmp	r1, r4
    ae90:	d204      	bcs.n	ae9c <.udivsi3_skip_div0_test+0x1c>
    ae92:	4281      	cmp	r1, r0
    ae94:	d202      	bcs.n	ae9c <.udivsi3_skip_div0_test+0x1c>
    ae96:	0109      	lsls	r1, r1, #4
    ae98:	011b      	lsls	r3, r3, #4
    ae9a:	e7f8      	b.n	ae8e <.udivsi3_skip_div0_test+0xe>
    ae9c:	00e4      	lsls	r4, r4, #3
    ae9e:	42a1      	cmp	r1, r4
    aea0:	d204      	bcs.n	aeac <.udivsi3_skip_div0_test+0x2c>
    aea2:	4281      	cmp	r1, r0
    aea4:	d202      	bcs.n	aeac <.udivsi3_skip_div0_test+0x2c>
    aea6:	0049      	lsls	r1, r1, #1
    aea8:	005b      	lsls	r3, r3, #1
    aeaa:	e7f8      	b.n	ae9e <.udivsi3_skip_div0_test+0x1e>
    aeac:	4288      	cmp	r0, r1
    aeae:	d301      	bcc.n	aeb4 <.udivsi3_skip_div0_test+0x34>
    aeb0:	1a40      	subs	r0, r0, r1
    aeb2:	431a      	orrs	r2, r3
    aeb4:	084c      	lsrs	r4, r1, #1
    aeb6:	42a0      	cmp	r0, r4
    aeb8:	d302      	bcc.n	aec0 <.udivsi3_skip_div0_test+0x40>
    aeba:	1b00      	subs	r0, r0, r4
    aebc:	085c      	lsrs	r4, r3, #1
    aebe:	4322      	orrs	r2, r4
    aec0:	088c      	lsrs	r4, r1, #2
    aec2:	42a0      	cmp	r0, r4
    aec4:	d302      	bcc.n	aecc <.udivsi3_skip_div0_test+0x4c>
    aec6:	1b00      	subs	r0, r0, r4
    aec8:	089c      	lsrs	r4, r3, #2
    aeca:	4322      	orrs	r2, r4
    aecc:	08cc      	lsrs	r4, r1, #3
    aece:	42a0      	cmp	r0, r4
    aed0:	d302      	bcc.n	aed8 <.udivsi3_skip_div0_test+0x58>
    aed2:	1b00      	subs	r0, r0, r4
    aed4:	08dc      	lsrs	r4, r3, #3
    aed6:	4322      	orrs	r2, r4
    aed8:	2800      	cmp	r0, #0
    aeda:	d003      	beq.n	aee4 <.udivsi3_skip_div0_test+0x64>
    aedc:	091b      	lsrs	r3, r3, #4
    aede:	d001      	beq.n	aee4 <.udivsi3_skip_div0_test+0x64>
    aee0:	0909      	lsrs	r1, r1, #4
    aee2:	e7e3      	b.n	aeac <.udivsi3_skip_div0_test+0x2c>
    aee4:	1c10      	adds	r0, r2, #0
    aee6:	bc10      	pop	{r4}
    aee8:	4770      	bx	lr
    aeea:	2800      	cmp	r0, #0
    aeec:	d001      	beq.n	aef2 <.udivsi3_skip_div0_test+0x72>
    aeee:	2000      	movs	r0, #0
    aef0:	43c0      	mvns	r0, r0
    aef2:	b407      	push	{r0, r1, r2}
    aef4:	4802      	ldr	r0, [pc, #8]	; (af00 <.udivsi3_skip_div0_test+0x80>)
    aef6:	a102      	add	r1, pc, #8	; (adr r1, af00 <.udivsi3_skip_div0_test+0x80>)
    aef8:	1840      	adds	r0, r0, r1
    aefa:	9002      	str	r0, [sp, #8]
    aefc:	bd03      	pop	{r0, r1, pc}
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	000000d9 	.word	0x000000d9

0000af04 <__aeabi_uidivmod>:
    af04:	2900      	cmp	r1, #0
    af06:	d0f0      	beq.n	aeea <.udivsi3_skip_div0_test+0x6a>
    af08:	b503      	push	{r0, r1, lr}
    af0a:	f7ff ffb9 	bl	ae80 <.udivsi3_skip_div0_test>
    af0e:	bc0e      	pop	{r1, r2, r3}
    af10:	4342      	muls	r2, r0
    af12:	1a89      	subs	r1, r1, r2
    af14:	4718      	bx	r3
    af16:	46c0      	nop			; (mov r8, r8)

0000af18 <__aeabi_idiv>:
    af18:	2900      	cmp	r1, #0
    af1a:	d041      	beq.n	afa0 <.divsi3_skip_div0_test+0x84>

0000af1c <.divsi3_skip_div0_test>:
    af1c:	b410      	push	{r4}
    af1e:	1c04      	adds	r4, r0, #0
    af20:	404c      	eors	r4, r1
    af22:	46a4      	mov	ip, r4
    af24:	2301      	movs	r3, #1
    af26:	2200      	movs	r2, #0
    af28:	2900      	cmp	r1, #0
    af2a:	d500      	bpl.n	af2e <.divsi3_skip_div0_test+0x12>
    af2c:	4249      	negs	r1, r1
    af2e:	2800      	cmp	r0, #0
    af30:	d500      	bpl.n	af34 <.divsi3_skip_div0_test+0x18>
    af32:	4240      	negs	r0, r0
    af34:	4288      	cmp	r0, r1
    af36:	d32c      	bcc.n	af92 <.divsi3_skip_div0_test+0x76>
    af38:	2401      	movs	r4, #1
    af3a:	0724      	lsls	r4, r4, #28
    af3c:	42a1      	cmp	r1, r4
    af3e:	d204      	bcs.n	af4a <.divsi3_skip_div0_test+0x2e>
    af40:	4281      	cmp	r1, r0
    af42:	d202      	bcs.n	af4a <.divsi3_skip_div0_test+0x2e>
    af44:	0109      	lsls	r1, r1, #4
    af46:	011b      	lsls	r3, r3, #4
    af48:	e7f8      	b.n	af3c <.divsi3_skip_div0_test+0x20>
    af4a:	00e4      	lsls	r4, r4, #3
    af4c:	42a1      	cmp	r1, r4
    af4e:	d204      	bcs.n	af5a <.divsi3_skip_div0_test+0x3e>
    af50:	4281      	cmp	r1, r0
    af52:	d202      	bcs.n	af5a <.divsi3_skip_div0_test+0x3e>
    af54:	0049      	lsls	r1, r1, #1
    af56:	005b      	lsls	r3, r3, #1
    af58:	e7f8      	b.n	af4c <.divsi3_skip_div0_test+0x30>
    af5a:	4288      	cmp	r0, r1
    af5c:	d301      	bcc.n	af62 <.divsi3_skip_div0_test+0x46>
    af5e:	1a40      	subs	r0, r0, r1
    af60:	431a      	orrs	r2, r3
    af62:	084c      	lsrs	r4, r1, #1
    af64:	42a0      	cmp	r0, r4
    af66:	d302      	bcc.n	af6e <.divsi3_skip_div0_test+0x52>
    af68:	1b00      	subs	r0, r0, r4
    af6a:	085c      	lsrs	r4, r3, #1
    af6c:	4322      	orrs	r2, r4
    af6e:	088c      	lsrs	r4, r1, #2
    af70:	42a0      	cmp	r0, r4
    af72:	d302      	bcc.n	af7a <.divsi3_skip_div0_test+0x5e>
    af74:	1b00      	subs	r0, r0, r4
    af76:	089c      	lsrs	r4, r3, #2
    af78:	4322      	orrs	r2, r4
    af7a:	08cc      	lsrs	r4, r1, #3
    af7c:	42a0      	cmp	r0, r4
    af7e:	d302      	bcc.n	af86 <.divsi3_skip_div0_test+0x6a>
    af80:	1b00      	subs	r0, r0, r4
    af82:	08dc      	lsrs	r4, r3, #3
    af84:	4322      	orrs	r2, r4
    af86:	2800      	cmp	r0, #0
    af88:	d003      	beq.n	af92 <.divsi3_skip_div0_test+0x76>
    af8a:	091b      	lsrs	r3, r3, #4
    af8c:	d001      	beq.n	af92 <.divsi3_skip_div0_test+0x76>
    af8e:	0909      	lsrs	r1, r1, #4
    af90:	e7e3      	b.n	af5a <.divsi3_skip_div0_test+0x3e>
    af92:	1c10      	adds	r0, r2, #0
    af94:	4664      	mov	r4, ip
    af96:	2c00      	cmp	r4, #0
    af98:	d500      	bpl.n	af9c <.divsi3_skip_div0_test+0x80>
    af9a:	4240      	negs	r0, r0
    af9c:	bc10      	pop	{r4}
    af9e:	4770      	bx	lr
    afa0:	2800      	cmp	r0, #0
    afa2:	d006      	beq.n	afb2 <.divsi3_skip_div0_test+0x96>
    afa4:	db03      	blt.n	afae <.divsi3_skip_div0_test+0x92>
    afa6:	2000      	movs	r0, #0
    afa8:	43c0      	mvns	r0, r0
    afaa:	0840      	lsrs	r0, r0, #1
    afac:	e001      	b.n	afb2 <.divsi3_skip_div0_test+0x96>
    afae:	2080      	movs	r0, #128	; 0x80
    afb0:	0600      	lsls	r0, r0, #24
    afb2:	b407      	push	{r0, r1, r2}
    afb4:	4802      	ldr	r0, [pc, #8]	; (afc0 <.divsi3_skip_div0_test+0xa4>)
    afb6:	a102      	add	r1, pc, #8	; (adr r1, afc0 <.divsi3_skip_div0_test+0xa4>)
    afb8:	1840      	adds	r0, r0, r1
    afba:	9002      	str	r0, [sp, #8]
    afbc:	bd03      	pop	{r0, r1, pc}
    afbe:	46c0      	nop			; (mov r8, r8)
    afc0:	00000019 	.word	0x00000019

0000afc4 <__aeabi_idivmod>:
    afc4:	2900      	cmp	r1, #0
    afc6:	d0eb      	beq.n	afa0 <.divsi3_skip_div0_test+0x84>
    afc8:	b503      	push	{r0, r1, lr}
    afca:	f7ff ffa7 	bl	af1c <.divsi3_skip_div0_test>
    afce:	bc0e      	pop	{r1, r2, r3}
    afd0:	4342      	muls	r2, r0
    afd2:	1a89      	subs	r1, r1, r2
    afd4:	4718      	bx	r3
    afd6:	46c0      	nop			; (mov r8, r8)

0000afd8 <__aeabi_idiv0>:
    afd8:	4770      	bx	lr
    afda:	46c0      	nop			; (mov r8, r8)

0000afdc <__ctzsi2>:
    afdc:	4241      	negs	r1, r0
    afde:	4008      	ands	r0, r1
    afe0:	211c      	movs	r1, #28
    afe2:	2301      	movs	r3, #1
    afe4:	041b      	lsls	r3, r3, #16
    afe6:	4298      	cmp	r0, r3
    afe8:	d301      	bcc.n	afee <__ctzsi2+0x12>
    afea:	0c00      	lsrs	r0, r0, #16
    afec:	3910      	subs	r1, #16
    afee:	0a1b      	lsrs	r3, r3, #8
    aff0:	4298      	cmp	r0, r3
    aff2:	d301      	bcc.n	aff8 <__ctzsi2+0x1c>
    aff4:	0a00      	lsrs	r0, r0, #8
    aff6:	3908      	subs	r1, #8
    aff8:	091b      	lsrs	r3, r3, #4
    affa:	4298      	cmp	r0, r3
    affc:	d301      	bcc.n	b002 <__ctzsi2+0x26>
    affe:	0900      	lsrs	r0, r0, #4
    b000:	3904      	subs	r1, #4
    b002:	a202      	add	r2, pc, #8	; (adr r2, b00c <__ctzsi2+0x30>)
    b004:	5c10      	ldrb	r0, [r2, r0]
    b006:	1a40      	subs	r0, r0, r1
    b008:	4770      	bx	lr
    b00a:	46c0      	nop			; (mov r8, r8)
    b00c:	1d1d1c1b 	.word	0x1d1d1c1b
    b010:	1e1e1e1e 	.word	0x1e1e1e1e
    b014:	1f1f1f1f 	.word	0x1f1f1f1f
    b018:	1f1f1f1f 	.word	0x1f1f1f1f

0000b01c <__aeabi_lmul>:
    b01c:	469c      	mov	ip, r3
    b01e:	0403      	lsls	r3, r0, #16
    b020:	b5f0      	push	{r4, r5, r6, r7, lr}
    b022:	0c1b      	lsrs	r3, r3, #16
    b024:	0417      	lsls	r7, r2, #16
    b026:	0c3f      	lsrs	r7, r7, #16
    b028:	0c15      	lsrs	r5, r2, #16
    b02a:	1c1e      	adds	r6, r3, #0
    b02c:	1c04      	adds	r4, r0, #0
    b02e:	0c00      	lsrs	r0, r0, #16
    b030:	437e      	muls	r6, r7
    b032:	436b      	muls	r3, r5
    b034:	4347      	muls	r7, r0
    b036:	4345      	muls	r5, r0
    b038:	18fb      	adds	r3, r7, r3
    b03a:	0c30      	lsrs	r0, r6, #16
    b03c:	1818      	adds	r0, r3, r0
    b03e:	4287      	cmp	r7, r0
    b040:	d902      	bls.n	b048 <__aeabi_lmul+0x2c>
    b042:	2380      	movs	r3, #128	; 0x80
    b044:	025b      	lsls	r3, r3, #9
    b046:	18ed      	adds	r5, r5, r3
    b048:	0c03      	lsrs	r3, r0, #16
    b04a:	18ed      	adds	r5, r5, r3
    b04c:	4663      	mov	r3, ip
    b04e:	435c      	muls	r4, r3
    b050:	434a      	muls	r2, r1
    b052:	0436      	lsls	r6, r6, #16
    b054:	0c36      	lsrs	r6, r6, #16
    b056:	18a1      	adds	r1, r4, r2
    b058:	0400      	lsls	r0, r0, #16
    b05a:	1980      	adds	r0, r0, r6
    b05c:	1949      	adds	r1, r1, r5
    b05e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b060 <__libc_init_array>:
    b060:	b570      	push	{r4, r5, r6, lr}
    b062:	4b0e      	ldr	r3, [pc, #56]	; (b09c <__libc_init_array+0x3c>)
    b064:	4d0e      	ldr	r5, [pc, #56]	; (b0a0 <__libc_init_array+0x40>)
    b066:	2400      	movs	r4, #0
    b068:	1aed      	subs	r5, r5, r3
    b06a:	10ad      	asrs	r5, r5, #2
    b06c:	1c1e      	adds	r6, r3, #0
    b06e:	42ac      	cmp	r4, r5
    b070:	d004      	beq.n	b07c <__libc_init_array+0x1c>
    b072:	00a3      	lsls	r3, r4, #2
    b074:	58f3      	ldr	r3, [r6, r3]
    b076:	4798      	blx	r3
    b078:	3401      	adds	r4, #1
    b07a:	e7f8      	b.n	b06e <__libc_init_array+0xe>
    b07c:	f000 f974 	bl	b368 <_init>
    b080:	4b08      	ldr	r3, [pc, #32]	; (b0a4 <__libc_init_array+0x44>)
    b082:	4d09      	ldr	r5, [pc, #36]	; (b0a8 <__libc_init_array+0x48>)
    b084:	2400      	movs	r4, #0
    b086:	1aed      	subs	r5, r5, r3
    b088:	10ad      	asrs	r5, r5, #2
    b08a:	1c1e      	adds	r6, r3, #0
    b08c:	42ac      	cmp	r4, r5
    b08e:	d004      	beq.n	b09a <__libc_init_array+0x3a>
    b090:	00a3      	lsls	r3, r4, #2
    b092:	58f3      	ldr	r3, [r6, r3]
    b094:	4798      	blx	r3
    b096:	3401      	adds	r4, #1
    b098:	e7f8      	b.n	b08c <__libc_init_array+0x2c>
    b09a:	bd70      	pop	{r4, r5, r6, pc}
    b09c:	0000b374 	.word	0x0000b374
    b0a0:	0000b374 	.word	0x0000b374
    b0a4:	0000b374 	.word	0x0000b374
    b0a8:	0000b378 	.word	0x0000b378

0000b0ac <memcpy>:
    b0ac:	b510      	push	{r4, lr}
    b0ae:	2300      	movs	r3, #0
    b0b0:	4293      	cmp	r3, r2
    b0b2:	d003      	beq.n	b0bc <memcpy+0x10>
    b0b4:	5ccc      	ldrb	r4, [r1, r3]
    b0b6:	54c4      	strb	r4, [r0, r3]
    b0b8:	3301      	adds	r3, #1
    b0ba:	e7f9      	b.n	b0b0 <memcpy+0x4>
    b0bc:	bd10      	pop	{r4, pc}

0000b0be <memset>:
    b0be:	1c03      	adds	r3, r0, #0
    b0c0:	1882      	adds	r2, r0, r2
    b0c2:	4293      	cmp	r3, r2
    b0c4:	d002      	beq.n	b0cc <memset+0xe>
    b0c6:	7019      	strb	r1, [r3, #0]
    b0c8:	3301      	adds	r3, #1
    b0ca:	e7fa      	b.n	b0c2 <memset+0x4>
    b0cc:	4770      	bx	lr
    b0ce:	0000      	movs	r0, r0
    b0d0:	2d6e4f22 	.word	0x2d6e4f22
    b0d4:	70696843 	.word	0x70696843
    b0d8:	72695620 	.word	0x72695620
    b0dc:	6c617574 	.word	0x6c617574
    b0e0:	6d654d20 	.word	0x6d654d20
    b0e4:	2279726f 	.word	0x2279726f
    b0e8:	00000000 	.word	0x00000000

0000b0ec <lun_desc>:
    b0ec:	00000dc5 00000de1 00000000 00000e09     ................
    b0fc:	00000e15 00000ec5 00000ef1 0000b0d0     ................
    b10c:	00002c6a 00002c9c 00002c9c 00002c4e     j,...,...,..N,..
    b11c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b12c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b13c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b14c:	00002c9c 00002c9c 00002c54 00002c9c     .,...,..T,...,..
    b15c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b16c:	00002c9c 00002c9c 00002c5a 00002c76     .,...,..Z,..v,..
    b17c:	00002c9c 00002c9c 00002c7c 00002c9c     .,...,..|,...,..
    b18c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b19c:	00002c9c 00002c70 00002c9c 00002c9c     .,..p,...,...,..
    b1ac:	00002c8c 00002c9c 00002c94 00002c9c     .,...,...,...,..
    b1bc:	00002c9c 00002c9c 00002c9c 00002c82     .,...,...,...,..
    b1cc:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b1dc:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b1ec:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b1fc:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b20c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b21c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b22c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b23c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b24c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b25c:	00002c9c 00002c9c 00002c9c 00002c9c     .,...,...,...,..
    b26c:	00002c9c 00002c9c 00002c62 31333231     .,...,..b,..1231
    b27c:	32313332 33323133 00000000 000041d6     23123123.....A..
    b28c:	000041be 000041d6 000041c6 000041d6     .A...A...A...A..
    b29c:	000041b6 000041d6 000041d6 000041d6     .A...A...A...A..
    b2ac:	000041ce 42000800 42000c00 42001000     .A.....B...B...B
    b2bc:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    b2cc:	00000e0d 0000613e 000061bc 000061bc     ....>a...a...a..
    b2dc:	00006162 0000615c 00006168 00006144     ba..\a..ha..Da..
    b2ec:	0000616e 000061a2 00006338 00006388     na...a..8c...c..
    b2fc:	00006388 00006384 0000632a 0000634a     .c...c..*c..Jc..
    b30c:	0000631a 0000635c 0000636e 000063d6     .c..\c..nc...c..
    b31c:	00006404 00006404 00006400 000063d0     .d...d...d...c..
    b32c:	000063dc 000063ca 000063e2 000063e8     .c...c...c...c..
    b33c:	01020300                                ....

0000b340 <_usb_device_irq_bits>:
    b340:	00080004 00800070 01000001 00000200     ....p...........

0000b350 <_usb_endpoint_irq_bits>:
    b350:	60100c03 000090fc 00009112 00009272     ...`........r...
    b360:	0000933a 00009402                       :.......

0000b368 <_init>:
    b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b36a:	46c0      	nop			; (mov r8, r8)
    b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b36e:	bc08      	pop	{r3}
    b370:	469e      	mov	lr, r3
    b372:	4770      	bx	lr

0000b374 <__init_array_start>:
    b374:	000000d9 	.word	0x000000d9

0000b378 <_fini>:
    b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b37a:	46c0      	nop			; (mov r8, r8)
    b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b37e:	bc08      	pop	{r3}
    b380:	469e      	mov	lr, r3
    b382:	4770      	bx	lr

0000b384 <__fini_array_start>:
    b384:	000000b1 	.word	0x000000b1
